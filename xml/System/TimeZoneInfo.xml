<Type Name="TimeZoneInfo" FullName="System.TimeZoneInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9bf169f066a8b7ff359372b5ab4b62607f600cf4" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55310670" /></Metadata><TypeSignature Language="C#" Value="public sealed class TimeZoneInfo : IEquatable&lt;TimeZoneInfo&gt;, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit TimeZoneInfo extends System.Object implements class System.IEquatable`1&lt;class System.TimeZoneInfo&gt;, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.TimeZoneInfo" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TimeZoneInfo&#xA;Implements IDeserializationCallback, IEquatable(Of TimeZoneInfo), ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class TimeZoneInfo sealed : IEquatable&lt;TimeZoneInfo ^&gt;, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type TimeZoneInfo = class&#xA;    interface IEquatable&lt;TimeZoneInfo&gt;&#xA;    interface ISerializable&#xA;    interface IDeserializationCallback" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.TimeZoneInfo&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5;xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt eine beliebige Zeitzone der Erde dar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Zeitzone ist eine geografische Region, in der die gleiche Zeit verwendet wird.  
  
 Die <xref:System.TimeZoneInfo> Klasse bietet erhebliche Verbesserungen gegenüber der <xref:System.TimeZone> Klasse, die nur eingeschränkten Funktionalität bereitstellt.  
  
 Die <xref:System.TimeZone> -Klasse erkennt nur die lokale Zeitzone und Uhrzeiten zwischen Coordinated Universal Time (UTC) und lokale Zeit konvertieren kann. Ein <xref:System.TimeZoneInfo> Objekt kann eine beliebige Zeitzone und Methoden zum Darstellen der <xref:System.TimeZoneInfo> Klasse kann verwendet werden, um die Zeit in einer Zeitzone in die entsprechende Zeit in einer beliebigen anderen Zeitzone zu konvertieren. Die Mitglieder der <xref:System.TimeZoneInfo> Klasse unterstützt die folgenden Vorgänge:  
  
-   Abrufen von einer Zeitzone, die bereits vom Betriebssystem definiert ist.  
  
-   Auflisten von Zeitzonen, die auf einem System verfügbar sind.  
  
-   Konvertieren von Uhrzeiten zwischen verschiedenen Zeitzonen.  
  
-   Erstellen eine neue Zeitzone, die noch nicht vom Betriebssystem definiert ist.  
  
-   Serialisieren eine Zeitzone für den späteren Abruf.  
  
> [!NOTE]
>  Eine Instanz von der <xref:System.TimeZoneInfo> Klasse ist unveränderlich. Nachdem ein Objekt instanziiert wurde, werden nicht die Werte geändert.  
  
 Kann nicht instanziiert ein <xref:System.TimeZoneInfo> -Objekt unter Verwendung der `new` Schlüsselwort. Stattdessen müssen Sie eine Aufrufen der statischen Elemente der <xref:System.TimeZoneInfo> -Klasse in der folgenden Tabelle dargestellt.  
  
|Name des statischen Members|Beschreibung |  
|------------------------|-----------------|  
|<xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>-Methode|Erstellt eine benutzerdefinierte Zeitzone aus der Anwendung bereitgestellten Daten.|  
|<xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A>-Methode|Instanziiert eine Zeitzone, die auf Grundlage seines Bezeichners.|  
|<xref:System.TimeZoneInfo.FromSerializedString%2A>-Methode|Deserialisiert einen String-Wert, um eine zuvor serialisierten Neuerstellen <xref:System.TimeZoneInfo> Objekt.|  
|<xref:System.TimeZoneInfo.GetSystemTimeZones%2A>-Methode|Gibt ein aufzählbares Element <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> von <xref:System.TimeZoneInfo> Objekte, die alle Zeitzonen darstellt, die auf dem lokalen System verfügbar sind.|  
|<xref:System.TimeZoneInfo.Local%2A> -Eigenschaft|Instanziiert eine <xref:System.TimeZoneInfo> Objekt, das die lokale Zeitzone darstellt.|  
|<xref:System.TimeZoneInfo.Utc%2A> -Eigenschaft|Instanziiert eine <xref:System.TimeZoneInfo> Objekt, das die UTC-Zone darstellt.|  
  
 Können Sie die <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> Methode, um eine Zeitzone, die nicht in der Registrierung des lokalen Systems auf Windows-Systemen oder von den Klassen der Zeitzone in definiert ist, erstellt die [ICU-Bibliothek](http://userguide.icu-project.org/datetime/timezone) unter Linux oder MacOS. Anschließend können Sie die <xref:System.TimeZoneInfo.ToSerializedString%2A> Eigenschaft, die Zeitzone Informationen des Objekts als Zeichenfolge zu speichern, die in irgendeiner Form gespeichert werden können, die in der Anwendung verfügbar ist. Können Sie die <xref:System.TimeZoneInfo.FromSerializedString%2A> Methode zum Konvertieren einer serialisierten Zeichenfolge zurück an eine <xref:System.TimeZoneInfo> Objekt.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BaseUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan BaseUtcOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan BaseUtcOffset" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.BaseUtcOffset" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseUtcOffset As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan BaseUtcOffset { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseUtcOffset : TimeSpan" Usage="System.TimeZoneInfo.BaseUtcOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Zeitunterschied zwischen der Standardzeit der aktuellen Zeitzone und der Coordinated Universal Time (UTC) ab.</summary>
        <value>Ein Objekt, das den Zeitunterschied zwischen der Standardzeit der aktuellen Zeitzone und der Coordinated Universal Time (UTC) angibt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Zeitspanne, die zurückgegeben werden, indem die <xref:System.TimeZoneInfo.BaseUtcOffset%2A> Eigenschaft reichen von 14 Stunden (für eine Zeitzone, die 14 Stunden vor der Coordinated Universal Time (UTC) ist) und-14 Stunden (für eine Zeitzone, die 14 Stunden nach UTC). Zeitzonen vor UTC weisen einen positiven Offset; Zeitzonen UTC hinter haben einen negativen Offset.  
  
 Die <xref:System.TimeZoneInfo.BaseUtcOffset%2A> Wert wird als eine ganze Zahl von Minuten dargestellt. Es kann nicht auf eine Anzahl von Minuten enthalten.  
  
> [!NOTE]
>  Da <xref:System.TimeZoneInfo.BaseUtcOffset%2A> ist eine Eigenschaft der <xref:System.TimeZoneInfo> Objekt anstelle der <xref:System.TimeZoneInfo.AdjustmentRule> -Objekt, das <xref:System.TimeZoneInfo> Klasse einen einzelnen Offset von UTC auf alle Anpassungen von einer Zeitzone angewendet. Um eine Zeitzone wiederzugeben, sein Offset von UTC geändert wurde, müssen Sie erstellen eine neue Zeitzone mit dem <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> Methode.  
  
 Die <xref:System.TimeZoneInfo.BaseUtcOffset%2A> Eigenschaft unterscheidet sich von der <xref:System.TimeZoneInfo.GetUtcOffset%2A> -Methode in der folgenden Arten:  
  
-   Die <xref:System.TimeZoneInfo.BaseUtcOffset%2A> Eigenschaft gibt die Differenz zwischen UTC und der Standardzeit der Zeitzone; die <xref:System.TimeZoneInfo.GetUtcOffset%2A> Methode gibt die Differenz zwischen UTC und der Standardzeit der Zeitzone zu einem bestimmten Zeitpunkt rechtzeitig.  
  
-   Die <xref:System.TimeZoneInfo.GetUtcOffset%2A> -Methode stellt die Anwendung von Anpassungsregeln für die Zeitzone; die <xref:System.TimeZoneInfo.BaseUtcOffset%2A> Eigenschaft jedoch nicht.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.TimeZoneInfo.BaseUtcOffset%2A> Eigenschaft, um den Unterschied zwischen der lokalen Uhrzeit und der koordinierten Weltzeit (Coordinated Universal Time, UTC) anzuzeigen.  
  
 [!code-csharp[System.TimeZone2.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#1)]
 [!code-vb[System.TimeZone2.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.TimeZoneInfo.GetUtcOffset" />
      </Docs>
    </Member>
    <Member MemberName="ClearCachedData">
      <MemberSignature Language="C#" Value="public static void ClearCachedData ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearCachedData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ClearCachedData" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ClearCachedData ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ClearCachedData();" />
      <MemberSignature Language="F#" Value="static member ClearCachedData : unit -&gt; unit" Usage="System.TimeZoneInfo.ClearCachedData " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Löscht zwischengespeicherte Zeitzonendaten.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwischengespeicherte Zeitzonendaten enthält Daten für die lokale Zeitzone und der Zone (Coordinated Universal Time, UTC).  
  
 Möglicherweise rufen Sie die `ClearCachedData` Methode, um den Arbeitsspeicher zu reduzieren verwendet wird, in der Anwendung Cache von Zeitzoneninformationen oder die Tatsache widerzuspiegeln, die Zeitzone des lokalen Systems geändert wurde.  
  
 Speichern von Verweisen auf den lokalen und der UTC-Zeitzone wird nicht empfohlen. Nach dem Aufruf von der `ClearCachedData` -Methode, diesen Objektvariablen nicht definierte <xref:System.TimeZoneInfo> Objekte, die Verweise auf nicht mehr sind <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> oder <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>. Z. B. in den folgenden Code, der zweite Aufruf von der <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> -Methode löst eine <xref:System.ArgumentException> da die `local` Variable wird nicht mehr als gleich betrachtet <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.TimeZone2.BestPractices#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.BestPractices/cs/System.TimeZone2.BestPractices.cs#1)]
 [!code-vb[System.TimeZone2.BestPractices#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.BestPractices/vb/System.TimeZone2.BestPractices.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konvertiert eine Zeit in die Zeit in einer bestimmten Zeitzone.</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Konvertieren von Uhrzeiten zwischen Zeitzonen</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTime (DateTime dateTime, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTime(valuetype System.DateTime dateTime, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTime (dateTime, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTime">Das Datum und die Uhrzeit, die konvertiert werden sollen.</param>
        <param name="destinationTimeZone">Die Zeitzone, in die <paramref name="dateTime" /> konvertiert werden soll.</param>
        <summary>Konvertiert eine Zeit in die Zeit in einer bestimmten Zeitzone.</summary>
        <returns>Das Datum und die Uhrzeit in der Zielzeitzone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beim Durchführen der Konvertierung, die <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29> -Methode angewendet wird, alle Anpassungsregeln wirksam in der `destinationTimeZone` Zeitzone.  
  
 Diese Überladung von der <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29> Methode bestimmt der Quellzeitzone aus dem Wert der `dateTime` des Parameters <xref:System.DateTime.Kind%2A> Eigenschaft, wie die folgende Tabelle zeigt.  
  
|Kind-Eigenschaft-Wert|Quellzeitzone|Methodenverhalten|  
|-------------------------|----------------------|---------------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A>|Konvertiert die lokale Zeit in die Zeit in `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A>|Konvertiert Sie in die Uhrzeit in Coordinated Universal Time (UTC) `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Davon ausgegangen, dass <xref:System.TimeZoneInfo.Local%2A>.|Konvertiert die lokale Zeit in die Zeit in `destinationTimeZone`.|  
  
 Die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> Wert wird festgelegt, wie in der folgenden Tabelle gezeigt.  
  
|Bedingung|Kind-Eigenschaft-Wert zurückgegeben|  
|---------------|----------------------------------|  
|`destinationTimeZone` ist <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|`destinationTimeZone` ist <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|Alle anderen Datums-und Uhrzeitwerte und Ziel-Zeitzonen.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 Wenn der Wert des der `dateTime` -Parameter einer mehrdeutigen Ortszeit ist, wird er als Standardzeit interpretiert. Wenn die `dateTime` -Parameter ist eine ungültige lokale Zeit, löst diese Methode eine <xref:System.ArgumentException>.  
  
 Wenn die Konvertierung von `dateTime` führt ein Datum und Uhrzeit-Wert, der älter als <xref:System.DateTime.MinValue?displayProperty=nameWithType> oder später als <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, gibt diese Methode <xref:System.DateTime.MinValue?displayProperty=nameWithType> oder <xref:System.DateTime.MaxValue?displayProperty=nameWithType>bzw.  
  
 Sie können auch die zu oder von UTC konvertieren, durch den Aufruf der <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> und <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A> Methoden.  
  
   
  
## Examples  
 Im folgende Beispiel konvertiert ein Array von Datums-und Uhrzeitwerte in Zeiten, in der Zeitzone Eastern für die USA und Kanada. Es zeigt, dass die Quellzeitzone hängt die <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> Eigenschaft der Quelle der <xref:System.DateTime> Wert. Es veranschaulicht auch, dass die <xref:System.TimeZoneInfo.ConvertTime%2A> Methode nimmt zeitzonenanpassungen berücksichtigt, da die Anpassung der Zeitzone in der Quell- und Zielservern Zeitzonen um 2:00 Uhr auftritt auf dem 7. November 2010.  
  
 [!code-csharp[System.TimeZoneInfo.ConvertTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.converttime/cs/converttime1.cs#1)]
 [!code-vb[System.TimeZoneInfo.ConvertTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.converttime/vb/converttime1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der Wert des <paramref name="dateTime" />-Parameters, der eine ungültige Zeit darstellt.</exception>
        <exception cref="T:System.ArgumentNullException">Der Wert des <paramref name="destinationTimeZone" />-Parameters ist <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Konvertieren von Uhrzeiten zwischen Zeitzonen</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ConvertTime (DateTimeOffset dateTimeOffset, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ConvertTime(valuetype System.DateTimeOffset dateTimeOffset, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ConvertTime(DateTimeOffset dateTimeOffset, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTimeOffset * TimeZoneInfo -&gt; DateTimeOffset" Usage="System.TimeZoneInfo.ConvertTime (dateTimeOffset, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Das Datum und die Uhrzeit, die konvertiert werden sollen.</param>
        <param name="destinationTimeZone">Die Zeitzone, in die <paramref name="dateTime" /> konvertiert werden soll.</param>
        <summary>Konvertiert eine Zeit in die Zeit in einer bestimmten Zeitzone.</summary>
        <returns>Das Datum und die Uhrzeit in der Zielzeitzone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beim Durchführen der Konvertierung, die <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29> -Methode angewendet wird, alle Anpassungsregeln wirksam in der `destinationTimeZone` Zeitzone.  
  
 Diese Überladung, die von der anderen Überladungen der unterscheidet sich die <xref:System.TimeZoneInfo.ConvertTime%2A> Methode durch das Akzeptieren einer <xref:System.DateTimeOffset> Wert als ersten Parameter. Dies gibt Datum und Uhrzeit, als ein Offset von Coordinated Universal Time (UTC) und nicht als Datum und Uhrzeit in einer bestimmten Zeitzone. Daher die `dateTimeOffset` Parameter kann nicht entweder eine mehrdeutige Zeit oder eine ungültige Zeit darstellt.  
  
 Bei der Konvertierung der `dateTimeOffset` Wert, der die Zeit in der Zielzeitzone, die diese Methode berücksichtigt Anpassungsregeln in der Zielzeitzone.  
  
 Wenn die Konvertierung von `dateTimeOffset` führt ein Datum und Uhrzeit-Wert, der älter als <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> oder später als <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>, gibt diese Methode <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> oder <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>bzw.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Array von <xref:System.DateTimeOffset> -Werten in Zeiten in der Zeitzone Eastern für die USA und Kanada. Zeigt, dass die <xref:System.TimeZoneInfo.ConvertTime%2A> Methode nimmt zeitzonenanpassungen berücksichtigt, da die Anpassung der Zeitzone in der Quell- und Zielservern Zeitzonen um 2:00 Uhr auftritt auf dem 7. November 2010.  
  
 [!code-csharp[System.TimeZoneInfo.ConvertTime#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.converttime/cs/converttime2.cs#2)]
 [!code-vb[System.TimeZoneInfo.ConvertTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.converttime/vb/converttime2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der Wert des <paramref name="destinationTimeZone" />-Parameters ist <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Konvertieren von Uhrzeiten zwischen Zeitzonen</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTime (DateTime dateTime, TimeZoneInfo sourceTimeZone, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTime(valuetype System.DateTime dateTime, class System.TimeZoneInfo sourceTimeZone, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo ^ sourceTimeZone, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTime * TimeZoneInfo * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTime (dateTime, sourceTimeZone, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="sourceTimeZone" Type="System.TimeZoneInfo" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTime">Das Datum und die Uhrzeit, die konvertiert werden sollen.</param>
        <param name="sourceTimeZone">Die Zeitzone von <paramref name="dateTime" />.</param>
        <param name="destinationTimeZone">Die Zeitzone, in die <paramref name="dateTime" /> konvertiert werden soll.</param>
        <summary>Konvertiert eine Zeit aus einer Zeitzone in ein andere.</summary>
        <returns>Das Datum und die Uhrzeit in der Zielzeitzone, die dem <paramref name="dateTime" />-Parameter in der Quellzeitzone entsprechen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beim Durchführen der Konvertierung, die <xref:System.TimeZoneInfo.ConvertTime%2A> -Methode angewendet wird, alle Anpassungsregeln wirksam in der `destinationTimeZone` Zeitzone.  
  
 Der Wert des der <xref:System.DateTime.Kind%2A> Eigenschaft der `dateTime` Parameter muss entsprechen, die die `sourceTimeZone` Parameters, wie die folgende Tabelle zeigt.  
  
|DateTime.Kind value|SourceTimeZone Wert|Methodenverhalten|  
|-------------------------|--------------------------|---------------------|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Ist gleich <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|Konvertiert `dateTime` auf das Ziel der Zeitzone.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Ist nicht gleich <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|Löst ein <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Ist gleich <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|Konvertiert `dateTime` auf das Ziel der Zeitzone.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Ist nicht gleich <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|Löst ein <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Alle.|Konvertiert `dateTime` auf das Ziel der Zeitzone.|  
  
 Sie können auch die zu oder von der koordinierten Weltzeit (UTC) konvertieren, durch den Aufruf der <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> und <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A> Methoden.  
  
 Die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> Wert wird festgelegt, wie in der folgenden Tabelle gezeigt.  
  
|Bedingung|Kind-Eigenschaft-Wert zurückgegeben|  
|---------------|----------------------------------|  
|Das `destinationTimeZone`-Argument lautet <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|Das `destinationTimeZone`-Argument lautet <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|Alle anderen Datums- und Time-Werten, Zeitzonen für die Quelle und Zielzeitzonen.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 Wenn der Wert des der `dateTime` -Parameter ist eine mehrdeutige Zeit in der Quellzeitzone, wird er als Standardzeit interpretiert. Wenn die `dateTime` -Parameter ist eine ungültige Zeit in der Quellzeitzone, löst diese Methode eine <xref:System.ArgumentException>.  
  
 Wenn die Konvertierung von `dateTime` führt ein Datum und Uhrzeit-Wert, der älter als <xref:System.DateTime.MinValue?displayProperty=nameWithType> oder später als <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, gibt diese Methode <xref:System.DateTime.MinValue?displayProperty=nameWithType> oder <xref:System.DateTime.MaxValue?displayProperty=nameWithType>bzw.  
  
 Die <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29> -Methode löst eine <xref:System.ArgumentException> Ausnahme wenn die <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> Eigenschaft der `dateTime` Argument ist <xref:System.DateTimeKind.Local?displayProperty=nameWithType> jedoch `sourceTimeZone` Argument ist kein <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>. Um zu bestimmen, ob der Quellzeitzone der lokalen Zeitzone oder der Coordinated Universal Time Zone ist, testet die Methode hinsichtlich der Verweisgleichheit statt Testen auf Gleichheit Wert mit dem <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29> Methode. Beachten Sie, dass <xref:System.TimeZoneInfo> Objekte, die die lokale Zeitzone darstellen, die durch den Aufruf abgerufen werden, und wählen Sie, die <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> Methode keine Verweisgleichheit verglichen mit <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>. Darüber hinaus <xref:System.TimeZoneInfo> -Objekte, die der lokale oder der Coordinated Universal Time Zone darstellen und, werden abgerufen, indem das Durchlaufen der Auflistung zurückgegeben werden, indem, die <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> Methode keine Verweisgleichheit verglichen mit <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> oder <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>. Als Alternative können Sie erreichen die <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29> Methode.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Verwendung der <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29> Methode, um aus der Hawaiian Standard Time in die lokale Zeit zu konvertieren.  
  
 [!code-csharp[System.TimeZone2.Concepts#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Concepts/CS/TimeZone2Concepts.cs#9)]
 [!code-vb[System.TimeZone2.Concepts#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Concepts/VB/TimeZone2Concepts.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Die <see cref="P:System.DateTime.Kind" />-Eigenschaft des <paramref name="dateTime" />-Parameters ist <see cref="F:System.DateTimeKind.Local" />, aber der <paramref name="sourceTimeZone" />-Parameter entspricht nicht <see cref="F:System.DateTimeKind.Local" />.  
  
- oder - 
Die <see cref="P:System.DateTime.Kind" />-Eigenschaft des <paramref name="dateTime" />-Parameters ist <see cref="F:System.DateTimeKind.Utc" />, aber der <paramref name="sourceTimeZone" />-Parameter entspricht nicht <see cref="P:System.TimeZoneInfo.Utc" />.  
  
- oder - 
Der <paramref name="dateTime" />-Parameter gibt eine ungültige Zeit an (d. h. er stellt eine Zeit dar, die aufgrund der Anpassungsregeln einer Zeitzone nicht vorhanden ist).</exception>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="sourceTimeZone" />-Parameter ist <see langword="null" />.  
  
- oder - 
Der <paramref name="destinationTimeZone" />-Parameter ist <see langword="null" />.</exception>
        <altmember cref="Overload:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId" />
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Konvertieren von Uhrzeiten zwischen Zeitzonen</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTimeBySystemTimeZoneId">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konvertiert eine Zeit auf Grundlage eines Zeitzonenbezeichners in die Zeit in einer anderen Zeitzone.</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Konvertieren von Uhrzeiten zwischen Zeitzonen</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeBySystemTimeZoneId (DateTime dateTime, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeBySystemTimeZoneId(valuetype System.DateTime dateTime, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeBySystemTimeZoneId(DateTime dateTime, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTime * string -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTime, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dateTime">Das Datum und die Uhrzeit, die konvertiert werden sollen.</param>
        <param name="destinationTimeZoneId">Der Bezeichner der Zielzeitzone.</param>
        <summary>Konvertiert eine Zeit auf Grundlage des Bezeichners der Zeitzone in die Zeit in einer anderen Zeitzone.</summary>
        <returns>Das Datum und die Uhrzeit in der Zielzeitzone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beim Durchführen der Konvertierung, die <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> -Methode angewendet wird, alle Anpassungsregeln wirksam in der `destinationTimeZoneId` Zeitzone.  
  
 Diese Überladung entspricht weitgehend dem Aufrufen der <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29> -Methode, mit dem Unterschied, dass Sie die Zielzeitzone durch seinen Bezeichner und nicht durch einen Objektverweis angeben können. Diese Methode ist besonders hilfreich, wenn Sie eine Zeitzone konvertieren müssen, ohne die Zeitzone-Objekt, das es entspricht, abzurufen und Sie müssen nicht wissen, ob die konvertierte Zeit Standard "oder" Sommerzeit ist.  
  
 Die <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%29> Methode bestimmt der Quellzeitzone aus dem Wert der `dateTime` des Parameters <xref:System.DateTime.Kind%2A> Eigenschaft, wie die folgende Tabelle zeigt.  
  
|Kind-Eigenschaft-Wert|Quellzeitzone|Methodenverhalten|  
|-------------------------|----------------------|---------------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A>|Konvertiert die lokale Zeit in die Zeit in `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A>|Konvertiert Sie in die Uhrzeit in Coordinated Universal Time (UTC) `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Davon ausgegangen, dass <xref:System.TimeZoneInfo.Local%2A>.|Konvertiert die lokale Zeit in die Zeit in `destinationTimeZone`.|  
  
 Die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> Wert wird festgelegt, wie in der folgenden Tabelle gezeigt.  
  
|Bedingung|Kind-Eigenschaft-Wert zurückgegeben|  
|---------------|----------------------------------|  
|`destinationTimeZone` ist `TimeZoneInfo.Utc.Id`.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|Alle anderen `destinationTimeZone` Wert.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 Wenn der Wert des der `dateTime` -Parameter einer mehrdeutigen Ortszeit ist, wird er als Standardzeit interpretiert. Wenn die `dateTime` -Parameter ist eine ungültige lokale Zeit, löst diese Methode eine <xref:System.ArgumentException>.  
  
 Wenn die Konvertierung von `dateTime` führt ein Datum und Uhrzeit-Wert, der älter als <xref:System.DateTime.MinValue?displayProperty=nameWithType> oder später als <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, gibt diese Methode <xref:System.DateTime.MinValue?displayProperty=nameWithType> oder <xref:System.DateTime.MaxValue?displayProperty=nameWithType>bzw.  
  
 Diese Methode ruft die Informationen auf der Zeitzone, deren Bezeichner, indem angegeben wird, die `destinationTimeZoneId` Parameter aus der Registrierung auf Windows-Systemen und von der [ICU-Bibliothek](http://userguide.icu-project.org/datetime/timezone) unter Linux und MacOS. Kann nicht abgerufen werden eine Zeitzone-Objekt, das erstellt wird, mit der <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> Methode. Die `destinationTimeZoneId` Parameter muss genau der Zeitzonenbezeichner lang, aber nicht in der Groß-/Kleinschreibung, nach einer erfolgreichen Übereinstimmung ausgeführt; entsprechen, also den Vergleich von `destinationTimeZoneId` Bezeichner mit Zeitzone wird Groß-/Kleinschreibung.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationTimeZoneId" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Der Zeitzonenbezeichner wurde gefunden, aber die Registrierungsdaten sind beschädigt.</exception>
        <exception cref="T:System.Security.SecurityException">Der Prozess verfügt nicht über die erforderlichen Berechtigungen zum Lesen aus dem Registrierungsschlüssel, der die Zeitzoneninformationen enthält.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">Der <paramref name="destinationTimeZoneId" />-Bezeichner wurde auf dem lokalen System nicht gefunden.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Konvertieren von Uhrzeiten zwischen Zeitzonen</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ConvertTimeBySystemTimeZoneId (DateTimeOffset dateTimeOffset, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ConvertTimeBySystemTimeZoneId(valuetype System.DateTimeOffset dateTimeOffset, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTimeOffset,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ConvertTimeBySystemTimeZoneId(DateTimeOffset dateTimeOffset, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTimeOffset * string -&gt; DateTimeOffset" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTimeOffset, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Das Datum und die Uhrzeit, die konvertiert werden sollen.</param>
        <param name="destinationTimeZoneId">Der Bezeichner der Zielzeitzone.</param>
        <summary>Konvertiert eine Zeit auf Grundlage des Bezeichners der Zeitzone in die Zeit in einer anderen Zeitzone.</summary>
        <returns>Das Datum und die Uhrzeit in der Zielzeitzone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beim Durchführen der Konvertierung, die <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> -Methode angewendet wird, alle Anpassungsregeln wirksam in der `destinationTimeZoneId` Zeitzone.  
  
 Diese Überladung entspricht dem Aufrufen der <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29> -Methode, mit dem Unterschied, dass Sie die Zielzeitzone durch seinen Bezeichner und nicht durch einen Objektverweis angeben können. Diese Methode ist besonders hilfreich, wenn Sie eine Zeitzone konvertieren müssen, ohne die Zeitzone-Objekt, das es entspricht, abzurufen und Sie müssen nicht wissen, ob die konvertierte Zeit Standard "oder" Sommerzeit ist.  
  
 Da die `dateTimeOffset` Parameter stellt ein Datum und zusammen mit diesem Zeitpunkt uhrzeitabweichung von Coordinated Universal Time (UTC), kann er keine entweder eine mehrdeutige Zeit oder eine ungültige Zeit darstellen.  
  
 Diese Methode ruft ab, die Zeitzone, deren Bezeichner, indem angegeben wird, die `destinationTimeZoneId` Parameter aus der Registrierung auf Windows-Systemen und von der [ICU-Bibliothek](http://userguide.icu-project.org/datetime/timezone) unter Linux und MacOS. Kann nicht abgerufen werden eine Zeitzone-Objekt, das erstellt wird, mit der <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> Methode. Die `destinationTimeZoneId` Parameter muss genau der Zeitzonenbezeichner lang, aber nicht in der Groß-/Kleinschreibung, nach einer erfolgreichen Übereinstimmung ausgeführt; entsprechen, also den Vergleich von `destinationTimeZoneId` Bezeichner mit Zeitzone wird Groß-/Kleinschreibung.  
  
 Bei der Konvertierung der `dateTimeOffset` Wert, der die Zeit in der Zielzeitzone, die Methode berücksichtigt Anpassungsregeln in der Zielzeitzone.  
  
 Wenn die Konvertierung von `dateTimeOffset` führt ein Datum und Uhrzeit-Wert, der älter als <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> oder später als <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>, gibt diese Methode <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> oder <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>bzw.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationTimeZoneId" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Der Zeitzonenbezeichner wurde gefunden, aber die Registrierungsdaten sind beschädigt.</exception>
        <exception cref="T:System.Security.SecurityException">Der Prozess verfügt nicht über die erforderlichen Berechtigungen zum Lesen aus dem Registrierungsschlüssel, der die Zeitzoneninformationen enthält.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">Der <paramref name="destinationTimeZoneId" />-Bezeichner wurde auf dem lokalen System nicht gefunden.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Konvertieren von Uhrzeiten zwischen Zeitzonen</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeBySystemTimeZoneId (DateTime dateTime, string sourceTimeZoneId, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeBySystemTimeZoneId(valuetype System.DateTime dateTime, string sourceTimeZoneId, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeBySystemTimeZoneId(DateTime dateTime, System::String ^ sourceTimeZoneId, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTime * string * string -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTime, sourceTimeZoneId, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="sourceTimeZoneId" Type="System.String" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dateTime">Das Datum und die Uhrzeit, die konvertiert werden sollen.</param>
        <param name="sourceTimeZoneId">Der Bezeichner der Quellzeitzone.</param>
        <param name="destinationTimeZoneId">Der Bezeichner der Zielzeitzone.</param>
        <summary>Konvertiert eine Zeit auf Grundlage von Zeitzonenbezeichnern von einer Zeitzone in eine andere.</summary>
        <returns>Das Datum und die Uhrzeit in der Zielzeitzone, die dem <paramref name="dateTime" />-Parameter in der Quellzeitzone entsprechen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beim Durchführen der Konvertierung, die <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> -Methode angewendet wird, alle Anpassungsregeln wirksam in der `destinationTimeZoneId` Zeitzone.  
  
 Obwohl es ähnelt der <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> -Methode, die Sie verwenden können <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType> an der Quelle und Ziel Zeitzonen, mit deren IDs anstelle von ihren <xref:System.TimeZoneInfo> Objekte. Diese Methode ist besonders hilfreich, wenn Sie eine Zeitzone konvertieren müssen, ohne die Zeitzone-Objekt, das es entspricht, abzurufen und Sie müssen nicht wissen, ob die konvertierte Zeit Standard "oder" Sommerzeit ist.  
  
 Diese Methode ruft ab, der Zeitzonen, deren Bezeichner sind, die `sourceTimeZoneId` und `destinationTimeZoneId` Parameter aus der Registrierung auf Windows-Systemen und von der [ICU-Bibliothek](http://userguide.icu-project.org/datetime/timezone) unter Linux und MacOS. Kann nicht abgerufen werden Zeitzonenobjekte, die erstellt werden, mit der <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> Methode.  
  
 Der Wert des der <xref:System.DateTime.Kind%2A> Eigenschaft der `dateTime` Parameter muss entsprechen, die die `sourceTimeZoneId` Parameters, wie die folgende Tabelle zeigt.  
  
|DateTime.Kind value|SourceTimeZone Wert|Methodenverhalten|  
|-------------------------|--------------------------|---------------------|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Ist gleich `TimeZoneInfo.Utc.Id`.|Konvertiert `dateTime` auf das Ziel der Zeitzone.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Ist nicht gleich `TimeZoneInfo.Utc.Id`.|Löst ein <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Ist gleich `TimeZoneInfo.Local.Id`.|Konvertiert `dateTime` auf das Ziel der Zeitzone.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Ist nicht gleich `TimeZoneInfo.Local.Id`.|Löst ein <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Alle.|Konvertiert `dateTime` auf das Ziel der Zeitzone.|  
  
 Da sie bei Aufrufen basiert die <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> -Methode, die <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> Methode führt eine Suche Groß-/Kleinschreibung, um die Zeitzonen zu suchen, die entsprechen `sourceTimeZoneId` und `destinationTimeZoneId`.  
  
 Wenn der Wert des der `dateTime` -Parameter ist eine mehrdeutige Zeit in der Quellzeitzone, wird er als Standardzeit interpretiert. Wenn die `dateTime` -Parameter ist eine ungültige Zeit in der Quellzeitzone, löst diese Methode eine <xref:System.ArgumentException>.  
  
 Die <xref:System.DateTime.Kind%2A> -Eigenschaft des zurückgegebenen <xref:System.DateTime> festgelegt ist <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> es sei denn, das die Zielzeitzone Coordinated Universal Time (UTC) ist, bei dem es nastaven NA hodnotu <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType> Methode, um die Zeit anzuzeigen, entspricht der lokalen Systemzeit in acht Städte der Welt.  
  
 [!code-csharp[System.TimeZone2.Conversions#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/System.TimeZone2.Conversions.cs#3)]
 [!code-vb[System.TimeZone2.Conversions#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/System.TimeZone2.Conversions.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Die <see cref="P:System.DateTime.Kind" />-Eigenschaft des <paramref name="dateTime" />-Parameters entspricht nicht der Quellzeitzone.  
  
- oder - 
 <paramref name="dateTime" /> ist eine ungültige Zeit in der Quellzeitzone.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceTimeZoneId" /> ist <see langword="null" />.  
  
- oder -  
 <paramref name="destinationTimeZoneId" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Die Zeitzonenbezeichner wurden gefunden, aber die Registrierungsdaten sind beschädigt.</exception>
        <exception cref="T:System.Security.SecurityException">Der Benutzer hat nicht die Berechtigungen, die dazu erforderlich sind, aus den Registrierungsschlüsseln zu lesen, die Zeitzonendaten enthalten.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">Der <paramref name="sourceTimeZoneId" />-Bezeichner wurde auf dem lokalen System nicht gefunden.  
  
- oder - 
Der <paramref name="destinationTimeZoneId" />-Bezeichner wurde auf dem lokalen System nicht gefunden.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Konvertieren von Uhrzeiten zwischen Zeitzonen</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeFromUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeFromUtc (DateTime dateTime, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeFromUtc(valuetype System.DateTime dateTime, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeFromUtc(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeFromUtc(DateTime dateTime, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeFromUtc : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeFromUtc (dateTime, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTime">Die Coordinated Universal Time (UTC).</param>
        <param name="destinationTimeZone">Die Zeitzone, in die <paramref name="dateTime" /> konvertiert werden soll.</param>
        <summary>Konvertiert eine Coordinated Universal Time (UTC) in die Zeit in einer angegebenen Zeitzone.</summary>
        <returns>Das Datum und die Uhrzeit in der Zielzeitzone. Die <see cref="P:System.DateTime.Kind" />-Eigenschaft ist <see cref="F:System.DateTimeKind.Utc" />, wenn <paramref name="destinationTimeZone" /> den Wert <see cref="P:System.TimeZoneInfo.Utc" /> hat, andernfalls hat die <see cref="P:System.DateTime.Kind" />-Eigenschaft den Wert <see cref="F:System.DateTimeKind.Unspecified" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beim Durchführen der Konvertierung, die <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> -Methode angewendet wird, alle Anpassungsregeln wirksam in der `destinationTimeZone` Zeitzone.  
  
 Das genaue Verhalten dieser Methode abhängig ist, auf dem Wert der <xref:System.DateTime.Kind%2A> Eigenschaft der `dateTime` Parameters, wie die folgende Tabelle zeigt.  
  
|DateTime.Kind-Eigenschaft|Umwandeln|  
|----------------------------|----------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Löst ein <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> oder <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Von der koordinierten Weltzeit (UTC) konvertiert.|  
  
 Wenn die Konvertierung von `dateTime` führt ein Datum und Uhrzeit-Wert, der älter als <xref:System.DateTime.MinValue?displayProperty=nameWithType> oder später als <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, gibt diese Methode <xref:System.DateTime.MinValue?displayProperty=nameWithType> oder <xref:System.DateTime.MaxValue?displayProperty=nameWithType>bzw.  
  
   
  
## Examples  
 Im folgende Beispiel konvertiert die Coordinated Universal Time (UTC) in Central Time.  
  
 [!code-csharp[System.TimeZone2.Concepts#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Concepts/CS/TimeZone2Concepts.cs#8)]
 [!code-vb[System.TimeZone2.Concepts#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Concepts/VB/TimeZone2Concepts.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Die <see cref="P:System.DateTime.Kind" />-Eigenschaft von <paramref name="dateTime" /> ist <see cref="F:System.DateTimeKind.Local" />.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationTimeZone" /> ist <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Konvertieren von Uhrzeiten zwischen Zeitzonen</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTimeToUtc">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konvertiert ein Datum und eine Uhrzeit in Coordinated Universal Time (UTC).</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Konvertieren von Uhrzeiten zwischen Zeitzonen</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTimeToUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeToUtc (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeToUtc(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeToUtc(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeToUtc : DateTime -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeToUtc dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">Das Datum und die Uhrzeit, die konvertiert werden sollen.</param>
        <summary>Konvertiert das angegebene Datum und die Uhrzeit in Coordinated Universal Time (UTC).</summary>
        <returns>Die Coordinated Universal Time (UTC), die dem <paramref name="dateTime" />-Parameter entspricht. Die <see cref="T:System.DateTime" />-Eigenschaft des <see cref="P:System.DateTime.Kind" />-Werts ist immer auf <see cref="F:System.DateTimeKind.Utc" /> festgelegt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der tatsächlich ausgeführte Konvertierung hängt vom Wert des der <xref:System.DateTime.Kind%2A> Eigenschaft der `dateTime` Parameters, wie in der folgenden Tabelle gezeigt.  
  
|DateTime.Kind-Eigenschaft|Umwandeln|  
|----------------------------|----------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Konvertiert von der Ortszeit in Coordinated Universal Time (UTC).|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Geht davon aus `dateTime` Ortszeit ist und von der Ortszeit in UTC konvertiert.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Gibt `dateTime` unverändert.|  
  
 Wenn `dateTime` entspricht einer mehrdeutigen Ortszeit, diese Methode wird davon ausgegangen, dass es sich um standard Ortszeit ist. Wenn `dateTime` entspricht einer ungültigen Ortszeit, löst die Methode eine <xref:System.ArgumentException>.  
  
> [!NOTE]
>  Wenn der aktuelle Computer den lokalen enthält Zeitzone mehrere Anpassungsregeln, diese Überladung von der <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A> Methode kann Ergebnisse zurück, die von unterscheiden die <xref:System.TimeZone.ToUniversalTime%2A?displayProperty=nameWithType> und <xref:System.DateTime.ToUniversalTime%2A?displayProperty=nameWithType> Methoden. <xref:System.TimeZone.ToUniversalTime%2A?displayProperty=nameWithType> Wendet die aktuelle Anpassungsregel auf immer zeitzonenkonvertierung, unabhängig davon, ob `dateTime` innerhalb seines Datumsbereichs liegt. Und bei der Ausführung an [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)], <xref:System.DateTime.ToUniversalTime%2A?displayProperty=nameWithType> auch gilt die aktuelle Anpassungsregel zeitzonenkonvertierung, unabhängig davon, ob `dateTime` innerhalb seines Datumsbereichs liegt.  
  
 Wenn die UTC-Entsprechung der `dateTime` liegt vor <xref:System.DateTime.MinValue?displayProperty=nameWithType> oder höher, <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, gibt diese Methode <xref:System.DateTime.MinValue> oder <xref:System.DateTime.MaxValue>bzw.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Konvertierung der Werte, deren <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, und <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>bzw. Es zeigt auch die Konvertierung mehrdeutig sind und ungültige Häufigkeit.  
  
 [!code-csharp[System.TimeZone2.Conversions#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/System.TimeZone2.Conversions.cs#1)]
 [!code-vb[System.TimeZone2.Conversions#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/System.TimeZone2.Conversions.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see langword="TimeZoneInfo.Local.IsInvalidDateTime(" />
          <paramref name="dateTime" />
          <see langword=")" /> gibt <see langword="true" /> zurück.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Konvertieren von Uhrzeiten zwischen Zeitzonen</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeToUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeToUtc (DateTime dateTime, TimeZoneInfo sourceTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeToUtc(valuetype System.DateTime dateTime, class System.TimeZoneInfo sourceTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeToUtc(DateTime dateTime, TimeZoneInfo ^ sourceTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeToUtc : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeToUtc (dateTime, sourceTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="sourceTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTime">Das Datum und die Uhrzeit, die konvertiert werden sollen.</param>
        <param name="sourceTimeZone">Die Zeitzone von <paramref name="dateTime" />.</param>
        <summary>Konvertiert die Zeit in einer angegebenen Zeitzone in Coordinated Universal Time (UTC).</summary>
        <returns>Die Coordinated Universal Time (UTC), die dem <paramref name="dateTime" />-Parameter entspricht. Die <see cref="T:System.DateTime" />-Eigenschaft des <see cref="P:System.DateTime.Kind" />-Objekts ist immer auf <see cref="F:System.DateTimeKind.Utc" /> festgelegt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.DateTime.Kind%2A> Eigenschaft der `dateTime` entspricht <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> und die `sourceTimeZone` entspricht <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>, gibt diese Methode `dateTime` ohne eine Konvertierung durchzuführen.  
  
 Wenn `dateTime` entspricht einer mehrdeutigen Zeit, diese Methode wird davon ausgegangen, dass es sich um die Standardzeit der Zeitzone für die Quelle ist. Wenn `dateTime` entspricht eine ungültige Zeit, diese Methode löst eine <xref:System.ArgumentException>.  
  
 Wenn der koordinierten Weltzeit (Coordinated Universal Time, UTC)-Äquivalent `dateTime` liegt vor <xref:System.DateTime.MinValue?displayProperty=nameWithType> oder höher, <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, gibt diese Methode <xref:System.DateTime.MinValue> oder <xref:System.DateTime.MaxValue>bzw.  
  
   
  
## Examples  
 Im folgende Beispiel ruft das aktuelle Datum ab, aus dem lokalen System in Coordinated Universal Time (UTC) konvertiert und dann konvertiert, Japanische Normalzeit und schließlich von der Tokio-Normalzeit zurück in die UTC konvertiert. Beachten Sie, dass die beiden UTC-Zeiten identisch sind.  
  
 [!code-csharp[System.TimeZone2.Conversions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/convertdt2.cs#2)]
 [!code-vb[System.TimeZone2.Conversions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/convertdt2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime" />.<see langword="Kind" /> ist <see cref="F:System.DateTimeKind.Utc" />, und <paramref name="sourceTimeZone" /> ist nicht gleich <see cref="P:System.TimeZoneInfo.Utc" />.  
  
- oder - 
 <paramref name="dateTime" />.<see langword="Kind" /> ist <see cref="F:System.DateTimeKind.Local" />, und <paramref name="sourceTimeZone" /> ist nicht gleich <see cref="P:System.TimeZoneInfo.Local" />.  
  
- oder - 
 <paramref name="sourceTimeZone" /><see langword=".IsInvalidDateTime(" /><paramref name="dateTime" /><see langword=")" /> gibt <see langword="true" /> zurück.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceTimeZone" /> ist <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Konvertieren von Uhrzeiten zwischen Zeitzonen</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateCustomTimeZone">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Definiert eine Zeitzone, die auf dem lokalen Computer nicht gefunden wird.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="standardDisplayName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">Der Zeitzonenbezeichner.</param>
        <param name="baseUtcOffset">Ein Objekt, das den Zeitunterschied zwischen dieser Zeitzone und Coordinated Universal Time (UTC) darstellt.</param>
        <param name="displayName">Der Anzeigename der neuen Zeitzone.</param>
        <param name="standardDisplayName">Der Name der Standardzeit der neuen Zeitzone.</param>
        <summary>Erstellt eine benutzerdefinierte Zeitzone mit einem angegebenen Bezeichner, einem Offset von Coordinated Universal Time (UTC), einem Anzeigenamen und einem Anzeigenamen für die Standardzeit.</summary>
        <returns>Die neue Zeitzone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Überladung von der <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%29> Methode eignet sich für die Erstellung einer Zeitzone, die keine Anpassungen (d. h. eine Zeitzone, die keine Sommerzeit unterstützt). Um eine Zeitzone zu definieren, die Anpassungen für die Sommerzeit enthält, verwenden Sie entweder die <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> oder <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> Methode.  
  
 Die folgende Tabelle zeigt die Beziehung zwischen den Parametern, die bereitgestellt werden, die <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> -Methode und die Eigenschaften der <xref:System.TimeZoneInfo> -Objekt, das vom Aufruf Methode zurückgegeben werden.  
  
|CreateCustomTimeZone-parameter|TimeZoneInfo-Eigenschaft|  
|------------------------------------|---------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
  
 In der Regel entsprechen Name der Standardzeit der Zeitzone und ihres Bezeichners. Allerdings muss die Länge des Bezeichners für die Standardzeit der Zeitzone 32 Zeichen nicht überschreiten. Die Zeichenfolge übergeben, um die `displayName` -Parameter folgt einem Standardformat. Der erste Teil der Anzeigename ist der Standardzeit der Zeitzone Basis Offset von Coordinated Universal Time, dies wird durch das Akronym GMT (Greenwich Mean Time), eingeschlossen in Klammern angegeben ist. Dies ist eine Zeichenfolge folgt, die Zeitzone selbst, oder ein oder mehrere Städte, Regionen oder Ländern in der Zeitzone oder beides angibt. Beispiel:  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
   
  
## Examples  
 Das folgende Beispiel erstellt eine benutzerdefinierte Zeitzone für die Regionen Mawson und Holme Bay Antarktis. Dann wird das Ergebnis der Konvertierung von der lokalen Zeit auf die Zeit in der neuen Zeitzone angezeigt.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#1)]
 [!code-vb[System.TimeZone2.CreateTimeZone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="id" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Der <paramref name="id" />-Parameter ist eine leere Zeichenfolge ("").  
  
- oder - 
Der <paramref name="baseUtcOffset" />-Parameter gibt keine ganze Zahl von Minuten an.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Der Wert des <paramref name="baseUtcOffset" />-Parameters ist größer als 14 Stunden oder kleiner als -14 Stunden.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a6af8647-7893-4f29-95a9-d94c65a6e8dd">Gewusst wie: Erstellen von Zeitzonen ohne Anpassungsregeln</related>
      </Docs>
    </Member>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo.AdjustmentRule[] adjustmentRules);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, class System.TimeZoneInfo/AdjustmentRule[] adjustmentRules) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String, daylightDisplayName As String, adjustmentRules As TimeZoneInfo.AdjustmentRule()) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName, System::String ^ daylightDisplayName, cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ adjustmentRules);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string * string * TimeZoneInfo.AdjustmentRule[] -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName, daylightDisplayName, adjustmentRules)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="standardDisplayName" Type="System.String" />
        <Parameter Name="daylightDisplayName" Type="System.String" />
        <Parameter Name="adjustmentRules" Type="System.TimeZoneInfo+AdjustmentRule[]" />
      </Parameters>
      <Docs>
        <param name="id">Der Zeitzonenbezeichner.</param>
        <param name="baseUtcOffset">Ein Objekt, das den Zeitunterschied zwischen dieser Zeitzone und Coordinated Universal Time (UTC) darstellt.</param>
        <param name="displayName">Der Anzeigename der neuen Zeitzone.</param>
        <param name="standardDisplayName">Der Name der Standardzeit der neuen Zeitzone.</param>
        <param name="daylightDisplayName">Der Name der Sommerzeit der neuen Zeitzone.</param>
        <param name="adjustmentRules">Ein Array, das den UTC-Basisoffset für einen bestimmten Zeitraum erhöht.</param>
        <summary>Erstellt eine benutzerdefinierte Zeitzone mit einem angegebenen Bezeichner, einem Offset von Coordinated Universal Time (UTC), einem Anzeigenamen, einem Namen für die Standardzeit, einen Namen für die Sommerzeit und Regeln für die Sommerzeit.</summary>
        <returns>Ein <see cref="T:System.TimeZoneInfo" />-Objekt, das die neue Zeitzone darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Überladung von der <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> Methode eignet sich für die Erstellung einer Zeitzone, die Sommerzeit unterstützt. Um eine Zeitzone zu definieren, die keine Sommerzeit unterstützt, verwenden Sie entweder die <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> oder <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> Methode.  
  
 Die folgende Tabelle zeigt die Beziehung zwischen den Parametern, die bereitgestellt werden, die <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> -Methode und die Mitglieder der der <xref:System.TimeZoneInfo> -Objekt, das vom Aufruf Methode zurückgegeben werden.  
  
|CreateCustomTimeZone-parameter|TimeZoneInfo-Element|  
|------------------------------------|-------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
|`daylightDisplayName`|<xref:System.TimeZoneInfo.DaylightName%2A>|  
|`adjustmentRules`|Ein Array von <xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType> zurückgegebenen Objekte die <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> Methode.|  
  
 In der Regel entsprechen Name der Standardzeit der Zeitzone und ihres Bezeichners. Allerdings muss die Länge des Bezeichners für die Standardzeit der Zeitzone 32 Zeichen nicht überschreiten. Die Zeichenfolge übergeben, um die `displayName` -Parameter folgt einem Standardformat. Der erste Teil der Anzeigename ist der Standardzeit der Zeitzone Basis Offset von Coordinated Universal Time, dies wird durch das Akronym GMT (Greenwich Mean Time), eingeschlossen in Klammern angegeben ist. Dies ist eine Zeichenfolge folgt, die Zeitzone selbst, oder ein oder mehrere Städte, Regionen oder Ländern in der Zeitzone oder beides angibt. Beispiel:  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
 Die `baseUtcOffset` Parameter definiert die benutzerdefinierte Zeitzone Offset von Coordinated Universal Time (UTC) für alle Regeln zur Anpassung der Zeitzone. Das heißt, die <xref:System.TimeZoneInfo> Objektmodell wird vorausgesetzt, dass der Standardzeit der Zeitzone Offset von UTC konstant, während der Lebensdauer der Zeitzone ist und vorhanden ist unabhängig von bestimmten Anpassungsregeln. Um einer Zeitzone widerspiegeln, die den Offset von UTC geändert wurde, müssen Sie ein neues Objekt für die Zeitzone erstellen.  
  
 Anpassungsregeln einer Zeitzone sind wie folgt definiert:  
  
1.  Durch Aufrufen der <xref:System.TimeZoneInfo.TransitionTime.CreateFloatingDateRule%2A> oder <xref:System.TimeZoneInfo.TransitionTime.CreateFixedDateRule%2A> Methode, um das Start- und Enddatum der Zeit bis Übergang für jede Anpassungsregel definieren.  
  
2.  Aufrufen der <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A> Methode für jede Anpassungsregel.  
  
3.  Zuweisen von Anpassungsregeln in ein Array, das als übergeben werden kann die `adjustmentRules` Parameter.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt eine benutzerdefinierte Zeitzone für die Palmer-Station und Anvers Island, in der Antarktis. Anschließend konvertiert der lokalen Zeit auf die Zeit in der neuen Zeitzone und das Ergebnis wird angezeigt.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#2)]
 [!code-vb[System.TimeZone2.CreateTimeZone#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="id" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Der <paramref name="id" />-Parameter ist eine leere Zeichenfolge ("").  
  
- oder - 
Der <paramref name="baseUtcOffset" />-Parameter gibt keine ganze Zahl von Minuten an.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Der Wert des <paramref name="baseUtcOffset" />-Parameters ist größer als 14 Stunden oder kleiner als -14 Stunden.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Die im <paramref name="adjustmentRules" />-Parameter angegebenen Anpassungsregeln überlappen sich.  
  
- oder - 
Die im <paramref name="adjustmentRules" />-Parameter angegebenen Anpassungsregeln sind nicht in chronologischer Reihenfolge.  
  
- oder - 
Mindestens ein <paramref name="adjustmentRules" />-Element ist <see langword="null" />.  
  
- oder - 
Auf ein Datum können mehrere Anpassungsregeln angewendet werden.  
  
- oder - 
Die Summe aus dem <paramref name="baseUtcOffset" />-Parameter und dem <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" />-Wert von einem oder mehreren Objekten im <paramref name="adjustmentRules" />-Array liegt über 14 Stunden oder unter -14 Stunden.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/c52ef192-13a9-435f-8015-3b12eae8c47c">Gewusst wie: Erstellen von Zeitzonen mit Anpassungsregeln</related>
      </Docs>
    </Member>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo.AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, class System.TimeZoneInfo/AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String, daylightDisplayName As String, adjustmentRules As TimeZoneInfo.AdjustmentRule(), disableDaylightSavingTime As Boolean) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName, System::String ^ daylightDisplayName, cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ adjustmentRules, bool disableDaylightSavingTime);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string * string * TimeZoneInfo.AdjustmentRule[] * bool -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName, daylightDisplayName, adjustmentRules, disableDaylightSavingTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="standardDisplayName" Type="System.String" />
        <Parameter Name="daylightDisplayName" Type="System.String" />
        <Parameter Name="adjustmentRules" Type="System.TimeZoneInfo+AdjustmentRule[]" />
        <Parameter Name="disableDaylightSavingTime" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="id">Der Zeitzonenbezeichner.</param>
        <param name="baseUtcOffset">Ein <see cref="T:System.TimeSpan" />-Objekt, das den Zeitunterschied zwischen dieser Zeitzone und Coordinated Universal Time (UTC) darstellt.</param>
        <param name="displayName">Der Anzeigename der neuen Zeitzone.</param>
        <param name="standardDisplayName">Der Name der Standardzeit der neuen Zeitzone.</param>
        <param name="daylightDisplayName">Der Name der Sommerzeit der neuen Zeitzone.</param>
        <param name="adjustmentRules">Ein Array von <see cref="T:System.TimeZoneInfo.AdjustmentRule" />-Objekten, die den UTC-Basisoffset für einen bestimmten Zeitraum erhöhen.</param>
        <param name="disableDaylightSavingTime"><see langword="true" />, um alle Sommerzeitinformationen in <paramref name="adjustmentRules" /> mit dem neuen Objekt zu verwerfen, andernfalls <see langword="false" />.</param>
        <summary>Erstellt eine benutzerdefinierte Zeitzone mit einem angegebenen Bezeichner, einem Offset von Coordinated Universal Time (UTC), einem Anzeigenamen, einem Namen für die Standardzeit, einen Namen für die Sommerzeit, Regeln für die Sommerzeit und einem Wert, der angibt, ob das zurückgegebene Objekt Sommerzeitinformationen darstellt.</summary>
        <returns>Die neue Zeitzone. Wenn der <paramref name="disableDaylightSavingTime" />-Parameter <see langword="true" /> ist, verfügt das zurückgegebene Objekt nicht über Sommerzeitdaten.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Können Sie diese Überladung von der <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> Methode, um eine benutzerdefinierte Zeitzone erstellt, dessen Unterstützung für die Sommerzeit durch Bedingungen zur Laufzeit ermittelt werden kann.  
  
 Die folgende Tabelle zeigt die Beziehung zwischen den Parametern, die bereitgestellt werden, die <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> -Methode und die Mitglieder der der <xref:System.TimeZoneInfo> -Objekt, das vom Aufruf Methode zurückgegeben werden.  
  
|CreateCustomTimeZone-parameter|TimeZoneInfo-Eigenschaft|  
|------------------------------------|---------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
|`daylightDisplayName`|<xref:System.TimeZoneInfo.DaylightName%2A> Wenn `disableDaylightSavingTime` ist `false`; <xref:System.String.Empty?displayProperty=nameWithType> Wenn `disableDaylightSavingTime` ist `true`.|  
|`adjustmentRules`|Ein Array von <xref:System.TimeZoneInfo.AdjustmentRule> zurückgegebenen Objekte die <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> Methode Wenn `disableDaylightSavingTime` ist `false`; ein leeres Array zurückgegeben werden, indem die <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> Methode Wenn `disableDaylightSavingTime` ist `true`.|  
|`disableDaylightSavingTime`|Nicht <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A>.|  
  
 In der Regel entsprechen Name der Standardzeit der Zeitzone und ihres Bezeichners. Allerdings muss die Länge des Bezeichners für die Standardzeit der Zeitzone 32 Zeichen nicht überschreiten. Die Zeichenfolge übergeben, um die `displayName` -Parameter folgt einem Standardformat. Der erste Teil der Anzeigename ist der Standardzeit der Zeitzone Basis Offset von Coordinated Universal Time, dies wird durch das Akronym GMT (Greenwich Mean Time), eingeschlossen in Klammern angegeben ist. Dies ist eine Zeichenfolge folgt, die Zeitzone selbst, oder ein oder mehrere Städte, Regionen oder Ländern in der Zeitzone oder beides angibt. Beispiel:  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
 Anpassungsregeln einer Zeitzone sind wie folgt definiert:  
  
1.  Durch Aufrufen der <xref:System.TimeZoneInfo.TransitionTime.CreateFloatingDateRule%2A> oder <xref:System.TimeZoneInfo.TransitionTime.CreateFixedDateRule%2A> Methode, um das Start- und Enddatum Übergangsregeln für jede Anpassungsregel definieren.  
  
2.  Aufrufen der <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A> Methode für jede Anpassungsregel.  
  
3.  Zuweisen von Anpassungsregeln in ein Array, das als übergeben werden kann die `adjustmentRules` Parameter.  
  
 Wenn `disableDaylightSavingTime` Parameter `false`, die Ausführung der Methode ist identisch mit der <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> überladen. Wenn `disableDaylightSavingTime` ist `true`, das zurückgegebene Objekt enthält keine Anpassungsregeln und einen <xref:System.TimeZoneInfo.DaylightName%2A> Eigenschaft, deren Wert eine leere Zeichenfolge.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt eine benutzerdefinierte Zeitzone für die Palmer-Station und Anvers Island, in der Antarktis. Wird die `disableDaylightSavingTime` Parameter im Aufruf der <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> Methode, um `true`. Es zeigt dann die neue Zeitzone Sommerzeit Namen, sofern vorhanden, und die Anzahl der Regeln zur zeitzonenanpassung berücksichtigt zu bestätigen, dass die neue Zeitzone keine Sommerzeit-Informationen enthält.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#3)]
 [!code-vb[System.TimeZone2.CreateTimeZone#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="id" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Der <paramref name="id" />-Parameter ist eine leere Zeichenfolge ("").  
  
- oder - 
Der <paramref name="baseUtcOffset" />-Parameter gibt keine ganze Zahl von Minuten an.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Der Wert des <paramref name="baseUtcOffset" />-Parameters ist größer als 14 Stunden oder kleiner als -14 Stunden.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Die im <paramref name="adjustmentRules" />-Parameter angegebenen Anpassungsregeln überlappen sich.  
  
- oder - 
Die im <paramref name="adjustmentRules" />-Parameter angegebenen Anpassungsregeln sind nicht in chronologischer Reihenfolge.  
  
- oder - 
Mindestens ein <paramref name="adjustmentRules" />-Element ist <see langword="null" />.  
  
- oder - 
Auf ein Datum können mehrere Anpassungsregeln angewendet werden.  
  
- oder - 
Die Summe aus dem <paramref name="baseUtcOffset" />-Parameter und dem <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" />-Wert von einem oder mehreren Objekten im <paramref name="adjustmentRules" />-Array liegt über 14 Stunden oder unter -14 Stunden.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a6af8647-7893-4f29-95a9-d94c65a6e8dd">Gewusst wie: Erstellen von Zeitzonen ohne Anpassungsregeln</related>
        <related type="Article" href="https://msdn.microsoft.com/library/c52ef192-13a9-435f-8015-3b12eae8c47c">Gewusst wie: Erstellen von Zeitzonen mit Anpassungsregeln</related>
      </Docs>
    </Member>
    <Member MemberName="DaylightName">
      <MemberSignature Language="C#" Value="public string DaylightName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DaylightName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.DaylightName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DaylightName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DaylightName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DaylightName : string" Usage="System.TimeZoneInfo.DaylightName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Anzeigenamen für die Sommerzeit der aktuellen Zeitzone ab.</summary>
        <value>Der Anzeigename für die Sommerzeit der Zeitzone.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Anzeigename wird lokalisiert, basierend auf der Kultur mit dem Windows-Betriebssystem installiert.  
  
 Ein <xref:System.TimeZoneInfo.DaylightName%2A> Eigenschaft, deren Wert nicht <xref:System.String.Empty?displayProperty=nameWithType> oder `null` nicht unbedingt, dass die Zeitzone Sommerzeit unterstützt. Um zu bestimmen, ob die Zeitzone Sommerzeit unterstützt, überprüfen Sie den Wert der seine <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> Eigenschaft.  
  
 In den meisten Fällen die `DaylightName` System definierten Zeitzonen-Eigenschaft ist <xref:System.String.Empty?displayProperty=nameWithType> oder `null`. Allerdings die <xref:System.TimeZoneInfo.DaylightName%2A> Eigenschaft benutzerdefinierter Zeitzonen kann festgelegt werden, um <xref:System.String.Empty?displayProperty=nameWithType>. Dies tritt auf, wenn benutzerdefinierter Zeitzonen von erstellt werden die <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType> oder <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%2CSystem.String%2CSystem.TimeZoneInfo.AdjustmentRule%5B%5D%2CSystem.Boolean%29?displayProperty=nameWithType> überladen und `disableDaylightSavingTime` Parameter `true`. Aus diesem Grund, Ihren Code sollte niemals davon ausgegangen, die den Wert des der <xref:System.TimeZoneInfo.DaylightName%2A> Eigenschaft ist nicht `null` oder leer sein.  
  
 Die <xref:System.TimeZoneInfo.DaylightName%2A> Eigenschaft entspricht der <xref:System.TimeZone.DaylightName%2A> Eigenschaft der <xref:System.TimeZone> Klasse.  
  
   
  
## Examples  
 Das folgende Beispiel definiert eine Methode namens `DisplayDateWithTimeZoneName` , verwendet der <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> Methode, um zu ermitteln, ob der Name der Standardzeit oder Sommerzeit einer Zeitzone angezeigt.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayName : string" Usage="System.TimeZoneInfo.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den allgemeinen Anzeigenamen ab, der die Zeitzone darstellt.</summary>
        <value>Der allgemeine Anzeigename der Zeitzone.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Anzeigename wird lokalisiert, basierend auf der Kultur mit dem Windows-Betriebssystem installiert.  
  
 Zeitzone-Anzeigenamen für die Windows-System-Zeitzonen folgen einem Standardformat. Der erste Teil der Anzeigename ist der Standardzeit der Zeitzone Basis Offset von Coordinated Universal Time, dies wird durch das Akronym GMT (Greenwich Mean Time), eingeschlossen in Klammern angegeben ist. Für Coordinated Universal Time ist das Akronym GMT ohne Offset in Klammern eingeschlossen.  Dies ist eine Zeichenfolge folgt, die Zeitzone oder eine oder mehrere Städte, Regionen oder Ländern in der Zeitzone angibt. Beispiel:  
  
```  
(GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
   
  
## Examples  
 Das folgende Beispiel ruft eine <xref:System.TimeZoneInfo> Objekt, das die lokale Zeitzone darstellt, und gibt die Anzeigenamen, Name der Standardzeit und Sommerzeit Name. Die Ausgabe wird für ein System in den USA angezeigt. „Pacific Standard Time“ (USA) ausgeführt wird.  
  
 [!code-csharp[System.TimeZone2.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/ShowTimeZoneNames1.cs#2)]
 [!code-vb[System.TimeZone2.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/ShowTimeZoneNames1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Bestimmt, ob zwei <see cref="T:System.TimeZoneInfo" />-Objekte gleich sind.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="timeZoneInfo.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Ein zweites Objekt, das mit dem aktuellen Objekt verglichen werden soll.</param>
        <summary>Bestimmt, ob das aktuelle <see cref="T:System.TimeZoneInfo" />-Objekt und ein anderes Objekt gleich sind.</summary>
        <returns><see langword="true" />, wenn <paramref name="obj" /> ein <see cref="T:System.TimeZoneInfo" />-Objekt und gleich der aktuellen Instanz ist; andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode konvertiert oder umgewandelt `obj` zu einem <xref:System.TimeZoneInfo> Objekt aus, und vergleicht ihn mit der aktuellen Instanz. Der Test auf Gleichheit basiert auf einem Vergleich von Werten. Die aktuelle <xref:System.TimeZoneInfo> Instanz und `obj` gelten als gleich in den folgenden Situationen:  
  
-   Der Laufzeittyp des `obj` ist <xref:System.TimeZoneInfo>.  
  
-   Die beiden Objekte verfügen über denselben <xref:System.TimeZoneInfo.Id%2A> -Eigenschaftswert.  
  
-   Die beiden Objekte haben die gleichen Anpassungsregeln.  
  
 Wenn `obj` gleich `null` ist, gibt die Methode `false` zurück.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.TimeZoneInfo.Equals%28System.Object%29> Methode, um zu bestimmen, ob die lokale Zeitzone Pacific Time oder Eastern Time.  
  
 [!code-csharp[System.TimeZoneInfo.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.equals/cs/equals1.cs#1)]
 [!code-vb[System.TimeZoneInfo.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.equals/vb/equals1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (TimeZoneInfo other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.TimeZoneInfo other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.Equals(System.TimeZoneInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As TimeZoneInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(TimeZoneInfo ^ other);" />
      <MemberSignature Language="F#" Value="override this.Equals : TimeZoneInfo -&gt; bool" Usage="timeZoneInfo.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="other">Ein zweites Objekt, das mit dem aktuellen Objekt verglichen werden soll.</param>
        <summary>Bestimmt, ob das aktuelle <see cref="T:System.TimeZoneInfo" />-Objekt und ein anderes <see cref="T:System.TimeZoneInfo" />-Objekt gleich sind.</summary>
        <returns><see langword="true" />, wenn die beiden <see cref="T:System.TimeZoneInfo" />-Objekte gleich sind, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gleichheit basiert auf einem Vergleich von Werten. Zwei <xref:System.TimeZoneInfo> Objekte gelten als gleich in den folgenden Situationen:  
  
-   Der Wert des ihre <xref:System.TimeZoneInfo.Id%2A> Eigenschaft ist identisch.  
  
-   Sie haben die gleichen Anpassungsregeln.  
  
 <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> Gibt den booleschen Wert, der aus der Auswertung des folgenden Ausdrucks resultiert:  
  
 ```csharp 
 other.Id == this.Id && HasSameRules(other);  
 ```
  
 ```vb
 other.Id = me.Id AndAlso HasSameRules(other)  
 ```

 Wenn die `other` -Parameter ist ein nicht initialisiertes <xref:System.TimeZoneInfo> -Objekt, diese Methode zurückgegeben `false`.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29> Methode, um zu bestimmen, ob die lokale Zeitzone Pacific Time oder Eastern Time.  
  
 [!code-csharp[System.TimeZone2.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#7)]
 [!code-vb[System.TimeZone2.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindSystemTimeZoneById">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo FindSystemTimeZoneById (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo FindSystemTimeZoneById(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindSystemTimeZoneById (id As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ FindSystemTimeZoneById(System::String ^ id);" />
      <MemberSignature Language="F#" Value="static member FindSystemTimeZoneById : string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.FindSystemTimeZoneById id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">Der Zeitzonenbezeichner, der der <see cref="P:System.TimeZoneInfo.Id" />-Eigenschaft entspricht.</param>
        <summary>Instanziiert ein neues <see cref="T:System.TimeZoneInfo" />-Objekt basierend auf dessen Bezeichner.</summary>
        <returns>Ein Objekt, dessen Bezeichner der Wert des <paramref name="id" />-Parameters ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `id` Parameter muss genau der Zeitzonenbezeichner lang, aber nicht in der Groß-/Kleinschreibung, nach einer erfolgreichen Übereinstimmung ausgeführt; entsprechen, also den Vergleich von `id` Bezeichner mit Zeitzone wird Groß-/Kleinschreibung. Wenn es sich bei Zeitzonenobjekte, die auf Grundlage von partiellen Übereinstimmungen abgerufen werden sollen, können Sie benutzerdefinierte Prozeduren, die die schreibgeschützte Auflistung von verwenden schreiben <xref:System.TimeZoneInfo> zurückgegebenen Objekte die <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> Methode.  
  
 Auf Windows-Systemen `FindSystemTimeZoneById` versucht, `id` auf den Namen der Unterschlüssel HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Time Zones verzeichnet sind Branch der Registrierung. Unter Linux und MacOS verfügbar in Zeitzoneninformationen verwendet die [ICU-Bibliothek](http://userguide.icu-project.org/datetime/timezone). Wenn die Registrierung oder der Bibliothek die Informationen für die Zeitzone keine gewünscht, können Sie erstellen eine bestimmte Zeitzone entweder durch Aufrufen einer der Überladungen der der <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> Methode oder durch Aufrufen von <xref:System.TimeZoneInfo.FromSerializedString%2A> zum Deserialisieren einer <xref:System.TimeZoneInfo> -Objekt, Stellt die erforderlichen Zeitzone dar. Allerdings Zeitzonen erstellt diese Methodenaufrufe sind nicht vom System vorgegebene Zeit und kann nicht abgerufen werden, mithilfe der <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> Methode. Diese benutzerdefinierte Zeitzonen kann nur über den Objektverweis zurückgegebenes zugegriffen werden die <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> oder <xref:System.TimeZoneInfo.FromSerializedString%2A> Methodenaufruf.  
  
Diese Methode gibt ein neues <xref:System.TimeZoneInfo> -Instanz für jeden Methodenaufruf; es gibt keine zwischengespeicherten Objekte zurück. Dies kann die Leistung in Anwendungen, die aufrufen verschlechtern der `FindSystemTimeZoneById` Methode wiederholt mit dem gleichen Bezeichner.   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> Methode, um die japanische Normalzeit Zone abzurufen. Dies <xref:System.TimeZoneInfo> Objekt wird dann verwendet, um die lokale Zeit mit der Zeit in Tokio zu konvertieren und zu bestimmen, ob es sich um Japanische Normalzeit oder Sommerzeit Tokio ist.  
  
 [!code-csharp[System.TimeZone2.Conversions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/convertdt2.cs#2)]
 [!code-vb[System.TimeZone2.Conversions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/convertdt2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">Das System verfügt nicht über genügend Speicher zum Speichern von Informationen über die Zeitzone.</exception>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="id" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">Der durch <paramref name="id" /> angegebene Zeitzonenbezeichner wurde nicht gefunden. Das bedeutet, dass kein Zeitzonenbezeichner vorhanden ist, dessen Name <paramref name="id" /> entspricht, oder dass der Bezeichner vorhanden ist, jedoch keine Zeitzonendaten enthält.</exception>
        <exception cref="T:System.Security.SecurityException">Der Prozess verfügt nicht über die erforderlichen Berechtigungen zum Lesen aus dem Registrierungsschlüssel, der die Zeitzoneninformationen enthält.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Der Zeitzonenbezeichner wurde gefunden, aber die Registrierungsdaten sind beschädigt.</exception>
        <altmember cref="P:System.TimeZoneInfo.Id" />
        <related type="Article" href="https://msdn.microsoft.com/library/8cb620e5-c6a6-4267-a52e-beeb73cd1a34">Gewusst wie: Instanziieren eines TimeZoneInfo-Objekts</related>
      </Docs>
    </Member>
    <Member MemberName="FromSerializedString">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo FromSerializedString (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo FromSerializedString(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.FromSerializedString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromSerializedString (source As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ FromSerializedString(System::String ^ source);" />
      <MemberSignature Language="F#" Value="static member FromSerializedString : string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.FromSerializedString source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">Die Zeichenfolgendarstellung des serialisierten <see cref="T:System.TimeZoneInfo" />-Objekts.</param>
        <summary>Deserialisiert eine Zeichenfolge, um ein ursprüngliches <see cref="T:System.TimeZoneInfo" />-Objekt erneut zu erstellen.</summary>
        <returns>Das ursprüngliche serialisierte Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Es ist eine Alternative zum Bereitstellen des Codes erforderlich, um eine Zeitzone, die nicht in der Registrierung auf Windows oder im gefunden wird, erstellt die [ICU-Bibliothek](http://userguide.icu-project.org/datetime/timezone) unter Linux und MacOS. Sie können eine benutzerdefinierte Zeitzone und entweder definieren verwenden die <xref:System.TimeZoneInfo.ToSerializedString%2A> -Methode in einer eigenständigen ausführbaren Datei oder einer Anwendung Setupprogramm speichern die Zeitzone als Zeichenfolge verwenden. Die Anwendung kann dann rufen Sie diese Zeichenfolge aus den Speicherort und instanziiere es mit der <xref:System.TimeZoneInfo.FromSerializedString%2A> Methode.  
  
   
  
## Examples  
 Im folgenden Beispiel wird versucht, zum Abrufen der Antarktis/Südpol Zeitzone aus dem lokalen System. Schlägt fehl, versucht der Code für das Abrufen von Informationen über die Zeitzone aus einer Textdatei im Verzeichnis Anwendung. Wenn dieser Versuch fehlschlägt, wird der Code erstellt die Zeitzone und schreibt Informationen über die Zeitzone in der Textdatei.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#4)]
 [!code-vb[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der <paramref name="source" />-Parameter ist <see cref="F:System.String.Empty" />.</exception>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="source" />-Parameter ist eine NULL-Zeichenfolge.</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Der Quellparameter kann nicht zurück in ein <see cref="T:System.TimeZoneInfo" />-Objekt deserialisiert werden.</exception>
        <altmember cref="M:System.TimeZoneInfo.ToSerializedString" />
        <related type="Article" href="https://msdn.microsoft.com/library/6b7b4de9-da07-47e3-8f4c-823f81798ee7">Gewusst wie: Wiederherstellen von Zeitzonen aus einer eingebetteten Ressource</related>
      </Docs>
    </Member>
    <Member MemberName="GetAdjustmentRules">
      <MemberSignature Language="C#" Value="public TimeZoneInfo.AdjustmentRule[] GetAdjustmentRules ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.TimeZoneInfo/AdjustmentRule[] GetAdjustmentRules() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAdjustmentRules" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAdjustmentRules () As TimeZoneInfo.AdjustmentRule()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ GetAdjustmentRules();" />
      <MemberSignature Language="F#" Value="member this.GetAdjustmentRules : unit -&gt; TimeZoneInfo.AdjustmentRule[]" Usage="timeZoneInfo.GetAdjustmentRules " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo+AdjustmentRule[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft ein Array von <see cref="T:System.TimeZoneInfo.AdjustmentRule" />-Objekten ab, die auf das aktuelle <see cref="T:System.TimeZoneInfo" />-Objekt angewendet werden.</summary>
        <returns>Ein Array von Objekten für diese Zeitzone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> Methode ruft ein Array von <xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType> Objekte. Jedes Objekt im Array definiert das Gültigkeitsdatum für Start- und Endzeit, Anpassung der Zeitzone, als auch das Delta (die genaue Größe, mit dem wird die Anpassung der Zeit ändern). Darüber hinaus zwei Eigenschaften zurückgeben <xref:System.TimeZoneInfo.TransitionTime?displayProperty=nameWithType> Objekte, die definieren, wenn jeder jährlichen Übergang zu und von Standardzeit auftritt.  
  
 Weist eine Zeitzone auf mehrere Anpassungsregeln, sie werden in der Regel sortiert aus früheste (bei Index 0) auf aktuelle Version (am Index <xref:System.Array.Length%2A> - 1).  
  
 Verfügt eine Zeitzone keine Anpassungsregeln, die <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> Methode ein leeres Array zurückgegeben (ein Array, dessen <xref:System.Array.Length%2A> ist 0 (null)).  
  
 Änderungen an der Elemente des Arrays zurückgegebenes der <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> Methode werden nicht in die Anpassungsregeln, die zu einer bestimmten Zeitzone gehören wiedergegeben. Zum Ändern von Regeln zur zeitzonenanpassung wieder eine Zeitzone (z. B. die historischen Übergang in und aus der Sommerzeit wiedergeben) müssen Sie erstellen eine neue Zeitzone mit der entsprechenden Anpassungsregeln, anstatt die vorhandene zu ändern.  
  
   
  
## Examples  
 Im folgende Beispiel ruft alle Zeitzonen, der auf dem lokalen System und zeigt alle Informationen über den Anpassungsregeln an die Konsole definiert sind.  
  
 [!code-csharp[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/cs/System.TimeZone2.AdjustmentRule.Class.cs#3)]
 [!code-vb[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/vb/System.TimeZone2.AdjustmentRule.Class.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">Der Systemarbeitsspeicher reicht nicht aus, um eine Kopie der Anpassungsregeln im Arbeitsspeicher zu erstellen.</exception>
        <altmember cref="T:System.TimeZoneInfo.AdjustmentRule" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAmbiguousTimeOffsets">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt Informationen zu den möglichen Datums- und Zeitwerten zurück, denen ein mehrdeutiger Datums- und Zeitwert zugeordnet werden kann.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAmbiguousTimeOffsets">
      <MemberSignature Language="C#" Value="public TimeSpan[] GetAmbiguousTimeOffsets (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan[] GetAmbiguousTimeOffsets(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeSpan&gt; ^ GetAmbiguousTimeOffsets(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.GetAmbiguousTimeOffsets : DateTime -&gt; TimeSpan[]" Usage="timeZoneInfo.GetAmbiguousTimeOffsets dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">Ein Datum und eine Uhrzeit.</param>
        <summary>Gibt Informationen zu den möglichen Datums- und Zeitwerten zurück, denen ein mehrdeutiger Datums- und Zeitwert zugeordnet werden kann.</summary>
        <returns>Ein Array von Objekten, das mögliche UTC-Offsets (Coordinated Universal Time) darstellt, denen ein bestimmter Datums- und Uhrzeitwert zugeordnet werden kann.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das genaue Verhalten dieser Methode hängt von die Beziehung zwischen der <xref:System.DateTime.Kind%2A> Eigenschaft und die <xref:System.TimeZoneInfo> -Objekts entsprechend der folgenden Tabelle gezeigt.  
  
|Typ der TimeZoneInfo-Objekts|Kind-Eigenschaft-Wert|Verhalten|  
|------------------------------|-------------------------|--------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> oder <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Mehrdeutige Zeit gibt offsets für `dateTime`.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Konvertiert `dateTime` auf die lokale Zeit, und klicken Sie dann zurückgegeben, die mehrdeutige Zeit offsets für diese Zeit.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|Beliebiger Wert.|Löst ein <xref:System.ArgumentException>.|  
|Alle anderen Zeitzone.|<xref:System.DateTimeKind.Local> oder <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Konvertiert `dateTime` auf die angegebene Zeitzone, und klicken Sie dann bestimmt, ob diese Zeit mehrdeutig ist.|  
|Alle anderen Zeitzone.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Bestimmt, ob `dateTime` in die angegebene Zeitzone mehrdeutig ist.|  
  
 Die Reihenfolge der <xref:System.TimeSpan> Objekte im Array zurückgegeben, die von dieser Methode ist nicht definiert. Sie können jedoch bestimmen, welches Element eine Abweichung von der Standardzeit der Zeitzone darstellt, durch Vergleichen ihres Werts mit der Zeitzone <xref:System.TimeZoneInfo.BaseUtcOffset%2A> Eigenschaft. Um eine Standardzeit der Zeitzone eine mehrdeutige Zeit zuzuordnen, finden Sie unter [Vorgehensweise: Auflösen von mehrdeutigen Zeiten](~/docs/standard/datetime/resolve-ambiguous-times.md).  
  
   
  
## Examples  
 Das folgende Beispiel definiert eine Methode namens `ShowPossibleUtcTimes` , verwendet der <xref:System.TimeZoneInfo.GetAmbiguousTimeOffsets%28System.DateTime%29> Methode, um eine mehrdeutige Zeit verbundwebsite zuordnen entsprechende Coordinated Universal Time (UTC) ein Timeout.  
  
 [!code-csharp[System.TimeZone2.GetAmbiguousTimeOffsets#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/cs/System.TimeZone2.GetAmbiguousTimeOffsets.cs#1)]
 [!code-vb[System.TimeZone2.GetAmbiguousTimeOffsets#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/vb/System.TimeZone2.GetAmbiguousTimeOffsets.vb#1)]  
  
 Die Methode kann dann mit Code wie den folgenden aufgerufen werden:  
  
 [!code-csharp[System.TimeZone2.GetAmbiguousTimeOffsets#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/cs/System.TimeZone2.GetAmbiguousTimeOffsets.cs#2)]
 [!code-vb[System.TimeZone2.GetAmbiguousTimeOffsets#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/vb/System.TimeZone2.GetAmbiguousTimeOffsets.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime" /> ist keine mehrdeutige Zeitangabe.</exception>
        <altmember cref="Overload:System.TimeZoneInfo.IsAmbiguousTime" />
        <related type="Article" href="https://msdn.microsoft.com/library/2cf5fb25-492c-4875-9245-98cac8348e97">Gewusst wie: Auflösen von mehrdeutigen Zeiten</related>
        <related type="Article" href="https://msdn.microsoft.com/library/bca874ee-5b68-4654-8bbd-3711220ef332">Gewusst wie: Auflösen mehrdeutiger Zeiten durch den Benutzer</related>
      </Docs>
    </Member>
    <Member MemberName="GetAmbiguousTimeOffsets">
      <MemberSignature Language="C#" Value="public TimeSpan[] GetAmbiguousTimeOffsets (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan[] GetAmbiguousTimeOffsets(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeSpan&gt; ^ GetAmbiguousTimeOffsets(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.GetAmbiguousTimeOffsets : DateTimeOffset -&gt; TimeSpan[]" Usage="timeZoneInfo.GetAmbiguousTimeOffsets dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Ein Datum und eine Uhrzeit.</param>
        <summary>Gibt Informationen zu den möglichen Datums- und Zeitwerten zurück, denen ein mehrdeutiger Datums- und Zeitwert zugeordnet werden kann.</summary>
        <returns>Ein Array von Objekten, das mögliche UTC-Offsets (Coordinated Universal Time) darstellt, denen ein bestimmter Datums- und Uhrzeitwert zugeordnet werden kann.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das genaue Verhalten dieser Methode hängt von die Beziehung zwischen der <xref:System.DateTimeOffset.Offset%2A> Eigenschaft der `dateTimeOffset` Parameter und die <xref:System.TimeZoneInfo> Objekt. Wenn der Wert des der <xref:System.DateTimeOffset.Offset%2A> Eigenschaft entspricht der aktuellen Zeitzone mögliche abweichungen von Coordinated Universal Time (UTC) für Datum und Uhrzeit, gibt die Methode die möglichen Offsets zurück. Andernfalls konvertiert `dateTimeOffset` auf die Zeit in der aktuellen Zeitzone und gibt dann die möglichen offsets, Datum und Uhrzeit.  
  
 Die Reihenfolge der <xref:System.TimeSpan> Objekte im Array zurückgegeben, die von dieser Methode ist nicht definiert. Sie können jedoch bestimmen, welches Element eine Abweichung von der Standardzeit der Zeitzone darstellt, durch Vergleichen ihres Werts mit der Zeitzone <xref:System.TimeZoneInfo.BaseUtcOffset%2A> Eigenschaft. Um eine Standardzeit der Zeitzone eine mehrdeutige Zeit zuzuordnen, finden Sie unter [Vorgehensweise: Auflösen von mehrdeutigen Zeiten](~/docs/standard/datetime/resolve-ambiguous-times.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTimeOffset" /> ist keine mehrdeutige Zeitangabe.</exception>
        <altmember cref="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)" />
        <related type="Article" href="https://msdn.microsoft.com/library/2cf5fb25-492c-4875-9245-98cac8348e97">Gewusst wie: Auflösen von mehrdeutigen Zeiten</related>
        <related type="Article" href="https://msdn.microsoft.com/library/bca874ee-5b68-4654-8bbd-3711220ef332">Gewusst wie: Auflösen mehrdeutiger Zeiten durch den Benutzer</related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="timeZoneInfo.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wird als Hashfunktion für Hashalgorithmen und Datenstrukturen wie Hashtabellen verwendet.</summary>
        <returns>Eine 32-Bit-Ganzzahl mit Vorzeichen, die als Hash für dieses <see cref="T:System.TimeZoneInfo" />-Objekt verwendet wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Einzelheiten zu den <xref:System.TimeZoneInfo.GetHashCode%2A> -Methode finden Sie unter <xref:System.Object.GetHashCode%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSystemTimeZones">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;TimeZoneInfo&gt; GetSystemTimeZones ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.TimeZoneInfo&gt; GetSystemTimeZones() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetSystemTimeZones" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSystemTimeZones () As ReadOnlyCollection(Of TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;TimeZoneInfo ^&gt; ^ GetSystemTimeZones();" />
      <MemberSignature Language="F#" Value="static member GetSystemTimeZones : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;TimeZoneInfo&gt;" Usage="System.TimeZoneInfo.GetSystemTimeZones " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.5">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.5">
          <AttributeName>System.Security.SecurityTreatAsSafe</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.TimeZoneInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt eine sortierte Auflistung aller Zeitzonen zurück, zu denen im lokalen System Informationen verfügbar sind.</summary>
        <returns>Eine schreibgeschützte Auflistung von <see cref="T:System.TimeZoneInfo" />-Objekten.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> Methode ruft alle verfügbaren Zeitzoneninformationen ab, aus den Unterschlüsseln des HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Time Zones verzeichnet sind Registrierungsschlüssels auf Windows-Systemen und von der [ICU-Bibliothek](http://userguide.icu-project.org/datetime/timezone) unter Linux und MacOS. Ist dies nicht erfolgreich abgerufen und analysieren Sie Werte für bestimmte Eigenschaften der einzelnen <xref:System.TimeZoneInfo> Objekten, die diese Methode legt deren Wert auf eine leere Zeichenfolge ("").  
  
> [!IMPORTANT]
>  Die <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> Methode gibt eine Auflistung von <xref:System.TimeZoneInfo> Objekte nur für in definierten Zeitzonen der oder ICU-Bibliothek. Er umfasst keine Zeitzonen erstellt, die Überladungen von der <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> Methode. Diese werden kann nur mit der Objektverweis, der von der Erstellungsmethode Zeitzone zurückgegeben.  
  
 Von dieser Methode zurückgegebene Auflistung wird nach der UTC-Abweichung und bei Zeitzonen, die die gleiche UTC-zeitverschiebung, sortiert, durch den Anzeigenamen, mit der aktuellen Kultur. Weitere Informationen zu den Anzeigenamen, finden Sie unter <xref:System.TimeZoneInfo.DisplayName%2A>.  
  
 Die <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> von dieser Methode zurückgegebene Objekt unterstützt die <xref:System.Collections.Generic.IEnumerable%601> Schnittstelle, was bedeutet, dass es durchlaufen werden kann, mit der `foreach` (in c#) oder `For Each…Next` (in Visual Basic) Anweisungen. Jede Iteration der Schleife stellt die nächste <xref:System.TimeZoneInfo> Objekt in der Auflistung.  
  
 Die Auflistung der <xref:System.TimeZoneInfo> Objekte dar, auf dem lokalen Computer definierten Zeitzonen; sie vollständige Informationen zu allen Zeitzonen alle Zeiten nicht notwendigerweise bereitgestellt. Wenn Ihre Anwendung nicht auf dem lokalen Computer gefundenen Zeitzonen erfordert, erstellen Sie benutzerdefinierten Zeitzonen, die die Überladungen von der <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> Methode. Weitere Informationen finden Sie unter [Vorgehensweise: Erstellen von Zeitzonen ohne Anpassungsregeln](~/docs/standard/datetime/create-time-zones-without-adjustment-rules.md) und [Vorgehensweise: Erstellen von Zeitzonen mit Anpassungsregeln](~/docs/standard/datetime/create-time-zones-with-adjustment-rules.md).  
  
 Sie können auch bestimmen, ob eine bestimmte Zeitzone auf dem lokalen Computer, durch den Aufruf definiert ist der <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> -Methode und Angeben des Bezeichners der Zeitzone, die als Parameter abgerufen werden sollen.  
  
   
  
## Examples  
 Im folgende Beispiel ruft eine Auflistung von Zeitzone-Objekten, die auf einem Computer definierten Zeitzonen darstellt, und Informationen zu diesen in eine Textdatei schreibt.  
  
 [!code-csharp[System.TimeZone2.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/getsystemtimezones1.cs#6)]
 [!code-vb[System.TimeZone2.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/getsystemtimezones1.vb#6)]
  [!code-powershell[System.TimeZone2.Class#6](~/samples/snippets/powershell/VS_Snippets_CLR_System/System.TimeZone2.Class/PS/Timezone2_Examples.ps1)]   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">Es ist nicht genügend Arbeitsspeicher vorhanden, um alle Zeitzoneninformationen zu speichern.</exception>
        <exception cref="T:System.Security.SecurityException">Der Benutzer verfügt nicht über die Berechtigung zum Lesen aus den Registrierungsschlüsseln, die Zeitzoneninformationen enthalten.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUtcOffset">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Berechnet den Offset oder die Differenz zwischen der Zeit in dieser Zeitzone und Coordinated Universal Time (UTC) für einen bestimmten Datums- und Zeitwert.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan GetUtcOffset (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan GetUtcOffset(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetUtcOffset(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan GetUtcOffset(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.GetUtcOffset : DateTime -&gt; TimeSpan" Usage="timeZoneInfo.GetUtcOffset dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">Das Datum und die Zeit, für die der Offset bestimmt werden soll.</param>
        <summary>Berechnet den Offset oder die Differenz zwischen der Zeit in dieser Zeitzone und Coordinated Universal Time (UTC) für einen bestimmten Datums- und Zeitwert.</summary>
        <returns>Ein Objekt, das den Zeitunterschied zwischen den beiden Zeitzonen angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die zurückgegebene Zeitspanne umfasst alle Unterschiede aufgrund der Anwendung der Regeln zur zeitzonenanpassung wieder auf die aktuelle Zeitzone. Es unterscheidet sich von der <xref:System.TimeZoneInfo.BaseUtcOffset%2A> -Eigenschaft, die den Unterschied zwischen Coordinated Universal Time (UTC) und der Standardzeit der Zeitzone zurückgibt und daher keine Anpassungsregeln berücksichtigt.  
  
 Wenn die `dateTime` des Parameters <xref:System.DateTime.Kind%2A> Eigenschaft entspricht nicht der Zeitzone-Objekt, das diese Methode führt die erforderliche Konvertierung, bevor ein Ergebnis zurückgegeben. Dies kann beispielsweise auftreten, wenn die <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Local?displayProperty=nameWithType> Zeitzonenobjekts ist jedoch nicht die lokale Zeitzone. Wenn `dateTime` ist mehrdeutig, oder wenn die konvertierte Zeit mehrdeutig ist, interpretiert diese Methode die mehrdeutige Zeit als Standardzeit. Wenn `dateTime` ungültig ist, gibt diese Methode eine <xref:System.TimeSpan> -Objekt, das die Differenz zwischen UTC und der Standardzeit der Zeitzone widerspiegelt.  
  
 Die <xref:System.TimeZoneInfo.GetUtcOffset%28System.DateTime%29?displayProperty=nameWithType> ähnelt der Methode im Vorgang der <xref:System.TimeZone.GetUtcOffset%2A> Methode der <xref:System.TimeZone> Klasse.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Verwendung der <xref:System.TimeZoneInfo.GetUtcOffset%28System.DateTime%29> Methode, die mit verschiedenen Zeitzonen und Date-Werten, die verschiedene <xref:System.DateTime.Kind%2A> Eigenschaftswerte.  
  
 [!code-csharp[System.TimeZone2.GetUtcOffset#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetUtcOffset/cs/System.TimeZone2.GetUtcOffset.cs#1)]
 [!code-vb[System.TimeZone2.GetUtcOffset#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetUtcOffset/vb/System.TimeZone2.GetUtcOffset.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeZoneInfo.BaseUtcOffset" />
      </Docs>
    </Member>
    <Member MemberName="GetUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan GetUtcOffset (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan GetUtcOffset(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetUtcOffset(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan GetUtcOffset(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.GetUtcOffset : DateTimeOffset -&gt; TimeSpan" Usage="timeZoneInfo.GetUtcOffset dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Das Datum und die Zeit, für die der Offset bestimmt werden soll.</param>
        <summary>Berechnet den Offset oder die Differenz zwischen der Zeit in dieser Zeitzone und Coordinated Universal Time (UTC) für einen bestimmten Datums- und Zeitwert.</summary>
        <returns>Ein Objekt, das den Zeitunterschied zwischen Coordinated Universal Time (UTC) und der aktuellen Zeitzone angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die zurückgegebene Zeitspanne umfasst alle Unterschiede aufgrund der Anwendung der Regeln zur zeitzonenanpassung wieder auf die aktuelle Zeitzone. Es unterscheidet sich von der <xref:System.TimeZoneInfo.BaseUtcOffset%2A> -Eigenschaft, die den Unterschied zwischen Coordinated Universal Time (UTC) und der Standardzeit der Zeitzone zurückgibt und daher keine Anpassungsregeln berücksichtigt.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasSameRules">
      <MemberSignature Language="C#" Value="public bool HasSameRules (TimeZoneInfo other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasSameRules(class System.TimeZoneInfo other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.HasSameRules(System.TimeZoneInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasSameRules (other As TimeZoneInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasSameRules(TimeZoneInfo ^ other);" />
      <MemberSignature Language="F#" Value="member this.HasSameRules : TimeZoneInfo -&gt; bool" Usage="timeZoneInfo.HasSameRules other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="other">Ein zweites Objekt, das mit dem aktuellen <see cref="T:System.TimeZoneInfo" />-Objekt verglichen werden soll.</param>
        <summary>Gibt an, ob das aktuelle Objekt und ein weiteres <see cref="T:System.TimeZoneInfo" />-Objekt die gleichen Anpassungsregeln aufweisen.</summary>
        <returns><see langword="true" />, wenn die zwei Zeitzonen identische Anpassungsregeln und einen identischen Basisoffset aufweisen, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wie die <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> -Methode, die <xref:System.TimeZoneInfo.HasSameRules%2A> Methode angibt, ob es sich bei beiden Zeitzonen der gleichen Basisoffset (gemäß der <xref:System.TimeZoneInfo.BaseUtcOffset%2A> Eigenschaft) und die gleichen Anpassungsregeln. Im Gegensatz zu den <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> Methode <xref:System.TimeZoneInfo.HasSameRules%2A> Zeitzonenbezeichner nicht verglichen (gemäß der <xref:System.TimeZoneInfo.Id%2A> Eigenschaft).  
  
   
  
## Examples  
 In der Regel eine Anzahl von auf Windows in der Registrierung definierten Zeitzonen und [ICU-Bibliothek](http://userguide.icu-project.org/datetime/timezone) haben Sie den gleichen Offset von Coordinated Universal Time (UTC) und die gleichen Anpassungsregeln unter Linux und MacOS. Das folgende Beispiel zeigt eine Liste dieser Zeitzonen, in der Konsole.  
  
 [!code-csharp[System.TimeZone2.HasSameRules#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.HasSameRules/cs/HasSameRules.cs#1)]
 [!code-vb[System.TimeZone2.HasSameRules#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.HasSameRules/vb/HasSameRules.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="other" />-Parameter ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public string Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Id { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Id : string" Usage="System.TimeZoneInfo.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Zeitzonenbezeichner ab.</summary>
        <value>Der Zeitzonenbezeichner.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Zeitzonenbezeichner ist eine Schlüsselzeichenfolge, die eine bestimmte Zeitzone eindeutig identifiziert. Auf Windows-Systemen, entspricht die Unterschlüssel HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Time Zone Branch der Registrierung auf Windows-Systemen und von der [ICU-Bibliothek](http://userguide.icu-project.org/datetime/timezone) unter Linux und MacOS. Es kann als Parameter übergeben werden die <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> Methode zum Instanziieren einer <xref:System.TimeZoneInfo> Objekt, das eine bestimmte Zeitzone darstellt.  
  
> [!IMPORTANT]
>  Obwohl ein Schlüsselname in der Windows-Registrierung maximal 255 Zeichen sein kann, empfehlen wir, dass ein Bezeichner, den Sie eine benutzerdefinierte Zeitzone zuweisen, maximal 32 Zeichen lang sein. Je länger der Bezeichner, der größer ist die Wahrscheinlichkeit, die ein falscher Schlüssel Namen werden bereitgestellt, wenn sie abrufen.  
  
 Der Wert des der <xref:System.TimeZoneInfo.Id%2A> Eigenschaft ist in der Regel aber nicht immer identisch mit der <xref:System.TimeZoneInfo.StandardName%2A> Eigenschaft. Der Bezeichner der Coordinated Universal Time Zone ist UTC.  
  
   
  
## Examples  
 Das folgende Beispiel listet die ID der einzelnen der auf dem lokalen Computer definierten Zeitzonen.  
  
 [!code-csharp[System.TimeZone2.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#5)]
 [!code-vb[System.TimeZone2.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsAmbiguousTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Bestimmt, ob ein bestimmtes Datum und eine Uhrzeit in einer bestimmten Zeitzone mehrdeutig sind und zwei oder mehreren UTC-Zeiten (Coordinated Universal Time) zugeordnet werden können.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsAmbiguousTime">
      <MemberSignature Language="C#" Value="public bool IsAmbiguousTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAmbiguousTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAmbiguousTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsAmbiguousTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsAmbiguousTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">Ein Datums- und Uhrzeitwert.</param>
        <summary>Bestimmt, ob ein bestimmtes Datum und eine Uhrzeit in einer bestimmten Zeitzone mehrdeutig sind und zwei oder mehreren UTC-Zeiten (Coordinated Universal Time) zugeordnet werden können.</summary>
        <returns><see langword="true" />, wenn der <paramref name="dateTime" />-Parameter mehrdeutig ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine mehrdeutige Zeit fällt in einen Zeitbereich für die aktuelle Zeitzone. Dies bedeutet, dass es entweder auf Standardzeit oder auf eine Zeit, die von der Anwendung von einer Anpassungsregel führt sein kann. Führen in der Regel mehrdeutige Zeiten auf, wenn die Uhr festgelegt ist, von Sommerzeit auf Standardzeit zurückgegeben. Finden Sie im Abschnitt mit Beispielen veranschaulicht.  
  
 Coordinated Universal Time (UTC) verfügt über keine mehrdeutigen Zeiten; Zeitpunkt, weder Zonen, die Sommerzeit nicht unterstützen. Aus diesem Grund haben diese Zeitzonen, keine Regeln zur zeitzonenanpassung berücksichtigt und die Aufrufe der <xref:System.TimeZoneInfo.IsAmbiguousTime%2A> immer-Methodenrückgabe `false`.  
  
 Für Zeitzonen das Sommerzeit berücksichtigt, hängt das genaue Verhalten dieser Methode die Beziehung zwischen der <xref:System.DateTime.Kind%2A> Eigenschaft und die <xref:System.TimeZoneInfo> -Objekts entsprechend der folgenden Tabelle gezeigt.  
  
|Typ der TimeZoneInfo-Objekts|Kind-Eigenschaft-Wert|Verhalten|  
|------------------------------|-------------------------|--------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> oder <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Bestimmt, ob die `dateTime` -Parameter mehrdeutig ist.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Konvertiert `dateTime` in die lokale Zeit und ermittelt dann, ob diese Zeit mehrdeutig ist.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType> oder <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Gibt `false` zurück.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Wenn `dateTime` ist mehrdeutig, es wird vorausgesetzt, es wird eine Standardzeit in UTC konvertiert und gibt `false`.|  
|Alle anderen Zeitzone.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> oder <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Konvertiert `dateTime` in die Zeit in die angegebene Zeitzone und ermittelt dann, ob diese Zeit mehrdeutig ist.|  
|Alle anderen Zeitzone.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Bestimmt, ob `dateTime` ist mehrdeutig.|  
  
   
  
## Examples  
 In der Zeitzone Pacific Time endet die Sommerzeit um 2:00 Uhr am 4. November 2007. Im folgende Beispiel wird die Zeit in Intervallen von einer Minute von 12:59 Uhr am 4. November 2007, um 2:01 Uhr am 4. November 2007 um die <xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29> -Methode der ein <xref:System.TimeZoneInfo> Objekt, das die pazifischen Zeitzone darstellt. Die Konsolenausgabe zeigt an, dass alle Zeitangaben von 1:00 Uhr am 4. November 2007, um 1:59 Uhr sind am 4. November 2007 mehrdeutig.  
  
 [!code-csharp[System.TimeZone2.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#8)]
 [!code-vb[System.TimeZone2.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Die <see cref="P:System.DateTime.Kind" />-Eigenschaft des <paramref name="dateTime" />-Werts ist <see cref="F:System.DateTimeKind.Local" /> und <paramref name="dateTime" /> ist eine ungültige Zeit.</exception>
        <altmember cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="IsAmbiguousTime">
      <MemberSignature Language="C#" Value="public bool IsAmbiguousTime (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAmbiguousTime(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAmbiguousTime(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.IsAmbiguousTime : DateTimeOffset -&gt; bool" Usage="timeZoneInfo.IsAmbiguousTime dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Ein Datum und eine Uhrzeit.</param>
        <summary>Bestimmt, ob ein bestimmtes Datum und eine Uhrzeit in einer bestimmten Zeitzone mehrdeutig sind und zwei oder mehreren UTC-Zeiten (Coordinated Universal Time) zugeordnet werden können.</summary>
        <returns><see langword="true" />, wenn der <paramref name="dateTimeOffset" />-Parameter in der aktuellen Zeitzone mehrdeutig ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine mehrdeutige Zeit fällt in einen Zeitbereich für die aktuelle Zeitzone. Dies bedeutet, dass es entweder auf Standardzeit oder auf eine Zeit, die von der Anwendung von einer Anpassungsregel führt sein kann. Führen in der Regel mehrdeutige Zeiten auf, wenn die Uhr festgelegt ist, von Sommerzeit auf Standardzeit zurückgegeben. Coordinated Universal Time (UTC) verfügt über keine mehrdeutigen Zeiten; Zeitpunkt, weder Zonen, die Sommerzeit nicht unterstützen.  
  
 Das genaue Verhalten der Methode hängt von die Beziehung zwischen der <xref:System.DateTimeOffset.Offset%2A> Eigenschaft der `dateTimeOffset` Parameter und der aktuellen Zeitzone. Wenn der Wert des der <xref:System.DateTimeOffset.Offset%2A> Eigenschaft handelt es sich um eine mögliche, die von der aktuellen Zeitzone UTC-offset, der Methode wird bestimmt, ob dieses Datum und Uhrzeit ist nicht eindeutig. Andernfalls konvertiert `dateTimeOffset` in die Zeit in der aktuellen Zeitzone und bestimmt dann, ob das Datum und Uhrzeit ist nicht eindeutig.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsDaylightSavingTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt an, ob ein angegebenes Datum und eine Zeit in den Bereich der Sommerzeit für die Zeitzone des aktuellen <see cref="T:System.TimeZoneInfo" />-Objekts fallen.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsDaylightSavingTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsDaylightSavingTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">Ein Datums- und Uhrzeitwert.</param>
        <summary>Gibt an, ob ein angegebenes Datum und eine Zeit in den Bereich der Sommerzeit für die Zeitzone des aktuellen <see cref="T:System.TimeZoneInfo" />-Objekts fallen.</summary>
        <returns><see langword="true" />, wenn der <paramref name="dateTime" />-Parameter eine Sommerzeit darstellt, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Rückgabewert von <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> ist betroffen, durch die Beziehung zwischen der Zeitzone, dargestellt durch die <xref:System.TimeZoneInfo> Objekt und die <xref:System.DateTime.Kind%2A> Eigenschaft der `dateTime` Parameters, wie die folgende Tabelle zeigt.  
  
|TimeZoneInfo-Objekts|DateTime.Kind-Eigenschaft|Ergebnis|  
|-------------------------|----------------------------|------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Local`|Bestimmt, ob `dateTime` Sommerzeit.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Utc`|Konvertiert `dateTime` von Coordinated Universal Time (UTC) in die lokale Zeit und bestimmt, ob es Sommerzeit.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Unspecified`|Setzt voraus, dass `dateTime` lokale Uhrzeit darstellt, und bestimmt, ob es Sommerzeit.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|`DateTimeKind.Local`, `DateTimeKind.Unspecified`oder `DateTimeKind.Utc`|Gibt `false` (UTC unterstützt keine Sommerzeit).|  
|Alle anderen <xref:System.TimeZoneInfo> Objekt.|`DateTimeKind.Local`|Konvertiert die lokale Zeit in die entsprechende Zeit von der <xref:System.TimeZoneInfo> Objekt aus, und klicken Sie dann bestimmt, ob die zweite Sommerzeit.|  
|Alle anderen <xref:System.TimeZoneInfo> Objekt.|`DateTimeKind.Utc`|Konvertiert von UTC in die entsprechende Zeit des der <xref:System.TimeZoneInfo> Objekt aus, und klicken Sie dann bestimmt, ob die zweite Sommerzeit.|  
|Alle anderen <xref:System.TimeZoneInfo> Objekt.|`DateTimeKind.Unspecified`|Bestimmt, ob `dateTime` Sommerzeit.|  
  
 Wenn die Zeitzone durch dargestellt die <xref:System.TimeZoneInfo> Objekt unterstützt keine Sommerzeit, die-Methode gibt immer `false`. Eine Anzahl von Zeitzonen, einschließlich <xref:System.TimeZoneInfo.Utc%2A>, wird die Sommerzeit nicht beachtet.  Um zu bestimmen, ob eine Zeitzone Sommerzeit unterstützt, Abrufen des Werts der <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> Eigenschaft.  
  
 Wenn die `dateTime` Parameter gibt eine mehrdeutige Zeit, in der Zeitzone des aktuellen Objekts, das <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> -Methode interpretiert `dateTime` als Standardzeit und gibt `false` wenn seine <xref:System.DateTime.Kind%2A> -Eigenschaft ist <xref:System.DateTimeKind.Local?displayProperty=nameWithType> oder <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Wenn die <xref:System.DateTime.Kind%2A> Eigenschaft <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, diese Methode auf und wählen Sie die richtige mehrdeutige Zeit anzugeben, ob es sich um eine Sommerzeit ist.  
  
 Da die <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29?displayProperty=nameWithType> Methode zurückgeben `false` für Datum und Uhrzeit, die mehrdeutig ist (d. h. ein Datum und Uhrzeit, die eine Standardzeit oder eine Sommerzeit in einer bestimmten Zeitzone darstellen kann), die <xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29?displayProperty=nameWithType> Methode zugeordnet werden kann die <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> Methode, um zu bestimmen, ob eine Zeit eine Sommerzeit sein kann. Da eine mehrdeutige Zeit ist, die sowohl eine Sommerzeit und einem Normalzeit haben, können die <xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29> Methode kann zuerst aufgerufen werden, um zu bestimmen, ob ein Datums- und Uhrzeitwert eine Sommerzeit sein darf. Wenn die Methode zurückgibt `false`, <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> Methode kann aufgerufen werden, um zu bestimmen, ob die <xref:System.DateTime> Wert ist eine Sommerzeit. Das folgende Beispiel veranschaulicht dieses Verfahren.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#2)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#2)]  
  
 Wenn die `dateTime` Parameter gibt an, eine ungültige Zeit, löst der Methodenaufruf eine <xref:System.ArgumentException> Wenn der Wert des der `dateTime` des Parameters <xref:System.DateTime.Kind%2A> -Eigenschaft ist <xref:System.DateTimeKind.Local?displayProperty=nameWithType>ist, andernfalls gibt die Methode zurück `false`.  
  
 Rufen Sie die <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> Methode, um festzustellen, ob einer Zeitzone verwendet <xref:System.TimeZoneInfo.StandardName%2A> Wert oder den zugehörigen <xref:System.TimeZoneInfo.DaylightName%2A> Wert beim Anzeigen des Namens der Zeitzone. Finden Sie im Abschnitt mit Beispielen veranschaulicht.  
  
   
  
## Examples  
 Das folgende Beispiel definiert eine Methode namens `DisplayDateWithTimeZoneName` , verwendet der <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> Methode, um zu ermitteln, ob der Name der Standardzeit oder Sommerzeit einer Zeitzone angezeigt.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Die <see cref="P:System.DateTime.Kind" />-Eigenschaft des <paramref name="dateTime" />-Werts ist <see cref="F:System.DateTimeKind.Local" /> und <paramref name="dateTime" /> ist eine ungültige Zeit.</exception>
        <altmember cref="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      </Docs>
    </Member>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.IsDaylightSavingTime : DateTimeOffset -&gt; bool" Usage="timeZoneInfo.IsDaylightSavingTime dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Ein Datums- und Uhrzeitwert.</param>
        <summary>Gibt an, ob ein angegebenes Datum und eine Zeit in den Bereich der Sommerzeit für die Zeitzone des aktuellen <see cref="T:System.TimeZoneInfo" />-Objekts fallen.</summary>
        <returns><see langword="true" />, wenn der <paramref name="dateTimeOffset" />-Parameter eine Sommerzeit darstellt, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Rückgabewert von <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> ist betroffen, durch die Beziehung zwischen der Zeitzone, dargestellt durch die <xref:System.TimeZoneInfo> Objekt und die <xref:System.DateTimeOffset.Offset%2A> Eigenschaft der `dateTimeOffset` Parameter. Wenn `dateTimeOffset` entspricht keiner der aktuellen Zeitzone Offset von Coordinated Universal Time (UTC) konvertiert die Methode, die Zeit in die Zeit in der aktuellen Zeitzone. Anschließend wird ermittelt, ob das Datum und Uhrzeit eine Sommerzeit handelt.  
  
 Wenn die Zeitzone durch dargestellt die <xref:System.TimeZoneInfo> Objekt unterstützt keine Sommerzeit, die-Methode gibt immer `false`. Um zu bestimmen, ob eine Zeitzone Sommerzeit unterstützt, Abrufen des Werts der <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> Eigenschaft.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      </Docs>
    </Member>
    <Member MemberName="IsInvalidTime">
      <MemberSignature Language="C#" Value="public bool IsInvalidTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsInvalidTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsInvalidTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsInvalidTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsInvalidTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">Ein Datums- und Uhrzeitwert.</param>
        <summary>Gibt an, ob ein bestimmtes Datum und eine Zeit ungültig sind.</summary>
        <returns><see langword="true" />, wenn <paramref name="dateTime" /> ungültig ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine ungültige Zeit fällt in einen Zeitbereich für die aktuelle Zeitzone, die in Coordinated Universal Time (UTC) nicht aufgrund einer Anpassungsregel zugeordnet werden kann. Ungültige mehrmals in der Regel vorkommen, wechselt die Zeit voraus für die Sommerzeit. Finden Sie im Abschnitt mit Beispielen veranschaulicht.  
  
 Der Wert des der <xref:System.DateTime.Kind%2A> Eigenschaft der `dateTime` Parameter wirkt sich auf, ob `dateTime` eine ungültige Zeit an, wie die folgende Tabelle zeigt darstellt.  
  
|DateTime.Kind-Eigenschaft|TimeZoneInfo-Objekts (falls zutreffend)|Verhalten|  
|----------------------------|-------------------------------------------|--------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|Bestimmt, ob die Zeit ungültig ist.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType> oder einer nicht lokalen Zeitzone.|Konvertiert `dateTime` auf den Zeitpunkt der <xref:System.TimeZoneInfo> Objekt und gibt `false`.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Nicht zutreffend.|Geht davon aus `dateTime` ist die Uhrzeit der <xref:System.TimeZoneInfo> Datenobjekt und bestimmt, ob es ungültig ist.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Nicht zutreffend.|Gibt `false` zurück.|  
  
   
  
## Examples  
 In der Zeitzone Pacific Time beginnt die Sommerzeit um 2:00 Uhr am 2. April 2006. Der folgende Code wird die Zeit in Intervallen von einer Minute von 1:59 Uhr Klicken Sie auf dem 2. April 2006, 3:01 Uhr am 2. April 2006 um die <xref:System.TimeZoneInfo.IsInvalidTime%2A> -Methode der ein <xref:System.TimeZoneInfo> Objekt, das die pazifischen Zeitzone darstellt. Die Konsolenausgabe zeigt an, dass alle Zeitangaben von 2:00 Uhr am 2. April 2006, um 2:59 Uhr sind am 2. April 2006 ungültig.  
  
 [!code-csharp[System.TimeZone2.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#9)]
 [!code-vb[System.TimeZone2.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.TimeZoneInfo.IsAmbiguousTime" />
      </Docs>
    </Member>
    <Member MemberName="Local">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo Local { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.TimeZoneInfo Local" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Local" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Local As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeZoneInfo ^ Local { TimeZoneInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Local : TimeZoneInfo" Usage="System.TimeZoneInfo.Local" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.5">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein <see cref="T:System.TimeZoneInfo" />-Objekt ab, das die lokale Zeitzone darstellt.</summary>
        <value>Ein Objekt, das die lokale Zeitzone darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die lokale Zeitzone wird die Zeitzone auf dem Computer, in dem der Code ausgeführt wird.  
  
> [!IMPORTANT]
>  Sie sollten immer die lokale Zeitzone zugreifen der <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> Eigenschaft anstatt der lokalen Zeit zone ein <xref:System.TimeZoneInfo> Objektvariable. Dies verhindert, dass die <xref:System.TimeZoneInfo> -Objektvariable wird durch einen Aufruf für ungültig erklärt die <xref:System.TimeZoneInfo.ClearCachedData%2A> Methode.  
  
 Auf Windows-Systemen die <xref:System.TimeZoneInfo> zurückgegebenes Objekt der <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> Eigenschaft spiegelt wider, die Einstellung der **automatisch Uhr für die Sommerzeit angepasst** Kontrollkästchen in der Systemsteuerung **Datum und Uhrzeit**  Anwendung. Wenn das Kontrollkästchen deaktiviert ist, enthält die zwischengespeicherte Kopie der lokalen Zeitzone keine Sommerzeit-Informationen. Dies bedeutet Folgendes:  
  
-   Der lokalen Zeitzone <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> Methode gibt ein Array, dessen Länge 0 (null ist) zurück.  
  
-   Der lokalen Zeitzone <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> -Eigenschaft gibt `false`.  
  
-   Die lokale Zeitzone weist keine mehrdeutigen oder ungültigen Zeiten (alle Aufrufe von <xref:System.TimeZoneInfo.IsAmbiguousTime%2A> oder <xref:System.TimeZoneInfo.IsInvalidTime%2A> zurückgeben `false`).  
  
-   Alle Aufrufe von <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A> mit einzelnen Ortszeiten "false" zurückgegeben.  
  
 Dies ist "true", jedoch nicht, wenn ein Verweis auf die lokale Zeitzone abgerufen wird, mit der <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> Methode.  
  
 Die <xref:System.TimeZoneInfo.Local%2A> Eigenschaft entspricht der <xref:System.TimeZone.CurrentTimeZone%2A> Eigenschaft der <xref:System.TimeZone> Klasse.  
  
   
  
## Examples  
 Das folgende Beispiel ruft eine <xref:System.TimeZoneInfo> Objekt, das die lokale Zeitzone darstellt, und gibt die Anzeigenamen, Name der Standardzeit und Sommerzeit Name.  
  
 [!code-csharp[System.TimeZone2.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/ShowTimeZoneNames1.cs#2)]
 [!code-vb[System.TimeZone2.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/ShowTimeZoneNames1.vb#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/961fb70b-83f0-4dab-a042-cb5fcd817cf5">Gewusst wie: Zugreifen auf die vordefinierte UTC und lokale Zeitzonenobjekte</related>
      </Docs>
    </Member>
    <Member MemberName="StandardName">
      <MemberSignature Language="C#" Value="public string StandardName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StandardName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.StandardName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StandardName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StandardName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StandardName : string" Usage="System.TimeZoneInfo.StandardName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Anzeigenamen für die Standardzeit der Zeitzone ab.</summary>
        <value>Der Name der Standardzeit der Zeitzone.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Anzeigename wird lokalisiert, basierend auf der Kultur mit dem Windows-Betriebssystem installiert.  
  
 Die <xref:System.TimeZoneInfo.StandardName%2A> Eigenschaft ist identisch mit der <xref:System.TimeZone.StandardName%2A> Eigenschaft der <xref:System.TimeZone> Klasse.  
  
 Sprache des Betriebssystems ist Englisch, den Wert des der <xref:System.TimeZoneInfo.StandardName%2A> Eigenschaft ist in der Regel aber nicht immer identisch mit der <xref:System.TimeZoneInfo.Id%2A> Eigenschaft.  
  
   
  
## Examples  
 Das folgende Beispiel definiert eine Methode namens `DisplayDateWithTimeZoneName` , verwendet der <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> Methode, um zu ermitteln, ob der Name der Standardzeit oder Sommerzeit einer Zeitzone angezeigt.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool SupportsDaylightSavingTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsDaylightSavingTime" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SupportsDaylightSavingTime As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SupportsDaylightSavingTime { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.SupportsDaylightSavingTime : bool" Usage="System.TimeZoneInfo.SupportsDaylightSavingTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die Zeitzone über Sommerzeitregeln verfügt.</summary>
        <value><see langword="true" />, wenn die Zeitzone Sommerzeit unterstützt, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert des der <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> Eigenschaft für die lokale Zeitzone, die vom der <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> Eigenschaft spiegelt wider, die Einstellung der Systemsteuerung **Datums- /** der Anwendung das Kontrollkästchen, die definiert, ob das System automatisch für die Sommerzeit angepasst. Wenn es deaktiviert ist, oder wenn kein Kontrollkästchen für eine Zeitzone angezeigt wird, der Wert dieser Eigenschaft ist `false`.  
  
   
  
## Examples  
 Im folgende Beispiel ruft eine Auflistung aller Zeitzonen, die in einem lokalen System verfügbar sind, und zeigt die Namen der Dateien, die Sommerzeit nicht unterstützen.  
  
 [!code-csharp[System.TimeZone2.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#4)]
 [!code-vb[System.TimeZone2.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#4)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sender">Das Objekt, das den Rückruf initiiert hat. Die Funktionen für diesen Parameter sind derzeit nicht implementiert.</param>
        <summary>Wird ausgeführt, wenn die Deserialisierung eines Objekts abgeschlossen ist.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Das <see cref="T:System.TimeZoneInfo" />-Objekt enthält ungültige oder beschädigte Daten.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">Das mit Daten aufzufüllende <see cref="T:System.Runtime.Serialization.SerializationInfo" />-Objekt.</param>
        <param name="context">Das Ziel dieser Serialisierung (siehe <see cref="T:System.Runtime.Serialization.StreamingContext" />).</param>
        <summary>Füllt ein <see cref="T:System.Runtime.Serialization.SerializationInfo" />-Objekt mit den für das Serialisieren des aktuellen <see cref="T:System.TimeZoneInfo" />-Objekts erforderlichen Daten.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="info" />-Parameter ist <see langword="null" />.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">erfordert volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer. Dieser Member kann nicht von teilweise vertrauenswürdigem oder transparentem Code verwendet werden.</permission>
      </Docs>
    </Member>
    <Member MemberName="ToSerializedString">
      <MemberSignature Language="C#" Value="public string ToSerializedString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToSerializedString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ToSerializedString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToSerializedString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToSerializedString();" />
      <MemberSignature Language="F#" Value="member this.ToSerializedString : unit -&gt; string" Usage="timeZoneInfo.ToSerializedString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konvertiert das aktuelle <see cref="T:System.TimeZoneInfo" />-Objekt in eine serialisierte Zeichenfolge.</summary>
        <returns>Eine Zeichenfolge, die das aktuelle <see cref="T:System.TimeZoneInfo" />-Objekt darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Anwendungen, Zeitzonen, die nicht in der Regel in der Registrierung des Windows-Systems definiert sind oder die [ICU-Bibliothek](http://userguide.icu-project.org/datetime/timezone) unter Linux und MacOScan können die <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> Methode, um die erforderlichen Zeitzonen als instanziieren<xref:System.TimeZoneInfo>Objekte. Die Anwendung kann dann Aufrufen der <xref:System.TimeZoneInfo.ToSerializedString%2A> Methode, um das Objekt für die Zeitzone in eine Zeichenfolge zu konvertieren.  
  
 Die <xref:System.TimeZoneInfo> Objekt sollte an einem Speicherort, in dem die Anwendung kann diese abrufen bei Bedarf, auch gespeichert werden. Möglicher Speicherorte sind:  
  
-   Die Registrierung auf Windows-Systemen.  
  
-   Eine Ressourcendatei für die Anwendung.  
  
-   Eine externe Datei, z. B. eine Textdatei.  
  
   
  
## Examples  
 Im folgenden Beispiel wird versucht, zum Abrufen der Antarktis/Südpol Zeitzone aus dem lokalen System. Schlägt fehl, versucht der Code für das Abrufen von Informationen über die Zeitzone aus einer Textdatei im Verzeichnis Anwendung. Wenn dieser Versuch fehlschlägt, wird der Code erstellt die Zeitzone und Informationen zu der Textdatei schreibt.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#4)]
 [!code-vb[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.FromSerializedString(System.String)" />
        <related type="Article" href="https://msdn.microsoft.com/library/3c96d83a-a057-4496-abb0-8f4b12712558">Gewusst wie: Speichern von Zeitzonen in einer eingebetteten Ressource</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="timeZoneInfo.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt den Anzeigenamen des aktuellen <see cref="T:System.TimeZoneInfo" />-Objekts zurück.</summary>
        <returns>Der Wert der <see cref="P:System.TimeZoneInfo.DisplayName" />-Eigenschaft des aktuellen <see cref="T:System.TimeZoneInfo" />-Objekts.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn enthält einer Sammlung zuweisen, <xref:System.TimeZoneInfo> Objekte, z. B. einem Listensteuerelement die <xref:System.Windows.Forms.ListBox> -Steuerelement ruft das Steuerelement automatisch den <xref:System.TimeZoneInfo.ToString%2A> Methode, um eine Zeichenfolge zu extrahieren, die beschreibt, jedes Objekt in der Liste dargestellt werden. Daher, Sie müssen sich nicht um eine aussagekräftige Beschreibung des Objekts als Zeichenfolge zu speichern, und der Benutzer muss sich nicht auf diese Zeichenfolge zu verwenden, um das Objekt aus der Auflistung zu extrahieren. Weitere Informationen finden Sie unter [How to: Auf einem Computer vorhandenen Zeitzonen aufzählen](~/docs/standard/datetime/enumerate-time-zones.md) Weitere Details.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Utc">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo Utc { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.TimeZoneInfo Utc" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Utc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Utc As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeZoneInfo ^ Utc { TimeZoneInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Utc : TimeZoneInfo" Usage="System.TimeZoneInfo.Utc" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein <see cref="T:System.TimeZoneInfo" />-Objekt ab, das die UTC-Zone (Coordinated Universal Time) darstellt.</summary>
        <value>Ein Objekt, das die UTC-Zone (Coordinated Universal Time) darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dies ist ein integriertes Objekt. Informationen zu diesem <xref:System.TimeZoneInfo> Objekt ist nicht abgerufen, aus der Registrierung auf Windows-Systemen und von der [ICU-Bibliothek](http://userguide.icu-project.org/datetime/timezone) unter Linux und MacOS.  
  
> [!IMPORTANT]
>  Greifen Sie immer die Zone (Coordinated Universal Time, UTC), über die <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType> Eigenschaft anstatt die UTC-Zeitzone um eine <xref:System.TimeZoneInfo> Objektvariable. Dies verhindert, dass die <xref:System.TimeZoneInfo> -Objektvariable wird durch einen Aufruf für ungültig erklärt die <xref:System.TimeZoneInfo.ClearCachedData%2A> Methode.  
  
 Koordinierte Weltzeit wurde zuvor als "Greenwich Mean Time (GMT) bezeichnet.  
  
   
  
## Examples  
 Das folgende Beispiel ruft eine <xref:System.TimeZoneInfo> Objekt, das Coordinated Universal Time (UTC) darstellt, und gibt die Anzeigenamen, Name der Standardzeit und Sommerzeit Name.  
  
 [!code-csharp[System.TimeZone2.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#3)]
 [!code-vb[System.TimeZone2.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#3)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/961fb70b-83f0-4dab-a042-cb5fcd817cf5">Gewusst wie: Zugreifen auf die vordefinierte UTC und lokale Zeitzonenobjekte</related>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="Func&lt;T1,T2,TResult&gt;" FullName="System.Func&lt;T1,T2,TResult&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c6744ca1042a6c1665d9e9cd7c2fe7af2e670fff" /><Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="09/22/2018" /><Meta Name="ms.locfileid" Value="46600474" /></Metadata><TypeSignature Language="C#" Value="public delegate TResult Func&lt;in T1,in T2,out TResult&gt;(T1 arg1, T2 arg2);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`3&lt;- T1, - T2, + TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`3" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of In T1, In T2, Out TResult)(arg1 As T1, arg2 As T2) As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename TResult&gt;&#xA;public delegate TResult Func(T1 arg1, T2 arg2);" />
  <TypeSignature Language="F#" Value="type Func&lt;'T1, 'T2, 'Result&gt; = delegate of 'T1 * 'T2 -&gt; 'Result" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T2">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="arg1" Type="T1" />
    <Parameter Name="arg2" Type="T2" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T1"><span data-ttu-id="a38f9-101">Der Typ des ersten Parameters der Methode, die dieser Delegat kapselt.</span><span class="sxs-lookup"><span data-stu-id="a38f9-101">The type of the first parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <typeparam name="T2"><span data-ttu-id="a38f9-102">Der Typ des zweiten Parameters der Methode, die dieser Delegat kapselt.</span><span class="sxs-lookup"><span data-stu-id="a38f9-102">The type of the second parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <typeparam name="TResult"><span data-ttu-id="a38f9-103">Der Typ des Rückgabewerts der Methode, die dieser Delegat kapselt.</span><span class="sxs-lookup"><span data-stu-id="a38f9-103">The type of the return value of the method that this delegate encapsulates.</span></span></typeparam>
    <param name="arg1"><span data-ttu-id="a38f9-104">Der erste Parameter der Methode, die dieser Delegat kapselt.</span><span class="sxs-lookup"><span data-stu-id="a38f9-104">The first parameter of the method that this delegate encapsulates.</span></span></param>
    <param name="arg2"><span data-ttu-id="a38f9-105">Der zweite Parameter der Methode, die dieser Delegat kapselt.</span><span class="sxs-lookup"><span data-stu-id="a38f9-105">The second parameter of the method that this delegate encapsulates.</span></span></param>
    <summary><span data-ttu-id="a38f9-106">Kapselt eine Methode, die über zwei Parameter verfügt und einen Wert von dem Typ zurückgibt, der vom <typeparamref name="TResult" />-Parameter angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="a38f9-106">Encapsulates a method that has two parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</span></span></summary>
    <returns><span data-ttu-id="a38f9-107">Der Rückgabewert der Methode, die dieser Delegat kapselt.</span><span class="sxs-lookup"><span data-stu-id="a38f9-107">The return value of the method that this delegate encapsulates.</span></span></returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a38f9-108">Sie können diesen Delegaten verwenden, um eine Methode darstellen, die als Parameter übergeben werden können, ohne explizit einen benutzerdefinierten Delegaten zu deklarieren.</span><span class="sxs-lookup"><span data-stu-id="a38f9-108">You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate.</span></span> <span data-ttu-id="a38f9-109">Die der gekapselte Methode muss die Signatur der Methode entsprechen, die von diesem Delegaten definiert ist.</span><span class="sxs-lookup"><span data-stu-id="a38f9-109">The encapsulated method must correspond to the method signature that is defined by this delegate.</span></span> <span data-ttu-id="a38f9-110">Dies bedeutet, dass die gekapselte Methode zwei Parameter verfügen muss, von die jede an sie als Wert übergeben wird, und sie einen Wert zurückgeben muss.</span><span class="sxs-lookup"><span data-stu-id="a38f9-110">This means that the encapsulated method must have two parameters, each of which is passed to it by value, and that it must return a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a38f9-111">Um eine Methode zu verweisen, die über zwei Parameter verfügt und zurückgibt `void` (oder in Visual Basic deklariert wird als eine `Sub` statt als ein `Function`), die generische <xref:System.Action%602> stattdessen delegieren.</span><span class="sxs-lookup"><span data-stu-id="a38f9-111">To reference a method that has two parameters and returns `void` (or in Visual Basic, that is declared as a `Sub` rather than as a `Function`), use the generic <xref:System.Action%602> delegate instead.</span></span>  
  
 <span data-ttu-id="a38f9-112">Bei Verwendung der <xref:System.Func%603> Delegaten, Sie müssen nicht explizit einen Delegaten definieren, die eine Methode mit zwei Parametern kapselt.</span><span class="sxs-lookup"><span data-stu-id="a38f9-112">When you use the <xref:System.Func%603> delegate you do not have to explicitly define a delegate that encapsulates a method with two parameters.</span></span> <span data-ttu-id="a38f9-113">Der folgende Code deklariert beispielsweise explizit einen Delegaten, der mit dem Namen `ExtractMethod` und weist einen Verweis auf die `ExtractWords` Methode, um eine Delegatinstanz.</span><span class="sxs-lookup"><span data-stu-id="a38f9-113">For example, the following code explicitly declares a delegate named `ExtractMethod` and assigns a reference to the `ExtractWords` method to its delegate instance.</span></span>  
  
 [!code-csharp[System.Func~3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~3/cs/Delegate.cs#1)]
 [!code-vb[System.Func~3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~3/vb/Delegate.vb#1)]  
  
 <span data-ttu-id="a38f9-114">Im folgende Beispiel wird dieser Code vereinfacht, durch die Instanziierung einer <xref:System.Func%603> Delegaten aufrufen, anstatt explizit definieren einen neuen Delegaten und eine benannte Methode zugewiesen wird.</span><span class="sxs-lookup"><span data-stu-id="a38f9-114">The following example simplifies this code by instantiating a <xref:System.Func%603> delegate instead of explicitly defining a new delegate and assigning a named method to it.</span></span>  
  
 [!code-csharp[System.Func~3#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~3/cs/Func3.cs#2)]
 [!code-vb[System.Func~3#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~3/vb/Func3.vb#2)]  
  
 <span data-ttu-id="a38f9-115">Sie können die <xref:System.Func%603> delegieren mit anonymen Methoden in C# geschrieben, wie im folgende Beispiel veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="a38f9-115">You can use the <xref:System.Func%603> delegate with anonymous methods in C#, as the following example illustrates.</span></span> <span data-ttu-id="a38f9-116">(Eine Einführung in anonyme Methoden, finden Sie unter [anonyme Methoden](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span><span class="sxs-lookup"><span data-stu-id="a38f9-116">(For an introduction to anonymous methods, see [Anonymous Methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span></span>  
  
 [!code-csharp[System.Func~3#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~3/cs/Anon.cs#3)]  
  
 <span data-ttu-id="a38f9-117">Sie können auch einen Lambda-Ausdruck zuweisen einer <xref:System.Func%603> zu delegieren, wie im folgende Beispiel veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="a38f9-117">You can also assign a lambda expression to a <xref:System.Func%603> delegate, as the following example illustrates.</span></span> <span data-ttu-id="a38f9-118">(Eine Einführung in Lambda-Ausdrücke, finden Sie unter [Lambda-Ausdrücke](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) und [Lambda-Ausdrücke](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span><span class="sxs-lookup"><span data-stu-id="a38f9-118">(For an introduction to lambda expressions, see [Lambda Expressions](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) and [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span></span>  
  
 [!code-csharp[System.Func~3#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~3/cs/Lambda.cs#4)]
 [!code-vb[System.Func~3#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~3/vb/lambda.vb#4)]  
  
 <span data-ttu-id="a38f9-119">Der zugrunde liegende Typ eines Lambda-Ausdrucks ist eine der generischen `Func` Delegaten.</span><span class="sxs-lookup"><span data-stu-id="a38f9-119">The underlying type of a lambda expression is one of the generic `Func` delegates.</span></span> <span data-ttu-id="a38f9-120">Dadurch wird es möglich, einen Lambda-Ausdruck als Parameter übergeben werden, ohne explizit einen Delegaten zuzuweisen.</span><span class="sxs-lookup"><span data-stu-id="a38f9-120">This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate.</span></span> <span data-ttu-id="a38f9-121">Insbesondere, da viele Methoden der Typen in der <xref:System.Linq> Namespace verfügen <xref:System.Func%603> Parameter können Sie übergeben diese Methoden einen Lambda-Ausdruck ohne explizit zu instanziieren ein <xref:System.Func%603> delegieren.</span><span class="sxs-lookup"><span data-stu-id="a38f9-121">In particular, because many methods of types in the <xref:System.Linq> namespace have <xref:System.Func%603> parameters, you can pass these methods a lambda expression without explicitly instantiating a <xref:System.Func%603> delegate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a38f9-122">Im folgende Beispiel wird veranschaulicht, wie deklariert und verwendet eine <xref:System.Func%603> delegieren.</span><span class="sxs-lookup"><span data-stu-id="a38f9-122">The following example demonstrates how to declare and use a <xref:System.Func%603> delegate.</span></span> <span data-ttu-id="a38f9-123">Das folgende Beispiel deklariert eine <xref:System.Func%603> Variable und weist ihr einen Lambda-Ausdruck, der verwendet eine <xref:System.String> Wert und einem <xref:System.Int32> Wert als Parameter.</span><span class="sxs-lookup"><span data-stu-id="a38f9-123">This example declares a <xref:System.Func%603> variable and assigns it a lambda expression that takes a <xref:System.String> value and an <xref:System.Int32> value as parameters.</span></span> <span data-ttu-id="a38f9-124">Der Lambda-Ausdruck zurückgibt `true` Wenn die Länge des der <xref:System.String> -Parameter ist gleich dem Wert, der die <xref:System.Int32> Parameter.</span><span class="sxs-lookup"><span data-stu-id="a38f9-124">The lambda expression returns `true` if the length of the <xref:System.String> parameter is equal to the value of the <xref:System.Int32> parameter.</span></span> <span data-ttu-id="a38f9-125">Der Delegat, der diese Methode kapselt wird anschließend in einer Abfrage zum Filtern von Zeichenfolgen in ein Array von Zeichenfolgen verwendet.</span><span class="sxs-lookup"><span data-stu-id="a38f9-125">The delegate that encapsulates this method is subsequently used in a query to filter strings in an array of strings.</span></span>  
  
 [!code-csharp[System.Func~3#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~3/cs/Example.cs#5)]
 [!code-vb[System.Func~3#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~3/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md"><span data-ttu-id="a38f9-126">Lambda-Ausdrücke (C#-Programmierhandbuch)</span><span class="sxs-lookup"><span data-stu-id="a38f9-126">Lambda Expressions (C# Programming Guide)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md"><span data-ttu-id="a38f9-127">Lambda-Ausdrücke</span><span class="sxs-lookup"><span data-stu-id="a38f9-127">Lambda Expressions</span></span></related>
    <related type="Article" href="~/docs/csharp/programming-guide/delegates/index.md"><span data-ttu-id="a38f9-128">Delegaten (C#-Programmierhandbuch)</span><span class="sxs-lookup"><span data-stu-id="a38f9-128">Delegates (C# Programming Guide)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/delegates/index.md"><span data-ttu-id="a38f9-129">Delegaten in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="a38f9-129">Delegates in Visual Basic</span></span></related>
  </Docs>
</Type>
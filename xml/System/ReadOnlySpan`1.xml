<Type Name="ReadOnlySpan&lt;T&gt;" FullName="System.ReadOnlySpan&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5eb4876cd92aaf8a23e90b399fd393cabaceb0fc" /><Meta Name="ms.sourcegitcommit" Value="385ff23cc00fe9aa1c93460c62603b45c2041d0b" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="11/22/2019" /><Meta Name="ms.locfileid" Value="74385256" /></Metadata><TypeSignature Language="C#" Value="public struct ReadOnlySpan&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit ReadOnlySpan`1&lt;T&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.ReadOnlySpan`1" />
  <TypeSignature Language="VB.NET" Value="Public Structure ReadOnlySpan(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public value class ReadOnlySpan" />
  <TypeSignature Language="F#" Value="type ReadOnlySpan&lt;'T&gt; = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.2;netcore-2.1;netcore-3.0;netstandard-2.1">
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-2.2;netcore-2.1;netcore-3.0;netstandard-2.1">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T"><span data-ttu-id="f5680-101">Der Typ der Elemente in der <see cref="T:System.ReadOnlySpan`1" />.</span><span class="sxs-lookup"><span data-stu-id="f5680-101">The type of items in the <see cref="T:System.ReadOnlySpan`1" />.</span></span></typeparam>
    <summary><span data-ttu-id="f5680-102">Dieser enthält eine typ- und arbeitsspeichersichere schreibgeschützte Darstellung einer zusammenhängenden Region von beliebigem Arbeitsspeicher.</span><span class="sxs-lookup"><span data-stu-id="f5680-102">Provides a type-safe and memory-safe read-only representation of a contiguous region of arbitrary memory.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[<span data-ttu-id="f5680-103">`ReadOnlySpan<T>` ist eine [ref-Struktur](~/docs/csharp/language-reference/keywords/ref.md#ref-struct-types) , die auf dem Stapel zugeordnet wird und nie mit dem verwalteten Heap versehen werden kann.</span><span class="sxs-lookup"><span data-stu-id="f5680-103">`ReadOnlySpan<T>` is a [ref struct](~/docs/csharp/language-reference/keywords/ref.md#ref-struct-types) that is allocated on the stack and can never escape to the managed heap.</span></span> <span data-ttu-id="f5680-104">Referenzstruktur Typen weisen eine Reihe von Einschränkungen auf, um sicherzustellen, dass Sie nicht in den verwalteten Heap herauf gestuft werden können. Dies umfasst auch, dass Sie nicht gekapselt, in Lambda-Ausdrücken aufgezeichnet, Variablen vom Typ <xref:System.Object>zugewiesen, `dynamic` Variablen zugewiesen werden und nicht Implementieren Sie einen beliebigen Schnittstellentyp.</span><span class="sxs-lookup"><span data-stu-id="f5680-104">Ref struct types have a number of restrictions to ensure that they cannot be promoted to the managed heap, including that they can't be boxed, captured in lambda expressions, assigned to variables of type <xref:System.Object>, assigned to `dynamic` variables, and they cannot implement any interface type.</span></span>

<span data-ttu-id="f5680-105">Eine `ReadOnlySpan<T>`-Instanz wird häufig verwendet, um auf die Elemente eines Arrays oder einen Teil eines Arrays zu verweisen.</span><span class="sxs-lookup"><span data-stu-id="f5680-105">A `ReadOnlySpan<T>` instance is often used to reference the elements of an array or a portion of an array.</span></span> <span data-ttu-id="f5680-106">Anders als bei einem Array kann eine `ReadOnlySpan<T>` Instanz jedoch auf verwalteten Arbeitsspeicher, systemeigenen Arbeitsspeicher oder auf dem Stapel verwaltete Arbeitsspeicher verweisen.</span><span class="sxs-lookup"><span data-stu-id="f5680-106">Unlike an array, however, a `ReadOnlySpan<T>` instance can point to managed memory, native memory, or memory managed on the stack.</span></span>]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReadOnlySpan (T[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.#ctor(`0[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (array As T())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlySpan(cli::array &lt;T&gt; ^ array);" />
      <MemberSignature Language="F#" Value="new ReadOnlySpan&lt;'T&gt; : 'T[] -&gt; ReadOnlySpan&lt;'T&gt;" Usage="new System.ReadOnlySpan&lt;'T&gt; array" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="f5680-107">Das Array, aus dem <see cref="T:System.ReadOnlySpan`1" /> erstellt werden soll.</span><span class="sxs-lookup"><span data-stu-id="f5680-107">The array from which to create the <see cref="T:System.ReadOnlySpan`1" />.</span></span></param>
        <summary><span data-ttu-id="f5680-108">Erstellt ein neues <see cref="T:System.ReadOnlySpan`1" /> über das gesamte angegebene Array.</span><span class="sxs-lookup"><span data-stu-id="f5680-108">Creates a new <see cref="T:System.ReadOnlySpan`1" /> over the entirety of a specified array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="f5680-109">Wenn das Array NULL ist, gibt dieser Konstruktor eine NULL-`ReadOnlySpan<T>`zurück.</span><span class="sxs-lookup"><span data-stu-id="f5680-109">If the array is null, this constructor returns a null `ReadOnlySpan<T>`.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReadOnlySpan (void* pointer, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(void* pointer, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.#ctor(System.Void*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlySpan(void* pointer, int length);" />
      <MemberSignature Language="F#" Value="new ReadOnlySpan&lt;'T&gt; : nativeptr&lt;unit&gt; * int -&gt; ReadOnlySpan&lt;'T&gt;" Usage="new System.ReadOnlySpan&lt;'T&gt; (pointer, length)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.2;netcore-2.1;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="pointer" Type="System.Void*" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pointer"><span data-ttu-id="f5680-110">Ein Zeiger auf die Startadresse einer angegebenen Anzahl von <typeparamref name="T" />-Elementen im Arbeitsspeicher.</span><span class="sxs-lookup"><span data-stu-id="f5680-110">A pointer to the starting address of a specified number of <typeparamref name="T" /> elements in memory.</span></span></param>
        <param name="length"><span data-ttu-id="f5680-111">Die Anzahl von <typeparamref name="T" />-Elementen, die in <see cref="T:System.ReadOnlySpan`1" /> eingeschlossen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="f5680-111">The number of <typeparamref name="T" /> elements to be included in the <see cref="T:System.ReadOnlySpan`1" />.</span></span></param>
        <summary><span data-ttu-id="f5680-112">Erstellt ein neues <see cref="T:System.ReadOnlySpan`1" /> aus einer angegebenen Anzahl von <typeparamref name="T" />-Elementen. Dabei wird an der angegebenen Speicheradresse begonnen.</span><span class="sxs-lookup"><span data-stu-id="f5680-112">Creates a new <see cref="T:System.ReadOnlySpan`1" /> from a specified number of <typeparamref name="T" /> elements starting at a specified memory address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="f5680-113">Dieser Konstruktor sollte mit Bedacht verwendet werden, da er willkürlich typisierte `T`s aus einem Speicherblock erstellt.</span><span class="sxs-lookup"><span data-stu-id="f5680-113">This constructor should be used with care, since it creates arbitrarily typed `T`s from a block of memory.</span></span>]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f5680-114"><paramref name="T" /> ist ein Verweistyp oder enthält Verweise und kann deshalb nicht in nicht verwaltetem Arbeitsspeicher gespeichert werden.</span><span class="sxs-lookup"><span data-stu-id="f5680-114"><paramref name="T" /> is a reference type or contains references and therefore cannot be stored in unmanaged memory.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f5680-115"><paramref name="length" /> ist ein negativer Wert.</span><span class="sxs-lookup"><span data-stu-id="f5680-115"><paramref name="length" /> is negative.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReadOnlySpan (T[] array, int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T[] array, int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.#ctor(`0[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (array As T(), start As Integer, length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlySpan(cli::array &lt;T&gt; ^ array, int start, int length);" />
      <MemberSignature Language="F#" Value="new ReadOnlySpan&lt;'T&gt; : 'T[] * int * int -&gt; ReadOnlySpan&lt;'T&gt;" Usage="new System.ReadOnlySpan&lt;'T&gt; (array, start, length)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="f5680-116">Das Array, aus dem <see cref="T:System.ReadOnlySpan`1" /> erstellt werden soll.</span><span class="sxs-lookup"><span data-stu-id="f5680-116">The array from which to create the <see cref="T:System.ReadOnlySpan`1" />.</span></span></param>
        <param name="start"><span data-ttu-id="f5680-117">Der Index des ersten einzubeziehenden Elements.</span><span class="sxs-lookup"><span data-stu-id="f5680-117">The index of the first element to include.</span></span></param>
        <param name="length"><span data-ttu-id="f5680-118">Die Anzahl der einzubeziehenden Elemente.</span><span class="sxs-lookup"><span data-stu-id="f5680-118">The number of elements to include.</span></span></param>
        <summary><span data-ttu-id="f5680-119">Erstellt ein neues <see cref="T:System.ReadOnlySpan`1" />, das eine angegebene Anzahl von Elementen aus einem Array enthält. Dabei wird an einem angegebenen Index begonnen.</span><span class="sxs-lookup"><span data-stu-id="f5680-119">Creates a new <see cref="T:System.ReadOnlySpan`1" /> that includes a specified number of elements of an array starting at a specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

### Remarks

<span data-ttu-id="f5680-120">Diese Methode gibt `default` zurück, wenn `array` `null`ist.</span><span class="sxs-lookup"><span data-stu-id="f5680-120">This method returns `default` when `array` is `null`.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f5680-121"><paramref name="array" /> ist gleich <see langword="null" />, aber <paramref name="start" /> oder <paramref name="length" /> ist nicht 0 (null).</span><span class="sxs-lookup"><span data-stu-id="f5680-121"><paramref name="array" /> is <see langword="null" />, but <paramref name="start" /> or <paramref name="length" /> is non-zero.</span></span>

<span data-ttu-id="f5680-122">- oder -</span><span class="sxs-lookup"><span data-stu-id="f5680-122">-or-</span></span>

<span data-ttu-id="f5680-123"><paramref name="start" /> liegt außerhalb der Grenzen des Arrays.</span><span class="sxs-lookup"><span data-stu-id="f5680-123"><paramref name="start" /> is outside the bounds of the array.</span></span>

<span data-ttu-id="f5680-124">- oder -</span><span class="sxs-lookup"><span data-stu-id="f5680-124">-or-</span></span>

<span data-ttu-id="f5680-125"><paramref name="start" /> und <paramref name="length" /> überschreiten die Anzahl von Elementen im Array.</span><span class="sxs-lookup"><span data-stu-id="f5680-125"><paramref name="start" /> and <paramref name="length" /> exceeds the number of elements in the array.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Span&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(valuetype System.Span`1&lt;!T&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.CopyTo(System.Span{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (destination As Span(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(Span&lt;T&gt; destination);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : Span&lt;'T&gt; -&gt; unit" Usage="readOnlySpan.CopyTo destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="f5680-126">Der Bereich, in den Elemente kopiert werden sollen.</span><span class="sxs-lookup"><span data-stu-id="f5680-126">The span to copy items into.</span></span></param>
        <summary><span data-ttu-id="f5680-127">Kopiert die Inhalte dieses <see cref="T:System.ReadOnlySpan`1" />-Elements in ein <see cref="T:System.Span`1" />-Zielelement.</span><span class="sxs-lookup"><span data-stu-id="f5680-127">Copies the contents of this <see cref="T:System.ReadOnlySpan`1" /> into a destination <see cref="T:System.Span`1" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="f5680-128">Wenn sich die `source` und `destination` überlappen, wird der gesamte `source` behandelt, als ob er an einen temporären Speicherort kopiert wurde, bevor er in `destination`kopiert wird.</span><span class="sxs-lookup"><span data-stu-id="f5680-128">If the `source` and `destination` overlap, the entirety of `source` is handled as if it was copied to a temporary location before it is copied to `destination`.</span></span>]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f5680-129"><paramref name="destination" /> ist kürzer als das <see cref="T:System.ReadOnlySpan`1" />-Quellelement.</span><span class="sxs-lookup"><span data-stu-id="f5680-129"><paramref name="destination" /> is shorter than the source <see cref="T:System.ReadOnlySpan`1" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;T&gt; Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.ReadOnlySpan`1&lt;!T&gt; Empty" />
      <MemberSignature Language="DocId" Value="P:System.ReadOnlySpan`1.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property ReadOnlySpan&lt;T&gt; Empty { ReadOnlySpan&lt;T&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.Empty : ReadOnlySpan&lt;'T&gt;" Usage="System.ReadOnlySpan&lt;'T&gt;.Empty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f5680-130">Gibt ein leeres <see cref="T:System.ReadOnlySpan`1" /> zurück.</span><span class="sxs-lookup"><span data-stu-id="f5680-130">Returns an empty <see cref="T:System.ReadOnlySpan`1" />.</span></span></summary>
        <value><span data-ttu-id="f5680-131">Ein leerer <see cref="T:System.ReadOnlySpan`1" />.</span><span class="sxs-lookup"><span data-stu-id="f5680-131">An empty <see cref="T:System.ReadOnlySpan`1" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="readOnlySpan.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("Equals() on ReadOnlySpan will always throw an exception. Use == instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="f5680-132">Wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="f5680-132">Not supported.</span></span></param>
        <summary><span data-ttu-id="f5680-133">Wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="f5680-133">Not supported.</span></span> <span data-ttu-id="f5680-134">Löst eine <see cref="T:System.NotSupportedException" /> aus.</span><span class="sxs-lookup"><span data-stu-id="f5680-134">Throws a <see cref="T:System.NotSupportedException" />.</span></span></summary>
        <returns><span data-ttu-id="f5680-135">Wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="f5680-135">Not supported.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="f5680-136">Wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="f5680-136">Not supported.</span></span>]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="f5680-137">Wird stets durch diese Methode ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="f5680-137">Always thrown by this method.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public ReadOnlySpan&lt;T&gt;.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ReadOnlySpan`1/Enumerator&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As ReadOnlySpan(Of T).Enumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlySpan&lt;T&gt;::Enumerator GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; ReadOnlySpan&lt;'T&gt;.Enumerator" Usage="readOnlySpan.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f5680-138">Gibt einen Enumerator für dieses <see cref="T:System.ReadOnlySpan`1" />-Element zurück.</span><span class="sxs-lookup"><span data-stu-id="f5680-138">Returns an enumerator for this <see cref="T:System.ReadOnlySpan`1" />.</span></span></summary>
        <returns><span data-ttu-id="f5680-139">Ruft einen Enumerator für dieses schreibgeschützte Span-Element ab.</span><span class="sxs-lookup"><span data-stu-id="f5680-139">An enumerator for this read-only span.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="f5680-140">Anstatt die <xref:System.ReadOnlySpan%601.GetEnumerator%2A>-Methode direkt aufzurufenden, können C# Sie die `foreach`-Anweisung und das Visual Basic `For Each`...`Next`-Konstrukt verwenden, um eine <xref:System.ReadOnlySpan%601>aufzulisten.</span><span class="sxs-lookup"><span data-stu-id="f5680-140">Instead of calling the <xref:System.ReadOnlySpan%601.GetEnumerator%2A> method directly, you can use the C# `foreach` statement and the Visual Basic `For Each`...`Next` construct to enumerate a <xref:System.ReadOnlySpan%601>.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="readOnlySpan.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("GetHashCode() on ReadOnlySpan will always throw an exception.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f5680-141">Wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="f5680-141">Not supported.</span></span> <span data-ttu-id="f5680-142">Löst eine <see cref="T:System.NotSupportedException" /> aus.</span><span class="sxs-lookup"><span data-stu-id="f5680-142">Throws a <see cref="T:System.NotSupportedException" />.</span></span></summary>
        <returns><span data-ttu-id="f5680-143">Wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="f5680-143">Not supported.</span></span></returns>
        <remarks><span data-ttu-id="f5680-144">Wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="f5680-144">Not supported.</span></span></remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="f5680-145">Wird stets durch diese Methode ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="f5680-145">Always thrown by this method.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetPinnableReference">
      <MemberSignature Language="C#" Value="public ref readonly T GetPinnableReference ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T GetPinnableReference() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.GetPinnableReference" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPinnableReference () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T&amp; ^ GetPinnableReference();" />
      <MemberSignature Language="F#" Value="member this.GetPinnableReference : unit -&gt; 'T" Usage="readOnlySpan.GetPinnableReference " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue RefType="Readonly">
        <ReturnType>T</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="netcore-2.1">
            <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f5680-146">Ein schreibgeschützter Verweis auf ein Objekt vom Typ T, das zum Fixieren verwendet werden kann und für die Unterstützung der Verwendung einer Spanne innerhalb einer fixed-Anweisung erforderlich ist.</span><span class="sxs-lookup"><span data-stu-id="f5680-146">A read-only reference to an object of type T that can be used for pinning, and is required to support the use of span within a fixed statement.</span></span></summary>
        <returns><span data-ttu-id="f5680-147">Ein Verweis auf das Element der Spanne bei Index 0 oder <see langword="null" />, wenn die Spanne leer ist</span><span class="sxs-lookup"><span data-stu-id="f5680-147">A reference to the element of the span at index 0, or <see langword="null" /> if the span is empty.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.ReadOnlySpan`1.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmpty : bool" Usage="System.ReadOnlySpan&lt;'T&gt;.IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f5680-148">Gibt einen Wert zurück, der angibt, dass das aktuelle schreibgeschützte Span-Element leer ist.</span><span class="sxs-lookup"><span data-stu-id="f5680-148">Returns a value that indicates the current read-only span is empty.</span></span></summary>
        <value><span data-ttu-id="f5680-149"><see langword="true" />, wenn die aktuelle Spanne leer ist. Andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="f5680-149"><see langword="true" /> when the current span is empty; otherwise <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public T this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.ReadOnlySpan`1.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(index As Integer) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T&amp; ^ default[int] { T&amp; ^ get(int index); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : 'T" Usage="System.ReadOnlySpan&lt;'T&gt;.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.2;netcore-2.1;netcore-3.0;netstandard-2.1">
          <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="f5680-150">Der nullbasierte Index des abzurufenden Elements.</span><span class="sxs-lookup"><span data-stu-id="f5680-150">The zero-based index of the element to get.</span></span></param>
        <summary><span data-ttu-id="f5680-151">Ruft ein Element aus dem schreibgeschützten Span-Element am angegebenen nullbasierten Index ab.</span><span class="sxs-lookup"><span data-stu-id="f5680-151">Gets an item from the read-only span at the specified zero-based index.</span></span></summary>
        <value><span data-ttu-id="f5680-152">Das Element aus der schreibgeschützten Spanne.</span><span class="sxs-lookup"><span data-stu-id="f5680-152">The element from the read-only span.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IndexOutOfRangeException"><span data-ttu-id="f5680-153"><paramref name="index" /> ist kleiner als 0 (null) oder größer oder gleich <see cref="P:System.ReadOnlySpan`1.Length" />.</span><span class="sxs-lookup"><span data-stu-id="f5680-153"><paramref name="index" /> is less then zero or greater than or equal to <see cref="P:System.ReadOnlySpan`1.Length" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.ReadOnlySpan`1.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Length { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int" Usage="System.ReadOnlySpan&lt;'T&gt;.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f5680-154">Die Anzahl der Elemente im schreibgeschützten Span-Element.</span><span class="sxs-lookup"><span data-stu-id="f5680-154">The number of items in the read-only span.</span></span></summary>
        <value><span data-ttu-id="f5680-155">Eine -Anzahl von Elementen.</span><span class="sxs-lookup"><span data-stu-id="f5680-155">The number of items.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (ReadOnlySpan&lt;T&gt; left, ReadOnlySpan&lt;T&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.ReadOnlySpan`1&lt;!T&gt; left, valuetype System.ReadOnlySpan`1&lt;!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.op_Equality(System.ReadOnlySpan{`0},System.ReadOnlySpan{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As ReadOnlySpan(Of T), right As ReadOnlySpan(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(ReadOnlySpan&lt;T&gt; left, ReadOnlySpan&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : ReadOnlySpan&lt;'T&gt; * ReadOnlySpan&lt;'T&gt; -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.ReadOnlySpan&lt;T&gt;" />
        <Parameter Name="right" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="f5680-156">Das erste zu vergleichende Span-Element.</span><span class="sxs-lookup"><span data-stu-id="f5680-156">The first span to compare.</span></span></param>
        <param name="right"><span data-ttu-id="f5680-157">Das zweite zu vergleichende Span-Element.</span><span class="sxs-lookup"><span data-stu-id="f5680-157">The second span to compare.</span></span></param>
        <summary><span data-ttu-id="f5680-158">Gibt einen Wert zurück, der angibt, ob zwei <see cref="T:System.ReadOnlySpan`1" />-Instanzen gleich sind.</span><span class="sxs-lookup"><span data-stu-id="f5680-158">Returns a value that indicates whether two <see cref="T:System.ReadOnlySpan`1" /> instances are equal.</span></span></summary>
        <returns><span data-ttu-id="f5680-159"><see langword="true" />, wenn die beiden <see cref="T:System.ReadOnlySpan`1" />-Instanzen gleich sind, andernfalls <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="f5680-159"><see langword="true" /> if the two <see cref="T:System.ReadOnlySpan`1" /> instances are equal; otherwise, <see langword="false" /></span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="f5680-160">Dies testet, ob zwei <xref:System.ReadOnlySpan`1> Instanzen auf denselben Start Speicherort zeigen und dieselben <xref:System.ReadOnlySpan`1.Length> Werte aufweisen.</span><span class="sxs-lookup"><span data-stu-id="f5680-160">This tests if two <xref:System.ReadOnlySpan`1> instances point to the same starting memory location, and have the same <xref:System.ReadOnlySpan`1.Length> values.</span></span> <span data-ttu-id="f5680-161">Dies vergleicht nicht den Inhalt von zwei <xref:System.ReadOnlySpan`1> Instanzen.</span><span class="sxs-lookup"><span data-stu-id="f5680-161">This does not compare the contents of two <xref:System.ReadOnlySpan`1> instances.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator ReadOnlySpan&lt;T&gt; (ArraySegment&lt;T&gt; segment);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.ReadOnlySpan`1&lt;!T&gt; op_Implicit(valuetype System.ArraySegment`1&lt;!T&gt; segment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.op_Implicit(System.ArraySegment{`0})~System.ReadOnlySpan{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (segment As ArraySegment(Of T)) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator ReadOnlySpan&lt;T&gt;(ArraySegment&lt;T&gt; segment);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : ArraySegment&lt;'T&gt; -&gt; ReadOnlySpan&lt;'T&gt;" Usage="System.ReadOnlySpan&lt;'T&gt;.op_Implicit segment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="segment" Type="System.ArraySegment&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="segment"><span data-ttu-id="f5680-162">Das Segment des Arrays, das in <see cref="T:System.ReadOnlySpan`1" /> konvertiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="f5680-162">The array segment to be converted to a <see cref="T:System.ReadOnlySpan`1" />.</span></span></param>
        <summary><span data-ttu-id="f5680-163">Definiert eine implizite Konvertierung von <see cref="T:System.ArraySegment`1" /> in <see cref="T:System.ReadOnlySpan`1" />.</span><span class="sxs-lookup"><span data-stu-id="f5680-163">Defines an implicit conversion of an <see cref="T:System.ArraySegment`1" /> to a <see cref="T:System.ReadOnlySpan`1" />.</span></span></summary>
        <returns><span data-ttu-id="f5680-164">Ein schreibgeschütztes Span-Element, das dem Arraysegment entspricht.</span><span class="sxs-lookup"><span data-stu-id="f5680-164">A read-only span that corresponds to the array segment.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator ReadOnlySpan&lt;T&gt; (T[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.ReadOnlySpan`1&lt;!T&gt; op_Implicit(!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.op_Implicit(`0[])~System.ReadOnlySpan{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (array As T()) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator ReadOnlySpan&lt;T&gt;(cli::array &lt;T&gt; ^ array);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : 'T[] -&gt; ReadOnlySpan&lt;'T&gt;" Usage="System.ReadOnlySpan&lt;'T&gt;.op_Implicit array" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="f5680-165">Das Array, das in <see cref="T:System.ReadOnlySpan`1" /> konvertiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="f5680-165">The array to convert to a <see cref="T:System.ReadOnlySpan`1" />.</span></span></param>
        <summary><span data-ttu-id="f5680-166">Definiert eine implizite Konvertierung eines Arrays in <see cref="T:System.ReadOnlySpan`1" />.</span><span class="sxs-lookup"><span data-stu-id="f5680-166">Defines an implicit conversion of an array to a <see cref="T:System.ReadOnlySpan`1" />.</span></span></summary>
        <returns><span data-ttu-id="f5680-167">Das schreibgeschützte Span-Element, das <paramref name="array" /> entspricht.</span><span class="sxs-lookup"><span data-stu-id="f5680-167">The read-only span that corresponds to <paramref name="array" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (ReadOnlySpan&lt;T&gt; left, ReadOnlySpan&lt;T&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.ReadOnlySpan`1&lt;!T&gt; left, valuetype System.ReadOnlySpan`1&lt;!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.op_Inequality(System.ReadOnlySpan{`0},System.ReadOnlySpan{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As ReadOnlySpan(Of T), right As ReadOnlySpan(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(ReadOnlySpan&lt;T&gt; left, ReadOnlySpan&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : ReadOnlySpan&lt;'T&gt; * ReadOnlySpan&lt;'T&gt; -&gt; bool" Usage="System.ReadOnlySpan&lt;'T&gt;.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.ReadOnlySpan&lt;T&gt;" />
        <Parameter Name="right" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="f5680-168">Das erste zu vergleichende schreibgeschützte Span-Element.</span><span class="sxs-lookup"><span data-stu-id="f5680-168">The first read-only span to compare.</span></span></param>
        <param name="right"><span data-ttu-id="f5680-169">Das zweite zu vergleichende schreibgeschützte Span-Element.</span><span class="sxs-lookup"><span data-stu-id="f5680-169">The second read-only span to compare.</span></span></param>
        <summary><span data-ttu-id="f5680-170">Gibt einen Wert zurück, der angibt, ob zwei <see cref="T:System.ReadOnlySpan`1" />-Instanzen ungleich sind.</span><span class="sxs-lookup"><span data-stu-id="f5680-170">Returns a value that indicates whether two <see cref="T:System.ReadOnlySpan`1" /> instances are not equal.</span></span></summary>
        <returns><span data-ttu-id="f5680-171"><see langword="true" />, wenn die beiden <see cref="T:System.ReadOnlySpan`1" />-Instanzen ungleich sind, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="f5680-171"><see langword="true" /> if the two <see cref="T:System.ReadOnlySpan`1" /> instances are not equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="f5680-172">Zwei <xref:System.ReadOnlySpan%601> Instanzen sind nicht gleich, wenn Sie unterschiedliche Längen aufweisen oder wenn die entsprechenden Elemente `left` und `right` auf verschiedene Speicherorte zeigen.</span><span class="sxs-lookup"><span data-stu-id="f5680-172">Two <xref:System.ReadOnlySpan%601> instances are not equal if they have different lengths or if the corresponding elements of `left` and `right` point to different memory locations.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="C#" Value="public ReadOnlySpan&lt;T&gt; Slice (int start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ReadOnlySpan`1&lt;!T&gt; Slice(int32 start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.Slice(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Slice (start As Integer) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlySpan&lt;T&gt; Slice(int start);" />
      <MemberSignature Language="F#" Value="member this.Slice : int -&gt; ReadOnlySpan&lt;'T&gt;" Usage="readOnlySpan.Slice start" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start"><span data-ttu-id="f5680-173">Der Index, an dem der Slice beginnen soll.</span><span class="sxs-lookup"><span data-stu-id="f5680-173">The index at which to begin the slice.</span></span></param>
        <summary><span data-ttu-id="f5680-174">Bildet einen Slice aus dem aktuellen schreibgeschützten Span-Element, das an einem angegebenen Index beginnt.</span><span class="sxs-lookup"><span data-stu-id="f5680-174">Forms a slice out of the current read-only span that begins at a specified index.</span></span></summary>
        <returns><span data-ttu-id="f5680-175">Ein Span-Element, das aus allen Elementen des aktuellen Span-Elements von <paramref name="start" /> bis zum Ende des Span-Elements besteht.</span><span class="sxs-lookup"><span data-stu-id="f5680-175">A span that consists of all elements of the current span from <paramref name="start" /> to the end of the span.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f5680-176"><paramref name="start" /> ist größer als die Anzahl der Elemente im schreibgeschützten Span-Element.</span><span class="sxs-lookup"><span data-stu-id="f5680-176"><paramref name="start" /> is greater than the number of items in the read-only span.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="C#" Value="public ReadOnlySpan&lt;T&gt; Slice (int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ReadOnlySpan`1&lt;!T&gt; Slice(int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.Slice(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Slice (start As Integer, length As Integer) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlySpan&lt;T&gt; Slice(int start, int length);" />
      <MemberSignature Language="F#" Value="member this.Slice : int * int -&gt; ReadOnlySpan&lt;'T&gt;" Usage="readOnlySpan.Slice (start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start"><span data-ttu-id="f5680-177">Der Index, an dem dieser Slice beginnen soll.</span><span class="sxs-lookup"><span data-stu-id="f5680-177">The index at which to begin this slice.</span></span></param>
        <param name="length"><span data-ttu-id="f5680-178">Die gewünschte Länge des Slices.</span><span class="sxs-lookup"><span data-stu-id="f5680-178">The desired length for the slice.</span></span></param>
        <summary><span data-ttu-id="f5680-179">Bildet einen Slice aus dem aktuellen schreibgeschützten Span-Element. Dabei wird an einem angegebenen Index für eine angegebene Länge begonnen.</span><span class="sxs-lookup"><span data-stu-id="f5680-179">Forms a slice out of the current read-only span starting at a specified index for a specified length.</span></span></summary>
        <returns><span data-ttu-id="f5680-180">Ein schreibgeschütztes Span-Element besteht aus <paramref name="length" />-Elementen des aktuellen Span-Elements. Dabei wird bei <paramref name="start" /> begonnen.</span><span class="sxs-lookup"><span data-stu-id="f5680-180">A read-only span that consists of <paramref name="length" /> elements from the current span starting at <paramref name="start" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f5680-181"><paramref name="start" /> ist kleiner als 0 (null) oder größer als <see cref="P:System.Span`1.Length" />.</span><span class="sxs-lookup"><span data-stu-id="f5680-181"><paramref name="start" /> is less than zero or greater than <see cref="P:System.Span`1.Length" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public T[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.ToArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToArray () As T()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;T&gt; ^ ToArray();" />
      <MemberSignature Language="F#" Value="member this.ToArray : unit -&gt; 'T[]" Usage="readOnlySpan.ToArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f5680-182">Kopiert die Inhalte dieses schreibgeschützten Span-Elements in ein neues Array.</span><span class="sxs-lookup"><span data-stu-id="f5680-182">Copies the contents of this read-only span into a new array.</span></span></summary>
        <returns><span data-ttu-id="f5680-183">Ein Array das die Daten des aktuellen Span-Elements enthält.</span><span class="sxs-lookup"><span data-stu-id="f5680-183">An array containing the data in the current span.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="f5680-184">Diese Methode führt eine Heap Zuordnung und eine Datenkopie aus und sollte daher nach Möglichkeit vermieden werden.</span><span class="sxs-lookup"><span data-stu-id="f5680-184">This method performs a heap allocation and data copy, and therefore, should be avoided if possible.</span></span> <span data-ttu-id="f5680-185">Es ist manchmal notwendig, wenn APIs, die <xref:System.ReadOnlySpan%601> unterstützen, nicht verfügbar sind, aber APIs, die mit Arrays funktionieren, sind.</span><span class="sxs-lookup"><span data-stu-id="f5680-185">It it sometimes necessary when APIs that support <xref:System.ReadOnlySpan%601> are not available, but APIs that work with arrays are.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="readOnlySpan.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f5680-186">Gibt die Zeichenfolgendarstellung für dieses <see cref="T:System.ReadOnlySpan`1" /> zurück.</span><span class="sxs-lookup"><span data-stu-id="f5680-186">Returns the string representation of this <see cref="T:System.ReadOnlySpan`1" />.</span></span></summary>
        <returns><span data-ttu-id="f5680-187">Die Zeichenfolgendarstellung dieser Instanz.</span><span class="sxs-lookup"><span data-stu-id="f5680-187">The string representation of this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="f5680-188">Bei einer `ReadOnlySpan<Char>`gibt die `ToString`-Methode eine <xref:System.String> zurück, die die Zeichen enthält, auf die die Spanne zeigt.</span><span class="sxs-lookup"><span data-stu-id="f5680-188">For a `ReadOnlySpan<Char>`, the `ToString` method returns a <xref:System.String> that contains the characters pointed to by the span.</span></span> <span data-ttu-id="f5680-189">Andernfalls wird eine <xref:System.String> mit dem Namen des Typs und der Anzahl der Elemente zurückgegeben, die in der Spanne enthalten sind.</span><span class="sxs-lookup"><span data-stu-id="f5680-189">Otherwise, it returns a <xref:System.String> with the name of the type and the number of elements that the span contains.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCopyTo">
      <MemberSignature Language="C#" Value="public bool TryCopyTo (Span&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryCopyTo(valuetype System.Span`1&lt;!T&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.TryCopyTo(System.Span{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function TryCopyTo (destination As Span(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryCopyTo(Span&lt;T&gt; destination);" />
      <MemberSignature Language="F#" Value="member this.TryCopyTo : Span&lt;'T&gt; -&gt; bool" Usage="readOnlySpan.TryCopyTo destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="f5680-190">Das Ziel des Kopiervorgangs.</span><span class="sxs-lookup"><span data-stu-id="f5680-190">The target of the copy operation.</span></span></param>
        <summary><span data-ttu-id="f5680-191">Versucht, den Inhalt dieses <see cref="T:System.ReadOnlySpan`1" /> in ein <see cref="T:System.Span`1" /> zu kopieren und gibt einen Wert zurück, der angibt, ob der Vorgang erfolgreich war oder nicht.</span><span class="sxs-lookup"><span data-stu-id="f5680-191">Attempts to copy the contents of this <see cref="T:System.ReadOnlySpan`1" /> into a <see cref="T:System.Span`1" /> and returns a value to indicate whether or not the operation succeeded.</span></span></summary>
        <returns><span data-ttu-id="f5680-192"><see langword="true" />, wenn der Kopiervorgang erfolgreich war; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="f5680-192"><see langword="true" /> if the copy operation succeeded; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="f5680-193">Wenn sich die `source` und `destination` überlappen, wird der gesamte `source` behandelt, als ob er an einen temporären Speicherort kopiert wurde, bevor er in `destination`kopiert wird.</span><span class="sxs-lookup"><span data-stu-id="f5680-193">If the `source` and `destination` overlap, the entirety of `source` is handled as if it was copied to a temporary location before it is copied to `destination`.</span></span>

<span data-ttu-id="f5680-194">Wenn die `destination` Länge kürzer als `source`ist, werden keine Elemente kopiert, und die Methode gibt `false`zurück.</span><span class="sxs-lookup"><span data-stu-id="f5680-194">If the `destination` length is shorter than `source`, no items are copied and the method returns `false`.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="Half" FullName="System.Half">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e2061cb285aa94064ebe6d0e6c4b7c548ef7b6d0" /><Meta Name="ms.sourcegitcommit" Value="a372e6accee5099e1c114f8589ca6b4537f1caaa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/20/2020" /><Meta Name="ms.locfileid" Value="88655674" /></Metadata><TypeSignature Language="C#" Value="public struct Half : IComparable, IComparable&lt;Half&gt;, IEquatable&lt;Half&gt;, IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit Half extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.Half&gt;, class System.IEquatable`1&lt;valuetype System.Half&gt;, class System.IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.Half" />
  <TypeSignature Language="VB.NET" Value="Public Structure Half&#xA;Implements IComparable, IComparable(Of Half), IEquatable(Of Half), IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public value class Half : IComparable, IComparable&lt;Half&gt;, IEquatable&lt;Half&gt;, IFormattable" />
  <TypeSignature Language="F#" Value="type Half = struct&#xA;    interface IFormattable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.Half&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Half&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="c2739-101">Ein IEEE 754-kompatibler <see langword="float16" />-Typ.</span><span class="sxs-lookup"><span data-stu-id="c2739-101">An IEEE 754 compliant <see langword="float16" /> type.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (Half other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.Half other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Half.CompareTo(System.Half)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As Half) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(Half other);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : Half -&gt; int&#xA;override this.CompareTo : Half -&gt; int" Usage="half.CompareTo other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Half" />
      </Parameters>
      <Docs>
        <param name="other">To be added.</param>
        <summary><span data-ttu-id="c2739-102">Vergleicht dieses Objekt mit einem anderen Objekt und gibt eine ganze Zahl zurück, die die Beziehung angibt.</span><span class="sxs-lookup"><span data-stu-id="c2739-102">Compares this object to another object, returning an integer that indicates the relationship.</span></span></summary>
        <returns><span data-ttu-id="c2739-103">Ein Wert kleiner als 0, wenn dieser kleiner als <paramref name="other" /> ist, 0, wenn dieser gleich <paramref name="other" /> ist, oder größer als 0, wenn dieser größer als <paramref name="other" /> ist.</span><span class="sxs-lookup"><span data-stu-id="c2739-103">A value less than zero if this is less than <paramref name="other" />, zero if this is equal to <paramref name="other" />, or a value greater than zero if this is greater than <paramref name="other" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Half.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (obj As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj -&gt; int&#xA;override this.CompareTo : obj -&gt; int" Usage="half.CompareTo obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <summary><span data-ttu-id="c2739-104">Vergleicht dieses Objekt mit einem anderen Objekt und gibt eine ganze Zahl zurück, die die Beziehung angibt.</span><span class="sxs-lookup"><span data-stu-id="c2739-104">Compares this object to another object, returning an integer that indicates the relationship.</span></span></summary>
        <returns><span data-ttu-id="c2739-105">Ein Wert kleiner als 0, wenn dieser kleiner als <paramref name="obj" /> ist, 0, wenn dieser gleich <paramref name="obj" /> ist, oder größer als 0, wenn dieser größer als <paramref name="obj" /> ist.</span><span class="sxs-lookup"><span data-stu-id="c2739-105">A value less than zero if this is less than <paramref name="obj" />, zero if this is equal to <paramref name="obj" />, or a value greater than zero if this is greater than <paramref name="obj" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c2739-106"><paramref name="obj" /> ist nicht vom Typ <see cref="T:System.Half" />.</span><span class="sxs-lookup"><span data-stu-id="c2739-106"><paramref name="obj" /> is not of type <see cref="T:System.Half" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Epsilon">
      <MemberSignature Language="C#" Value="public static Half Epsilon { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Half Epsilon" />
      <MemberSignature Language="DocId" Value="P:System.Half.Epsilon" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Epsilon As Half" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Half Epsilon { Half get(); };" />
      <MemberSignature Language="F#" Value="member this.Epsilon : Half" Usage="System.Half.Epsilon" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Half</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (Half other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.Half other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Half.Equals(System.Half)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As Half) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(Half other);" />
      <MemberSignature Language="F#" Value="override this.Equals : Half -&gt; bool" Usage="half.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Half" />
      </Parameters>
      <Docs>
        <param name="other">To be added.</param>
        <summary><span data-ttu-id="c2739-107">Vergleicht diese Instanz auf Gleichheit mit <paramref name="other" />.</span><span class="sxs-lookup"><span data-stu-id="c2739-107">Compares this instance for equality with <paramref name="other" />.</span></span></summary>
        <returns><span data-ttu-id="c2739-108"><see langword="true" />, wenn das aktuelle Objekt <paramref name="other" /> entspricht, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c2739-108"><see langword="true" /> if the current object is equal to <paramref name="other" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Half.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="half.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <summary><span data-ttu-id="c2739-109">Gibt einen Wert zurück, der angibt, ob diese Instanz gleich einem angegebenen <paramref name="obj" /> ist.</span><span class="sxs-lookup"><span data-stu-id="c2739-109">Returns a value that indicates whether this instance is equal to a specified <paramref name="obj" />.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Half.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="half.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c2739-110">Fungiert als Standardhashfunktion.</span><span class="sxs-lookup"><span data-stu-id="c2739-110">Serves as the default hash function.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFinite">
      <MemberSignature Language="C#" Value="public static bool IsFinite (Half value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsFinite(valuetype System.Half value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Half.IsFinite(System.Half)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsFinite (value As Half) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsFinite(Half value);" />
      <MemberSignature Language="F#" Value="static member IsFinite : Half -&gt; bool" Usage="System.Half.IsFinite value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Half" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary><span data-ttu-id="c2739-111">Diese Methode bestimmt, ob der Wert endlich ist (Null, subnormal oder normal).</span><span class="sxs-lookup"><span data-stu-id="c2739-111">Determines whether the specified value is finite (zero, subnormal, or normal).</span></span></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInfinity">
      <MemberSignature Language="C#" Value="public static bool IsInfinity (Half value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsInfinity(valuetype System.Half value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Half.IsInfinity(System.Half)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsInfinity (value As Half) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsInfinity(Half value);" />
      <MemberSignature Language="F#" Value="static member IsInfinity : Half -&gt; bool" Usage="System.Half.IsInfinity value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Half" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary><span data-ttu-id="c2739-112">Bestimmt, ob der angegebene Wert unendlich ist.</span><span class="sxs-lookup"><span data-stu-id="c2739-112">Determines whether the specified value is infinite.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNaN">
      <MemberSignature Language="C#" Value="public static bool IsNaN (Half value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNaN(valuetype System.Half value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Half.IsNaN(System.Half)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNaN (value As Half) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNaN(Half value);" />
      <MemberSignature Language="F#" Value="static member IsNaN : Half -&gt; bool" Usage="System.Half.IsNaN value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Half" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary><span data-ttu-id="c2739-113">Bestimmt, ob der angegebene Wert NaN ist.</span><span class="sxs-lookup"><span data-stu-id="c2739-113">Determines whether the specified value is NaN.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNegative">
      <MemberSignature Language="C#" Value="public static bool IsNegative (Half value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNegative(valuetype System.Half value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Half.IsNegative(System.Half)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNegative (value As Half) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNegative(Half value);" />
      <MemberSignature Language="F#" Value="static member IsNegative : Half -&gt; bool" Usage="System.Half.IsNegative value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Half" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary><span data-ttu-id="c2739-114">Bestimmt, ob der angegebene Wert negativ ist.</span><span class="sxs-lookup"><span data-stu-id="c2739-114">Determines whether the specified value is negative.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNegativeInfinity">
      <MemberSignature Language="C#" Value="public static bool IsNegativeInfinity (Half value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNegativeInfinity(valuetype System.Half value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Half.IsNegativeInfinity(System.Half)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNegativeInfinity (value As Half) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNegativeInfinity(Half value);" />
      <MemberSignature Language="F#" Value="static member IsNegativeInfinity : Half -&gt; bool" Usage="System.Half.IsNegativeInfinity value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Half" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary><span data-ttu-id="c2739-115">Bestimmt, ob der angegebene Wert negativ unendlich ist.</span><span class="sxs-lookup"><span data-stu-id="c2739-115">Determines whether the specified value is negative infinity.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNormal">
      <MemberSignature Language="C#" Value="public static bool IsNormal (Half value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNormal(valuetype System.Half value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Half.IsNormal(System.Half)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNormal (value As Half) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNormal(Half value);" />
      <MemberSignature Language="F#" Value="static member IsNormal : Half -&gt; bool" Usage="System.Half.IsNormal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Half" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary><span data-ttu-id="c2739-116">Bestimmt, ob der angegebene Wert normal ist.</span><span class="sxs-lookup"><span data-stu-id="c2739-116">Determines whether the specified value is normal.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPositiveInfinity">
      <MemberSignature Language="C#" Value="public static bool IsPositiveInfinity (Half value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPositiveInfinity(valuetype System.Half value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Half.IsPositiveInfinity(System.Half)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPositiveInfinity (value As Half) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPositiveInfinity(Half value);" />
      <MemberSignature Language="F#" Value="static member IsPositiveInfinity : Half -&gt; bool" Usage="System.Half.IsPositiveInfinity value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Half" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary><span data-ttu-id="c2739-117">Bestimmt, ob der angegebene Wert positiv unendlich ist.</span><span class="sxs-lookup"><span data-stu-id="c2739-117">Determines whether the specified value is positive infinity.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSubnormal">
      <MemberSignature Language="C#" Value="public static bool IsSubnormal (Half value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSubnormal(valuetype System.Half value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Half.IsSubnormal(System.Half)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSubnormal (value As Half) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSubnormal(Half value);" />
      <MemberSignature Language="F#" Value="static member IsSubnormal : Half -&gt; bool" Usage="System.Half.IsSubnormal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Half" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary><span data-ttu-id="c2739-118">Bestimmt, ob der angegebene Wert subnormal ist.</span><span class="sxs-lookup"><span data-stu-id="c2739-118">Determines whether the specified value is subnormal.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public static Half MaxValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Half MaxValue" />
      <MemberSignature Language="DocId" Value="P:System.Half.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MaxValue As Half" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Half MaxValue { Half get(); };" />
      <MemberSignature Language="F#" Value="member this.MaxValue : Half" Usage="System.Half.MaxValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Half</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public static Half MinValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Half MinValue" />
      <MemberSignature Language="DocId" Value="P:System.Half.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MinValue As Half" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Half MinValue { Half get(); };" />
      <MemberSignature Language="F#" Value="member this.MinValue : Half" Usage="System.Half.MinValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Half</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NaN">
      <MemberSignature Language="C#" Value="public static Half NaN { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Half NaN" />
      <MemberSignature Language="DocId" Value="P:System.Half.NaN" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property NaN As Half" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Half NaN { Half get(); };" />
      <MemberSignature Language="F#" Value="member this.NaN : Half" Usage="System.Half.NaN" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Half</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NegativeInfinity">
      <MemberSignature Language="C#" Value="public static Half NegativeInfinity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Half NegativeInfinity" />
      <MemberSignature Language="DocId" Value="P:System.Half.NegativeInfinity" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property NegativeInfinity As Half" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Half NegativeInfinity { Half get(); };" />
      <MemberSignature Language="F#" Value="member this.NegativeInfinity : Half" Usage="System.Half.NegativeInfinity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Half</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (Half left, Half right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Half left, valuetype System.Half right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Half.op_Equality(System.Half,System.Half)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As Half, right As Half) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(Half left, Half right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : Half * Half -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Half" />
        <Parameter Name="right" Type="System.Half" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Half (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Half op_Explicit(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Half.op_Explicit(System.Double)~System.Half" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Double) As Half" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Half(double value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : double -&gt; Half" Usage="System.Half.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Half</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator double (Half value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname float64 op_Explicit(valuetype System.Half value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Half.op_Explicit(System.Half)~System.Double" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Half) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator double(Half value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : Half -&gt; double" Usage="System.Half.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Half" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator float (Half value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname float32 op_Explicit(valuetype System.Half value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Half.op_Explicit(System.Half)~System.Single" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Half) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator float(Half value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : Half -&gt; single" Usage="System.Half.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Half" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Half (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Half op_Explicit(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Half.op_Explicit(System.Single)~System.Half" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Single) As Half" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Half(float value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : single -&gt; Half" Usage="System.Half.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Half</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (Half left, Half right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.Half left, valuetype System.Half right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Half.op_GreaterThan(System.Half,System.Half)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As Half, right As Half) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(Half left, Half right);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : Half * Half -&gt; bool" Usage="left &gt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Half" />
        <Parameter Name="right" Type="System.Half" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (Half left, Half right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.Half left, valuetype System.Half right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Half.op_GreaterThanOrEqual(System.Half,System.Half)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As Half, right As Half) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(Half left, Half right);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : Half * Half -&gt; bool" Usage="left &gt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Half" />
        <Parameter Name="right" Type="System.Half" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (Half left, Half right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Half left, valuetype System.Half right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Half.op_Inequality(System.Half,System.Half)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As Half, right As Half) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(Half left, Half right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : Half * Half -&gt; bool" Usage="System.Half.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Half" />
        <Parameter Name="right" Type="System.Half" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (Half left, Half right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.Half left, valuetype System.Half right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Half.op_LessThan(System.Half,System.Half)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As Half, right As Half) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(Half left, Half right);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : Half * Half -&gt; bool" Usage="left &lt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Half" />
        <Parameter Name="right" Type="System.Half" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (Half left, Half right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.Half left, valuetype System.Half right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Half.op_LessThanOrEqual(System.Half,System.Half)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As Half, right As Half) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(Half left, Half right);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : Half * Half -&gt; bool" Usage="left &lt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Half" />
        <Parameter Name="right" Type="System.Half" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static Half Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Half Parse(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Half.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String) As Half" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Half Parse(System::String ^ s);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; Half" Usage="System.Half.Parse s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Half</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="c2739-119">Die Eingabe, die analysiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="c2739-119">The input to be parsed.</span></span></param>
        <summary><span data-ttu-id="c2739-120">Analysiert eine Zeichenfolge nach Standardvorgehensweise.</span><span class="sxs-lookup"><span data-stu-id="c2739-120">Parses a string in the default parse style.</span></span></summary>
        <returns><span data-ttu-id="c2739-121">Der äquivalente <see cref="T:System.Half" />-Wert, der die Eingabezeichenfolge darstellt.</span><span class="sxs-lookup"><span data-stu-id="c2739-121">The equivalent <see cref="T:System.Half" /> value that represents the input string.</span></span> <span data-ttu-id="c2739-122">Wenn die Eingabe den Bereich von <see cref="T:System.Half" />, <see cref="P:System.Half.PositiveInfinity" /> überschreitet oder <see cref="P:System.Half.NegativeInfinity" /> zurückgegeben wird.</span><span class="sxs-lookup"><span data-stu-id="c2739-122">If the input exceeds the range of <see cref="T:System.Half" />, <see cref="P:System.Half.PositiveInfinity" /> or <see cref="P:System.Half.NegativeInfinity" /> is returned.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static Half Parse (string s, System.Globalization.NumberStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Half Parse(string s, valuetype System.Globalization.NumberStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Half.Parse(System.String,System.Globalization.NumberStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, style As NumberStyles) As Half" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Half Parse(System::String ^ s, System::Globalization::NumberStyles style);" />
      <MemberSignature Language="F#" Value="static member Parse : string * System.Globalization.NumberStyles -&gt; Half" Usage="System.Half.Parse (s, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Half</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="c2739-123">Die Eingabe, die analysiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="c2739-123">The input to be parsed.</span></span></param>
        <param name="style"><span data-ttu-id="c2739-124">Einer der Enumerationswerte, der angibt, wie die Eingabe analysiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="c2739-124">One of the enumeration values that specifies how to parse the input.</span></span></param>
        <summary><span data-ttu-id="c2739-125">Analysiert eine Zeichenfolge im angegebenen Stil.</span><span class="sxs-lookup"><span data-stu-id="c2739-125">Parses a string in the specified style.</span></span></summary>
        <returns><span data-ttu-id="c2739-126">Der äquivalente <see cref="T:System.Half" />-Wert, der die Eingabezeichenfolge darstellt.</span><span class="sxs-lookup"><span data-stu-id="c2739-126">The equivalent <see cref="T:System.Half" /> value that represents the input string.</span></span> <span data-ttu-id="c2739-127">Wenn die Eingabe den Bereich von <see cref="T:System.Half" />, <see cref="P:System.Half.PositiveInfinity" /> überschreitet oder <see cref="P:System.Half.NegativeInfinity" /> zurückgegeben wird.</span><span class="sxs-lookup"><span data-stu-id="c2739-127">If the input exceeds the range of <see cref="T:System.Half" />, <see cref="P:System.Half.PositiveInfinity" /> or <see cref="P:System.Half.NegativeInfinity" /> is returned.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static Half Parse (string s, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Half Parse(string s, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Half.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, provider As IFormatProvider) As Half" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Half Parse(System::String ^ s, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider -&gt; Half" Usage="System.Half.Parse (s, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Half</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="c2739-128">Die Eingabe, die analysiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="c2739-128">The input to be parsed.</span></span></param>
        <param name="provider"><span data-ttu-id="c2739-129">Ein Formatanbieter.</span><span class="sxs-lookup"><span data-stu-id="c2739-129">A format provider.</span></span></param>
        <summary><span data-ttu-id="c2739-130">Analysiert eine Zeichenfolge mit dem angegebenen Formatanbieter.</span><span class="sxs-lookup"><span data-stu-id="c2739-130">Parses a string using the specified format provider.</span></span></summary>
        <returns><span data-ttu-id="c2739-131">Der äquivalente <see cref="T:System.Half" />-Wert, der die Eingabezeichenfolge darstellt.</span><span class="sxs-lookup"><span data-stu-id="c2739-131">The equivalent <see cref="T:System.Half" /> value that represents the input string.</span></span> <span data-ttu-id="c2739-132">Wenn die Eingabe den Bereich von <see cref="T:System.Half" />, <see cref="P:System.Half.PositiveInfinity" /> überschreitet oder <see cref="P:System.Half.NegativeInfinity" /> zurückgegeben wird.</span><span class="sxs-lookup"><span data-stu-id="c2739-132">If the input exceeds the range of <see cref="T:System.Half" />, <see cref="P:System.Half.PositiveInfinity" /> or <see cref="P:System.Half.NegativeInfinity" /> is returned.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static Half Parse (ReadOnlySpan&lt;char&gt; s, System.Globalization.NumberStyles style = System.Globalization.NumberStyles.AllowDecimalPoint | System.Globalization.NumberStyles.AllowExponent | System.Globalization.NumberStyles.AllowLeadingSign | System.Globalization.NumberStyles.AllowLeadingWhite | System.Globalization.NumberStyles.AllowThousands | System.Globalization.NumberStyles.AllowTrailingWhite | System.Globalization.NumberStyles.Float | System.Globalization.NumberStyles.Integer, IFormatProvider? provider = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Half Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Half.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As ReadOnlySpan(Of Char), Optional style As NumberStyles = System.Globalization.NumberStyles.AllowDecimalPoint | System.Globalization.NumberStyles.AllowExponent | System.Globalization.NumberStyles.AllowLeadingSign | System.Globalization.NumberStyles.AllowLeadingWhite | System.Globalization.NumberStyles.AllowThousands | System.Globalization.NumberStyles.AllowTrailingWhite | System.Globalization.NumberStyles.Float | System.Globalization.NumberStyles.Integer, Optional provider As IFormatProvider = Nothing) As Half" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; * System.Globalization.NumberStyles * IFormatProvider -&gt; Half" Usage="System.Half.Parse (s, style, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Half</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="c2739-133">Die Eingabe, die analysiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="c2739-133">The input to be parsed.</span></span></param>
        <param name="style"><span data-ttu-id="c2739-134">Einer der Enumerationswerte, der angibt, wie die Eingabe analysiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="c2739-134">One of the enumeration values that specifies how to parse the input.</span></span></param>
        <param name="provider"><span data-ttu-id="c2739-135">Ein Formatanbieter.</span><span class="sxs-lookup"><span data-stu-id="c2739-135">A format provider.</span></span></param>
        <summary><span data-ttu-id="c2739-136">Analysiert eine Spanne im angegebenen Stil und unter Verwendung des angegebenen Formatanbieters.</span><span class="sxs-lookup"><span data-stu-id="c2739-136">Parses a span in the specified style and using the specified format provider.</span></span></summary>
        <returns><span data-ttu-id="c2739-137">Der äquivalente <see cref="T:System.Half" />-Wert, der die Eingabespanne darstellt.</span><span class="sxs-lookup"><span data-stu-id="c2739-137">The equivalent <see cref="T:System.Half" /> value that represents the input span.</span></span> <span data-ttu-id="c2739-138">Wenn die Eingabe den Bereich von <see cref="T:System.Half" />, <see cref="P:System.Half.PositiveInfinity" /> überschreitet oder <see cref="P:System.Half.NegativeInfinity" /> zurückgegeben wird.</span><span class="sxs-lookup"><span data-stu-id="c2739-138">If the input exceeds the range of <see cref="T:System.Half" />, <see cref="P:System.Half.PositiveInfinity" /> or <see cref="P:System.Half.NegativeInfinity" /> is returned.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static Half Parse (string s, System.Globalization.NumberStyles style = System.Globalization.NumberStyles.AllowDecimalPoint | System.Globalization.NumberStyles.AllowExponent | System.Globalization.NumberStyles.AllowLeadingSign | System.Globalization.NumberStyles.AllowLeadingWhite | System.Globalization.NumberStyles.AllowThousands | System.Globalization.NumberStyles.AllowTrailingWhite | System.Globalization.NumberStyles.Float | System.Globalization.NumberStyles.Integer, IFormatProvider? provider = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Half Parse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Half.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, Optional style As NumberStyles = System.Globalization.NumberStyles.AllowDecimalPoint | System.Globalization.NumberStyles.AllowExponent | System.Globalization.NumberStyles.AllowLeadingSign | System.Globalization.NumberStyles.AllowLeadingWhite | System.Globalization.NumberStyles.AllowThousands | System.Globalization.NumberStyles.AllowTrailingWhite | System.Globalization.NumberStyles.Float | System.Globalization.NumberStyles.Integer, Optional provider As IFormatProvider = Nothing) As Half" />
      <MemberSignature Language="F#" Value="static member Parse : string * System.Globalization.NumberStyles * IFormatProvider -&gt; Half" Usage="System.Half.Parse (s, style, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Half</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="c2739-139">Die Eingabe, die analysiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="c2739-139">The input to be parsed.</span></span></param>
        <param name="style"><span data-ttu-id="c2739-140">Einer der Enumerationswerte, der angibt, wie die Eingabe analysiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="c2739-140">One of the enumeration values that specifies how to parse the input.</span></span></param>
        <param name="provider"><span data-ttu-id="c2739-141">Ein Formatanbieter.</span><span class="sxs-lookup"><span data-stu-id="c2739-141">A format provider.</span></span></param>
        <summary><span data-ttu-id="c2739-142">Analysiert eine Zeichenfolge im angegebenen Stil und unter Verwendung des angegebenen Formatanbieters.</span><span class="sxs-lookup"><span data-stu-id="c2739-142">Parses a string in the specified style and using the specified format provider.</span></span></summary>
        <returns><span data-ttu-id="c2739-143">Der äquivalente <see cref="T:System.Half" />-Wert, der die Eingabezeichenfolge darstellt.</span><span class="sxs-lookup"><span data-stu-id="c2739-143">The equivalent <see cref="T:System.Half" /> value that represents the input string.</span></span> <span data-ttu-id="c2739-144">Wenn die Eingabe den Bereich von <see cref="T:System.Half" />, <see cref="P:System.Half.PositiveInfinity" /> überschreitet oder <see cref="P:System.Half.NegativeInfinity" /> zurückgegeben wird.</span><span class="sxs-lookup"><span data-stu-id="c2739-144">If the input exceeds the range of <see cref="T:System.Half" />, <see cref="P:System.Half.PositiveInfinity" /> or <see cref="P:System.Half.NegativeInfinity" /> is returned.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PositiveInfinity">
      <MemberSignature Language="C#" Value="public static Half PositiveInfinity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Half PositiveInfinity" />
      <MemberSignature Language="DocId" Value="P:System.Half.PositiveInfinity" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property PositiveInfinity As Half" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Half PositiveInfinity { Half get(); };" />
      <MemberSignature Language="F#" Value="member this.PositiveInfinity : Half" Usage="System.Half.PositiveInfinity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Half</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Half.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="half.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c2739-145">Gibt eine Zeichenfolgendarstellung des aktuellen Werts zurück.</span><span class="sxs-lookup"><span data-stu-id="c2739-145">Returns a string representation of the current value.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider? provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Half.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="half.ToString provider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">To be added.</param>
        <summary><span data-ttu-id="c2739-146">Gibt eine Zeichenfolgendarstellung des aktuellen Werts mit dem angegebenen <paramref name="provider" />-Parameter zurück.</span><span class="sxs-lookup"><span data-stu-id="c2739-146">Returns a string representation of the current value with the specified <paramref name="provider" />.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string? format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Half.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="half.ToString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">To be added.</param>
        <summary><span data-ttu-id="c2739-147">Gibt eine Zeichenfolgendarstellung des aktuellen Werts mithilfe des angegebenen <paramref name="format" />-Parameters zurück.</span><span class="sxs-lookup"><span data-stu-id="c2739-147">Returns a string representation of the current value using the specified <paramref name="format" />.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string? ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Half.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="half.ToString (format, provider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <summary><span data-ttu-id="c2739-148">Gibt eine Zeichenfolgendarstellung des aktuellen Werts mithilfe der angegebenen Parameter <paramref name="format" /> und <paramref name="provider" /> zurück.</span><span class="sxs-lookup"><span data-stu-id="c2739-148">Returns a string representation of the current value using the specified <paramref name="format" /> and <paramref name="provider" />.</span></span></summary>
        <returns><span data-ttu-id="c2739-149">Der Wert der aktuellen Instanz im angegebenen Format.</span><span class="sxs-lookup"><span data-stu-id="c2739-149">The value of the current instance in the specified format.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = default, IFormatProvider? provider = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Half.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = Nothing, Optional provider As IFormatProvider = Nothing) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryFormat : Span&lt;char&gt; * int * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool" Usage="half.TryFormat (destination, charsWritten, format, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="c2739-150">Wenn diese Methode zurückgegeben wird, wird der Wert dieser Instanz als Zeichenspanne formatiert.</span><span class="sxs-lookup"><span data-stu-id="c2739-150">When this method returns, this instance's value formatted as a span of characters.</span></span></param>
        <param name="charsWritten"><span data-ttu-id="c2739-151">Nach Ausführung dieser Methode die Anzahl der in <paramref name="destination" /> geschriebenen Zeichen.</span><span class="sxs-lookup"><span data-stu-id="c2739-151">When this method returns, the number of characters that were written in <paramref name="destination" />.</span></span></param>
        <param name="format"><span data-ttu-id="c2739-152">Eine Zeichenspanne, die eine standardmäßige oder benutzerdefinierte Formatzeichenfolge darstellt, die das akzeptable Format für <paramref name="destination" /> definiert.</span><span class="sxs-lookup"><span data-stu-id="c2739-152">A span containing the characters that represent a standard or custom format string that defines the acceptable format for <paramref name="destination" />.</span></span></param>
        <param name="provider"><span data-ttu-id="c2739-153">Ein optionales Objekt, das kulturspezifische Formatierungsinformationen für <paramref name="destination" /> bereitstellt.</span><span class="sxs-lookup"><span data-stu-id="c2739-153">An optional object that supplies culture-specific formatting information for <paramref name="destination" />.</span></span></param>
        <summary><span data-ttu-id="c2739-154">Versucht, den Wert der aktuellen <see cref="System.Half" />-Instanz in die angegebene Zeichenspanne zu formatieren.</span><span class="sxs-lookup"><span data-stu-id="c2739-154">Tries to format the value of the current <see cref="System.Half" /> instance into the provided span of characters.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, out Half result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, [out] valuetype System.Half&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Half.TryParse(System.ReadOnlySpan{System.Char},System.Half@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), ByRef result As Half) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, [Runtime::InteropServices::Out] Half % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * Half -&gt; bool" Usage="System.Half.TryParse (s, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="result" Type="System.Half" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="c2739-155">Die Eingabe, die analysiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="c2739-155">The input to be parsed.</span></span></param>
        <param name="result"><span data-ttu-id="c2739-156">Ein Wert, der nach Rückgabe dieser Methode die Eingabespanne darstellt.</span><span class="sxs-lookup"><span data-stu-id="c2739-156">When this method returns, a value that represents the input span.</span></span> <span data-ttu-id="c2739-157">Wenn die Eingabe den Bereich von <see cref="T:System.Half" /> überschreitet, lautet der Wert <see cref="P:System.Half.PositiveInfinity" /> oder <see cref="P:System.Half.NegativeInfinity" />.</span><span class="sxs-lookup"><span data-stu-id="c2739-157">If the input exceeds the range of <see cref="T:System.Half" />, its value is <see cref="P:System.Half.PositiveInfinity" /> or <see cref="P:System.Half.NegativeInfinity" />.</span></span> <span data-ttu-id="c2739-158">Wenn die Analyse nicht erfolgreich war, ist der Standardwert <see cref="T:System.Half" /> enthalten.</span><span class="sxs-lookup"><span data-stu-id="c2739-158">If the parse was unsuccessful, contains the default <see cref="T:System.Half" /> value.</span></span></param>
        <summary><span data-ttu-id="c2739-159">Versucht, eine Spanne nach Standardvorgehensweise analysieren.</span><span class="sxs-lookup"><span data-stu-id="c2739-159">Tries to parse a span in the default parse style.</span></span></summary>
        <returns><span data-ttu-id="c2739-160"><see langword="true" />, wenn die Analyse erfolgreich war, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c2739-160"><see langword="true" /> if the parse was successful; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out Half result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, [out] valuetype System.Half&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Half.TryParse(System.String,System.Half@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, ByRef result As Half) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, [Runtime::InteropServices::Out] Half % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * Half -&gt; bool" Usage="System.Half.TryParse (s, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="result" Type="System.Half" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="c2739-161">Die Eingabe, die analysiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="c2739-161">The input to be parsed.</span></span></param>
        <param name="result"><span data-ttu-id="c2739-162">Ein Wert, der nach Rückgabe dieser Methode die Eingabezeichenfolge darstellt.</span><span class="sxs-lookup"><span data-stu-id="c2739-162">When this method returns, a value that represents the input string.</span></span> <span data-ttu-id="c2739-163">Wenn die Eingabe den Bereich von <see cref="T:System.Half" /> überschreitet, lautet der Wert <see cref="P:System.Half.PositiveInfinity" /> oder <see cref="P:System.Half.NegativeInfinity" />.</span><span class="sxs-lookup"><span data-stu-id="c2739-163">If the input exceeds the range of <see cref="T:System.Half" />, its value is <see cref="P:System.Half.PositiveInfinity" /> or <see cref="P:System.Half.NegativeInfinity" />.</span></span> <span data-ttu-id="c2739-164">Wenn die Analyse nicht erfolgreich war, ist der Standardwert <see cref="T:System.Half" /> enthalten.</span><span class="sxs-lookup"><span data-stu-id="c2739-164">If the parse was unsuccessful, contains the default <see cref="T:System.Half" /> value.</span></span></param>
        <summary><span data-ttu-id="c2739-165">Versucht, eine Zeichenfolge nach Standardvorgehensweise analysieren.</span><span class="sxs-lookup"><span data-stu-id="c2739-165">Tries to parse a string in the default parse style.</span></span></summary>
        <returns><span data-ttu-id="c2739-166"><see langword="true" />, wenn die Analyse erfolgreich war, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c2739-166"><see langword="true" /> if the parse was successful; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, System.Globalization.NumberStyles style, IFormatProvider? provider, out Half result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, [out] valuetype System.Half&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Half.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Half@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), style As NumberStyles, provider As IFormatProvider, ByRef result As Half) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, System::Globalization::NumberStyles style, IFormatProvider ^ provider, [Runtime::InteropServices::Out] Half % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * System.Globalization.NumberStyles * IFormatProvider * Half -&gt; bool" Usage="System.Half.TryParse (s, style, provider, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.Half" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="c2739-167">Die Eingabe, die analysiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="c2739-167">The input to be parsed.</span></span></param>
        <param name="style"><span data-ttu-id="c2739-168">Einer der Enumerationswerte, der angibt, wie die Eingabe analysiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="c2739-168">One of the enumeration values that specifies how to parse the input.</span></span></param>
        <param name="provider"><span data-ttu-id="c2739-169">Ein Formatanbieter.</span><span class="sxs-lookup"><span data-stu-id="c2739-169">A format provider.</span></span></param>
        <param name="result"><span data-ttu-id="c2739-170">Ein Wert, der nach Rückgabe dieser Methode die Eingabespanne darstellt.</span><span class="sxs-lookup"><span data-stu-id="c2739-170">When this method returns, a value that represents the input span.</span></span> <span data-ttu-id="c2739-171">Wenn die Eingabe den Bereich von <see cref="T:System.Half" /> überschreitet, lautet der Wert <see cref="P:System.Half.PositiveInfinity" /> oder <see cref="P:System.Half.NegativeInfinity" />.</span><span class="sxs-lookup"><span data-stu-id="c2739-171">If the input exceeds the range of <see cref="T:System.Half" />, its value is <see cref="P:System.Half.PositiveInfinity" /> or <see cref="P:System.Half.NegativeInfinity" />.</span></span> <span data-ttu-id="c2739-172">Wenn die Analyse nicht erfolgreich war, ist der Standardwert <see cref="T:System.Half" /> enthalten.</span><span class="sxs-lookup"><span data-stu-id="c2739-172">If the parse was unsuccessful, contains the default <see cref="T:System.Half" /> value.</span></span></param>
        <summary><span data-ttu-id="c2739-173">Versucht, eine Spanne mit den angegebenen <see cref="T:System.Globalization.NumberStyles" />- und <see cref="T:System.IFormatProvider" />-Elementen zu analysieren.</span><span class="sxs-lookup"><span data-stu-id="c2739-173">Tries to parse a span with the specified <see cref="T:System.Globalization.NumberStyles" /> and <see cref="T:System.IFormatProvider" />.</span></span></summary>
        <returns><span data-ttu-id="c2739-174"><see langword="true" />, wenn die Analyse erfolgreich war, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c2739-174"><see langword="true" /> if the parse was successful; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, System.Globalization.NumberStyles style, IFormatProvider? provider, out Half result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, [out] valuetype System.Half&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Half.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Half@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, style As NumberStyles, provider As IFormatProvider, ByRef result As Half) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, System::Globalization::NumberStyles style, IFormatProvider ^ provider, [Runtime::InteropServices::Out] Half % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * System.Globalization.NumberStyles * IFormatProvider * Half -&gt; bool" Usage="System.Half.TryParse (s, style, provider, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.Half" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="c2739-175">Die Eingabe, die analysiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="c2739-175">The input to be parsed.</span></span></param>
        <param name="style"><span data-ttu-id="c2739-176">Einer der Enumerationswerte, der angibt, wie die Eingabe analysiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="c2739-176">One of the enumeration values that specifies how to parse the input.</span></span></param>
        <param name="provider"><span data-ttu-id="c2739-177">Ein Formatanbieter.</span><span class="sxs-lookup"><span data-stu-id="c2739-177">A format provider.</span></span></param>
        <param name="result"><span data-ttu-id="c2739-178">Ein Wert, der nach Rückgabe dieser Methode die Eingabezeichenfolge darstellt.</span><span class="sxs-lookup"><span data-stu-id="c2739-178">When this method returns, a value that represents the input string.</span></span> <span data-ttu-id="c2739-179">Wenn die Eingabe den Bereich von <see cref="T:System.Half" /> überschreitet, lautet der Wert <see cref="P:System.Half.PositiveInfinity" /> oder <see cref="P:System.Half.NegativeInfinity" />.</span><span class="sxs-lookup"><span data-stu-id="c2739-179">If the input exceeds the range of <see cref="T:System.Half" />, its value is <see cref="P:System.Half.PositiveInfinity" /> or <see cref="P:System.Half.NegativeInfinity" />.</span></span> <span data-ttu-id="c2739-180">Wenn die Analyse nicht erfolgreich war, ist der Standardwert <see cref="T:System.Half" /> enthalten.</span><span class="sxs-lookup"><span data-stu-id="c2739-180">If the parse was unsuccessful, contains the default <see cref="T:System.Half" /> value.</span></span></param>
        <summary><span data-ttu-id="c2739-181">Versucht, eine Zeichenfolge mit den angegebenen <see cref="T:System.Globalization.NumberStyles" />- und <see cref="T:System.IFormatProvider" />-Elementen zu analysieren.</span><span class="sxs-lookup"><span data-stu-id="c2739-181">Tries to parse a string with the specified <see cref="T:System.Globalization.NumberStyles" /> and <see cref="T:System.IFormatProvider" />.</span></span></summary>
        <returns><span data-ttu-id="c2739-182"><see langword="true" />, wenn die Analyse erfolgreich war, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c2739-182"><see langword="true" /> if the parse was successful; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>

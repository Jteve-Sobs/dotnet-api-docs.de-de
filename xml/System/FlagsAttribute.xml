<Type Name="FlagsAttribute" FullName="System.FlagsAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="97615c0cc55673df4c0518c94f836c20ffcbede4" />
    <Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="11/27/2018" />
    <Meta Name="ms.locfileid" Value="52376277" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class FlagsAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit FlagsAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.FlagsAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Class FlagsAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class FlagsAttribute : Attribute" />
  <TypeSignature Language="F#" Value="type FlagsAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Enum, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Gibt an, dass eine Enumeration als Bitfeld, d. h. als Gruppe von Flags, behandelt werden kann.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bitfelder werden in der Regel für Listen von Elementen, die auftreten können, in Kombination verwendet, während Enumerationskonstanten in der Regel für die Listen sich gegenseitig ausschließende Elemente verwendet werden. Daher sollen Bitfelder mit einer bitweisen OR-Operation zum Generieren nicht benannter Werte kombiniert werden, während Enumerationskonstanten nicht sind. Sprachen, die bei der Verwendung von Bitfeldern, die im Vergleich zu Enumerationskonstanten unterschiedlich sein.  
  
## <a name="attributes-of-the-flagsattribute"></a>Attribute von FlagsAttribute  
 <xref:System.AttributeUsageAttribute> auf diese Klasse angewendet wird und die zugehörige <xref:System.AttributeUsageAttribute.Inherited%2A> Eigenschaft gibt an, `false`. Dieses Attribut kann nur auf Enumerationen angewendet werden.  
  
## <a name="guidelines-for-flagsattribute-and-enum"></a>Richtlinien für die FlagsAttribute "und" Enum  
  
-   Verwenden der <xref:System.FlagsAttribute> benutzerdefiniertes Attribut für eine Enumeration, die nur dann, wenn eine bitweise Operation (AND, OR EXKLUSIVES oder) ausgeführt wird, die auf einem numerischen Wert.  
  
-   Definieren Sie Enumerationskonstanten in Potenzen von 2, d. h. 1, 2, 4, 8 und So weiter. Dies bedeutet, dass die einzelnen Flags in der kombinierten Enumerationskonstanten nicht überschneiden.  
  
-   Es empfiehlt sich eine Enumerationskonstante für häufig verwendete Flagkombinationen. Z. B. Wenn Sie eine Enumeration, der für e/a-Vorgänge verwendet haben, enthält die Enumerationskonstanten `Read = 1` und `Write = 2`, es empfiehlt sich die Enumerationskonstante `ReadWrite = Read OR Write`, welche kombiniert die `Read` und `Write` Flags. Darüber hinaus kann die bitweise OR-Operation zum Kombinieren der Flags verwendet einen erweiterten Ansatz in einigen Fällen berücksichtigt werden, die nicht für einfache Aufgaben erforderlich sein sollte.  
  
-   Verwenden Sie vorsichtig, wenn Sie eine negative Zahl als eine Flag-Enumerationskonstanten definieren, da viele Flagpositionen auf 1 festgelegt werden können, die möglicherweise, dass Ihr Code verwirrend und codierungsangewohnheiten Fehler.  
  
-   Eine praktische Möglichkeit zu prüfen, ob ein Flag in einem numerischen Wert festgelegt ist ist, führen Sie eine bitweise AND-Operation zwischen den numerischen Wert und die Flag-Enumerationskonstante, die legt alle Bits in den numerischen Wert 0 (null), die nicht auf das Flag entsprechen , testen, ob das Ergebnis des Vorgangs das Flag Enumerationskonstante.  
  
-   Verwendung `None` wie der Name des Flags Konstante aufgelistet, deren Wert 0 (null ist). Sie können keine der `None` Enumerationskonstante, die in einer bitweisen AND-Operation für ein Flag zu testen, da das Ergebnis immer 0 (null) ist. Allerdings können Sie ein logisches ausführen keinen bitweisen Vergleich zwischen den numerischen Wert und die `None` Enumerationskonstante, um zu bestimmen, ob alle Bits im numerischen Wert festgelegt werden.  
  
     Wenn Sie eine Value-Aufzählung, anstatt eine Flags-Enumeration erstellen, lohnt es weiterhin zum Erstellen einer `None` Enumerationskonstante. Der Grund ist, wird standardmäßig der für die Enumeration verwendete Arbeitsspeicher mit 0 (null) initialisiert wird von der common Language Runtime. Daher, wenn Sie keine Konstante definieren, deren Wert 0 (null) ist, die Enumeration einen unzulässigen Wert enthält bei der Erstellung.  
  
     Ist eine offensichtliche Groß-/Kleinschreibung, Ihre Anwendung benötigt, um darzustellen, sollten erwägen Sie, eine Enumerationskonstante, deren Wert 0 (null) zur Darstellung der Standardwert ist, zu verwenden. Wenn keine Standardfall wird sollten Sie Sie, dass es sich bei Verwendung eine Enumerationskonstante, dessen Wert NULL, wird, die Groß-/Kleinschreibung hat zur Folge, die nicht von einem anderen aufgelisteten Konstanten dargestellt wird.  
  
-   Einen Enumerationswert, nur um spiegeln den Zustand der Enumeration selbst ist nicht definiert werden. Definieren Sie z. B. keine Enumerationskonstante, die nur am Ende der Enumeration markiert. Wenn Sie bestimmen Sie den letzten Wert der Enumeration, die explizit für diesen Wert überprüfen möchten. Darüber hinaus können Sie eine bereichsüberprüfung für die erste und letzte Enumerationskonstante durchführen, wenn alle Werte innerhalb des Bereichs gültig sind.  
  
-   Geben Sie keine Enumerationskonstanten, die für die zukünftige Verwendung reserviert sind.  
  
-   Berücksichtigen Sie Sie definieren eine Methode oder Eigenschaft, die eine aufgezählte Konstante als Wert annimmt, beim Überprüfen des Werts. Der Grund ist, dass Sie einen numerischen Wert in den Enumerationstyp umwandeln können, selbst wenn diese numerische Wert nicht in der Enumeration definiert ist.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Verwendung von der `FlagsAttribute` Attribut, und zeigt die Auswirkungen auf die <xref:System.Enum.ToString%2A> Methode der Verwendung von `FlagsAttribute` auf eine <xref:System.Enum> Deklaration.  
  
 [!code-cpp[System.FlagsAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags.cpp#1)]
 [!code-csharp[System.FlagsAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags.cs#1)]
 [!code-vb[System.FlagsAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags.vb#1)]  
  
 Das folgende Beispiel definiert zwei Enumerationen, die farbbezogene, `SingleHue` und `MultiHue`. Die zweite über die die `FlagsAttribute` -Attribut im ersten Fall ist dies nicht. Im Beispiel des unterschiedliche Verhalten bei der ein Bereich von ganzen Zahlen, einschließlich von ganzen Zahlen, die nicht der zugrunde liegenden Werte des Enumerationstyps, darstellen, in den Enumerationstyp und deren Zeichenfolgenrepräsentationen angezeigt umgewandelt werden.   Beachten Sie, dass es sich bei 3 dargestellt werden kann, wie z. B. eine `SingleHue` bewertet werden, da 3 nicht den zugrunde liegenden Wert eines beliebigen ist `SingleHue` Member, während der `FlagsAttribute` Attribut ermöglicht, die als 3 darstellen eine `MultiHue` Wert `Black, Red`.  
  
 [!code-cpp[System.FlagsAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags1.cpp#2)]
 [!code-csharp[System.FlagsAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags1.cs#2)]
 [!code-vb[System.FlagsAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags1.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FlagsAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.FlagsAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FlagsAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.FlagsAttribute" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Beispiel definiert eine `PhoneService` Enumeration, die Formen der Kommunikation, die von einem Telefonunternehmen bereitgestellten darstellt. Er initialisiert drei Variablen, die den Dienst, der an die Haushalte mit drei verschiedenen darstellt und zeigt dann an die Haushalte haben kein Dienst, der Haushalte nur Handy-Dienst, und welche Haushalte sowohl Handy-Land-Diensts. Ruft schließlich implizit die <xref:System.Enum.ToString%28System.String%29?displayProperty=nameWithType> Methode, um die Typen des Diensts bereitgestellt, um jede Haushalt anzuzeigen.  
  
 [!code-cpp[System.FlagsAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags1.cpp#2)]
 [!code-csharp[System.FlagsAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags1.cs#2)]
 [!code-vb[System.FlagsAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags1.vb#2)]  
  
 Das folgende Beispiel veranschaulicht die Verwendung von der `FlagsAttribute` Attribut, und zeigt die Auswirkungen auf die <xref:System.Enum.ToString%2A> Methode der Verwendung von `FlagsAttribute` auf eine <xref:System.Enum> Deklaration.  
  
 [!code-cpp[System.FlagsAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags.cpp#1)]
 [!code-csharp[System.FlagsAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags.cs#1)]
 [!code-vb[System.FlagsAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
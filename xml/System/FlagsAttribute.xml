<Type Name="FlagsAttribute" FullName="System.FlagsAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bc8b21fc3c07b69515c1ab00e964b833b7dda975" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75042413" /></Metadata><TypeSignature Language="C#" Value="public class FlagsAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit FlagsAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.FlagsAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Class FlagsAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class FlagsAttribute : Attribute" />
  <TypeSignature Language="F#" Value="type FlagsAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Enum, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Gibt an, dass eine Enumeration als Bitfeld (Gruppe von Flags) behandelt werden kann.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bitfelder werden in der Regel für Listen von Elementen verwendet, die möglicherweise in Kombination auftreten, wohingegen Enumerationskonstanten im Allgemeinen für Listen von sich gegenseitig ausschließenden Elementen verwendet werden. Daher sind Bitfelder so konzipiert, dass Sie mit einer bitweisen OR-Operation kombiniert werden, um unbenannte Werte zu generieren, während Enumerationskonstanten nicht sind. Sprachen variieren bei der Verwendung von Bitfeldern im Vergleich zu Enumerationskonstanten.  
  
## <a name="attributes-of-the-flagsattribute"></a>Attribute von FlagsAttribute  
 <xref:System.AttributeUsageAttribute> wird auf diese Klasse angewendet, und ihre <xref:System.AttributeUsageAttribute.Inherited%2A>-Eigenschaft gibt `false`an. Dieses Attribut kann nur auf Enumerationen angewendet werden.  
  
## <a name="guidelines-for-flagsattribute-and-enum"></a>Richtlinien für FlagsAttribute und die Aufzählung  
  
-   Verwenden Sie das benutzerdefinierte-Attribut <xref:System.FlagsAttribute> nur dann für eine Enumeration, wenn eine bitweise-Operation (and, or, Exclusive oder) für einen numerischen Wert ausgeführt werden soll.  
  
-   Definieren von Enumerationskonstanten in den zwei Mächten, d. h. 1, 2, 4, 8 usw. Dies bedeutet, dass sich die einzelnen Flags in kombinierten Enumerationskonstanten nicht überlappen.  
  
-   Erstellen Sie ggf. eine Enumerationskonstante für häufig verwendete Flag-Kombinationen. Wenn Sie z. b. eine Enumeration für Datei-e/a-Vorgänge verwenden, die die Enumerationskonstanten `Read = 1` und `Write = 2`enthalten, sollten Sie die Enumerationskonstante `ReadWrite = Read OR Write`erstellen, die die `Read` und `Write` Flags kombiniert. Außerdem kann der bitweise OR-Vorgang, der zum Kombinieren der Flags verwendet wird, in einigen Fällen als erweitertes Konzept angesehen werden, die für einfache Aufgaben nicht erforderlich sein sollten.  
  
-   Gehen Sie vorsichtig vor, wenn Sie eine negative Zahl als Flag-Enumerationskonstante definieren, da viele Flagpositionen auf 1 festgelegt werden können, was den Code verwirrend machen und Codierungsfehler fördern kann.  
  
-   Eine bequeme Methode, um zu testen, ob ein Flag in einem numerischen Wert festgelegt ist, besteht darin, eine bitweise AND-Operation zwischen dem numerischen Wert und der-Flag-Enumerationskonstante auszuführen, bei der alle Bits im numerischen Wert auf NULL festgelegt werden, die nicht dem-Flag entsprechen. , und testen Sie dann, ob das Ergebnis dieses Vorgangs gleich der-Flag-Enumerationskonstante ist.  
  
-   Verwenden Sie `None` als Namen der-Flag-Enumerationskonstante, deren Wert 0 (null) ist. Sie können die `None` Enumerationskonstante nicht in einer bitweisen and-Operation verwenden, um auf ein Flag zu testen, da das Ergebnis immer 0 (null) ist. Sie können jedoch einen logischen, nicht einen bitweisen Vergleich zwischen dem numerischen Wert und dem `None` enumerierten Konstanten ausführen, um zu bestimmen, ob Bits im numerischen Wert festgelegt werden.  
  
     Wenn Sie anstelle einer Flags-Enumeration eine Wertenumeration erstellen, lohnt es sich, eine `None` Enumerationskonstante zu erstellen. Der Grund hierfür ist, dass der für die-Enumeration verwendete Arbeitsspeicher standardmäßig vom Common Language Runtime mit 0 (null) initialisiert wird. Wenn Sie daher keine Konstante definieren, deren Wert 0 (null) ist, enthält die Enumeration bei der Erstellung einen ungültigen Wert.  
  
     Wenn ein offensichtlicher Standardfall vorliegt, den die Anwendung darstellen muss, sollten Sie eine Enumerationskonstante verwenden, deren Wert 0 (null) ist, um den Standardwert darzustellen. Wenn kein Standardfall vorhanden ist, sollten Sie eine Enumerationskonstante verwenden, deren Wert 0 (null) ist. Dies bedeutet den Fall, der nicht durch eine der anderen Enumerationskonstanten repräsentiert wird.  
  
-   Definieren Sie keinen Enumerationswert ausschließlich so, dass er den Status der Enumeration widerspiegelt. Definieren Sie z. b. keine Enumerationskonstante, die nur das Ende der Enumeration kennzeichnet. Wenn Sie den letzten Wert der Enumeration ermitteln müssen, überprüfen Sie diesen Wert explizit. Außerdem können Sie eine Bereichs Überprüfung für die erste und letzte Enumerationskonstante ausführen, wenn alle Werte innerhalb des Bereichs gültig sind.  
  
-   Geben Sie keine Enumerationskonstanten an, die für die zukünftige Verwendung reserviert sind.  
  
-   Wenn Sie eine Methode oder Eigenschaft definieren, die eine Enumerationskonstante als Wert annimmt, sollten Sie den Wert validieren. Der Grund hierfür ist, dass Sie einen numerischen Wert in den Enumerationstyp umwandeln können, auch wenn dieser numerische Wert nicht in der-Enumeration definiert ist.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Verwendung des `FlagsAttribute`-Attributs und zeigt die Auswirkung auf die <xref:System.Enum.ToString%2A> Methode der Verwendung von `FlagsAttribute` in einer <xref:System.Enum> Deklaration.  
  
 [!code-cpp[System.FlagsAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags.cpp#1)]
 [!code-csharp[System.FlagsAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags.cs#1)]
 [!code-vb[System.FlagsAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags.vb#1)]  
  
 Im folgenden Beispiel werden zwei Farb bezogene Enumerationen definiert, `SingleHue` und `MultiHue`. Letztere verfügt über das `FlagsAttribute`-Attribut. der erste nicht. Das Beispiel zeigt den Unterschied im Verhalten, wenn ein Bereich von ganzen Zahlen, einschließlich Ganzzahlen, die keine zugrunde liegenden Werte des Enumerationstyps darstellen, in den Enumerationstyp und deren angezeigte Zeichen folgen Darstellungen umgewandelt werden.   Beachten Sie z. b., dass 3 nicht als `SingleHue` Wert dargestellt werden kann, da 3 nicht der zugrunde liegende Wert eines `SingleHue` Members ist, wohingegen das Attribut `FlagsAttribute` das darstellen von 3 als `MultiHue` Wert `Black, Red`ermöglicht.  
  
 [!code-cpp[System.FlagsAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags1.cpp#2)]
 [!code-csharp[System.FlagsAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags1.cs#2)]
 [!code-vb[System.FlagsAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags1.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FlagsAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.FlagsAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FlagsAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.FlagsAttribute" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird eine `PhoneService` Enumeration definiert, die Kommunikationsformen darstellt, die von einem Telefonunternehmen bereitgestellt werden. Dabei werden drei Variablen initialisiert, die den für drei unterschiedliche Haushalte bereitgestellten Dienst darstellen. Anschließend wird angegeben, welche Haushalte keinen Dienst haben, welche Haushalte nur über den Mobiltelefondienst verfügen und welche Privathaushalte sowohl den Mobiltelefondienst als auch den Bundesland Dienst haben. Schließlich wird die <xref:System.Enum.ToString%28System.String%29?displayProperty=nameWithType>-Methode implizit aufgerufen, um die Dienst Typen anzuzeigen, die für die einzelnen Haushalte bereitgestellt werden.  
  
 [!code-cpp[System.FlagsAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags1.cpp#2)]
 [!code-csharp[System.FlagsAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags1.cs#2)]
 [!code-vb[System.FlagsAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags1.vb#2)]  
  
 Das folgende Beispiel veranschaulicht die Verwendung des `FlagsAttribute`-Attributs und zeigt die Auswirkung auf die <xref:System.Enum.ToString%2A> Methode der Verwendung von `FlagsAttribute` in einer <xref:System.Enum> Deklaration.  
  
 [!code-cpp[System.FlagsAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags.cpp#1)]
 [!code-csharp[System.FlagsAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags.cs#1)]
 [!code-vb[System.FlagsAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

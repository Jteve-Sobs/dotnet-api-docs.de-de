<Type Name="InvalidOperationException" FullName="System.InvalidOperationException">
  <Metadata><Meta Name="ms.openlocfilehash" Value="810fe50283e801c3e7dde603475dc30ccd6ad1c8" /><Meta Name="ms.sourcegitcommit" Value="7845f124909a0999a19cc65f40feab5e75cd9b8d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/06/2019" /><Meta Name="ms.locfileid" Value="65064618" /></Metadata><TypeSignature Language="C#" Value="public class InvalidOperationException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit InvalidOperationException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.InvalidOperationException" />
  <TypeSignature Language="VB.NET" Value="Public Class InvalidOperationException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class InvalidOperationException : SystemException" />
  <TypeSignature Language="F#" Value="type InvalidOperationException = class&#xA;    inherit SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Die Ausnahme, die ausgelöst wird, wenn der Aufruf einer Methode aufgrund des aktuellen Zustands des Objekts ungültig ist.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.InvalidOperationException>wird in Fällen verwendet, in denen ein Fehler beim Aufrufen einer Methode durch andere Gründe als ungültige Argumente verursacht wird. In der Regel wird Sie ausgelöst, wenn der Status eines Objekts den Methoden aufrufsvorgang nicht unterstützt. Beispielsweise wird eine <xref:System.InvalidOperationException> Ausnahme durch Methoden wie z. b. ausgelöst:  
  
-   <xref:System.Collections.IEnumerator.MoveNext%2A?displayProperty=nameWithType>, wenn Objekte einer Auflistung geändert werden, nachdem der Enumerator erstellt wurde. Weitere Informationen finden Sie unter [Ändern einer Sammlung während der Iteration](#Iterating).  
  
-   <xref:System.Resources.ResourceSet.GetString%2A?displayProperty=nameWithType>, wenn der Ressourcen Satz geschlossen wird, bevor der Methodenaufrufe erfolgt.  
  
-   <xref:System.Xml.Linq.XContainer.Add%2A?displayProperty=nameWithType>, wenn die hinzu zufügenden Objekte ein falsch strukturiertes XML-Dokument ergeben würden.  
  
-   Eine Methode, die versucht, die Benutzeroberfläche von einem Thread zu bearbeiten, der nicht der Haupt-oder UI-Thread ist.  
  
> [!IMPORTANT]
>  Da die <xref:System.InvalidOperationException> Ausnahme unterschiedlichste Umstände ausgelöst werden kann, ist es wichtig, die von der <xref:System.Exception.Message%2A> -Eigenschaft zurückgegebene Ausnahme Meldung zu lesen.  
  
 In diesem Abschnitt  
  
 [Einige häufige Gründe für InvalidOperationException-Ausnahmen](#Causes)   
 [Aktualisieren eines UI-Threads von einem nicht-UI-Thread](#UI)  
 [Ändern einer Sammlung während der Iteration](#Iterating)  
 [Sortieren eines Arrays oder einer Auflistung, deren Objekte nicht verglichen werden können](#Sorting)  
 [Umwandeln eines NULL-&lt;Werte&gt; , das NULL-Werte zulässt, in den zugrunde liegenden Typ](#Nullable)   
 [Aufrufen einer System. Linq. Enumerable-Methode für eine leere Sammlung](#Empty)  
 [Aufrufen von Enumerable. Single oder Enumerable. SingleOrDefault in einer Sequenz ohne ein Element](#Single)  
 [Dynamischer Anwendungsbereichs übergreifender Domänen Zugriff](#Emit)  
[Auslösen einer InvalidOperationException-Ausnahme](#Throwing)  
[Sonstige Informationen](#Misc)  
  
<a name="Causes"></a>   
## <a name="some-common-causes-of-invalidoperationexception-exceptions"></a>Einige häufige Gründe für InvalidOperationException-Ausnahmen  
 In den folgenden Abschnitten wird gezeigt, wie einige gängige Fälle <xref:System.InvalidOperationException> , in denen eine Ausnahme ausgelöst wird, in einer APP ausgelöst werden. Wie Sie das Problem behandeln, hängt von der jeweiligen Situation ab. In den meisten Fällen führt die Ausnahme jedoch zu einem Entwickler Fehler, und <xref:System.InvalidOperationException> die Ausnahme kann erwartet und vermieden werden.  
  
<a name="UI"></a>   
### <a name="updating-a-ui-thread-from-a-non-ui-thread"></a>Aktualisieren eines UI-Threads von einem nicht-UI-Thread  
 Häufig werden Arbeitsthreads verwendet, um einige Hintergrundaufgaben auszuführen, die das Sammeln von Daten für die Anzeige auf der Benutzeroberfläche einer Anwendung beinhalten. Doch. die meisten GUI-Anwendungs Frameworks (grafische Benutzeroberfläche) für die .NET Framework, z. b. Windows Forms und Windows Presentation Foundation (WPF), ermöglichen den Zugriff auf GUI-Objekte nur über den Thread, der die Benutzeroberfläche erstellt und verwaltet (dem Haupt-oder UI-Thread). Wenn <xref:System.InvalidOperationException> Sie versuchen, auf ein UI-Element von einem anderen Thread als dem UI-Thread zuzugreifen, wird eine ausgelöst.  Der Text der Ausnahme Meldung wird in der folgenden Tabelle gezeigt.  
  
|Anwendungstyp|Meldung|  
|----------------------|-------------|  
|WPF-App|**Der aufrufenden Thread kann nicht auf dieses Objekt zugreifen, da es von einem anderen Thread gehört.**|  
|UWP-App|**Die Anwendung hat eine Schnittstelle aufgerufen, die für einen anderen Thread gemarshallt wurde.**|  
|Windows Forms-App|**Thread übergreifender Vorgang ist ungültig: Auf das Steuerelement "TextBox1" wird von einem anderen Thread als dem Thread zugegriffen, in dem er erstellt wurde.**|  
  
 Benutzeroberflächen-Frameworks für die .NET Framework implementieren ein *Verteiler* -Muster, das eine Methode enthält, um zu überprüfen, ob ein Member eines UI-Elements im UI-Thread ausgeführt wird, und andere Methoden, um den Aufrufen für den UI-Thread zu planen:  
  
-   In WPF-Anwendungen wird die <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A?displayProperty=nameWithType> -Methode aufgerufen, um zu bestimmen, ob eine Methode in einem nicht-UI-Thread ausgeführt wird. Er gibt `true` zurück, wenn die Methode im UI-Thread ausgeführt `false` wird, und andernfalls. Ruft eine der über Ladungen der <xref:System.Windows.Threading.Dispatcher.Invoke%2A?displayProperty=nameWithType> -Methode auf, um den-Rückruf für den UI-Thread zu planen.  
  
-   Aufrufen Sie in UWP-Apps die [coredispatcher. hasthreadaccess](https://msdn.microsoft.com/library/windows/apps/windows.ui.core.coredispatcher.hasthreadaccess.aspx) -Methode, um zu bestimmen, ob eine Methode in einem nicht-UI-Thread ausgeführt wird. Aufrufen der [coredispatcher. runasync](https://msdn.microsoft.com/library/windows/apps/windows.ui.core.coredispatcher.runasync.aspx) -Methode, um einen Delegaten auszuführen, der den UI-Thread aktualisiert. Verwenden Sie den Befehl  
  
-   Verwenden Sie in Windows Forms-apps <xref:System.Windows.Forms.Control.InvokeRequired%2A?displayProperty=nameWithType> die-Eigenschaft, um zu bestimmen, ob eine Methode in einem nicht-UI-Thread ausgeführt wird. Ruft eine der über Ladungen der <xref:System.Windows.Forms.Control.Invoke%2A?displayProperty=nameWithType> -Methode auf, um einen Delegaten auszuführen, der den UI-Thread aktualisiert.  
  
 Die folgenden Beispiele veranschaulichen die <xref:System.InvalidOperationException> Ausnahme, die ausgelöst wird, wenn Sie versuchen, ein UI-Element von einem anderen Thread als dem erstellten Thread zu aktualisieren.  Für jedes Beispiel müssen zwei Steuerelemente erstellt werden:  
  
-   Ein Textfeld-Steuer `textBox1`Element mit dem Namen.  In einer Windows Forms-App sollten Sie die <xref:System.Windows.Forms.TextBox.Multiline%2A> zugehörige-Eigenschaft auf `true`festlegen.  
  
-   Ein Schaltflächen- `threadExampleBtn`Steuerelement namens. Das Beispiel enthält einen Handler, `ThreadsExampleBtn_Click`, für das- `Click` Ereignis der Schaltfläche.  
  
 In jedem Fall ruft der `threadExampleBtn_Click` Ereignishandler die `DoSomeWork` -Methode zweimal auf. Der erste-Befehl wird synchron ausgeführt und ist erfolgreich. Aber der zweite-Befehl, da er asynchron in einem Thread Pool Thread ausgeführt wird, versucht, die Benutzeroberfläche von einem nicht-UI-Thread zu aktualisieren. Dies führt zu einer <xref:System.InvalidOperationException> -Ausnahme.  
  
 WPF-und UWP-apps  
 [!code-csharp[System.InvalidOperationException.Threading.WPF1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf1/cs/MainWindow.xaml.cs#1)]
 [!code-vb[System.InvalidOperationException.Threading.WPF1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf1/vb/MainWindow.xaml.vb#1)]  
  
 Die folgende Version der `DoSomeWork` -Methode beseitigt die Ausnahme in einer WPF-App.  
  
 [!code-csharp[System.InvalidOperationException.Threading.WPF2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf2/cs/MainWindowDispatcher.xaml.cs#3)]
 [!code-vb[System.InvalidOperationException.Threading.WPF2#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf2/vb/MainWindowDispatcher.xaml.vb#3)]  
  
 Die folgende Version der `DoSomeWork` -Methode beseitigt die Ausnahme in einer UWP-app.  
  
 [!code-csharp[System.InvalidOperationException.Threading.UWP#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception.threading.uwp/cs/MainPage.xaml.cs#4)]
 [!code-vb[System.InvalidOperationException.Threading.UWP#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception.threading.uwp/vb/MainPage.xaml.vb#4)]  
  
 Windows Forms-Anwendungen  
 [!code-csharp[System.InvalidOperationException.Threading.WF#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf/cs/Form1.cs#2)]
 [!code-vb[System.InvalidOperationException.Threading.WF#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf/vb/Form1.vb#2)]  
  
 Die folgende Version der `DoSomeWork` -Methode beseitigt die Ausnahme in einer Windows Forms-app.  
  
 [!code-csharp[System.InvalidOperationException.Threading.WF2#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf2/cs/Form1.cs#5)]
 [!code-vb[System.InvalidOperationException.Threading.WF2#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf2/vb/Form1.vb#5)]  
  
<a name="Iterating"></a>   
### <a name="changing-a-collection-while-iterating-it"></a>Ändern einer Sammlung während der Iteration  
 Die `foreach` -Anweisung C# in `For Each` der-oder-Anweisung in Visual Basic wird verwendet, um die Member einer Auflistung zu durchlaufen und die einzelnen Elemente zu lesen oder zu ändern. Sie kann jedoch nicht zum Hinzufügen oder Entfernen von Elementen aus der Auflistung verwendet werden. Dies löst eine <xref:System.InvalidOperationException> Ausnahme mit einer Meldung aus, die der folgenden Meldung ähnelt: "die Auflistung**wurde geändert. Der Enumerationsvorgang kann nicht ausgeführt werden.**"  
  
 Im folgenden Beispiel wird eine Auflistung von ganzen Zahlen durchlaufen, um der Auflistung das Quadrat der einzelnen ganzzahligen Elemente hinzuzufügen. Im Beispiel wird eine <xref:System.InvalidOperationException> mit dem ersten-Befehl für <xref:System.Collections.Generic.List%601.Add%2A?displayProperty=nameWithType> die-Methode ausgelöst.  
  
 [!code-csharp[System.InvalidOperationException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Iterating1.cs#1)]
 [!code-vb[System.InvalidOperationException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Iterating1.vb#1)]  
  
 Sie können die Ausnahme in Abhängigkeit von der Anwendungslogik auf eine von zwei Arten entfernen:  
  
-   Wenn Elemente der Auflistung während der Iteration hinzugefügt werden müssen, können Sie Sie mit der `for` -Anweisung anstelle von `foreach` oder `For Each`durchlaufen. Im folgenden Beispiel wird die for-Anweisung verwendet, um der-Auflistung das Quadrat der Zahlen in der-Auflistung hinzuzufügen.  
  
     [!code-csharp[System.InvalidOperationException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Iterating2.cs#2)]
     [!code-vb[System.InvalidOperationException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Iterating2.vb#2)]  
  
     Beachten Sie, dass Sie die Anzahl der Iterationen vor dem Durchlaufen der Auflistung festlegen müssen, indem Sie einen-Wert in der-Schleife verwenden, der die Schleife entsprechend verlässt, `Count` indem Sie rückwärts, von-1 bis 0 oder, wie im Beispiel, durch Zuweisen der Zahl von Elementen im Array zu einer Variablen und deren Verwendung zum Einrichten der oberen Grenze der Schleife. Wenn der Auflistung bei jeder Iterationen ein Element hinzugefügt wird, führt dies zu einer Endlosschleife.  
  
-   Wenn beim Durchlaufen der Auflistung keine Elemente hinzugefügt werden müssen, können Sie die Elemente speichern, die in einer temporären Auflistung hinzugefügt werden sollen, die Sie beim Durchlaufen der Auflistung hinzufügen.  Im folgenden Beispiel wird dieser Ansatz verwendet, um einer temporären Auflistung das Quadrat der Zahlen in einer Auflistung hinzuzufügen und die Auflistungen dann in einem einzelnen Array Objekt zu kombinieren.  
  
     [!code-csharp[System.InvalidOperationException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Iterating3.cs#3)]
     [!code-vb[System.InvalidOperationException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Iterating3.vb#3)]  
  
<a name="Sorting"></a>   
### <a name="sorting-an-array-or-collection-whose-objects-cannot-be-compared"></a>Sortieren eines Arrays oder einer Auflistung, deren Objekte nicht verglichen werden können  
 Allgemeine Sortiermethoden, z. b. die <xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType> -Methode oder <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> die-Methode, erfordern in der Regel, dass mindestens eines der zu sortierenden <xref:System.IComparable%601> -Objekte <xref:System.IComparable> die-Schnittstelle oder die-Schnittstelle implementiert. Wenn dies nicht der Wert ist, kann die Auflistung oder das Array nicht sortiert werden <xref:System.InvalidOperationException> , und die Methode löst eine Ausnahme aus. Im folgenden Beispiel wird eine `Person` -Klasse definiert, `Person` zwei-Objekte in <xref:System.Collections.Generic.List%601> einem generischen-Objekt gespeichert und versucht, diese zu sortieren. Wie die Ausgabe des Beispiels zeigt, löst der-Befehl die <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> -Methode <xref:System.InvalidOperationException>aus.  
  
 [!code-csharp[System.InvalidOperationException#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/List_Sort1.cs#12)]
 [!code-vb[System.InvalidOperationException#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/List_Sort1.vb#12)]  
  
 Es gibt drei Möglichkeiten, die Ausnahme auszuschließen:  
  
-   Wenn Sie den Typ besitzen, den Sie sortieren möchten (d. h., wenn Sie den Quellcode kontrollieren), können Sie ihn so ändern, dass er <xref:System.IComparable%601> die- <xref:System.IComparable> Schnittstelle oder die-Schnittstelle implementiert. Dies erfordert, dass Sie entweder die <xref:System.IComparable%601.CompareTo%2A?displayProperty=nameWithType> -Methode <xref:System.IComparable.CompareTo%2A> oder die-Methode implementieren. Das Hinzufügen einer Schnittstellen Implementierung zu einem vorhandenen Typ ist keine Breaking Change.  
  
     Im folgenden Beispiel wird dieser Ansatz verwendet, um <xref:System.IComparable%601> eine Implementierung für `Person` die-Klasse bereitzustellen. Sie können weiterhin die allgemeine Sortiermethode der Auflistung oder des Arrays aufzurufen. wie die Ausgabe des Beispiels zeigt, wird die Auflistung erfolgreich sortiert.  
  
     [!code-csharp[System.InvalidOperationException#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/List_Sort2.cs#13)]
     [!code-vb[System.InvalidOperationException#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/List_Sort2.vb#13)]  
  
-   Wenn Sie den Quellcode für den Typ, den Sie sortieren möchten, nicht ändern können, können Sie eine spezielle Sortier Klasse definieren, die die <xref:System.Collections.Generic.IComparer%601> -Schnittstelle implementiert.  Sie können eine Überladung der `Sort` -Methode aufrufen, die einen <xref:System.Collections.Generic.IComparer%601> -Parameter enthält. Diese Vorgehensweise ist besonders nützlich, wenn Sie eine spezialisierte Sortier Klasse entwickeln möchten, die Objekte nach mehreren Kriterien sortieren kann.  
  
     Im folgenden Beispiel wird der Ansatz verwendet, indem eine `PersonComparer` benutzerdefinierte Klasse entwickelt wird, `Person` mit der Auflistungen sortiert werden.  Anschließend übergibt Sie eine Instanz dieser Klasse an die <xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29?displayProperty=nameWithType> -Methode.  
  
     [!code-csharp[System.InvalidOperationException#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/List_Sort3.cs#14)]
     [!code-vb[System.InvalidOperationException#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/List_Sort3.vb#14)]  
  
-   Wenn Sie den Quellcode für den Typ, den Sie sortieren möchten, nicht ändern können, können Sie einen <xref:System.Comparison%601> Delegaten erstellen, um die Sortierung auszuführen. Die Delegatsignatur ist  
  
    ```vb  
    Function Comparison(Of T)(x As T, y As T) As Integer  
    ```  
  
    ```csharp  
    int Comparison<T>(T x, T y)  
    ```  
  
     Im folgenden Beispiel wird der Ansatz verwendet, indem `PersonComparison` eine Methode definiert wird <xref:System.Comparison%601> , die mit der Delegatsignatur übereinstimmt.  Anschließend übergibt Sie diesen Delegaten an <xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29?displayProperty=nameWithType> die-Methode.  
  
     [!code-csharp[System.InvalidOperationException#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/List_Sort4.cs#15)]
     [!code-vb[System.InvalidOperationException#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/List_Sort4.vb#15)]  
  
<a name="Nullable"></a>   
### <a name="casting-a-nullablet-that-is-null-to-its-underlying-type"></a>Umwandeln eines T-\<>, der NULL-Werte zulässt, in den zugrunde liegenden Typ  
 Wenn Sie versuchen, <xref:System.Nullable%601> einen Wert in `null` den zugrunde liegenden Typ umzuwandeln, <xref:System.InvalidOperationException> wird eine Ausnahme ausgelöst, und es wird die Fehlermeldung "das Objekt, das NULL-Werte zulässt,**muss einen Wert aufweisen.**  
  
 Im folgenden Beispiel wird eine <xref:System.InvalidOperationException> Ausnahme ausgelöst, wenn versucht wird, ein Array zu durchlaufen `Nullable(Of Integer)` , das einen-Wert enthält.  
  
 [!code-csharp[System.InvalidOperationException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Nullable1.cs#4)]
 [!code-vb[System.InvalidOperationException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Nullable1.vb#4)]  
  
 So verhindern Sie die Ausnahme:  
  
-   Verwenden Sie <xref:System.Nullable%601.HasValue%2A?displayProperty=nameWithType> die-Eigenschaft, um nur die Elemente auszuwählen `null`, die nicht sind.  
  
-   Ruft eine der <xref:System.Nullable%601.GetValueOrDefault%2A?displayProperty=nameWithType> -über Ladungen auf, um einen Standardwert für `null` einen Wert bereitzustellen.  
  
 Im folgenden Beispiel wird beides vermieden, um <xref:System.InvalidOperationException> die Ausnahme zu vermeiden.  
  
 [!code-csharp[System.InvalidOperationException#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Nullable2.cs#5)]
 [!code-vb[System.InvalidOperationException#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Nullable2.vb#5)]  
  
<a name="Empty"></a>   
### <a name="calling-a-systemlinqenumerable-method-on-an-empty-collection"></a>Aufrufen einer System. Linq. Enumerable-Methode für eine leere Sammlung  
 Die <xref:System.Linq.Enumerable.Aggregate%2A?displayProperty=nameWithType>Methoden <xref:System.Linq.Enumerable.Average%2A?displayProperty=nameWithType>,, <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType>, ,<xref:System.Linq.Enumerable.Max%2A?displayProperty=nameWithType>,, und führen<xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> Vorgänge für eine Sequenz aus und geben ein einzelnes Ergebnis zurück. <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType> <xref:System.Linq.Enumerable.Last%2A?displayProperty=nameWithType> <xref:System.Linq.Enumerable.Min%2A?displayProperty=nameWithType>   Einige über Ladungen dieser Methoden lösen eine <xref:System.InvalidOperationException> Ausnahme aus, wenn die Sequenz leer ist, während andere über Ladungen zurückgeben. `null` Die <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> -Methode löst auch <xref:System.InvalidOperationException> eine-Ausnahme aus, wenn die Sequenz mehr als ein-Element enthält.  
  
> [!NOTE]
>  Die meisten Methoden, die eine <xref:System.InvalidOperationException> Ausnahme auslösen, sind über Ladungen. Stellen Sie sicher, dass Sie das Verhalten der Überladung verstehen, die Sie ausgewählt haben.  
  
 In der folgenden Tabelle sind die Ausnahme Meldungen von <xref:System.InvalidOperationException> Ausnahme Objekten aufgelistet, die durch Aufrufe <xref:System.Linq.Enumerable?displayProperty=nameWithType> einiger Methoden ausgelöst werden.  
  
|Methode|Meldung|  
|------------|-------------|  
|`Aggregate` <br /> `Average` <br /> `Last` <br /> `Max` <br /> `Min`|**Die Sequenz enthält keine Elemente.**|  
|`First`|**Die Sequenz enthält kein entsprechendes Element.**|  
|`Single` <br /> `SingleOrDefault`|**Die Sequenz enthält mehr als ein entsprechendes Element.**|  
  
 Wie Sie die Ausnahme eliminieren oder behandeln, hängt von den Annahmen ihrer Anwendung und der von Ihnen aufzurufenden Methode ab.  
  
-   Wenn Sie eine dieser Methoden absichtlich aufgerufen haben, ohne eine leere Sequenz zu überprüfen, gehen Sie davon aus, dass die Sequenz nicht leer ist und eine leere Sequenz ein unerwartetes Vorkommen ist. In diesem Fall ist das Abfangen oder erneute Auslösen der Ausnahme angemessen.  
  
-   Wenn der Fehler bei der <xref:System.Linq.Enumerable.Any%2A?displayProperty=nameWithType> Überprüfung auf eine leere Sequenz versehentlich aufgetreten ist, können Sie eine der über Ladungen der Überladung aufrufen, um zu bestimmen, ob eine Sequenz Elemente enthält.  
  
    > [!TIP]
    >  Wenn die-Methode vor dem Generieren einer Sequenz aufgerufen wird, kann die Leistung verbessert werden, wenn die zu verarbeitenden Daten möglicherweise eine große Anzahl von Elementen enthalten oder wenn der Vorgang, der die Sequenz generiert, teuer ist. <xref:System.Linq.Enumerable.Any%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=nameWithType>  
  
-   Wenn Sie eine Methode wie <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.Last%2A?displayProperty=nameWithType>oder <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType>aufgerufen haben, <xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=nameWithType>können Sie eine alternative Methode, z <xref:System.Linq.Enumerable.LastOrDefault%2A?displayProperty=nameWithType>. b., oder <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType>, ersetzen, die einen Standardwert anstelle eines Members der Sequenz zurückgibt.  
  
 In den Beispielen werden zusätzliche Details bereitgestellt.  
  
 Im folgenden Beispiel wird die <xref:System.Linq.Enumerable.Average%2A?displayProperty=nameWithType> -Methode verwendet, um den Durchschnitt einer Sequenz zu berechnen, deren Werte größer als 4 sind. Da keine Werte aus dem ursprünglichen Array 4 überschreiten, sind keine Werte in der Sequenz enthalten, und die Methode löst <xref:System.InvalidOperationException> eine Ausnahme aus.  
  
 [!code-csharp[System.InvalidOperationException#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable1.cs#6)]
 [!code-vb[System.InvalidOperationException#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable1.vb#6)]  
  
 Die Ausnahme kann durch Aufrufen der <xref:System.Linq.Enumerable.Any%2A> -Methode beseitigt werden, um zu bestimmen, ob die Sequenz Elemente enthält, bevor die-Methode aufgerufen wird, die die Sequenz verarbeitet, wie im folgenden Beispiel gezeigt.  
  
 [!code-csharp[System.InvalidOperationException#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable2.cs#7)]
 [!code-vb[System.InvalidOperationException#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable2.vb#7)]  
  
 Die <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType> -Methode gibt das erste Element in einer Sequenz oder das erste Element in einer Sequenz zurück, das eine angegebene Bedingung erfüllt. Wenn die Sequenz leer ist und daher kein erstes Element enthält, wird eine <xref:System.InvalidOperationException> Ausnahme ausgelöst.  
  
 Im folgenden Beispiel löst die <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=nameWithType> -Methode eine <xref:System.InvalidOperationException> Ausnahme aus, da das dbqueryresults-Array kein Element enthält, das größer als 4 ist.  
  
 [!code-csharp[System.InvalidOperationException#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable3.cs#8)]
 [!code-vb[System.InvalidOperationException#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable3.vb#8)]  
  
 Sie können die <xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=nameWithType> -Methode anstelle von <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType> aufgerufen werden, um einen angegebenen oder Standardwert zurückzugeben. Wenn die Methode kein erstes Element in der Sequenz findet, wird der Standardwert für diesen Datentyp zurückgegeben.  Der Standardwert ist `null` für einen Referenztyp, 0 für einen numerischen Datentyp und <xref:System.DateTime.MinValue?displayProperty=nameWithType> für den <xref:System.DateTime> Typ.  
  
> [!NOTE]
>  Das Interpretieren des Werts, der <xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=nameWithType> von der-Methode zurückgegeben wird, wird häufig durch die Tatsache erschwert, dass der Standardwert des Typs ein gültiger Wert in der Sequenz sein kann. In diesem Fall rufen Sie die <xref:System.Linq.Enumerable.Any%2A?displayProperty=nameWithType> -Methode auf, um zu bestimmen, ob die Sequenz gültige Member hat, bevor Sie die <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType> -Methode aufrufen.  
  
 Im folgenden Beispiel wird die <xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=nameWithType> -Methode aufgerufen, <xref:System.InvalidOperationException> um die im vorherigen Beispiel ausgelöste Ausnahme zu verhindern.  
  
 [!code-csharp[System.InvalidOperationException#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable4.cs#9)]
 [!code-vb[System.InvalidOperationException#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable4.vb#9)]  
  
<a name="Single"></a>   
### <a name="calling-enumerablesingle-or-enumerablesingleordefault-on-a-sequence-without-one-element"></a>Aufrufen von Enumerable. Single oder Enumerable. SingleOrDefault in einer Sequenz ohne ein Element  
 Die <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType> -Methode gibt das einzige Element einer Sequenz oder das einzige Element einer Sequenz zurück, das eine angegebene Bedingung erfüllt.    Wenn die Sequenz keine Elemente enthält oder mehr als ein Element vorhanden ist, löst die Methode eine <xref:System.InvalidOperationException> Ausnahme aus.  
  
 Sie können die <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> -Methode verwenden, um einen Standardwert zurückzugeben, anstatt eine Ausnahme auszulösen, wenn die Sequenz keine Elemente enthält. Die <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> -Methode löst jedoch immer noch <xref:System.InvalidOperationException> eine Ausnahme aus, wenn die Sequenz mehr als ein Element enthält.  
  
 In der folgenden Tabelle sind die Ausnahme Meldungen <xref:System.InvalidOperationException> der Ausnahme Objekte aufgelistet, die von Aufrufen der-Methode und der <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType> - <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> Methode ausgelöst werden.  
  
|Methode|Meldung|  
|------------|-------------|  
|`Single`|**Die Sequenz enthält kein entsprechendes Element.**|  
|`Single` <br /> `SingleOrDefault`|**Die Sequenz enthält mehr als ein entsprechendes Element.**|  
  
 Im folgenden Beispiel löst der Aufrufe der <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType> -Methode eine <xref:System.InvalidOperationException> -Ausnahme aus, da die Sequenz kein Element größer als 4 ist.  
  
 [!code-csharp[System.InvalidOperationException#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable5.cs#10)]
 [!code-vb[System.InvalidOperationException#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable5.vb#10)]  
  
 Im folgenden Beispiel wird versucht, die <xref:System.InvalidOperationException> Ausnahme zu verhindern, die ausgelöst wird, wenn eine Sequenz <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> leer ist, indem die-Methode aufgerufen wird. Da diese Sequenz jedoch mehrere-Elemente zurückgibt, deren Wert größer als 2 ist, wird auch <xref:System.InvalidOperationException> eine-Ausnahme ausgelöst.  
  
 [!code-csharp[System.InvalidOperationException#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable6.cs#11)]
 [!code-vb[System.InvalidOperationException#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable6.vb#11)]  
  
 Beim Aufrufen <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType> der-Methode wird davon ausgegangen, dass entweder eine Sequenz oder die Sequenz, die die angegebenen Kriterien erfüllt, nur ein Element enthält.  <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType>geht davon aus, dass eine Sequenz mit keinem oder einem Ergebnis, aber nicht mehr angezeigt wird. Wenn diese Annahme in Ihrem Bereich eine bewusste Annahme ist und diese Bedingungen nicht erfüllt sind, ist das erneute Auslösen oder Abfangen des resultierenden <xref:System.InvalidOperationException> angemessen. Andernfalls sollten Sie, wenn Sie davon ausgehen, dass ungültige Bedingungen auftreten, einige andere <xref:System.Linq.Enumerable> Methoden verwenden, <xref:System.Linq.Enumerable.FirstOrDefault%2A> z. b. oder <xref:System.Linq.Enumerable.Where%2A>.  
  
<a name="Emit"></a>   
### <a name="dynamic-cross-application-domain-field-access"></a>Dynamischer Anwendungsbereichs übergreifender Domänen Zugriff  
 Die <xref:System.Reflection.Emit.OpCodes.Ldflda?displayProperty=nameWithType> MSIL-Anweisung (Microsoft Intermediate Language) löst <xref:System.InvalidOperationException> eine Ausnahme aus, wenn das Objekt, das das Feld enthält, dessen Adresse Sie abrufen möchten, nicht in der Anwendungsdomäne enthalten ist, in der der Code ausgeführt wird. Der Zugriff auf die Adresse eines Felds ist nur über die Anwendungsdomäne möglich, in der es sich befindet.  
  
<a name="Throwing"></a>   
## <a name="throwing-an-invalidoperationexception-exception"></a>Auslösen einer InvalidOperationException-Ausnahme  
 Sie sollten eine <xref:System.InvalidOperationException> Ausnahme nur auslösen, wenn der Zustand des Objekts aus irgendeinem Grund keinen bestimmten Methoden aufzurufen unterstützt. Das heißt, dass der Methoden Aufrufwert in einigen Fällen oder Kontexten gültig ist, in anderen jedoch ungültig ist.  
  
 Wenn der Methodenaufruf Fehler auf ungültige Argumente zurückzuführen ist, <xref:System.ArgumentException> dann oder eine der abgeleiteten <xref:System.ArgumentNullException> Klassen oder <xref:System.ArgumentOutOfRangeException>, sollte stattdessen ausgelöst werden.  
  
<a name="Misc"></a>   
## <a name="miscellaneous-information"></a>Sonstige Informationen  
 <xref:System.InvalidOperationException>verwendet das HRESULT-COR_E_INVALIDOPERATION, das den Wert 0x80131509 aufweist.  
  
 Eine Liste der anfänglichen Eigenschaftswerte für eine Instanz von <xref:System.InvalidOperationException>, finden Sie unter den <xref:System.InvalidOperationException.%23ctor%2A> Konstruktoren.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
    <altmember cref="T:System.Collections.IEnumerator" />
    <altmember cref="T:System.Resources.ResourceSet" />
    <related type="Article" href="~/docs/standard/exceptions/index.md">Behandeln und Auslösen von Ausnahmen</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.InvalidOperationException" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InvalidOperationException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.InvalidOperationException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InvalidOperationException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.InvalidOperationException" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor initialisiert die <xref:System.Exception.Message%2A> -Eigenschaft der neuen Instanz mit einer vom System bereitgestellten Meldung, die den Fehler beschreibt, z. b. "der angeforderte Vorgang kann nicht ausgeführt werden." Diese Meldung berücksichtigt die aktuelle Systemkultur.  
  
 In der folgenden Tabelle werden die anfänglichen Eigenschaftenwerte für eine <xref:System.InvalidOperationException>-Instanz aufgeführt.  
  
|Eigenschaft|Wert|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Ein NULL-Verweis (`Nothing` in Visual Basic).|  
|<xref:System.Exception.Message%2A>|Die lokalisierte Zeichenfolge mit der Fehlermeldung.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InvalidOperationException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.InvalidOperationException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InvalidOperationException(System::String ^ message);" />
      <MemberSignature Language="F#" Value="new InvalidOperationException : string -&gt; InvalidOperationException" Usage="new System.InvalidOperationException message" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Die Meldung, in der der Fehler beschrieben wird.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.InvalidOperationException" />-Klasse mit einer angegebenen Fehlermeldung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor initialisiert die <xref:System.Exception.Message%2A?displayProperty=nameWithType> -Eigenschaft der neuen Ausnahme mit dem `message` -Parameter. Der Inhalt der `message` soll in verständlicher Sprache gehalten sein. Der Aufrufer dieses Konstruktors muss sicherstellen, dass diese Zeichenfolge für die aktuelle Systemkultur lokalisiert wurde.  
  
 In der folgenden Tabelle werden die anfänglichen Eigenschaftenwerte für eine <xref:System.InvalidOperationException>-Instanz aufgeführt.  
  
|Eigenschaft|Wert|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Ein NULL-Verweis (`Nothing` in Visual Basic).|  
|<xref:System.Exception.Message%2A>|Die Zeichenfolge der Fehlermeldung.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected InvalidOperationException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.InvalidOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; InvalidOperationException(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new InvalidOperationException : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; InvalidOperationException" Usage="new System.InvalidOperationException (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="info">Das Objekt, das die Daten des serialisierten Objekts enthält.</param>
        <param name="context">Die Kontextinformationen zur Quelle bzw. zum Ziel.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.InvalidOperationException" />-Klasse mit serialisierten Daten.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor wird während der Deserialisierung aufgerufen, um das über einen Stream übertragene Ausnahmeobjekt wiederherzustellen. Weitere Informationen finden Sie unter [XML- und SOAP-Serialisierung](~/docs/standard/serialization/xml-and-soap-serialization.md).  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/serialization/xml-and-soap-serialization.md">XML- und SOAP-Serialisierung</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InvalidOperationException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.InvalidOperationException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InvalidOperationException(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new InvalidOperationException : string * Exception -&gt; InvalidOperationException" Usage="new System.InvalidOperationException (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">Die Fehlermeldung, in der die Ursache der Ausnahme erklärt wird.</param>
        <param name="innerException">Die Ausnahme, die die Ursache der aktuellen Ausnahme ist. Wenn der <paramref name="innerException" />-Parameter kein NULL-Verweis ist (<see langword="Nothing" /> in Visual Basic), wird die aktuelle Ausnahme in einem <see langword="catch" />-Block ausgelöst, der die innere Ausnahme behandelt.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.InvalidOperationException" />-Klasse mit einer angegebenen Fehlermeldung und einem Verweis auf die innere Ausnahme, die diese Ausnahme ausgelöst hat.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Ausnahme, die als direktes Ergebnis einer vorhergehenden Ausnahme ausgelöst wird, muss in der <xref:System.Exception.InnerException%2A>-Eigenschaft über einen Verweis auf die vorhergehende Ausnahme verfügen. Die <xref:System.Exception.InnerException%2A>-Eigenschaft gibt denselben Wert zurück, der an den Konstruktor übergeben wurde, bzw. einen NULL-Verweis (`Nothing` in Visual Basic), wenn die <xref:System.Exception.InnerException%2A>-Eigenschaft nicht den Wert für die innere Ausnahme für den Konstruktor bereitstellt.  
  
 In der folgenden Tabelle werden die anfänglichen Eigenschaftenwerte für eine <xref:System.InvalidOperationException>-Instanz aufgeführt.  
  
|Eigenschaft|Wert|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Der Verweis auf die interne Ausnahme.|  
|<xref:System.Exception.Message%2A>|Die Zeichenfolge der Fehlermeldung.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
        <related type="Article" href="~/docs/standard/exceptions/index.md">Behandeln und Auslösen von Ausnahmen</related>
      </Docs>
    </Member>
  </Members>
</Type>
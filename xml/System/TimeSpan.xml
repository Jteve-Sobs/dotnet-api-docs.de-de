<Type Name="TimeSpan" FullName="System.TimeSpan">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="84cbed7b99c808b0e1b16712f8bb2584f53675f7" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51939355" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct TimeSpan : IComparable, IComparable&lt;TimeSpan&gt;, IEquatable&lt;TimeSpan&gt;, IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit TimeSpan extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.TimeSpan&gt;, class System.IEquatable`1&lt;valuetype System.TimeSpan&gt;, class System.IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.TimeSpan" />
  <TypeSignature Language="VB.NET" Value="Public Structure TimeSpan&#xA;Implements IComparable, IComparable(Of TimeSpan), IEquatable(Of TimeSpan), IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public value class TimeSpan : IComparable, IComparable&lt;TimeSpan&gt;, IEquatable&lt;TimeSpan&gt;, IFormattable" />
  <TypeSignature Language="F#" Value="type TimeSpan = struct&#xA;    interface IFormattable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.TimeSpan&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.TimeSpan&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt ein Zeitintervall dar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.TimeSpan> Objekt stellt ein Zeitintervall (Dauer bzw. verstrichene Zeit), die als positive oder negative Anzahl von Tagen, Stunden, Minuten, Sekunden und Sekundenbruchteilen gemessen wird. Die <xref:System.TimeSpan> Struktur kann auch verwendet werden, um die Uhrzeit, aber nur darstellen, wenn die Zeit nicht mit einem bestimmten Datum ist. Andernfalls die <xref:System.DateTime> oder <xref:System.DateTimeOffset> Struktur sollte stattdessen verwendet werden. (Weitere Informationen zur Verwendung der <xref:System.TimeSpan> Struktur entsprechen der Zeit des Tages, finden Sie unter [auswählen zwischen DateTime, DateTimeOffset, TimeSpan und TimeZoneInfo](~/docs/standard/datetime/choosing-between-datetime.md).)  
  
> [!NOTE]
>  Ein <xref:System.TimeSpan> Wert stellt ein Zeitintervall dar und kann als eine bestimmte Anzahl von Tagen, Stunden, Minuten, Sekunden und Millisekunden ausgedrückt werden. Da es sich um eine allgemeine Intervall ohne Verweis auf einen bestimmten Start- oder Endpunkt darstellt, kann nicht es im Hinblick auf Jahren und Monaten, die eine Variable Anzahl von Tagen jeweils ausgedrückt werden. Es unterscheidet sich von einem <xref:System.DateTime> -Wert, der ein Datum und Uhrzeit ohne Verweis auf eine bestimmte Zeitzone darstellt, oder ein <xref:System.DateTimeOffset> Wert, der einem bestimmten Zeitpunkt darstellt.  
  
 Die größte Einheit der Zeit, die die <xref:System.TimeSpan> zum Messen der Dauer Struktur verwendet wird, ist ein Tag. Zeitintervalle werden in Tagen aus Gründen der Konsistenz gemessen, da die Anzahl der Tage in größeren Einheiten der Zeit, z. B. Monaten und Jahren, variiert.  
  
 Der Wert des einem <xref:System.TimeSpan> Objekt ist die Anzahl der Ticks, die das dargestellten Zeitintervall entsprechen. Ein Tick entspricht 100 Nanosekunden oder ein zehnmillionstel einer Sekunde. Der Wert des einem <xref:System.TimeSpan> Objekt kann im Bereich von <xref:System.TimeSpan.MinValue?displayProperty=nameWithType> zu <xref:System.TimeSpan.MaxValue?displayProperty=nameWithType>.  
  
## <a name="instantiating-a-timespan-value"></a>Instanziieren ein TimeSpan-Wert  
 Instanziieren Sie ein <xref:System.TimeSpan> Wert in eine Reihe von Möglichkeiten:  
  
-   Durch Aufrufen der impliziten Standardkonstruktor. Dies erstellt ein Objekt, dessen Wert <xref:System.TimeSpan.Zero?displayProperty=nameWithType>, wie im folgende Beispiel gezeigt.  
  
     [!code-csharp[System.TimeSpan.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.class/cs/instantiate1.cs#2)]
     [!code-vb[System.TimeSpan.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.class/vb/instantiate1.vb#2)]  
  
-   Durch Aufrufen einer seiner explizite Konstruktoren. Im folgenden Beispiel initialisiert einen <xref:System.TimeSpan> Wert, der eine angegebene Anzahl von Stunden, Minuten und Sekunden.  
  
     [!code-csharp[System.TimeSpan.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.class/cs/instantiate1.cs#3)]
     [!code-vb[System.TimeSpan.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.class/vb/instantiate1.vb#3)]  
  
-   Durch Aufrufen einer Methode oder einen Vorgang ausführt, der gibt eine <xref:System.TimeSpan> Wert. Sie können z. B. Instanziieren einer <xref:System.TimeSpan> -Wert, der das Intervall zwischen zwei Datum und Uhrzeit-Werten, wie im folgenden Beispiel gezeigt.  
  
     [!code-csharp[System.TimeSpan.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.class/cs/instantiate1.cs#4)]
     [!code-vb[System.TimeSpan.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.class/vb/instantiate1.vb#4)]  
  
     Sie können auch Initialisieren einer <xref:System.TimeSpan> Objekt, das einen Zeitpunkt Nullwert auf diese Weise, wie im folgenden Beispiel gezeigt.  
  
     [!code-csharp[System.TimeSpan.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.class/cs/zero1.cs#6)]
     [!code-vb[System.TimeSpan.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.class/vb/zero1.vb#6)]  
  
     <xref:System.TimeSpan> Werte werden von arithmetischen Operatoren und Methoden des zurückgegeben der <xref:System.DateTime>, <xref:System.DateTimeOffset>, und <xref:System.TimeSpan> Strukturen.  
  
-   Durch Analysieren der Zeichenfolgendarstellung einer <xref:System.TimeSpan> Wert. Sie können die <xref:System.TimeSpan.Parse%2A> und <xref:System.TimeSpan.TryParse%2A> Methoden für die Konvertierung von Zeichenfolgen, die Zeitintervalle zu enthalten <xref:System.TimeSpan> Werte. Im folgenden Beispiel wird die <xref:System.TimeSpan.Parse%2A> Methode, um ein Array von Zeichenfolgen zu konvertieren <xref:System.TimeSpan> Werte.  
  
     [!code-csharp[System.TimeSpan.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.class/cs/instantiate1.cs#5)]
     [!code-vb[System.TimeSpan.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.class/vb/instantiate1.vb#5)]  
  
     Darüber hinaus können Sie das genaue Format der Eingabezeichenfolge analysiert und konvertiert werden definieren eine <xref:System.TimeSpan> -Wert durch Aufrufen der <xref:System.TimeSpan.ParseExact%2A> oder <xref:System.TimeSpan.TryParseExact%2A> Methode.  
  
## <a name="performing-operations-on-timespan-values"></a>Ausführen von Vorgängen für TimeSpan-Werten  
 Hinzufügen und subtrahieren, indem Sie entweder die <xref:System.TimeSpan.op_Addition%2A> und <xref:System.TimeSpan.op_Subtraction%2A> Operatoren oder durch Aufrufen der <xref:System.TimeSpan.Add%2A> und <xref:System.TimeSpan.Subtract%2A> Methoden. Sie können auch zwei Zeiträume vergleichen, durch den Aufruf der <xref:System.TimeSpan.Compare%2A>, <xref:System.TimeSpan.CompareTo%2A>, und <xref:System.TimeSpan.Equals%2A> Methoden. Die <xref:System.TimeSpan> Struktur enthält außerdem die <xref:System.TimeSpan.Duration%2A> und <xref:System.TimeSpan.Negate%2A> -Methoden, die Zeitintervalle auf positive und negative Werte zu konvertieren,  
  
 Das Spektrum <xref:System.TimeSpan> Werte <xref:System.TimeSpan.MinValue> zu <xref:System.TimeSpan.MaxValue>.  
  
## <a name="formatting-a-timespan-value"></a>Formatieren ein TimeSpan-Wert  
 Ein <xref:System.TimeSpan> Wert dargestellt werden kann, als [*-*]*d*. *Hh*:*mm*:*ss*. *FF*, wobei die optionalen Minuszeichen (-) ein negatives Zeitintervall, gibt die *d* Komponente wird in Tagen gemessen, *Hh* Stunden in 24-Stunden-Format, gemessen *mm* Minuten, *ss* Sekunden und *ff* Bruchteile einer Sekunde. Ein Zeitintervall bestehen, also eine positive oder negative Zahl von Tagen ohne eine Uhrzeit oder eine Anzahl von Tagen mit einer Tageszeit oder nur eine Uhrzeit.  
  
 Ab der [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.TimeSpan> Struktur unterstützt die kulturabhängige Formatierung durch Überladungen der seine <xref:System.TimeSpan.ToString%2A> Methode, die konvertiert eine <xref:System.TimeSpan> Wert in seine Zeichenfolgendarstellung. Der Standardwert <xref:System.TimeSpan.ToString?displayProperty=nameWithType> -Methode gibt ein Zeitintervall mit einem unveränderlichen Format, das ihren Rückgabewert in früheren Versionen von .NET Framework identisch ist. Die <xref:System.TimeSpan.ToString%28System.String%29?displayProperty=nameWithType> Überladung können Sie eine Formatzeichenfolge angeben, die die Zeichenfolgendarstellung des Zeitintervalls definiert. Die <xref:System.TimeSpan.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> Überladung ermöglicht die Angabe einer Formatzeichenfolge und die Kultur, deren Formatierungskonventionen verwendet, um die Zeichenfolgendarstellung des Zeitintervalls zu erstellen. <xref:System.TimeSpan> sowohl standardmäßige und benutzerdefinierte Formatzeichenfolgen unterstützt. (Weitere Informationen finden Sie unter [TimeSpan-Standardformatzeichenfolgen](~/docs/standard/base-types/standard-timespan-format-strings.md) und [benutzerdefinierte TimeSpan-Formatzeichenfolgen](~/docs/standard/base-types/custom-timespan-format-strings.md).) Nur standard verwendete Formatzeichenfolgen sind jedoch kulturabhängig.  
  
## <a name="restoring-legacy-timespan-formatting"></a>Wiederherstellen von Legacy-TimeSpan Formatierung  
 In einigen Fällen code, der erfolgreich Formate <xref:System.TimeSpan> Werte im [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] und frühere Versionen ein Fehler auftritt, [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]. Das geschieht meistens in Code, der Aufrufe einer [< TimeSpan_LegacyFormatMode >-Element](~/docs/framework/configure-apps/file-schema/runtime/timespan-legacyformatmode-element.md) Methode zum Formatieren einer <xref:System.TimeSpan> Wert mit einer Formatzeichenfolge. Im folgenden Beispiel wurde erfolgreich formatiert eine <xref:System.TimeSpan> Wert in [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] und frühere Versionen, aber löst eine Ausnahme im [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] und höhere Versionen. Beachten Sie, die es versucht, Formatieren einer <xref:System.TimeSpan> Wert mit einem nicht unterstützten Formatbezeichner, der in ignoriert wird [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] und früheren Versionen.  
  
 [!code-csharp[System.TimeSpan.Class.Legacy#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.class.legacy/cs/legacycode1.cs#1)]
 [!code-vb[System.TimeSpan.Class.Legacy#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.class.legacy/vb/legacycode1.vb#1)]  
  
 Wenn Sie den Code nicht ändern, können Sie wiederherstellen, die ältere Formatierung der <xref:System.TimeSpan> -Werte in einer der folgenden Methoden:  
  
-   Erstellen einer Konfigurationsdatei, enthält die [< TimeSpan_LegacyFormatMode >-Element](~/docs/framework/configure-apps/file-schema/runtime/timespan-legacyformatmode-element.md). Festlegen des Elements `enabled` Attribut `true` Legacy wiederhergestellt <xref:System.TimeSpan> Formatierung auf einer Basis pro Anwendung.  
  
-   Durch Festlegen des Kompatibilitätsgrads "NetFx40_TimeSpanLegacyFormatMode" wechseln Sie, wenn Sie eine Anwendungsdomäne zu erstellen. Dies ermöglicht eine Legacy- <xref:System.TimeSpan> Formatierung auf einer Basis pro Anwendungsdomäne. Das folgende Beispiel erstellt eine Anwendungsdomäne, die verwendet, die ältere <xref:System.TimeSpan> formatieren.  
  
     [!code-csharp[System.TimeSpan.Class.AppDomain#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.class.appdomain/cs/perappdomain1.cs#1)]
     [!code-vb[System.TimeSpan.Class.AppDomain#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.class.appdomain/vb/perappdomain1.vb#1)]  
  
     Bei der folgende Code in der neuen Anwendungsdomäne ausgeführt wird, setzt er auf Legacy <xref:System.TimeSpan> Formatierungsverhalten.  
  
     [!code-csharp[System.TimeSpan.Class.AppDomain#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.class.appdomain/cs/showtimespan.cs#2)]
     [!code-vb[System.TimeSpan.Class.AppDomain#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.class.appdomain/vb/showtimespan.vb#2)]  
  
   
  
## Examples  
 Das folgende Beispiel instanziiert ein <xref:System.TimeSpan> Objekt, das die Differenz zwischen zwei Datumsangaben darstellt. Es zeigt dann die <xref:System.TimeSpan> Eigenschaften des Objekts.  
  
 [!code-csharp[System.TimeSpan.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.class/cs/structure1.cs#1)]
 [!code-vb[System.TimeSpan.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.class/vb/structure1.vb#1)]  
 [!code-powershell[System.TimeSpan.Class#1](~/samples/snippets/powershell/VS_Snippets_CLR_System/system.timespan.class/ps/structure1.ps1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.DateTime" />
    <altmember cref="T:System.DateTimeOffset" />
    <altmember cref="T:System.Globalization.Calendar" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.TimeSpan" />-Struktur.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TimeSpan (long ticks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.#ctor(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan(long ticks);" />
      <MemberSignature Language="F#" Value="new TimeSpan : int64 -&gt; TimeSpan" Usage="new System.TimeSpan ticks" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="ticks">Eine in der Einheit 100 Nanosekunden ausgedrückte Zeitspanne.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.TimeSpan" />-Struktur mit der angegebenen Anzahl von Ticks.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein einzelnen Teilstrich stellt 100 Nanosekunden oder ein zehnmillionstel einer Sekunde dar. In einer Millisekunde sind 10.000 Teilstriche.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt mehrere <xref:System.TimeSpan> Objekte mithilfe der Überladung des Konstruktors, der initialisiert einen <xref:System.TimeSpan> auf eine angegebene Anzahl von Ticks.  
  
 [!code-cpp[System.TimeSpan.Ctor#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Ctor/CPP/ctorl.cpp#1)]
 [!code-csharp[System.TimeSpan.Ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Ctor/CS/ctorl.cs#1)]
 [!code-vb[System.TimeSpan.Ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Ctor/VB/ctorl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeSpan.Ticks" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TimeSpan (int hours, int minutes, int seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 hours, int32 minutes, int32 seconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (hours As Integer, minutes As Integer, seconds As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan(int hours, int minutes, int seconds);" />
      <MemberSignature Language="F#" Value="new TimeSpan : int * int * int -&gt; TimeSpan" Usage="new System.TimeSpan (hours, minutes, seconds)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="hours" Type="System.Int32" />
        <Parameter Name="minutes" Type="System.Int32" />
        <Parameter Name="seconds" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="hours">Anzahl der Stunden.</param>
        <param name="minutes">Anzahl der Minuten.</param>
        <param name="seconds">Anzahl der Sekunden.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.TimeSpan" />-Struktur mit der angegebenen Anzahl von Stunden, Minuten und Sekunden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das angegebene `hours`, `minutes`, und `seconds` sind in Ticks konvertiert, und dass der Wert dieser Instanz initialisiert.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt mehrere <xref:System.TimeSpan> Objekte mithilfe der Überladung des Konstruktors, der initialisiert einen <xref:System.TimeSpan> auf eine angegebene Anzahl von Stunden, Minuten und Sekunden.  
  
 [!code-cpp[System.TimeSpan.Ctor#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Ctor/CPP/ctoriii.cpp#2)]
 [!code-csharp[System.TimeSpan.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Ctor/CS/ctoriii.cs#2)]
 [!code-vb[System.TimeSpan.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Ctor/VB/ctoriii.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Parameter geben einen <see cref="T:System.TimeSpan" />-Wert kleiner als <see cref="F:System.TimeSpan.MinValue" /> oder größer als <see cref="F:System.TimeSpan.MaxValue" /> an.</exception>
        <altmember cref="T:System.Int64" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TimeSpan (int days, int hours, int minutes, int seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 days, int32 hours, int32 minutes, int32 seconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (days As Integer, hours As Integer, minutes As Integer, seconds As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan(int days, int hours, int minutes, int seconds);" />
      <MemberSignature Language="F#" Value="new TimeSpan : int * int * int * int -&gt; TimeSpan" Usage="new System.TimeSpan (days, hours, minutes, seconds)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="days" Type="System.Int32" />
        <Parameter Name="hours" Type="System.Int32" />
        <Parameter Name="minutes" Type="System.Int32" />
        <Parameter Name="seconds" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="days">Anzahl der Tage.</param>
        <param name="hours">Anzahl der Stunden.</param>
        <param name="minutes">Anzahl der Minuten.</param>
        <param name="seconds">Anzahl der Sekunden.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.TimeSpan" />-Struktur mit der angegebenen Anzahl von Tagen, Stunden, Minuten und Sekunden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das angegebene `days`, `hours`, `minutes`, und `seconds` sind in Ticks konvertiert, und dass der Wert dieser Instanz initialisiert.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt mehrere <xref:System.TimeSpan> Objekte mithilfe der Überladung des Konstruktors, der initialisiert einen <xref:System.TimeSpan> auf eine angegebene Anzahl von Tagen, Stunden, Minuten und Sekunden.  
  
 [!code-cpp[System.TimeSpan.Ctor#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Ctor/CPP/ctoriiii.cpp#3)]
 [!code-csharp[System.TimeSpan.Ctor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Ctor/CS/ctoriiii.cs#3)]
 [!code-vb[System.TimeSpan.Ctor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Ctor/VB/ctoriiii.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Parameter geben einen <see cref="T:System.TimeSpan" />-Wert kleiner als <see cref="F:System.TimeSpan.MinValue" /> oder größer als <see cref="F:System.TimeSpan.MaxValue" /> an.</exception>
        <altmember cref="T:System.Int64" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TimeSpan (int days, int hours, int minutes, int seconds, int milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 days, int32 hours, int32 minutes, int32 seconds, int32 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (days As Integer, hours As Integer, minutes As Integer, seconds As Integer, milliseconds As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan(int days, int hours, int minutes, int seconds, int milliseconds);" />
      <MemberSignature Language="F#" Value="new TimeSpan : int * int * int * int * int -&gt; TimeSpan" Usage="new System.TimeSpan (days, hours, minutes, seconds, milliseconds)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="days" Type="System.Int32" />
        <Parameter Name="hours" Type="System.Int32" />
        <Parameter Name="minutes" Type="System.Int32" />
        <Parameter Name="seconds" Type="System.Int32" />
        <Parameter Name="milliseconds" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="days">Anzahl der Tage.</param>
        <param name="hours">Anzahl der Stunden.</param>
        <param name="minutes">Anzahl der Minuten.</param>
        <param name="seconds">Anzahl der Sekunden.</param>
        <param name="milliseconds">Anzahl der Millisekunden.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.TimeSpan" />-Struktur mit der angegebenen Anzahl von Tagen, Stunden, Minuten, Sekunden und Millisekunden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das angegebene `days`, `hours`, `minutes`, `seconds`, und `milliseconds` sind in Ticks konvertiert, und dass der Wert dieser Instanz initialisiert.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt mehrere <xref:System.TimeSpan> Objekte mithilfe der Überladung des Konstruktors, der initialisiert einen <xref:System.TimeSpan> auf eine angegebene Anzahl von Tagen, Stunden, Minuten, Sekunden und Millisekunden.  
  
 [!code-cpp[System.TimeSpan.Ctor#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Ctor/CPP/ctoriiiii.cpp#4)]
 [!code-csharp[System.TimeSpan.Ctor#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Ctor/CS/ctoriiiii.cs#4)]
 [!code-vb[System.TimeSpan.Ctor#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Ctor/VB/ctoriiiii.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Parameter geben einen <see cref="T:System.TimeSpan" />-Wert kleiner als <see cref="F:System.TimeSpan.MinValue" /> oder größer als <see cref="F:System.TimeSpan.MaxValue" /> an.</exception>
        <altmember cref="T:System.Int64" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public TimeSpan Add (TimeSpan ts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Add(valuetype System.TimeSpan ts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Add(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (ts As TimeSpan) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan Add(TimeSpan ts);" />
      <MemberSignature Language="F#" Value="member this.Add : TimeSpan -&gt; TimeSpan" Usage="timeSpan.Add ts" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ts" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="ts">Das hinzuzufügende Zeitintervall.</param>
        <summary>Gibt ein neues <see cref="T:System.TimeSpan" />-Objekt zurück, dessen Wert die Summe aus dem angegebenen <see cref="T:System.TimeSpan" />-Objekt und dieser Instanz ist.</summary>
        <returns>Ein neues Objekt, das die Summe des Werts dieser Instanz und des Werts von <paramref name="ts" /> darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der zurückgegebene Wert muss zwischen <xref:System.TimeSpan.MinValue?displayProperty=nameWithType> und <xref:System.TimeSpan.MaxValue?displayProperty=nameWithType>ist, andernfalls wird eine Ausnahme ausgelöst.  
  
 Der Rückgabewert ist ein neues <xref:System.TimeSpan>; der ursprüngliche <xref:System.TimeSpan> wird nicht geändert.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.TimeSpan.Add%2A> Methode, um jedes Element in einem Array von Zeitintervallen hinzuzufügen, auf eine Basistabelle <xref:System.TimeSpan> Wert.  
  
 [!code-csharp[System.TimeSpan.Add#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.add/cs/add1.cs#1)]
 [!code-vb[System.TimeSpan.Add#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.add/vb/add1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">Der resultierende <see cref="T:System.TimeSpan" />-Wert ist kleiner als <see cref="F:System.TimeSpan.MinValue" /> oder größer als <see cref="F:System.TimeSpan.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.Add(System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (t1 As TimeSpan, t2 As TimeSpan) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="F#" Value="static member Compare : TimeSpan * TimeSpan -&gt; int" Usage="System.TimeSpan.Compare (t1, t2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">Das erste zu vergleichende Zeitintervall.</param>
        <param name="t2">Das zweite zu vergleichende Zeitintervall.</param>
        <summary>Vergleicht zwei <see cref="T:System.TimeSpan" />-Werte und gibt eine Ganzzahl zurück, die angibt, ob der erste Wert kürzer oder länger als der zweite Wert ist oder ob beide Werte die gleiche Länge aufweisen.</summary>
        <returns>Einer der folgenden Werte.  
  
 <list type="table"><listheader><term> Wert 
 </term><description> Beschreibung  
 </description></listheader><item><term> -1 
 </term><description><paramref name="t1" /> ist kürzer als <paramref name="t2" />.  
  
 </description></item><item><term> 0 
 </term><description><paramref name="t1" /> ist gleich <paramref name="t2" />.  
  
 </description></item><item><term> 1 
 </term><description><paramref name="t1" /> ist länger als <paramref name="t2" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.TimeSpan.Compare%2A> Methode, um mehrere vergleichen <xref:System.TimeSpan> Objekte mit einem <xref:System.TimeSpan> Objekt, dessen Wert ein Zeitintervall von 2 Stunden.  
  
 [!code-csharp[System.TimeSpan.Compare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.compare/cs/compare1.cs#1)]
 [!code-vb[System.TimeSpan.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.compare/vb/compare1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeSpan.CompareTo(System.Object)" />
        <altmember cref="M:System.TimeSpan.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Vergleicht diese Instanz mit einem angegebenen Objekt oder <see cref="T:System.TimeSpan" />-Objekt und gibt eine ganze Zahl zurück, die angibt, ob diese Instanz kürzer oder länger als das angegebene Objekt bzw. <see cref="T:System.TimeSpan" />-Objekt ist oder ob sie die gleiche Länge aufweist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die beiden Überladungen der der <xref:System.TimeSpan.CompareTo%2A> Methodenrückgabewert eine Zahl mit Vorzeichen, der den relativen Wert dieser Instanz angibt und die `value` -Arguments zu, wie in der folgenden Tabelle dargestellt.  
  
|Wert|Beschreibung |  
|-----------|-----------------|  
|Kleiner als 0 (null)|Diese Instanz ist kürzer als `value`.|  
|Zero|Diese Instanz entspricht `value`.|  
|Größer als 0 (null)|Diese Instanz ist länger als `value`.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj -&gt; int&#xA;override this.CompareTo : obj -&gt; int" Usage="timeSpan.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Ein Vergleichsobjekt oder <see langword="null" />.</param>
        <summary>Vergleicht diese Instanz mit einem angegebenen Objekt und gibt eine Ganzzahl zurück, die angibt, ob diese Instanz kürzer oder länger als das angegebene Objekt ist oder ob sie die gleiche Länge aufweist.</summary>
        <returns>Einer der folgenden Werte.  
  
 <list type="table"><listheader><term> Wert 
 </term><description> Beschreibung  
 </description></listheader><item><term> -1 
 </term><description> Diese Instanz ist kürzer als <paramref name="value" />.  
  
 </description></item><item><term> 0 
 </term><description> Diese Instanz ist gleich <paramref name="value" />.  
  
 </description></item><item><term> 1 
 </term><description> Diese Instanz ist länger als <paramref name="value" />.  
  
- oder -  
 <paramref name="value" /> ist <see langword="null" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jede Instanz von <xref:System.TimeSpan>, unabhängig von seinem Wert wird als größer betrachtet `null`.  
  
 Die `value` Parameter muss eine Instanz von <xref:System.TimeSpan> oder `null`ist, andernfalls wird eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 Im folgenden Beispiel werden mehrere <xref:System.TimeSpan> Strukturen und andere Objekte auf einen Verweis <xref:System.TimeSpan> -Struktur unter Verwendung der <xref:System.TimeSpan.CompareTo%2A> Methode.  
  
 [!code-cpp[System.TimeSpan.Compare_Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Compare_Equals/CPP/cto_eq_obj.cpp#1)]
 [!code-csharp[System.TimeSpan.Compare_Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Compare_Equals/CS/cto_eq_obj.cs#1)]
 [!code-vb[System.TimeSpan.Compare_Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Compare_Equals/VB/cto_eq_obj.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> ist keine <see cref="T:System.TimeSpan" />.</exception>
        <altmember cref="T:System.Object" />
        <altmember cref="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)" />
        <altmember cref="M:System.TimeSpan.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.CompareTo(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As TimeSpan) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(TimeSpan value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : TimeSpan -&gt; int&#xA;override this.CompareTo : TimeSpan -&gt; int" Usage="timeSpan.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">Ein mit dieser Instanz zu vergleichendes Objekt.</param>
        <summary>Vergleicht diese Instanz mit einem angegebenen <see cref="T:System.TimeSpan" />-Objekt und gibt eine Ganzzahl zurück, die angibt, ob diese Instanz kürzer oder länger als das angegebene <see cref="T:System.TimeSpan" />-Objekt ist oder ob sie die gleiche Länge aufweist.</summary>
        <returns>Eine Zahl mit Vorzeichen, die das Verhältnis zwischen dem Wert dieser Instanz und <paramref name="value" /> angibt.  
  
 <list type="table"><listheader><term> Wert 
 </term><description> Beschreibung  
 </description></listheader><item><term> Eine negative ganze Zahl 
 </term><description> Diese Instanz ist kürzer als <paramref name="value" />.  
  
 </description></item><item><term> Zero 
 </term><description> Diese Instanz ist gleich <paramref name="value" />.  
  
 </description></item><item><term> Eine positive ganze Zahl 
 </term><description> Diese Instanz ist länger als <paramref name="value" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode implementiert die <xref:System.IComparable%601?displayProperty=nameWithType> -Schnittstelle und führt etwas bessere Leistung als die <xref:System.TimeSpan.CompareTo%2A?displayProperty=nameWithType> Methode, da es keine konvertieren die `value` Parameter für ein Objekt.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt den generische und nicht generische Versionen der <xref:System.TimeSpan.CompareTo%2A> Methode für verschiedene Wert- und Verweistypen.  
  
 [!code-cpp[T.CompareTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/T.CompareTo/CPP/cat.cpp#1)]
 [!code-csharp[T.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/T.CompareTo/CS/cat.cs#1)]
 [!code-vb[T.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/T.CompareTo/VB/cat.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Days">
      <MemberSignature Language="C#" Value="public int Days { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Days" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.Days" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Days As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Days { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Days : int" Usage="System.TimeSpan.Days" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Tageskomponente des Zeitintervalls ab, das durch die aktuelle <see cref="T:System.TimeSpan" />-Struktur dargestellt wird.</summary>
        <value>Die Tagkomponente in dieser Instanz. Der Rückgabewert kann negativ oder positiv sein.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.TimeSpan> Wert dargestellt werden kann, als [*-*]*d*. *Hh*:*mm*:*ss*. *FF*, wobei die optionalen Minuszeichen (-) ein negatives Zeitintervall, gibt die *d* Komponente wird in Tagen gemessen, *Hh* Stunden in 24-Stunden-Format, gemessen *mm* Minuten, *ss* Sekunden und *ff* Bruchteile einer Sekunde. Der Wert des der <xref:System.TimeSpan.Days%2A> -Eigenschaft ist die Komponente "Tag", *d*.  
  
 Die <xref:System.TimeSpan.Days%2A> Eigenschaft darstellt, in ganzen Tagen, während die <xref:System.TimeSpan.TotalDays%2A> Eigenschaft darstellt, ganze Tagen und Bruchteile von Tagen.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt mehrere <xref:System.TimeSpan> -Objekte und zeigt die <xref:System.TimeSpan.Days%2A> Eigenschaft der einzelnen.  
  
 [!code-cpp[System.TimeSpan.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.TimeSpan.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CS/properties.cs#1)]
 [!code-vb[System.TimeSpan.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeSpan.TotalDays" />
        <altmember cref="P:System.TimeSpan.Ticks" />
        <altmember cref="P:System.TimeSpan.Milliseconds" />
        <altmember cref="P:System.TimeSpan.Seconds" />
        <altmember cref="P:System.TimeSpan.Minutes" />
        <altmember cref="P:System.TimeSpan.Hours" />
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public TimeSpan Divide (double divisor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Divide(float64 divisor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Divide(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Divide (divisor As Double) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan Divide(double divisor);" />
      <MemberSignature Language="F#" Value="member this.Divide : double -&gt; TimeSpan" Usage="timeSpan.Divide divisor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="divisor" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="divisor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public double Divide (TimeSpan ts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 Divide(valuetype System.TimeSpan ts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Divide(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Divide (ts As TimeSpan) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Divide(TimeSpan ts);" />
      <MemberSignature Language="F#" Value="member this.Divide : TimeSpan -&gt; double" Usage="timeSpan.Divide ts" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ts" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="ts">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Duration">
      <MemberSignature Language="C#" Value="public TimeSpan Duration ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Duration() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Duration" />
      <MemberSignature Language="VB.NET" Value="Public Function Duration () As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan Duration();" />
      <MemberSignature Language="F#" Value="member this.Duration : unit -&gt; TimeSpan" Usage="timeSpan.Duration " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt ein neues <see cref="T:System.TimeSpan" />-Objekt zurück, dessen Wert den absoluten Wert des aktuellen <see cref="T:System.TimeSpan" />-Objekts darstellt.</summary>
        <returns>Ein neues Objekt, dessen Wert den absoluten Wert des aktuellen <see cref="T:System.TimeSpan" />-Objekts darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.TimeSpan.Duration%2A> Methode, um mehrere <xref:System.TimeSpan> Objekte.  
  
 [!code-cpp[System.TimeSpan.Dura_Nega_Unary#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/CPP/dura_nega_una.cpp#1)]
 [!code-csharp[System.TimeSpan.Dura_Nega_Unary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/CS/dura_nega_una.cs#1)]
 [!code-vb[System.TimeSpan.Dura_Nega_Unary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/VB/dura_nega_una.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">Der Wert dieser Instanz ist <see cref="F:System.TimeSpan.MinValue" />.</exception>
        <altmember cref="P:System.TimeSpan.Ticks" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt einen Wert zurück, der angibt, ob zwei Instanzen von <see cref="T:System.TimeSpan" /> gleich sind.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="timeSpan.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Ein Objekt, das mit dieser Instanz verglichen werden soll.</param>
        <summary>Gibt einen Wert zurück, der angibt, ob diese Instanz gleich einem angegebenen Objekt ist.</summary>
        <returns>
          <see langword="true" />, wenn <paramref name="value" /> ein <see cref="T:System.TimeSpan" />-Objekt ist, das das gleiche Zeitintervall wie die aktuelle <see cref="T:System.TimeSpan" />-Struktur darstellt, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel werden mehrere <xref:System.TimeSpan> und andere Objekte auf einen Verweis <xref:System.TimeSpan> mithilfe der <xref:System.TimeSpan.Equals%2A> Methode.  
  
 [!code-cpp[System.TimeSpan.Compare_Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Compare_Equals/CPP/cto_eq_obj.cpp#1)]
 [!code-csharp[System.TimeSpan.Compare_Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Compare_Equals/CS/cto_eq_obj.cs#1)]
 [!code-vb[System.TimeSpan.Compare_Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Compare_Equals/VB/cto_eq_obj.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)" />
        <altmember cref="M:System.TimeSpan.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (TimeSpan obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.TimeSpan obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Equals(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (obj As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(TimeSpan obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : TimeSpan -&gt; bool" Usage="timeSpan.Equals obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="obj">Ein Objekt, das mit dieser Instanz verglichen werden soll.</param>
        <summary>Gibt einen Wert zurück, der angibt, ob diese Instanz gleich einem angegebenen <see cref="T:System.TimeSpan" />-Objekt ist.</summary>
        <returns>
          <see langword="true" />, wenn <paramref name="obj" /> das gleiche Zeitintervall darstellt wie diese Instanz, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode implementiert die <xref:System.IEquatable%601?displayProperty=nameWithType> -Schnittstelle und führt etwas bessere Leistung als <xref:System.TimeSpan.Equals%2A> , da es keine konvertieren die `obj` Parameter für ein Objekt.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt den generische und nicht generische Versionen der <xref:System.TimeSpan.CompareTo%2A> Methode für verschiedene Wert- und Verweistypen.  
  
 [!code-cpp[T.CompareTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/T.CompareTo/CPP/cat.cpp#1)]
 [!code-csharp[T.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/T.CompareTo/CS/cat.cs#1)]
 [!code-vb[T.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/T.CompareTo/VB/cat.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeSpan.Equals(System.Object)" />
        <altmember cref="Overload:System.TimeSpan.CompareTo" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Equals(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (t1 As TimeSpan, t2 As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="F#" Value="static member Equals : TimeSpan * TimeSpan -&gt; bool" Usage="System.TimeSpan.Equals (t1, t2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">Das erste zu vergleichende Zeitintervall.</param>
        <param name="t2">Das zweite zu vergleichende Zeitintervall.</param>
        <summary>Gibt einen Wert zurück, der angibt, ob zwei angegebene Instanzen von <see cref="T:System.TimeSpan" /> gleich sind.</summary>
        <returns>
          <see langword="true" />, wenn die Werte von <paramref name="t1" /> und <paramref name="t2" /> gleich sind, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel werden mehrere <xref:System.TimeSpan> Objekte mit einem <xref:System.TimeSpan> mithilfe der statischen <xref:System.TimeSpan.Equals%2A> Methode.  
  
 [!code-cpp[System.TimeSpan.Compare_Equals#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Compare_Equals/CPP/comp_equal.cpp#2)]
 [!code-csharp[System.TimeSpan.Compare_Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Compare_Equals/CS/comp_equal.cs#2)]
 [!code-vb[System.TimeSpan.Compare_Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Compare_Equals/VB/comp_equal.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)" />
        <altmember cref="M:System.TimeSpan.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FromDays">
      <MemberSignature Language="C#" Value="public static TimeSpan FromDays (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan FromDays(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.FromDays(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromDays (value As Double) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan FromDays(double value);" />
      <MemberSignature Language="F#" Value="static member FromDays : double -&gt; TimeSpan" Usage="System.TimeSpan.FromDays value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Eine Anzahl von Tagen, auf die nächste Millisekunde gerundet.</param>
        <summary>Gibt eine <see cref="T:System.TimeSpan" /> zurück, die eine angegebene Anzahl von Tagen darstellt. Die Angabe wird auf die nächste Millisekunde gerundet.</summary>
        <returns>Ein Objekt, das <paramref name="value" /> darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `value` Parameter wird in Millisekunden, die in Ticks konvertiert wird, konvertiert und diese Anzahl von Ticks wird verwendet, um die Initialisierung der neuen <xref:System.TimeSpan>. Aus diesem Grund `value` wird nur berücksichtigt werden, auf die nächste Millisekunde gerundet. Beachten Sie, dass aufgrund der Präzisionsverlust, der die <xref:System.Double> -Datentyp, diese Konvertierung kann dazu führen, dass ein <xref:System.OverflowException> ähnlich, aber immer noch im Bereich der Werte <xref:System.TimeSpan.MinValue> oder <xref:System.TimeSpan.MaxValue>. Angenommen, dies bewirkt, dass ein <xref:System.OverflowException> in den folgenden Versuch zum Instanziieren einer <xref:System.TimeSpan> Objekt.  
  
 [!code-csharp[System.TimeSpan.FromMinutes#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.FromMinutes/cs/System.TimeSpan.FromMinutes.cs#2)]
 [!code-vb[System.TimeSpan.FromMinutes#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.FromMinutes/vb/System.TimeSpan.FromMinutes.vb#2)]  
  
   
  
## Examples  
 Das folgende Beispiel erstellt mehrere <xref:System.TimeSpan> -Objekte mithilfe der <xref:System.TimeSpan.FromDays%2A> Methode.  
  
 [!code-cpp[System.TimeSpan.From#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.From/CPP/fromdays.cpp#6)]
 [!code-csharp[System.TimeSpan.From#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.From/CS/fromdays.cs#6)]
 [!code-vb[System.TimeSpan.From#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.From/VB/fromdays.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> ist kleiner als <see cref="F:System.TimeSpan.MinValue" /> oder größer als <see cref="F:System.TimeSpan.MaxValue" />.  
  
- oder -  
 <paramref name="value" /> ist <see cref="F:System.Double.PositiveInfinity" />.  
  
- oder -  
 <paramref name="value" /> ist <see cref="F:System.Double.NegativeInfinity" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> ist gleich <see cref="F:System.Double.NaN" />.</exception>
        <altmember cref="T:System.Double" />
        <altmember cref="M:System.TimeSpan.FromTicks(System.Int64)" />
        <altmember cref="M:System.TimeSpan.FromMilliseconds(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromSeconds(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromMinutes(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromHours(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="FromHours">
      <MemberSignature Language="C#" Value="public static TimeSpan FromHours (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan FromHours(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.FromHours(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHours (value As Double) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan FromHours(double value);" />
      <MemberSignature Language="F#" Value="static member FromHours : double -&gt; TimeSpan" Usage="System.TimeSpan.FromHours value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Eine Anzahl von Stunden, auf die nächste Millisekunde gerundet.</param>
        <summary>Gibt eine <see cref="T:System.TimeSpan" /> zurück, die eine angegebene Anzahl von Stunden darstellt. Die Angabe wird auf die nächste Millisekunde gerundet.</summary>
        <returns>Ein Objekt, das <paramref name="value" /> darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `value` Parameter wird in Millisekunden, die in Ticks konvertiert wird, konvertiert und diese Anzahl von Ticks wird verwendet, um die Initialisierung der neuen <xref:System.TimeSpan>. Aus diesem Grund `value` wird nur berücksichtigt werden, auf die nächste Millisekunde gerundet. Beachten Sie, dass aufgrund der Präzisionsverlust, der die <xref:System.Double> -Datentyp, der diese Konvertierung kann generieren eine <xref:System.OverflowException> ähnlich, aber immer noch im Bereich der Werte <xref:System.TimeSpan.MinValue> oder <xref:System.TimeSpan.MaxValue>. Angenommen, dies bewirkt, dass ein <xref:System.OverflowException> in den folgenden Versuch zum Instanziieren einer <xref:System.TimeSpan> Objekt.  
  
 [!code-csharp[System.TimeSpan.FromMinutes#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.FromMinutes/cs/System.TimeSpan.FromMinutes.cs#3)]
 [!code-vb[System.TimeSpan.FromMinutes#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.FromMinutes/vb/System.TimeSpan.FromMinutes.vb#3)]  
  
   
  
## Examples  
 Das folgende Beispiel erstellt mehrere <xref:System.TimeSpan> -Objekte mithilfe der <xref:System.TimeSpan.FromHours%2A> Methode.  
  
 [!code-cpp[System.TimeSpan.From#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.From/CPP/fromhours.cpp#5)]
 [!code-csharp[System.TimeSpan.From#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.From/CS/fromhours.cs#5)]
 [!code-vb[System.TimeSpan.From#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.From/VB/fromhours.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> ist kleiner als <see cref="F:System.TimeSpan.MinValue" /> oder größer als <see cref="F:System.TimeSpan.MaxValue" />.  
  
- oder -  
 <paramref name="value" /> ist <see cref="F:System.Double.PositiveInfinity" />.  
  
- oder -  
 <paramref name="value" /> ist <see cref="F:System.Double.NegativeInfinity" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> ist gleich <see cref="F:System.Double.NaN" />.</exception>
        <altmember cref="T:System.Double" />
        <altmember cref="M:System.TimeSpan.FromTicks(System.Int64)" />
        <altmember cref="M:System.TimeSpan.FromMilliseconds(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromSeconds(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromMinutes(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromDays(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="FromMilliseconds">
      <MemberSignature Language="C#" Value="public static TimeSpan FromMilliseconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan FromMilliseconds(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.FromMilliseconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromMilliseconds (value As Double) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan FromMilliseconds(double value);" />
      <MemberSignature Language="F#" Value="static member FromMilliseconds : double -&gt; TimeSpan" Usage="System.TimeSpan.FromMilliseconds value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Eine Anzahl von Millisekunden.</param>
        <summary>Gibt eine <see cref="T:System.TimeSpan" /> zurück, die eine angegebene Anzahl von Millisekunden darstellt.</summary>
        <returns>Ein Objekt, das <paramref name="value" /> darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `value` Parameter wird in Ticks konvertiert, und diese Anzahl von Ticks wird verwendet, um die Initialisierung der neuen <xref:System.TimeSpan>. Aus diesem Grund `value` wird nur berücksichtigt werden, auf die nächste Millisekunde gerundet. Beachten Sie, dass aufgrund der Präzisionsverlust, der die <xref:System.Double> -Datentyp, der diese Konvertierung kann generieren eine <xref:System.OverflowException> ähnlich, aber immer noch im Bereich der Werte <xref:System.TimeSpan.MinValue> oder <xref:System.TimeSpan.MaxValue>. Angenommen, dies bewirkt, dass ein <xref:System.OverflowException> in den folgenden Versuch zum Instanziieren einer <xref:System.TimeSpan> Objekt.  
  
 [!code-csharp[System.TimeSpan.FromMinutes#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.FromMinutes/cs/System.TimeSpan.FromMinutes.cs#4)]
 [!code-vb[System.TimeSpan.FromMinutes#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.FromMinutes/vb/System.TimeSpan.FromMinutes.vb#4)]  
  
   
  
## Examples  
 Das folgende Beispiel erstellt mehrere <xref:System.TimeSpan> Objekte mithilfe der <xref:System.TimeSpan.FromMilliseconds%2A> Methode.  
  
 [!code-cpp[System.TimeSpan.From#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.From/CPP/frommillisec.cpp#2)]
 [!code-csharp[System.TimeSpan.From#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.From/CS/frommillisec.cs#2)]
 [!code-vb[System.TimeSpan.From#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.From/VB/frommillisec.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> ist kleiner als <see cref="F:System.TimeSpan.MinValue" /> oder größer als <see cref="F:System.TimeSpan.MaxValue" />.  
  
- oder -  
 <paramref name="value" /> ist <see cref="F:System.Double.PositiveInfinity" />.  
  
- oder -  
 <paramref name="value" /> ist <see cref="F:System.Double.NegativeInfinity" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> ist gleich <see cref="F:System.Double.NaN" />.</exception>
        <altmember cref="T:System.Double" />
        <altmember cref="M:System.TimeSpan.FromTicks(System.Int64)" />
        <altmember cref="M:System.TimeSpan.FromSeconds(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromMinutes(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromHours(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromDays(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="FromMinutes">
      <MemberSignature Language="C#" Value="public static TimeSpan FromMinutes (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan FromMinutes(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.FromMinutes(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromMinutes (value As Double) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan FromMinutes(double value);" />
      <MemberSignature Language="F#" Value="static member FromMinutes : double -&gt; TimeSpan" Usage="System.TimeSpan.FromMinutes value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Eine Anzahl von Minuten, auf die nächste Millisekunde gerundet.</param>
        <summary>Gibt eine <see cref="T:System.TimeSpan" /> zurück, die eine angegebene Anzahl von Minuten darstellt. Die Angabe wird auf die nächste Millisekunde gerundet.</summary>
        <returns>Ein Objekt, das <paramref name="value" /> darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `value` Parameter wird in Millisekunden, die in Ticks konvertiert wird, konvertiert und diese Anzahl von Ticks wird verwendet, um die Initialisierung der neuen <xref:System.TimeSpan>. Aus diesem Grund `value` wird nur berücksichtigt werden, auf die nächste Millisekunde gerundet. Beachten Sie, dass aufgrund der Präzisionsverlust, der die <xref:System.Double> -Datentyp, der diese Konvertierung kann generieren eine <xref:System.OverflowException> ähnlich, aber immer noch im Bereich der Werte <xref:System.TimeSpan.MinValue> oder <xref:System.TimeSpan.MaxValue>. Angenommen, dies bewirkt, dass ein <xref:System.OverflowException> in den folgenden Versuch zum Instanziieren einer <xref:System.TimeSpan> Objekt.  
  
 [!code-csharp[System.TimeSpan.FromMinutes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.FromMinutes/cs/System.TimeSpan.FromMinutes.cs#1)]
 [!code-vb[System.TimeSpan.FromMinutes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.FromMinutes/vb/System.TimeSpan.FromMinutes.vb#1)]  
  
   
  
## Examples  
 Das folgende Beispiel erstellt mehrere <xref:System.TimeSpan> -Objekte mithilfe der <xref:System.TimeSpan.FromMinutes%2A> Methode.  
  
 [!code-cpp[System.TimeSpan.From#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.From/CPP/fromminutes.cpp#4)]
 [!code-csharp[System.TimeSpan.From#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.From/CS/fromminutes.cs#4)]
 [!code-vb[System.TimeSpan.From#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.From/VB/fromminutes.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> ist kleiner als <see cref="F:System.TimeSpan.MinValue" /> oder größer als <see cref="F:System.TimeSpan.MaxValue" />.  
  
- oder -  
 <paramref name="value" /> ist <see cref="F:System.Double.PositiveInfinity" />.  
  
- oder -  
 <paramref name="value" /> ist <see cref="F:System.Double.NegativeInfinity" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> ist gleich <see cref="F:System.Double.NaN" />.</exception>
        <altmember cref="T:System.Double" />
        <altmember cref="M:System.TimeSpan.FromTicks(System.Int64)" />
        <altmember cref="M:System.TimeSpan.FromMilliseconds(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromSeconds(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromHours(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromDays(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="FromSeconds">
      <MemberSignature Language="C#" Value="public static TimeSpan FromSeconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan FromSeconds(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.FromSeconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromSeconds (value As Double) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan FromSeconds(double value);" />
      <MemberSignature Language="F#" Value="static member FromSeconds : double -&gt; TimeSpan" Usage="System.TimeSpan.FromSeconds value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Eine Anzahl von Sekunden, auf die nächste Millisekunde gerundet.</param>
        <summary>Gibt eine <see cref="T:System.TimeSpan" /> zurück, die eine angegebene Anzahl von Sekunden darstellt. Die Angabe wird auf die nächste Millisekunde gerundet.</summary>
        <returns>Ein Objekt, das <paramref name="value" /> darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `value` Parameter wird in Millisekunden, die in Ticks konvertiert wird, konvertiert und diese Anzahl von Ticks wird verwendet, um die neue initialisiert <xref:System.TimeSpan>. Aus diesem Grund `value` wird nur berücksichtigt werden, auf die nächste Millisekunde gerundet. Beachten Sie, dass aufgrund der Verlust der Genauigkeit von der <xref:System.Double> Datentyp aufweisen, kann dadurch generiert eine <xref:System.OverflowException> ähnlich, aber immer noch im Bereich der Werte <xref:System.TimeSpan.MinValue> oder <xref:System.TimeSpan.MaxValue>, dies ist die Ursache für eine <xref:System.OverflowException>, z. B. in der Versuchen Sie Folgendes zum Instanziieren einer <xref:System.TimeSpan> Objekt.  
  
 [!code-csharp[System.TimeSpan.FromMinutes#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.FromMinutes/cs/System.TimeSpan.FromMinutes.cs#5)]
 [!code-vb[System.TimeSpan.FromMinutes#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.FromMinutes/vb/System.TimeSpan.FromMinutes.vb#5)]  
  
   
  
## Examples  
 Das folgende Beispiel erstellt mehrere <xref:System.TimeSpan> -Objekte mithilfe der <xref:System.TimeSpan.FromSeconds%2A> Methode.  
  
 [!code-cpp[System.TimeSpan.From#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.From/CPP/fromseconds.cpp#3)]
 [!code-csharp[System.TimeSpan.From#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.From/CS/fromseconds.cs#3)]
 [!code-vb[System.TimeSpan.From#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.From/VB/fromseconds.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> ist kleiner als <see cref="F:System.TimeSpan.MinValue" /> oder größer als <see cref="F:System.TimeSpan.MaxValue" />.  
  
- oder -  
 <paramref name="value" /> ist <see cref="F:System.Double.PositiveInfinity" />.  
  
- oder -  
 <paramref name="value" /> ist <see cref="F:System.Double.NegativeInfinity" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> ist gleich <see cref="F:System.Double.NaN" />.</exception>
        <altmember cref="T:System.Double" />
        <altmember cref="M:System.TimeSpan.FromTicks(System.Int64)" />
        <altmember cref="M:System.TimeSpan.FromMilliseconds(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromMinutes(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromHours(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromDays(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="FromTicks">
      <MemberSignature Language="C#" Value="public static TimeSpan FromTicks (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan FromTicks(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.FromTicks(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromTicks (value As Long) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan FromTicks(long value);" />
      <MemberSignature Language="F#" Value="static member FromTicks : int64 -&gt; TimeSpan" Usage="System.TimeSpan.FromTicks value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">Eine Anzahl von Ticks, die eine Zeitspanne darstellt.</param>
        <summary>Gibt eine <see cref="T:System.TimeSpan" /> zurück, die einen angegebenen Zeitraum darstellt. Die Angabe erfolgt in der Einheit Ticks.</summary>
        <returns>Ein Objekt, das <paramref name="value" /> darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dies ist eine benutzerfreundliche Methode das gleiche Verhalten wie die <xref:System.TimeSpan.%23ctor%28System.Int64%29?displayProperty=nameWithType> Konstruktor. Ein einzelnen Teilstrich stellt 100 Nanosekunden oder ein zehnmillionstel einer Sekunde dar. In einer Millisekunde sind 10.000 Teilstriche.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt mehrere <xref:System.TimeSpan> -Objekte mithilfe der <xref:System.TimeSpan.FromTicks%2A> Methode.  
  
 [!code-cpp[System.TimeSpan.From#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.From/CPP/fromticks.cpp#1)]
 [!code-csharp[System.TimeSpan.From#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.From/CS/fromticks.cs#1)]
 [!code-vb[System.TimeSpan.From#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.From/VB/fromticks.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int64" />
        <altmember cref="M:System.TimeSpan.FromMilliseconds(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromSeconds(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromMinutes(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromHours(System.Double)" />
        <altmember cref="M:System.TimeSpan.FromDays(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="timeSpan.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt einen Hashcode für diese Instanz zurück.</summary>
        <returns>Ein 32-Bit-Hashcode als ganze Zahl mit Vorzeichen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwei <xref:System.TimeSpan> Objekte möglicherweise denselben Hashcode haben, auch wenn sie unterschiedliche Zeitwerte darstellen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird der Hashcodes von mehreren <xref:System.TimeSpan> -Objekte mithilfe der <xref:System.TimeSpan.GetHashCode%2A> Methode.  
  
 [!code-cpp[System.TimeSpan.GetHashCode#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.GetHashCode/CPP/hashcode.cpp#1)]
 [!code-csharp[System.TimeSpan.GetHashCode#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.GetHashCode/CS/hashcode.cs#1)]
 [!code-vb[System.TimeSpan.GetHashCode#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.GetHashCode/VB/hashcode.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Hours">
      <MemberSignature Language="C#" Value="public int Hours { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Hours" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.Hours" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hours As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Hours { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Hours : int" Usage="System.TimeSpan.Hours" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Stundenkomponente des Zeitintervalls ab, das durch die aktuelle <see cref="T:System.TimeSpan" />-Struktur dargestellt wird.</summary>
        <value>Die Komponente für Stunden der aktuellen <see cref="T:System.TimeSpan" />-Struktur. Der Rückgabewert liegt im Bereich von -23 bis 23.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.TimeSpan> Wert dargestellt werden kann, als [*-*]*d*. *Hh*:*mm*:*ss*. *FF*, wobei die optionalen Minuszeichen (-) ein negatives Zeitintervall, gibt die *d* Komponente wird in Tagen gemessen, *Hh* Stunden in 24-Stunden-Format, gemessen *mm* Minuten, *ss* Sekunden und *ff* Bruchteile einer Sekunde. Der Wert des der <xref:System.TimeSpan.Hours%2A> -Eigenschaft ist die Komponente für Stunden, *Hh*.  
  
 Die <xref:System.TimeSpan.Hours%2A> Eigenschaft ganzen Stunden darstellt, während die <xref:System.TimeSpan.TotalHours%2A> Eigenschaft darstellt, ganze Tagen und Bruchteile von Stunden.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt mehrere <xref:System.TimeSpan> -Objekte und zeigt die <xref:System.TimeSpan.Hours%2A> Eigenschaft der einzelnen.  
  
 [!code-cpp[System.TimeSpan.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.TimeSpan.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CS/properties.cs#1)]
 [!code-vb[System.TimeSpan.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeSpan.TotalHours" />
        <altmember cref="P:System.TimeSpan.Ticks" />
        <altmember cref="P:System.TimeSpan.Milliseconds" />
        <altmember cref="P:System.TimeSpan.Seconds" />
        <altmember cref="P:System.TimeSpan.Minutes" />
        <altmember cref="P:System.TimeSpan.Days" />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public static readonly TimeSpan MaxValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.TimeSpan MaxValue" />
      <MemberSignature Language="DocId" Value="F:System.TimeSpan.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxValue As TimeSpan " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly TimeSpan MaxValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MaxValue : TimeSpan" Usage="System.TimeSpan.MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Stellt den maximalen <see cref="T:System.TimeSpan" />-Wert dar. Dieses Feld ist schreibgeschützt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert dieses Felds entspricht <xref:System.Int64.MaxValue?displayProperty=nameWithType> Ticks. Die Zeichenfolgendarstellung dieser Wert ist positiv 10675199.02:48:05.4775807 oder etwas mehr als 10,675,199 Tage.  
  
   
  
## Examples  
 Im folgenden Beispiel verweist auf und zeigt den Wert der <xref:System.TimeSpan.MaxValue> Feld.  
  
 [!code-cpp[System.TimeSpan.Fields#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CPP/fields.cpp#1)]
 [!code-csharp[System.TimeSpan.Fields#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CS/fields.cs#1)]
 [!code-vb[System.TimeSpan.Fields#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Fields/VB/fields.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int64" />
        <altmember cref="F:System.TimeSpan.MinValue" />
      </Docs>
    </Member>
    <Member MemberName="Milliseconds">
      <MemberSignature Language="C#" Value="public int Milliseconds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Milliseconds" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.Milliseconds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Milliseconds As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Milliseconds { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Milliseconds : int" Usage="System.TimeSpan.Milliseconds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Millisekundenkomponente des Zeitintervalls ab, das durch die aktuelle <see cref="T:System.TimeSpan" />-Struktur dargestellt wird.</summary>
        <value>Die Komponente für Millisekunden der aktuellen <see cref="T:System.TimeSpan" />-Struktur. Der Rückgabewert liegt im Bereich von -999 bis 999.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.TimeSpan> Wert dargestellt werden kann, als [*-*]*d*. *Hh*:*mm*:*ss*. *FF*, wobei die optionalen Minuszeichen (-) ein negatives Zeitintervall, gibt die *d* Komponente wird in Tagen gemessen, *Hh* Stunden in 24-Stunden-Format, gemessen *mm* Minuten, *ss* Sekunden und *ff* Bruchteile einer Sekunde. Der Wert des der <xref:System.TimeSpan.Milliseconds%2A> -Eigenschaft ist die Komponente für Sekundenbruchteile, *ff*.  
  
 Die <xref:System.TimeSpan.Milliseconds%2A> Eigenschaft ganze Millisekunden darstellt, während die <xref:System.TimeSpan.TotalMilliseconds%2A> Eigenschaft darstellt, ganze Tagen und Bruchteile von Millisekunden.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt mehrere <xref:System.TimeSpan> -Objekte und zeigt die <xref:System.TimeSpan.Milliseconds%2A> Eigenschaft der einzelnen.  
  
 [!code-cpp[System.TimeSpan.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.TimeSpan.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CS/properties.cs#1)]
 [!code-vb[System.TimeSpan.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeSpan.TotalMilliseconds" />
        <altmember cref="P:System.TimeSpan.Ticks" />
        <altmember cref="P:System.TimeSpan.Seconds" />
        <altmember cref="P:System.TimeSpan.Minutes" />
        <altmember cref="P:System.TimeSpan.Hours" />
        <altmember cref="P:System.TimeSpan.Days" />
      </Docs>
    </Member>
    <Member MemberName="Minutes">
      <MemberSignature Language="C#" Value="public int Minutes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Minutes" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.Minutes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Minutes As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Minutes { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Minutes : int" Usage="System.TimeSpan.Minutes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Minutenkomponente des Zeitintervalls ab, das durch die aktuelle <see cref="T:System.TimeSpan" />-Struktur dargestellt wird.</summary>
        <value>Die Komponente für Minuten der aktuellen <see cref="T:System.TimeSpan" />-Struktur. Der Rückgabewert liegt im Bereich von -59 bis 59.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.TimeSpan> Wert dargestellt werden kann, als [*-*]*d*. *Hh*:*mm*:*ss*. *FF*, wobei die optionalen Minuszeichen (-) ein negatives Zeitintervall, gibt die *d* Komponente wird in Tagen gemessen, *Hh* Stunden in 24-Stunden-Format, gemessen *mm* Minuten, *ss* Sekunden und *ff* Bruchteile einer Sekunde. Der Wert des der <xref:System.TimeSpan.Minutes%2A> -Eigenschaft ist die Komponente für Minuten, *mm*.  
  
 Die <xref:System.TimeSpan.Minutes%2A> -Eigenschaft stellt ganze Minuten dar, während die <xref:System.TimeSpan.TotalMinutes%2A> Eigenschaft darstellt, ganze Tagen und Bruchteile von Minuten.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt mehrere <xref:System.TimeSpan> -Objekte und zeigt die <xref:System.TimeSpan.Minutes%2A> Eigenschaft der einzelnen.  
  
 [!code-cpp[System.TimeSpan.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.TimeSpan.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CS/properties.cs#1)]
 [!code-vb[System.TimeSpan.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeSpan.TotalMinutes" />
        <altmember cref="P:System.TimeSpan.Ticks" />
        <altmember cref="P:System.TimeSpan.Milliseconds" />
        <altmember cref="P:System.TimeSpan.Seconds" />
        <altmember cref="P:System.TimeSpan.Hours" />
        <altmember cref="P:System.TimeSpan.Days" />
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public static readonly TimeSpan MinValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.TimeSpan MinValue" />
      <MemberSignature Language="DocId" Value="F:System.TimeSpan.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinValue As TimeSpan " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly TimeSpan MinValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MinValue : TimeSpan" Usage="System.TimeSpan.MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Stellt den minimalen <see cref="T:System.TimeSpan" />-Wert dar. Dieses Feld ist schreibgeschützt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert dieses Felds entspricht <xref:System.Int64.MinValue?displayProperty=nameWithType> Ticks. Die Zeichenfolgendarstellung dieser Wert ist negativ 10675199.02:48:05.4775808 oder etwas mehr als negative 10,675,199 Tage.  
  
   
  
## Examples  
 Im folgenden Beispiel verweist auf und zeigt den Wert der <xref:System.TimeSpan.MinValue> Feld.  
  
 [!code-cpp[System.TimeSpan.Fields#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CPP/fields.cpp#1)]
 [!code-csharp[System.TimeSpan.Fields#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CS/fields.cs#1)]
 [!code-vb[System.TimeSpan.Fields#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Fields/VB/fields.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int64" />
        <altmember cref="F:System.TimeSpan.MaxValue" />
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public TimeSpan Multiply (double factor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Multiply(float64 factor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Multiply(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Multiply (factor As Double) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan Multiply(double factor);" />
      <MemberSignature Language="F#" Value="member this.Multiply : double -&gt; TimeSpan" Usage="timeSpan.Multiply factor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="factor" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="factor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Negate">
      <MemberSignature Language="C#" Value="public TimeSpan Negate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Negate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Negate" />
      <MemberSignature Language="VB.NET" Value="Public Function Negate () As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan Negate();" />
      <MemberSignature Language="F#" Value="member this.Negate : unit -&gt; TimeSpan" Usage="timeSpan.Negate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt ein neues <see cref="T:System.TimeSpan" />-Objekt zurück, dessen Wert der negierte Wert dieser Instanz ist.</summary>
        <returns>Ein neues Objekt mit demselben numerischen Wert wie diese Instanz, jedoch mit umgekehrtem Vorzeichen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.TimeSpan.Negate%2A> Methode, um mehrere <xref:System.TimeSpan> Objekte.  
  
 [!code-cpp[System.TimeSpan.Dura_Nega_Unary#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/CPP/dura_nega_una.cpp#1)]
 [!code-csharp[System.TimeSpan.Dura_Nega_Unary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/CS/dura_nega_una.cs#1)]
 [!code-vb[System.TimeSpan.Dura_Nega_Unary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/VB/dura_nega_una.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">Der negierte Wert dieser Instanz kann nicht durch eine <see cref="T:System.TimeSpan" /> dargestellt werden. Das heißt, dass der Wert dieser Instanz <see cref="F:System.TimeSpan.MinValue" /> ist.</exception>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static TimeSpan operator + (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Addition(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_Addition(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (t1 As TimeSpan, t2 As TimeSpan) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator +(TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="F#" Value="static member ( + ) : TimeSpan * TimeSpan -&gt; TimeSpan" Usage="t1 + t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">Das erste hinzuzufügende Zeitintervall.</param>
        <param name="t2">Das zweite hinzuzufügende Zeitintervall.</param>
        <summary>Addiert zwei angegebene <see cref="T:System.TimeSpan" />-Instanzen.</summary>
        <returns>Ein Objekt, dessen Wert die Summe der Werte von <paramref name="t1" /> und <paramref name="t2" /> ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.TimeSpan.op_Addition%2A> Methode definiert den Addition-Operator für <xref:System.TimeSpan> Werte. Sie können Code wie den folgenden:  
  
 [!code-csharp[System.TimeSpan.Operators#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.operators/cs/operators1.cs#1)]
 [!code-vb[System.TimeSpan.Operators#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.operators/vb/operators1.vb#1)]  
  
 Sprachen, die keine benutzerdefinierte Operatoren unterstützen können aufrufen, die <xref:System.TimeSpan.Add%2A> Methode stattdessen.  
  
 Die entsprechende Methode für diesen Operator ist <xref:System.TimeSpan.Add%28System.TimeSpan%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">Der resultierende <see cref="T:System.TimeSpan" />-Wert ist kleiner als <see cref="F:System.TimeSpan.MinValue" /> oder größer als <see cref="F:System.TimeSpan.MaxValue" />.</exception>
        <altmember cref="M:System.TimeSpan.Add(System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="op_Division">
      <MemberSignature Language="C#" Value="public static TimeSpan operator / (TimeSpan timeSpan, double divisor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Division(valuetype System.TimeSpan timeSpan, float64 divisor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_Division(System.TimeSpan,System.Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator /(TimeSpan timeSpan, double divisor);" />
      <MemberSignature Language="F#" Value="static member ( / ) : TimeSpan * double -&gt; TimeSpan" Usage="timeSpan / divisor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeSpan" Type="System.TimeSpan" />
        <Parameter Name="divisor" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="timeSpan">To be added.</param>
        <param name="divisor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Division">
      <MemberSignature Language="C#" Value="public static double operator / (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname float64 op_Division(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_Division(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator / (t1 As TimeSpan, t2 As TimeSpan) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double operator /(TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="F#" Value="static member ( / ) : TimeSpan * TimeSpan -&gt; double" Usage="t1 / t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">To be added.</param>
        <param name="t2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_Equality(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (t1 As TimeSpan, t2 As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : TimeSpan * TimeSpan -&gt; bool" Usage="t1 = t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">Das erste zu vergleichende Zeitintervall.</param>
        <param name="t2">Das zweite zu vergleichende Zeitintervall.</param>
        <summary>Gibt an, ob zwei <see cref="T:System.TimeSpan" />-Instanzen gleich sind.</summary>
        <returns>
          <see langword="true" />, wenn die Werte von <paramref name="t1" /> und <paramref name="t2" /> gleich sind, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[Die entsprechende Methode für diesen Operator ist <xref:System.TimeSpan.Equals%28System.Object%29?displayProperty=nameWithType>  
  
## Examples  
 Im folgenden Beispiel werden mehrere <xref:System.TimeSpan> Objekte mit einem <xref:System.TimeSpan> mithilfe der <xref:System.TimeSpan.op_Equality%2A> Operator.  
  
 [!code-cpp[System.TimeSpan.RelationalOps#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CPP/relationalops.cpp#1)]
 [!code-csharp[System.TimeSpan.RelationalOps#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CS/relationalops.cs#1)]
 [!code-vb[System.TimeSpan.RelationalOps#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/VB/relationalops.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeSpan.Equals(System.Object)" />
        <altmember cref="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)" />
        <altmember cref="M:System.TimeSpan.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_GreaterThan(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (t1 As TimeSpan, t2 As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : TimeSpan * TimeSpan -&gt; bool" Usage="t1 &gt; t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">Das erste zu vergleichende Zeitintervall.</param>
        <param name="t2">Das zweite zu vergleichende Zeitintervall.</param>
        <summary>Gibt an, ob eine angegebene <see cref="T:System.TimeSpan" /> größer als eine andere angegebene <see cref="T:System.TimeSpan" /> ist.</summary>
        <returns>
          <see langword="true" />, wenn der Wert von <paramref name="t1" /> größer als der Wert von <paramref name="t2" /> ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[Die entsprechende Methode für diesen Operator ist <xref:System.TimeSpan.Compare%28System.TimeSpan%2CSystem.TimeSpan%29?displayProperty=nameWithType>  
  
## Examples  
 Im folgenden Beispiel werden mehrere <xref:System.TimeSpan> Objekte mit einem <xref:System.TimeSpan> mithilfe der <xref:System.TimeSpan.op_GreaterThan%2A> Operator.  
  
 [!code-cpp[System.TimeSpan.RelationalOps#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CPP/relationalops.cpp#1)]
 [!code-csharp[System.TimeSpan.RelationalOps#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CS/relationalops.cs#1)]
 [!code-vb[System.TimeSpan.RelationalOps#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/VB/relationalops.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)" />
        <altmember cref="M:System.TimeSpan.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_GreaterThanOrEqual(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (t1 As TimeSpan, t2 As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : TimeSpan * TimeSpan -&gt; bool" Usage="t1 &gt;= t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">Das erste zu vergleichende Zeitintervall.</param>
        <param name="t2">Das zweite zu vergleichende Zeitintervall.</param>
        <summary>Gibt an, ob eine angegebene <see cref="T:System.TimeSpan" /> größer oder gleich einer anderen angegebenen <see cref="T:System.TimeSpan" /> ist.</summary>
        <returns>
          <see langword="true" />, wenn der Wert von <paramref name="t1" /> größer oder gleich dem Wert von <paramref name="t2" /> ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[Die entsprechende Methode für diesen Operator ist <xref:System.TimeSpan.Compare%28System.TimeSpan%2CSystem.TimeSpan%29?displayProperty=nameWithType>  
  
## Examples  
 Im folgenden Beispiel werden mehrere <xref:System.TimeSpan> Objekte mit einem <xref:System.TimeSpan> mithilfe der <xref:System.TimeSpan.op_GreaterThanOrEqual%2A> Operator.  
  
 [!code-cpp[System.TimeSpan.RelationalOps#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CPP/relationalops.cpp#1)]
 [!code-csharp[System.TimeSpan.RelationalOps#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CS/relationalops.cs#1)]
 [!code-vb[System.TimeSpan.RelationalOps#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/VB/relationalops.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)" />
        <altmember cref="M:System.TimeSpan.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_Inequality(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (t1 As TimeSpan, t2 As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : TimeSpan * TimeSpan -&gt; bool" Usage="System.TimeSpan.op_Inequality (t1, t2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">Das erste zu vergleichende Zeitintervall.</param>
        <param name="t2">Das zweite zu vergleichende Zeitintervall.</param>
        <summary>Gibt an, ob zwei <see cref="T:System.TimeSpan" />-Instanzen ungleich sind.</summary>
        <returns>
          <see langword="true" />, wenn die Werte von <paramref name="t1" /> und <paramref name="t2" /> ungleich sind, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[Die entsprechende Methode für diesen Operator ist <xref:System.TimeSpan.Compare%28System.TimeSpan%2CSystem.TimeSpan%29?displayProperty=nameWithType>  
  
## Examples  
 Im folgenden Beispiel werden mehrere <xref:System.TimeSpan> Objekte mit einem <xref:System.TimeSpan> mithilfe der <xref:System.TimeSpan.op_Inequality%2A> Operator.  
  
 [!code-cpp[System.TimeSpan.RelationalOps#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CPP/relationalops.cpp#1)]
 [!code-csharp[System.TimeSpan.RelationalOps#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CS/relationalops.cs#1)]
 [!code-vb[System.TimeSpan.RelationalOps#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/VB/relationalops.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)" />
        <altmember cref="M:System.TimeSpan.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_LessThan(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (t1 As TimeSpan, t2 As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : TimeSpan * TimeSpan -&gt; bool" Usage="t1 &lt; t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">Das erste zu vergleichende Zeitintervall.</param>
        <param name="t2">Das zweite zu vergleichende Zeitintervall.</param>
        <summary>Gibt an, ob eine angegebene <see cref="T:System.TimeSpan" /> kleiner als eine andere angegebene <see cref="T:System.TimeSpan" /> ist.</summary>
        <returns>
          <see langword="true" />, wenn der Wert von <paramref name="t1" /> kleiner als der Wert von <paramref name="t2" /> ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[Die entsprechende Methode für diesen Operator ist <xref:System.TimeSpan.Compare%28System.TimeSpan%2CSystem.TimeSpan%29?displayProperty=nameWithType>  
  
## Examples  
 Im folgenden Beispiel werden mehrere <xref:System.TimeSpan> Objekte mit einem <xref:System.TimeSpan> mithilfe der <xref:System.TimeSpan.op_LessThan%2A> Operator.  
  
 [!code-cpp[System.TimeSpan.RelationalOps#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CPP/relationalops.cpp#1)]
 [!code-csharp[System.TimeSpan.RelationalOps#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CS/relationalops.cs#1)]
 [!code-vb[System.TimeSpan.RelationalOps#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/VB/relationalops.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)" />
        <altmember cref="M:System.TimeSpan.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_LessThanOrEqual(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (t1 As TimeSpan, t2 As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : TimeSpan * TimeSpan -&gt; bool" Usage="t1 &lt;= t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">Das erste zu vergleichende Zeitintervall.</param>
        <param name="t2">Das zweite zu vergleichende Zeitintervall.</param>
        <summary>Gibt an, ob eine angegebene <see cref="T:System.TimeSpan" /> kleiner oder gleich einer anderen angegebenen <see cref="T:System.TimeSpan" /> ist.</summary>
        <returns>
          <see langword="true" />, wenn der Wert von <paramref name="t1" /> kleiner oder gleich dem Wert von <paramref name="t2" /> ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[Die entsprechende Methode für diesen Operator ist <xref:System.TimeSpan.Compare%28System.TimeSpan%2CSystem.TimeSpan%29?displayProperty=nameWithType>  
  
## Examples  
 Im folgenden Beispiel werden mehrere <xref:System.TimeSpan> Objekte mit einem <xref:System.TimeSpan> mithilfe der <xref:System.TimeSpan.op_LessThanOrEqual%2A> Operator.  
  
 [!code-cpp[System.TimeSpan.RelationalOps#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CPP/relationalops.cpp#1)]
 [!code-csharp[System.TimeSpan.RelationalOps#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CS/relationalops.cs#1)]
 [!code-vb[System.TimeSpan.RelationalOps#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/VB/relationalops.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)" />
        <altmember cref="M:System.TimeSpan.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static TimeSpan operator * (double factor, TimeSpan timeSpan);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Multiply(float64 factor, valuetype System.TimeSpan timeSpan) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_Multiply(System.Double,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator *(double factor, TimeSpan timeSpan);" />
      <MemberSignature Language="F#" Value="static member ( * ) : double * TimeSpan -&gt; TimeSpan" Usage="factor * timeSpan" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="factor" Type="System.Double" />
        <Parameter Name="timeSpan" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="factor">To be added.</param>
        <param name="timeSpan">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static TimeSpan operator * (TimeSpan timeSpan, double factor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Multiply(valuetype System.TimeSpan timeSpan, float64 factor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_Multiply(System.TimeSpan,System.Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator *(TimeSpan timeSpan, double factor);" />
      <MemberSignature Language="F#" Value="static member ( * ) : TimeSpan * double -&gt; TimeSpan" Usage="timeSpan * factor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeSpan" Type="System.TimeSpan" />
        <Parameter Name="factor" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="timeSpan">To be added.</param>
        <param name="factor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static TimeSpan operator - (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Subtraction(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_Subtraction(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (t1 As TimeSpan, t2 As TimeSpan) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator -(TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="F#" Value="static member ( - ) : TimeSpan * TimeSpan -&gt; TimeSpan" Usage="t1 - t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">Der Minuend.</param>
        <param name="t2">Der Subtrahend.</param>
        <summary>Subtrahiert eine angegebene <see cref="T:System.TimeSpan" /> von einer anderen angegebenen <see cref="T:System.TimeSpan" />.</summary>
        <returns>Ein Objekt, dessen Wert das Ergebnis des Werts von <paramref name="t1" /> minus dem Wert von <paramref name="t2" /> ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[Die entsprechende Methode für diesen Operator ist <xref:System.TimeSpan.Subtract%28System.TimeSpan%29?displayProperty=nameWithType>  
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.TimeSpan> Subtraktionsoperator, um die gesamte Länge der wöchentliche Arbeitszeit zu berechnen. Darüber hinaus verwendet er die <xref:System.TimeSpan> Addition-Operator zum Berechnen der gesamten Zeit der täglichen Seitenumbrüche bevor es in einer Subtraktion verwendet, um die tatsächliche Summe täglich Arbeitszeit zu berechnen.  
  
 [!code-csharp[System.TimeSpan.Operators#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.operators/cs/Subtraction1.cs#2)]
 [!code-vb[System.TimeSpan.Operators#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.operators/vb/Subtraction1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">Der Rückgabewert ist kleiner als <see cref="F:System.TimeSpan.MinValue" /> oder größer als <see cref="F:System.TimeSpan.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="op_UnaryNegation">
      <MemberSignature Language="C#" Value="public static TimeSpan operator - (TimeSpan t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_UnaryNegation(valuetype System.TimeSpan t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_UnaryNegation(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (t As TimeSpan) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator -(TimeSpan t);" />
      <MemberSignature Language="F#" Value="static member ( ~- ) : TimeSpan -&gt; TimeSpan" Usage="- t" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t">Das Zeitintervall, das negiert werden soll.</param>
        <summary>Gibt eine <see cref="T:System.TimeSpan" /> zurück, deren Wert der negierte Wert der angegebenen Instanz ist.</summary>
        <returns>Ein Objekt mit demselben numerischen Wert wie diese Instanz, jedoch mit umgekehrtem Vorzeichen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[Die entsprechende Methode für diesen Operator ist <xref:System.TimeSpan.Negate?displayProperty=nameWithType>  
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.TimeSpan.op_UnaryNegation%2A> Operator, um mehrere <xref:System.TimeSpan> Objekte.  
  
 [!code-cpp[System.TimeSpan.Dura_Nega_Unary#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/CPP/dura_nega_una.cpp#1)]
 [!code-csharp[System.TimeSpan.Dura_Nega_Unary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/CS/dura_nega_una.cs#1)]
 [!code-vb[System.TimeSpan.Dura_Nega_Unary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/VB/dura_nega_una.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">Der negierte Wert dieser Instanz kann nicht durch eine <see cref="T:System.TimeSpan" /> dargestellt werden. Das heißt, dass der Wert dieser Instanz <see cref="F:System.TimeSpan.MinValue" /> ist.</exception>
      </Docs>
    </Member>
    <Member MemberName="op_UnaryPlus">
      <MemberSignature Language="C#" Value="public static TimeSpan operator + (TimeSpan t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_UnaryPlus(valuetype System.TimeSpan t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_UnaryPlus(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (t As TimeSpan) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator +(TimeSpan t);" />
      <MemberSignature Language="F#" Value="static member ( ~+ ) : TimeSpan -&gt; TimeSpan" Usage="+ t" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t">Das Zeitintervall, das zurückgegeben werden soll.</param>
        <summary>Gibt die angegebene Instanz von <see cref="T:System.TimeSpan" /> zurück.</summary>
        <returns>Das von <paramref name="t" /> angegebene Zeitintervall.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.TimeSpan.op_UnaryPlus%2A> Operator, um mehrere <xref:System.TimeSpan> Objekte.  
  
 [!code-cpp[System.TimeSpan.Dura_Nega_Unary#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/CPP/dura_nega_una.cpp#1)]
 [!code-csharp[System.TimeSpan.Dura_Nega_Unary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/CS/dura_nega_una.cs#1)]
 [!code-vb[System.TimeSpan.Dura_Nega_Unary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/VB/dura_nega_una.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konvertiert die Zeichenfolgendarstellung eines Zeitintervalls in die entsprechende <see cref="T:System.TimeSpan" />.</summary>
        <altmember cref="Overload:System.TimeSpan.TryParse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static TimeSpan Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan Parse(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan Parse(System::String ^ s);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; TimeSpan" Usage="System.TimeSpan.Parse s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">Eine Zeichenfolge, die das zu konvertierende Zeitintervall angibt.</param>
        <summary>Konvertiert die Zeichenfolgendarstellung eines Zeitintervalls in die entsprechende <see cref="T:System.TimeSpan" />.</summary>
        <returns>Ein Zeitintervall, das <paramref name="s" /> entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `s` -Parameter enthält eine Uhrzeit-Intervall-Spezifikation in der Form:  
  
 [*ws*] [-] { *d* &#124; [*d*.] *Hh*:*mm*[:*ss*[. *FF*]]} [*ws*]  
  
 Elemente in eckigen Klammern ([ und ]) sind optional. Eine Auswahl aus der Liste der alternativen, die in geschweiften Klammern ({und}) und durch senkrechte Striche getrennt (&#124;) ist erforderlich. In der folgenden Tabelle wird jedes Element beschrieben.  
  
|Element|Beschreibung |  
|-------------|-----------------|  
|*ws*|Optionalen Leerzeichen.|  
|-|Ein optionales Minuszeichen, womit eine Negative <xref:System.TimeSpan>.|  
|*d*|Tage, im Bereich von 0 10.675.199 sein.|  
|sein.|Ein kulturabhängige-Symbol, die Tage von Stunden trennt. Invariante Format verwendet, einen Punkt (".") Zeichen.|  
|*hh*|Stunden, zwischen 0 und 23.|  
|:|Das Trennzeichen für kulturabhängige Zeit. Das unveränderliche Format verwendet, einen Doppelpunkt (":") Zeichen.|  
|*mm*|Minuten, im Bereich von 0 bis 59.|  
|*ss*|Sekunden, optional im Bereich von 0 bis 59.|  
|*.*|Eine kulturabhängige-Symbol, das Sekunden von Sekundenbruchteilen getrennt werden. Invariante Format verwendet, einen Punkt (".") Zeichen.|  
|*ff*|Optionale Bruchteile von Sekunden, bestehend aus 1 bis 7 Dezimalstellen.|  

Wenn die `s` Argument ist kein Tageswert, es muss ein Stunden und eine Minutenkomponente enthalten, andere Komponenten sind optional. Wenn sie vorhanden sind, müssen die Werte der einzelnen Komponenten der Zeit innerhalb eines bestimmten Bereichs liegen. Z. B. den Wert der *Hh*, die Komponente für Stunden, muss zwischen 0 und 23 liegen. Aufgrund dieser, übergeben "23: 00:00" auf die <xref:System.TimeSpan.Parse%2A> Methode gibt ein Zeitintervall von 23 Stunden zurück. Auf der anderen Seite übergeben "24: 00:00" gibt ein Zeitintervall von 24 Tage. Da "24" außerhalb des Bereichs, der die Komponente für Stunden festgelegt ist, wird er als die Tageskomponente interpretiert.

 Die Komponenten der `s` müssen zusammen angeben ein bestimmten Zeitintervalls, die größer als oder gleich ist <xref:System.TimeSpan.MinValue?displayProperty=nameWithType> und kleiner als oder gleich <xref:System.TimeSpan.MaxValue?displayProperty=nameWithType>.  
  
 Die <xref:System.TimeSpan.Parse%28System.String%29> Methode versucht, Analysieren `s` mit den einzelnen der kulturspezifische Formate für die aktuelle Kultur.  

## <a name="notes-to-callers"></a>Hinweise für Aufrufer  
   
Wenn Sie eine Zeit in der Zeichenfolge analysiert werden mehr als sieben Ziffern enthält, Analysevorgänge in der .NET Framework 3.5 und früheren Versionen Analysevorgänge in der .NET Framework 4 und höher verhält sich möglicherweise anders. In einigen Fällen Analyse der Vorgänge, die in der .NET Framework 3.5 und früheren Versionen erfolgreich ausgeführt werden unter Umständen fehl und löst eine <see cref="T:System.OverflowException" /> in .NET Framework 4 und höher. In anderen Fällen Analysevorgängen, die Auslösen einer <see cref="T:System.FormatException" /> in .NET Framework 3.5 und früheren Versionen fehl und löst möglicherweise eine <see cref="T:System.OverflowException" /> in .NET Framework 4 und höher. Das folgende Beispiel veranschaulicht beide Szenarien.  
  
[!code-csharp[System.TimeSpan.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.parse/cs/parsefailure1.cs#3)]
[!code-vb[System.TimeSpan.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.parse/vb/parsefailure1.vb#3)]
 
## Examples  
 Im folgenden Beispiel wird die <xref:System.TimeSpan.Parse%2A> Methode, um jedes Element in ein Zeichenfolgenarray, das Konvertieren einer <xref:System.TimeSpan> Wert. Es ändert die aktuelle Systemkultur Kroatisch - Kroatien ("hr-HR") und Englisch - USA ("En-US") veranschaulicht, wie die aktuelle Systemkultur den Analysevorgang auswirkt.  
  
 [!code-csharp[System.TimeSpan.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.parse/cs/parse1.cs#1)]
 [!code-vb[System.TimeSpan.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.parse/vb/parse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> weist ein ungültiges Format auf.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> stellt eine Zahl dar, die kleiner als <see cref="F:System.TimeSpan.MinValue" /> oder größer als <see cref="F:System.TimeSpan.MaxValue" /> ist.  
  
- oder -  
Mindestens eine der Tages-, Stunden-, Minuten- oder Sekundenkomponenten liegt außerhalb des gültigen Bereichs.</exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static TimeSpan Parse (ReadOnlySpan&lt;char&gt; input, IFormatProvider formatProvider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; input, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As ReadOnlySpan(Of Char), Optional formatProvider As IFormatProvider = null) As TimeSpan" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; TimeSpan" Usage="System.TimeSpan.Parse (input, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static TimeSpan Parse (string input, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan Parse(string input, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As String, formatProvider As IFormatProvider) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan Parse(System::String ^ input, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider -&gt; TimeSpan" Usage="System.TimeSpan.Parse (input, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="input">Eine Zeichenfolge, die das zu konvertierende Zeitintervall angibt.</param>
        <param name="formatProvider">Ein Objekt, das kulturspezifische Formatierungsinformationen bereitstellt.</param>
        <summary>Konvertiert die Zeichenfolgendarstellung eines Zeitintervalls unter Verwendung der angegebenen kulturspezifischen Formatierungsinformationen in die entsprechende <see cref="T:System.TimeSpan" />.</summary>
        <returns>Ein Zeitintervall, das <paramref name="input" /> entspricht, wie von <paramref name="formatProvider" /> angegeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `input` -Parameter enthält eine Uhrzeit-Intervall-Spezifikation in der Form:  
  
 [*ws*] [-] { *d* &#124; [*d*.] *Hh*:*mm*[:*ss*[. *FF*]]} [*ws*]  
  
 Elemente in eckigen Klammern ([und]) sind optional. eine Auswahl aus der Liste der alternativen, die in geschweiften Klammern ({und}) und durch senkrechte Striche getrennt (&#124;) ist erforderlich. In der folgenden Tabelle wird jedes Element beschrieben.  
  
|Element|Beschreibung |  
|-------------|-----------------|  
|*ws*|Optionalen Leerzeichen.|  
|-|Ein optionales Minuszeichen, womit eine Negative <xref:System.TimeSpan>.|  
|*d*|Tage, im Bereich von 0 10.675.199 sein.|  
|sein.|Ein kulturabhängige-Symbol, die Tage von Stunden trennt. Der Standardwert ist ein Punkt (".") Zeichen.|  
|*hh*|Stunden, zwischen 0 und 23.|  
|:|Das Trennzeichen für kulturabhängige Zeit.|  
|*mm*|Minuten, im Bereich von 0 bis 59.|  
|*ss*|Sekunden, optional im Bereich von 0 bis 59.|  
|sein.|Eine kulturabhängige-Symbol, das Sekunden von Sekundenbruchteilen getrennt werden. Der Standardwert ist ein Punkt (".") Zeichen.|  
|*ff*|Optionale Bruchteile von Sekunden, bestehend aus 1 bis 7 Dezimalstellen.|  

Wenn die `input` Argument ist kein Tageswert, es muss ein Stunden und eine Minutenkomponente enthalten, andere Komponenten sind optional. Wenn sie vorhanden sind, müssen die Werte der einzelnen Komponenten der Zeit innerhalb eines bestimmten Bereichs liegen. Z. B. den Wert der *Hh*, die Komponente für Stunden, muss zwischen 0 und 23 liegen. Aufgrund dieser, übergeben "23: 00:00" auf die <xref:System.TimeSpan.Parse%2A> Methode gibt ein Zeitintervall von 23 Stunden zurück. Auf der anderen Seite übergeben "24: 00:00" gibt ein Zeitintervall von 24 Tage. Da "24" außerhalb des Bereichs, der die Komponente für Stunden festgelegt ist, wird er als die Tageskomponente interpretiert.

 Die Komponenten der `input` müssen zusammen angeben ein bestimmten Zeitintervalls, die größer als oder gleich ist <xref:System.TimeSpan.MinValue?displayProperty=nameWithType> und kleiner als oder gleich <xref:System.TimeSpan.MaxValue?displayProperty=nameWithType>.  
  
 Die <xref:System.TimeSpan.Parse%28System.String%29> Methode versucht, Analysieren `input` mit den einzelnen der kulturspezifische Formate für die Kultur, die anhand des `formatProvider`.  
  
 Die `formatProvider` -Parameter ist ein <xref:System.IFormatProvider> Implementierung, die kulturspezifische Informationen zum Format der zurückgegebenen Zeichenfolge bereitstellt. Die `formatProvider` Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo> -Objekt, das die Kultur, deren Formatierungskonventionen darstellt sollen in die zurückgegebene Zeichenfolge übernommen. Die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> Eigenschaft definiert die Formatierung der zurückgegebenen Zeichenfolge.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo> Objekt, das definiert, die Formatierung der zurückgegebenen Zeichenfolge.  
  
-   Ein benutzerdefiniertes Objekt, das implementiert die <xref:System.IFormatProvider> Schnittstelle. Die <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> Methode gibt eine <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das Formatierungsinformationen bereitstellt.  
  
 Wenn `formatProvider` ist `null`, <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das der aktuellen Kultur zugeordnet ist, wird verwendet.  
  
## <a name="notes-to-callers"></a>Hinweise für Aufrufer  
   
Wenn Sie eine Zeit in der Zeichenfolge analysiert werden mehr als sieben Ziffern enthält, Analysevorgänge in der .NET Framework 3.5 und früheren Versionen Analysevorgänge in der .NET Framework 4 und höher verhält sich möglicherweise anders. In einigen Fällen Analyse der Vorgänge, die in der .NET Framework 3.5 und früheren Versionen erfolgreich ausgeführt werden unter Umständen fehl und löst eine <see cref="T:System.OverflowException" /> in .NET Framework 4 und höher. In anderen Fällen Analysevorgängen, die Auslösen einer <see cref="T:System.FormatException" /> in .NET Framework 3.5 und früheren Versionen fehl und löst möglicherweise eine <see cref="T:System.OverflowException" /> in .NET Framework 4 und höher. Das folgende Beispiel veranschaulicht beide Szenarien.  
   
[!code-csharp[System.TimeSpan.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.parse/cs/parsefailure1.cs#3)]
[!code-vb[System.TimeSpan.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.parse/vb/parsefailure1.vb#3)]

## Examples  
 Das folgende Beispiel definiert ein Array von <xref:System.Globalization.CultureInfo> -Objekte und verwendet Sie jedes Objekt in Aufrufe an die <xref:System.TimeSpan.Parse%28System.String%2CSystem.IFormatProvider%29> Methode, um die Elemente in einem Zeichenfolgenarray zu analysieren. Im Beispiel wird veranschaulicht, wie die Konventionen einer bestimmten Kultur den Formatierungsvorgang beeinflussen.  
  
 [!code-csharp[System.TimeSpan.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.parse/cs/parse2.cs#2)]
 [!code-vb[System.TimeSpan.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.parse/vb/parse2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> weist ein ungültiges Format auf.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="input" /> stellt eine Zahl dar, die kleiner als <see cref="F:System.TimeSpan.MinValue" /> oder größer als <see cref="F:System.TimeSpan.MaxValue" /> ist.  
  
- oder -  
Mindestens eine der Tages-, Stunden-, Minuten- oder Sekundenkomponenten in <paramref name="input" /> liegt außerhalb des gültigen Bereichs.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konvertiert die Zeichenfolgendarstellung eines Zeitintervalls in die entsprechende <see cref="T:System.TimeSpan" />. Das Format der Zeichenfolgendarstellung muss einem angegebenen Format genau entsprechen.</summary>
        <altmember cref="Overload:System.TimeSpan.TryParseExact" />
      </Docs>
    </MemberGroup>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static TimeSpan ParseExact (string input, string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan ParseExact(string input, string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.ParseExact(System.String,System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, format As String, formatProvider As IFormatProvider) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan ParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider -&gt; TimeSpan" Usage="System.TimeSpan.ParseExact (input, format, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="input">Eine Zeichenfolge, die das zu konvertierende Zeitintervall angibt.</param>
        <param name="format">Eine standardmäßige oder benutzerdefinierte Formatierungszeichenfolge, die das erforderliche Format von <c>input</c> definiert.</param>
        <param name="formatProvider">Ein Objekt, das kulturspezifische Formatierungsinformationen bereitstellt.</param>
        <summary>Konvertiert die Zeichenfolgendarstellung eines Zeitintervalls unter Verwendung des angegebenen Formats und der kulturspezifischen Formatierungsinformationen in die entsprechende <see cref="T:System.TimeSpan" />. Das Format der Zeichenfolgendarstellung muss dem angegebenen Format genau entsprechen.</summary>
        <returns>Ein Zeitintervall, das <paramref name="input" /> entspricht, wie von <paramref name="format" /> und <paramref name="formatProvider" /> angegeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29> -Methode analysiert die angegebene Zeichenfolgendarstellung eines Zeitintervalls, der das Format von definiert sein muss die `format` Parameter, mit dem Unterschied, führende und nachfolgende Leerzeichen ignoriert werden. Da `input` muss das Format der entsprechen `format` genau, Sie sollten immer verwenden Behandlung von Ausnahmen beim Konvertieren von Zeichenfolge als Eingabe vom Benutzer in einem Zeitintervall. Wenn Sie keine Ausnahmebehandlung verwenden möchten, können Sie Aufrufen der <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.TimeSpan%40%29> Methode stattdessen.  
  
 Die `format` Parameter ist eine Zeichenfolge, enthält entweder einen einzelnen standardbuild-Formatbezeichner oder ein oder mehrere benutzerdefinierte Formatbezeichner, die definieren, das erforderliche Format von `input`. Weitere Informationen zu gültigen Formatzeichenfolgen finden Sie unter [TimeSpan-Standardformatzeichenfolgen](~/docs/standard/base-types/standard-timespan-format-strings.md) und [benutzerdefinierte TimeSpan-Formatzeichenfolgen](~/docs/standard/base-types/custom-timespan-format-strings.md).  
  
> [!IMPORTANT]
>  Die <xref:System.TimeSpan.ParseExact%2A> Methode verwendet die Konventionen der Kultur angegeben werden, indem die `formatProvider` Parameter nur, wenn `format` ist ein Standard <xref:System.TimeSpan> Formatzeichenfolge, deren Wert "g" oder "G ist". Verwenden die Formatierungskonventionen der invarianten Kultur, das "c", "t" und "T" standard verwendete Formatzeichenfolgen. Benutzerdefinierte Formatzeichenfolgen, definieren Sie das genaue Format der Eingabezeichenfolge und Literalzeichen verwenden, um die Komponenten eines bestimmten Zeitintervalls zu trennen.  
  
 Die `formatProvider` -Parameter ist ein <xref:System.IFormatProvider> Implementierung, die kulturspezifische Informationen zum Format der zurückgegebenen Zeichenfolge bereitstellt, wenn `format` ist eine Standardformatzeichenfolge. Die `formatProvider` Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo> -Objekt, das die Kultur, deren Formatierungskonventionen darstellt sollen in die zurückgegebene Zeichenfolge übernommen. Die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> Eigenschaft definiert die Formatierung der zurückgegebenen Zeichenfolge.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo> Objekt, das definiert, die Formatierung der zurückgegebenen Zeichenfolge.  
  
-   Ein benutzerdefiniertes Objekt, das implementiert die <xref:System.IFormatProvider> Schnittstelle. Die <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> Methode gibt eine <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das Formatierungsinformationen bereitstellt.  
  
 Wenn `formatProvider` ist `null`, <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das der aktuellen Kultur zugeordnet ist, wird verwendet.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29> Methode, um mehrere zeichenfolgenentsprechungen von Zeitintervallen mit verschiedenen Formatzeichenfolgen und Kulturen zu analysieren.  
  
 [!code-csharp[System.TimeSpan.ParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.parseexact/cs/parseexactexample1.cs#1)]
 [!code-vb[System.TimeSpan.ParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.parseexact/vb/parseexactexample1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> weist ein ungültiges Format auf.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="input" /> stellt eine Zahl dar, die kleiner als <see cref="F:System.TimeSpan.MinValue" /> oder größer als <see cref="F:System.TimeSpan.MaxValue" /> ist.  
  
- oder -  
Mindestens eine der Tages-, Stunden-, Minuten- oder Sekundenkomponenten in <paramref name="input" /> liegt außerhalb des gültigen Bereichs.</exception>
        <related type="Article" href="~/docs/standard/base-types/standard-timespan-format-strings.md">TimeSpan-Standardformatzeichenfolgen</related>
        <related type="Article" href="~/docs/standard/base-types/custom-timespan-format-strings.md">Benutzerdefinierte TimeSpan-Formatzeichenfolgen</related>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static TimeSpan ParseExact (string input, string[] formats, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan ParseExact(string input, string[] formats, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.ParseExact(System.String,System.String[],System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, formats As String(), formatProvider As IFormatProvider) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan ParseExact(System::String ^ input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string[] * IFormatProvider -&gt; TimeSpan" Usage="System.TimeSpan.ParseExact (input, formats, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="input">Eine Zeichenfolge, die das zu konvertierende Zeitintervall angibt.</param>
        <param name="formats">Ein Array standardmäßiger oder benutzerdefinierter Formatierungszeichenfolgen, das das erforderliche Format von <c>input</c> definiert.</param>
        <param name="formatProvider">Ein Objekt, das kulturspezifische Formatierungsinformationen bereitstellt.</param>
        <summary>Konvertiert die Zeichenfolgendarstellung eines Zeitintervalls unter Verwendung des angegebenen Arrays von Formatierungszeichenfolgen und der kulturspezifischen Formatierungsinformationen in die entsprechende <see cref="T:System.TimeSpan" />. Das Format der Zeichenfolgendarstellung muss einem der angegebenen Formate genau entsprechen.</summary>
        <returns>Ein Zeitintervall, das <paramref name="input" /> entspricht, wie von <paramref name="formats" /> und <paramref name="formatProvider" /> angegeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29> -Methode analysiert die angegebene Zeichenfolgendarstellung eines Zeitintervalls, die in einem der Formate von definiert sein muss die `formats` Parameter, mit dem Unterschied, führende und nachfolgende Leerzeichen ignoriert werden. Da `input` muss auf einen der im angegebenen Formate genau entsprechen, `formats`, Sie sollten immer Ausnahmebehandlung verwenden, beim Konvertieren von Zeichenfolge als Eingabe vom Benutzer in einem Zeitintervall. Wenn Sie keine Ausnahmebehandlung verwenden möchten, können Sie Aufrufen der <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.TimeSpan%40%29> Methode stattdessen.  
  
 Die `formats` -Parameter ist ein Zeichenfolgen-Array, dessen Elemente bestehen aus einer einzelnen Standardformatbezeichner oder eine oder mehrere benutzerdefinierte Formatbezeichner, die definieren, das erforderliche Format von `input`. Weitere Informationen zu gültigen Formatzeichenfolgen finden Sie unter [TimeSpan-Standardformatzeichenfolgen](~/docs/standard/base-types/standard-timespan-format-strings.md) und [benutzerdefinierte TimeSpan-Formatzeichenfolgen](~/docs/standard/base-types/custom-timespan-format-strings.md). `input` muss genau auf einen Member entsprechen `formats` damit der Analysevorgang erfolgreich ist. Der Analysevorgang versucht wird, entsprechend `input` auf jedes Element im `formats` mit dem ersten Element im Array ab.  
  
> [!IMPORTANT]
>  Die <xref:System.TimeSpan.ParseExact%2A> Methode verwendet die Konventionen der Kultur angegeben werden, indem die `formatProvider` Parameter nur, wenn die Formatzeichenfolge zum Analysieren verwendet `input` ist ein Standard <xref:System.TimeSpan> Formatzeichenfolge, deren Wert "g" oder "G ist". Verwenden die Formatierungskonventionen der invarianten Kultur, das "c", "t" und "T" standard verwendete Formatzeichenfolgen. Benutzerdefinierte Formatzeichenfolgen, definieren Sie das genaue Format der Eingabezeichenfolge und Literalzeichen verwenden, um die Komponenten eines bestimmten Zeitintervalls zu trennen.  
  
 Die `formatProvider` -Parameter ist ein <xref:System.IFormatProvider> Implementierung, die kulturspezifische Informationen zum Format der zurückgegebenen Zeichenfolge bereitstellt, wenn die Formatzeichenfolge zum Analysieren verwendet `input` ist eine Standardformatzeichenfolge. Die `formatProvider` Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo> -Objekt, das die Kultur, deren Formatierungskonventionen darstellt sollen in die zurückgegebene Zeichenfolge übernommen. Die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> Eigenschaft definiert die Formatierung der zurückgegebenen Zeichenfolge.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo> Objekt, das definiert, die Formatierung der zurückgegebenen Zeichenfolge.  
  
-   Ein benutzerdefiniertes Objekt, das implementiert die <xref:System.IFormatProvider> Schnittstelle. Die <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> Methode gibt eine <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das Formatierungsinformationen bereitstellt.  
  
 Wenn `formatProvider` ist `null`, <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das der aktuellen Kultur zugeordnet ist, wird verwendet.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%29> Methode, um jedes Element ein Zeichenfolgenarray, das Konvertieren einer <xref:System.TimeSpan> Wert. Im Beispiel werden die Zeichenfolgen, die über die Formatierungskonventionen der Kultur Französisch - Frankreich ("fr-FR") interpretiert. Die Zeichenfolgen können ein bestimmten Zeitintervalls in die Allgemeines kurzes Format oder die Allgemeines Langformat dargestellt werden.  
  
 Darüber hinaus ändert sich das Beispiel die Möglichkeit, in der die Analysemethoden der Uhrzeit-Intervall eine einzelne folgende Ziffer zu interpretieren. Normalerweise wird eine einzelne folgende Ziffer als die Anzahl der Tage in einem Zeitintervall interpretiert. Stattdessen die `%h` benutzerdefinierte Formatzeichenfolge wird verwendet, um eine einzelne folgende Ziffer als die Anzahl von Stunden interpretiert werden soll. Für diese Änderung wirksam wird, beachten Sie, dass die `%h` benutzerdefinierte Formatzeichenfolge muss vor die anderen Formatzeichenfolgen in stehen die `formats` Array.  
  
 [!code-csharp[System.TimeSpan.ParseExact#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.parseexact/cs/parseexactexample3.cs#3)]
 [!code-vb[System.TimeSpan.ParseExact#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.parseexact/vb/parseexactexample3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> weist ein ungültiges Format auf.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="input" /> stellt eine Zahl dar, die kleiner als <see cref="F:System.TimeSpan.MinValue" /> oder größer als <see cref="F:System.TimeSpan.MaxValue" /> ist.  
  
- oder -  
Mindestens eine der Tages-, Stunden-, Minuten- oder Sekundenkomponenten in <paramref name="input" /> liegt außerhalb des gültigen Bereichs.</exception>
        <altmember cref="M:System.TimeSpan.TryParseExact(System.String,System.String[],System.IFormatProvider,System.TimeSpan@)" />
        <related type="Article" href="~/docs/standard/base-types/standard-timespan-format-strings.md">TimeSpan-Standardformatzeichenfolgen</related>
        <related type="Article" href="~/docs/standard/base-types/custom-timespan-format-strings.md">Benutzerdefinierte TimeSpan-Formatzeichenfolgen</related>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static TimeSpan ParseExact (ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider formatProvider, System.Globalization.TimeSpanStyles styles = System.Globalization.TimeSpanStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider, valuetype System.Globalization.TimeSpanStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.TimeSpanStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, Optional styles As TimeSpanStyles = System.Globalization.TimeSpanStyles.None) As TimeSpan" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.TimeSpanStyles -&gt; TimeSpan" Usage="System.TimeSpan.ParseExact (input, format, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.TimeSpanStyles" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="format">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="styles">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static TimeSpan ParseExact (ReadOnlySpan&lt;char&gt; input, string[] formats, IFormatProvider formatProvider, System.Globalization.TimeSpanStyles styles = System.Globalization.TimeSpanStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.TimeSpanStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As ReadOnlySpan(Of Char), formats As String(), formatProvider As IFormatProvider, Optional styles As TimeSpanStyles = System.Globalization.TimeSpanStyles.None) As TimeSpan" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.TimeSpanStyles -&gt; TimeSpan" Usage="System.TimeSpan.ParseExact (input, formats, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.TimeSpanStyles" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="formats">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="styles">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static TimeSpan ParseExact (string input, string format, IFormatProvider formatProvider, System.Globalization.TimeSpanStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan ParseExact(string input, string format, class System.IFormatProvider formatProvider, valuetype System.Globalization.TimeSpanStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.TimeSpanStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, format As String, formatProvider As IFormatProvider, styles As TimeSpanStyles) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan ParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider, System::Globalization::TimeSpanStyles styles);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider * System.Globalization.TimeSpanStyles -&gt; TimeSpan" Usage="System.TimeSpan.ParseExact (input, format, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.TimeSpanStyles" />
      </Parameters>
      <Docs>
        <param name="input">Eine Zeichenfolge, die das zu konvertierende Zeitintervall angibt.</param>
        <param name="format">Eine standardmäßige oder benutzerdefinierte Formatierungszeichenfolge, die das erforderliche Format von <c>input</c> definiert.</param>
        <param name="formatProvider">Ein Objekt, das kulturspezifische Formatierungsinformationen bereitstellt.</param>
        <param name="styles">Eine bitweise Kombination von Enumerationswerten, die die Stilelemente definiert, die in <c>input</c> vorhanden sein können.</param>
        <summary>Konvertiert die Zeichenfolgendarstellung eines Zeitintervalls unter Verwendung des angegebenen Formats, der kulturspezifischen Formatierungsinformationen und Stile in die entsprechende <see cref="T:System.TimeSpan" />. Das Format der Zeichenfolgendarstellung muss dem angegebenen Format genau entsprechen.</summary>
        <returns>Ein Zeitintervall, das <paramref name="input" /> entspricht, wie von <paramref name="format" />, <paramref name="formatProvider" /> und <paramref name="styles" /> angegeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.TimeSpan.ParseExact%2A> -Methode analysiert die angegebene Zeichenfolgendarstellung eines Zeitintervalls, der das Format von definiert sein muss die `format` Parameter, mit dem Unterschied, führende und nachfolgende Leerzeichen ignoriert werden. Da `input` muss das Format der entsprechen `format` genau, Sie sollten immer verwenden Behandlung von Ausnahmen beim Konvertieren von Zeichenfolge als Eingabe vom Benutzer in einem Zeitintervall. Wenn Sie keine Ausnahmebehandlung verwenden möchten, können Sie Aufrufen der <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%2CSystem.TimeSpan%40%29> Methode stattdessen.  
  
 Die `format` Parameter ist eine Zeichenfolge, enthält entweder einen einzelnen standardbuild-Formatbezeichner oder ein oder mehrere benutzerdefinierte Formatbezeichner, die definieren, das erforderliche Format von `input`. Weitere Informationen zu gültigen Formatzeichenfolgen finden Sie unter [TimeSpan-Standardformatzeichenfolgen](~/docs/standard/base-types/standard-timespan-format-strings.md) und [benutzerdefinierte TimeSpan-Formatzeichenfolgen](~/docs/standard/base-types/custom-timespan-format-strings.md).  
  
> [!IMPORTANT]
>  Die <xref:System.TimeSpan.ParseExact%2A> Methode verwendet die Konventionen der Kultur angegeben werden, indem die `formatProvider` Parameter nur, wenn `format` ist ein Standard <xref:System.TimeSpan> Formatzeichenfolge, deren Wert "g" oder "G ist". Verwenden die Formatierungskonventionen der invarianten Kultur, das "c", "t" und "T" standard verwendete Formatzeichenfolgen. Benutzerdefinierte Formatzeichenfolgen, definieren Sie das genaue Format der Eingabezeichenfolge und Literalzeichen verwenden, um die Komponenten eines bestimmten Zeitintervalls zu trennen.  
  
 Die `formatProvider` -Parameter ist ein <xref:System.IFormatProvider> Implementierung, die kulturspezifische Informationen zum Format der zurückgegebenen Zeichenfolge bereitstellt, wenn `format` ist eine Standardformatzeichenfolge. Die `formatProvider` Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo> -Objekt, das die Kultur, deren Formatierungskonventionen darstellt sollen in die zurückgegebene Zeichenfolge übernommen. Die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> Eigenschaft definiert die Formatierung der zurückgegebenen Zeichenfolge.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo> Objekt, das definiert, die Formatierung der zurückgegebenen Zeichenfolge.  
  
-   Ein benutzerdefiniertes Objekt, das implementiert die <xref:System.IFormatProvider> Schnittstelle. Die <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> Methode gibt eine <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das Formatierungsinformationen bereitstellt.  
  
 Wenn `formatProvider` ist `null`, <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das der aktuellen Kultur zugeordnet ist, wird verwendet.  
  
 Die `styles` Parameter wirkt sich auf die Interpretation von Zeichenfolgen, die mit benutzerdefinierten Formatzeichenfolgen analysiert werden. Bestimmt, ob `input` wird als ein negatives Zeitintervall interpretiert, nur dann, wenn ein negativen Vorzeichen vorhanden ist (<xref:System.Globalization.TimeSpanStyles.None?displayProperty=nameWithType>), oder ob er immer als negatives Zeitintervall interpretiert wird (<xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=nameWithType>). Wenn <xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=nameWithType> nicht verwendet wird, `format` muss ein literales Minuszeichen enthalten (z. B. "\\-"), damit ein negatives Zeitintervall erfolgreich analysiert.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29> Methode, um mehrere zeichenfolgenentsprechungen von Zeitintervallen mit verschiedenen Formatzeichenfolgen und Kulturen zu analysieren. Darüber hinaus verwendet er die <xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=nameWithType> Wert, der jede Zeichenfolge als ein negatives Zeitintervall interpretiert werden soll. Die Ausgabe im Beispiel wird veranschaulicht, dass die <xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=nameWithType> Stil wirkt sich auf den Rückgabewert nur, wenn er mit benutzerdefinierten Formatzeichenfolgen verwendet wird.  
  
 [!code-csharp[System.TimeSpan.ParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.parseexact/cs/parseexactexample2.cs#2)]
 [!code-vb[System.TimeSpan.ParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.parseexact/vb/parseexactexample2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> ist ein ungültiger <see cref="T:System.Globalization.TimeSpanStyles" />-Wert.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> weist ein ungültiges Format auf.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="input" /> stellt eine Zahl dar, die kleiner als <see cref="F:System.TimeSpan.MinValue" /> oder größer als <see cref="F:System.TimeSpan.MaxValue" /> ist.  
  
- oder -  
Mindestens eine der Tages-, Stunden-, Minuten- oder Sekundenkomponenten in <paramref name="input" /> liegt außerhalb des gültigen Bereichs.</exception>
        <related type="Article" href="~/docs/standard/base-types/standard-timespan-format-strings.md">TimeSpan-Standardformatzeichenfolgen</related>
        <related type="Article" href="~/docs/standard/base-types/custom-timespan-format-strings.md">Benutzerdefinierte TimeSpan-Formatzeichenfolgen</related>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static TimeSpan ParseExact (string input, string[] formats, IFormatProvider formatProvider, System.Globalization.TimeSpanStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan ParseExact(string input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.TimeSpanStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, formats As String(), formatProvider As IFormatProvider, styles As TimeSpanStyles) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan ParseExact(System::String ^ input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, System::Globalization::TimeSpanStyles styles);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string[] * IFormatProvider * System.Globalization.TimeSpanStyles -&gt; TimeSpan" Usage="System.TimeSpan.ParseExact (input, formats, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.TimeSpanStyles" />
      </Parameters>
      <Docs>
        <param name="input">Eine Zeichenfolge, die das zu konvertierende Zeitintervall angibt.</param>
        <param name="formats">Ein Array standardmäßiger oder benutzerdefinierter Formatierungszeichenfolgen, das das erforderliche Format von <c>input</c> definiert.</param>
        <param name="formatProvider">Ein Objekt, das kulturspezifische Formatierungsinformationen bereitstellt.</param>
        <param name="styles">Eine bitweise Kombination von Enumerationswerten, die die Stilelemente definiert, die in der Eingabe vorhanden sein können.</param>
        <summary>Konvertiert die Zeichenfolgendarstellung eines Zeitintervalls unter Verwendung der angegebenen Formate, der kulturspezifischen Formatierungsinformationen und Stile in die entsprechende <see cref="T:System.TimeSpan" />. Das Format der Zeichenfolgendarstellung muss einem der angegebenen Formate genau entsprechen.</summary>
        <returns>Ein Zeitintervall, das <paramref name="input" /> entspricht, wie von <paramref name="formats" />, <paramref name="formatProvider" /> und <paramref name="styles" /> angegeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%29> -Methode analysiert die angegebene Zeichenfolgendarstellung eines Zeitintervalls, die in einem der Formate von definiert sein muss die `formats` Parameter, mit dem Unterschied, führende und nachfolgende Leerzeichen ignoriert werden. Da `input` muss auf einen der im angegebenen Formate genau entsprechen, `formats`, Sie sollten immer Ausnahmebehandlung verwenden, beim Konvertieren von Zeichenfolge als Eingabe vom Benutzer in einem Zeitintervall. Wenn Sie keine Ausnahmebehandlung verwenden möchten, können Sie Aufrufen der <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%2CSystem.TimeSpan%40%29> Methode stattdessen.  
  
 Die `formats` -Parameter ist ein Zeichenfolgen-Array, dessen Elemente bestehen aus einer einzelnen Standardformatbezeichner oder eine oder mehrere benutzerdefinierte Formatbezeichner, die definieren, das erforderliche Format von `input`. Weitere Informationen zu gültigen Formatzeichenfolgen finden Sie unter [TimeSpan-Standardformatzeichenfolgen](~/docs/standard/base-types/standard-timespan-format-strings.md) und [benutzerdefinierte TimeSpan-Formatzeichenfolgen](~/docs/standard/base-types/custom-timespan-format-strings.md). `input` muss genau auf einen Member entsprechen `formats` damit der Analysevorgang erfolgreich ist. Der Analysevorgang versucht wird, entsprechend `input` auf jedes Element im `formats` mit dem ersten Element im Array ab.  
  
> [!IMPORTANT]
>  Die <xref:System.TimeSpan.ParseExact%2A> Methode verwendet die Konventionen der Kultur angegeben werden, indem die `formatProvider` Parameter nur, wenn die Formatzeichenfolge zum Analysieren verwendet `input` ist ein Standard <xref:System.TimeSpan> Formatzeichenfolge, deren Wert "g" oder "G ist". Verwenden die Formatierungskonventionen der invarianten Kultur, das "c", "t" und "T" standard verwendete Formatzeichenfolgen. Benutzerdefinierte Formatzeichenfolgen, definieren Sie das genaue Format der Eingabezeichenfolge und Literalzeichen verwenden, um die Komponenten eines bestimmten Zeitintervalls zu trennen.  
  
 Die `formatProvider` -Parameter ist ein <xref:System.IFormatProvider> Implementierung, die kulturspezifische Informationen zum Format der zurückgegebenen Zeichenfolge bereitstellt, wenn die Formatzeichenfolge zum Analysieren verwendet `input` ist eine Standardformatzeichenfolge. Die `formatProvider` Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo> -Objekt, das die Kultur, deren Formatierungskonventionen darstellt sollen in die zurückgegebene Zeichenfolge übernommen. Die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> Eigenschaft definiert die Formatierung der zurückgegebenen Zeichenfolge.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo> Objekt, das definiert, die Formatierung der zurückgegebenen Zeichenfolge.  
  
-   Ein benutzerdefiniertes Objekt, das implementiert die <xref:System.IFormatProvider> Schnittstelle. Die <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> Methode gibt eine <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das Formatierungsinformationen bereitstellt.  
  
 Wenn `formatProvider` ist `null`, <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das der aktuellen Kultur zugeordnet ist, wird verwendet.  
  
 Die `styles` Parameter wirkt sich auf die Interpretation von Zeichenfolgen, die mit benutzerdefinierten Formatzeichenfolgen analysiert werden. Bestimmt, ob `input` wird als ein negatives Zeitintervall interpretiert, nur dann, wenn ein negativen Vorzeichen vorhanden ist (<xref:System.Globalization.TimeSpanStyles.None?displayProperty=nameWithType>), oder ob er immer als negatives Zeitintervall interpretiert wird (<xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=nameWithType>). Wenn <xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=nameWithType> nicht verwendet wird, `format` muss ein literales Minuszeichen enthalten (z. B. "\\-"), damit ein negatives Zeitintervall erfolgreich analysiert.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%29> Methode, um jedes Element ein Zeichenfolgenarray, das Konvertieren einer <xref:System.TimeSpan> Wert. Die Zeichenfolgen können ein bestimmten Zeitintervalls in die Allgemeines kurzes Format oder die Allgemeines Langformat dargestellt werden.  
  
 Darüber hinaus ändert sich das Beispiel die Möglichkeit, in der die Analysemethoden der Uhrzeit-Intervall eine einzelne folgende Ziffer zu interpretieren. Normalerweise wird eine einzelne folgende Ziffer als die Anzahl der Tage in einem Zeitintervall interpretiert. Stattdessen die `%h` benutzerdefinierte Formatzeichenfolge wird verwendet, um eine einzelne folgende Ziffer als die Anzahl von Stunden interpretiert werden soll. Für diese Änderung wirksam wird, beachten Sie, dass die `%h` benutzerdefinierte Formatzeichenfolge muss vor die anderen Formatzeichenfolgen in stehen die `formats` Array. Beachten Sie auch aus der Ausgabe, die die <xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=nameWithType> im Methodenaufruf angegebene Kennzeichen werden verwendet, nur, wenn eine Zeichenfolge mit dem diese Formatbezeichner zu analysieren.  
  
 [!code-csharp[System.TimeSpan.ParseExact#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.parseexact/cs/parseexactexample4.cs#4)]
 [!code-vb[System.TimeSpan.ParseExact#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.parseexact/vb/parseexactexample4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> ist ein ungültiger <see cref="T:System.Globalization.TimeSpanStyles" />-Wert.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> weist ein ungültiges Format auf.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="input" /> stellt eine Zahl dar, die kleiner als <see cref="F:System.TimeSpan.MinValue" /> oder größer als <see cref="F:System.TimeSpan.MaxValue" /> ist.  
  
- oder -  
Mindestens eine der Tages-, Stunden-, Minuten- oder Sekundenkomponenten in <paramref name="input" /> liegt außerhalb des gültigen Bereichs.</exception>
        <related type="Article" href="~/docs/standard/base-types/standard-timespan-format-strings.md">TimeSpan-Standardformatzeichenfolgen</related>
        <related type="Article" href="~/docs/standard/base-types/custom-timespan-format-strings.md">Benutzerdefinierte TimeSpan-Formatzeichenfolgen</related>
      </Docs>
    </Member>
    <Member MemberName="Seconds">
      <MemberSignature Language="C#" Value="public int Seconds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Seconds" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.Seconds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Seconds As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Seconds { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Seconds : int" Usage="System.TimeSpan.Seconds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Sekundenkomponente des Zeitintervalls ab, das durch die aktuelle <see cref="T:System.TimeSpan" />-Struktur dargestellt wird.</summary>
        <value>Die Komponente für Sekunden der aktuellen <see cref="T:System.TimeSpan" />-Struktur. Der Rückgabewert liegt im Bereich von -59 bis 59.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.TimeSpan> Wert dargestellt werden kann, als [*-*]*d*. *Hh*:*mm*:*ss*. *FF*, wobei die optionalen Minuszeichen (-) ein negatives Zeitintervall, gibt die *d* Komponente wird in Tagen gemessen, *Hh* Stunden in 24-Stunden-Format, gemessen *mm* Minuten, *ss* Sekunden und *ff* Bruchteile einer Sekunde. Der Wert des der <xref:System.TimeSpan.Seconds%2A> -Eigenschaft ist die Sekundenkomponente *ss*.  
  
 Die <xref:System.TimeSpan.Seconds%2A> -Eigenschaft stellt ganze Sekunden dar, während die <xref:System.TimeSpan.TotalSeconds%2A> Eigenschaft darstellt, ganze Tagen und Bruchteile von Sekunden.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt mehrere <xref:System.TimeSpan> -Objekte und zeigt die <xref:System.TimeSpan.Seconds%2A> Eigenschaft der einzelnen.  
  
 [!code-cpp[System.TimeSpan.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.TimeSpan.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CS/properties.cs#1)]
 [!code-vb[System.TimeSpan.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeSpan.TotalSeconds" />
        <altmember cref="P:System.TimeSpan.Ticks" />
        <altmember cref="P:System.TimeSpan.Milliseconds" />
        <altmember cref="P:System.TimeSpan.Minutes" />
        <altmember cref="P:System.TimeSpan.Hours" />
        <altmember cref="P:System.TimeSpan.Days" />
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public TimeSpan Subtract (TimeSpan ts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Subtract(valuetype System.TimeSpan ts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Subtract(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (ts As TimeSpan) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan Subtract(TimeSpan ts);" />
      <MemberSignature Language="F#" Value="member this.Subtract : TimeSpan -&gt; TimeSpan" Usage="timeSpan.Subtract ts" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ts" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="ts">Das Zeitintervall, das subtrahiert werden soll.</param>
        <summary>Gibt ein neues <see cref="T:System.TimeSpan" />-Objekt zurück, dessen Wert die Differenz zwischen dem angegebenen <see cref="T:System.TimeSpan" />-Objekt und dieser Instanz ist.</summary>
        <returns>Ein neues Zeitintervall, dessen Wert das Ergebnis der Subtraktion des Werts von <paramref name="ts" /> vom Wert dieser Instanz ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der zurückgegebene Wert muss zwischen <xref:System.TimeSpan.MinValue?displayProperty=nameWithType> und <xref:System.TimeSpan.MaxValue?displayProperty=nameWithType>ist, andernfalls wird eine Ausnahme ausgelöst.  
  
 Der Rückgabewert ist ein neues <xref:System.TimeSpan>; der ursprüngliche <xref:System.TimeSpan> wird nicht geändert.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.TimeSpan.Subtract%2A> Methode zur Berechnung der Differenz zwischen einem einzelnen <xref:System.TimeSpan> Wert und jede der Zeitintervalle in einem Array. Beachten Sie, dass da <xref:System.TimeSpan> Formatzeichenfolgen nicht negative Vorzeichen in die Ergebniszeichenfolge einschließen, die im Beispiel wird bedingten Logik verwendet, um ein negativen Vorzeichen mit negative Zeitintervalle einzuschließen.  
  
 [!code-csharp[System.TimeSpan.Subtract#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.subtract/cs/subtract1.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">Der Rückgabewert ist kleiner als <see cref="F:System.TimeSpan.MinValue" /> oder größer als <see cref="F:System.TimeSpan.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.Subtract(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (value As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ value) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ticks">
      <MemberSignature Language="C#" Value="public long Ticks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Ticks" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.Ticks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Ticks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Ticks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Ticks : int64" Usage="System.TimeSpan.Ticks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Anzahl der Ticks ab, die den Wert der aktuellen <see cref="T:System.TimeSpan" />-Struktur darstellt.</summary>
        <value>Die Anzahl der Ticks in dieser Instanz.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die kleinste Einheit der Zeit wird der Takt entspricht 100 Nanosekunden oder ein zehnmillionstel einer Sekunde handelt. In einer Millisekunde sind 10.000 Teilstriche. Der Wert des der <xref:System.TimeSpan.Ticks%2A> Eigenschaft kann negativ oder positiv zur Darstellung eines negativen oder positiven Zeitintervalls sein.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt mehrere <xref:System.TimeSpan> -Objekte und zeigt die <xref:System.TimeSpan.Ticks%2A> Eigenschaft der einzelnen.  
  
 [!code-cpp[System.TimeSpan.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.TimeSpan.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CS/properties.cs#1)]
 [!code-vb[System.TimeSpan.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int64" />
        <altmember cref="P:System.TimeSpan.Milliseconds" />
        <altmember cref="P:System.TimeSpan.Seconds" />
        <altmember cref="P:System.TimeSpan.Minutes" />
        <altmember cref="P:System.TimeSpan.Hours" />
        <altmember cref="P:System.TimeSpan.Days" />
      </Docs>
    </Member>
    <Member MemberName="TicksPerDay">
      <MemberSignature Language="C#" Value="public const long TicksPerDay = 864000000000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int64 TicksPerDay = (864000000000)" />
      <MemberSignature Language="DocId" Value="F:System.TimeSpan.TicksPerDay" />
      <MemberSignature Language="VB.NET" Value="Public Const TicksPerDay As Long  = 864000000000" />
      <MemberSignature Language="C++ CLI" Value="public: long TicksPerDay = 864000000000;" />
      <MemberSignature Language="F#" Value="val mutable TicksPerDay : int64" Usage="System.TimeSpan.TicksPerDay" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <MemberValue>864000000000</MemberValue>
      <Docs>
        <summary>Stellt die Anzahl der Ticks pro Tag dar. Dieses Feld ist konstant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert dieser Konstanten ist 864 Milliarden. d. h. 864,000,000,000.  
  
   
  
## Examples  
 Im folgenden Beispiel verweist auf und zeigt den Wert der <xref:System.TimeSpan.TicksPerDay> Feld.  
  
 [!code-cpp[System.TimeSpan.Fields#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CPP/fields.cpp#1)]
 [!code-csharp[System.TimeSpan.Fields#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CS/fields.cs#1)]
 [!code-vb[System.TimeSpan.Fields#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Fields/VB/fields.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int64" />
        <altmember cref="F:System.TimeSpan.TicksPerMillisecond" />
        <altmember cref="F:System.TimeSpan.TicksPerSecond" />
        <altmember cref="F:System.TimeSpan.TicksPerMinute" />
        <altmember cref="F:System.TimeSpan.TicksPerHour" />
      </Docs>
    </Member>
    <Member MemberName="TicksPerHour">
      <MemberSignature Language="C#" Value="public const long TicksPerHour = 36000000000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int64 TicksPerHour = (36000000000)" />
      <MemberSignature Language="DocId" Value="F:System.TimeSpan.TicksPerHour" />
      <MemberSignature Language="VB.NET" Value="Public Const TicksPerHour As Long  = 36000000000" />
      <MemberSignature Language="C++ CLI" Value="public: long TicksPerHour = 36000000000;" />
      <MemberSignature Language="F#" Value="val mutable TicksPerHour : int64" Usage="System.TimeSpan.TicksPerHour" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <MemberValue>36000000000</MemberValue>
      <Docs>
        <summary>Stellt die Anzahl der Ticks pro Stunde dar. Dieses Feld ist konstant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert dieser Konstanten ist 36 Milliarden. d. h. 36,000,000,000.  
  
   
  
## Examples  
 Im folgenden Beispiel verweist auf und zeigt den Wert der <xref:System.TimeSpan.TicksPerHour> Feld.  
  
 [!code-cpp[System.TimeSpan.Fields#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CPP/fields.cpp#1)]
 [!code-csharp[System.TimeSpan.Fields#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CS/fields.cs#1)]
 [!code-vb[System.TimeSpan.Fields#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Fields/VB/fields.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int64" />
        <altmember cref="F:System.TimeSpan.TicksPerMillisecond" />
        <altmember cref="F:System.TimeSpan.TicksPerSecond" />
        <altmember cref="F:System.TimeSpan.TicksPerMinute" />
        <altmember cref="F:System.TimeSpan.TicksPerDay" />
      </Docs>
    </Member>
    <Member MemberName="TicksPerMillisecond">
      <MemberSignature Language="C#" Value="public const long TicksPerMillisecond = 10000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int64 TicksPerMillisecond = (10000)" />
      <MemberSignature Language="DocId" Value="F:System.TimeSpan.TicksPerMillisecond" />
      <MemberSignature Language="VB.NET" Value="Public Const TicksPerMillisecond As Long  = 10000" />
      <MemberSignature Language="C++ CLI" Value="public: long TicksPerMillisecond = 10000;" />
      <MemberSignature Language="F#" Value="val mutable TicksPerMillisecond : int64" Usage="System.TimeSpan.TicksPerMillisecond" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <MemberValue>10000</MemberValue>
      <Docs>
        <summary>Stellt die Anzahl der Ticks pro Millisekunde dar. Dieses Feld ist konstant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert dieser Konstanten ist 10 Tausend. d. h. 10.000.  
  
   
  
## Examples  
 Im folgenden Beispiel verweist auf und zeigt den Wert der <xref:System.TimeSpan.TicksPerMillisecond> Feld.  
  
 [!code-cpp[System.TimeSpan.Fields#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CPP/fields.cpp#1)]
 [!code-csharp[System.TimeSpan.Fields#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CS/fields.cs#1)]
 [!code-vb[System.TimeSpan.Fields#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Fields/VB/fields.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int64" />
        <altmember cref="F:System.TimeSpan.TicksPerSecond" />
        <altmember cref="F:System.TimeSpan.TicksPerMinute" />
        <altmember cref="F:System.TimeSpan.TicksPerHour" />
        <altmember cref="F:System.TimeSpan.TicksPerDay" />
      </Docs>
    </Member>
    <Member MemberName="TicksPerMinute">
      <MemberSignature Language="C#" Value="public const long TicksPerMinute = 600000000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int64 TicksPerMinute = (600000000)" />
      <MemberSignature Language="DocId" Value="F:System.TimeSpan.TicksPerMinute" />
      <MemberSignature Language="VB.NET" Value="Public Const TicksPerMinute As Long  = 600000000" />
      <MemberSignature Language="C++ CLI" Value="public: long TicksPerMinute = 600000000;" />
      <MemberSignature Language="F#" Value="val mutable TicksPerMinute : int64" Usage="System.TimeSpan.TicksPerMinute" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <MemberValue>600000000</MemberValue>
      <Docs>
        <summary>Stellt die Anzahl der Ticks pro Minute dar. Dieses Feld ist konstant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert diese Konstante ist 600 Millionen. d. h. 600,000,000.  
  
   
  
## Examples  
 Im folgenden Beispiel verweist auf und zeigt den Wert der <xref:System.TimeSpan.TicksPerMinute> Feld.  
  
 [!code-cpp[System.TimeSpan.Fields#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CPP/fields.cpp#1)]
 [!code-csharp[System.TimeSpan.Fields#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CS/fields.cs#1)]
 [!code-vb[System.TimeSpan.Fields#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Fields/VB/fields.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int64" />
        <altmember cref="F:System.TimeSpan.TicksPerMillisecond" />
        <altmember cref="F:System.TimeSpan.TicksPerSecond" />
        <altmember cref="F:System.TimeSpan.TicksPerHour" />
        <altmember cref="F:System.TimeSpan.TicksPerDay" />
      </Docs>
    </Member>
    <Member MemberName="TicksPerSecond">
      <MemberSignature Language="C#" Value="public const long TicksPerSecond = 10000000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int64 TicksPerSecond = (10000000)" />
      <MemberSignature Language="DocId" Value="F:System.TimeSpan.TicksPerSecond" />
      <MemberSignature Language="VB.NET" Value="Public Const TicksPerSecond As Long  = 10000000" />
      <MemberSignature Language="C++ CLI" Value="public: long TicksPerSecond = 10000000;" />
      <MemberSignature Language="F#" Value="val mutable TicksPerSecond : int64" Usage="System.TimeSpan.TicksPerSecond" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <MemberValue>10000000</MemberValue>
      <Docs>
        <summary>Stellt die Anzahl der Ticks pro Sekunde dar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert dieser Konstanten beträgt 10 Millionen; d. h. 10.000.000.  
  
   
  
## Examples  
 Im folgenden Beispiel verweist auf und zeigt den Wert der <xref:System.TimeSpan.TicksPerSecond> Feld.  
  
 [!code-cpp[System.TimeSpan.Fields#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CPP/fields.cpp#1)]
 [!code-csharp[System.TimeSpan.Fields#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CS/fields.cs#1)]
 [!code-vb[System.TimeSpan.Fields#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Fields/VB/fields.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int64" />
        <altmember cref="F:System.TimeSpan.TicksPerMillisecond" />
        <altmember cref="F:System.TimeSpan.TicksPerMinute" />
        <altmember cref="F:System.TimeSpan.TicksPerHour" />
        <altmember cref="F:System.TimeSpan.TicksPerDay" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konvertiert den Wert des aktuellen <see cref="T:System.TimeSpan" />-Objekts in die entsprechende Zeichenfolgendarstellung.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="timeSpan.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konvertiert den Wert des aktuellen <see cref="T:System.TimeSpan" />-Objekts in die entsprechende Zeichenfolgendarstellung.</summary>
        <returns>Die Zeichenfolgendarstellung des aktuellen <see cref="T:System.TimeSpan" />-Werts.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die zurückgegebene Zeichenfolge mit der Formatbezeichner "C" formatiert ist, und weist das folgende Format:  
  
 [-][*d*.]*hh*:*mm*:*ss*[.*fffffff*]  
  
 Elemente in eckigen Klammern ([und]) kann nicht in der zurückgegebenen Zeichenfolge enthalten sein. Doppelpunkte und Punkte (: und.) lauten wie folgt. Die Elemente nicht-Literale werden in der folgenden Tabelle aufgeführt. Beachten Sie, die von die Zeichenfolge zurückgegeben der <xref:System.TimeSpan.ToString> Methode ist nicht kulturabhängig.  
  
|Element|Beschreibung |  
|----------|-----------------|  
|"-"|Ein Minuszeichen (-), das ein negatives Zeitintervall angibt. Ohne Vorzeichen, die für eine positive Zeitspanne enthalten ist.|  
|"*d*"|Die Anzahl der Tage im Zeitintervall. Dieses Element wird weggelassen, wenn das Zeitintervall kleiner als ein Tag ist.|  
|"*Hh*"|Die Anzahl der Stunden im Zeitintervall, im Bereich von 0 bis 23.|  
|"*mm*"|Die Anzahl von Minuten im Zeitintervall, im Bereich von 0 bis 59.|  
|"*ss*"|Die Anzahl von Sekunden im Zeitintervall, im Bereich von 0 bis 59.|  
|"*Fffffff*"|Bruchteilen von Sekunden im Zeitintervall. Dieses Element wird weggelassen, wenn das Zeitintervall keine Sekundenbruchteile enthält. Falls vorhanden, werden Sekundenbruchteile immer mit sieben Dezimalstellen ausgedrückt.|  
  
> [!NOTE]
>  Für Weitere Informationen zum Vergleichen der Zeichenfolgendarstellung <xref:System.TimeSpan> und Oracle-Datentypen finden Sie in Knowledge Base-Artikel [324577: zweiten Datentyp System.TimeSpan-Wert ist keine Übereinstimmung Oracle 9i Intervall Tag](https://go.microsoft.com/fwlink/?LinkId=161146).  
  
   
  
## Examples  
 Das folgende Beispiel zeigt die Zeichenfolgen zurückgegeben, indem die <xref:System.TimeSpan.ToString%2A> Methode mit einer Reihe von <xref:System.TimeSpan> Werte. Beachten Sie, dass, obwohl das Beispiel nicht aufgerufen wird die <xref:System.TimeSpan.ToString%2A> Methode direkt durch Aufruf von der <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> Methode, wenn versucht wird, konvertieren Sie eine <xref:System.TimeSpan> Wert in seine Zeichenfolgendarstellung.  
  
 [!code-csharp[System.TimeSpan.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.ToString/cs/ToString1.cs#1)]
 [!code-vb[System.TimeSpan.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.ToString/vb/ToString1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Unterstützung für die Formatierung <see cref="T:System.TimeSpan" /> Werte wurde hinzugefügt, die [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]. Allerdings die <see cref="M:System.TimeSpan.ToString" /> methodenüberladung kulturunabhängige bleibt. Das Verhalten wird von früheren Versionen von .NET Framework nicht geändert. Zum Steuern der Formatierung von einem <see cref="T:System.TimeSpan" /> Wert, rufen Sie die <see cref="M:System.TimeSpan.ToString(System.String)" /> oder <see cref="M:System.TimeSpan.ToString(System.String,System.IFormatProvider)" /> überladen.</para>
        </block>
        <altmember cref="T:System.String" />
        <altmember cref="M:System.TimeSpan.Parse(System.String)" />
        <altmember cref="M:System.TimeSpan.TryParse(System.String,System.TimeSpan@)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="timeSpan.ToString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">Eine standardmäßige oder benutzerdefinierte <see cref="T:System.TimeSpan" />-Formatierungszeichenfolge.</param>
        <summary>Konvertiert den Wert des aktuellen <see cref="T:System.TimeSpan" />-Objekts unter Verwendung des angegebenen Formats in die entsprechende Zeichenfolgendarstellung.</summary>
        <returns>Die Zeichenfolgendarstellung des aktuellen <see cref="T:System.TimeSpan" />-Werts im durch den <paramref name="format" />-Parameter angegebenen Format.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `format` Parameter kann ein beliebiger gültiger standardmäßigen oder benutzerdefinierten Formatbezeichner für sein <xref:System.TimeSpan> Werte. Wenn `format` gleich <xref:System.String.Empty?displayProperty=nameWithType> oder `null`, den Rückgabewert des aktuellen <xref:System.TimeSpan> Objekt mit der allgemeine Formatbezeichner ("c") formatiert ist. Wenn `format` jeder andere Wert ist, löst die Methode eine <xref:System.FormatException>.  
  
 Wenn `format` ist eine Standardformatzeichenfolge, das Format der zurückgegebenen Zeichenfolge durch die Formatierungskonventionen der aktuellen Kultur definiert wird.  
  
> [!IMPORTANT]
>  Benutzerdefinierte Formatzeichenfolgen für <xref:System.TimeSpan> Werte schließen keine Trennzeichen Datums- oder Uhrzeitwert. Wenn Sie diese Elemente in die Formatzeichenfolge einfügen möchten, müssen Sie sie als Zeichenliterale behandeln. Siehe das Beispiel für eine Abbildung, und finden Sie unter den [benutzerdefinierte TimeSpan-Formatzeichenfolgen](~/docs/standard/base-types/custom-timespan-format-strings.md) Thema enthält weitere Informationen.  
  
 .NET Framework bietet umfangreiche formatierungsunterstützung, die in den folgenden Themen zur Formatierung ausführlicher beschrieben wird:  
  
-   Weitere Informationen zu Formatzeichenfolgen für <xref:System.TimeSpan> Werte finden Sie unter [TimeSpan-Standardformatzeichenfolgen](~/docs/standard/base-types/standard-timespan-format-strings.md) und [benutzerdefinierte TimeSpan-Formatzeichenfolgen](~/docs/standard/base-types/custom-timespan-format-strings.md).  
  
-   Weitere Informationen zur Unterstützung für die Formatierung in .NET Framework finden Sie unter [Formatierung von Typen](~/docs/standard/base-types/formatting-types.md).  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Standard- und benutzerdefinierte <xref:System.TimeSpan> Formatzeichenfolgen, die Zeichenfolgendarstellung der einzelnen Elemente in ein Array von anzuzeigenden <xref:System.TimeSpan> Werte  
  
 [!code-csharp[System.TimeSpan.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.ToString/cs/tostring3.cs#3)]
 [!code-vb[System.TimeSpan.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.ToString/vb/tostring3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">Der <paramref name="format" />-Parameter wird nicht erkannt oder nicht unterstützt.</exception>
        <related type="Article" href="~/docs/standard/base-types/standard-timespan-format-strings.md">TimeSpan-Standardformatzeichenfolgen</related>
        <related type="Article" href="~/docs/standard/base-types/custom-timespan-format-strings.md">Benutzerdefinierte TimeSpan-Formatzeichenfolgen</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="timeSpan.ToString (format, formatProvider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">Eine standardmäßige oder benutzerdefinierte <see cref="T:System.TimeSpan" />-Formatierungszeichenfolge.</param>
        <param name="formatProvider">Ein Objekt, das kulturspezifische Formatierungsinformationen bereitstellt.</param>
        <summary>Konvertiert den Wert des aktuellen <see cref="T:System.TimeSpan" />-Objekts unter Verwendung des angegebenen Formats und der angegebenen kulturspezifischen Formatierungsinformationen in die entsprechende Zeichenfolgendarstellung.</summary>
        <returns>Die Zeichenfolgendarstellung des aktuellen <see cref="T:System.TimeSpan" />-Werts, wie von <paramref name="format" /> und <paramref name="formatProvider" /> angegeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `format` Parameter kann ein beliebiger gültiger standardmäßigen oder benutzerdefinierten Formatbezeichner für sein <xref:System.TimeSpan> Werte. Wenn `format` gleich <xref:System.String.Empty?displayProperty=nameWithType> oder `null`, den Rückgabewert des aktuellen <xref:System.TimeSpan> Objekt mit der allgemeine Formatbezeichner ("c") formatiert ist. Wenn das Format jeder andere Wert ist, löst die Methode eine <xref:System.FormatException>.  
  
> [!IMPORTANT]
>  Benutzerdefinierte Formatzeichenfolgen für <xref:System.TimeSpan> Werte schließen keine Trennzeichen Datums- oder Uhrzeitwert. Wenn Sie diese Elemente in die Formatzeichenfolge einfügen möchten, müssen Sie sie als Zeichenliterale behandeln. Siehe das Beispiel für eine Abbildung, und finden Sie unter den [benutzerdefinierte TimeSpan-Formatzeichenfolgen](~/docs/standard/base-types/custom-timespan-format-strings.md) Thema enthält weitere Informationen.  
  
 .NET Framework bietet umfangreiche formatierungsunterstützung, die in den folgenden Themen zur Formatierung ausführlicher beschrieben wird:  
  
-   Weitere Informationen zu Formatzeichenfolgen für <xref:System.TimeSpan> Werte finden Sie unter [TimeSpan-Standardformatzeichenfolgen](~/docs/standard/base-types/standard-timespan-format-strings.md) und [benutzerdefinierte TimeSpan-Formatzeichenfolgen](~/docs/standard/base-types/custom-timespan-format-strings.md).  
  
-   Weitere Informationen zur Unterstützung für die Formatierung in .NET Framework finden Sie unter [Formatierung von Typen](~/docs/standard/base-types/formatting-types.md).  
  
 Die `formatProvider` -Parameter ist ein <xref:System.IFormatProvider> Implementierung, die kulturspezifische Informationen zum Format der zurückgegebenen Zeichenfolge bereitstellt. Die `formatProvider` Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo> -Objekt, das die Kultur, deren Formatierungskonventionen darstellt sollen in die zurückgegebene Zeichenfolge übernommen. Die <xref:System.Globalization.DateTimeFormatInfo> Objekt zurückgegeben, die von der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> Eigenschaft definiert die Formatierung der zurückgegebenen Zeichenfolge.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo> Objekt, das definiert, die Formatierung der zurückgegebenen Zeichenfolge.  
  
-   Ein benutzerdefiniertes Objekt, das implementiert die <xref:System.IFormatProvider> Schnittstelle. Die <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> Methode gibt eine <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das Formatierungsinformationen bereitstellt.  
  
 Wenn `formatProvider` ist `null`, <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das der aktuellen Kultur zugeordnet ist, wird verwendet. Wenn `format` ist eine benutzerdefinierte Formatzeichenfolge, die `formatProvider` Parameter wird ignoriert.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.TimeSpan.ToString%28System.String%2CSystem.IFormatProvider%29> Methode, um zwei Zeitintervalle zu formatieren. Im Beispiel wird die Methode zweimal für jede Formatzeichenfolge, um es mit den Konventionen der Kultur En-US anzuzeigen, und klicken Sie dann mit den Konventionen der Kultur "fr-FR" angezeigt.  
  
 [!code-csharp[System.TimeSpan.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.ToString/cs/tostring4.cs#4)]
 [!code-vb[System.TimeSpan.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.ToString/vb/tostring4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">Der <paramref name="format" />-Parameter wird nicht erkannt oder nicht unterstützt.</exception>
        <related type="Article" href="~/docs/standard/base-types/standard-timespan-format-strings.md">TimeSpan-Standardformatzeichenfolgen</related>
        <related type="Article" href="~/docs/standard/base-types/custom-timespan-format-strings.md">Benutzerdefinierte TimeSpan-Formatzeichenfolgen</related>
      </Docs>
    </Member>
    <Member MemberName="TotalDays">
      <MemberSignature Language="C#" Value="public double TotalDays { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 TotalDays" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.TotalDays" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TotalDays As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double TotalDays { double get(); };" />
      <MemberSignature Language="F#" Value="member this.TotalDays : double" Usage="System.TimeSpan.TotalDays" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Wert der aktuellen <see cref="T:System.TimeSpan" />-Struktur in ganzen Tagen und Bruchteilen von Tagen ab.</summary>
        <value>Die Gesamtzahl der von dieser Instanz dargestellten Tage.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft konvertiert den Wert dieser Instanz von Ticks zu Tage. Diese Zahl möglicherweise ganze Tagen und Bruchteile von Tagen sind.  
  
 Die <xref:System.TimeSpan.TotalDays%2A> Eigenschaft darstellt ganze Tagen und Bruchteile von Tagen, während die <xref:System.TimeSpan.Days%2A> Eigenschaft darstellt, ganzen Tage.  
  
   
  
## Examples  
 Das folgende Beispiel instanziiert ein <xref:System.TimeSpan> -Objekt und zeigt den Wert der <xref:System.TimeSpan.TotalDays%2A> Eigenschaft. Es zeigt auch den Wert der einzelnen Komponenten (Stunden, Minuten, Sekunden und Millisekunden), die den Bruchteil der Wert des bildet die <xref:System.TimeSpan.TotalDays%2A> Eigenschaft.  
  
 [!code-csharp[System.TimeSpan.TotalDays#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.totaldays/cs/totaldays.cs#1)]
 [!code-vb[System.TimeSpan.TotalDays#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.totaldays/vb/totaldays.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeSpan.Days" />
        <altmember cref="P:System.TimeSpan.TotalMilliseconds" />
        <altmember cref="P:System.TimeSpan.TotalSeconds" />
        <altmember cref="P:System.TimeSpan.TotalMinutes" />
        <altmember cref="P:System.TimeSpan.TotalHours" />
      </Docs>
    </Member>
    <Member MemberName="TotalHours">
      <MemberSignature Language="C#" Value="public double TotalHours { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 TotalHours" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.TotalHours" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TotalHours As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double TotalHours { double get(); };" />
      <MemberSignature Language="F#" Value="member this.TotalHours : double" Usage="System.TimeSpan.TotalHours" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Wert der aktuellen <see cref="T:System.TimeSpan" />-Struktur in ganzen Stunden und Bruchteilen von Stunden ab.</summary>
        <value>Die Gesamtzahl der von dieser Instanz dargestellten Stunden.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft konvertiert den Wert dieser Instanz von Ticks, in Stunden. Diese Zahl kann ganze Tagen und Bruchteile von Stunden enthalten.  
  
 Die <xref:System.TimeSpan.TotalHours%2A> Eigenschaft darstellt ganze Tagen und Bruchteile von Stunden, während die <xref:System.TimeSpan.Hours%2A> Eigenschaft stellt die ganze Stunden dar.  
  
   
  
## Examples  
 Das folgende Beispiel instanziiert ein <xref:System.TimeSpan> -Objekt und zeigt den Wert der <xref:System.TimeSpan.TotalHours%2A> Eigenschaft. Es zeigt auch den Wert der einzelnen Komponenten (Stunden, Minuten, Sekunden und Millisekunden), die den Bruchteil der Wert des bildet die <xref:System.TimeSpan.TotalHours%2A> Eigenschaft.  
  
 [!code-csharp[System.TimeSpan.TotalHours#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.totalhours/cs/totalhours.cs#1)]
 [!code-vb[System.TimeSpan.TotalHours#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.totalhours/vb/totalhours.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeSpan.Hours" />
        <altmember cref="P:System.TimeSpan.TotalMilliseconds" />
        <altmember cref="P:System.TimeSpan.TotalSeconds" />
        <altmember cref="P:System.TimeSpan.TotalMinutes" />
        <altmember cref="P:System.TimeSpan.TotalDays" />
      </Docs>
    </Member>
    <Member MemberName="TotalMilliseconds">
      <MemberSignature Language="C#" Value="public double TotalMilliseconds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 TotalMilliseconds" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.TotalMilliseconds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TotalMilliseconds As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double TotalMilliseconds { double get(); };" />
      <MemberSignature Language="F#" Value="member this.TotalMilliseconds : double" Usage="System.TimeSpan.TotalMilliseconds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Wert der aktuellen <see cref="T:System.TimeSpan" />-Struktur in ganzen Millisekunden und Bruchteilen von Millisekunden ab.</summary>
        <value>Die Gesamtzahl der von dieser Instanz dargestellten Millisekunden.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft konvertiert den Wert dieser Instanz von Ticks, in Millisekunden. Diese Zahl kann ganze Tagen und Bruchteile von Millisekunden enthalten.  
  
 Die <xref:System.TimeSpan.TotalMilliseconds%2A> Eigenschaft darstellt ganze Tagen und Bruchteile von Millisekunden, während die <xref:System.TimeSpan.Milliseconds%2A> Eigenschaft darstellt, ganze Millisekunden.  
  
   
  
## Examples  
 Das folgende Beispiel instanziiert ein <xref:System.TimeSpan> -Objekt und zeigt den Wert der <xref:System.TimeSpan.TotalMilliseconds%2A> Eigenschaft.  
  
 [!code-csharp[System.TimeSpan.TotalMilliseconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.totalmilliseconds/cs/totalmilliseconds.cs#1)]
 [!code-vb[System.TimeSpan.TotalMilliseconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.totalmilliseconds/vb/totalmilliseconds.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeSpan.Milliseconds" />
        <altmember cref="P:System.TimeSpan.TotalSeconds" />
        <altmember cref="P:System.TimeSpan.TotalMinutes" />
        <altmember cref="P:System.TimeSpan.TotalHours" />
        <altmember cref="P:System.TimeSpan.TotalDays" />
      </Docs>
    </Member>
    <Member MemberName="TotalMinutes">
      <MemberSignature Language="C#" Value="public double TotalMinutes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 TotalMinutes" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.TotalMinutes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TotalMinutes As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double TotalMinutes { double get(); };" />
      <MemberSignature Language="F#" Value="member this.TotalMinutes : double" Usage="System.TimeSpan.TotalMinutes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Wert der aktuellen <see cref="T:System.TimeSpan" />-Struktur in ganzen Minuten und Bruchteilen von Minuten ab.</summary>
        <value>Die Gesamtzahl der von dieser Instanz dargestellten Minuten.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft konvertiert den Wert dieser Instanz von Ticks, in Minuten. Diese Zahl kann ganze Tagen und Bruchteile von Minuten enthalten.  
  
 Die <xref:System.TimeSpan.TotalMinutes%2A> Eigenschaft darstellt ganze Tagen und Bruchteile von Minuten, während die <xref:System.TimeSpan.Minutes%2A> Eigenschaft stellt ganze Minuten dar.  
  
   
  
## Examples  
 Das folgende Beispiel instanziiert ein <xref:System.TimeSpan> -Objekt und zeigt den Wert der <xref:System.TimeSpan.TotalMinutes%2A> Eigenschaft. Es zeigt auch den Wert der einzelnen Komponenten (Sekunden, Millisekunden), die den Bruchteil der Wert des bildet die <xref:System.TimeSpan.TotalMinutes%2A> Eigenschaft.  
  
 [!code-csharp[System.TimeSpan.TotalMinutes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.totalminutes/cs/totalminutes.cs#1)]
 [!code-vb[System.TimeSpan.TotalMinutes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.totalminutes/vb/totalminutes.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeSpan.Minutes" />
        <altmember cref="P:System.TimeSpan.TotalMilliseconds" />
        <altmember cref="P:System.TimeSpan.TotalSeconds" />
        <altmember cref="P:System.TimeSpan.TotalHours" />
        <altmember cref="P:System.TimeSpan.TotalDays" />
      </Docs>
    </Member>
    <Member MemberName="TotalSeconds">
      <MemberSignature Language="C#" Value="public double TotalSeconds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 TotalSeconds" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.TotalSeconds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TotalSeconds As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double TotalSeconds { double get(); };" />
      <MemberSignature Language="F#" Value="member this.TotalSeconds : double" Usage="System.TimeSpan.TotalSeconds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Wert der aktuellen <see cref="T:System.TimeSpan" />-Struktur in ganzen Sekunden und Bruchteilen von Sekunden ab.</summary>
        <value>Die Gesamtzahl der von dieser Instanz dargestellten Sekunden.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft konvertiert den Wert dieser Instanz von Ticks, in Sekunden. Diese Zahl kann ganze Tagen und Bruchteile von Sekunden enthalten.  
  
 Die <xref:System.TimeSpan.TotalSeconds%2A> Eigenschaft darstellt ganze Tagen und Bruchteile von Sekunden, während die <xref:System.TimeSpan.Seconds%2A> Eigenschaft stellt ganze Sekunden dar.  
  
   
  
## Examples  
 Das folgende Beispiel instanziiert ein <xref:System.TimeSpan> -Objekt und zeigt den Wert der <xref:System.TimeSpan.TotalSeconds%2A> Eigenschaft. Es zeigt auch den Wert der Millisekundenkomponente, die bildet den Bruchteil der Wert von dessen <xref:System.TimeSpan.TotalSeconds%2A> Eigenschaft.  
  
 [!code-csharp[System.TimeSpan.TotalSeconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.totalseconds/cs/totalseconds.cs#1)]
 [!code-vb[System.TimeSpan.TotalSeconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.totalseconds/vb/totalseconds.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeSpan.Seconds" />
        <altmember cref="P:System.TimeSpan.TotalMilliseconds" />
        <altmember cref="P:System.TimeSpan.TotalMinutes" />
        <altmember cref="P:System.TimeSpan.TotalHours" />
        <altmember cref="P:System.TimeSpan.TotalDays" />
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = null, IFormatProvider formatProvider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = null, Optional formatProvider As IFormatProvider = null) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryFormat : Span&lt;char&gt; *  * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool" Usage="timeSpan.TryFormat (destination, charsWritten, format, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="charsWritten">To be added.</param>
        <param name="format">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konvertiert die angegebene Zeichenfolgendarstellung eines Zeitintervalls in die entsprechende <see cref="T:System.TimeSpan" /> und gibt einen Wert zurück, der angibt, ob die Konvertierung erfolgreich ausgeführt wurde.</summary>
        <altmember cref="Overload:System.TimeSpan.Parse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, out TimeSpan result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, [out] valuetype System.TimeSpan&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.TryParse(System.ReadOnlySpan{System.Char},System.TimeSpan@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), ByRef result As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, [Runtime::InteropServices::Out] TimeSpan % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; *  -&gt; bool" Usage="System.TimeSpan.TryParse (s, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="result" Type="System.TimeSpan" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out TimeSpan result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, [out] valuetype System.TimeSpan&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.TryParse(System.String,System.TimeSpan@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, ByRef result As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, [Runtime::InteropServices::Out] TimeSpan % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string *  -&gt; bool" Usage="System.TimeSpan.TryParse (s, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="result" Type="System.TimeSpan" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">Eine Zeichenfolge, die das zu konvertierende Zeitintervall angibt.</param>
        <param name="result">Diese Methode gibt entweder ein Objekt zurück, das das durch <c>s</c> angegebene Zeitintervall darstellt, oder <see cref="F:System.TimeSpan.Zero" />, wenn die Konvertierung nicht ausgeführt werden konnte. Dieser Parameter wird nicht initialisiert übergeben.</param>
        <summary>Konvertiert die Zeichenfolgendarstellung eines Zeitintervalls in die entsprechende <see cref="T:System.TimeSpan" /> und gibt einen Wert zurück, der angibt, ob die Konvertierung erfolgreich durchgeführt wurde.</summary>
        <returns>
          <see langword="true" />, wenn <paramref name="s" /> erfolgreich konvertiert wurde, andernfalls <see langword="false" />. Dieser Vorgang gibt <see langword="false" /> zurück, wenn der <paramref name="s" />-Parameter gleich <see langword="null" /> oder <see cref="F:System.String.Empty" /> ist, ein ungültiges Format aufweist, ein Zeitintervall kleiner als <see cref="F:System.TimeSpan.MinValue" /> oder größer als <see cref="F:System.TimeSpan.MaxValue" /> darstellt oder mindestens eine der Komponenten für Tage, Stunden, Minuten oder Sekunden außerhalb des zulässigen Bereichs liegt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.TimeSpan.TryParse%2A> Methode entspricht der <xref:System.TimeSpan.Parse%28System.String%29?displayProperty=nameWithType> -Methode, mit dem Unterschied, dass die It keine Ausnahme auslöst, wenn die Konvertierung schlägt fehl.  
  
 Die `s` -Parameter enthält eine Uhrzeit-Intervall-Spezifikation in der Form:  
  
 [*ws*] [-] { *d* &#124; *d*. *Hh*:*mm*[:*ss*[. *FF*]] &#124; *Hh*:*mm*[:*ss*[. *FF*]]} [*ws*]  
  
 Elemente in eckigen Klammern ([ und ]) sind optional. Eine Auswahl aus der Liste der alternativen, die in geschweiften Klammern ({und}) und durch senkrechte Striche getrennt (&#124;) ist erforderlich. In der folgenden Tabelle wird jedes Element beschrieben.  
  
|Element|Beschreibung |  
|-------------|-----------------|  
|*ws*|Optionalen Leerzeichen.|  
|-|Ein optionales Minuszeichen, womit eine Negative <xref:System.TimeSpan>.|  
|*d*|Tage, im Bereich von 0 10.675.199 sein.|  
|sein.|Ein kulturabhängige-Symbol, die Tage von Stunden trennt. Invariante Format verwendet, einen Punkt (".") Zeichen.|  
|*hh*|Stunden, zwischen 0 und 23.|  
|:|Das Trennzeichen für kulturabhängige Zeit. Das unveränderliche Format verwendet, einen Doppelpunkt (":") Zeichen.|  
|*mm*|Minuten, im Bereich von 0 bis 59.|  
|*ss*|Sekunden, optional im Bereich von 0 bis 59.|  
|sein.|Eine kulturabhängige-Symbol, das Sekunden von Sekundenbruchteilen getrennt werden. Invariante Format verwendet, einen Punkt (".") Zeichen.|  
|*ff*|Optionale Bruchteile von Sekunden, bestehend aus 1 bis 7 Dezimalstellen.|  
  
 Die Komponenten der `s` müssen zusammen angeben ein bestimmten Zeitintervalls, die größer als oder gleich ist <xref:System.TimeSpan.MinValue?displayProperty=nameWithType> und kleiner als oder gleich <xref:System.TimeSpan.MaxValue?displayProperty=nameWithType>.  
  
 Die <xref:System.TimeSpan.Parse%28System.String%29> Methode versucht, Analysieren `s` mit den einzelnen der kulturspezifische Formate für die aktuelle Kultur.  

## <a name="notes-to-callers"></a>Hinweise für Aufrufer

In einigen Fällen, wenn eine Zeit in der zu analysierende Zeichenfolge mehr als sieben Ziffern enthält Analyse der Vorgänge, die in der .NET Framework 3.5 und früheren Versionen erfolgreich ausgeführt werden unter Umständen fehl und löst eine <see cref="T:System.OverflowException" /> in der .NET Framework 4 und höher. Das folgende Beispiel veranschaulicht dieses Szenario.  
[!code-csharp[System.TimeSpan.TryParse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.TryParse/cs/tryparsefailure1.cs#3)]
[!code-vb[System.TimeSpan.TryParse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.TryParse/vb/tryparsefailure1.vb#3)]
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.TimeSpan.TryParse%2A> Methode zum Erstellen <xref:System.TimeSpan> Objekte aus gültigen <xref:System.TimeSpan> Zeichenfolgen und anzugeben, wenn der Analysevorgang fehlgeschlagen ist, da es sich bei TimeSpan-Zeichenfolge ist ungültig.  
  
 [!code-csharp[System.TimeSpan.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.TryParse/cs/TryParse1.cs#1)]
 [!code-vb[System.TimeSpan.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.TryParse/vb/TryParse1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; input, IFormatProvider formatProvider, out TimeSpan result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; input, class System.IFormatProvider formatProvider, [out] valuetype System.TimeSpan&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.TimeSpan@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, ByRef result As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; input, IFormatProvider ^ formatProvider, [Runtime::InteropServices::Out] TimeSpan % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * IFormatProvider *  -&gt; bool" Usage="System.TimeSpan.TryParse (input, formatProvider, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.TimeSpan" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string input, IFormatProvider formatProvider, out TimeSpan result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string input, class System.IFormatProvider formatProvider, [out] valuetype System.TimeSpan&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.TryParse(System.String,System.IFormatProvider,System.TimeSpan@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As String, formatProvider As IFormatProvider, ByRef result As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ input, IFormatProvider ^ formatProvider, [Runtime::InteropServices::Out] TimeSpan % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * IFormatProvider *  -&gt; bool" Usage="System.TimeSpan.TryParse (input, formatProvider, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.TimeSpan" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">Eine Zeichenfolge, die das zu konvertierende Zeitintervall angibt.</param>
        <param name="formatProvider">Ein Objekt, das kulturspezifische Formatierungsinformationen bereitstellt.</param>
        <param name="result">Diese Methode gibt entweder ein Objekt zurück, das das durch <c>input</c> angegebene Zeitintervall darstellt, oder <see cref="F:System.TimeSpan.Zero" />, wenn die Konvertierung nicht ausgeführt werden konnte. Dieser Parameter wird nicht initialisiert übergeben.</param>
        <summary>Konvertiert die Zeichenfolgendarstellung eines Zeitintervalls unter Verwendung der angegebenen kulturspezifischen Formatierungsinformationen in die entsprechende <see cref="T:System.TimeSpan" /> und gibt einen Wert zurück, der angibt, ob die Konvertierung erfolgreich abgeschlossen wurde.</summary>
        <returns>
          <see langword="true" />, wenn <paramref name="input" /> erfolgreich konvertiert wurde, andernfalls <see langword="false" />. Dieser Vorgang gibt <see langword="false" /> zurück, wenn der <paramref name="input" />-Parameter gleich <see langword="null" /> oder <see cref="F:System.String.Empty" /> ist, ein ungültiges Format aufweist, ein Zeitintervall kleiner als <see cref="F:System.TimeSpan.MinValue" /> oder größer als <see cref="F:System.TimeSpan.MaxValue" /> darstellt oder mindestens eine der Komponenten für Tage, Stunden, Minuten oder Sekunden außerhalb des zulässigen Bereichs liegt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.TimeSpan.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.TimeSpan%40%29> Methode entspricht der <xref:System.TimeSpan.Parse%28System.String%2CSystem.IFormatProvider%29> -Methode, mit dem Unterschied, dass die It keine Ausnahme auslöst, wenn die Konvertierung schlägt fehl.  
  
 Die `input` -Parameter enthält eine Uhrzeit-Intervall-Spezifikation in der Form:  
  
 [*ws*] [-] { *d* &#124; *d*. *Hh*:*mm*[:*ss*[. *FF*]] &#124; *Hh*:*mm*[:*ss*[. *FF*]]} [*ws*]  
  
 Elemente in eckigen Klammern ([ und ]) sind optional. Eine Auswahl aus der Liste der alternativen, die in geschweiften Klammern ({und}) und durch senkrechte Striche getrennt (&#124;) ist erforderlich. In der folgenden Tabelle wird jedes Element beschrieben.  
  
|Element|Beschreibung |  
|-------------|-----------------|  
|*ws*|Optionalen Leerzeichen.|  
|-|Ein optionales Minuszeichen, womit eine Negative <xref:System.TimeSpan>.|  
|*d*|Tage, im Bereich von 0 10.675.199 sein.|  
|sein.|Ein kulturabhängige-Symbol, die Tage von Stunden trennt. Invariante Format verwendet, einen Punkt (".") Zeichen.|  
|*hh*|Stunden, zwischen 0 und 23.|  
|:|Das Trennzeichen für kulturabhängige Zeit. Das unveränderliche Format verwendet, einen Doppelpunkt (":") Zeichen.|  
|*mm*|Minuten, im Bereich von 0 bis 59.|  
|*ss*|Sekunden, optional im Bereich von 0 bis 59.|  
|sein.|Eine kulturabhängige-Symbol, das Sekunden von Sekundenbruchteilen getrennt werden. Invariante Format verwendet, einen Punkt (".") Zeichen.|  
|*ff*|Optionale Bruchteile von Sekunden, bestehend aus 1 bis 7 Dezimalstellen.|  
  
 Die Komponenten der `input` müssen zusammen angeben ein bestimmten Zeitintervalls, die größer als oder gleich ist <xref:System.TimeSpan.MinValue?displayProperty=nameWithType> und kleiner als oder gleich <xref:System.TimeSpan.MaxValue?displayProperty=nameWithType>.  
  
 Die <xref:System.TimeSpan.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.TimeSpan%40%29> Methode versucht, Analysieren `input` mit den einzelnen der kulturspezifische Formate für die Kultur, die anhand des `formatProvider`.  
  
 Die `formatProvider` -Parameter ist ein <xref:System.IFormatProvider> Implementierung, die kulturspezifische Informationen zum Format der zurückgegebenen Zeichenfolge bereitstellt. Die `formatProvider` Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo> -Objekt, das die Kultur, deren Formatierungskonventionen darstellt sollen in die zurückgegebene Zeichenfolge übernommen. Die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> Eigenschaft definiert die Formatierung der zurückgegebenen Zeichenfolge.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo> Objekt, das definiert, die Formatierung der zurückgegebenen Zeichenfolge.  
  
-   Ein benutzerdefiniertes Objekt, das implementiert die <xref:System.IFormatProvider> Schnittstelle. Die <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> Methode gibt eine <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das Formatierungsinformationen bereitstellt.  
  
 Wenn `formatProvider` ist `null`, <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das der aktuellen Kultur zugeordnet ist, wird verwendet.  
  
## <a name="notes-to-callers"></a>Hinweise für Aufrufer
 
In einigen Fällen, wenn eine Zeit in der Zeichenfolge analysiert werden mehr als sieben Ziffern enthält, Analysieren von Vorgängen, die erfolgreich sind und <see langword="true" /> in .NET Framework 3.5 und früheren Versionen fehlschlagen und zurückgegeben können <see langword="false" /> in.NET Framework 4 und höheren Versionen das folgende Beispiel veranschaulicht dieses Szenario.  
  
 [!code-csharp[System.TimeSpan.TryParse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.TryParse/cs/tryparsefailure1.cs#3)]
 [!code-vb[System.TimeSpan.TryParse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.TryParse/vb/tryparsefailure1.vb#3)]
  
## Examples  
 Das folgende Beispiel definiert ein Array von <xref:System.Globalization.CultureInfo> -Objekte und verwendet Sie jedes Objekt in Aufrufe an die <xref:System.TimeSpan.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.TimeSpan%40%29> Methode, um die Elemente in einem Zeichenfolgenarray zu analysieren. Im Beispiel wird veranschaulicht, wie die Konventionen einer bestimmten Kultur den Formatierungsvorgang beeinflussen.  
  
 [!code-csharp[System.TimeSpan.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.TryParse/cs/tryparse2.cs#2)]
 [!code-vb[System.TimeSpan.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.TryParse/vb/tryparse2.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Konvertiert die Zeichenfolgendarstellung eines Zeitintervalls in die entsprechende <see cref="T:System.TimeSpan" /> und gibt einen Wert zurück, der angibt, ob die Konvertierung erfolgreich durchgeführt wurde. Das Format der Zeichenfolgendarstellung muss einem angegebenen Format genau entsprechen.</summary>
        <altmember cref="Overload:System.TimeSpan.ParseExact" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider formatProvider, out TimeSpan result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider, [out] valuetype System.TimeSpan&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.TimeSpan@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, ByRef result As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider ^ formatProvider, [Runtime::InteropServices::Out] TimeSpan % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider *  -&gt; bool" Usage="System.TimeSpan.TryParseExact (input, format, formatProvider, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.TimeSpan" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="format">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; input, string[] formats, IFormatProvider formatProvider, out TimeSpan result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, string[] formats, class System.IFormatProvider formatProvider, [out] valuetype System.TimeSpan&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.TimeSpan@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As ReadOnlySpan(Of Char), formats As String(), formatProvider As IFormatProvider, ByRef result As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, [Runtime::InteropServices::Out] TimeSpan % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider *  -&gt; bool" Usage="System.TimeSpan.TryParseExact (input, formats, formatProvider, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.TimeSpan" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="formats">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string format, IFormatProvider formatProvider, out TimeSpan result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string format, class System.IFormatProvider formatProvider, [out] valuetype System.TimeSpan&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.TryParseExact(System.String,System.String,System.IFormatProvider,System.TimeSpan@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As String, format As String, formatProvider As IFormatProvider, ByRef result As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider, [Runtime::InteropServices::Out] TimeSpan % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string * IFormatProvider *  -&gt; bool" Usage="System.TimeSpan.TryParseExact (input, format, formatProvider, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.TimeSpan" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">Eine Zeichenfolge, die das zu konvertierende Zeitintervall angibt.</param>
        <param name="format">Eine standardmäßige oder benutzerdefinierte Formatierungszeichenfolge, die das erforderliche Format von <c>input</c> definiert.</param>
        <param name="formatProvider">Ein Objekt, das kulturspezifische Formatierungsinformationen bereitstellt.</param>
        <param name="result">Diese Methode gibt entweder ein Objekt zurück, das das durch <c>input</c> angegebene Zeitintervall darstellt, oder <see cref="F:System.TimeSpan.Zero" />, wenn die Konvertierung nicht ausgeführt werden konnte. Dieser Parameter wird nicht initialisiert übergeben.</param>
        <summary>Konvertiert die Zeichenfolgendarstellung eines Zeitintervalls unter Verwendung des angegebenen Formats und der kulturspezifischen Formatierungsinformationen in die entsprechende <see cref="T:System.TimeSpan" /> und gibt einen Wert zurück, der angibt, ob die Konvertierung erfolgreich abgeschlossen wurde. Das Format der Zeichenfolgendarstellung muss dem angegebenen Format genau entsprechen.</summary>
        <returns>
          <see langword="true" />, wenn <paramref name="input" /> erfolgreich konvertiert wurde, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.TimeSpan%40%29> -Methode analysiert die angegebene Zeichenfolgendarstellung eines Zeitintervalls, der das Format von definiert sein muss die `format` Parameter, mit dem Unterschied, führende und nachfolgende Leerzeichen ignoriert werden. Diese Methode ähnelt der <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29> -Methode, mit dem Unterschied, dass die It keine Ausnahme auslöst, wenn die Konvertierung schlägt fehl.  
  
 Die `format` Parameter ist eine Zeichenfolge, enthält entweder einen einzelnen standardbuild-Formatbezeichner oder ein oder mehrere benutzerdefinierte Formatbezeichner, die definieren, das erforderliche Format von `input`. Weitere Informationen zu gültigen Formatzeichenfolgen finden Sie unter [TimeSpan-Standardformatzeichenfolgen](~/docs/standard/base-types/standard-timespan-format-strings.md) und [benutzerdefinierte TimeSpan-Formatzeichenfolgen](~/docs/standard/base-types/custom-timespan-format-strings.md).  
  
> [!IMPORTANT]
>  Die <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.TimeSpan%40%29> Methode verwendet die Konventionen der Kultur angegeben werden, indem die `formatProvider` Parameter nur, wenn `format` ist ein Standard <xref:System.TimeSpan> Formatzeichenfolge, deren Wert "g" oder "G ist". Verwenden die Formatierungskonventionen der invarianten Kultur, das "c", "t" und "T" standard verwendete Formatzeichenfolgen. Benutzerdefinierte Formatzeichenfolgen, definieren Sie das genaue Format der Eingabezeichenfolge und Literalzeichen verwenden, um die Komponenten eines bestimmten Zeitintervalls zu trennen.  
  
 Die `formatProvider` -Parameter ist ein <xref:System.IFormatProvider> Implementierung, die kulturspezifische Informationen zum Format der zurückgegebenen Zeichenfolge bereitstellt, wenn `format` ist eine Standardformatzeichenfolge. Die `formatProvider` Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo> -Objekt, das die Kultur, deren Formatierungskonventionen darstellt sollen in die zurückgegebene Zeichenfolge übernommen. Die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> Eigenschaft definiert die Formatierung der zurückgegebenen Zeichenfolge.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo> Objekt, das definiert, die Formatierung der zurückgegebenen Zeichenfolge.  
  
-   Ein benutzerdefiniertes Objekt, das implementiert die <xref:System.IFormatProvider> Schnittstelle. Die <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> Methode gibt eine <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das Formatierungsinformationen bereitstellt.  
  
 Wenn `formatProvider` ist `null`, <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das der aktuellen Kultur zugeordnet ist, wird verwendet.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%2CSystem.TimeSpan%40%29> Methode, um mehrere zeichenfolgenentsprechungen von Zeitintervallen mit verschiedenen Formatzeichenfolgen und Kulturen zu analysieren.  
  
 [!code-csharp[System.TimeSpan.TryParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.tryparseexact/cs/tryparseexactexample1.cs#1)]
 [!code-vb[System.TimeSpan.TryParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.tryparseexact/vb/tryparseexactexample1.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/standard-timespan-format-strings.md">TimeSpan-Standardformatzeichenfolgen</related>
        <related type="Article" href="~/docs/standard/base-types/custom-timespan-format-strings.md">Benutzerdefinierte TimeSpan-Formatzeichenfolgen</related>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string[] formats, IFormatProvider formatProvider, out TimeSpan result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string[] formats, class System.IFormatProvider formatProvider, [out] valuetype System.TimeSpan&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.TryParseExact(System.String,System.String[],System.IFormatProvider,System.TimeSpan@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As String, formats As String(), formatProvider As IFormatProvider, ByRef result As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, [Runtime::InteropServices::Out] TimeSpan % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string[] * IFormatProvider *  -&gt; bool" Usage="System.TimeSpan.TryParseExact (input, formats, formatProvider, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.TimeSpan" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">Eine Zeichenfolge, die das zu konvertierende Zeitintervall angibt.</param>
        <param name="formats">Ein Array von standardmäßigen oder benutzerdefinierten Formatierungszeichenfolgen, die die zulässigen Formate von <c>input</c> definieren.</param>
        <param name="formatProvider">Ein Objekt, das kulturspezifische Formatierungsinformationen bereitstellt.</param>
        <param name="result">Diese Methode gibt entweder ein Objekt zurück, das das durch <c>input</c> angegebene Zeitintervall darstellt, oder <see cref="F:System.TimeSpan.Zero" />, wenn die Konvertierung nicht ausgeführt werden konnte. Dieser Parameter wird nicht initialisiert übergeben.</param>
        <summary>Konvertiert die angegebene Zeichenfolgendarstellung eines Zeitintervalls unter Verwendung der angegebenen Formate und kulturspezifischen Formatierungsinformationen in die entsprechende <see cref="T:System.TimeSpan" /> und gibt einen Wert zurück, der angibt, ob die Konvertierung erfolgreich abgeschlossen wurde. Das Format der Zeichenfolgendarstellung muss einem der angegebenen Formate genau entsprechen.</summary>
        <returns>
          <see langword="true" />, wenn <paramref name="input" /> erfolgreich konvertiert wurde, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.TimeSpan%40%29> -Methode analysiert die angegebene Zeichenfolgendarstellung eines Zeitintervalls, der das Format, die durch eine Formatzeichenfolge gemäß definiert sein muss die `formats` Parameter, mit dem Unterschied, führende und nachfolgende Leerzeichen ignoriert werden. Diese Methode ähnelt der <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%29> -Methode, mit dem Unterschied, dass die It keine Ausnahme auslöst, wenn die Konvertierung schlägt fehl.  
  
 Die `formats` -Parameter ist ein Zeichenfolgen-Array, dessen Elemente bestehen aus einer einzelnen Standardformatbezeichner oder eine oder mehrere benutzerdefinierte Formatbezeichner, die definieren, das erforderliche Format von `input`. Weitere Informationen zu gültigen Formatzeichenfolgen finden Sie unter [TimeSpan-Standardformatzeichenfolgen](~/docs/standard/base-types/standard-timespan-format-strings.md) und [benutzerdefinierte TimeSpan-Formatzeichenfolgen](~/docs/standard/base-types/custom-timespan-format-strings.md). `input` muss genau auf einen Member entsprechen `formats` damit der Analysevorgang erfolgreich ist. Der Analysevorgang versucht wird, entsprechend `input` auf jedes Element im `formats` mit dem ersten Element im Array ab.  
  
> [!IMPORTANT]
>  Die <xref:System.TimeSpan.TryParseExact%2A> Methode verwendet die Konventionen der Kultur angegeben werden, indem die `formatProvider` Parameter nur, wenn die Formatzeichenfolge zum Analysieren verwendet `input` ist ein Standard <xref:System.TimeSpan> Formatzeichenfolge, deren Wert "g" oder "G ist". Verwenden die Formatierungskonventionen der invarianten Kultur, das "c", "t" und "T" standard verwendete Formatzeichenfolgen. Benutzerdefinierte Formatzeichenfolgen, definieren Sie das genaue Format der Eingabezeichenfolge und Literalzeichen verwenden, um die Komponenten eines bestimmten Zeitintervalls zu trennen.  
  
 Die `formatProvider` -Parameter ist ein <xref:System.IFormatProvider> Implementierung, die kulturspezifische Informationen zum Format der zurückgegebenen Zeichenfolge bereitstellt, wenn die Formatzeichenfolge zum Analysieren verwendet `input` ist eine Standardformatzeichenfolge. Die `formatProvider` Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo> -Objekt, das die Kultur, deren Formatierungskonventionen darstellt sollen in die zurückgegebene Zeichenfolge übernommen. Die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> Eigenschaft definiert die Formatierung der zurückgegebenen Zeichenfolge.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo> Objekt, das definiert, die Formatierung der zurückgegebenen Zeichenfolge.  
  
-   Ein benutzerdefiniertes Objekt, das implementiert die <xref:System.IFormatProvider> Schnittstelle. Die <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> Methode gibt eine <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das Formatierungsinformationen bereitstellt.  
  
 Wenn `formatProvider` ist `null`, <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das der aktuellen Kultur zugeordnet ist, wird verwendet.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.TimeSpan%40%29> Methode, um jedes Element ein Zeichenfolgenarray, das Konvertieren einer <xref:System.TimeSpan> Wert. Im Beispiel werden die Zeichenfolgen unter Verwendung der Formatierungskonventionen der die Kultur Französisch - Frankreich ("fr-FR") interpretiert. Die Zeichenfolgen können ein bestimmten Zeitintervalls in die Allgemeines kurzes Format oder die Allgemeines Langformat dargestellt werden.  
  
 Darüber hinaus ändert sich das Beispiel die Möglichkeit, in der die Analysemethoden der Uhrzeit-Intervall eine einzelne folgende Ziffer zu interpretieren. Normalerweise wird eine einzelne folgende Ziffer als die Anzahl der Tage in einem Zeitintervall interpretiert. Stattdessen die `%h` benutzerdefinierte Formatzeichenfolge wird verwendet, um eine einzelne folgende Ziffer als die Anzahl von Stunden interpretiert werden soll. Für diese Änderung wirksam wird, beachten Sie, dass die `%h` benutzerdefinierte Formatzeichenfolge muss vor die anderen Formatzeichenfolgen in stehen die `formats` Array.  
  
 [!code-csharp[System.TimeSpan.TryParseExact#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.tryparseexact/cs/tryparseexactexample3.cs#3)]
 [!code-vb[System.TimeSpan.TryParseExact#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.tryparseexact/vb/tryparseexactexample3.vb#3)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/standard-timespan-format-strings.md">TimeSpan-Standardformatzeichenfolgen</related>
        <related type="Article" href="~/docs/standard/base-types/custom-timespan-format-strings.md">Benutzerdefinierte TimeSpan-Formatzeichenfolgen</related>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider formatProvider, System.Globalization.TimeSpanStyles styles, out TimeSpan result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider, valuetype System.Globalization.TimeSpanStyles styles, [out] valuetype System.TimeSpan&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, styles As TimeSpanStyles, ByRef result As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider ^ formatProvider, System::Globalization::TimeSpanStyles styles, [Runtime::InteropServices::Out] TimeSpan % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.TimeSpanStyles *  -&gt; bool" Usage="System.TimeSpan.TryParseExact (input, format, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.TimeSpanStyles" />
        <Parameter Name="result" Type="System.TimeSpan" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="format">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="styles">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; input, string[] formats, IFormatProvider formatProvider, System.Globalization.TimeSpanStyles styles, out TimeSpan result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.TimeSpanStyles styles, [out] valuetype System.TimeSpan&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As ReadOnlySpan(Of Char), formats As String(), formatProvider As IFormatProvider, styles As TimeSpanStyles, ByRef result As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, System::Globalization::TimeSpanStyles styles, [Runtime::InteropServices::Out] TimeSpan % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.TimeSpanStyles *  -&gt; bool" Usage="System.TimeSpan.TryParseExact (input, formats, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.TimeSpanStyles" />
        <Parameter Name="result" Type="System.TimeSpan" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="formats">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="styles">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string format, IFormatProvider formatProvider, System.Globalization.TimeSpanStyles styles, out TimeSpan result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string format, class System.IFormatProvider formatProvider, valuetype System.Globalization.TimeSpanStyles styles, [out] valuetype System.TimeSpan&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As String, format As String, formatProvider As IFormatProvider, styles As TimeSpanStyles, ByRef result As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider, System::Globalization::TimeSpanStyles styles, [Runtime::InteropServices::Out] TimeSpan % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string * IFormatProvider * System.Globalization.TimeSpanStyles *  -&gt; bool" Usage="System.TimeSpan.TryParseExact (input, format, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.TimeSpanStyles" />
        <Parameter Name="result" Type="System.TimeSpan" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">Eine Zeichenfolge, die das zu konvertierende Zeitintervall angibt.</param>
        <param name="format">Eine standardmäßige oder benutzerdefinierte Formatierungszeichenfolge, die das erforderliche Format von <c>input</c> definiert.</param>
        <param name="formatProvider">Ein Objekt, das kulturspezifische Formatierungsinformationen bereitstellt.</param>
        <param name="styles">Ein oder mehrere Enumerationswerte, die den Stil von <c>input</c> angeben.</param>
        <param name="result">Diese Methode gibt entweder ein Objekt zurück, das das durch <c>input</c> angegebene Zeitintervall darstellt, oder <see cref="F:System.TimeSpan.Zero" />, wenn die Konvertierung nicht ausgeführt werden konnte. Dieser Parameter wird nicht initialisiert übergeben.</param>
        <summary>Konvertiert die Zeichenfolgendarstellung eines Zeitintervalls unter Verwendung des angegebenen Formats, der kulturspezifischen Formatierungsinformationen und Stile in die entsprechende <see cref="T:System.TimeSpan" /> und gibt einen Wert zurück, der angibt, ob die Konvertierung erfolgreich abgeschlossen wurde. Das Format der Zeichenfolgendarstellung muss dem angegebenen Format genau entsprechen.</summary>
        <returns>
          <see langword="true" />, wenn <paramref name="input" /> erfolgreich konvertiert wurde, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%2CSystem.TimeSpan%40%29> -Methode analysiert die angegebene Zeichenfolgendarstellung eines Zeitintervalls, der das Format von definiert sein muss die `format` Parameter, mit dem Unterschied, führende und nachfolgende Leerzeichen ignoriert werden. Diese Methode ähnelt der <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%29> -Methode, mit dem Unterschied, dass die It keine Ausnahme auslöst, wenn die Konvertierung schlägt fehl.  
  
 Die `format` Parameter ist eine Zeichenfolge, enthält entweder einen einzelnen standardbuild-Formatbezeichner oder ein oder mehrere benutzerdefinierte Formatbezeichner, die definieren, das erforderliche Format von `input`. Weitere Informationen zu gültigen Formatzeichenfolgen finden Sie unter [TimeSpan-Standardformatzeichenfolgen](~/docs/standard/base-types/standard-timespan-format-strings.md) und [benutzerdefinierte TimeSpan-Formatzeichenfolgen](~/docs/standard/base-types/custom-timespan-format-strings.md).  
  
 Die `formatProvider` -Parameter ist ein <xref:System.IFormatProvider> Implementierung, die kulturspezifische Informationen zum Format der zurückgegebenen Zeichenfolge bereitstellt, wenn `format` ist eine Standardformatzeichenfolge. Die `formatProvider` Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo> -Objekt, das die Kultur, deren Formatierungskonventionen darstellt sollen in die zurückgegebene Zeichenfolge übernommen. Die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> Eigenschaft definiert die Formatierung der zurückgegebenen Zeichenfolge.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo> Objekt, das definiert, die Formatierung der zurückgegebenen Zeichenfolge.  
  
-   Ein benutzerdefiniertes Objekt, das implementiert die <xref:System.IFormatProvider> Schnittstelle. Die <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> Methode gibt eine <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das Formatierungsinformationen bereitstellt.  
  
 Wenn `formatProvider` ist `null`, <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das der aktuellen Kultur zugeordnet ist, wird verwendet.  
  
 Die `styles` Parameter wirkt sich auf die Interpretation von Zeichenfolgen, die mit benutzerdefinierten Formatzeichenfolgen analysiert. Bestimmt, ob `input` wird als ein negatives Zeitintervall interpretiert, nur dann, wenn ein negativen Vorzeichen vorhanden ist (<xref:System.Globalization.TimeSpanStyles.None?displayProperty=nameWithType>), oder ob er immer als negatives Zeitintervall interpretiert wird (<xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=nameWithType>). Wenn <xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=nameWithType> nicht verwendet wird, `format` muss ein literales Minuszeichen enthalten (z. B. "\\-"), damit ein negatives Zeitintervall erfolgreich analysiert.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29> Methode, um mehrere zeichenfolgenentsprechungen von Zeitintervallen mit verschiedenen Formatzeichenfolgen und Kulturen zu analysieren. Darüber hinaus verwendet er die <xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=nameWithType> Wert, der jede Zeichenfolge als ein negatives Zeitintervall interpretiert werden soll. Die Ausgabe im Beispiel wird veranschaulicht, dass die <xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=nameWithType> Stil wirkt sich auf den Rückgabewert nur, wenn er mit benutzerdefinierten Formatzeichenfolgen verwendet wird.  
  
 [!code-csharp[System.TimeSpan.TryParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.tryparseexact/cs/tryparseexactexample2.cs#2)]
 [!code-vb[System.TimeSpan.TryParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.tryparseexact/vb/tryparseexactexample2.vb#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/standard-timespan-format-strings.md">TimeSpan-Standardformatzeichenfolgen</related>
        <related type="Article" href="~/docs/standard/base-types/custom-timespan-format-strings.md">Benutzerdefinierte TimeSpan-Formatzeichenfolgen</related>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string[] formats, IFormatProvider formatProvider, System.Globalization.TimeSpanStyles styles, out TimeSpan result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.TimeSpanStyles styles, [out] valuetype System.TimeSpan&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As String, formats As String(), formatProvider As IFormatProvider, styles As TimeSpanStyles, ByRef result As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, System::Globalization::TimeSpanStyles styles, [Runtime::InteropServices::Out] TimeSpan % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string[] * IFormatProvider * System.Globalization.TimeSpanStyles *  -&gt; bool" Usage="System.TimeSpan.TryParseExact (input, formats, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.TimeSpanStyles" />
        <Parameter Name="result" Type="System.TimeSpan" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">Eine Zeichenfolge, die das zu konvertierende Zeitintervall angibt.</param>
        <param name="formats">Ein Array von standardmäßigen oder benutzerdefinierten Formatierungszeichenfolgen, die die zulässigen Formate von <c>input</c> definieren.</param>
        <param name="formatProvider">Ein Objekt, das kulturspezifische Formatierungsinformationen bereitstellt.</param>
        <param name="styles">Ein oder mehrere Enumerationswerte, die den Stil von <c>input</c> angeben.</param>
        <param name="result">Diese Methode gibt entweder ein Objekt zurück, das das durch <c>input</c> angegebene Zeitintervall darstellt, oder <see cref="F:System.TimeSpan.Zero" />, wenn die Konvertierung nicht ausgeführt werden konnte. Dieser Parameter wird nicht initialisiert übergeben.</param>
        <summary>Konvertiert die angegebene Zeichenfolgendarstellung eines Zeitintervalls unter Verwendung der angegebenen Formate, kulturspezifischen Formatierungsinformationen und Stile in die entsprechende <see cref="T:System.TimeSpan" /> und gibt einen Wert zurück, der angibt, ob die Konvertierung erfolgreich abgeschlossen wurde. Das Format der Zeichenfolgendarstellung muss einem der angegebenen Formate genau entsprechen.</summary>
        <returns>
          <see langword="true" />, wenn <paramref name="input" /> erfolgreich konvertiert wurde, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%2CSystem.TimeSpan%40%29> -Methode analysiert die angegebene Zeichenfolgendarstellung eines Zeitintervalls, der das Format, die durch eine Formatzeichenfolge gemäß definiert sein muss die `formats` Parameter, mit dem Unterschied, führende und nachfolgende Leerzeichen ignoriert werden. Diese Methode ähnelt der <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%29> -Methode, mit dem Unterschied, dass die It keine Ausnahme auslöst, wenn die Konvertierung schlägt fehl.  
  
 Die `formats` -Parameter ist ein Zeichenfolgen-Array, dessen Elemente bestehen aus einer einzelnen Standardformatbezeichner oder eine oder mehrere benutzerdefinierte Formatbezeichner, die definieren, das erforderliche Format von `input`. Weitere Informationen zu gültigen Formatzeichenfolgen finden Sie unter [TimeSpan-Standardformatzeichenfolgen](~/docs/standard/base-types/standard-timespan-format-strings.md) und [benutzerdefinierte TimeSpan-Formatzeichenfolgen](~/docs/standard/base-types/custom-timespan-format-strings.md). `input` muss genau auf einen Member entsprechen `formats` damit der Analysevorgang erfolgreich ist. Der Analysevorgang versucht wird, entsprechend `input` auf jedes Element im `formats` mit dem ersten Element im Array ab.  
  
> [!IMPORTANT]
>  Die <xref:System.TimeSpan.ParseExact%2A> Methode verwendet die Konventionen der Kultur angegeben werden, indem die `formatProvider` Parameter nur, wenn die Formatzeichenfolge zum Analysieren verwendet `input` ist ein Standard <xref:System.TimeSpan> Formatzeichenfolge, deren Wert "g" oder "G ist". Verwenden die Formatierungskonventionen der invarianten Kultur, das "c", "t" und "T" standard verwendete Formatzeichenfolgen. Benutzerdefinierte Formatzeichenfolgen, definieren Sie das genaue Format der Eingabezeichenfolge und Literalzeichen verwenden, um die Komponenten eines bestimmten Zeitintervalls zu trennen.  
  
 Die `formatProvider` -Parameter ist ein <xref:System.IFormatProvider> Implementierung, die kulturspezifische Informationen zum Format der zurückgegebenen Zeichenfolge bereitstellt, wenn die Formatzeichenfolge zum Analysieren verwendet `input` ist eine Standardformatzeichenfolge. Die `formatProvider` Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo> -Objekt, das die Kultur, deren Formatierungskonventionen darstellt sollen in die zurückgegebene Zeichenfolge übernommen. Die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> Eigenschaft definiert die Formatierung der zurückgegebenen Zeichenfolge.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo> Objekt, das definiert, die Formatierung der zurückgegebenen Zeichenfolge.  
  
-   Ein benutzerdefiniertes Objekt, das implementiert die <xref:System.IFormatProvider> Schnittstelle. Die <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> Methode gibt eine <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das Formatierungsinformationen bereitstellt.  
  
 Wenn `formatProvider` ist `null`, <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das der aktuellen Kultur zugeordnet ist, wird verwendet.  
  
 Die `styles` Parameter wirkt sich auf die Interpretation von Zeichenfolgen, die mit benutzerdefinierten Formatzeichenfolgen analysiert werden. Bestimmt, ob `input` wird als ein negatives Zeitintervall interpretiert, nur dann, wenn ein negativen Vorzeichen vorhanden ist (<xref:System.Globalization.TimeSpanStyles.None?displayProperty=nameWithType>), oder ob er immer als negatives Zeitintervall interpretiert wird (<xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=nameWithType>). Wenn <xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=nameWithType> nicht verwendet wird, `format` muss ein literales Minuszeichen enthalten (z. B. "\\-"), damit ein negatives Zeitintervall erfolgreich analysiert.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%2CSystem.TimeSpan%40%29> Methode, um jedes Element ein Zeichenfolgenarray, das Konvertieren einer <xref:System.TimeSpan> Wert. Die Zeichenfolgen können ein bestimmten Zeitintervalls in die Allgemeines kurzes Format oder die Allgemeines Langformat dargestellt werden.  
  
 Darüber hinaus ändert sich das Beispiel die Möglichkeit, in der die Analysemethoden der Uhrzeit-Intervall eine einzelne folgende Ziffer zu interpretieren. Normalerweise wird eine einzelne folgende Ziffer als die Anzahl der Tage in einem Zeitintervall interpretiert. Stattdessen die `%h` benutzerdefinierte Formatzeichenfolge wird verwendet, um eine einzelne folgende Ziffer als die Anzahl von Stunden interpretiert werden soll. Für diese Änderung wirksam wird, beachten Sie, dass die `%h` benutzerdefinierte Formatzeichenfolge muss vor die anderen Formatzeichenfolgen in stehen die `formats` Array. Beachten Sie auch aus der Ausgabe, die die <xref:System.Globalization.TimeSpanStyles.AssumeNegative?displayProperty=nameWithType> im Methodenaufruf angegebene Kennzeichen werden verwendet, nur, wenn eine Zeichenfolge mit dem diese Formatbezeichner zu analysieren.  
  
 [!code-csharp[System.TimeSpan.TryParseExact#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.tryparseexact/cs/tryparseexactexample4.cs#4)]
 [!code-vb[System.TimeSpan.TryParseExact#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.tryparseexact/vb/tryparseexactexample4.vb#4)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/standard-timespan-format-strings.md">TimeSpan-Standardformatzeichenfolgen</related>
        <related type="Article" href="~/docs/standard/base-types/custom-timespan-format-strings.md">Benutzerdefinierte TimeSpan-Formatzeichenfolgen</related>
      </Docs>
    </Member>
    <Member MemberName="Zero">
      <MemberSignature Language="C#" Value="public static readonly TimeSpan Zero;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.TimeSpan Zero" />
      <MemberSignature Language="DocId" Value="F:System.TimeSpan.Zero" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Zero As TimeSpan " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly TimeSpan Zero;" />
      <MemberSignature Language="F#" Value=" staticval mutable Zero : TimeSpan" Usage="System.TimeSpan.Zero" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Stellt den <see cref="T:System.TimeSpan" />-Wert für 0 (null) dar. Dieses Feld ist schreibgeschützt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Da der Wert des der <xref:System.TimeSpan.Zero> Feld ist ein <xref:System.TimeSpan> -Objekt, das Time den Wert 0 stellt können Sie Sie vergleichen es mit anderen <xref:System.TimeSpan> Objekte zu bestimmen, ob die zweite positiv, nicht 0 (null) oder negative Zeitintervalle darstellen. Sie können dieses Feld auch verwenden, zum Initialisieren einer <xref:System.TimeSpan> Objekt, das Time einen Nullwert.  
  
   
  
## Examples  
 Im folgenden Beispiel verweist auf und zeigt den Wert der <xref:System.TimeSpan.Zero> Feld.  
  
 [!code-cpp[System.TimeSpan.Fields#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CPP/fields.cpp#1)]
 [!code-csharp[System.TimeSpan.Fields#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CS/fields.cs#1)]
 [!code-vb[System.TimeSpan.Fields#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Fields/VB/fields.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
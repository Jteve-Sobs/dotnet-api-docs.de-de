<Type Name="Console" FullName="System.Console">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="11975612915ad3e42f126e0e2802efa769e2d774" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48744424" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Console" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed Console extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Console" />
  <TypeSignature Language="VB.NET" Value="Public Class Console" />
  <TypeSignature Language="C++ CLI" Value="public ref class Console abstract sealed" />
  <TypeSignature Language="F#" Value="type Console = class" />
  <AssemblyInfo>
    <AssemblyName>System.Console</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt die Standardstreams für Eingabe, Ausgabe und Fehler bei Konsolenanwendungen dar. Diese Klasse kann nicht vererbt werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Konsole ist ein Betriebssystem-Fenster, in denen Benutzer mit dem Betriebssystem oder mit einer textbasierten Konsolenanwendung durch Eingabe von Texteingabe, über die Tastatur des Computers sowie durch Lesen der Ausgabe von Text über das Terminal Computer interagieren. Z. B. in das Windows-Betriebssystem, die Konsole wird im Eingabeaufforderungsfenster, und akzeptiert MS-DOS-Befehle. Die <xref:System.Console> -Klasse bietet grundlegende Unterstützung für Anwendungen, die Zeichen aus lesen und Schreiben von Zeichen in der Konsole.  
  
 Informationen zum Entwickeln von mit der <xref:System.Console> Klasse, finden Sie unter den folgenden Abschnitten:  
  
-   [Konsole e/a-Streams](#Streams)  
  
-   [Bildschirmpuffer und Konsolenfenster](#Buffer)  
  
-   [Unicode-Unterstützung für die Konsole](#Unicode)  
  
-   [Allgemeine Vorgänge](#Operations)  
  
-   [Anmerkungen zu dieser Version .NET core](#Core)  
  
<a name="Streams"></a>   
## <a name="console-io-streams"></a>Konsole e/a-Streams  
 Zu Beginn eine Konsolenanwendung, ordnet das Betriebssystem automatisch drei e/a-Streams mit der Konsole: Standard Eingabe Stream, den standard-Ausgabedatenstrom und Standard-Fehlerausgabestream. Ihre Anwendung kann Benutzereingaben aus dem Standardeingabestream gelesen werden; Schreiben Sie normale Daten in den Standardausgabestream. und Schreiben von Daten von Fehlern in den Standard-Fehlerausgabestream. Diese Streams werden angezeigt, als die Werte der an die Anwendung die <xref:System.Console.In%2A?displayProperty=nameWithType>, <xref:System.Console.Out%2A?displayProperty=nameWithType>, und <xref:System.Console.Error%2A?displayProperty=nameWithType> Eigenschaften.  
  
 Wird standardmäßig der Wert des der <xref:System.Console.In%2A> -Eigenschaft ist eine <xref:System.IO.TextReader?displayProperty=nameWithType> -Objekt, das darstellt, der Tastatur, und die Werte der <xref:System.Console.Out%2A> und <xref:System.Console.Error%2A> Eigenschaften sind <xref:System.IO.TextWriter?displayProperty=nameWithType> ein Konsolenfenster darstellende – Objekte. Allerdings können Sie diese Eigenschaften in Streams festlegen, die nicht die Konsolenfenster oder die Tastatur darstellen; Beispielsweise können Sie diese Eigenschaften in Streams festlegen, die Dateien darstellen. Rufen Sie die Standardeingabe, Standardausgabe oder Standardfehlerstream umgeleitet, die <xref:System.Console.SetIn%2A?displayProperty=nameWithType>, <xref:System.Console.SetOut%2A?displayProperty=nameWithType>, oder <xref:System.Console.SetError%2A?displayProperty=nameWithType> Methode bzw. E/a-Vorgänge, die diese Streams werden synchronisiert. was bedeutet, dass mehrere Threads können Lesen aus oder in Streams schreiben. Dies bedeutet, dass Methoden, die normalerweise asynchron, wie z. B. <xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=nameWithType>, synchron ausgeführt werden, wenn das Objekt einen Konsole Stream darstellt.  
  
> [!NOTE]
>  Verwenden Sie nicht die <xref:System.Console> Klasse zur Anzeige der Ausgabe im unbeaufsichtigten Anwendungen, z. B. Server-Anwendungen. Aufrufe von Methoden wie z. B. <xref:System.Console.Write%2A?displayProperty=nameWithType> und <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> wirken sich nicht im GUI-Anwendungen.  
  
 <xref:System.Console> Klassenmember, die normalerweise verwendet, wenn Sie der zugrunde liegenden Stream einer Konsole aufgefordert wird, können eine Ausnahme auslösen, wenn der Datenstrom, z. B. in einer Datei umgeleitet wird. Programmieren Sie Ihre Anwendung zum Abfangen von <xref:System.IO.IOException?displayProperty=nameWithType> Ausnahmen, wenn Sie einen Standardstream umgeleitet. Sie können auch die <xref:System.Console.IsOutputRedirected%2A>, <xref:System.Console.IsInputRedirected%2A>, und <xref:System.Console.IsErrorRedirected%2A> Eigenschaften fest, ob ein Standardstream umgeleitet wird, vor dem Ausführen eines Vorgangs, der auslöst, um eine <xref:System.IO.IOException?displayProperty=nameWithType> Ausnahme.  
  
 Manchmal ist es sinnvoll, die Elemente von der Streamobjekten, die durch dargestellt explizit aufrufen, die <xref:System.Console.In%2A>, <xref:System.Console.Out%2A>, und <xref:System.Console.Error%2A> Eigenschaften. Beispielsweise werden standardmäßig die <xref:System.Console.ReadLine%2A?displayProperty=nameWithType> Methode liest die Eingabe aus dem Standardeingabestream. Auf ähnliche Weise die <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> -Methode Daten in den Standardausgabestream geschrieben und die Daten ist Beendigung Zeichenfolge für den, d.h. ein Wagenrücklaufzeichen gefolgt und Zeilenvorschub ("\r\n"). Allerdings die <xref:System.Console> -Klasse bietet keine entsprechende Methode zum Schreiben von Daten in den Standard-Fehlerausgabestream oder eine Eigenschaft so ändern Sie die Zeichenfolge für den Zeilenabschluss für Daten, die in den Stream geschrieben.  
  
 Sie können dieses Problem beheben, indem Sie festlegen der <xref:System.IO.TextWriter.NewLine%2A?displayProperty=nameWithType> Eigenschaft der <xref:System.Console.Out%2A> oder <xref:System.Console.Error%2A> Eigenschaft, um eine andere Zeichenfolge beenden. Beispielsweise legt die folgende C#-Anweisung die Zeichenfolge für den Zeilenabschluss für den Standard-Fehlerausgabestream zwei Carriage return, Wagenrücklauf und Zeilenvorschub Sequenzen:  
  
 `Console.Error.NewLine = "\r\n\r\n";`  
  
 Sie können dann explizit aufrufen der <xref:System.IO.TextWriter.WriteLine%2A> -Methode der Stream-Objekt wie die folgende C#-Anweisung:  
  
 `Console.Error.WriteLine();`  
  
<a name="Buffer"></a>   
## <a name="screen-buffer-and-console-window"></a>Bildschirmpuffer und Konsolenfenster  
 Zwei eng verwandte Funktionen der Konsole werden den Bildschirmpuffer und das Konsolenfenster. Text ist tatsächlich lesen oder in Streams, die im Besitz von der Konsole geschrieben, aber angezeigt werden, zu lesen oder in einen Bereich, der im Besitz von Bildschirmpuffer die Konsole geschrieben werden. Bildschirmpuffer ist ein Attribut der Konsole, und ist organisiert, wie einem rechteckigen Raster mit Zeilen und Spalten, in dem jede Raster- oder Zeichenzelle, ein Zeichen enthalten kann. Jedes Zeichen hat eine eigene Vordergrundfarbe und jede Zeichenzelle verfügt über eine eigene Hintergrundfarbe.  
  
 Bildschirmpuffer ist über einen rechteckigen Bereich Namens im Konsolenfenster angezeigt. Das Konsolenfenster ist ein weiteres Attribut der Konsole. Es ist nicht die Konsole selbst, die ein Betriebssystem-Fenster ist. Das Konsolenfenster ist, die in Zeilen und Spalten angeordnet sind, ist kleiner als oder gleich der Größe des Bildschirmpuffers und kann auf verschiedene Bereiche des zugrunde liegenden Bildschirmpuffers anzeigen verschoben werden. Wenn Bildschirmpuffer größer als das Konsolenfenster ist, zeigt die Konsole automatisch Bildlaufleisten, damit das Konsolenfenster über Bildschirmpufferbereichs positioniert werden kann.  
  
 Ein Cursor gibt die Bildschirm Pufferposition ab, in denen Text aktuell gelesen oder geschrieben werden. Der Cursor kann ausgeblendet oder sichtbar gemacht werden, und seine Höhe kann geändert werden. Wenn der Cursor sichtbar ist, wird die Position des Konsolenfensters automatisch verschoben, damit der Cursor immer in der Ansicht befindet.  
  
 Der Ursprung Zeichenzellenkoordinaten in den Bildschirmpuffer ist der oberen linken Ecke, und die Position des Cursors und das Konsolenfenster werden relativ zum Ursprung gemessen. Verwenden Sie nullbasierten Indizes Positionen an. Geben Sie also die oberste Zeile als Zeile 0 und die am weitesten links stehende Spalte als Spalte 0. Ist der maximale Wert für die Zeilen- und Spaltenindizes <xref:System.Int16.MaxValue?displayProperty=nameWithType>.  
  
<a name="Unicode"></a>   
## <a name="unicode-support-for-the-console"></a>Unicode-Unterstützung für die Konsole  
 Im Allgemeinen wird die Konsole Eingabe liest und schreibt die Ausgabe mit der aktuellen Konsole-Codepage, die das Gebietsschema des Systems standardmäßig definiert. Eine Codepage kann nur eine Teilmenge der verfügbaren Unicode-Zeichen verarbeiten, also wenn Sie versuchen, Anzeige von Zeichen, die nicht von der Konsole eine bestimmte Codepage zugeordnet sind nicht alle Zeichen angezeigt werden, oder sie genau darstellen kann. Dieses Problem wird anhand des folgenden Beispiels veranschaulicht. Wird versucht, die Zeichen des Alphabets kyrillischen von U + 0410, U + 044F in der Konsole anzeigen. Wenn Sie das Beispiel auf einem System, die Konsole Codepage 437 verwendet ausführen, wird jedes Zeichen durch ein Fragezeichen (?) ersetzt, da die Zeichen in der Codepage 437 nicht kyrillische Zeichen zugeordnet werden.  
  
 [!code-csharp[System.Console.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.class/cs/unicode1.cs#1)]
 [!code-vb[System.Console.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.class/vb/unicode1.vb#1)]  
  
 Zusätzlich zur Unterstützung von Codepages, die <xref:System.Console> Klasse unterstützt UTF-8-Codierung mit der <xref:System.Text.UTF8Encoding> Klasse. Ab .NET Framework 4.5, den <xref:System.Console> -Klasse unterstützt außerdem die UTF-16-Codierung mit der <xref:System.Text.UnicodeEncoding> Klasse. Um Unicode-Zeichen in der Konsole anzuzeigen. Festlegen der <xref:System.Console.OutputEncoding%2A> Eigenschaft entweder <xref:System.Text.UTF8Encoding> oder <xref:System.Text.UnicodeEncoding>.  
  
 Unterstützung für Unicode-Zeichen muss den Encoder auf ein bestimmtes Unicodezeichen zu erkennen und erfordert außerdem eine Schriftart, die die Symbole, die zum Rendern dieses Zeichens erforderlich ist. Um erfolgreich ein Unicode-Zeichen in der Konsole anzuzeigen, muss die Konsole Schriftart zu einer nicht-Raster- oder TrueType-Schriftart, z. B. Consolas oder Lucida Console festgelegt werden. Das folgende Beispiel zeigt, wie Sie programmgesteuert die Schriftart aus eine Rasterschriftart Lucida Console auswählen können.  
  
 [!code-csharp[System.Console.Class.Unsafe#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.class.unsafe/cs/setfont1.cs#3)]
 [!code-vb[System.Console.Class.Unsafe#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.class.unsafe/vb/setfont1.vb#3)]  
  
 TrueType-Schriftarten können jedoch nur eine Teilmenge der Symbole angezeigt. So zeigt z. B. die Schriftart Lucida Console nur 643 von den ungefähr 64.000 verfügbaren Zeichen von U + 0021 bis U + FB02. Um anzuzeigen, die eine bestimmte Schriftart Zeichen unterstützt, öffnen Sie die **Schriftarten** Applet in der Systemsteuerung, wählen Sie die **finden Sie ein Zeichen** aus, und wählen Sie die Schriftart, deren Zeichensatz, den Sie, in der untersuchenmöchten** Schriftart** Liste mit den **Zeichenzuordnung** Fenster.  
  
 Windows verwendet die Verknüpfung von Schriftarten, um Symbole anzuzeigen, die in einer bestimmten Schriftart nicht verfügbar sind. Informationen zum Anzeigen von internationale Zeichensätze-schriftartverknüpfung, finden Sie unter [Globalisierung Schritt für Schritt: Schriftarten](http://go.microsoft.com/fwlink/?LinkId=229111). Verknüpfte Schriftarten werden im HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\FontLink\SystemLink Unterschlüssel der Registrierung definiert. Jeder Eintrag zugeordneten dieser Unterschlüssel auf den Namen einer Basisklasse Schriftart entspricht, und sein Wert ist ein Zeichenfolgenarray, das die Schriftartdateien definiert und die Schriftarten, die mit der Basisschriftart verknüpft sind. Jedes Element des Arrays definiert eine verknüpfte Schriftart und weist das Format *Schriftart Dateiname*,*Schriftartname*. Im folgende Beispiel wird veranschaulicht, wie Sie programmgesteuert definieren können eine verknüpfte Schriftart, die mit dem Namen SimSun finden Sie in eine Schriftartdatei, die mit dem Namen simsun.ttc, die vereinfachte Han Zeichen anzeigt.  
  
 [!code-csharp[System.Console.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.class/cs/fontlink1.cs#2)]
 [!code-vb[System.Console.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.class/vb/fontlink1.vb#2)]  
  
 Unicode-Unterstützung für die Konsole hat die folgenden Einschränkungen:  
  
-   UTF-32-Codierung wird nicht unterstützt. Die einzige unterstützte Unicode-Codierungen sind UTF-8 und UTF-16, die dargestellt werden. durch die <xref:System.Text.UTF8Encoding> und <xref:System.Text.UnicodeEncoding> Klassen.  
  
-   Bidirektionale Ausgabe wird nicht unterstützt.  
  
-   Anzeige von Zeichen außerhalb der grundlegenden mehrsprachigen Ebene (d. h. von Ersatzzeichenpaaren) wird nicht unterstützt, auch wenn sie in einer Schriftartdatei verknüpften definiert werden.  
  
-   Anzeige von Zeichen in komplizierten Skripts wird nicht unterstützt.  
  
-   Kombinieren von Zeichensequenzen (d. h. Zeichen, die aus einem Basiszeichen und mindestens eine Kombination von Zeichen bestehen) werden als separate Zeichen angezeigt. Um diese Einschränkung zu umgehen, können Sie die anzuzeigende Zeichenfolge, durch den Aufruf Normalisieren der <xref:System.String.Normalize%2A?displayProperty=nameWithType> Methode vor dem Senden der Ausgabe an die Konsole. Im folgenden Beispiel eine Zeichenfolge, enthält das Zeichen für die Kombination von, U + 0061 ist sequenzieren U + 0308 in der Konsole angezeigt wird, als zwei Zeichen, bevor die ausgegebene Zeichenfolge normalisiert wurde und als ein einzelnes Zeichen nach der <xref:System.String.Normalize%2A?displayProperty=nameWithType> Methode wird aufgerufen.  
  
     [!code-csharp[System.Console.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.class/cs/normalize1.cs#5)]
     [!code-vb[System.Console.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.class/vb/normalize1.vb#5)]  
  
     Beachten Sie, dass die Normalisierung über eine geeignete Lösung ist nur dann, wenn die Unicode-standard für das Zeichen eine vorab zusammengesetzte Form enthält, die einen bestimmten Combining entspricht, die Sequenz Zeichen.  
  
-   Wenn eine Schriftart ein Symbol für einen Codepunkt im Bereich private Verwendung bereitstellt, wird dieses Symbol angezeigt. Aber da Zeichen in der privaten Verwendungsbereich anwendungsspezifische sind, dies das erwartete Symbol möglicherweise nicht.  
  
 Das folgende Beispiel zeigt einen Bereich von Unicode-Zeichen in der Konsole an. Im Beispiel akzeptiert drei Parameter in der Befehlszeile: der Anfang des Bereichs angezeigt werden, das Ende des Bereichs, der Anzeige und der angibt, ob die aktuelle Konsole-Codierung verwendet (`false`) oder UTF-16-Codierung (`true`). Es wird davon ausgegangen, dass die Konsole eine TrueType-Schriftart verwendet wird.  
  
 [!code-csharp[System.Console.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.class/cs/example3.cs#4)]
 [!code-vb[System.Console.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.class/vb/example3.vb#4)]  
  
<a name="Operations"></a>   
## <a name="common-operations"></a>Allgemeine Vorgänge  
 Die <xref:System.Console> Klasse enthält die folgenden Methoden für die Konsoleneingabe zu lesen und Schreiben der Ausgabe der Konsole:  
  
-   Die Überladungen der <xref:System.Console.ReadKey%2A> Methode lesen ein einzelnes Zeichen.  
  
-   Die <xref:System.Console.ReadLine%2A> Methode liest eine ganze Zeile der Eingabe.  
  
-   Die <xref:System.Console.Write%2A> Überladungen der Methode eine Instanz eines Werttyps, ein Array von Zeichen oder einen Satz von Objekten in eine formatierte oder unformatierte Zeichenfolge konvertiert, und klicken Sie dann diese Zeichenfolge in die Konsole geschrieben.  
  
-   Legen Sie eine parallele Ausführung von <xref:System.Console.WriteLine%2A> methodenüberladungen, die gleiche als Zeichenfolge, Ausgabe der <xref:System.Console.Write%2A> überlädt, sondern auch hinzufügen eine Zeichenfolge für den beenden.  
  
 Die <xref:System.Console> Klasse enthält auch die Methoden und Eigenschaften für die folgenden Vorgänge ausführen:  
  
-   Abrufen oder Festlegen der Größe des Bildschirmpuffers. Die <xref:System.Console.BufferHeight%2A> und <xref:System.Console.BufferWidth%2A> Eigenschaften können Sie abrufen oder Festlegen der Puffer Höhe und Breite bzw. und <xref:System.Console.SetBufferSize%2A> Methode können Sie die Größe des Puffers in einen einzigen Methodenaufruf festgelegt.  
  
-   Abrufen oder Festlegen der Größe des Konsolenfensters. Die <xref:System.Console.WindowHeight%2A> und <xref:System.Console.WindowWidth%2A> Eigenschaften können Sie abrufen oder die Höhe und Breite bzw. festlegen und die <xref:System.Console.SetWindowSize%2A> Methode können Sie die Größe des Fensters in einem einzelnen Methodenaufruf festgelegt.  
  
-   Abrufen oder Festlegen der Größe des Cursors. Die <xref:System.Console.CursorSize%2A> Eigenschaft gibt die Höhe des Cursors in einer Zeichenzelle.  
  
-   Abrufen oder Festlegen der Position des Konsolenfensters relativ zum Bildschirmpuffer. Die <xref:System.Console.WindowTop%2A> und <xref:System.Console.WindowLeft%2A> Eigenschaften können Sie abrufen oder Festlegen der oberen Zeile und am weitesten links stehende Spalte des Bildschirmpuffers, die im Konsolenfenster angezeigt wird und die <xref:System.Console.SetWindowPosition%2A> Methode können Sie diese Werte in einem einzelnen Methodenaufruf festgelegt.  
  
-   Abrufen oder festlegen die Position des Cursors durch Abrufen oder Festlegen der <xref:System.Console.CursorTop%2A> und <xref:System.Console.CursorLeft%2A> Eigenschaften, oder legen Sie die Position des Cursors durch Aufrufen der <xref:System.Console.SetCursorPosition%2A> Methode.  
  
-   Verschieben oder Löschen von Daten in den Bildschirmpuffer durch Aufrufen der <xref:System.Console.MoveBufferArea%2A> oder <xref:System.Console.Clear%2A> Methode.  
  
-   Abrufen oder Festlegen der Vordergrund- und Hintergrundfarben mithilfe der <xref:System.Console.ForegroundColor%2A> und <xref:System.Console.BackgroundColor%2A> Eigenschaften oder Zurücksetzen der Hintergrund- und Vordergrundfarben die Standardfarben durch Aufrufen der <xref:System.Console.ResetColor%2A> Methode.  
  
-   Spielen Sie den Sound eines Signaltons dem Konsolenlautsprecher durch Aufrufen der <xref:System.Console.Beep%2A> Methode.  
  
<a name="Core"></a>   
## <a name="includenetcoreincludesnet-core-mdmd-notes"></a>[!INCLUDE[net_core](~/includes/net-core-md.md)] Anmerkungen zu dieser Version  
 In .NET Framework auf dem Desktop die <xref:System.Console> Klasse verwendet die Codierung von zurückgegebenen `GetConsoleCP` und `GetConsoleOutputCP`, die in der Regel wird eine Codepage-Codierung. Beispielsweise ist Code, auf Systemen, die mit der Kultur Englisch (Vereinigte Staaten), Codepage 437 ist die Codierung, die standardmäßig verwendet wird. Allerdings [!INCLUDE[net_core](~/includes/net-core-md.md)] kann nur eine beschränkte Teilmenge dieser Codierungen zur Verfügung stellen. Wenn dies der Fall ist <xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType> als die standardcodierung für die Konsole verwendet wird.  
  
 Wenn Ihre app auf bestimmte codepagecodierungen abhängig ist, können Sie weiterhin diese verfügbar machen wie folgt *vor* rufen Sie alle <xref:System.Console> Methoden:  
  
1.  Fügen Sie dem Projekt einen Verweis auf die Assembly System.Text.Encoding.CodePages.dll hinzu.  
  
2.  Abrufen der <xref:System.Text.EncodingProvider> -Objekt aus der <xref:System.Text.CodePagesEncodingProvider.Instance%2A?displayProperty=nameWithType> Eigenschaft.  
  
3.  Übergeben Sie die <xref:System.Text.EncodingProvider> -Objekt an die <xref:System.Text.Encoding.RegisterProvider%2A?displayProperty=nameWithType> Methode, um die zusätzlichen Codierungen, die von der Codierung der verfügbaren Anbieter unterstützt werden.  
  
 Die <xref:System.Console> Klasse automatisch verwendet dann das System standardcodierung statt UTF8, vorausgesetzt, dass Sie den encoding-Anbieter registriert haben, bevor er einen <xref:System.Console> Ausgabemethoden.  
  
   
  
## Examples  
 Im folgende Beispiel veranschaulicht das Lesen von Daten aus und Schreiben von Daten in die Eingabe und Ausgabe-Streams. Beachten Sie, dass diese Datenströme umgeleitet werden können, mit der <xref:System.Console.SetIn%2A> und <xref:System.Console.SetOut%2A> Methoden.  
  
 [!code-cpp[Classic Console Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Console Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Console Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Console Example/CS/source.cs#1)]
 [!code-vb[Classic Console Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Console Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Dieser Typ ist threadsicher.</threadsafe>
  </Docs>
  <Members>
    <Member MemberName="BackgroundColor">
      <MemberSignature Language="C#" Value="public static ConsoleColor BackgroundColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.ConsoleColor BackgroundColor" />
      <MemberSignature Language="DocId" Value="P:System.Console.BackgroundColor" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property BackgroundColor As ConsoleColor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property ConsoleColor BackgroundColor { ConsoleColor get(); void set(ConsoleColor value); };" />
      <MemberSignature Language="F#" Value="member this.BackgroundColor : ConsoleColor with get, set" Usage="System.Console.BackgroundColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ConsoleColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Hintergrundfarbe der Konsole ab oder legt diese fest.</summary>
        <value>Ein Wert, der die Hintergrundfarbe der Konsole, d. h. die hinter jedem Zeichen angezeigte Farbe angibt. Die Standardeinstellung ist schwarz.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Änderung an der <xref:System.Console.BackgroundColor%2A> Eigenschaft wirkt sich auf die einzige Ausgabe, die auf einzelne Zeichenzellen geschrieben wird, nachdem die Hintergrundfarbe geändert wurde. Um die Hintergrundfarbe des Konsolenfensters als Ganzes zu ändern, legen die <xref:System.Console.BackgroundColor%2A> -Eigenschaft, und rufen die <xref:System.Console.Clear%2A> Methode. Dies wird im folgenden Beispiel veranschaulicht.  
  
 [!code-csharp[System.Console.BackgroundColor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.backgroundcolor/cs/backgroundcolor1.cs#1)]
 [!code-vb[System.Console.BackgroundColor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.backgroundcolor/vb/backgroundcolor1.vb#1)]  
  
 Gibt ein Get-Vorgang für eine Windows-basierte Anwendung, in denen eine Konsole nicht vorhanden ist, <xref:System.ConsoleColor.Black?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Im folgende Beispiel speichert die Werte der der <xref:System.ConsoleColor> Enumeration in ein Array und speichert die aktuellen Werte von der <xref:System.Console.BackgroundColor%2A> und <xref:System.Console.ForegroundColor%2A> Eigenschaften an Variablen. Ändert die Vordergrundfarbe klicken Sie dann auf jede Farbe in der <xref:System.ConsoleColor> Enumeration, die mit der Ausnahme mit der Farbe, die die aktuelle Hintergrundfarbe entspricht, und die Farbe des Hintergrunds auf jede Farbe in ändert der <xref:System.ConsoleColor> Enumeration, außer auf die Farbe, entspricht die aktuelle Vordergrund. (Wenn die Vordergrundfarbe der Background-Farbe identisch ist, nicht des Texts angezeigt.) Schließlich ruft es die <xref:System.Console.ResetColor%2A> Verfahren zum Wiederherstellen der ursprünglichen konsolenfarben.  
  
 [!code-csharp[System.ConsoleColor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.consolecolor/cs/foregroundcolor3.cs#1)]
 [!code-vb[System.ConsoleColor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.consolecolor/vb/foregroundcolor3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Die in einem Set-Vorgang angegebene Farbe ist kein gültiges Member von <see cref="T:System.ConsoleColor" />.</exception>
        <exception cref="T:System.Security.SecurityException">Der Benutzer verfügt nicht über die erforderliche Berechtigung, um diese Aktion auszuführen.</exception>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Beep">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt den Sound eines Signaltons auf dem Konsolenlautsprecher wieder.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Beep">
      <MemberSignature Language="C#" Value="public static void Beep ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Beep() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Beep" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Beep ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Beep();" />
      <MemberSignature Language="F#" Value="static member Beep : unit -&gt; unit" Usage="System.Console.Beep " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt den Sound eines Signaltons auf dem Konsolenlautsprecher wieder.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Standardmäßig wird die Signalton mit einer Frequenz von 800 Hertz, für eine Dauer von 200 Millisekunden wiedergegeben wird.  
  
> [!NOTE]
>  Die <xref:System.Console.Beep%2A> Methode wird in der 64-Bit-Edition von Windows Vista und Windows XP nicht unterstützt.  
  
 <xref:System.Console.Beep%2A> umschließt einen Aufruf der Windows [Beep-Funktion](https://msdn.microsoft.com/library/windows/desktop/ms679277.aspx). Ob <xref:System.Console.Beep%2A> erzeugt Sie einen Sound in Versionen von Windows vor Windows 7 auf dem Vorhandensein einer 8254 programmable Interval Timer-Chip abhängig ist. Ab Windows 7, hängt das Standardaudiogerät.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.Console.Beep%2A> Methode. Im Beispiel wird eine Zahl von 1 bis 9 als ein Befehlszeilenargument akzeptiert und wird der Signalton entsprechend oft wiedergegeben.  
  
 [!code-cpp[console.beep#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.beep/CPP/beep.cpp#1)]
 [!code-csharp[console.beep#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.beep/CS/beep.cs#1)]
 [!code-vb[console.beep#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.beep/VB/beep.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.HostProtectionException">Diese Methode wurde auf einem Server, z. B. einem SQL-Server ausgeführt, der keinen Zugriff auf eine Benutzeroberfläche gestattet.</exception>
      </Docs>
    </Member>
    <Member MemberName="Beep">
      <MemberSignature Language="C#" Value="public static void Beep (int frequency, int duration);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Beep(int32 frequency, int32 duration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Beep(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Beep (frequency As Integer, duration As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Beep(int frequency, int duration);" />
      <MemberSignature Language="F#" Value="static member Beep : int * int -&gt; unit" Usage="System.Console.Beep (frequency, duration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="frequency" Type="System.Int32" />
        <Parameter Name="duration" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="frequency">Die Frequenz des Signaltons zwischen 37 und 32767 Hertz.</param>
        <param name="duration">Die Dauer des Signaltons in Millisekunden.</param>
        <summary>Gibt den Sound eines Signaltons mit einer angegebenen Frequenz und Dauer auf dem Konsolenlautsprecher wieder.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Console.Beep%2A> umschließt einen Aufruf der Windows [Beep-Funktion](https://msdn.microsoft.com/library/windows/desktop/ms679277.aspx). Ob <xref:System.Console.Beep%2A> erzeugt Sie einen Sound in Versionen von Windows vor Windows 7 auf dem Vorhandensein einer 8254 programmable Interval Timer-Chip abhängig ist. Ab Windows 7, hängt das Standardaudiogerät.  
  
> [!NOTE]
>  Die <xref:System.Console.Beep%2A> Methode wird in der 64-Bit-Edition von Windows Vista und Windows XP nicht unterstützt.  
  
   
  
## Examples  
 Dieses Beispiel zeigt die <xref:System.Console.Beep%2A> Methode, indem Sie die ersten Paar Anmerkungen zu dieser eines Musiktitels dem Konsolenlautsprecher wiedergeben.  
  
 [!code-cpp[console.beep2#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.beep2/CPP/b2.cpp#1)]
 [!code-csharp[console.beep2#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.beep2/CS/b2.cs#1)]
 [!code-vb[console.beep2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.beep2/VB/b2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="frequency" /> ist kleiner als 37 oder größer als 32767 Hertz.  
  
- oder -  
 <paramref name="duration" /> ist kleiner oder gleich 0 (null).</exception>
        <exception cref="T:System.Security.HostProtectionException">Diese Methode wurde auf einem Server wie SQL Server ausgeführt, der keinen Zugriff auf die Konsole gestattet.</exception>
      </Docs>
    </Member>
    <Member MemberName="BufferHeight">
      <MemberSignature Language="C#" Value="public static int BufferHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 BufferHeight" />
      <MemberSignature Language="DocId" Value="P:System.Console.BufferHeight" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property BufferHeight As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int BufferHeight { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.BufferHeight : int with get, set" Usage="System.Console.BufferHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Höhe des Pufferbereichs ab oder legt diese fest.</summary>
        <value>Die aktuelle Höhe des Pufferbereichs in Zeilen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft definiert die Anzahl der Zeilen (oder Zeilen) gespeichert, die im Puffer, der von einem Modus Konsolenfenster zugegriffen wird. Im Gegensatz dazu die <xref:System.Console.WindowHeight%2A> Eigenschaft definiert die Anzahl der Zeilen, die tatsächlich zu einem bestimmten Zeitpunkt im Konsolenfenster angezeigt werden. Überschreitet die Anzahl der Zeilen, die tatsächlich in den Puffer geschrieben. die Anzahl der Zeilen, die definiert, die von der <xref:System.Console.WindowHeight%2A> -Eigenschaft des Fensters Bildlauf möglich vertikal, damit sie eine zusammenhängende Anzahl von Zeilen angezeigt, die gleich sind die <xref:System.Console.WindowHeight%2A> Eigenschaft, und befindet sich eine beliebige Stelle im Puffer.  
  
 Wenn es sich bei ein Set-Vorgang auf den Wert von verringert die <xref:System.Console.BufferHeight%2A> -Eigenschaft der obersten Zeilen entfernt werden. Z. B. Zeilen ein, wenn die Anzahl der Zeilen von 300 bis 250 verringert Zeilen 0 bis 49 entfernt werden und die vorhandenen 50 bis 299 werden Zeilen 0 bis 249.  
  
   
  
## Examples  
 Dieses Beispiel zeigt die <xref:System.Console.BufferHeight%2A> und <xref:System.Console.BufferWidth%2A> Eigenschaften. Im Beispiel gibt die Abmessungen eines Betriebssystem-Fensters, das auf eine Puffergröße von 300 Zeilen und Spalten von 85 festgelegt.  
  
 [!code-cpp[console.bufferHW#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.bufferHW/CPP/hw.cpp#1)]
 [!code-csharp[console.bufferHW#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.bufferHW/CS/hw.cs#1)]
 [!code-vb[console.bufferHW#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.bufferHW/VB/hw.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der Wert in einem Set-Vorgang ist kleiner als oder gleich 0 (null).  
  
- oder -  
Der Wert in einem Set-Vorgang ist größer als oder gleich <see cref="F:System.Int16.MaxValue" />.  
  
- oder -  
Der Wert in einem Set-Vorgang ist kleiner als <see cref="P:System.Console.WindowTop" /> + <see cref="P:System.Console.WindowHeight" />.</exception>
        <exception cref="T:System.Security.SecurityException">Der Benutzer verfügt nicht über die erforderliche Berechtigung, um diese Aktion auszuführen.</exception>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="BufferWidth">
      <MemberSignature Language="C#" Value="public static int BufferWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 BufferWidth" />
      <MemberSignature Language="DocId" Value="P:System.Console.BufferWidth" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property BufferWidth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int BufferWidth { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.BufferWidth : int with get, set" Usage="System.Console.BufferWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Breite des Pufferbereichs ab oder legt diese fest.</summary>
        <value>Die aktuelle Breite des Pufferbereichs in Spalten.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie ein Set-Vorgang auf den Wert von verringert die <xref:System.Console.BufferWidth%2A> -Eigenschaft der äußersten rechten Spalten werden entfernt. Wenn die Anzahl der Spalten von 80 auf 60 reduziert wird, werden z. B. Spalten 60 und 79 der einzelnen Zeilen entfernt.  
  
   
  
## Examples  
 Dieses Beispiel zeigt die <xref:System.Console.BufferHeight%2A> und <xref:System.Console.BufferWidth%2A> Eigenschaften. Im Beispiel gibt die Abmessungen eines Betriebssystem-Fensters, das auf eine Puffergröße von 300 Zeilen und Spalten von 85 festgelegt.  
  
 [!code-cpp[console.bufferHW#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.bufferHW/CPP/hw.cpp#1)]
 [!code-csharp[console.bufferHW#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.bufferHW/CS/hw.cs#1)]
 [!code-vb[console.bufferHW#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.bufferHW/VB/hw.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der Wert in einem Set-Vorgang ist kleiner als oder gleich 0 (null).  
  
- oder -  
Der Wert in einem Set-Vorgang ist größer als oder gleich <see cref="F:System.Int16.MaxValue" />.  
  
- oder -  
Der Wert in einem Set-Vorgang ist kleiner als <see cref="P:System.Console.WindowLeft" /> + <see cref="P:System.Console.WindowWidth" />.</exception>
        <exception cref="T:System.Security.SecurityException">Der Benutzer verfügt nicht über die erforderliche Berechtigung, um diese Aktion auszuführen.</exception>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CancelKeyPress">
      <MemberSignature Language="C#" Value="public static event ConsoleCancelEventHandler CancelKeyPress;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ConsoleCancelEventHandler CancelKeyPress" />
      <MemberSignature Language="DocId" Value="E:System.Console.CancelKeyPress" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event CancelKeyPress As ConsoleCancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event ConsoleCancelEventHandler ^ CancelKeyPress;" />
      <MemberSignature Language="F#" Value="member this.CancelKeyPress : ConsoleCancelEventHandler " Usage="member this.CancelKeyPress : System.ConsoleCancelEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>add: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>remove: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ConsoleCancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn die <see cref="F:System.ConsoleModifiers.Control" />-Modifizierertaste (STRG) und entweder die <see cref="F:System.ConsoleKey.C" />-Konsolentaste (c) oder die UNTBR-TASTE gleichzeitig gedrückt werden (STRG+C oder STRG+UNTBR).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis wird verwendet, in Verbindung mit <xref:System.ConsoleCancelEventHandler?displayProperty=nameWithType> und <xref:System.ConsoleCancelEventArgs?displayProperty=nameWithType>. Die <xref:System.Console.CancelKeyPress> Ereignis können Sie eine Konsolenanwendung, die das STRG + C-Signal abfangen, damit der Ereignishandler, ob entscheiden kann Sie fortgesetzt oder beendet. Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 Wenn der Benutzer entweder STRG + C oder STRG + UNTBR, drückt die <xref:System.Console.CancelKeyPress> Ereignis wird ausgelöst, und der Anwendung <xref:System.ConsoleCancelEventHandler> -Ereignishandler ausgeführt wird. Der Ereignishandler übergeben wird eine <xref:System.ConsoleCancelEventArgs> Objekt, das zwei nützliche Eigenschaften verfügt:  
  
-   <xref:System.ConsoleCancelEventArgs.SpecialKey%2A>, wodurch Sie bestimmen, ob der Handler aufgerufen wurde, weil der Benutzer durch Drücken von STRG + C (der Eigenschaftswert ist <xref:System.ConsoleSpecialKey.ControlC?displayProperty=nameWithType>) oder STRG + UNTBR (der Eigenschaftswert ist <xref:System.ConsoleSpecialKey.ControlBreak?displayProperty=nameWithType>).  
  
-   <xref:System.ConsoleCancelEventArgs.Cancel%2A>, wodurch Sie bestimmen, wie für Ihre Anwendung sollte auf den Benutzer reagieren Drücken von STRG + C oder STRG + UNTBR. In der Standardeinstellung die <xref:System.ConsoleCancelEventArgs.Cancel%2A> Eigenschaft `false`, die bewirkt, dass die programmausführung zu beenden, wenn der Ereignishandler beendet. Ändern die-Eigenschaft auf `true` gibt an, dass die Anwendung weiterhin ausgeführt werden sollte.  
  
> [!TIP]
>  Wenn Ihre Anwendung auf einfache Anforderungen verfügt, können Sie mithilfe der <xref:System.Console.TreatControlCAsInput%2A> -Eigenschaft anstelle dieses Ereignis. Durch Festlegen dieser Eigenschaft auf `false`, können Sie sicherstellen, dass Ihre Anwendung immer beendet wird, wenn der Benutzer STRG + C drückt. Durch Festlegung auf `true`, können Sie sicherstellen, dass die Anwendung nicht durch Drücken von STRG + C beendet wird.  
  
 Der Ereignishandler für dieses Ereignis wird auf einem Threadpoolthread ausgeführt.  
  
   
  
## Examples  
 Im folgende Beispiel wird veranschaulicht, wie die <xref:System.Console.CancelKeyPress> Ereignis verwendet wird. Der Lesevorgang wird unterbrochen, wenn Sie STRG + C drücken, und die `myHandler` Ereignishandler aufgerufen. Bei der Eingabe an den Ereignishandler der <xref:System.ConsoleCancelEventArgs.Cancel%2A?displayProperty=nameWithType> Eigenschaft `false`, d. h., die der aktuelle Vorgang beendet wird, wenn der Ereignishandler beendet. Der Ereignishandler wird jedoch die <xref:System.ConsoleCancelEventArgs.Cancel%2A?displayProperty=nameWithType> Eigenschaft, um `true`, welche bedeutet, dass der Prozess nicht beendet, und der Lesevorgang wird fortgesetzt.  
  
 [!code-cpp[console.cancelkeypress#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cancelkeypress/cpp/ckp.cpp#1)]
 [!code-csharp[console.cancelkeypress#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cancelkeypress/cs/ckp.cs#1)]
 [!code-vb[console.cancelkeypress#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cancelkeypress/vb/ckp.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="T:System.ConsoleCancelEventArgs" />
        <altmember cref="T:System.ConsoleCancelEventHandler" />
        <altmember cref="P:System.Console.TreatControlCAsInput" />
      </Docs>
    </Member>
    <Member MemberName="CapsLock">
      <MemberSignature Language="C#" Value="public static bool CapsLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CapsLock" />
      <MemberSignature Language="DocId" Value="P:System.Console.CapsLock" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CapsLock As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CapsLock { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CapsLock : bool" Usage="System.Console.CapsLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die FESTSTELLTASTE-Tastaturumschalttaste aktiviert oder deaktiviert ist.</summary>
        <value>
          <see langword="true" />, wenn die FESTSTELLTASTE aktiviert ist, <see langword="false" />, wenn die FESTSTELLTASTE deaktiviert ist.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public static void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Clear();" />
      <MemberSignature Language="F#" Value="static member Clear : unit -&gt; unit" Usage="System.Console.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Löscht die Anzeigeinformationen aus dem Konsolenpuffer und dem entsprechenden Konsolenfenster.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mithilfe der <xref:System.Console.Clear%2A> Methode entspricht dem Aufrufen von MS-DOS `cls` im Eingabeaufforderungsfenster den Befehl. Wenn die <xref:System.Console.Clear%2A> Methode wird aufgerufen, der Cursor automatisch in der oberen linken Ecke des Fensters und den Inhalt des Bildschirmpuffers in Leerzeichen, die mit der aktuellen Vordergrund-und Hintergrundfarben festgelegt werden.  
  
> [!NOTE]
>  Es wird versucht, rufen Sie die <xref:System.Console.Clear%2A> löst die Methode, wenn eine Konsolenanwendung, die Ausgabe in eine Datei umgeleitet wird eine <xref:System.IO.IOException>. Um dies zu verhindern, umschließen Sie immer einen Aufruf der <xref:System.Console.Clear%2A> Methode in einer `try`...`catch` Block.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Console.Clear%2A> Methode, um die Konsole löschen, vor dem Ausführen eine Schleife, fordert den Benutzer aus, um eine Farbe Vordergrund- und Hintergrundfarben auszuwählen und zur Eingabe einer Zeichenfolge angezeigt. Der Konsole zur ursprünglichen Vordergrund- und Hintergrundfarben werden wiederhergestellt, wenn der Benutzer nicht zum Beenden des Programms, und die <xref:System.Console.Clear%2A> Methode wird erneut aufgerufen, bevor die Schleife erneut ausgeführt.  
  
 [!code-csharp[System.Console.Clear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.clear/cs/clear1.cs#1)]
 [!code-vb[System.Console.Clear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.clear/vb/clear1.vb#1)]  
  
 Das Beispiel basiert auf einer `GetKeyPress` Methode, um die Auswahl einer Farbe Vordergrund- und Hintergrundfarben des Benutzers zu überprüfen.  
  
 Dieses Beispiel zeigt die <xref:System.Console.CursorLeft%2A> und <xref:System.Console.CursorTop%2A> Eigenschaften, und die <xref:System.Console.SetCursorPosition%2A> und <xref:System.Console.Clear%2A> Methoden. Im Beispiel positioniert den Cursor, der bestimmt, wo der nächste Schreibvorgang erfolgt ein 5-Zeichen mit einer Kombination aus 5 Zeichen-Rechteck zu zeichnen, "+", "&#124;", und "-" Zeichenfolgen. Beachten Sie, dass das Rechteck mit weniger Schritten mithilfe einer Kombination aus anderen Zeichenfolgen gezeichnet werden kann.  
  
 [!code-cpp[console.cursorLTS#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cursorLTS/CPP/lts.cpp#1)]
 [!code-csharp[console.cursorLTS#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cursorLTS/CS/lts.cs#1)]
 [!code-vb[console.cursorLTS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cursorLTS/VB/lts.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
      </Docs>
    </Member>
    <Member MemberName="CursorLeft">
      <MemberSignature Language="C#" Value="public static int CursorLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CursorLeft" />
      <MemberSignature Language="DocId" Value="P:System.Console.CursorLeft" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CursorLeft As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int CursorLeft { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CursorLeft : int with get, set" Usage="System.Console.CursorLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Spaltenposition des Cursors im Pufferbereich ab oder legt diese fest.</summary>
        <value>Die aktuelle Position des Cursors in Spalten.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Dieses Beispiel zeigt die <xref:System.Console.CursorLeft%2A> und <xref:System.Console.CursorTop%2A> Eigenschaften, und die <xref:System.Console.SetCursorPosition%2A> und <xref:System.Console.Clear%2A> Methoden. Im Beispiel positioniert den Cursor, der bestimmt, wo der nächste Schreibvorgang erfolgt ein 5-Zeichen mit einer Kombination aus 5 Zeichen-Rechteck zu zeichnen, "+", "&#124;", und "-" Zeichenfolgen. Beachten Sie, dass das Rechteck mit weniger Schritten mithilfe einer Kombination aus anderen Zeichenfolgen gezeichnet werden kann.  
  
 [!code-cpp[console.cursorLTS#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cursorLTS/CPP/lts.cpp#1)]
 [!code-csharp[console.cursorLTS#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cursorLTS/CS/lts.cs#1)]
 [!code-vb[console.cursorLTS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cursorLTS/VB/lts.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der Wert in einem Set-Vorgang ist kleiner als 0 (null).  
  
- oder -  
Der Wert in einem Set-Vorgang ist größer als oder gleich <see cref="P:System.Console.BufferWidth" />.</exception>
        <exception cref="T:System.Security.SecurityException">Der Benutzer verfügt nicht über die erforderliche Berechtigung, um diese Aktion auszuführen.</exception>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CursorSize">
      <MemberSignature Language="C#" Value="public static int CursorSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CursorSize" />
      <MemberSignature Language="DocId" Value="P:System.Console.CursorSize" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CursorSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int CursorSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CursorSize : int with get, set" Usage="System.Console.CursorSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Höhe des Cursors innerhalb einer Zeichenzelle ab oder legt diese fest.</summary>
        <value>Die Größe des Cursors in Prozent der Höhe einer Zeichenzelle. Der Eigenschaftswert liegt zwischen 1 und 100.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Cursor kann unterschiedlich dargestellt werden, am unteren Rand der Zelle eine horizontale Linie zwischen, wenn der Eigenschaftswert 1 ist, um vollständigen Ausfüllen der Zelle, wenn der Eigenschaftswert 100 ist.  
  
   
  
## Examples  
 Dieses Beispiel zeigt die <xref:System.Console.CursorSize%2A> Eigenschaft. Im Beispiel erhöht die Größe des Cursors jedes Mal alle Konsolentaste gedrückt wird, und den Cursor in ihrer ursprünglichen Größe wiederhergestellt, vor dem Beenden.  
  
 [!code-cpp[console.cursorsize#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cursorsize/CPP/csize.cpp#1)]
 [!code-csharp[console.cursorsize#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cursorsize/CS/csize.cs#1)]
 [!code-vb[console.cursorsize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cursorsize/VB/csize.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der in einem Set-Vorgang angegebene Wert ist kleiner als 1 oder größer als 100.</exception>
        <exception cref="T:System.Security.SecurityException">Der Benutzer verfügt nicht über die erforderliche Berechtigung, um diese Aktion auszuführen.</exception>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CursorTop">
      <MemberSignature Language="C#" Value="public static int CursorTop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CursorTop" />
      <MemberSignature Language="DocId" Value="P:System.Console.CursorTop" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CursorTop As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int CursorTop { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CursorTop : int with get, set" Usage="System.Console.CursorTop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Zeilenposition des Cursors im Pufferbereich ab oder legt diese fest.</summary>
        <value>Die aktuelle Position des Cursors in Zeilen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Dieses Beispiel zeigt die <xref:System.Console.CursorLeft%2A> und <xref:System.Console.CursorTop%2A> Eigenschaften, und die <xref:System.Console.SetCursorPosition%2A> und <xref:System.Console.Clear%2A> Methoden. Im Beispiel positioniert den Cursor, der bestimmt, wo der nächste Schreibvorgang erfolgt ein 5-Zeichen mit einer Kombination aus 5 Zeichen-Rechteck zu zeichnen, "+", "&#124;", und "-" Zeichenfolgen. Beachten Sie, dass das Rechteck mit weniger Schritten mithilfe einer Kombination aus anderen Zeichenfolgen gezeichnet werden kann.  
  
 [!code-cpp[console.cursorLTS#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cursorLTS/CPP/lts.cpp#1)]
 [!code-csharp[console.cursorLTS#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cursorLTS/CS/lts.cs#1)]
 [!code-vb[console.cursorLTS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cursorLTS/VB/lts.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der Wert in einem Set-Vorgang ist kleiner als 0 (null).  
  
- oder -  
Der Wert in einem Set-Vorgang ist größer als oder gleich <see cref="P:System.Console.BufferHeight" />.</exception>
        <exception cref="T:System.Security.SecurityException">Der Benutzer verfügt nicht über die erforderliche Berechtigung, um diese Aktion auszuführen.</exception>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CursorVisible">
      <MemberSignature Language="C#" Value="public static bool CursorVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CursorVisible" />
      <MemberSignature Language="DocId" Value="P:System.Console.CursorVisible" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CursorVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CursorVisible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CursorVisible : bool with get, set" Usage="System.Console.CursorVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob der Cursor sichtbar ist, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, wenn der Cursor sichtbar ist, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Dieses Beispiel zeigt die <xref:System.Console.CursorVisible%2A> Eigenschaft. Im Beispiel wird den Cursor sichtbar, wenn die erste Spalte der Eingabe ein '+'-Zeichen ist oder nicht sichtbar, wenn die Eingabe ist ein '-' Zeichen.  
  
 [!code-cpp[console.cursorvis#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cursorvis/CPP/vis.cpp#1)]
 [!code-csharp[console.cursorvis#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cursorvis/CS/vis.cs#1)]
 [!code-vb[console.cursorvis#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cursorvis/VB/vis.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">Der Benutzer verfügt nicht über die erforderliche Berechtigung, um diese Aktion auszuführen.</exception>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Error">
      <MemberSignature Language="C#" Value="public static System.IO.TextWriter Error { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.IO.TextWriter Error" />
      <MemberSignature Language="DocId" Value="P:System.Console.Error" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Error As TextWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::IO::TextWriter ^ Error { System::IO::TextWriter ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Error : System.IO.TextWriter" Usage="System.Console.Error" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Standard-Fehlerausgabestream ab.</summary>
        <value>Ein <see cref="T:System.IO.TextWriter" />, der den Standard-Fehlerausgabestream darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Standardfehlerstream wird an die Konsole standardmäßig festgelegt. Es kann festgelegt werden, in einen anderen Stream mit der <xref:System.Console.SetError%2A> Methode. Nach der Standardfehlerstream umgeleitet wird, es kann sein erneut erhalten durch Aufrufen der <xref:System.Console.OpenStandardError%2A> Methode.  
  
 Stream den Standardfehler in konsolenanwendungen, deren Informationsausgabe häufig in eine Datei umgeleitet wird, über die <xref:System.Console.Error%2A> Eigenschaft kann verwendet werden, um die Informationen in der Konsole anzeigen, auch wenn die Ausgabe umgeleitet wird. Das folgende Beispiel zeigt die Produkttabellen für 10 Zahlen zu einem Zeitpunkt, beginnend mit 1. Nach jedem Satz von 10 Zahlen die <xref:System.Console.Error%2A> Eigenschaft wird verwendet, um den Benutzer zu Fragen, ob die nächste Gruppe angezeigt. Wenn die Standardausgabe in eine Datei umgeleitet wird, wird der Benutzer weiterhin aufgefordert werden, ob die Routine den nächsten Satz von Produkten generiert werden sollen.  
  
 [!code-csharp[System.Console.Error#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.error/cs/error1.cs#1)]
 [!code-vb[System.Console.Error#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.error/vb/error1.vb#1)]  
  
   
  
## Examples  
 Das folgende Beispiel ist ein Befehlszeilenprogramm, mit dem Namen ExpandTabs, das Tabstoppzeichen in einer Textdatei mit vier Leerzeichen, den Wert ersetzt den `tabSize` Variable. Es leitet die Eingabe und Ausgabe Datenströme auf Dateien, verwendet jedoch die <xref:System.Console.Error%2A> Eigenschaft, um den Standardfehler-Datenstrom in die Konsole geschrieben. Sie können über die Befehlszeile durch Angabe der Name der Datei, die Tab-Zeichen enthält und den Namen der Ausgabedatei gestartet werden.  
  
 [!code-cpp[Console-EXPANDTABSEX#1](~/samples/snippets/cpp/VS_Snippets_CLR/Console-EXPANDTABSEX/CPP/expandtabsex.cpp#1)]
 [!code-csharp[Console-EXPANDTABSEX#1](~/samples/snippets/csharp/VS_Snippets_CLR/Console-EXPANDTABSEX/CS/expandtabsex.cs#1)]
 [!code-vb[Console-EXPANDTABSEX#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Console-EXPANDTABSEX/VB/expandtabsex.vb#1)]  
  
 Im folgende Beispiel wird ein einfacher Text-Datei-Viewer, der der Inhalt von ein oder mehrere Textdateien in der Konsole angezeigt. Wenn es keine Befehlszeilenargumente oder wenn alle Dateien, die als Befehlszeilenargumente übergeben nicht vorhanden sind, im Beispiel wird die <xref:System.Console.SetError%2A> Methodenaufrufe zum Umleiten von Fehlerinformationen in einer Datei, die <xref:System.Console.OpenStandardError%2A> Methode beim erneuten erhalten den Standardfehler Stream und gibt an, dass die Fehlerinformationen in eine Datei geschrieben wurde.  
  
 [!code-csharp[System.Console.OpenStandardError#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.openstandarderror/cs/viewtextfile.cs#1)]
 [!code-vb[System.Console.OpenStandardError#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.openstandarderror/vb/viewtextfile.vb#1)]  
  
 Beachten Sie, dass die <xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=nameWithType> -Eigenschaftensatz auf `true` vor dem erneuten erhalten den fehlerdatenstrom. Dadurch wird sichergestellt, dass die Ausgabe wird sofort an die Konsole gesendet, sondern gepuffert.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Console.In" />
        <altmember cref="P:System.Console.Out" />
        <altmember cref="P:System.Console.IsErrorRedirected" />
        <altmember cref="M:System.Console.SetError(System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="ForegroundColor">
      <MemberSignature Language="C#" Value="public static ConsoleColor ForegroundColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.ConsoleColor ForegroundColor" />
      <MemberSignature Language="DocId" Value="P:System.Console.ForegroundColor" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property ForegroundColor As ConsoleColor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property ConsoleColor ForegroundColor { ConsoleColor get(); void set(ConsoleColor value); };" />
      <MemberSignature Language="F#" Value="member this.ForegroundColor : ConsoleColor with get, set" Usage="System.Console.ForegroundColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ConsoleColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Vordergrundfarbe der Konsole ab oder legt diese fest.</summary>
        <value>Eine <see cref="T:System.ConsoleColor" />, die die Vordergrundfarbe der Konsole angibt, d. h. die Farbe, in der alle Zeichen angezeigt werden. Die Standardeinstellung ist grau.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gibt ein Get-Vorgang für eine Windows-basierte Anwendung, in denen eine Konsole nicht vorhanden ist, <xref:System.ConsoleColor.Gray>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird überprüft, ob die Hintergrundfarbe der Konsole ist schwarz und, wenn es sich handelt, wird die Hintergrundfarbe auf Rot und die Vordergrundfarbe auf Schwarz geändert.  
  
 [!code-csharp[System.ConsoleColor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.consolecolor/cs/Example2.cs#2)] 
 [!code-vb[System.ConsoleColor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.consolecolor/vb/Example2.vb#2)]  
  
 Im folgende Beispiel speichert die Werte der der <xref:System.ConsoleColor> Enumeration in ein Array und speichert die aktuellen Werte von der <xref:System.Console.BackgroundColor%2A> und <xref:System.Console.ForegroundColor%2A> Eigenschaften an Variablen. Ändert die Vordergrundfarbe klicken Sie dann auf jede Farbe in der <xref:System.ConsoleColor> Enumeration, die mit der Ausnahme mit der Farbe, die die aktuelle Hintergrundfarbe entspricht, und die Farbe des Hintergrunds auf jede Farbe in ändert der <xref:System.ConsoleColor> Enumeration, außer auf die Farbe, entspricht die aktuelle Vordergrund. (Wenn die Vordergrundfarbe der Background-Farbe identisch ist, nicht des Texts angezeigt.) Schließlich ruft es die <xref:System.Console.ResetColor%2A> Verfahren zum Wiederherstellen der ursprünglichen konsolenfarben.  
  
 [!code-csharp[System.ConsoleColor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.consolecolor/cs/foregroundcolor3.cs#1)]
 [!code-vb[System.ConsoleColor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.consolecolor/vb/foregroundcolor3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Die in einem Set-Vorgang angegebene Farbe ist kein gültiges Member von <see cref="T:System.ConsoleColor" />.</exception>
        <exception cref="T:System.Security.SecurityException">Der Benutzer verfügt nicht über die erforderliche Berechtigung, um diese Aktion auszuführen.</exception>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="In">
      <MemberSignature Language="C#" Value="public static System.IO.TextReader In { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.IO.TextReader In" />
      <MemberSignature Language="DocId" Value="P:System.Console.In" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property In As TextReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::IO::TextReader ^ In { System::IO::TextReader ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.In : System.IO.TextReader" Usage="System.Console.In" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.TextReader</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Standardeingabestream ab.</summary>
        <value>Ein <see cref="T:System.IO.TextReader" />, der den Standardeingabestream darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Standardeinstellung für diese Eigenschaft ist der standard-Eingabedatenstrom. Diese Eigenschaft kann festgelegt werden, in einen anderen Stream mit der <xref:System.Console.SetIn%2A> Methode.  
  
 Lesevorgänge auf die standard-Eingabedatenstrom werden synchron ausgeführt. D. h., blockiert sie bis der angegebene Lesevorgang abgeschlossen ist. Dies gilt auch, wenn eine asynchrone Methode, wie z. B. <xref:System.IO.TextReader.ReadLineAsync%2A>, aufgerufen wird, auf die <xref:System.IO.TextReader> zurückgegebenes Objekt der <xref:System.Console.In%2A> Eigenschaft.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Verwendung der `In` Eigenschaft.  
  
 [!code-cpp[consolein#1](~/samples/snippets/cpp/VS_Snippets_CLR/consolein/CPP/consolein.cpp#1)]
 [!code-csharp[consolein#1](~/samples/snippets/csharp/VS_Snippets_CLR/consolein/CS/consolein.cs#1)]
 [!code-vb[consolein#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/consolein/VB/consolein.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Console.OpenStandardInput" />
        <altmember cref="P:System.Console.IsInputRedirected" />
        <altmember cref="P:System.Console.Error" />
        <altmember cref="P:System.Console.Out" />
        <altmember cref="M:System.Console.SetIn(System.IO.TextReader)" />
      </Docs>
    </Member>
    <Member MemberName="InputEncoding">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding InputEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Encoding InputEncoding" />
      <MemberSignature Language="DocId" Value="P:System.Console.InputEncoding" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property InputEncoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::Encoding ^ InputEncoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InputEncoding : System.Text.Encoding with get, set" Usage="System.Console.InputEncoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Codierung ab, die die Konsole verwendet, um die Eingabe zu lesen, oder legt diese fest.</summary>
        <value>Die Codierung, die verwendet wird, um die Konsoleneingabe zu lesen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Konsole verwendet, die Eingabe, die Codierung, die Tastatureingaben in einem entsprechenden Zeichen übersetzt. Die eingabecodierung umfasst eine Codepage, die 256 Tastatur Zeichencodes das einzelnen Zeichen zugeordnet. Zu verschiedenen Codepages gehören verschiedene spezielle Zeichen, die normalerweise für eine Sprache oder eine Gruppe von Sprachen angepasst sind.  
  
 Beginnend mit der [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], ein Eigenschaft Get-Vorgang möglicherweise einen zwischengespeicherten Wert anstelle der Konsole zur aktuellen eingabecodierung zurück. Dies kann auftreten, wenn der Wert des der <xref:System.Console.InputEncoding%2A> -Eigenschaft geändert wird, mit der Zuweisung zu der <xref:System.Console.InputEncoding%2A> Eigenschaft, z. B. das Aufrufen der Windows `SetConsoleCP` -Funktion oder mithilfe der `chcp` ein PowerShell-Skript den Befehl.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der Eigenschaftswert in einer Set-Operation ist <see langword="null" />.</exception>
        <exception cref="T:System.IO.IOException">Während der Ausführung dieses Vorgangs ist ein Fehler aufgetreten.</exception>
        <exception cref="T:System.Security.SecurityException">Ihre Anwendung verfügt nicht über die erforderliche Berechtigung zum Ausführen dieses Vorgangs.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Lesen und Schreiben in das Fenster der obersten Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="T:System.Text.Encoding" />
      </Docs>
    </Member>
    <Member MemberName="IsErrorRedirected">
      <MemberSignature Language="C#" Value="public static bool IsErrorRedirected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsErrorRedirected" />
      <MemberSignature Language="DocId" Value="P:System.Console.IsErrorRedirected" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsErrorRedirected As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool IsErrorRedirected { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsErrorRedirected : bool" Usage="System.Console.IsErrorRedirected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob der Fehlerausgabedatenstrom von dem Standardfehlerstream umgeleitet wurde.</summary>
        <value>
          <see langword="true" />, wenn die Fehlerausgabe umgeleitet wird; andernfalls <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Console.Error" />
        <altmember cref="M:System.Console.SetError(System.IO.TextWriter)" />
        <altmember cref="M:System.Console.OpenStandardError" />
      </Docs>
    </Member>
    <Member MemberName="IsInputRedirected">
      <MemberSignature Language="C#" Value="public static bool IsInputRedirected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsInputRedirected" />
      <MemberSignature Language="DocId" Value="P:System.Console.IsInputRedirected" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsInputRedirected As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool IsInputRedirected { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInputRedirected : bool" Usage="System.Console.IsInputRedirected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die Eingabe aus dem Standardeingabestream umgeleitet wurde.</summary>
        <value>
          <see langword="true" />, wenn die Eingabe umgeleitet wird, andernfalls <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Console.In" />
        <altmember cref="M:System.Console.SetIn(System.IO.TextReader)" />
        <altmember cref="M:System.Console.OpenStandardInput" />
      </Docs>
    </Member>
    <Member MemberName="IsOutputRedirected">
      <MemberSignature Language="C#" Value="public static bool IsOutputRedirected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsOutputRedirected" />
      <MemberSignature Language="DocId" Value="P:System.Console.IsOutputRedirected" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsOutputRedirected As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool IsOutputRedirected { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsOutputRedirected : bool" Usage="System.Console.IsOutputRedirected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die Ausgabe aus dem Standardausgabestream umgeleitet wurde.</summary>
        <value>
          <see langword="true" />, wenn die Ausgabe umgeleitet wird, andernfalls <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Console.Out" />
        <altmember cref="M:System.Console.SetOut(System.IO.TextWriter)" />
        <altmember cref="M:System.Console.OpenStandardError" />
      </Docs>
    </Member>
    <Member MemberName="KeyAvailable">
      <MemberSignature Language="C#" Value="public static bool KeyAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool KeyAvailable" />
      <MemberSignature Language="DocId" Value="P:System.Console.KeyAvailable" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property KeyAvailable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool KeyAvailable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyAvailable : bool" Usage="System.Console.KeyAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob ein Tastendruck im Eingabestream vorhanden ist.</summary>
        <value>
          <see langword="true" />, wenn ein Tastendruck vorhanden ist, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Eigenschaftswert wird sofort zurückgegeben. d. h. die <xref:System.Console.KeyAvailable%2A> Eigenschaft wird die Eingabe nicht blockiert, bis Drücken einer Taste verfügbar ist.  
  
 Verwenden der <xref:System.Console.KeyAvailable%2A> Eigenschaft nur in Verbindung mit der <xref:System.Console.ReadKey%2A> -Methode, nicht die <xref:System.Console.Read%2A> oder <xref:System.Console.ReadLine%2A> Methoden.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie die <xref:System.Console.KeyAvailable%2A> Eigenschaft zum Erstellen einer Schleife, die ausgeführt wird, bis eine Taste gedrückt wird.  
  
 [!code-cpp[console.keyavailable#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.keyavailable/CPP/ka.cpp#1)]
 [!code-csharp[console.keyavailable#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.keyavailable/CS/ka.cs#1)]
 [!code-vb[console.keyavailable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.keyavailable/VB/ka.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <exception cref="T:System.InvalidOperationException">Standardeingabe wird nicht an die Tastatur gesendet, sondern in eine Datei umgeleitet.</exception>
      </Docs>
    </Member>
    <Member MemberName="LargestWindowHeight">
      <MemberSignature Language="C#" Value="public static int LargestWindowHeight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 LargestWindowHeight" />
      <MemberSignature Language="DocId" Value="P:System.Console.LargestWindowHeight" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property LargestWindowHeight As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int LargestWindowHeight { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LargestWindowHeight : int" Usage="System.Console.LargestWindowHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die entsprechend der aktuellen Schriftart und Bildschirmauflösung größtmögliche Anzahl von Konsolenfensterzeilen ab.</summary>
        <value>Die Höhe des größtmöglichen Konsolenfensters in Zeilen.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LargestWindowWidth">
      <MemberSignature Language="C#" Value="public static int LargestWindowWidth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 LargestWindowWidth" />
      <MemberSignature Language="DocId" Value="P:System.Console.LargestWindowWidth" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property LargestWindowWidth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int LargestWindowWidth { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LargestWindowWidth : int" Usage="System.Console.LargestWindowWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die entsprechend der aktuellen Schriftart und Bildschirmauflösung größtmögliche Anzahl von Konsolenfensterspalten ab.</summary>
        <value>Die Breite des größtmöglichen Konsolenfensters in Spalten.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveBufferArea">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Kopiert einen angegebenen Quellbereich des Bildschirmpuffers in einen angegebenen Zielbereich.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveBufferArea">
      <MemberSignature Language="C#" Value="public static void MoveBufferArea (int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MoveBufferArea(int32 sourceLeft, int32 sourceTop, int32 sourceWidth, int32 sourceHeight, int32 targetLeft, int32 targetTop) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub MoveBufferArea (sourceLeft As Integer, sourceTop As Integer, sourceWidth As Integer, sourceHeight As Integer, targetLeft As Integer, targetTop As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MoveBufferArea(int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop);" />
      <MemberSignature Language="F#" Value="static member MoveBufferArea : int * int * int * int * int * int -&gt; unit" Usage="System.Console.MoveBufferArea (sourceLeft, sourceTop, sourceWidth, sourceHeight, targetLeft, targetTop)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceLeft" Type="System.Int32" />
        <Parameter Name="sourceTop" Type="System.Int32" />
        <Parameter Name="sourceWidth" Type="System.Int32" />
        <Parameter Name="sourceHeight" Type="System.Int32" />
        <Parameter Name="targetLeft" Type="System.Int32" />
        <Parameter Name="targetTop" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sourceLeft">Die am weitesten links stehende Spalte des Quellbereichs.</param>
        <param name="sourceTop">Die oberste Zeile des Quellbereichs.</param>
        <param name="sourceWidth">Die Anzahl der Spalten im Quellbereich.</param>
        <param name="sourceHeight">Die Anzahl der Zeilen im Quellbereich.</param>
        <param name="targetLeft">Die am weitesten links stehende Spalte des Zielbereichs.</param>
        <param name="targetTop">Die oberste Zeile des Zielbereichs.</param>
        <summary>Kopiert einen angegebenen Quellbereich des Bildschirmpuffers in einen angegebenen Zielbereich.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die Ziel- und Parameter eine Position außerhalb der Grenzen des aktuellen Bildschirmpuffer angeben, wird nur der Teil des Quellbereichs, die innerhalb der Zielbereich entspricht kopiert. D. h. wird des Quellbereichs abgeschnitten, damit Sie den aktuellen Bildschirmpuffer passt.  
  
 Die <xref:System.Console.MoveBufferArea%2A> Methode kopiert den Quellbereich in den Zielbereich. Wenn der Zielbereich nicht Quellbereichs schneidet, wird der Quellbereich mit Leerzeichen mit der aktuellen Vordergrund- und Hintergrundfarben gefüllt. Andernfalls wird der Teil der Schnittmenge des Quellbereichs nicht ausgefüllt.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Mindestens einer der Parameter ist kleiner als 0 (null).  
  
- oder -  
 <paramref name="sourceLeft" /> oder <paramref name="targetLeft" /> ist größer oder gleich <see cref="P:System.Console.BufferWidth" />.  
  
- oder -  
 <paramref name="sourceTop" /> oder <paramref name="targetTop" /> ist größer oder gleich <see cref="P:System.Console.BufferHeight" />.  
  
- oder -  
 <paramref name="sourceTop" /> + <paramref name="sourceHeight" /> ist größer oder gleich <see cref="P:System.Console.BufferHeight" />.  
  
- oder -  
 <paramref name="sourceLeft" /> + <paramref name="sourceWidth" /> ist größer oder gleich <see cref="P:System.Console.BufferWidth" />.</exception>
        <exception cref="T:System.Security.SecurityException">Der Benutzer verfügt nicht über die erforderliche Berechtigung, um diese Aktion auszuführen.</exception>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="MoveBufferArea">
      <MemberSignature Language="C#" Value="public static void MoveBufferArea (int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop, char sourceChar, ConsoleColor sourceForeColor, ConsoleColor sourceBackColor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MoveBufferArea(int32 sourceLeft, int32 sourceTop, int32 sourceWidth, int32 sourceHeight, int32 targetLeft, int32 targetTop, char sourceChar, valuetype System.ConsoleColor sourceForeColor, valuetype System.ConsoleColor sourceBackColor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub MoveBufferArea (sourceLeft As Integer, sourceTop As Integer, sourceWidth As Integer, sourceHeight As Integer, targetLeft As Integer, targetTop As Integer, sourceChar As Char, sourceForeColor As ConsoleColor, sourceBackColor As ConsoleColor)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MoveBufferArea(int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop, char sourceChar, ConsoleColor sourceForeColor, ConsoleColor sourceBackColor);" />
      <MemberSignature Language="F#" Value="static member MoveBufferArea : int * int * int * int * int * int * char * ConsoleColor * ConsoleColor -&gt; unit" Usage="System.Console.MoveBufferArea (sourceLeft, sourceTop, sourceWidth, sourceHeight, targetLeft, targetTop, sourceChar, sourceForeColor, sourceBackColor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceLeft" Type="System.Int32" />
        <Parameter Name="sourceTop" Type="System.Int32" />
        <Parameter Name="sourceWidth" Type="System.Int32" />
        <Parameter Name="sourceHeight" Type="System.Int32" />
        <Parameter Name="targetLeft" Type="System.Int32" />
        <Parameter Name="targetTop" Type="System.Int32" />
        <Parameter Name="sourceChar" Type="System.Char" />
        <Parameter Name="sourceForeColor" Type="System.ConsoleColor" />
        <Parameter Name="sourceBackColor" Type="System.ConsoleColor" />
      </Parameters>
      <Docs>
        <param name="sourceLeft">Die am weitesten links stehende Spalte des Quellbereichs.</param>
        <param name="sourceTop">Die oberste Zeile des Quellbereichs.</param>
        <param name="sourceWidth">Die Anzahl der Spalten im Quellbereich.</param>
        <param name="sourceHeight">Die Anzahl der Zeilen im Quellbereich.</param>
        <param name="targetLeft">Die am weitesten links stehende Spalte des Zielbereichs.</param>
        <param name="targetTop">Die oberste Zeile des Zielbereichs.</param>
        <param name="sourceChar">Das zum Ausfüllen des Quellbereichs verwendete Zeichen.</param>
        <param name="sourceForeColor">Die zum Ausfüllen des Quellbereichs verwendete Vordergrundfarbe.</param>
        <param name="sourceBackColor">Die zum Ausfüllen des Quellbereichs verwendete Hintergrundfarbe.</param>
        <summary>Kopiert einen angegebenen Quellbereich des Bildschirmpuffers in einen angegebenen Zielbereich.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die Ziel- und Parameter eine Position befindet sich über die Grenzen der aktuellen Bildschirmpuffer angeben, wird nur der Teil des Quellbereichs, die innerhalb der Zielbereich entspricht kopiert. D. h. wird des Quellbereichs abgeschnitten, damit Sie den aktuellen Bildschirmpuffer passt.  
  
 Die <xref:System.Console.MoveBufferArea%2A> Methode kopiert den Quellbereich in den Zielbereich. Wenn der Zielbereich nicht Quellbereichs schneidet, ist der Quellbereich mit den vom angegebenen ausgefüllt `sourceChar`, unter Verwendung der Farben, die anhand des `sourceForeColor` und `sourceBackColor`. Andernfalls wird der Teil der Schnittmenge des Quellbereichs nicht ausgefüllt.  
  
 Die <xref:System.Console.MoveBufferArea%2A> Methode führt keine Operation aus, wenn `sourceWidth` oder `sourceHeight` ist 0 (null).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Mindestens einer der Parameter ist kleiner als 0 (null).  
  
- oder -  
 <paramref name="sourceLeft" /> oder <paramref name="targetLeft" /> ist größer oder gleich <see cref="P:System.Console.BufferWidth" />.  
  
- oder -  
 <paramref name="sourceTop" /> oder <paramref name="targetTop" /> ist größer oder gleich <see cref="P:System.Console.BufferHeight" />.  
  
- oder -  
 <paramref name="sourceTop" /> + <paramref name="sourceHeight" /> ist größer oder gleich <see cref="P:System.Console.BufferHeight" />.  
  
- oder -  
 <paramref name="sourceLeft" /> + <paramref name="sourceWidth" /> ist größer oder gleich <see cref="P:System.Console.BufferWidth" />.</exception>
        <exception cref="T:System.ArgumentException">Einer oder beide Farbparameter sind kein Member der <see cref="T:System.ConsoleColor" />-Enumeration.</exception>
        <exception cref="T:System.Security.SecurityException">Der Benutzer verfügt nicht über die erforderliche Berechtigung, um diese Aktion auszuführen.</exception>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="NumberLock">
      <MemberSignature Language="C#" Value="public static bool NumberLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool NumberLock" />
      <MemberSignature Language="DocId" Value="P:System.Console.NumberLock" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property NumberLock As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool NumberLock { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.NumberLock : bool" Usage="System.Console.NumberLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die NUM-Tastaturumschalttaste aktiviert oder deaktiviert ist.</summary>
        <value>
          <see langword="true" />, wenn die NUM-TASTE aktiviert ist, <see langword="false" />, wenn die NUM-TASTE deaktiviert ist.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenStandardError">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ruft den Standardfehlerstream ab.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenStandardError">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardError ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardError() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.OpenStandardError" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenStandardError () As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Stream ^ OpenStandardError();" />
      <MemberSignature Language="F#" Value="static member OpenStandardError : unit -&gt; System.IO.Stream" Usage="System.Console.OpenStandardError " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft den Standardfehlerstream ab.</summary>
        <returns>Der Standardfehlerstream.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode kann verwendet werden, um den Standardfehlerstream erneut, nachdem es durch geändert wurde der <xref:System.Console.SetError%2A> Methode.  
  
   
  
## Examples  
 Im folgende Beispiel wird ein einfacher Text-Datei-Viewer, der der Inhalt von ein oder mehrere Textdateien in der Konsole angezeigt. Wenn es keine Befehlszeilenargumente oder wenn alle Dateien, die als Befehlszeilenargumente übergeben nicht vorhanden sind, im Beispiel wird die <xref:System.Console.SetError%2A> Methodenaufrufe zum Umleiten von Fehlerinformationen in einer Datei, die <xref:System.Console.OpenStandardError%2A> Methode beim erneuten erhalten den Standardfehler Stream und gibt an, dass die Fehlerinformationen in eine Datei geschrieben wurde.  
  
 [!code-csharp[System.Console.OpenStandardError#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.openstandarderror/cs/viewtextfile.cs#1)]
 [!code-vb[System.Console.OpenStandardError#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.openstandarderror/vb/viewtextfile.vb#1)]  
  
 Beachten Sie, dass die <xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=nameWithType> -Eigenschaftensatz auf `true` vor dem erneuten erhalten den fehlerdatenstrom. Dadurch wird sichergestellt, dass die Ausgabe wird sofort an die Konsole gesendet, sondern gepuffert.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Console.Error" />
        <altmember cref="P:System.Console.IsErrorRedirected" />
        <altmember cref="M:System.Console.SetError(System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="OpenStandardError">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardError (int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardError(int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.OpenStandardError(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenStandardError (bufferSize As Integer) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Stream ^ OpenStandardError(int bufferSize);" />
      <MemberSignature Language="F#" Value="static member OpenStandardError : int -&gt; System.IO.Stream" Usage="System.Console.OpenStandardError bufferSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bufferSize">Die Größe des internen Streampuffers.</param>
        <summary>Ruft den Standardfehlerstream ab, der auf eine angegebene Puffergröße festgelegt wird.</summary>
        <returns>Der Standardfehlerstream.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode kann verwendet werden, um den Standardfehlerstream erneut, nachdem es durch geändert wurde der <xref:System.Console.SetError%2A> Methode.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="bufferSize" /> ist kleiner gleich 0 (null).</exception>
        <altmember cref="P:System.Console.Error" />
        <altmember cref="P:System.Console.IsErrorRedirected" />
        <altmember cref="M:System.Console.SetError(System.IO.TextWriter)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenStandardInput">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ruft den Standardeingabestream ab.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenStandardInput">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardInput ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardInput() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.OpenStandardInput" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenStandardInput () As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Stream ^ OpenStandardInput();" />
      <MemberSignature Language="F#" Value="static member OpenStandardInput : unit -&gt; System.IO.Stream" Usage="System.Console.OpenStandardInput " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft den Standardeingabestream ab.</summary>
        <returns>Der Standardeingabestream.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode kann verwendet werden, die standard-Eingabedatenstrom erneut, nachdem es durch geändert wurde der <xref:System.Console.SetIn%2A> Methode.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Verwendung der `OpenStandardInput` Eigenschaft.  
  
 [!code-cpp[System.Console.OpenStandartInput#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.OpenStandartInput/CPP/decode.cpp#1)]
 [!code-csharp[System.Console.OpenStandartInput#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.OpenStandartInput/CS/decode.cs#1)]
 [!code-vb[System.Console.OpenStandartInput#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.OpenStandartInput/VB/decode.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Console.In" />
        <altmember cref="P:System.Console.IsInputRedirected" />
        <altmember cref="M:System.Console.SetIn(System.IO.TextReader)" />
      </Docs>
    </Member>
    <Member MemberName="OpenStandardInput">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardInput (int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardInput(int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.OpenStandardInput(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenStandardInput (bufferSize As Integer) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Stream ^ OpenStandardInput(int bufferSize);" />
      <MemberSignature Language="F#" Value="static member OpenStandardInput : int -&gt; System.IO.Stream" Usage="System.Console.OpenStandardInput bufferSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bufferSize">Die Größe des internen Streampuffers.</param>
        <summary>Ruft den Standardeingabestream ab, der auf eine angegebene Puffergröße festgelegt wird.</summary>
        <returns>Der Standardeingabestream.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode kann verwendet werden, den standardmäßigen Ausgabedatenstrom erneut, nachdem es durch geändert wurde der <xref:System.Console.SetIn%2A> Methode.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Verwendung der `OpenStandardInput` Eigenschaft.  
  
 [!code-cpp[System.Console.OpenStandartInput#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.OpenStandartInput/CPP/decode.cpp#1)]
 [!code-csharp[System.Console.OpenStandartInput#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.OpenStandartInput/CS/decode.cs#1)]
 [!code-vb[System.Console.OpenStandartInput#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.OpenStandartInput/VB/decode.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="bufferSize" /> ist kleiner gleich 0 (null).</exception>
        <altmember cref="P:System.Console.In" />
        <altmember cref="P:System.Console.IsInputRedirected" />
        <altmember cref="M:System.Console.SetIn(System.IO.TextReader)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenStandardOutput">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ruft den Standardausgabestream ab.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenStandardOutput">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardOutput ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardOutput() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.OpenStandardOutput" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenStandardOutput () As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Stream ^ OpenStandardOutput();" />
      <MemberSignature Language="F#" Value="static member OpenStandardOutput : unit -&gt; System.IO.Stream" Usage="System.Console.OpenStandardOutput " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft den Standardausgabestream ab.</summary>
        <returns>Der Standardausgabestream.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode kann verwendet werden, den standardmäßigen Ausgabedatenstrom erneut, nachdem es durch geändert wurde der <xref:System.Console.SetOut%2A> Methode.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der <xref:System.Console.OpenStandardOutput%2A>-Methode veranschaulicht. Hierdurch werden vier aufeinander folgende Leerzeichen in einer Zeichenfolge durch ein Tabstoppzeichen ersetzt. Um es auszuführen, müssen Sie zwei Befehlszeilenargumente angeben. Das erste ist der Name einer vorhandenen Textdatei, in die der Standardeingabestream umgeleitet wird. Das zweite ist der Name einer Datei, in die der Standardausgabestream umgeleitet wird. Diese Datei muss nicht vorhanden sein. Wenn das der Fall ist, wird der Inhalt überschrieben.  
  
 [!code-cpp[System.Console-INSERTTABS#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CPP/inserttabs.cpp#1)]
 [!code-csharp[System.Console-INSERTTABS#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CS/inserttabs.cs#1)]
 [!code-vb[System.Console-INSERTTABS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-INSERTTABS/VB/inserttabs.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Console.Out" />
        <altmember cref="P:System.Console.IsOutputRedirected" />
        <altmember cref="M:System.Console.SetOut(System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="OpenStandardOutput">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardOutput (int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardOutput(int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.OpenStandardOutput(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenStandardOutput (bufferSize As Integer) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Stream ^ OpenStandardOutput(int bufferSize);" />
      <MemberSignature Language="F#" Value="static member OpenStandardOutput : int -&gt; System.IO.Stream" Usage="System.Console.OpenStandardOutput bufferSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bufferSize">Die Größe des internen Streampuffers.</param>
        <summary>Ruft den Standardausgabestream ab, der auf eine angegebene Puffergröße festgelegt wird.</summary>
        <returns>Der Standardausgabestream.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode kann verwendet werden, den standardmäßigen Ausgabedatenstrom erneut, nachdem es durch geändert wurde der <xref:System.Console.SetOut%2A> Methode.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der <xref:System.Console.OpenStandardOutput%2A>-Methode veranschaulicht. Hierdurch werden vier aufeinander folgende Leerzeichen in einer Zeichenfolge durch ein Tabstoppzeichen ersetzt. Um es auszuführen, müssen Sie zwei Befehlszeilenargumente angeben. Das erste ist der Name einer vorhandenen Textdatei, in die der Standardeingabestream umgeleitet wird. Das zweite ist der Name einer Datei, in die der Standardausgabestream umgeleitet wird. Diese Datei muss nicht vorhanden sein. Wenn das der Fall ist, wird der Inhalt überschrieben.  
  
 [!code-cpp[System.Console-INSERTTABS#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CPP/inserttabs.cpp#1)]
 [!code-csharp[System.Console-INSERTTABS#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CS/inserttabs.cs#1)]
 [!code-vb[System.Console-INSERTTABS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-INSERTTABS/VB/inserttabs.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="bufferSize" /> ist kleiner gleich 0 (null).</exception>
        <altmember cref="P:System.Console.Out" />
        <altmember cref="P:System.Console.IsOutputRedirected" />
        <altmember cref="M:System.Console.SetOut(System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="Out">
      <MemberSignature Language="C#" Value="public static System.IO.TextWriter Out { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.IO.TextWriter Out" />
      <MemberSignature Language="DocId" Value="P:System.Console.Out" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Out As TextWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::IO::TextWriter ^ Out { System::IO::TextWriter ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Out : System.IO.TextWriter" Usage="System.Console.Out" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Standardausgabestream ab.</summary>
        <value>Ein <see cref="T:System.IO.TextWriter" />, der den Standardausgabestream darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft wird in den Standardausgabestream standardmäßig festgelegt. Diese Eigenschaft kann festgelegt werden, in einen anderen Stream mit der <xref:System.Console.SetOut%2A> Methode.  
  
 Beachten Sie, die Aufrufe `Console.Out.WriteLine` Methoden sind äquivalent in Aufrufe an den entsprechenden <xref:System.Console.WriteLine%2A> Methoden.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Console.Out%2A> Eigenschaft, um ein Array mit den Namen der Dateien im aktuellen Verzeichnis in das Standardausgabegerät der Anwendung anzuzeigen. Anschließend wird die standardmäßige Ausgabe auf die Datei Files.txt festgelegt und listet die Elemente des Arrays in die Datei. Schließlich legt die Ausgabe in den Standardausgabestream und zeigt erneut die Elemente des Arrays an das Standardausgabe-Gerät.  
  
 [!code-csharp[System.Console.Out#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.out/cs/out1.cs#1)]
 [!code-vb[System.Console.Out#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.out/vb/out1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Console.Error" />
        <altmember cref="P:System.Console.In" />
        <altmember cref="M:System.Console.SetOut(System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="OutputEncoding">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding OutputEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Encoding OutputEncoding" />
      <MemberSignature Language="DocId" Value="P:System.Console.OutputEncoding" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property OutputEncoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::Encoding ^ OutputEncoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OutputEncoding : System.Text.Encoding with get, set" Usage="System.Console.OutputEncoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Codierung ab, die die Konsole verwendet, um die Ausgabe zu schreiben, oder legt diese fest.</summary>
        <value>Die Codierung, die verwendet wird, um die Konsolenausgabe zu schreiben.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Konsole verwendet die ausgabecodierung, um von einer Anwendung in die entsprechenden Zeichen der Console-Anzeige geschriebenen Zeichen zu übersetzen. Die Standardcodepage, die die Konsole verwendet, wird durch das Gebietsschema des Systems bestimmt.  
  
 Beginnend mit der [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], ein Eigenschaft Get-Vorgang möglicherweise einen zwischengespeicherten Wert anstelle der Konsole zur aktuellen ausgabecodierung zurück. Dies kann auftreten, wenn der Wert des der <xref:System.Console.OutputEncoding%2A> -Eigenschaft geändert wird, mit der Zuweisung zu den <xref:System.Console.OutputEncoding%2A> Eigenschaft, z. B. das Aufrufen der Windows `SetConsoleOutputCP` Funktion.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der Eigenschaftswert in einer Set-Operation ist <see langword="null" />.</exception>
        <exception cref="T:System.IO.IOException">Während der Ausführung dieses Vorgangs ist ein Fehler aufgetreten.</exception>
        <exception cref="T:System.Security.SecurityException">Ihre Anwendung verfügt nicht über die erforderliche Berechtigung zum Ausführen dieses Vorgangs.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Lesen und Schreiben in das Fenster der obersten Ebene und untergeordnete Fenster.  Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <block subset="none" type="usage">
          <para>Der Unicode-Codierungen die <see cref="T:System.Console" /> Klasse unterstützt UTF-8-Codierung mit der <see cref="T:System.Text.UTF8Encoding" /> Klasse und, beginnend mit der [!INCLUDE[net_v45](~/includes/net-v45-md.md)], unterstützt UTF-16-Codierung mit der <see cref="T:System.Text.UnicodeEncoding" /> Klasse. UTF-32-Codierung mit der <see cref="T:System.Text.UTF32Encoding" /> Klasse wird nicht unterstützt. Beim Festlegen der ausgabecodierung in UTF-32 löst eine <see cref="T:System.IO.IOException" />.  
  
Beachten Sie, dass erfolgreich Anzeigen von Unicode-Zeichen in der Konsole ist Folgendes erforderlich: 
-Die-Konsole muss eine TrueType-Schriftart an, wie Lucida Console oder Consolas, verwenden Sie Zeichen angezeigt werden sollen.  
  
– Eine Schriftart, die von der Konsole verwendet, muss die bestimmten Symbol oder die Symbole angezeigt werden definieren. Die Konsole kann um Symbole aus verknüpften Schriftarten anzuzeigen, wenn der Basisschriftart keine Definition für dieses Symbol-schriftartverknüpfung nutzen.  
  
Weitere Informationen zur Unterstützung für Unicode-Codierung von der Konsole finden Sie im Abschnitt "Unicode-Unterstützung für die Konsole" in der <see cref="T:System.Console" /> Klasse.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static int Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Read" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Read();" />
      <MemberSignature Language="F#" Value="static member Read : unit -&gt; int" Usage="System.Console.Read " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Liest das nächste Zeichen aus dem Standardeingabestream.</summary>
        <returns>Das nächste Zeichen aus dem Eingabestream bzw. -1, wenn derzeit keine weiteren Zeichen gelesen werden können.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Console.Read%2A> Methode wieder blockiert, während der Eingabe von eingegebenen Zeichen; er beendet wird, wenn Sie drücken die <xref:System.ConsoleKey.Enter> Schlüssel. Ihre Eingabe Drücken der EINGABETASTE eine plattformabhängige Abschlusssequenz hinzufügt (z. B. Windows fügt eine Carriage Return-Zeilenvorschub-Sequenz an). Nachfolgende Aufrufe der <xref:System.Console.Read%2A> Methode abgerufen, die eingegebene Zeichen für Zeichen zu einem Zeitpunkt. Nachdem das letzte Zeichen abgerufen wurden, <xref:System.Console.Read%2A> blockiert wieder erneut und der Zyklus wiederholt.  
  
> [!IMPORTANT]
>  Die <xref:System.Console.ReadLine%2A> -Methode, oder die <xref:System.Console.KeyAvailable%2A> Eigenschaft und <xref:System.Console.ReadKey%2A> Methode sind vorzuziehen, mit der <xref:System.Console.Read%2A> Methode.  
  
 Beachten Sie, dass die Methode nicht-1 zurückgegeben werden, es sei denn, Sie eine der folgenden Aktionen ausführen:  
  
-   Drücken Sie gleichzeitig die <xref:System.ConsoleModifiers.Control> Modifizierertaste und <xref:System.ConsoleKey.Z> -Konsolentaste (STRG + Z), der signalisiert, die End-of-File-Bedingung.  
  
-   Drücken Sie die einen entsprechenden Schlüssel, der die End-of-File-Bedingung, z. B. F6-Funktion in Windows signalisiert.  
  
-   Leiten Sie den Eingabedatenstrom mit einer Datenquelle, z. B. eine Textdatei, mit einem tatsächlichen EOF Zeichen.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.Console.Read%2A> Methode.  
  
 [!code-cpp[console.read#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.read/CPP/read.cpp#1)]
 [!code-csharp[console.read#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.read/CS/read.cs#1)]
 [!code-vb[console.read#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.read/VB/read.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadKey">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ruft die nächste vom Benutzer gedrückte Zeichen- oder Funktionstaste ab.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadKey">
      <MemberSignature Language="C#" Value="public static ConsoleKeyInfo ReadKey ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ConsoleKeyInfo ReadKey() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.ReadKey" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadKey () As ConsoleKeyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ConsoleKeyInfo ReadKey();" />
      <MemberSignature Language="F#" Value="static member ReadKey : unit -&gt; ConsoleKeyInfo" Usage="System.Console.ReadKey " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ConsoleKeyInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft die nächste vom Benutzer gedrückte Zeichen- oder Funktionstaste ab. Die gedrückte Taste wird im Konsolenfenster angezeigt.</summary>
        <returns>Ein Objekt, das die <see cref="T:System.ConsoleKey" />-Konstante und ggf. das Unicode-Zeichen beschreibt, die der gedrückten Konsolentaste entsprechen. Das <see cref="T:System.ConsoleKeyInfo" />-Objekt beschreibt außerdem in einer bitweisen Kombination von <see cref="T:System.ConsoleModifiers" />-Werten, ob eine oder mehrere der Modifizierertasten UMSCHALTTASTE, ALT oder STRG gleichzeitig mit der Konsolentaste gedrückt wurden.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Console.ReadKey%2A> Methode wartet, also blockiert den Thread ausgeben der <xref:System.Console.ReadKey%2A> -Methode, bis eine Zeichen- oder Funktionstaste-Taste gedrückt wird. Ein Zeichen- oder Funktionstaste Schlüssel kann in Kombination mit der eine oder mehrere der Modifizierertasten Alt, STRG oder UMSCHALT gedrückt werden. Jedoch selbst eine Modifizierertaste gedrückt werden nicht dazu führen, dass die <xref:System.Console.ReadKey%2A> Methode zurückgeben.  
  
 Abhängig von Ihrer Anwendung sollten Sie verwenden die <xref:System.Console.ReadKey%2A> -Methode in Verbindung mit der <xref:System.Console.KeyAvailable%2A> Eigenschaft.  
  
 Die <xref:System.Console.ReadKey%2A> Methode liest, von der Tastatur, auch wenn die Eingabe umgeleitet wird, in eine Datei mit den <xref:System.Console.SetIn%2A> Methode.  
  
   
  
## Examples  
 Eine der am häufigsten verwendet, der die <xref:System.Console.ReadKey> Methode ist die Ausführung des Programms angehalten, bis der Benutzer eine Taste drückt, und die app beendet wird oder ein zusätzliches Fenster Informationen angezeigt. Im folgenden Beispiel wird die <xref:System.Console.ReadKey> -Methode warten, damit der Benutzer die EINGABETASTE drücken, vor dem Beenden der app.  
  
 [!code-csharp[System.Console.ReadKey#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Console.ReadKey/cs/ReadKey1.cs#1)]
 [!code-vb[System.Console.ReadKey#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Console.ReadKey/vb/ReadKey1.vb#1)]  
  
 Beachten Sie, die diese Überladung von der <xref:System.Console.ReadKey%2A> Methode in der Standardeinstellung gibt alle anzeigbaren Schlüssel, die der Benutzer, an die Konsole drückt. Aufrufen, um sie zu unterdrücken, die <xref:System.Console.ReadKey%2A> -Methode mit einem `intercept` Argument `true`.  
  
 Im folgenden Beispiel wird die <xref:System.Console.ReadKey> Methode zum Anzeigen von Informationen über die Taste gedrückt..  
  
 [!code-cpp[console.readkey1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.readkey1/CPP/rk.cpp#1)]
 [!code-csharp[console.readkey1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.readkey1/CS/rk.cs#1)]
 [!code-vb[console.readkey1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.readkey1/VB/rk.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die <see cref="P:System.Console.In" />-Eigenschaft wird von einem anderen Stream als der Konsole umgeleitet.</exception>
        <altmember cref="T:System.ConsoleKey" />
        <altmember cref="P:System.Console.KeyAvailable" />
        <altmember cref="P:System.Console.TreatControlCAsInput" />
        <altmember cref="E:System.Console.CancelKeyPress" />
      </Docs>
    </Member>
    <Member MemberName="ReadKey">
      <MemberSignature Language="C#" Value="public static ConsoleKeyInfo ReadKey (bool intercept);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ConsoleKeyInfo ReadKey(bool intercept) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.ReadKey(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadKey (intercept As Boolean) As ConsoleKeyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ConsoleKeyInfo ReadKey(bool intercept);" />
      <MemberSignature Language="F#" Value="static member ReadKey : bool -&gt; ConsoleKeyInfo" Usage="System.Console.ReadKey intercept" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ConsoleKeyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intercept" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="intercept">Bestimmt, ob die gedrückte Taste im Konsolenfenster angezeigt werden soll. <see langword="true" />, wenn die gedrückte Taste nicht angezeigt werden soll, andernfalls <see langword="false" />.</param>
        <summary>Ruft die nächste vom Benutzer gedrückte Zeichen- oder Funktionstaste ab. Die gedrückte Taste wird optional im Konsolenfenster angezeigt.</summary>
        <returns>Ein Objekt, das die <see cref="T:System.ConsoleKey" />-Konstante und ggf. das Unicode-Zeichen beschreibt, die der gedrückten Konsolentaste entsprechen. Das <see cref="T:System.ConsoleKeyInfo" />-Objekt beschreibt außerdem in einer bitweisen Kombination von <see cref="T:System.ConsoleModifiers" />-Werten, ob eine oder mehrere der Modifizierertasten UMSCHALTTASTE, ALT oder STRG gleichzeitig mit der Konsolentaste gedrückt wurden.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Console.ReadKey%2A> Methode wartet, also blockiert den Thread ausgeben der <xref:System.Console.ReadKey%2A> -Methode, bis eine Zeichen- oder Funktionstaste-Taste gedrückt wird. Ein Zeichen- oder Funktionstaste Schlüssel kann in Kombination mit der eine oder mehrere der Modifizierertasten Alt, STRG oder UMSCHALT gedrückt werden. Jedoch selbst eine Modifizierertaste gedrückt werden nicht dazu führen, dass die <xref:System.Console.ReadKey%2A> Methode zurückgeben.  
  
 Wenn die `intercept` Parameter `true`, die gedrückte Taste wird abgefangen und nicht im Konsolenfenster angezeigt wird; andernfalls, die gedrückte Taste wird angezeigt.  
  
 Abhängig von Ihrer Anwendung sollten Sie verwenden die <xref:System.Console.ReadKey%2A> -Methode in Verbindung mit der <xref:System.Console.KeyAvailable%2A> Eigenschaft.  
  
 Die <xref:System.Console.ReadKey%2A> Methode liest, von der Tastatur, auch wenn die Eingabe umgeleitet wird, in eine Datei mit den <xref:System.Console.SetIn%2A> Methode.  
  
   
  
## Examples  
 Eine der am häufigsten verwendet, der die <xref:System.Console.ReadKey%2A> Methode ist die Ausführung des Programms angehalten, bis der Benutzer eine Taste drückt, und die app beendet wird oder ein zusätzliches Fenster Informationen angezeigt. Im folgenden Beispiel wird die <xref:System.Console.ReadKey%28System.Boolean%29> -Methode warten, damit der Benutzer die EINGABETASTE drücken, vor dem Beenden der app. Beachten Sie, dass der Benutzer eine beliebige Taste drückt, es nicht in der Konsole ausgegeben wird.  
  
 [!code-csharp[System.Console.ReadKey#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Console.ReadKey/cs/ReadKey2.cs#2)]
 [!code-vb[System.Console.ReadKey#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Console.ReadKey/vb/ReadKey2.vb#2)]  
  
 Im folgenden Beispiel wird die <xref:System.Console.ReadKey%28System.Boolean%29> Methode, um Informationen über den Schlüssel, die von einem Benutzer aufgerufen werden, ohne zu wiederholen diesen Schlüssel in der Konsole anzuzeigen.  
  
 [!code-cpp[console.readkey2#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.readkey2/CPP/rkbool.cpp#1)]
 [!code-csharp[console.readkey2#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.readkey2/CS/rkbool.cs#1)]
 [!code-vb[console.readkey2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.readkey2/VB/rkbool.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die <see cref="P:System.Console.In" />-Eigenschaft wird von einem anderen Stream als der Konsole umgeleitet.</exception>
        <altmember cref="T:System.ConsoleKey" />
        <altmember cref="P:System.Console.KeyAvailable" />
        <altmember cref="P:System.Console.TreatControlCAsInput" />
        <altmember cref="E:System.Console.CancelKeyPress" />
      </Docs>
    </Member>
    <Member MemberName="ReadLine">
      <MemberSignature Language="C#" Value="public static string ReadLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ReadLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.ReadLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadLine () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ReadLine();" />
      <MemberSignature Language="F#" Value="static member ReadLine : unit -&gt; string" Usage="System.Console.ReadLine " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Liest die nächste Zeile von Zeichen aus dem Standardeingabestream.</summary>
        <returns>Die nächste Zeile von Zeichen aus dem Eingabestream oder <see langword="null" />, wenn keine weiteren Zeilen verfügbar sind.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Console.ReadLine%2A> Methode liest eine Zeile aus dem Standardeingabestream. (Die Definition einer Linie, finden Sie unter dem Absatz nach der folgenden Liste.) Dies bedeutet Folgendes:  
  
-   Ist das standardmäßige Eingabegerät der Tastatur die <xref:System.Console.ReadLine%2A> Methode blockiert, bis der Benutzer drückt die **EINGABETASTE** Schlüssel.  
  
     Eine der am häufigsten verwendet, der die <xref:System.Console.ReadLine%2A> Methode ist vor dem Löschen der Konsole und Anzeigen von Informationen, die Ausführung des Programms anhalten oder fordert den Benutzer auf die EINGABETASTE drücken, bevor Sie die Anwendung beenden. Dies wird anhand des folgenden Beispiels veranschaulicht.  
  
     [!code-cpp[System.Console.ReadLine#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.ReadLine/cpp/ReadLineSimple.cpp#6)]
     [!code-csharp[System.Console.ReadLine#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.ReadLine/cs/ReadLineSimple.cs#6)]
     [!code-vb[System.Console.ReadLine#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.ReadLine/vb/ReadLineSimple.vb#6)]  
  
-   Wenn die Eingabe umgeleitet wird, in eine Datei, die <xref:System.Console.ReadLine%2A> Methode liest eine Textzeile aus einer Datei. Folgendes ist z. B. eine Textdatei, die mit dem Namen ReadLine1.txt:  
  
    ```  
  
    This is the first line.  
    This is the second line.  
    This is the third line.  
    This is the fourth line.  
  
    ```  
  
     Im folgenden Beispiel wird die <xref:System.Console.ReadLine%2A> Methode, um Eingaben zu lesen, die aus einer Datei umgeleitet wird. Der Lesevorgang beendet wird, wenn die Methode zurückkehrt `null`, was bedeutet, dass keine Zeilen noch nicht gelesen werden.  
  
     [!code-csharp[System.Console.ReadLine#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.ReadLine/cs/ReadLine3.cs#3)]
     [!code-vb[System.Console.ReadLine#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.ReadLine/vb/ReadLine3.vb#3)]  
  
     Nach dem Kompilieren des Beispiels für eine ausführbare benannte ReadLine1.exe, können Sie ihn über die Befehlszeile mit der Syntax ausführen  
  
    ```  
    ReadLine1 < ReadLine1.txt  
    ```  
  
     Lesen den Inhalt der Datei, und in der Konsole angezeigt werden.  
  
 Eine Zeile ist definiert als eine Folge von Zeichen, gefolgt von einem Wagenrücklauf (hexadezimal 0x000d), einem Zeilenvorschub (hexadezimal 0x000a) oder den Wert des der <xref:System.Environment.NewLine%2A?displayProperty=nameWithType> Eigenschaft. Die zurückgegebene Zeichenfolge enthält nicht die abschließenden Zeichen. Standardmäßig liest die Methode von einem Eingabepuffer 256 Zeichen. Da dies schließt die <xref:System.Environment.NewLine%2A?displayProperty=nameWithType> Zeichen, die die Methode kann lesen Zeilen, die bis zu 254 Zeichen enthalten. Um mehr Zeilen zu lesen, rufen Sie die <xref:System.Console.OpenStandardInput%28System.Int32%29> Methode.  
  
 Die <xref:System.Console.ReadLine%2A> Methode synchron ausgeführt. D.h., wird sie gesperrt, bis eine Zeile gelesen wird, oder die Tastenkombination STRG + Z gedrückt wird. Die <xref:System.Console.In%2A> -Eigenschaft gibt eine <xref:System.IO.TextReader> Objekt, das den Standardeingabestream darstellt und, bei dem eine synchrone <xref:System.IO.TextReader.ReadLine%2A?displayProperty=nameWithType> -Methode und eine asynchrone <xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=nameWithType> Methode. Jedoch, wenn Sie als der Konsole zur standard-Eingabedatenstrom, verwendet der <xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=nameWithType> führt synchron statt asynchron und gibt eine `Task<String>` , wenn der Lesevorgang abgeschlossen ist.  
  
 Wenn diese Methode löst eine <xref:System.OutOfMemoryException> Ausnahme, die die Position des Readers im zugrunde liegenden <xref:System.IO.Stream> Objekt wird durch die Anzahl der Zeichen, die die Methode wurde zum Lesen, aber die bereits in den internen gelesenen Zeichen erweiterte <xref:System.Console.ReadLine%2A> werden der Buffer verworfen. Da die Position des Readers im Datenstrom kann nicht geändert werden, die bereits gelesenen Zeichen sind nicht mehr wiederherstellbar und zugegriffen werden kann, nur durch erneutes Initialisieren der <xref:System.IO.TextReader>. Wenn die ursprüngliche Position im Stream unbekannt ist oder der Stream keine Suchvorgänge unterstützt, die zugrunde liegende <xref:System.IO.Stream> auch neu initialisiert werden muss. Um diese Situation zu vermeiden und stabilen Code zu erstellen, befolgen Sie die <xref:System.Console.KeyAvailable%2A> Eigenschaft und <xref:System.Console.ReadKey%2A> -Methode und der Store die gelesenen Zeichen in einem Puffer vorab zugeordnet.  
  
 Wenn STRG + z gedrückt wird, wenn die Methode Lesen von Eingaben über die Konsole ist, gibt die Methode `null`. Dadurch kann der Benutzer zu verhindern, dass weitere Tastatur Eingabe beim der <xref:System.Console.ReadLine%2A> Methode in einer Schleife aufgerufen wird. Das folgende Beispiel veranschaulicht dieses Szenario.  
  
 [!code-cpp[System.Console.ReadLine#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.ReadLine/cpp/readline2.cpp#1)]
 [!code-csharp[System.Console.ReadLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.ReadLine/cs/ReadLine2.cs#1)]
 [!code-vb[System.Console.ReadLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.ReadLine/vb/ReadLine2.vb#1)]  
  
   
  
## Examples  
 Das folgende Beispiel erfordert zwei Befehlszeilenargumente: der Name einer vorhandenen Textdatei, und der Name einer Datei, die die Ausgabe zu schreiben. Es wird die vorhandene Textdatei geöffnet und leitet die standard-Eingabe über die Tastatur auf die Datei. Es leitet auch die Standardausgabe in die Ausgabedatei über die Konsole. Anschließend wird mithilfe der <xref:System.Console.ReadLine%2A?displayProperty=nameWithType> Methode, um jede Zeile in der Datei zu lesen, jede Sequenz von vier Leerzeichen durch ein Tabstoppzeichen ersetzt, und verwendet die <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> Methode, um das Ergebnis in die Ausgabedatei zu schreiben.  
  
 [!code-cpp[System.Console-INSERTTABS#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CPP/inserttabs.cpp#1)]
 [!code-csharp[System.Console-INSERTTABS#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CS/inserttabs.cs#1)]
 [!code-vb[System.Console-INSERTTABS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-INSERTTABS/VB/inserttabs.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <exception cref="T:System.OutOfMemoryException">Es ist nicht genügend Speicher vorhanden, um einen Puffer für die zurückgegebene Zeichenfolge zuzuordnen.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Anzahl der Zeichen in der nächsten Zeile von Zeichen ist größer als <see cref="F:System.Int32.MaxValue" />.</exception>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="ResetColor">
      <MemberSignature Language="C#" Value="public static void ResetColor ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ResetColor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.ResetColor" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ResetColor ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ResetColor();" />
      <MemberSignature Language="F#" Value="static member ResetColor : unit -&gt; unit" Usage="System.Console.ResetColor " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legt die Vordergrund- und Hintergrundkonsolenfarben auf die entsprechenden Standardwerte fest.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Vordergrund- und Hintergrundfarben werden die Farben wiederhergestellt, die vorhanden waren, wenn der aktuelle Prozess wurde gestartet. Weitere Informationen finden Sie unter den <xref:System.Console.ForegroundColor%2A> und <xref:System.Console.BackgroundColor%2A> Eigenschaften.  
  
   
  
## Examples  
 Im folgende Beispiel speichert die Werte der der <xref:System.ConsoleColor> Enumeration in ein Array und speichert die aktuellen Werte von der <xref:System.Console.BackgroundColor%2A> und <xref:System.Console.ForegroundColor%2A> Eigenschaften an Variablen. Ändert die Vordergrundfarbe klicken Sie dann auf jede Farbe in der <xref:System.ConsoleColor> Enumeration, die mit der Ausnahme mit der Farbe, die die aktuelle Hintergrundfarbe entspricht, und die Farbe des Hintergrunds auf jede Farbe in ändert der <xref:System.ConsoleColor> Enumeration, außer auf die Farbe, entspricht die aktuelle Vordergrund. (Wenn die Vordergrundfarbe der Background-Farbe identisch ist, nicht des Texts angezeigt.) Schließlich ruft es die <xref:System.Console.ResetColor%2A> Verfahren zum Wiederherstellen der ursprünglichen konsolenfarben.  
  
 [!code-csharp[System.ConsoleColor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.consolecolor/cs/foregroundcolor3.cs#1)]
 [!code-vb[System.ConsoleColor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.consolecolor/vb/foregroundcolor3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">Der Benutzer verfügt nicht über die erforderliche Berechtigung, um diese Aktion auszuführen.</exception>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SetBufferSize">
      <MemberSignature Language="C#" Value="public static void SetBufferSize (int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetBufferSize(int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetBufferSize(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetBufferSize (width As Integer, height As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetBufferSize(int width, int height);" />
      <MemberSignature Language="F#" Value="static member SetBufferSize : int * int -&gt; unit" Usage="System.Console.SetBufferSize (width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="width">Die Breite des Pufferbereichs in Spalten.</param>
        <param name="height">Die Höhe des Pufferbereichs in Zeilen.</param>
        <summary>Legt die Höhe und die Breite des Bildschirmpufferbereichs auf die angegebenen Werte fest.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Beispiel zeigt die <xref:System.Console.WindowLeft%2A>, <xref:System.Console.WindowTop%2A>, <xref:System.Console.WindowWidth%2A>, <xref:System.Console.WindowHeight%2A>, <xref:System.Console.BufferWidth%2A>, <xref:System.Console.BufferHeight%2A>, und <xref:System.Console.CursorVisible%2A> Eigenschaften und die <xref:System.Console.SetWindowPosition%2A>, <xref:System.Console.SetBufferSize%2A>, und <xref:System.Console.ReadKey%2A> -Methoden. Im Beispiel werden ein Grid-Muster in den Bildschirmpuffer, basierend auf die Bildschirmpufferbreite gezeichnet. Klicken Sie dann verschiebt im Beispiel wird das Konsolenfenster als Reaktion auf die von der nach-oben, Pfeil nach unten, links oder nach-rechts-Konsolentaste gedrückt wird. Das Grid-Muster können Sie die Bewegung des Konsolenfensters relativ zum Bildschirmpuffer zu sehen.  
  
 [!code-cpp[console.windowLT#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.windowLT/CPP/wlt.cpp#1)]
 [!code-csharp[console.windowLT#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.windowLT/CS/wlt.cs#1)]
 [!code-vb[console.windowLT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.windowLT/VB/wlt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="height" /> oder <paramref name="width" /> ist kleiner oder gleich 0 (null).  
  
- oder -  
 <paramref name="height" /> oder <paramref name="width" /> ist größer oder gleich <see cref="F:System.Int16.MaxValue" />.  
  
- oder -  
 <paramref name="width" /> ist kleiner als <see cref="P:System.Console.WindowLeft" /> + <see cref="P:System.Console.WindowWidth" />  
  
- oder -  
 <paramref name="height" /> ist kleiner als <see cref="P:System.Console.WindowTop" /> + <see cref="P:System.Console.WindowHeight" /></exception>
        <exception cref="T:System.Security.SecurityException">Der Benutzer verfügt nicht über die erforderliche Berechtigung, um diese Aktion auszuführen.</exception>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SetCursorPosition">
      <MemberSignature Language="C#" Value="public static void SetCursorPosition (int left, int top);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCursorPosition(int32 left, int32 top) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetCursorPosition(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetCursorPosition (left As Integer, top As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetCursorPosition(int left, int top);" />
      <MemberSignature Language="F#" Value="static member SetCursorPosition : int * int -&gt; unit" Usage="System.Console.SetCursorPosition (left, top)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int32" />
        <Parameter Name="top" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="left">Die Spaltenposition des Cursors. Spalten werden von links nach rechts beginnend mit 0 nummeriert.</param>
        <param name="top">Die Zeilenposition des Cursors. Zeilen werden von oben nach unten nummeriert und beginnen mit 0.</param>
        <summary>Legt die Position des Cursors fest.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Console.SetCursorPosition%2A> Methode, um anzugeben, in dem der nächste Schreibvorgang im Konsolenfenster angezeigt wird, um zu beginnen. Wenn die angegebenen Cursorposition außerhalb des Bereichs, die derzeit im Konsolenfenster angezeigt wird ist, ändert der Fensterursprung automatisch um den Cursor sichtbar zu machen.  
  
 Der Cursor springt automatisch auf die nächste Position jedes Mal ein Zeichen in das Konsolenfenster geschrieben wird. Wenn der Cursor an der unteren rechten Zeichenposition des Konsolenfensters befindet, die nächste schreiben Vorgang bewirkt, dass das Konsolenfenster scrollen, damit der Cursor sichtbar bleibt. Wenn Sie ein Zeichen in der unteren rechten Zeichenposition schreiben, ohne dass das Konsolenfenster scrollen, verwenden Sie möchten die <xref:System.Console.MoveBufferArea%2A> Methode, um ein Zeichen, das dieser Position zu verschieben.  
  
   
  
## Examples  
 Dieses Beispiel zeigt die <xref:System.Console.CursorLeft%2A> und <xref:System.Console.CursorTop%2A> Eigenschaften, und die <xref:System.Console.SetCursorPosition%2A> und <xref:System.Console.Clear%2A> Methoden. Im Beispiel positioniert den Cursor, der bestimmt, wo der nächste Schreibvorgang erfolgt ein 5-Zeichen mit einer Kombination aus 5 Zeichen-Rechteck zu zeichnen, "+", "&#124;", und "-" Zeichenfolgen. Beachten Sie, dass das Rechteck mit weniger Schritten mithilfe einer Kombination aus anderen Zeichenfolgen gezeichnet werden kann.  
  
 [!code-cpp[console.cursorLTS#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cursorLTS/CPP/lts.cpp#1)]
 [!code-csharp[console.cursorLTS#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cursorLTS/CS/lts.cs#1)]
 [!code-vb[console.cursorLTS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cursorLTS/VB/lts.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="left" /> oder <paramref name="top" /> ist kleiner als 0.  
  
- oder -  
 <paramref name="left" /> ist größer als oder gleich <see cref="P:System.Console.BufferWidth" />.  
  
- oder -  
 <paramref name="top" /> ist größer gleich <see cref="P:System.Console.BufferHeight" />.</exception>
        <exception cref="T:System.Security.SecurityException">Der Benutzer verfügt nicht über die erforderliche Berechtigung, um diese Aktion auszuführen.</exception>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SetError">
      <MemberSignature Language="C#" Value="public static void SetError (System.IO.TextWriter newError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetError(class System.IO.TextWriter newError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetError(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetError (newError As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetError(System::IO::TextWriter ^ newError);" />
      <MemberSignature Language="F#" Value="static member SetError : System.IO.TextWriter -&gt; unit" Usage="System.Console.SetError newError" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newError" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="newError">Ein Datenstrom, der die neue Standardfehlerausgabe darstellt.</param>
        <summary>Legt die <see cref="P:System.Console.Error" />-Eigenschaft auf den angegebenen <see cref="T:System.IO.TextWriter" /> fest.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der Standardeinstellung die <xref:System.Console.Error%2A> Eigenschaft auf den Standard-Fehlerausgabestream festgelegt ist.  
  
 Ein <xref:System.IO.StreamWriter> , kapselt einen <xref:System.IO.FileStream> kann zum Senden von Fehlermeldungen in einer Datei verwendet werden.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, wie Sie den Standardfehler-Datenstrom in eine Datei umleiten.  
  
 [!code-cpp[System.Console.SetError#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.SetError/cpp/seterror1.cpp#1)]
 [!code-csharp[System.Console.SetError#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.SetError/cs/SetError1.cs#1)]
 [!code-vb[System.Console.SetError#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.SetError/vb/SetError1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="newError" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.Security.SecurityException">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">zum Aufrufen von nicht verwaltetem Code. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="P:System.Console.IsErrorRedirected" />
        <altmember cref="P:System.Console.Error" />
      </Docs>
    </Member>
    <Member MemberName="SetIn">
      <MemberSignature Language="C#" Value="public static void SetIn (System.IO.TextReader newIn);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetIn(class System.IO.TextReader newIn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetIn(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetIn (newIn As TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetIn(System::IO::TextReader ^ newIn);" />
      <MemberSignature Language="F#" Value="static member SetIn : System.IO.TextReader -&gt; unit" Usage="System.Console.SetIn newIn" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newIn" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="newIn">Ein Datenstrom, der die neue Standardeingabe darstellt.</param>
        <summary>Legt die <see cref="P:System.Console.In" />-Eigenschaft auf den angegebenen <see cref="T:System.IO.TextReader" /> fest.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der Standardeinstellung die <xref:System.Console.In%2A> -Eigenschaftensatz auf die standard-Eingabedatenstrom.  
  
 Ein <xref:System.IO.StreamReader> , kapselt einen <xref:System.IO.FileStream> können verwendet werden, um die Eingaben aus einer Datei zu erhalten.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der <xref:System.Console.SetIn%2A>-Methode veranschaulicht. Hierdurch werden vier aufeinander folgende Leerzeichen in einer Zeichenfolge durch ein Tabstoppzeichen ersetzt. Um es auszuführen, müssen Sie zwei Befehlszeilenargumente angeben. Das erste ist der Name einer vorhandenen Textdatei, in die der Standardeingabestream umgeleitet wird. Das zweite ist der Name einer Datei, in die der Standardausgabestream umgeleitet wird. Diese Datei muss nicht vorhanden sein. Wenn das der Fall ist, wird der Inhalt überschrieben.  
  
 [!code-cpp[System.Console-INSERTTABS#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CPP/inserttabs.cpp#1)]
 [!code-csharp[System.Console-INSERTTABS#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CS/inserttabs.cs#1)]
 [!code-vb[System.Console-INSERTTABS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-INSERTTABS/VB/inserttabs.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="newIn" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.Security.SecurityException">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">zum Aufrufen von nicht verwaltetem Code. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="T:System.IO.TextReader" />
        <altmember cref="P:System.Console.In" />
      </Docs>
    </Member>
    <Member MemberName="SetOut">
      <MemberSignature Language="C#" Value="public static void SetOut (System.IO.TextWriter newOut);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetOut(class System.IO.TextWriter newOut) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetOut(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetOut (newOut As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetOut(System::IO::TextWriter ^ newOut);" />
      <MemberSignature Language="F#" Value="static member SetOut : System.IO.TextWriter -&gt; unit" Usage="System.Console.SetOut newOut" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newOut" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="newOut">Ein Datenstrom, der die neue Standardausgabe darstellt.</param>
        <summary>Legt die <see cref="P:System.Console.Out" />-Eigenschaft auf den angegebenen <see cref="T:System.IO.TextWriter" /> fest.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der Standardeinstellung die <xref:System.Console.Out%2A> -Eigenschaftensatz auf den Standardausgabestream.  
  
 Ein <xref:System.IO.StreamWriter> , kapselt einen <xref:System.IO.FileStream> kann zum Senden der Ausgabe in eine Datei verwendet werden. Zum Beispiel:  
  
 [!code-cpp[System.Console.SetOut#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.console.setout/cpp/source.cpp#1)]
 [!code-csharp[System.Console.SetOut#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.setout/cs/source.cs#1)]
 [!code-vb[System.Console.SetOut#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.setout/vb/source.vb#1)]  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der <xref:System.Console.SetOut%2A>-Methode veranschaulicht. Hierdurch werden vier aufeinander folgende Leerzeichen in einer Zeichenfolge durch ein Tabstoppzeichen ersetzt. Um es auszuführen, müssen Sie zwei Befehlszeilenargumente angeben. Das erste ist der Name einer vorhandenen Textdatei, in die der Standardeingabestream umgeleitet wird. Das zweite ist der Name einer Datei, in die der Standardausgabestream umgeleitet wird. Diese Datei muss nicht vorhanden sein. Wenn das der Fall ist, wird der Inhalt überschrieben.  
  
 [!code-cpp[System.Console-INSERTTABS#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CPP/inserttabs.cpp#1)]
 [!code-csharp[System.Console-INSERTTABS#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CS/inserttabs.cs#1)]
 [!code-vb[System.Console-INSERTTABS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-INSERTTABS/VB/inserttabs.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="newOut" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.Security.SecurityException">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">zum Aufrufen von nicht verwaltetem Code. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="P:System.Console.Out" />
      </Docs>
    </Member>
    <Member MemberName="SetWindowPosition">
      <MemberSignature Language="C#" Value="public static void SetWindowPosition (int left, int top);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetWindowPosition(int32 left, int32 top) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetWindowPosition(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetWindowPosition (left As Integer, top As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetWindowPosition(int left, int top);" />
      <MemberSignature Language="F#" Value="static member SetWindowPosition : int * int -&gt; unit" Usage="System.Console.SetWindowPosition (left, top)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int32" />
        <Parameter Name="top" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="left">Die Spaltenposition der linken oberen Ecke des Konsolenfensters.</param>
        <param name="top">Die Zeilenposition der linken oberen Ecke des Konsolenfensters.</param>
        <summary>Legt die Position des Konsolenfensters relativ zum Bildschirmpuffer fest.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das Betriebssystemfenster zeigt das Konsolenfenster, und das Konsolenfenster zeigt einen Teil des Bildschirmpuffers. Die <xref:System.Console.SetWindowPosition%2A> Methode wirkt sich auf die Position des Konsolenfensters relativ zum Bildschirmpuffer, sondern wirkt sich nicht auf die Position des Fensters "Betriebssystem" relativ zum Desktop.  
  
 Der Windows-Konsole und das Betriebssystem in der Regel wirken jeweils anderen sich nicht. Jedoch wenn Bildschirmpuffer in der aktuellen Grenzen des Konsolenfensters angezeigt werden kann, fügt das Betriebssystem automatisch Bildlaufleisten für das Betriebssystemfenster. In diesem Fall verschieben Sie die Bildlaufleisten des Betriebssystems wirkt sich auf die Position des Konsolenfensters und verschieben Sie das Konsolenfenster mit dem <xref:System.Console.SetWindowPosition%2A> Methode wirkt sich auf die Position des Bildlaufleisten des Betriebssystems.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt die <xref:System.Console.WindowLeft%2A>, <xref:System.Console.WindowTop%2A>, <xref:System.Console.WindowWidth%2A>, <xref:System.Console.WindowHeight%2A>, <xref:System.Console.BufferWidth%2A>, <xref:System.Console.BufferHeight%2A>, und <xref:System.Console.CursorVisible%2A> Eigenschaften und die <xref:System.Console.SetWindowPosition%2A>, <xref:System.Console.SetBufferSize%2A>, und <xref:System.Console.ReadKey%2A> -Methoden. Im Beispiel werden ein Grid-Muster in den Bildschirmpuffer, basierend auf die Bildschirmpufferbreite gezeichnet. Klicken Sie dann verschiebt im Beispiel wird das Konsolenfenster als Reaktion auf die von der nach-oben, Pfeil nach unten, links oder nach-rechts-Konsolentaste gedrückt wird. Das Grid-Muster können Sie die Bewegung des Konsolenfensters relativ zum Bildschirmpuffer zu sehen.  
  
 [!code-cpp[console.windowLT#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.windowLT/CPP/wlt.cpp#1)]
 [!code-csharp[console.windowLT#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.windowLT/CS/wlt.cs#1)]
 [!code-vb[console.windowLT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.windowLT/VB/wlt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="left" /> oder <paramref name="top" /> ist kleiner als 0.  
  
- oder -  
 <paramref name="left" /> + <see cref="P:System.Console.WindowWidth" /> ist größer als <see cref="P:System.Console.BufferWidth" />.  
  
- oder -  
 <paramref name="top" /> + <see cref="P:System.Console.WindowHeight" /> ist größer als <see cref="P:System.Console.BufferHeight" />.</exception>
        <exception cref="T:System.Security.SecurityException">Der Benutzer verfügt nicht über die erforderliche Berechtigung, um diese Aktion auszuführen.</exception>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SetWindowSize">
      <MemberSignature Language="C#" Value="public static void SetWindowSize (int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetWindowSize(int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetWindowSize(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetWindowSize (width As Integer, height As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetWindowSize(int width, int height);" />
      <MemberSignature Language="F#" Value="static member SetWindowSize : int * int -&gt; unit" Usage="System.Console.SetWindowSize (width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="width">Die Breite des Konsolenfensters in Spalten.</param>
        <param name="height">Die Höhe des Konsolenfensters in Zeilen.</param>
        <summary>Legt die Höhe und die Breite des Konsolenfensters auf die angegebenen Werte fest.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Dieses Beispiel zeigt die <xref:System.Console.SetWindowSize%2A> -Methode, und die <xref:System.Console.WindowWidth%2A> und <xref:System.Console.WindowHeight%2A> Eigenschaften. Sie müssen das Beispiel, um die vollständige Auswirkung die Änderung der Größe des Konsolenfenster finden Sie unter ausführen.  
  
 Im Beispiel gibt die Abmessungen eines Konsolenfensters 85 Spalten und 43 Zeilen festgelegt, und wartet dann eine Taste gedrückt wird. Wenn eine Taste gedrückt wird, die Abmessungen des Konsolenfensters halbiert werden die neuen Dimensionen werden gemeldet und das Beispiel wartet auf eine andere Drücken der Taste. Schließlich, wenn eine Taste gedrückt wird, das Konsolenfenster wird die ursprünglichen Proportionen wiederhergestellt und im Beispiel wird beendet.  
  
 [!code-cpp[console.setwindowsize#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.setwindowsize/CPP/sws.cpp#1)]
 [!code-csharp[console.setwindowsize#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.setwindowsize/CS/sws.cs#1)]
 [!code-vb[console.setwindowsize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.setwindowsize/VB/sws.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="width" /> oder <paramref name="height" /> ist kleiner oder gleich 0 (null).  
  
- oder -  
 <paramref name="width" /> plus <see cref="P:System.Console.WindowLeft" /> oder <paramref name="height" /> plus <see cref="P:System.Console.WindowTop" /> ist größer oder gleich <see cref="F:System.Int16.MaxValue" />.  
  
- oder -  
 <paramref name="width" /> oder <paramref name="height" /> ist größer als die größtmögliche Fensterbreite oder -höhe für die aktuelle Bildschirmauflösung und Konsolenschriftart.</exception>
        <exception cref="T:System.Security.SecurityException">Der Benutzer verfügt nicht über die erforderliche Berechtigung, um diese Aktion auszuführen.</exception>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public static string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string Title" />
      <MemberSignature Language="DocId" Value="P:System.Console.Title" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Title As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ Title { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Title : string with get, set" Usage="System.Console.Title" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den auf der Konsolentitelleiste anzuzeigenden Titel ab oder legt diesen fest.</summary>
        <value>Die Zeichenfolge, die auf der Titelleiste der Konsole angezeigt werden soll. Die maximale Länge der Titelzeichenfolge beträgt 24500 Zeichen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Dieses Beispiel zeigt die <xref:System.Console.Title%2A> Eigenschaft. Das Beispiel zeigt den aktuellen Titel des Fensters Betriebssystem, wartet auf einen Tastendruck, und es wird ein neuer Titel angezeigt.  
  
 [!code-cpp[console.title#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.title/CPP/mytitle.cpp#1)]
 [!code-csharp[console.title#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.title/CS/mytitle.cs#1)]
 [!code-vb[console.title#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.title/VB/mytitle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">In einem Get-Vorgang umfasst der abgerufene Titel mehr als 24500 Zeichen.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">In einem Set-Vorgang umfasst der angegebene Titel mehr als 24500 Zeichen.</exception>
        <exception cref="T:System.ArgumentNullException">In einem Set-Vorgang ist der angegebene Titel <see langword="null" />.</exception>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="TreatControlCAsInput">
      <MemberSignature Language="C#" Value="public static bool TreatControlCAsInput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool TreatControlCAsInput" />
      <MemberSignature Language="DocId" Value="P:System.Console.TreatControlCAsInput" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property TreatControlCAsInput As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool TreatControlCAsInput { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.TreatControlCAsInput : bool with get, set" Usage="System.Console.TreatControlCAsInput" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab oder legt diesen fest, der angibt, ob die Kombination der <see cref="F:System.ConsoleModifiers.Control" />-Modifizierertaste und der <see cref="F:System.ConsoleKey.C" />-Konsolentaste (STRG+C) als normale Eingabe oder als vom Betriebssystem zu behandelnde Unterbrechung behandelt wird.</summary>
        <value>
          <see langword="true" />, wenn STRG+C als normale Eingabe behandelt wird, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn der Wert des der <xref:System.Console.TreatControlCAsInput%2A> Eigenschaft `false` und STRG + C drücken, wird die gedrückten Tasten werden nicht im Puffer gespeichert und das Betriebssystem beendet gerade ausgeführten Prozesses. Dies ist der Standardwert.  
  
> [!CAUTION]
>  Verwenden Sie diese Eigenschaft mit Bedacht, da es durch Festlegen auf `true` solche einen entscheidenden Einfluss hat. Die meisten Benutzer erwarten, dass STRG + C, um eine Konsolenanwendung zu beenden. Wenn Sie die Auswirkungen von STRG + C deaktivieren, müssen der Benutzer STRG + UNTBR zu verwenden, um die Anwendung zu beenden, die wodurch die Tastenkombination weniger vertraut ist.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt die <xref:System.Console.TreatControlCAsInput%2A> Eigenschaft.  
  
 [!code-cpp[console.readkey1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.readkey1/CPP/rk.cpp#1)]
 [!code-csharp[console.readkey1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.readkey1/CS/rk.cs#1)]
 [!code-vb[console.readkey1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.readkey1/VB/rk.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Der Eingabemodus des Konsoleneingabepuffers kann weder abgerufen noch festgelegt werden.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="F:System.ConsoleModifiers.Control" />
        <altmember cref="F:System.ConsoleKey.C" />
        <altmember cref="E:System.Console.CancelKeyPress" />
      </Docs>
    </Member>
    <Member MemberName="WindowHeight">
      <MemberSignature Language="C#" Value="public static int WindowHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 WindowHeight" />
      <MemberSignature Language="DocId" Value="P:System.Console.WindowHeight" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property WindowHeight As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int WindowHeight { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.WindowHeight : int with get, set" Usage="System.Console.WindowHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Höhe des Konsolenfensterbereichs ab oder legt diese fest.</summary>
        <value>Die Höhe des Konsolenfensters in Zeilen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Es wird versucht, den Wert festlegen die <xref:System.Console.WindowHeight%2A> Eigenschaft, wenn die Ausgabe umgeleitet wird, löst aus, entweder eine <xref:System.ArgumentOutOfRangeException> oder ein <xref:System.IO.IOException> Ausnahme. Um eine Ausnahme zu verhindern, können Sie festlegen, der Wert dieser Eigenschaft nur, wenn die <xref:System.Console.IsOutputRedirected%2A> -Eigenschaft gibt `false`.  
  
   
  
## Examples  
 Dieses Beispiel zeigt die <xref:System.Console.SetWindowSize%2A> -Methode, und die <xref:System.Console.WindowWidth%2A> und <xref:System.Console.WindowHeight%2A> Eigenschaften. Sie müssen das Beispiel, um die vollständige Auswirkung die Änderung der Größe des Konsolenfenster finden Sie unter ausführen.  
  
 Im Beispiel gibt die Abmessungen eines Konsolenfensters 85 Spalten und 43 Zeilen festgelegt, und wartet dann Drücken einer Taste. Wenn eine Taste gedrückt wird, die Abmessungen des Konsolenfensters halbiert werden die neuen Dimensionen werden gemeldet und das Beispiel wartet auf eine andere Drücken der Taste. Schließlich, wenn eine beliebige Taste gedrückt wird das Konsolenfenster wird wiederhergestellt, die ursprünglichen Proportionen und im Beispiel wird beendet.  
  
 [!code-cpp[console.setwindowsize#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.setwindowsize/CPP/sws.cpp#1)]
 [!code-csharp[console.setwindowsize#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.setwindowsize/CS/sws.cs#1)]
 [!code-vb[console.setwindowsize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.setwindowsize/VB/sws.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der Wert der <see cref="P:System.Console.WindowWidth" />-Eigenschaft oder der Wert der <see cref="P:System.Console.WindowHeight" />-Eigenschaft muss kleiner als oder gleich 0 sein.  
  
- oder -  
Der Wert der <see cref="P:System.Console.WindowHeight" />-Eigenschaft plus dem Wert der <see cref="P:System.Console.WindowTop" />-Eigenschaft muss größer als oder gleich <see cref="F:System.Int16.MaxValue" /> sein.  
  
- oder -  
Der Wert der <see cref="P:System.Console.WindowWidth" />-Eigenschaft oder der Wert der <see cref="P:System.Console.WindowHeight" />-Eigenschaft ist größer als die größtmögliche Fensterbreite oder -höhe für die aktuelle Bildschirmauflösung und Konsolenschriftart.</exception>
        <exception cref="T:System.IO.IOException">Fehler beim Lesen oder Schreiben von Informationen.</exception>
      </Docs>
    </Member>
    <Member MemberName="WindowLeft">
      <MemberSignature Language="C#" Value="public static int WindowLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 WindowLeft" />
      <MemberSignature Language="DocId" Value="P:System.Console.WindowLeft" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property WindowLeft As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int WindowLeft { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.WindowLeft : int with get, set" Usage="System.Console.WindowLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die am weitesten links stehende Position des Konsolenfensterbereichs im Verhältnis zum Bildschirmpuffer ab oder legt diese fest.</summary>
        <value>Die am weitesten links stehende Konsolenfensterposition in Spalten.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Konsole stellt ein rechteckiges Fenster in einer größeren rechteckigen Pufferbereich dar. Sowohl das Fenster und der Puffer werden durch die Anzahl von Zeilen und horizontal nach ihrer Anzahl von Spalten vertikal gemessen. Die Abmessungen des Pufferbereichs definieren, indem die <xref:System.Console.BufferHeight%2A> und <xref:System.Console.BufferWidth%2A> Eigenschaften. Die Abmessungen des Bereichs Konsole definieren, indem die <xref:System.Console.WindowHeight%2A> und <xref:System.Console.WindowWidth%2A> Eigenschaften. Die <xref:System.Console.WindowLeft%2A> Eigenschaft bestimmt, welche Spalte des Pufferbereichs in der ersten Spalte des Konsolenfensters angezeigt wird. Der Wert des der <xref:System.Console.WindowLeft%2A> Eigenschaft reichen von 0 bis <xref:System.Console.BufferWidth%2A>  -  <xref:System.Console.WindowWidth%2A>. Beim Festlegen auf einen Wert außerhalb, reichen Sie löst eine <xref:System.ArgumentOutOfRangeException>.  
  
 Wenn ein Konsolenfenster zuerst geöffnet wird, den Standardwert der <xref:System.Console.WindowLeft%2A> -Eigenschaft ist 0 (null), der angibt, dass die erste Spalte, die von der Konsole angezeigte in die erste Spalte (die Spalte an Position 0 (null)) im Bereich "Puffer" entspricht. Die Standardbreite des sowohl das Konsolenfenster und Pufferbereich ist 80 Spalten. Dies bedeutet, dass die <xref:System.Console.WindowLeft%2A> Eigenschaft kann nur auf, wenn das Konsolenfenster schmaler gemacht oder Pufferbereichs breiter geändert werden.  
  
 Beachten Sie, dass die Breite des Pufferbereichs die Breite des Konsolenfensters, den Wert der überschreitet die <xref:System.Console.WindowLeft%2A> Eigenschaft wird automatisch angepasst, wenn der Benutzer die horizontale Bildlaufleiste verwendet, um die Beziehung des Fensters in den Pufferbereich zu definieren.  
  
 Es wird versucht, den Wert festlegen die <xref:System.Console.WindowLeft%2A> Eigenschaft, wenn die Ausgabe umgeleitet, löst eine <xref:System.IO.IOException> Ausnahme. Um die Ausnahme zu verhindern, können Sie festlegen, der Wert dieser Eigenschaft nur, wenn die <xref:System.Console.IsOutputRedirected%2A> -Eigenschaft gibt `false`.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein 80-Spalte Konsolenfenster geöffnet und definiert einen Pufferbereich, der 120 Spalten breit ist. Es werden Informationen zum Fenster und Puffergröße angezeigt, und wartet dann darauf, dass sich der Benutzer entweder nach-links oder rechts-Taste drücken. Im ersten Fall es verringert den Wert des der <xref:System.Console.WindowLeft%2A> Eigenschaft um eins, wenn das Ergebnis ein zulässiger Wert ist. Im letzteren Fall kann es erhöht den Wert des der <xref:System.Console.WindowLeft%2A> -Eigenschaft um eins, wenn das Ergebnis der zulässig ist. Beachten Sie, die im Beispiel nicht behandelt eine <xref:System.ArgumentOutOfRangeException>, da wird, dass überprüft der Wert zugewiesen werden die <xref:System.Console.WindowLeft%2A> -Eigenschaft ist nicht negativ und nicht dazu, dass die Summe der der <xref:System.Console.WindowLeft%2A> und <xref:System.Console.WindowWidth%2A> Eigenschaften überschreiten die <xref:System.Console.BufferWidth%2A> -Eigenschaftswert.  
  
 [!code-cpp[System.Console.WindowLeft#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.console.windowleft/cpp/windowleft1.cpp#1)]
 [!code-csharp[System.Console.WindowLeft#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.windowleft/cs/windowleft1.cs#1)]
 [!code-vb[System.Console.WindowLeft#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.windowleft/vb/windowleft1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">In einem SET-Vorgang ist der zuzuweisende Wert kleiner als 0 (null).  
  
- oder -  
Als Ergebnis der Zuweisung würde <see cref="P:System.Console.WindowLeft" /> plus <see cref="P:System.Console.WindowWidth" /> den Wert für <see cref="P:System.Console.BufferWidth" /> überschreiten.</exception>
        <exception cref="T:System.IO.IOException">Fehler beim Lesen oder Schreiben von Informationen.</exception>
      </Docs>
    </Member>
    <Member MemberName="WindowTop">
      <MemberSignature Language="C#" Value="public static int WindowTop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 WindowTop" />
      <MemberSignature Language="DocId" Value="P:System.Console.WindowTop" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property WindowTop As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int WindowTop { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.WindowTop : int with get, set" Usage="System.Console.WindowTop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die oberste Position des Konsolenfensterbereichs im Verhältnis zum Bildschirmpuffer ab oder legt diese fest.</summary>
        <value>Die oberste Konsolenfensterposition in Zeilen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Konsole stellt ein rechteckiges Fenster in einer größeren rechteckigen Pufferbereich dar. Sowohl das Fenster und der Puffer werden durch die Anzahl von Zeilen und horizontal nach ihrer Anzahl von Spalten vertikal gemessen. Die Abmessungen des Pufferbereichs definieren, indem die <xref:System.Console.BufferHeight%2A> und <xref:System.Console.BufferWidth%2A> Eigenschaften. Die Abmessungen des Bereichs Konsole definieren, indem die <xref:System.Console.WindowHeight%2A> und <xref:System.Console.WindowWidth%2A> Eigenschaften. Die <xref:System.Console.WindowTop%2A> Eigenschaft bestimmt, welche Zeile des Pufferbereichs in der ersten Spalte des Konsolenfensters angezeigt wird. Der Wert des der <xref:System.Console.WindowTop%2A> Eigenschaft reichen von 0 bis <xref:System.Console.BufferHeight%2A>  -  <xref:System.Console.WindowHeight%2A>. Beim Festlegen auf einen Wert außerhalb, reichen Sie löst eine <xref:System.ArgumentOutOfRangeException>.  
  
 Es wird versucht, den Wert festlegen die <xref:System.Console.WindowTop%2A> Eigenschaft, wenn die Ausgabe umgeleitet, löst eine <xref:System.IO.IOException> Ausnahme. Um die Ausnahme zu verhindern, können Sie festlegen, der Wert dieser Eigenschaft nur, wenn die <xref:System.Console.IsOutputRedirected%2A> -Eigenschaft gibt `false`.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt die <xref:System.Console.WindowLeft%2A>, <xref:System.Console.WindowTop%2A>, <xref:System.Console.WindowWidth%2A>, <xref:System.Console.WindowHeight%2A>, <xref:System.Console.BufferWidth%2A>, <xref:System.Console.BufferHeight%2A>, und <xref:System.Console.CursorVisible%2A> Eigenschaften und die <xref:System.Console.SetWindowPosition%2A>, <xref:System.Console.SetBufferSize%2A>, und <xref:System.Console.ReadKey%2A> -Methoden. Im Beispiel werden ein Grid-Muster in den Bildschirmpuffer, basierend auf die Bildschirmpufferbreite gezeichnet. Klicken Sie dann verschiebt im Beispiel wird das Konsolenfenster als Reaktion auf die von der nach-oben, Pfeil nach unten, links oder nach-rechts-Konsolentaste gedrückt wird. Das Grid-Muster können Sie die Bewegung des Konsolenfensters relativ zum Bildschirmpuffer zu sehen.  
  
 [!code-cpp[console.windowLT#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.windowLT/CPP/wlt.cpp#1)]
 [!code-csharp[console.windowLT#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.windowLT/CS/wlt.cs#1)]
 [!code-vb[console.windowLT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.windowLT/VB/wlt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">In einem SET-Vorgang ist der zuzuweisende Wert kleiner als 0 (null).  
  
- oder -  
Als Ergebnis der Zuweisung würde <see cref="P:System.Console.WindowTop" /> plus <see cref="P:System.Console.WindowHeight" /> den Wert für <see cref="P:System.Console.BufferHeight" /> überschreiten.</exception>
        <exception cref="T:System.IO.IOException">Fehler beim Lesen oder Schreiben von Informationen.</exception>
      </Docs>
    </Member>
    <Member MemberName="WindowWidth">
      <MemberSignature Language="C#" Value="public static int WindowWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 WindowWidth" />
      <MemberSignature Language="DocId" Value="P:System.Console.WindowWidth" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property WindowWidth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int WindowWidth { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.WindowWidth : int with get, set" Usage="System.Console.WindowWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Breite des Konsolenfensters ab oder legt diese fest.</summary>
        <value>Die Breite des Konsolenfensters in Spalten.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Es wird versucht, den Wert festlegen die <xref:System.Console.WindowWidth%2A> Eigenschaft, wenn die Ausgabe umgeleitet wird, löst aus, entweder eine <xref:System.ArgumentOutOfRangeException> oder ein <xref:System.IO.IOException> Ausnahme. Um eine Ausnahme zu verhindern, können Sie festlegen, der Wert dieser Eigenschaft nur, wenn die <xref:System.Console.IsOutputRedirected%2A> -Eigenschaft gibt `false`.  
  
   
  
## Examples  
 Dieses Beispiel zeigt die <xref:System.Console.SetWindowSize%2A> -Methode, und die <xref:System.Console.WindowWidth%2A> und <xref:System.Console.WindowHeight%2A> Eigenschaften. Sie müssen das Beispiel, um die vollständige Auswirkung die Änderung der Größe des Konsolenfenster finden Sie unter ausführen.  
  
 Im Beispiel gibt die Abmessungen eines Konsolenfensters 85 Spalten und 43 Zeilen festgelegt, und wartet dann Drücken einer Taste. Wenn eine Taste gedrückt wird, die Abmessungen des Konsolenfensters halbiert werden die neuen Dimensionen werden gemeldet und das Beispiel wartet auf eine andere Drücken der Taste. Schließlich, wenn eine beliebige Taste gedrückt wird das Konsolenfenster wird wiederhergestellt, die ursprünglichen Proportionen und im Beispiel wird beendet.  
  
 [!code-cpp[console.setwindowsize#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.setwindowsize/CPP/sws.cpp#1)]
 [!code-csharp[console.setwindowsize#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.setwindowsize/CS/sws.cs#1)]
 [!code-vb[console.setwindowsize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.setwindowsize/VB/sws.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der Wert der <see cref="P:System.Console.WindowWidth" />-Eigenschaft oder der Wert der <see cref="P:System.Console.WindowHeight" />-Eigenschaft muss kleiner als oder gleich 0 sein.  
  
- oder -  
Der Wert der <see cref="P:System.Console.WindowHeight" />-Eigenschaft plus dem Wert der <see cref="P:System.Console.WindowTop" />-Eigenschaft muss größer als oder gleich <see cref="F:System.Int16.MaxValue" /> sein.  
  
- oder -  
Der Wert der <see cref="P:System.Console.WindowWidth" />-Eigenschaft oder der Wert der <see cref="P:System.Console.WindowHeight" />-Eigenschaft ist größer als die größtmögliche Fensterbreite oder -höhe für die aktuelle Bildschirmauflösung und Konsolenschriftart.</exception>
        <exception cref="T:System.IO.IOException">Fehler beim Lesen oder Schreiben von Informationen.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Write">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Schreibt die Textdarstellung des angegebenen booleschen Werts oder der angegebenen booleschen Werte in den Standardausgabestream.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(bool value);" />
      <MemberSignature Language="F#" Value="static member Write : bool -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">Der zu schreibende Wert.</param>
        <summary>Schreibt die Textdarstellung des angegebenen booleschen Werts in den Standardausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die binäre Darstellung des `value` wird durch den Aufruf erzeugt <xref:System.Boolean.ToString%2A?displayProperty=nameWithType>, die ausgibt entweder <xref:System.Boolean.TrueString?displayProperty=nameWithType> oder <xref:System.Boolean.FalseString?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der `Write`-Methode veranschaulicht.  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(char value);" />
      <MemberSignature Language="F#" Value="static member Write : char -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">Der zu schreibende Wert.</param>
        <summary>Schreibt das angegebene Unicode-Zeichen in den Standardausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der `Write`-Methode veranschaulicht.  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (buffer As Char())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(cli::array &lt;char&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="static member Write : char[] -&gt; unit" Usage="System.Console.Write buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer">Ein Array von Unicode-Zeichen.</param>
        <summary>Schreibt das angegebene Array von Unicode-Zeichen in den Standardausgabestream.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::Decimal value);" />
      <MemberSignature Language="F#" Value="static member Write : decimal -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">Der zu schreibende Wert.</param>
        <summary>Schreibt die Textdarstellung des angegebenen <see cref="T:System.Decimal" />-Werts in den Standardausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die binäre Darstellung des `value` wird durch den Aufruf erzeugt <xref:System.Decimal.ToString%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der `Write`-Methode veranschaulicht.  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(double value);" />
      <MemberSignature Language="F#" Value="static member Write : double -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Der zu schreibende Wert.</param>
        <summary>Schreibt die Textdarstellung der angegebenen Gleitkommazahl mit doppelter Genauigkeit in den Standardausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die binäre Darstellung des `value` erzeugt wird, durch den Aufruf der <xref:System.Double.ToString%2A?displayProperty=nameWithType> Methode.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der `Write`-Methode veranschaulicht.  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(int value);" />
      <MemberSignature Language="F#" Value="static member Write : int -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Der zu schreibende Wert.</param>
        <summary>Schreibt die Textdarstellung der angegebenen 32-Bit-Ganzzahl mit Vorzeichen in den Standardausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die binäre Darstellung des `value` erzeugt wird, durch den Aufruf der <xref:System.Int32.ToString%2A?displayProperty=nameWithType> Methode.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der `Write`-Methode veranschaulicht.  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(long value);" />
      <MemberSignature Language="F#" Value="static member Write : int64 -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">Der zu schreibende Wert.</param>
        <summary>Schreibt die Textdarstellung der angegebenen 64-Bit-Ganzzahl mit Vorzeichen in den Standardausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die binäre Darstellung des `value` erzeugt wird, durch den Aufruf der <xref:System.Int64.ToString%2A?displayProperty=nameWithType> Methode.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der `Write`-Methode veranschaulicht.  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member Write : obj -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Der zu schreibende Wert oder <see langword="null" />.</param>
        <summary>Schreibt die Textdarstellung des angegebenen Objekts in den Standardausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `value` ist `null`, wird nichts geschrieben und wird keine Ausnahme ausgelöst. Andernfalls die `ToString` -Methode der `value` wird aufgerufen, um die Zeichenfolgendarstellung zu erstellen und die resultierende Zeichenfolge wird in den Standardausgabestream geschrieben.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der `Write`-Methode veranschaulicht.  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(float value);" />
      <MemberSignature Language="F#" Value="static member Write : single -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">Der zu schreibende Wert.</param>
        <summary>Schreibt die Textdarstellung der angegebenen Gleitkommazahl mit einfacher Genauigkeit in den Standardausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die binäre Darstellung des `value` erzeugt wird, durch den Aufruf der <xref:System.Single.ToString%2A?displayProperty=nameWithType> Methode.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der `Write`-Methode veranschaulicht.  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member Write : string -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Der zu schreibende Wert.</param>
        <summary>Schreibt die angegebene Zeichenfolge in den Standardausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Falls der Wert `null`, wird nichts in den Standardausgabestream geschrieben.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der `Write`-Methode veranschaulicht.  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member Write : uint32 -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">Der zu schreibende Wert.</param>
        <summary>Schreibt die Textdarstellung der angegebenen 32-Bit-Ganzzahl ohne Vorzeichen in den Standardausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die binäre Darstellung des `value` erzeugt wird, durch den Aufruf der <xref:System.UInt32.ToString%2A?displayProperty=nameWithType> Methode.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der `Write`-Methode veranschaulicht.  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member Write : uint64 -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">Der zu schreibende Wert.</param>
        <summary>Schreibt die Textdarstellung der angegebenen 64-Bit-Ganzzahl ohne Vorzeichen in den Standardausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die binäre Darstellung des `value` erzeugt wird, durch den Aufruf der <xref:System.UInt64.ToString%2A?displayProperty=nameWithType> Methode.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der `Write`-Methode veranschaulicht.  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (format As String, arg0 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ format, System::Object ^ arg0);" />
      <MemberSignature Language="F#" Value="static member Write : string * obj -&gt; unit" Usage="System.Console.Write (format, arg0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Eine kombinierte Formatzeichenfolge.</param>
        <param name="arg0">Ein mit <c>format</c> zu schreibendes Objekt.</param>
        <summary>Schreibt die Textdarstellung des angegebenen Objekts unter Verwendung der angegebenen Formatinformationen in den Standardausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode verwendet die [Funktion für kombinierte Formatierung](~/docs/standard/base-types/composite-formatting.md) von .NET Framework, um den Wert eines Objekts in die Textdarstellung zu konvertieren und diese Darstellung in einer Zeichenfolge einzubetten. Die resultierende Zeichenfolge wird in den Ausgabestream geschrieben werden.  
  
 Die `format` -Parameter besteht aus 0 (null) oder weitere Ausführungen von Text und optional ein mit NULL oder mehr indizierten Platzhaltern enthalten, den so genannten Formatelementen, die einem Objekt in der Liste der Parameter dieser Methode entsprechen. Die Formatierung zu ersetzt jedes Formatelement durch die Textdarstellung des Werts des entsprechenden Objekts.  
  
 Die Syntax eines Formatelements ist `{` *Index*[`,`*Ausrichtung*] [`:`*FormatString*]`}`, gibt an, die eine Erforderlicher Index, der optionale Länge und Ausrichtung der formatierten Text und eine optionale Zeichenfolge von Formatbezeichnerzeichen, die steuern, wie der Wert des entsprechenden Objekts formatiert wird.  
  
 .NET Framework bietet umfangreiche formatierungsunterstützung, die in den folgenden Themen zur Formatierung ausführlicher beschrieben wird.  
  
-   Weitere Informationen zu unterstützten Methoden wie z. B. Funktion für kombinierte Formatierung <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, und einige Überladungen der <xref:System.Console.WriteLine%2A>, finden Sie unter [kombinierte Formatierung](~/docs/standard/base-types/composite-formatting.md).  
  
-   Weitere Informationen über numerische Formatbezeichner finden Sie unter [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) und [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Weitere Informationen über Datum und Uhrzeit, die Formatbezeichner finden Sie unter [Standardformatzeichenfolgen für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md) und [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
-   Weitere Informationen zu Formatbezeichnern finden Sie unter [Enumerationsformatzeichenfolgen](~/docs/standard/base-types/enumeration-format-strings.md).  
  
-   Weitere Informationen zur Formatierung finden Sie unter [Formatierung von Typen](~/docs/standard/base-types/formatting-types.md).  
  
   
  
## Examples  
 Im folgenden Beispiel werden die Standardformatbezeichner für Zahlen, Datumsangaben und Enumerationen mithilfe der `WriteLine`-Methode veranschaulicht.  
  
 [!code-cpp[console.writelineFmt1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.writelineFmt1/cpp/wl.cpp#1)] 
 [!code-csharp[console.writelineFmt1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.writelineFmt1/cs/wl.cs#1)] 
 [!code-vb[console.writelineFmt1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.writelineFmt1/vb/wl.vb#1)]  
  
 Im folgenden Beispiel wird die Verwendung der <xref:System.Console.Write%2A>-Methode veranschaulicht.  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">Die Formatangabe in <paramref name="format" /> ist ungültig.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Formatieren von Typen in .NET</related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md">Kombinierte Formatierung</related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string format, params object[] arg);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string format, object[] arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (format As String, ParamArray arg As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ arg);" />
      <MemberSignature Language="F#" Value="static member Write : string * obj[] -&gt; unit" Usage="System.Console.Write (format, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">Eine kombinierte Formatzeichenfolge.</param>
        <param name="arg">Ein mit <c>format</c> zu schreibendes Array von Objekten.</param>
        <summary>Schreibt die Textdarstellung des angegebenen Arrays von Objekten unter Verwendung der angegebenen Formatinformationen in den Standardausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode verwendet die [Funktion für kombinierte Formatierung](~/docs/standard/base-types/composite-formatting.md) von .NET Framework, um den Wert eines Objekts in die Textdarstellung zu konvertieren und diese Darstellung in einer Zeichenfolge einzubetten. Die resultierende Zeichenfolge wird in den Ausgabestream geschrieben werden.  
  
 Die `format` -Parameter besteht aus 0 (null) oder weitere Ausführungen von Text und optional ein mit NULL oder mehr indizierten Platzhaltern enthalten, den so genannten Formatelementen, die einem Objekt in der Liste der Parameter dieser Methode entsprechen. Die Formatierung zu ersetzt jedes Formatelement durch die Textdarstellung des Werts des entsprechenden Objekts.  
  
 Die Syntax eines Formatelements ist `{` *Index*[`,`*Ausrichtung*] [`:`*FormatString*]`}`, gibt an, die eine Erforderlicher Index, der optionale Länge und Ausrichtung der formatierten Text und eine optionale Zeichenfolge von Formatbezeichnerzeichen, die steuern, wie der Wert des entsprechenden Objekts formatiert wird.  
  
 .NET Framework bietet umfangreiche formatierungsunterstützung, die in den folgenden Themen zur Formatierung ausführlicher beschrieben wird.  
  
-   Weitere Informationen zu unterstützten Methoden wie z. B. Funktion für kombinierte Formatierung <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, und einige Überladungen der <xref:System.Console.WriteLine%2A>, finden Sie unter [kombinierte Formatierung](~/docs/standard/base-types/composite-formatting.md).  
  
-   Weitere Informationen über numerische Formatbezeichner finden Sie unter [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) und [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Weitere Informationen über Datum und Uhrzeit, die Formatbezeichner finden Sie unter [Standardformatzeichenfolgen für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md) und [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
-   Weitere Informationen zu Formatbezeichnern finden Sie unter [Enumerationsformatzeichenfolgen](~/docs/standard/base-types/enumeration-format-strings.md).  
  
-   Weitere Informationen zur Formatierung finden Sie unter [Formatierung von Typen](~/docs/standard/base-types/formatting-types.md).  
  
 Die `arg` -Parameter ist ein Parameterarray. Argumente können entweder als ein Array oder als Liste der fünf oder mehr Elemente an die Methode übergeben werden. Die Beispiele veranschaulichen beide Formen des Methodenaufrufs.  
  
   
  
## Examples  
 Das folgende Beispiel definiert eine `Person` Klasse mit einer Reihe von Eigenschaften, die Informationen zu einer Person bereitstellen. Die `GetDescription` -Methode gibt ein Array, das alle Eigenschaftswerte mit einer Ausnahme enthält. Anschließend wird das von zurückgegebene Array die `GetDescription` Methode, um die Werte des Person-Objekts anzuzeigen.  
  
 [!code-csharp[System.Console.Write#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.write/cs/WriteParams1.cs#1)]
 [!code-vb[System.Console.Write#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.write/vb/WriteParams1.vb#1)]  
  
 Beachten Sie, die im Beispiel wird die <xref:System.Console.Write%28System.String%2CSystem.Object%5B%5D%29> Methode anstelle der <xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29> Methode da er versucht, den Wert der an die `Person.Remarks` Eigenschaft in der gleichen Zeile. Zu diesem Zweck den Wert des untersucht die <xref:System.Console.CursorLeft%2A> und <xref:System.Console.WindowWidth%2A> Eigenschaften zu bestimmen, ob genügend für die Anmerkung Speicherplatz, um zu passen.  Wenn vorhanden ist, wird die Zeile angezeigt. Wenn dies nicht der Fall, wird eine Zeile, rückt drei Leerzeichen, und die Anmerkung angezeigt.  
  
 Im folgende Beispiel wird mit dem ersten identisch, außer dass er eine Liste mit fünf Elementen als gibt die `arg` Argument statt eines Parameterarrays.  
  
 [!code-csharp[System.Console.Write#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.write/cs/WriteParams2.cs#2)]
 [!code-vb[System.Console.Write#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.write/vb/WriteParams2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> oder <paramref name="arg" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">Die Formatangabe in <paramref name="format" /> ist ungültig.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <block subset="none" type="usage">
          <para>Diese Methode wird von C++-Code nicht aufgerufen. Der C++-Compiler löst Aufrufe von [System.Console.Write](xref:System.Console.Write*) , die eine Zeichenfolge und eine Liste von vier oder mehr Objekte enthalten, wie ein Aufruf von <see cref="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)" />. Es löst Aufrufe von [System.Console.Write](xref:System.Console.Write*) , die eine Zeichenfolge und ein Object-Array enthalten, wie ein Aufruf von <see cref="M:System.Console.Write(System.String,System.Object)" />.</para>
        </block>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Formatieren von Typen in .NET</related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md">Kombinierte Formatierung</related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="static member Write : char[] * int * int -&gt; unit" Usage="System.Console.Write (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Ein Array von Unicode-Zeichen.</param>
        <param name="index">Die Anfangsposition in <c>buffer</c>.</param>
        <param name="count">Die Anzahl der zu schreibenden Zeichen.</param>
        <summary>Schreibt das angegebene Unterarray von Unicode-Zeichen in den Standardausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode schreibt `count` Zeichen beginnend an Position `index` von `buffer` in den Standardausgabestream.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> oder <paramref name="count" /> ist kleiner als 0.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="index" /> plus <paramref name="count" /> geben eine Position an, die nicht innerhalb von <paramref name="buffer" /> liegt.</exception>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (format As String, arg0 As Object, arg1 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberSignature Language="F#" Value="static member Write : string * obj * obj -&gt; unit" Usage="System.Console.Write (format, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Eine kombinierte Formatzeichenfolge.</param>
        <param name="arg0">Das erste mit <c>format</c> zu schreibende Objekt.</param>
        <param name="arg1">Das zweite mit <c>format</c> zu schreibende Objekt.</param>
        <summary>Schreibt die Textdarstellung der angegebenen Objekte unter Verwendung der angegebenen Formatinformationen in den Standardausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode verwendet die [Funktion für kombinierte Formatierung](~/docs/standard/base-types/composite-formatting.md) von .NET Framework, um den Wert eines Objekts in die Textdarstellung zu konvertieren und diese Darstellung in einer Zeichenfolge einzubetten. Die resultierende Zeichenfolge wird in den Ausgabestream geschrieben werden.  
  
 Die `format` -Parameter besteht aus 0 (null) oder weitere Ausführungen von Text und optional ein mit NULL oder mehr indizierten Platzhaltern enthalten, den so genannten Formatelementen, die einem Objekt in der Liste der Parameter dieser Methode entsprechen. Die Formatierung zu ersetzt jedes Formatelement durch die Textdarstellung des Werts des entsprechenden Objekts.  
  
 Die Syntax eines Formatelements ist `{` *Index*[`,`*Ausrichtung*] [`:`*FormatString*]`}`, gibt an, die eine Erforderlicher Index, der optionale Länge und Ausrichtung der formatierten Text und eine optionale Zeichenfolge von Formatbezeichnerzeichen, die steuern, wie der Wert des entsprechenden Objekts formatiert wird.  
  
 .NET Framework bietet umfangreiche formatierungsunterstützung, die in den folgenden Themen zur Formatierung ausführlicher beschrieben wird.  
  
-   Weitere Informationen zu unterstützten Methoden wie z. B. Funktion für kombinierte Formatierung <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, und einige Überladungen der <xref:System.Console.WriteLine%2A>, finden Sie unter [kombinierte Formatierung](~/docs/standard/base-types/composite-formatting.md).  
  
-   Weitere Informationen über numerische Formatbezeichner finden Sie unter [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) und [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Weitere Informationen über Datum und Uhrzeit, die Formatbezeichner finden Sie unter [Standardformatzeichenfolgen für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md) und [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
-   Weitere Informationen zu Formatbezeichnern finden Sie unter [Enumerationsformatzeichenfolgen](~/docs/standard/base-types/enumeration-format-strings.md).  
  
-   Weitere Informationen zur Formatierung finden Sie unter [Formatierung von Typen](~/docs/standard/base-types/formatting-types.md).  
  
   
  
## Examples  
 Im folgenden Beispiel werden die Standardformatbezeichner für Zahlen, Datumsangaben und Enumerationen mithilfe der `WriteLine`-Methode veranschaulicht.  
  
 [!code-cpp[console.writelineFmt1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.writelineFmt1/cpp/wl.cpp#1)] 
 [!code-csharp[console.writelineFmt1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.writelineFmt1/cs/wl.cs#1)]
 [!code-vb[console.writelineFmt1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.writelineFmt1/vb/wl.vb#1)]  
  
 Im folgenden Beispiel wird die Verwendung der `Write`-Methode veranschaulicht.  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">Die Formatangabe in <paramref name="format" /> ist ungültig.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Formatieren von Typen in .NET</related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md">Kombinierte Formatierung</related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string format, object arg0, object arg1, object arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string format, object arg0, object arg1, object arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.String,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (format As String, arg0 As Object, arg1 As Object, arg2 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2);" />
      <MemberSignature Language="F#" Value="static member Write : string * obj * obj * obj -&gt; unit" Usage="System.Console.Write (format, arg0, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Eine kombinierte Formatzeichenfolge.</param>
        <param name="arg0">Das erste mit <c>format</c> zu schreibende Objekt.</param>
        <param name="arg1">Das zweite mit <c>format</c> zu schreibende Objekt.</param>
        <param name="arg2">Das dritte mit <c>format</c> zu schreibende Objekt.</param>
        <summary>Schreibt die Textdarstellung der angegebenen Objekte unter Verwendung der angegebenen Formatinformationen in den Standardausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode verwendet die [Funktion für kombinierte Formatierung](~/docs/standard/base-types/composite-formatting.md) von .NET Framework, um den Wert eines Objekts in die Textdarstellung zu konvertieren und diese Darstellung in einer Zeichenfolge einzubetten. Die resultierende Zeichenfolge wird in den Ausgabestream geschrieben werden.  
  
 Die `format` -Parameter besteht aus 0 (null) oder weitere Ausführungen von Text und optional ein mit NULL oder mehr indizierten Platzhaltern enthalten, den so genannten Formatelementen, die einem Objekt in der Liste der Parameter dieser Methode entsprechen. Die Formatierung zu ersetzt jedes Formatelement durch die Textdarstellung des Werts des entsprechenden Objekts.  
  
 Die Syntax eines Formatelements ist `{` *Index*[`,`*Ausrichtung*] [`:`*FormatString*]`}`, gibt an, die eine Erforderlicher Index, der optionale Länge und Ausrichtung der formatierten Text und eine optionale Zeichenfolge von Formatbezeichnerzeichen, die steuern, wie der Wert des entsprechenden Objekts formatiert wird.  
  
 .NET Framework bietet umfangreiche formatierungsunterstützung, die in den folgenden Themen zur Formatierung ausführlicher beschrieben wird.  
  
-   Weitere Informationen zu unterstützten Methoden wie z. B. Funktion für kombinierte Formatierung <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, und einige Überladungen der <xref:System.Console.WriteLine%2A>, finden Sie unter [kombinierte Formatierung](~/docs/standard/base-types/composite-formatting.md).  
  
-   Weitere Informationen über numerische Formatbezeichner finden Sie unter [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) und [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Weitere Informationen über Datum und Uhrzeit, die Formatbezeichner finden Sie unter [Standardformatzeichenfolgen für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md) und [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
-   Weitere Informationen zu Formatbezeichnern finden Sie unter [Enumerationsformatzeichenfolgen](~/docs/standard/base-types/enumeration-format-strings.md).  
  
-   Weitere Informationen zur Formatierung finden Sie unter [Formatierung von Typen](~/docs/standard/base-types/formatting-types.md).  
  
   
  
## Examples  
 Im folgenden Beispiel werden die Standardformatbezeichner für Zahlen, Datumsangaben und Enumerationen mithilfe der `WriteLine`-Methode veranschaulicht.  
  
 [!code-cpp[console.writelineFmt1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.writelineFmt1/cpp/wl.cpp#1)] 
 [!code-csharp[console.writelineFmt1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.writelineFmt1/cs/wl.cs#1)]
 [!code-vb[console.writelineFmt1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.writelineFmt1/vb/wl.vb#1)]  
  
 Im folgenden Beispiel wird die Verwendung der `Write`-Methode veranschaulicht.  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">Die Formatangabe in <paramref name="format" /> ist ungültig.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Formatieren von Typen in .NET</related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md">Kombinierte Formatierung</related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string format, object arg0, object arg1, object arg2, object arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string format, object arg0, object arg1, object arg2, object arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (format As String, arg0 As Object, arg1 As Object, arg2 As Object, arg3 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2, System::Object ^ arg3);" />
      <MemberSignature Language="F#" Value="static member Write : string * obj * obj * obj * obj -&gt; unit" Usage="System.Console.Write (format, arg0, arg1, arg2, arg3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
        <Parameter Name="arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Eine kombinierte Formatzeichenfolge.</param>
        <param name="arg0">Das erste mit <c>format</c> zu schreibende Objekt.</param>
        <param name="arg1">Das zweite mit <c>format</c> zu schreibende Objekt.</param>
        <param name="arg2">Das dritte mit <c>format</c> zu schreibende Objekt.</param>
        <param name="arg3">Das vierte mit <c>format</c> zu schreibende Objekt.</param>
        <summary>Schreibt die Textdarstellung der angegebenen Objekte und der Parameterliste von variabler Länge unter Verwendung der angegebenen Formatinformationen in den Standardausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Diese API ist nicht CLS-kompatibel. Die CLS-kompatible Alternative ist <xref:System.Console.Write%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>. Die C#- und Visual Basic-Compiler lösen einen Aufruf dieser Methode automatisch als Aufruf an <xref:System.Console.Write%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>.  
  
 Diese Methode verwendet die [Funktion für kombinierte Formatierung](~/docs/standard/base-types/composite-formatting.md) von .NET Framework, um den Wert eines Objekts in die Textdarstellung zu konvertieren und diese Darstellung in einer Zeichenfolge einzubetten. Die resultierende Zeichenfolge wird in den Ausgabestream geschrieben werden.  
  
 Die `format` -Parameter besteht aus 0 (null) oder weitere Ausführungen von Text und optional ein mit NULL oder mehr indizierten Platzhaltern enthalten, den so genannten Formatelementen, die einem Objekt in der Liste der Parameter dieser Methode entsprechen. Die Formatierung zu ersetzt jedes Formatelement durch die Textdarstellung des Werts des entsprechenden Objekts.  
  
 Die Syntax eines Formatelements ist `{` *Index*[`,`*Ausrichtung*] [`:`*FormatString*]`}`, gibt an, die eine Erforderlicher Index, der optionale Länge und Ausrichtung der formatierten Text und eine optionale Zeichenfolge von Formatbezeichnerzeichen, die steuern, wie der Wert des entsprechenden Objekts formatiert wird.  
  
 .NET Framework bietet umfangreiche formatierungsunterstützung, die in den folgenden Themen zur Formatierung ausführlicher beschrieben wird.  
  
-   Weitere Informationen zu unterstützten Methoden wie z. B. Funktion für kombinierte Formatierung <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, und einige Überladungen der <xref:System.Console.WriteLine%2A>, finden Sie unter [kombinierte Formatierung](~/docs/standard/base-types/composite-formatting.md).  
  
-   Weitere Informationen über numerische Formatbezeichner finden Sie unter [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) und [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Weitere Informationen über Datum und Uhrzeit, die Formatbezeichner finden Sie unter [Standardformatzeichenfolgen für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md) und [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
-   Weitere Informationen zu Formatbezeichnern finden Sie unter [Enumerationsformatzeichenfolgen](~/docs/standard/base-types/enumeration-format-strings.md).  
  
-   Weitere Informationen zur Formatierung finden Sie unter [Formatierung von Typen](~/docs/standard/base-types/formatting-types.md).  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Verwendung von Variablen Parametern mit dem <xref:System.Console.Write%28System.String%2CSystem.Object%2CSystem.Object%2CSystem.Object%2CSystem.Object%29> Methode. Die Methode wird mit einer kombinierten Formatzeichenfolge und fünf Formatelemente aufgerufen.  
  
 [!code-cpp[System.Console.Write#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.console.write/cpp/con_write.cpp#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">Die Formatangabe in <paramref name="format" /> ist ungültig.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <block subset="none" type="usage">
          <para>Diese Methode ist mit markiert die <see langword="vararg" /> -Schlüsselwort, das bedeutet, dass es sich um eine Variable Anzahl an Parametern unterstützt. Die Methode kann aufgerufen werden, von Visual C++, aber es kann nicht in c# oder Visual Basic-Code aufgerufen werden. Die C#- und Visual Basic-Compiler lösen Aufrufe von <see cref="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)" /> als Aufrufe von <see cref="M:System.Console.Write(System.String,System.Object[])" />.</para>
        </block>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Formatieren von Typen in .NET</related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md">Kombinierte Formatierung</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteLine">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Schreibt die angegebenen Daten, gefolgt vom aktuellen Zeichen für den Zeilenabschluss, in den Standardausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Standardzeilenabschluss ist eine Zeichenfolge, deren Wert ein Wagenrücklaufzeichen gefolgt von einem Zeilenvorschub ("\r\n" in c# oder `vbCrLf` in Visual Basic). Sie können die für den Zeilenabschluss ändern, durch Festlegen der <xref:System.IO.TextWriter.NewLine%2A?displayProperty=nameWithType> Eigenschaft der <xref:System.Console.Out%2A> Eigenschaft in eine andere Zeichenfolge.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine();" />
      <MemberSignature Language="F#" Value="static member WriteLine : unit -&gt; unit" Usage="System.Console.WriteLine " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schreibt das aktuelle Zeichen für den Zeilenabschluss in den Standardausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Standardzeilenabschluss ist eine Zeichenfolge, deren Wert ein Wagenrücklaufzeichen gefolgt von einem Zeilenvorschub ("\r\n" in c# oder `vbCrLf` in Visual Basic). Sie können die für den Zeilenabschluss ändern, durch Festlegen der <xref:System.IO.TextWriter.NewLine%2A?displayProperty=nameWithType> Eigenschaft der <xref:System.Console.Out%2A> Eigenschaft in eine andere Zeichenfolge. Dies wird im Beispiel veranschaulicht.  
  
   
  
## Examples  
 Im Beispiel geändert, die für den Zeilenabschluss von seinem Standardwert von "\r\n" oder `vbCrLf` auf "\r\n\r\n" oder `vbCrLf`  +  `vbCrLf`. Es ruft dann die <xref:System.Console.WriteLine> und <xref:System.Console.WriteLine%28System.String%29> Methoden zur Anzeige der Ausgabe an die Konsole.  
  
 [!code-cpp[System.Console.WriteLine#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.WriteLine/CPP/newline1.cpp#2)]
 [!code-csharp[System.Console.WriteLine#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/newline1.cs#2)]
 [!code-vb[System.Console.WriteLine#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/newline1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
        <altmember cref="P:System.IO.TextWriter.NewLine" />
        <altmember cref="P:System.Console.Out" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(bool value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : bool -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">Der zu schreibende Wert.</param>
        <summary>Schreibt die Textdarstellung des angegebenen booleschen Werts, gefolgt vom aktuellen Zeichen für den Zeilenabschluss, in den Standardausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die binäre Darstellung des `value` erzeugt wird, durch den Aufruf der <xref:System.Boolean.ToString%2A?displayProperty=nameWithType> Methode.  
  
 Weitere Informationen zu den für den Zeilenabschluss, finden Sie im Abschnitt "Hinweise" der <xref:System.Console.WriteLine%2A> -Methode, die keine Parameter akzeptiert.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die zehn Zufallszahlen generiert und verwendet die <xref:System.Console.WriteLine%28System.Boolean%29?displayProperty=nameWithType> Methode, um anzugeben, ob sie gerade sind.  
  
 [!code-cpp[System.Console.WriteLine#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.WriteLine/CPP/writeline_boolean1.cpp#4)]
 [!code-csharp[System.Console.WriteLine#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/writeline_boolean1.cs#4)]
 [!code-vb[System.Console.WriteLine#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/writeline_boolean1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(char value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : char -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">Der zu schreibende Wert.</param>
        <summary>Schreibt das angegebene Unicode-Zeichen, gefolgt vom aktuellen Zeichen für den Zeilenabschluss, in den Standardausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zu den für den Zeilenabschluss, finden Sie im Abschnitt "Hinweise" der <xref:System.Console.WriteLine%2A> -Methode, die keine Parameter akzeptiert.  
  
   
  
## Examples  
 Im folgende Beispiel wird eine QuickInfo-Rechner, der ein Tipp 18 % berechnet und verwendet die <xref:System.Console.WriteLine%2A> Methode, um die Zeitspanne, die ursprünglichen Kosten, die Höhe des trinkgelds und die Gesamtmenge anzuzeigen. Das Beispiel ist eine Konsolenanwendung, die der Benutzer die Zeitspanne, die ursprünglichen Kosten als Befehlszeilenparameter angeben muss.  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (buffer As Char())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(cli::array &lt;char&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="static member WriteLine : char[] -&gt; unit" Usage="System.Console.WriteLine buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer">Ein Array von Unicode-Zeichen.</param>
        <summary>Schreibt das angegebenen Array von Unicode-Zeichen, gefolgt vom aktuellen Zeichen für den Zeilenabschluss, in den Standardausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zu den für den Zeilenabschluss, finden Sie im Abschnitt "Hinweise" der <xref:System.Console.WriteLine%2A> -Methode, die keine Parameter akzeptiert.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::Decimal value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : decimal -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">Der zu schreibende Wert.</param>
        <summary>Schreibt die Textdarstellung des angegebenen <see cref="T:System.Decimal" />-Werts, gefolgt vom aktuellen Zeichen für den Zeilenabschluss, in den Standardausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die binäre Darstellung des `value` erzeugt wird, durch den Aufruf der <xref:System.Decimal.ToString%2A?displayProperty=nameWithType> Methode.  
  
 Weitere Informationen zu den für den Zeilenabschluss, finden Sie im Abschnitt "Hinweise" der <xref:System.Console.WriteLine%2A> -Methode, die keine Parameter akzeptiert.  
  
   
  
## Examples  
 Im folgende Beispiel wird eine QuickInfo-Rechner, der ein Tipp 18 % berechnet und verwendet die <xref:System.Console.WriteLine%2A> Methode, um die Zeitspanne, die ursprünglichen Kosten, die Höhe des trinkgelds und die Gesamtmenge anzuzeigen. Das Beispiel ist eine Konsolenanwendung, die der Benutzer die Zeitspanne, die ursprünglichen Kosten als Befehlszeilenparameter angeben muss.  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(double value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : double -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Der zu schreibende Wert.</param>
        <summary>Schreibt die Textdarstellung der angegebenen Gleitkommazahl mit doppelter Genauigkeit, gefolgt vom aktuellen Zeichen für den Zeilenabschluss, in den Standardausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die binäre Darstellung des `value` erzeugt wird, durch den Aufruf der <xref:System.Double.ToString%2A?displayProperty=nameWithType> Methode.  
  
 Weitere Informationen zu den für den Zeilenabschluss, finden Sie im Abschnitt "Hinweise" der <xref:System.Console.WriteLine%2A> -Methode, die keine Parameter akzeptiert.  
  
   
  
## Examples  
 Im folgende Beispiel wird eine QuickInfo-Rechner, der ein Tipp 18 % berechnet und verwendet die <xref:System.Console.WriteLine%2A> Methode, um die Zeitspanne, die ursprünglichen Kosten, die Höhe des trinkgelds und die Gesamtmenge anzuzeigen. Das Beispiel ist eine Konsolenanwendung, die der Benutzer die Zeitspanne, die ursprünglichen Kosten als Befehlszeilenparameter angeben muss.  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(int value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : int -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Der zu schreibende Wert.</param>
        <summary>Schreibt die Textdarstellung der angegebenen 32-Bit-Ganzzahl mit Vorzeichen, gefolgt vom aktuellen Zeichen für den Zeilenabschluss, in den Standardausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die binäre Darstellung des `value` erzeugt wird, durch den Aufruf der <xref:System.Int32.ToString%2A?displayProperty=nameWithType> Methode.  
  
 Weitere Informationen zu den für den Zeilenabschluss, finden Sie im Abschnitt "Hinweise" der <xref:System.Console.WriteLine%2A> -Methode, die keine Parameter akzeptiert.  
  
   
  
## Examples  
 Im folgende Beispiel wird eine QuickInfo-Rechner, der ein Tipp 18 % berechnet und verwendet die <xref:System.Console.WriteLine%2A> Methode, um die Zeitspanne, die ursprünglichen Kosten, die Höhe des trinkgelds und die Gesamtmenge anzuzeigen. Das Beispiel ist eine Konsolenanwendung, die der Benutzer die Zeitspanne, die ursprünglichen Kosten als Befehlszeilenparameter angeben muss.  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(long value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : int64 -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">Der zu schreibende Wert.</param>
        <summary>Schreibt die Textdarstellung der angegebenen 64-Bit-Ganzzahl mit Vorzeichen, gefolgt vom aktuellen Zeichen für den Zeilenabschluss, in den Standardausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die binäre Darstellung des `value` erzeugt wird, durch den Aufruf der <xref:System.Int64.ToString%2A?displayProperty=nameWithType> Methode.  
  
 Weitere Informationen zu den für den Zeilenabschluss, finden Sie im Abschnitt "Hinweise" der <xref:System.Console.WriteLine%2A> -Methode, die keine Parameter akzeptiert.  
  
   
  
## Examples  
 Im folgende Beispiel wird eine QuickInfo-Rechner, der ein Tipp 18 % berechnet und verwendet die <xref:System.Console.WriteLine%2A> Methode, um die Zeitspanne, die ursprünglichen Kosten, die Höhe des trinkgelds und die Gesamtmenge anzuzeigen. Das Beispiel ist eine Konsolenanwendung, die der Benutzer die Zeitspanne, die ursprünglichen Kosten als Befehlszeilenparameter angeben muss.  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : obj -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Der zu schreibende Wert.</param>
        <summary>Schreibt die Textdarstellung des angegebenen Objekts, gefolgt vom aktuellen Zeichen für den Zeilenabschluss, in den Standardausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `value``null` ist, wird nur das Zeichen für den Zeilenabschluss geschrieben. Andernfalls die `ToString` -Methode der `value` wird aufgerufen, um die Zeichenfolgendarstellung zu erstellen und die resultierende Zeichenfolge wird in den Standardausgabestream geschrieben.  
  
 Weitere Informationen zu den für den Zeilenabschluss, finden Sie im Abschnitt "Hinweise" der <xref:System.Console.WriteLine%2A> -Methode, die keine Parameter akzeptiert.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Console.WriteLine%28System.Object%29> Methode, um jeden Wert in ein Objektarray, in der Konsole anzuzeigen.  
  
 [!code-cpp[System.Console.WriteLine#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.WriteLine/CPP/writeline_obj1.cpp#3)]
 [!code-csharp[System.Console.WriteLine#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/writeline_obj1.cs#3)]
 [!code-vb[System.Console.WriteLine#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/writeline_obj1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(float value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : single -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">Der zu schreibende Wert.</param>
        <summary>Schreibt die Textdarstellung der angegebenen Gleitkommazahl mit einfacher Genauigkeit, gefolgt vom aktuellen Zeichen für den Zeilenabschluss, in den Standardausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die binäre Darstellung des `value` erzeugt wird, durch den Aufruf der <xref:System.Single.ToString%2A?displayProperty=nameWithType> Methode.  
  
 Weitere Informationen zu den für den Zeilenabschluss, finden Sie im Abschnitt "Hinweise" der <xref:System.Console.WriteLine%2A> -Methode, die keine Parameter akzeptiert.  
  
   
  
## Examples  
 Im folgende Beispiel wird eine QuickInfo-Rechner, der ein Tipp 18 % berechnet und verwendet die <xref:System.Console.WriteLine%2A> Methode, um die Zeitspanne, die ursprünglichen Kosten, die Höhe des trinkgelds und die Gesamtmenge anzuzeigen. Das Beispiel ist eine Konsolenanwendung, die der Benutzer die Zeitspanne, die ursprünglichen Kosten als Befehlszeilenparameter angeben muss.  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : string -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Der zu schreibende Wert.</param>
        <summary>Schreibt den angegebenen Zeichenfolgenwert, gefolgt vom aktuellen Zeichen für den Zeilenabschluss, in den Standardausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Falls der Wert `null`, nur die für den Zeilenabschluss in den Standardausgabestream geschrieben.  
  
 Weitere Informationen zu den für den Zeilenabschluss, finden Sie im Abschnitt "Hinweise" der <xref:System.Console.WriteLine> Methode.  
  
   
  
## Examples  
 Im Beispiel geändert, die für den Zeilenabschluss von seinem Standardwert von "\r\n" oder `vbCrLf` auf "\r\n\r\n" oder `vbCrLf`  +  `vbCrLf`. Es ruft dann die <xref:System.Console.WriteLine> und <xref:System.Console.WriteLine%28System.String%29> Methoden zur Anzeige der Ausgabe an die Konsole.  
  
 [!code-cpp[System.Console.WriteLine#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.WriteLine/CPP/newline1.cpp#2)]
 [!code-csharp[System.Console.WriteLine#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/newline1.cs#2)]
 [!code-vb[System.Console.WriteLine#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/newline1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : uint32 -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">Der zu schreibende Wert.</param>
        <summary>Schreibt die Textdarstellung der angegebenen 32-Bit-Ganzzahl ohne Vorzeichen, gefolgt vom aktuellen Zeichen für den Zeilenabschluss, in den Standardausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die binäre Darstellung des `value` erzeugt wird, durch den Aufruf der <xref:System.UInt32.ToString%2A?displayProperty=nameWithType> Methode.  
  
 Weitere Informationen zu den für den Zeilenabschluss, finden Sie im Abschnitt "Hinweise" der <xref:System.Console.WriteLine%2A> -Methode, die keine Parameter akzeptiert.  
  
   
  
## Examples  
 Im folgende Beispiel wird eine QuickInfo-Rechner, der ein Tipp 18 % berechnet und verwendet die <xref:System.Console.WriteLine%2A> Methode, um die Zeitspanne, die ursprünglichen Kosten, die Höhe des trinkgelds und die Gesamtmenge anzuzeigen. Das Beispiel ist eine Konsolenanwendung, die der Benutzer die Zeitspanne, die ursprünglichen Kosten als Befehlszeilenparameter angeben muss.  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : uint64 -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">Der zu schreibende Wert.</param>
        <summary>Schreibt die Textdarstellung der angegebenen 64-Bit-Ganzzahl ohne Vorzeichen, gefolgt vom aktuellen Zeichen für den Zeilenabschluss, in den Standardausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die binäre Darstellung des `value` erzeugt wird, durch den Aufruf der <xref:System.UInt64.ToString%2A?displayProperty=nameWithType> Methode.  
  
 Weitere Informationen zu den für den Zeilenabschluss, finden Sie im Abschnitt "Hinweise" der <xref:System.Console.WriteLine%2A> -Methode, die keine Parameter akzeptiert.  
  
   
  
## Examples  
 Im folgende Beispiel wird eine QuickInfo-Rechner, der ein Tipp 18 % berechnet und verwendet die <xref:System.Console.WriteLine%2A> Methode, um die Zeitspanne, die ursprünglichen Kosten, die Höhe des trinkgelds und die Gesamtmenge anzuzeigen. Das Beispiel ist eine Konsolenanwendung, die der Benutzer die Zeitspanne, die ursprünglichen Kosten als Befehlszeilenparameter angeben muss.  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (format As String, arg0 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ format, System::Object ^ arg0);" />
      <MemberSignature Language="F#" Value="static member WriteLine : string * obj -&gt; unit" Usage="System.Console.WriteLine (format, arg0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Eine kombinierte Formatzeichenfolge.</param>
        <param name="arg0">Ein mit <c>format</c> zu schreibendes Objekt.</param>
        <summary>Schreibt die Textdarstellung des angegebenen Objekts, gefolgt vom aktuellen Zeichen für den Zeilenabschluss, unter Verwendung der angegebenen Formatinformationen in den Standardausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode verwendet die [Funktion für kombinierte Formatierung](~/docs/standard/base-types/composite-formatting.md) von .NET Framework, um den Wert eines Objekts in die Textdarstellung zu konvertieren und diese Darstellung in einer Zeichenfolge einzubetten. Die resultierende Zeichenfolge wird in den Ausgabestream geschrieben werden.  
  
 Die `format` -Parameter besteht aus 0 (null) oder weitere Ausführungen von Text und optional ein mit NULL oder mehr indizierten Platzhaltern enthalten, den so genannten Formatelementen, die einem Objekt in der Liste der Parameter dieser Methode entsprechen. Die Formatierung zu ersetzt jedes Formatelement durch die Textdarstellung des Werts des entsprechenden Objekts.  
  
 Die Syntax eines Formatelements ist `{` *Index*[`,`*Ausrichtung*] [`:`*FormatString*]`}`, gibt an, die eine Erforderlicher Index, der optionale Länge und Ausrichtung der formatierten Text und eine optionale Zeichenfolge von Formatbezeichnerzeichen, die steuern, wie der Wert des entsprechenden Objekts formatiert wird.  
  
 .NET Framework bietet umfangreiche formatierungsunterstützung, die in den folgenden Themen zur Formatierung ausführlicher beschrieben wird.  
  
-   Weitere Informationen zu unterstützten Methoden wie z. B. Funktion für kombinierte Formatierung <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, und einige Überladungen der <xref:System.Console.WriteLine%2A>, finden Sie unter [kombinierte Formatierung](~/docs/standard/base-types/composite-formatting.md).  
  
-   Weitere Informationen über numerische Formatbezeichner finden Sie unter [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) und [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Weitere Informationen über Datum und Uhrzeit, die Formatbezeichner finden Sie unter [Standardformatzeichenfolgen für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md) und [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
-   Weitere Informationen zu Formatbezeichnern finden Sie unter [Enumerationsformatzeichenfolgen](~/docs/standard/base-types/enumeration-format-strings.md).  
  
-   Weitere Informationen zur Formatierung finden Sie unter [Formatierung von Typen](~/docs/standard/base-types/formatting-types.md).  
  
 Weitere Informationen zu den für den Zeilenabschluss, finden Sie im Abschnitt "Hinweise" der <xref:System.Console.WriteLine%2A> -Methode, die keine Parameter akzeptiert.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Console.WriteLine%28System.String%2CSystem.Object%29> -Methode zum Anzeigen der fünf nach dem Zufallsprinzip generiert <xref:System.Boolean> Werte.  
  
 [!code-csharp[System.Console.WriteLine#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/WriteLine6.cs#6)]
 [!code-vb[System.Console.WriteLine#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/WriteLine6.vb#6)]  
  
 Im folgenden Beispiel wird die <xref:System.Console.WriteLine%28System.String%2CSystem.Object%29> Methode, um das aktuelle Datum anzuzeigen.   Beachten Sie, die das Format-Element in der `format` Argument verwendet, das "D" [Formatzeichenfolge für Datum und Uhrzeit](~/docs/standard/base-types/standard-date-and-time-format-strings.md) zum Anzeigen des Datums in der aktuellen Kultur das lange Datumsformat.  
  
 [!code-csharp[System.Console.WriteLine#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/WriteLine7.cs#7)]
 [!code-vb[System.Console.WriteLine#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/WriteLine7.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">Die Formatangabe in <paramref name="format" /> ist ungültig.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Formatieren von Typen in .NET</related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md">Kombinierte Formatierung</related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, params object[] arg);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object[] arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (format As String, ParamArray arg As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ arg);" />
      <MemberSignature Language="F#" Value="static member WriteLine : string * obj[] -&gt; unit" Usage="System.Console.WriteLine (format, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">Eine kombinierte Formatzeichenfolge.</param>
        <param name="arg">Ein mit <c>format</c> zu schreibendes Array von Objekten.</param>
        <summary>Schreibt die Textdarstellung des angegebenen Arrays von Objekten, gefolgt vom aktuellen Zeichen für den Zeilenabschluss, unter Verwendung der angegebenen Formatinformationen in den Standardausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode verwendet die [Funktion für kombinierte Formatierung](~/docs/standard/base-types/composite-formatting.md) von .NET Framework, um den Wert eines Objekts in die Textdarstellung zu konvertieren und diese Darstellung in einer Zeichenfolge einzubetten. Die resultierende Zeichenfolge wird in den Ausgabestream geschrieben werden.  
  
 Die `format` -Parameter besteht aus 0 (null) oder weitere Ausführungen von Text und optional ein mit NULL oder mehr indizierten Platzhaltern enthalten, den so genannten Formatelementen, die einem Objekt in der Liste der Parameter dieser Methode entsprechen. Die Formatierung zu ersetzt jedes Formatelement durch die Textdarstellung des Werts des entsprechenden Objekts.  
  
 Die Syntax eines Formatelements ist `{` *Index*[`,`*Ausrichtung*] [`:`*FormatString*]`}`, gibt an, die eine Erforderlicher Index, der optionale Länge und Ausrichtung der formatierten Text und eine optionale Zeichenfolge von Formatbezeichnerzeichen, die steuern, wie der Wert des entsprechenden Objekts formatiert wird.  
  
 .NET Framework bietet umfangreiche formatierungsunterstützung, die in den folgenden Themen zur Formatierung ausführlicher beschrieben wird.  
  
-   Weitere Informationen zu unterstützten Methoden wie z. B. Funktion für kombinierte Formatierung <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, und einige Überladungen der <xref:System.Console.WriteLine%2A>, finden Sie unter [kombinierte Formatierung](~/docs/standard/base-types/composite-formatting.md).  
  
-   Weitere Informationen über numerische Formatbezeichner finden Sie unter [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) und [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Weitere Informationen über Datum und Uhrzeit, die Formatbezeichner finden Sie unter [Standardformatzeichenfolgen für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md) und [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
-   Weitere Informationen zu Formatbezeichnern finden Sie unter [Enumerationsformatzeichenfolgen](~/docs/standard/base-types/enumeration-format-strings.md).  
  
-   Weitere Informationen zur Formatierung finden Sie unter [Formatierung von Typen](~/docs/standard/base-types/formatting-types.md).  
  
 Weitere Informationen zu den für den Zeilenabschluss, finden Sie im Abschnitt "Hinweise" der <xref:System.Console.WriteLine%2A> -Methode, die keine Parameter akzeptiert.  
  
   
  
## Examples  
 Im folgenden Beispiel werden die Standardformatbezeichner für Zahlen, Datumsangaben und Enumerationen veranschaulicht.  
  
 [!code-cpp[console.writelineFmt1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.writelineFmt1/cpp/wl.cpp#1)] 
 [!code-csharp[console.writelineFmt1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.writelineFmt1/cs/wl.cs#1)]
 [!code-vb[console.writelineFmt1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.writelineFmt1/vb/wl.vb#1)]  
  
 Im folgende Beispiel wird eine QuickInfo-Rechner, der ein Tipp 18 % berechnet und verwendet die <xref:System.Console.WriteLine%2A> Methode, um die Zeitspanne, die ursprünglichen Kosten, die Höhe des trinkgelds und die Gesamtmenge anzuzeigen. Das Beispiel ist eine Konsolenanwendung, die der Benutzer die Zeitspanne, die ursprünglichen Kosten als Befehlszeilenparameter angeben muss.  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> oder <paramref name="arg" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">Die Formatangabe in <paramref name="format" /> ist ungültig.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <block subset="none" type="usage">
          <para>Diese Methode wird von C++-Code nicht aufgerufen. Der C++-Compiler löst Aufrufe von [System.Console.WriteLine](xref:System.Console.WriteLine*) , die eine Zeichenfolge und eine Liste von vier oder mehr Objekte enthalten, wie ein Aufruf von <see cref="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)" />. Es löst Aufrufe von [System.Console.WriteLine](xref:System.Console.WriteLine*) , die eine Zeichenfolge und ein Object-Array enthalten, wie ein Aufruf von <see cref="M:System.Console.WriteLine(System.String,System.Object)" />.</para>
        </block>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Formatieren von Typen in .NET</related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md">Kombinierte Formatierung</related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="static member WriteLine : char[] * int * int -&gt; unit" Usage="System.Console.WriteLine (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Ein Array von Unicode-Zeichen.</param>
        <param name="index">Die Anfangsposition in <c>buffer</c>.</param>
        <param name="count">Die Anzahl der zu schreibenden Zeichen.</param>
        <summary>Schreibt das angegebene Unterarray von Unicode-Zeichen, gefolgt vom aktuellen Zeichen für den Zeilenabschluss, in den Standardausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode schreibt `count` Zeichen beginnend an Position `index` von `buffer` in den Standardausgabestream.  
  
 Weitere Informationen zu den für den Zeilenabschluss, finden Sie im Abschnitt "Hinweise" der <xref:System.Console.WriteLine%2A> -Methode, die keine Parameter akzeptiert.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> oder <paramref name="count" /> ist kleiner als 0.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="index" /> plus <paramref name="count" /> geben eine Position an, die nicht innerhalb von <paramref name="buffer" /> liegt.</exception>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (format As String, arg0 As Object, arg1 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberSignature Language="F#" Value="static member WriteLine : string * obj * obj -&gt; unit" Usage="System.Console.WriteLine (format, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Eine kombinierte Formatzeichenfolge.</param>
        <param name="arg0">Das erste mit <c>format</c> zu schreibende Objekt.</param>
        <param name="arg1">Das zweite mit <c>format</c> zu schreibende Objekt.</param>
        <summary>Schreibt die Textdarstellung der angegebenen Objekte, gefolgt vom aktuellen Zeichen für den Zeilenabschluss, unter Verwendung der angegebenen Formatinformationen in den Standardausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode verwendet die [Funktion für kombinierte Formatierung](~/docs/standard/base-types/composite-formatting.md) von .NET Framework, um den Wert eines Objekts in die Textdarstellung zu konvertieren und diese Darstellung in einer Zeichenfolge einzubetten. Die resultierende Zeichenfolge wird in den Ausgabestream geschrieben werden.  
  
 Die `format` -Parameter besteht aus 0 (null) oder weitere Ausführungen von Text und optional ein mit NULL oder mehr indizierten Platzhaltern enthalten, den so genannten Formatelementen, die einem Objekt in der Liste der Parameter dieser Methode entsprechen. Die Formatierung zu ersetzt jedes Formatelement durch die Textdarstellung des Werts des entsprechenden Objekts.  
  
 Die Syntax eines Formatelements ist `{` *Index*[`,`*Ausrichtung*] [`:`*FormatString*]`}`, gibt an, die eine Erforderlicher Index, der optionale Länge und Ausrichtung der formatierten Text und eine optionale Zeichenfolge von Formatbezeichnerzeichen, die steuern, wie der Wert des entsprechenden Objekts formatiert wird.  
  
 .NET Framework bietet umfangreiche formatierungsunterstützung, die in den folgenden Themen zur Formatierung ausführlicher beschrieben wird.  
  
-   Weitere Informationen zu unterstützten Methoden wie z. B. Funktion für kombinierte Formatierung <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, und einige Überladungen der <xref:System.Console.WriteLine%2A>, finden Sie unter [kombinierte Formatierung](~/docs/standard/base-types/composite-formatting.md).  
  
-   Weitere Informationen über numerische Formatbezeichner finden Sie unter [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) und [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Weitere Informationen über Datum und Uhrzeit, die Formatbezeichner finden Sie unter [Standardformatzeichenfolgen für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md) und [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
-   Weitere Informationen zu Formatbezeichnern finden Sie unter [Enumerationsformatzeichenfolgen](~/docs/standard/base-types/enumeration-format-strings.md).  
  
-   Weitere Informationen zur Formatierung finden Sie unter [Formatierung von Typen](~/docs/standard/base-types/formatting-types.md).  
  
 Weitere Informationen zu den für den Zeilenabschluss, finden Sie im Abschnitt "Hinweise" der <xref:System.Console.WriteLine%2A> -Methode, die keine Parameter akzeptiert.  
  
   
  
## Examples  
 Im folgenden Beispiel werden die Standardformatbezeichner für Zahlen, Datumsangaben und Enumerationen veranschaulicht.  
  
 [!code-cpp[console.writelineFmt1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.writelineFmt1/cpp/wl.cpp#1)] 
 [!code-csharp[console.writelineFmt1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.writelineFmt1/cs/wl.cs#1)]
 [!code-vb[console.writelineFmt1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.writelineFmt1/vb/wl.vb#1)]  
  
 Im folgende Beispiel wird eine QuickInfo-Rechner, der ein Tipp 18 % berechnet und verwendet die <xref:System.Console.WriteLine%2A> Methode, um die Zeitspanne, die ursprünglichen Kosten, die Höhe des trinkgelds und die Gesamtmenge anzuzeigen. Das Beispiel ist eine Konsolenanwendung, die der Benutzer die Zeitspanne, die ursprünglichen Kosten als Befehlszeilenparameter angeben muss.  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">Die Formatangabe in <paramref name="format" /> ist ungültig.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Formatieren von Typen in .NET</related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md">Kombinierte Formatierung</related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, object arg0, object arg1, object arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object arg0, object arg1, object arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (format As String, arg0 As Object, arg1 As Object, arg2 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2);" />
      <MemberSignature Language="F#" Value="static member WriteLine : string * obj * obj * obj -&gt; unit" Usage="System.Console.WriteLine (format, arg0, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Eine kombinierte Formatzeichenfolge.</param>
        <param name="arg0">Das erste mit <c>format</c> zu schreibende Objekt.</param>
        <param name="arg1">Das zweite mit <c>format</c> zu schreibende Objekt.</param>
        <param name="arg2">Das dritte mit <c>format</c> zu schreibende Objekt.</param>
        <summary>Schreibt die Textdarstellung der angegebenen Objekte, gefolgt vom aktuellen Zeichen für den Zeilenabschluss, unter Verwendung der angegebenen Formatinformationen in den Standardausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode verwendet die [Funktion für kombinierte Formatierung](~/docs/standard/base-types/composite-formatting.md) von .NET Framework, um den Wert eines Objekts in die Textdarstellung zu konvertieren und diese Darstellung in einer Zeichenfolge einzubetten. Die resultierende Zeichenfolge wird in den Ausgabestream geschrieben werden.  
  
 Die `format` -Parameter besteht aus 0 (null) oder weitere Ausführungen von Text und optional ein mit NULL oder mehr indizierten Platzhaltern enthalten, den so genannten Formatelementen, die einem Objekt in der Liste der Parameter dieser Methode entsprechen. Die Formatierung zu ersetzt jedes Formatelement durch die Textdarstellung des Werts des entsprechenden Objekts.  
  
 Die Syntax eines Formatelements ist `{` *Index*[`,`*Ausrichtung*] [`:`*FormatString*]`}`, gibt an, die eine Erforderlicher Index, der optionale Länge und Ausrichtung der formatierten Text und eine optionale Zeichenfolge von Formatbezeichnerzeichen, die steuern, wie der Wert des entsprechenden Objekts formatiert wird.  
  
 .NET Framework bietet umfangreiche formatierungsunterstützung, die in den folgenden Themen zur Formatierung ausführlicher beschrieben wird.  
  
-   Weitere Informationen zu unterstützten Methoden wie z. B. Funktion für kombinierte Formatierung <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, und einige Überladungen der <xref:System.Console.WriteLine%2A>, finden Sie unter [kombinierte Formatierung](~/docs/standard/base-types/composite-formatting.md).  
  
-   Weitere Informationen über numerische Formatbezeichner finden Sie unter [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) und [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Weitere Informationen über Datum und Uhrzeit, die Formatbezeichner finden Sie unter [Standardformatzeichenfolgen für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md) und [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
-   Weitere Informationen zu Formatbezeichnern finden Sie unter [Enumerationsformatzeichenfolgen](~/docs/standard/base-types/enumeration-format-strings.md).  
  
-   Weitere Informationen zur Formatierung finden Sie unter [Formatierung von Typen](~/docs/standard/base-types/formatting-types.md).  
  
 Weitere Informationen zu den für den Zeilenabschluss, finden Sie im Abschnitt "Hinweise" der <xref:System.Console.WriteLine%2A> -Methode, die keine Parameter akzeptiert.  
  
   
  
## Examples  
 Im folgenden Beispiel werden die Standardformatbezeichner für Zahlen, Datumsangaben und Enumerationen veranschaulicht.  
  
 [!code-cpp[console.writelineFmt1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.writelineFmt1/cpp/wl.cpp#1)] 
 [!code-csharp[console.writelineFmt1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.writelineFmt1/cs/wl.cs#1)]
 [!code-vb[console.writelineFmt1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.writelineFmt1/vb/wl.vb#1)]  
  
 Im folgende Beispiel wird eine QuickInfo-Rechner, der ein Tipp 18 % berechnet und verwendet die <xref:System.Console.WriteLine%2A> Methode, um die Zeitspanne, die ursprünglichen Kosten, die Höhe des trinkgelds und die Gesamtmenge anzuzeigen. Das Beispiel ist eine Konsolenanwendung, die der Benutzer die Zeitspanne, die ursprünglichen Kosten als Befehlszeilenparameter angeben muss.  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">Die Formatangabe in <paramref name="format" /> ist ungültig.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Formatieren von Typen in .NET</related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md">Kombinierte Formatierung</related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, object arg0, object arg1, object arg2, object arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object arg0, object arg1, object arg2, object arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (format As String, arg0 As Object, arg1 As Object, arg2 As Object, arg3 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2, System::Object ^ arg3);" />
      <MemberSignature Language="F#" Value="static member WriteLine : string * obj * obj * obj * obj -&gt; unit" Usage="System.Console.WriteLine (format, arg0, arg1, arg2, arg3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
        <Parameter Name="arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Eine kombinierte Formatzeichenfolge.</param>
        <param name="arg0">Das erste mit <c>format</c> zu schreibende Objekt.</param>
        <param name="arg1">Das zweite mit <c>format</c> zu schreibende Objekt.</param>
        <param name="arg2">Das dritte mit <c>format</c> zu schreibende Objekt.</param>
        <param name="arg3">Das vierte mit <c>format</c> zu schreibende Objekt.</param>
        <summary>Schreibt die Textdarstellung der angegebenen Objekte und der Parameterliste variabler Länge, gefolgt vom aktuellen Zeichen für den Zeilenabschluss, unter Verwendung der angegebenen Formatinformationen in den Standardausgabestream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Diese API ist nicht CLS-kompatibel. Die CLS-kompatible Alternative ist <xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>. Die C#- und Visual Basic-Compiler lösen einen Aufruf dieser Methode automatisch als Aufruf an <xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>.  
  
 Diese Methode verwendet die [Funktion für kombinierte Formatierung](~/docs/standard/base-types/composite-formatting.md) von .NET Framework, um den Wert eines Objekts in die Textdarstellung zu konvertieren und diese Darstellung in einer Zeichenfolge einzubetten. Die resultierende Zeichenfolge wird in den Ausgabestream geschrieben werden.  
  
 Die `format` -Parameter besteht aus 0 (null) oder weitere Ausführungen von Text und optional ein mit NULL oder mehr indizierten Platzhaltern enthalten, den so genannten Formatelementen, die einem Objekt in der Liste der Parameter dieser Methode entsprechen. Die Formatierung zu ersetzt jedes Formatelement durch die Textdarstellung des Werts des entsprechenden Objekts.  
  
 Die Syntax eines Formatelements ist `{` *Index*[`,`*Ausrichtung*] [`:`*FormatString*]`}`, gibt an, die eine Erforderlicher Index, der optionale Länge und Ausrichtung der formatierten Text und eine optionale Zeichenfolge von Formatbezeichnerzeichen, die steuern, wie der Wert des entsprechenden Objekts formatiert wird.  
  
 .NET Framework bietet umfangreiche formatierungsunterstützung, die in den folgenden Themen zur Formatierung ausführlicher beschrieben wird.  
  
-   Weitere Informationen zu unterstützten Methoden wie z. B. Funktion für kombinierte Formatierung <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, und einige Überladungen der <xref:System.Console.WriteLine%2A>, finden Sie unter [kombinierte Formatierung](~/docs/standard/base-types/composite-formatting.md).  
  
-   Weitere Informationen über numerische Formatbezeichner finden Sie unter [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) und [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Weitere Informationen über Datum und Uhrzeit, die Formatbezeichner finden Sie unter [Standardformatzeichenfolgen für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md) und [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
-   Weitere Informationen zu Formatbezeichnern finden Sie unter [Enumerationsformatzeichenfolgen](~/docs/standard/base-types/enumeration-format-strings.md).  
  
-   Weitere Informationen zur Formatierung finden Sie unter [Formatierung von Typen](~/docs/standard/base-types/formatting-types.md).  
  
 Weitere Informationen zu den für den Zeilenabschluss, finden Sie im Abschnitt "Hinweise" der <xref:System.Console.WriteLine%2A> -Methode, die keine Parameter akzeptiert.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Verwendung von Variablen Argumente mit den <xref:System.Console.WriteLine%28System.String%2CSystem.Object%2CSystem.Object%2CSystem.Object%2CSystem.Object%29> Methode. Die Methode wird mit einer kombinierten Formatzeichenfolge und fünf Formatelemente aufgerufen.  
  
 [!code-cpp[System.Console.WriteLine#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.WriteLine/CPP/writeline_vararg.cpp#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">Die Formatangabe in <paramref name="format" /> ist ungültig.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren übergeordnete und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <block subset="none" type="usage">
          <para>Diese Methode ist mit markiert die <see langword="vararg" /> -Schlüsselwort, das bedeutet, dass es sich um eine Variable Anzahl an Parametern unterstützt. Die Methode kann aufgerufen werden, von Visual C++, aber es kann nicht in c# oder Visual Basic-Code aufgerufen werden. Die C#- und Visual Basic-Compiler lösen Aufrufe von <see cref="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)" /> als Aufrufe von <see cref="M:System.Console.WriteLine(System.String,System.Object[])" />.</para>
        </block>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Formatieren von Typen in .NET</related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md">Kombinierte Formatierung</related>
      </Docs>
    </Member>
  </Members>
</Type>
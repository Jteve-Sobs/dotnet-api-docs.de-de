<Type Name="Console" FullName="System.Console">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="378608dd9cc8deec5d2e2002822aed5386d826a9" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36433625" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Console" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed Console extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Console" />
  <TypeSignature Language="VB.NET" Value="Public Class Console" />
  <TypeSignature Language="C++ CLI" Value="public ref class Console abstract sealed" />
  <TypeSignature Language="F#" Value="type Console = class" />
  <AssemblyInfo>
    <AssemblyName>System.Console</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents the standard input, output, and error streams for console applications. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Konsole ist ein Betriebssystem-Fenster, in dem Benutzer mit dem Betriebssystem oder mit einer textbasierten Konsolenanwendung durch Eingabe von Texteingabe über die Tastatur des Computers sowie durch Lesen der Ausgabe von Text aus der Terminaldienste Computer interagieren. Beispielsweise wird im Windows-Betriebssystem ein die Konsole im Eingabeaufforderungsfenster wird aufgerufen, und MS-DOS-Befehle akzeptiert. Die <xref:System.Console> Klasse bietet grundlegende unterstützt für Anwendungen, die Zeichen aus dem Lesen und Schreiben von Zeichen in der Konsole.  
  
 Informationen zum Entwickeln von mit der <xref:System.Console> Klasse, finden Sie unter den folgenden Abschnitten:  
  
-   [Konsole e/a-Streams](#Streams)  
  
-   [Bildschirmpuffer und Konsolenfenster](#Buffer)  
  
-   [Unicode-Unterstützung für die Konsole](#Unicode)  
  
-   [Allgemeine Vorgänge](#Operations)  
  
-   [.NET Core-Hinweise](#Core)  
  
<a name="Streams"></a>   
## <a name="console-io-streams"></a>Konsole e/a-Streams  
 Wenn eine Konsolenanwendung gestartet wird, ordnet das Betriebssystem die drei e/a-Streams mit der Konsole: Standard Eingabe Datenstrom, den Standardausgabestream und Standard-Fehlerausgabestream. Die Anwendung kann Benutzereingaben aus dem Standardeingabestream gelesen; Schreiben Sie normale Daten in den Standardausgabestream. und Fehlerdaten in den Standard-Fehlerausgabestream geschrieben. Diese Streams werden angezeigt, als die Werte der an die Anwendung die <xref:System.Console.In%2A?displayProperty=nameWithType>, <xref:System.Console.Out%2A?displayProperty=nameWithType>, und <xref:System.Console.Error%2A?displayProperty=nameWithType> Eigenschaften.  
  
 Wird standardmäßig der Wert von der <xref:System.Console.In%2A> Eigenschaft ist ein <xref:System.IO.TextReader?displayProperty=nameWithType> Objekt, das die Tastatur und die Werte der darstellt der <xref:System.Console.Out%2A> und <xref:System.Console.Error%2A> Eigenschaften sind <xref:System.IO.TextWriter?displayProperty=nameWithType> Objekte, die eine Konsolenfenster darstellen. Allerdings können Sie diese Eigenschaften in Streams festlegen, die nicht das Konsolenfenster angezeigt oder die Tastatur darstellen; Beispielsweise können Sie diese Eigenschaften in Streams festlegen, die Dateien darstellen. Rufen Sie die Standardeingabe, Standardausgabe oder Standardfehlerstream umgeleitet, die <xref:System.Console.SetIn%2A?displayProperty=nameWithType>, <xref:System.Console.SetOut%2A?displayProperty=nameWithType>, oder <xref:System.Console.SetError%2A?displayProperty=nameWithType> Methode bzw. E/a-Vorgänge, die diese Streams werden synchronisiert, was bedeutet, dass mehrere Threads können Lese- und Schreibvorgänge in die Datenströme. Dies bedeutet, dass Methoden, die in der Regel asynchron, z. B. sind <xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=nameWithType>, synchron ausgeführt werden, wenn das Objekt einen Konsole Stream darstellt.  
  
> [!NOTE]
>  Verwenden Sie nicht die <xref:System.Console> zum Anzeigen der Ausgabe im unbeaufsichtigten Anwendungen, z. B. Server-Anwendungen. Aufrufe von Methoden wie z. B. <xref:System.Console.Write%2A?displayProperty=nameWithType> und <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> wirken sich nicht in der GUI-Anwendungen.  
  
 <xref:System.Console> Klassenmember, die normalerweise funktionieren, wenn der zugrunde liegende Stream einer-Konsole weitergeleitet wird möglicherweise eine Ausnahme ausgelöst, wenn der Stream, z. B. in einer Datei umgeleitet wird. Programmieren Sie Ihre Anwendung zum Abfangen von <xref:System.IO.IOException?displayProperty=nameWithType> Ausnahmen, wenn Sie einen Standardstream umleiten. Sie können auch die <xref:System.Console.IsOutputRedirected%2A>, <xref:System.Console.IsInputRedirected%2A>, und <xref:System.Console.IsErrorRedirected%2A> Eigenschaften zu bestimmen, ob ein standard-Datenstrom umgeleitet wird, vor dem Ausführen eines Vorgangs, der auslöst ein <xref:System.IO.IOException?displayProperty=nameWithType> Ausnahme.  
  
 Es ist manchmal hilfreich, die Mitglieder der Streamobjekte dargestellte explizit aufrufen der <xref:System.Console.In%2A>, <xref:System.Console.Out%2A>, und <xref:System.Console.Error%2A> Eigenschaften. Beispielsweise wird standardmäßig die <xref:System.Console.ReadLine%2A?displayProperty=nameWithType> Methode liest die Eingabe aus dem Standardeingabestream. Auf ähnliche Weise die <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> -Methode schreibt Daten in den Standardausgabestream und die Daten werden gefolgt von der Standardeinstellung Zeile Beendigung Zeichenfolge, also einen Wagenrücklauf und Zeilenvorschub ("\r\n"). Allerdings die <xref:System.Console> Klasse keine entsprechende Methode zum Schreiben von Daten in den Standard-Fehlerausgabestream oder eine Eigenschaft so ändern Sie die Zeichenfolge für den Zeilenabschluss für in diesen Datenstrom geschriebene Daten bereit.  
  
 Sie können dieses Problem beheben, indem Sie festlegen der <xref:System.IO.TextWriter.NewLine%2A?displayProperty=nameWithType> Eigenschaft von der <xref:System.Console.Out%2A> oder <xref:System.Console.Error%2A> Eigenschaft zu einer anderen Zeile Endzeichenfolge. Beispielsweise legt der folgende C#-Anweisung die Zeichenfolge für den Standard-Fehlerausgabestream beenden zwei Carriage return, Wagenrücklauf und Zeilenvorschub Sequenzen:  
  
 `Console.Error.NewLine = "\r\n\r\n";`  
  
 Sie können dann explizit aufrufen der <xref:System.IO.TextWriter.WriteLine%2A> -Methode des Stream-Objekts wie in der folgende C#-Anweisung:  
  
 `Console.Error.WriteLine();`  
  
<a name="Buffer"></a>   
## <a name="screen-buffer-and-console-window"></a>Bildschirmpuffer und Konsolenfenster  
 Zwei eng verwandte Funktionen der Verwaltungskonsole sind Bildschirmpuffer und das Konsolenfenster. Text tatsächlich aus gelesen bzw. in Datenströme, die im Besitz der Konsole geschrieben, aber angezeigt werden, zu lesen oder zu einem Bereich, der im Besitz der Konsole namens Bildschirmpuffer geschrieben werden. Bildschirmpuffer ist ein Attribut der Konsole und ist unterteilt als ein rechteckigen Raster mit Zeilen und Spalten, in dem jede Schnittmenge Raster oder Zeichenzelle, ein Zeichen enthalten. Jedes Zeichen hat eine eigene Vordergrundfarbe, und jede Zeichenzelle verfügt über eine eigene Hintergrundfarbe.  
  
 Bildschirmpuffer wird über einen rechteckigen Bereich wird aufgerufen, das Konsolenfenster angezeigt. Das Konsolenfenster ist ein weiteres Attribut der Konsole. Es ist nicht die Konsole selbst, die ein Betriebssystem-Fenster wird. Das Konsolenfenster ist in Zeilen und Spalten angeordnet sind, ist kleiner als oder gleich der Größe des Bildschirmpuffers und kann auf verschiedene Bereiche des zugrunde liegenden Bildschirmpuffers anzeigen verschoben werden. Wenn Bildschirmpuffer größer als das Konsolenfenster ist, zeigt die Konsole automatisch Bildlaufleisten, damit das Konsolenfenster über Bildschirmpufferbereichs neu positioniert werden kann.  
  
 Ein Cursor zeigt die Bildschirmpufferposition, in denen Text zurzeit gelesen oder geschrieben werden. Der Cursor kann ausgeblendet oder sichtbar gemacht werden, und seine Höhe kann geändert werden. Wenn der Cursor sichtbar ist, wird die Position des Konsolenfensters automatisch verschoben, damit der Cursor immer in der Ansicht befindet.  
  
 Der Ursprung für Zeichenzellenkoordinaten im Bildschirmpuffer ist die linke obere Ecke, und die Positionen des Cursors und im Konsolenfenster werden relativ zum Ursprung gemessen. Verwenden Sie nullbasierten Indizes Positionen an. Geben Sie also die oberste Zeile als Zeile 0, und die am weitesten links stehende Spalte als Spalte 0. Der maximale Wert für die Zeilen- und Spaltenindizes ist <xref:System.Int16.MaxValue?displayProperty=nameWithType>.  
  
<a name="Unicode"></a>   
## <a name="unicode-support-for-the-console"></a>Unicode-Unterstützung für die Konsole  
 Im Allgemeinen wird die Konsole liest die Eingabe und Ausgabe mit der aktuellen Konsole-Codepage, die standardmäßig das Gebietsschema des Systems definiert schreibt. Eine Codepage kann nur eine Teilmenge der verfügbaren Unicode-Zeichen behandelt, damit, wenn Sie versuchen, Anzeige von Zeichen, die nicht durch eine bestimmte Codepage der Konsole zugeordnet sind nicht alle Zeichen angezeigt werden, oder sie genau darstellen können. Dieses Problem wird anhand des folgenden Beispiels veranschaulicht. Sie versucht, die die Kyrillisch von U + 0410, U + 044F-Zeichen in der Konsole anzeigen. Wenn Sie das Beispiel auf einem System ausführen, auf der Konsole Codepage 437 verwendet, wird jedes Zeichen durch ein Fragezeichen (?), ersetzt, da die Zeichen in der Codepage 437 nicht kyrillische Zeichen zugeordnet werden können.  
  
 [!code-csharp[System.Console.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.class/cs/unicode1.cs#1)]
 [!code-vb[System.Console.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.class/vb/unicode1.vb#1)]  
  
 Zusätzlich zur Unterstützung von Codepages, die <xref:System.Console> Klasse unterstützt UTF-8-Codierung mit der <xref:System.Text.UTF8Encoding> Klasse. Ab .NET Framework 4.5, den <xref:System.Console> -Klasse unterstützt auch die UTF-16-Codierung mit der <xref:System.Text.UnicodeEncoding> Klasse. Unicode-Zeichen in der Konsole angezeigt. Sie legen die <xref:System.Console.OutputEncoding%2A> -Eigenschaft entweder <xref:System.Text.UTF8Encoding> oder <xref:System.Text.UnicodeEncoding>.  
  
 Unterstützung für Unicode-Zeichen erfordert den Encoder auf ein bestimmtes Unicode-Zeichen zu erkennen und erfordert außerdem eine Schriftart, die die Symbole, die zum Rendern dieses Zeichens erforderlich ist. Um erfolgreich Unicode-Zeichen in der Konsole angezeigt wird, muss die Schriftart der Konsole auf einem nicht Raster- oder TrueType-Schriftart, z. B. Consolas oder Lucida Console festgelegt werden. Das folgende Beispiel zeigt, wie Sie programmgesteuert die Schriftart aus einem Raster-Schriftart Lucida Console auswählen können.  
  
 [!code-csharp[System.Console.Class.Unsafe#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.class.unsafe/cs/setfont1.cs#3)]
 [!code-vb[System.Console.Class.Unsafe#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.class.unsafe/vb/setfont1.vb#3)]  
  
 TrueType-Schriftarten können jedoch nur eine Teilmenge der Symbole angezeigt. So zeigt z. B. die Schriftart Lucida Console nur 643 von den ungefähr 64.000 verfügbaren Zeichen von U + 0021 bis U + FB02. Um anzuzeigen, die eine besondere Schriftart Zeichen unterstützt, öffnen Sie die **Schriftarten** in der Systemsteuerung, wählen Sie die **finden Sie ein Zeichen** aus, und wählen Sie die Schriftart, deren Character, Sie Set, möchten in der untersuchen** Schriftart** Liste mit den **Zeichentabelle** Fenster.  
  
 Windows verwendet die Verknüpfung von Schriftarten, um Symbole anzuzeigen, die in einer bestimmten Schriftart nicht verfügbar sind. Informationen zum Anzeigen von internationale Zeichensätze-schriftartverknüpfung, finden Sie unter [Globalisierung Schritt für Schritt: Schriftarten](http://go.microsoft.com/fwlink/?LinkId=229111). Verknüpfte Schriftarten sind in den Unterschlüssel HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\FontLink\SystemLink der Registrierung definiert. Jeder Eintrag zugeordneten dieser Unterschlüssel entspricht dem Namen einer Basisklasse Schriftart, und ihr Wert ist ein Zeichenfolgenarray, das die Schriftartdateien definiert und die Schriftarten, die auf der Basis Schriftart verknüpft sind. Jedes Element des Arrays definiert eine verknüpfte Schriftart und nimmt die Form *Schriftart Dateiname*,*Schriftartname*. Im folgende Beispiel wird veranschaulicht, wie Sie programmgesteuert definieren können, eine verknüpfte Schriftart, die mit dem Namen SimSun gefunden in eine Schriftartdatei, die mit dem Namen simsun.ttc, die vereinfachte Han Zeichen anzeigt.  
  
 [!code-csharp[System.Console.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.class/cs/fontlink1.cs#2)]
 [!code-vb[System.Console.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.class/vb/fontlink1.vb#2)]  
  
 Unicode-Unterstützung für die Konsole hat die folgenden Einschränkungen:  
  
-   UTF-32-Codierung wird nicht unterstützt. Die einzige unterstützte Unicode-Codierungen sind UTF-8 und UTF-16, die dargestellt werden. durch die <xref:System.Text.UTF8Encoding> und <xref:System.Text.UnicodeEncoding> -Klassen bzw. Server.  
  
-   Bidirektionale Ausgabe wird nicht unterstützt.  
  
-   Anzeige von Zeichen außerhalb der grundlegenden mehrsprachigen Ebene (d. h. von Ersatzzeichenpaaren) wird nicht unterstützt, auch wenn sie in einer Schriftartdatei verknüpften definiert sind.  
  
-   Anzeige von Zeichen in komplexen Skripts wird nicht unterstützt.  
  
-   Kombinieren von Zeichensequenzen (d. h. Zeichen, die aus einer Basiszeichen und mindestens ein Kombinationszeichen bestehen) werden als separate Zeichen angezeigt. Um diese Einschränkung zu umgehen, können Sie die anzuzeigende Zeichenfolge, durch den Aufruf Normalisieren der <xref:System.String.Normalize%2A?displayProperty=nameWithType> Methode vor der Ausgabe an die Konsole gesendet. Im folgenden Beispiel Sequenz eine Zeichenfolge, enthält das Kombinieren von-Zeichen, U + 0061 ist U + 0308 in der Konsole angezeigt wird, als zwei Zeichen, bevor die Ausgabezeichenfolge normalisiert wird, und als einzelnes Zeichen nach der <xref:System.String.Normalize%2A?displayProperty=nameWithType> -Methode aufgerufen wird.  
  
     [!code-csharp[System.Console.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.class/cs/normalize1.cs#5)]
     [!code-vb[System.Console.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.class/vb/normalize1.vb#5)]  
  
     Beachten Sie, dass Normalisierung einer sinnvollen Lösung ist nur dann, wenn der Unicode-standard für das Zeichen ein vorab zusammengesetzter Formular enthält, die einem bestimmten Combining entspricht, Sequenz Zeichen.  
  
-   Wenn eine Schriftart ein Symbol für einen Codepunkt im Bereich "other" bereitstellt, wird dieses Symbol angezeigt. Da Zeichen im Bereich "other" anwendungsspezifische sind, kann dies jedoch nicht das erwartete Symbol sein.  
  
 Das folgende Beispiel zeigt einen Bereich von Unicode-Zeichen in der Konsole an. Im Beispiel drei Befehlszeilen-Parameter akzeptiert: der Anfang des Bereichs angezeigt, das Ende des Bereichs angezeigt und, ob die aktuelle Konsole Codierung verwendet (`false`) oder UTF-16-Codierung (`true`). Es wird davon ausgegangen, dass mithilfe der Konsole eine TrueType-Schriftart.  
  
 [!code-csharp[System.Console.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.class/cs/example3.cs#4)]
 [!code-vb[System.Console.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.class/vb/example3.vb#4)]  
  
<a name="Operations"></a>   
## <a name="common-operations"></a>Allgemeine Vorgänge  
 Die <xref:System.Console> Klasse enthält die folgenden Methoden für die Konsoleneingabe zu lesen und Schreiben der Ausgabe in der Konsole:  
  
-   Die Überladungen der <xref:System.Console.ReadKey%2A> Methode lesen ein einzelnes Zeichen.  
  
-   Die <xref:System.Console.ReadLine%2A> Methode liest eine ganze Zeile der Eingabe.  
  
-   Die <xref:System.Console.Write%2A> Überladungen der Methode eine Instanz von einem Werttyp, ein Array von Zeichen oder einen Satz von Objekten in eine formatierte oder unformatierte Zeichenfolge konvertieren, und klicken Sie dann diese Zeichenfolge in die Konsole schreiben.  
  
-   Eine parallele Satz von <xref:System.Console.WriteLine%2A> methodenüberladungen, die gleiche als Zeichenfolge, Ausgabe der <xref:System.Console.Write%2A> überlädt, aber auch eine Zeichenfolge für den Zeilenabschluss hinzufügen.  
  
 Die <xref:System.Console> -Klasse enthält auch Methoden und Eigenschaften für die folgenden Vorgänge ausführen:  
  
-   Abrufen oder Festlegen der Größe des Bildschirmpuffers. Die <xref:System.Console.BufferHeight%2A> und <xref:System.Console.BufferWidth%2A> Eigenschaften können Sie abrufen oder Festlegen der Puffer-Höhe und Breite, und die <xref:System.Console.SetBufferSize%2A> Methode können Sie die Größe des Puffers in einen einzigen Methodenaufruf werden soll.  
  
-   Abrufen oder Festlegen der Größe des Konsolenfensters. Die <xref:System.Console.WindowHeight%2A> und <xref:System.Console.WindowWidth%2A> Eigenschaften ermöglichen das Abrufen oder legen Sie die Höhe und Breite, und die <xref:System.Console.SetWindowSize%2A> Methode können Sie die Größe des Fensters in einem einzelnen Methodenaufruf werden soll.  
  
-   Abrufen oder Festlegen der Größe des Cursors. Die <xref:System.Console.CursorSize%2A> Eigenschaft gibt die Höhe des Cursors in einer Zeichenzelle.  
  
-   Abrufen oder Festlegen der Position des Konsolenfensters relativ zum Bildschirmpuffer. Die <xref:System.Console.WindowTop%2A> und <xref:System.Console.WindowLeft%2A> Eigenschaften können Sie die abzurufen oder festzulegen, die oberste Zeile und die am weitesten links stehende Spalte des Bildschirmpuffers, die im Konsolenfenster angezeigt wird und die <xref:System.Console.SetWindowPosition%2A> Methode können Sie diese Werte in einem einzelnen Methodenaufruf werden soll.  
  
-   Abrufen oder festlegen die Position des Cursors durch Abrufen oder Festlegen der <xref:System.Console.CursorTop%2A> und <xref:System.Console.CursorLeft%2A> Eigenschaften, oder legen Sie die Position des Cursors durch Aufrufen der <xref:System.Console.SetCursorPosition%2A> Methode.  
  
-   Verschieben oder Löschen von Daten im Bildschirmpuffer durch Aufrufen der <xref:System.Console.MoveBufferArea%2A> oder <xref:System.Console.Clear%2A> Methode.  
  
-   Abrufen oder Festlegen der Farben für Vordergrund und Hintergrund mithilfe der <xref:System.Console.ForegroundColor%2A> und <xref:System.Console.BackgroundColor%2A> Eigenschaften oder Zurücksetzen die Hintergrund- und Vordergrundfarben, deren Standardfarben durch Aufrufen der <xref:System.Console.ResetColor%2A> Methode.  
  
-   Wiedergeben von den Sound eines Signaltons auf dem Konsolenlautsprecher durch Aufrufen der <xref:System.Console.Beep%2A> Methode.  
  
<a name="Core"></a>   
## <a name="includenetcoreincludesnet-core-mdmd-notes"></a>[!INCLUDE[net_core](~/includes/net-core-md.md)] Hinweise  
 In .NET Framework auf dem Desktop die <xref:System.Console> Klasse verwendet die Codierung zurückgegebenes `GetConsoleCP` und `GetConsoleOutputCP`, die in der Regel wird eine Codepage-Codierung. Beispielsweise ist Code, auf Systemen, die mit der Kultur Englisch (Vereinigte Staaten), Codepage 437 ist die Codierung, die standardmäßig verwendet wird. Allerdings [!INCLUDE[net_core](~/includes/net-core-md.md)] kann nur eine beschränkte Teilmenge dieser Codierungen verfügbar machen. Wenn dies der Fall ist <xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType> als die standardcodierung für die Konsole verwendet wird.  
  
 Wenn Ihre app bestimmte codepagecodierungen abhängig ist, können Sie weiterhin sie verfügbar machen mithilfe der folgenden Schritte *vor* rufen Sie eine <xref:System.Console> Methoden:  
  
1.  Fügen Sie einen Verweis auf die Assembly System.Text.Encoding.CodePages.dll zu Ihrem Projekt ein.  
  
2.  Abrufen der <xref:System.Text.EncodingProvider> -Objekt aus der <xref:System.Text.CodePagesEncodingProvider.Instance%2A?displayProperty=nameWithType> Eigenschaft.  
  
3.  Übergeben der <xref:System.Text.EncodingProvider> -Objekt an die <xref:System.Text.Encoding.RegisterProvider%2A?displayProperty=nameWithType> Methode zum Erstellen von zusätzlichen Codierungen, die von der Codierung verfügbaren Anbieter unterstützt.  
  
 Die <xref:System.Console> Klasse automatisch verwendet dann das System standardcodierung anstatt UTF8, vorausgesetzt, dass Sie die codierungsanbieter registriert haben, bevor er einen <xref:System.Console> Ausgabemethoden.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie Daten aus lesen und Schreiben von Daten in die standardmäßigen Eingabe- und Ausgabestreams. Beachten Sie, dass diese Streams mit umgeleitet werden, können die <xref:System.Console.SetIn%2A> und <xref:System.Console.SetOut%2A> Methoden.  
  
 [!code-cpp[Classic Console Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Console Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Console Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Console Example/CS/source.cs#1)]
 [!code-vb[Classic Console Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Console Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Dieser Typ ist threadsicher.</threadsafe>
  </Docs>
  <Members>
    <Member MemberName="BackgroundColor">
      <MemberSignature Language="C#" Value="public static ConsoleColor BackgroundColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.ConsoleColor BackgroundColor" />
      <MemberSignature Language="DocId" Value="P:System.Console.BackgroundColor" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property BackgroundColor As ConsoleColor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property ConsoleColor BackgroundColor { ConsoleColor get(); void set(ConsoleColor value); };" />
      <MemberSignature Language="F#" Value="member this.BackgroundColor : ConsoleColor with get, set" Usage="System.Console.BackgroundColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ConsoleColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the background color of the console.</summary>
        <value>Ein Wert, der die Hintergrundfarbe der Konsole, d. h. die hinter jedem Zeichen angezeigte Farbe angibt. Die Standardeinstellung ist schwarz.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Änderung an der <xref:System.Console.BackgroundColor%2A> Eigenschaft wirkt sich auf die Ausgabe nur erfolgt, die nach dem Ändern der Hintergrundfarbe für einzelne Zeichenzellen geschrieben wird. Um die Farbe des Hintergrunds des Konsolenfensters als Ganzes zu ändern, legen die <xref:System.Console.BackgroundColor%2A> -Eigenschaft, und rufen die <xref:System.Console.Clear%2A> Methode. Dies wird im folgenden Beispiel veranschaulicht.  
  
 [!code-csharp[System.Console.BackgroundColor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.backgroundcolor/cs/backgroundcolor1.cs#1)]
 [!code-vb[System.Console.BackgroundColor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.backgroundcolor/vb/backgroundcolor1.vb#1)]  
  
 Gibt ein Get-Vorgang für eine Windows-basierte Anwendung, in dem eine Konsole nicht vorhanden ist, <xref:System.ConsoleColor.Black?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Im folgende Beispiel speichert die Werte der <xref:System.ConsoleColor> Enumeration in ein Array und speichert die aktuellen Werte von der <xref:System.Console.BackgroundColor%2A> und <xref:System.Console.ForegroundColor%2A> Eigenschaften an Variablen. Anschließend wird die Vordergrundfarbe für jede Farbe in der <xref:System.ConsoleColor> Enumeration, mit der Ausnahme, die Farbe, die mit den aktuellen Hintergrund übereinstimmt, und die Farbe des Hintergrunds auf jede Farbe in ändert der <xref:System.ConsoleColor> Enumeration, außer auf die Farbe, entspricht die aktuelle Vordergrundfarbe. (Wenn die Vordergrundfarbe für die Farbe des Hintergrunds identisch ist, der Text nicht sichtbar ist.) Zum Schluss ruft es die <xref:System.Console.ResetColor%2A> Verfahren zum Wiederherstellen der ursprünglichen konsolenfarben.  
  
 [!code-csharp[System.ConsoleColor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.consolecolor/cs/foregroundcolor3.cs#1)]
 [!code-vb[System.ConsoleColor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.consolecolor/vb/foregroundcolor3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The color specified in a set operation is not a valid member of <see cref="T:System.ConsoleColor" />.</exception>
        <exception cref="T:System.Security.SecurityException">The user does not have permission to perform this action.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Beep">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Plays the sound of a beep through the console speaker.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Beep">
      <MemberSignature Language="C#" Value="public static void Beep ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Beep() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Beep" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Beep ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Beep();" />
      <MemberSignature Language="F#" Value="static member Beep : unit -&gt; unit" Usage="System.Console.Beep " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Plays the sound of a beep through the console speaker.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Standardmäßig wird der Signalton für eine Dauer von 200 Millisekunden bei einer Häufigkeit von 800 Hertz wiedergegeben.  
  
> [!NOTE]
>  Die <xref:System.Console.Beep%2A> Methode wird für die 64-Bit-Editionen von Windows Vista und Windows XP nicht unterstützt.  
  
 <xref:System.Console.Beep%2A> umschließt einen Aufruf an eine Windows [Beep-Funktion](https://msdn.microsoft.com/library/windows/desktop/ms679277.aspx). Ob <xref:System.Console.Beep%2A> erzeugt einen Sound in Windows-Versionen vor Windows 7 auf dem Vorhandensein einer 8254 programmable Interval Timer-Chip abhängig ist. Ab Windows 7, abhängt auf dem Standardgerät sound.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.Console.Beep%2A> Methode. Im Beispiel wird eine Zahl von 1 bis 9 als Befehlszeilenargument akzeptiert und wird der Signalton entsprechend oft wiedergegeben.  
  
 [!code-cpp[console.beep#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.beep/CPP/beep.cpp#1)]
 [!code-csharp[console.beep#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.beep/CS/beep.cs#1)]
 [!code-vb[console.beep#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.beep/VB/beep.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.HostProtectionException">This method was executed on a server, such as SQL Server, that does not permit access to a user interface.</exception>
      </Docs>
    </Member>
    <Member MemberName="Beep">
      <MemberSignature Language="C#" Value="public static void Beep (int frequency, int duration);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Beep(int32 frequency, int32 duration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Beep(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Beep (frequency As Integer, duration As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Beep(int frequency, int duration);" />
      <MemberSignature Language="F#" Value="static member Beep : int * int -&gt; unit" Usage="System.Console.Beep (frequency, duration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="frequency" Type="System.Int32" />
        <Parameter Name="duration" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="frequency">The frequency of the beep, ranging from 37 to 32767 hertz.</param>
        <param name="duration">The duration of the beep measured in milliseconds.</param>
        <summary>Plays the sound of a beep of a specified frequency and duration through the console speaker.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Console.Beep%2A> umschließt einen Aufruf an eine Windows [Beep-Funktion](https://msdn.microsoft.com/library/windows/desktop/ms679277.aspx). Ob <xref:System.Console.Beep%2A> erzeugt einen Sound in Windows-Versionen vor Windows 7 auf dem Vorhandensein einer 8254 programmable Interval Timer-Chip abhängig ist. Ab Windows 7, abhängt auf dem Standardgerät sound.  
  
> [!NOTE]
>  Die <xref:System.Console.Beep%2A> Methode wird für die 64-Bit-Editionen von Windows Vista und Windows XP nicht unterstützt.  
  
   
  
## Examples  
 Dieses Beispiel zeigt die <xref:System.Console.Beep%2A> Methode durch das erste Paar Notizen eines Songs auf dem Konsolenlautsprecher wiedergeben.  
  
 [!code-cpp[console.beep2#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.beep2/CPP/b2.cpp#1)]
 [!code-csharp[console.beep2#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.beep2/CS/b2.cs#1)]
 [!code-vb[console.beep2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.beep2/VB/b2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="frequency" /> is less than 37 or more than 32767 hertz.  -or-  <paramref name="duration" /> is less than or equal to zero.</exception>
        <exception cref="T:System.Security.HostProtectionException">This method was executed on a server, such as SQL Server, that does not permit access to the console.</exception>
      </Docs>
    </Member>
    <Member MemberName="BufferHeight">
      <MemberSignature Language="C#" Value="public static int BufferHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 BufferHeight" />
      <MemberSignature Language="DocId" Value="P:System.Console.BufferHeight" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property BufferHeight As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int BufferHeight { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.BufferHeight : int with get, set" Usage="System.Console.BufferHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the height of the buffer area.</summary>
        <value>Die aktuelle Höhe des Pufferbereichs in Zeilen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft definiert die Anzahl der Zeilen (oder Zeilen) gespeichert, die im Puffer, der von einem Modus Konsolenfenster zugegriffen wird. Im Gegensatz dazu die <xref:System.Console.WindowHeight%2A> Eigenschaft definiert die Anzahl der Zeilen, die tatsächlich zu einem bestimmten Zeitpunkt im Konsolenfenster angezeigt werden. Überschreitet die Anzahl der tatsächlich in den Puffer geschriebenen Zeilen die Anzahl der Zeilen, die definiert, indem Sie die <xref:System.Console.WindowHeight%2A> -Eigenschaft, können werden ein Bildlauf vertikal, sodass er eine zusammenhängende Anzahl von Zeilen angezeigt, die gleich sind die <xref:System.Console.WindowHeight%2A> befinden sich die Eigenschaft und sind eine beliebige Stelle im Puffer.  
  
 Wenn ein Set-Vorgang auf den Wert von verringert die <xref:System.Console.BufferHeight%2A> -Eigenschaft, die obersten Zeilen entfernt werden. Z. B. Zeilen ein, wenn die Anzahl der Zeilen von 300 auf 250 reduziert wird und Zeilen 0 bis 49 werden entfernt: 50 bis 299 werden die vorhandenen Zeilen 0 bis 249.  
  
   
  
## Examples  
 Dieses Beispiel zeigt die <xref:System.Console.BufferHeight%2A> und <xref:System.Console.BufferWidth%2A> Eigenschaften. Im Beispiel wird gemeldet, die Dimensionen eines Betriebssystem-Fensters auf 300 Zeilen und Spalten 85 Puffergröße festgelegt wird.  
  
 [!code-cpp[console.bufferHW#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.bufferHW/CPP/hw.cpp#1)]
 [!code-csharp[console.bufferHW#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.bufferHW/CS/hw.cs#1)]
 [!code-vb[console.bufferHW#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.bufferHW/VB/hw.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value in a set operation is less than or equal to zero.  -or-  The value in a set operation is greater than or equal to <see cref="F:System.Int16.MaxValue" />.  -or-  The value in a set operation is less than <see cref="P:System.Console.WindowTop" /> + <see cref="P:System.Console.WindowHeight" />.</exception>
        <exception cref="T:System.Security.SecurityException">The user does not have permission to perform this action.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="BufferWidth">
      <MemberSignature Language="C#" Value="public static int BufferWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 BufferWidth" />
      <MemberSignature Language="DocId" Value="P:System.Console.BufferWidth" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property BufferWidth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int BufferWidth { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.BufferWidth : int with get, set" Usage="System.Console.BufferWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the width of the buffer area.</summary>
        <value>Die aktuelle Breite des Pufferbereichs in Spalten.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn ein Set-Vorgang auf den Wert von verringert die <xref:System.Console.BufferWidth%2A> -Eigenschaft, die äußersten rechten Spalten werden entfernt. Wenn die Anzahl der Spalten von 80 auf 60 reduziert wird, werden beispielsweise Spalten 60 und 79 jeder Zeile entfernt.  
  
   
  
## Examples  
 Dieses Beispiel zeigt die <xref:System.Console.BufferHeight%2A> und <xref:System.Console.BufferWidth%2A> Eigenschaften. Im Beispiel wird gemeldet, die Dimensionen eines Betriebssystem-Fensters auf 300 Zeilen und Spalten 85 Puffergröße festgelegt wird.  
  
 [!code-cpp[console.bufferHW#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.bufferHW/CPP/hw.cpp#1)]
 [!code-csharp[console.bufferHW#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.bufferHW/CS/hw.cs#1)]
 [!code-vb[console.bufferHW#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.bufferHW/VB/hw.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value in a set operation is less than or equal to zero.  -or-  The value in a set operation is greater than or equal to <see cref="F:System.Int16.MaxValue" />.  -or-  The value in a set operation is less than <see cref="P:System.Console.WindowLeft" /> + <see cref="P:System.Console.WindowWidth" />.</exception>
        <exception cref="T:System.Security.SecurityException">The user does not have permission to perform this action.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CancelKeyPress">
      <MemberSignature Language="C#" Value="public static event ConsoleCancelEventHandler CancelKeyPress;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ConsoleCancelEventHandler CancelKeyPress" />
      <MemberSignature Language="DocId" Value="E:System.Console.CancelKeyPress" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event CancelKeyPress As ConsoleCancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event ConsoleCancelEventHandler ^ CancelKeyPress;" />
      <MemberSignature Language="F#" Value="member this.CancelKeyPress : ConsoleCancelEventHandler " Usage="member this.CancelKeyPress : System.ConsoleCancelEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ConsoleCancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the <see cref="F:System.ConsoleModifiers.Control" /> modifier key (Ctrl) and either the <see cref="F:System.ConsoleKey.C" /> console key (C) or the Break key are pressed simultaneously (Ctrl+C or Ctrl+Break).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis dient in Verbindung mit <xref:System.ConsoleCancelEventHandler?displayProperty=nameWithType> und <xref:System.ConsoleCancelEventArgs?displayProperty=nameWithType>. Die <xref:System.Console.CancelKeyPress> -Ereignis können Sie eine Konsolenanwendung, die das STRG + C-Signal abfangen, damit der Ereignishandler können Sie entscheiden, ob fortgesetzt oder beendet. Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).  
  
 Wenn der Benutzer STRG + C oder STRG + UNTBR, drückt die <xref:System.Console.CancelKeyPress> Ereignis wird ausgelöst, und die Anwendung <xref:System.ConsoleCancelEventHandler> -Ereignishandler ausgeführt wird. Der Ereignishandler übergeben wird ein <xref:System.ConsoleCancelEventArgs> Objekt, das zwei nützliche Eigenschaften verfügt:  
  
-   <xref:System.ConsoleCancelEventArgs.SpecialKey%2A>, womit Sie bestimmen, ob der Handler aufgerufen wurde, als Ergebnis der Benutzer durch Drücken von STRG + C (der Eigenschaftswert ist <xref:System.ConsoleSpecialKey.ControlC?displayProperty=nameWithType>) oder STRG + UNTBR (der Eigenschaftswert ist <xref:System.ConsoleSpecialKey.ControlBreak?displayProperty=nameWithType>).  
  
-   <xref:System.ConsoleCancelEventArgs.Cancel%2A>, womit Sie bestimmen, wie für Ihre Anwendung sollte auf die Benutzer reagieren drücken STRG + C oder STRG + UNTBR. Wird standardmäßig die <xref:System.ConsoleCancelEventArgs.Cancel%2A> Eigenschaft ist `false`, die Ursachen programmausführung zu beenden, wenn der Ereignishandler beendet wird. Ändern die Eigenschaft auf `true` gibt an, dass die Anwendung weiterhin ausgeführt werden soll.  
  
> [!TIP]
>  Wenn Ihre Anwendung einfache Anforderungen hat, können Sie mithilfe der <xref:System.Console.TreatControlCAsInput%2A> Eigenschaft anstelle dieses Ereignis. Durch Festlegen dieser Eigenschaft auf `false`, können Sie sicherstellen, dass Ihre Anwendung immer beendet, wenn der Benutzer STRG + C drückt. Durch Festlegen auf `true`, können Sie sicherstellen, dass die Anwendung nicht durch Drücken von STRG + C beendet wird.  
  
 Der Ereignishandler für dieses Ereignis wird über einen Threadpoolthread ausgeführt.  
  
   
  
## Examples  
 Im folgende Beispiel wird veranschaulicht, wie die <xref:System.Console.CancelKeyPress> Ereignis verwendet wird. Der Lesevorgang wird unterbrochen, wenn Sie STRG + C drücken, und die `myHandler` -Ereignishandler wird aufgerufen. Bei der Eingabe an den Ereignishandler der <xref:System.ConsoleCancelEventArgs.Cancel%2A?displayProperty=nameWithType> Eigenschaft ist `false`, d. h., die der aktuelle Vorgang beendet wird, wenn der Ereignishandler beendet wird. Der Ereignishandler wird jedoch die <xref:System.ConsoleCancelEventArgs.Cancel%2A?displayProperty=nameWithType> Eigenschaft `true`, welche bedeutet, dass der Prozess nicht beendet, und der Lesevorgang wird fortgesetzt.  
  
 [!code-cpp[console.cancelkeypress#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cancelkeypress/cpp/ckp.cpp#1)]
 [!code-csharp[console.cancelkeypress#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cancelkeypress/cs/ckp.cs#1)]
 [!code-vb[console.cancelkeypress#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cancelkeypress/vb/ckp.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="T:System.ConsoleCancelEventArgs" />
        <altmember cref="T:System.ConsoleCancelEventHandler" />
        <altmember cref="P:System.Console.TreatControlCAsInput" />
      </Docs>
    </Member>
    <Member MemberName="CapsLock">
      <MemberSignature Language="C#" Value="public static bool CapsLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CapsLock" />
      <MemberSignature Language="DocId" Value="P:System.Console.CapsLock" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CapsLock As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CapsLock { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CapsLock : bool" Usage="System.Console.CapsLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the CAPS LOCK keyboard toggle is turned on or turned off.</summary>
        <value>
          <see langword="true" />, wenn die FESTSTELLTASTE aktiviert ist, <see langword="false" />, wenn die FESTSTELLTASTE deaktiviert ist.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public static void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Clear();" />
      <MemberSignature Language="F#" Value="static member Clear : unit -&gt; unit" Usage="System.Console.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Clears the console buffer and corresponding console window of display information.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mithilfe der <xref:System.Console.Clear%2A> Methode entspricht dem Aufrufen der MS-DOS- `cls` Befehl im Eingabeaufforderungsfenster. Wenn die <xref:System.Console.Clear%2A> Methode wird aufgerufen, der Cursor automatisch auf der linken oberen Ecke des Fensters und den Inhalt des Bildschirmpuffers in der aktuellen Vordergrund-und Hintergrundfarben mit Leerzeichen festgelegt werden.  
  
> [!NOTE]
>  Beim Aufrufen der <xref:System.Console.Clear%2A> löst der Methode, wenn Sie eine Konsolenanwendung Ausgabe in eine Datei umgeleitet wird eine <xref:System.IO.IOException>. Um dies zu verhindern, umschließen Sie immer einen Aufruf der <xref:System.Console.Clear%2A> Methode in einer `try`...`catch` Block.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Console.Clear%2A> Methode, um die Konsole zu löschen, bevor es eine Schleife führt fordert den Benutzer, um eine Farbe Vordergrund- und Hintergrundfarben auszuwählen und eine anzuzeigende Zeichenfolge eingeben. Die Konsole ursprünglichen Vordergrund- und Hintergrundfarben werden wiederhergestellt, wenn der Benutzer entscheidet sich nicht um das Programm zu beenden, und die <xref:System.Console.Clear%2A> Methode aufgerufen wird, erneut, bevor die Schleife erneut ausgeführt.  
  
 [!code-csharp[System.Console.Clear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.clear/cs/clear1.cs#1)]
 [!code-vb[System.Console.Clear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.clear/vb/clear1.vb#1)]  
  
 Das Beispiel basiert auf einer `GetKeyPress` Methode, um die Auswahl einer Farbe Vordergrund- und Hintergrundfarben des Benutzers zu überprüfen.  
  
 Dieses Beispiel zeigt die <xref:System.Console.CursorLeft%2A> und <xref:System.Console.CursorTop%2A> Eigenschaften, und die <xref:System.Console.SetCursorPosition%2A> und <xref:System.Console.Clear%2A> Methoden. Im Beispiel wird der Cursor, der bestimmt, wo der nächste Schreibvorgang erfolgt ein 5 Zeichen durch eine Kombination von 5 Zeichen-Rechteck gezeichnet werden soll, "+", "&#124;", und "-" Zeichenfolgen. Beachten Sie, dass das Rechteck mit weniger Schritte, die mit einer Kombination aus anderen Zeichenfolgen werden konnte.  
  
 [!code-cpp[console.cursorLTS#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cursorLTS/CPP/lts.cpp#1)]
 [!code-csharp[console.cursorLTS#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cursorLTS/CS/lts.cs#1)]
 [!code-vb[console.cursorLTS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cursorLTS/VB/lts.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      </Docs>
    </Member>
    <Member MemberName="CursorLeft">
      <MemberSignature Language="C#" Value="public static int CursorLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CursorLeft" />
      <MemberSignature Language="DocId" Value="P:System.Console.CursorLeft" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CursorLeft As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int CursorLeft { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CursorLeft : int with get, set" Usage="System.Console.CursorLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the column position of the cursor within the buffer area.</summary>
        <value>Die aktuelle Position des Cursors in Spalten.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Dieses Beispiel zeigt die <xref:System.Console.CursorLeft%2A> und <xref:System.Console.CursorTop%2A> Eigenschaften, und die <xref:System.Console.SetCursorPosition%2A> und <xref:System.Console.Clear%2A> Methoden. Im Beispiel wird der Cursor, der bestimmt, wo der nächste Schreibvorgang erfolgt ein 5 Zeichen durch eine Kombination von 5 Zeichen-Rechteck gezeichnet werden soll, "+", "&#124;", und "-" Zeichenfolgen. Beachten Sie, dass das Rechteck mit weniger Schritte, die mit einer Kombination aus anderen Zeichenfolgen werden konnte.  
  
 [!code-cpp[console.cursorLTS#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cursorLTS/CPP/lts.cpp#1)]
 [!code-csharp[console.cursorLTS#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cursorLTS/CS/lts.cs#1)]
 [!code-vb[console.cursorLTS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cursorLTS/VB/lts.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value in a set operation is less than zero.  -or-  The value in a set operation is greater than or equal to <see cref="P:System.Console.BufferWidth" />.</exception>
        <exception cref="T:System.Security.SecurityException">The user does not have permission to perform this action.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CursorSize">
      <MemberSignature Language="C#" Value="public static int CursorSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CursorSize" />
      <MemberSignature Language="DocId" Value="P:System.Console.CursorSize" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CursorSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int CursorSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CursorSize : int with get, set" Usage="System.Console.CursorSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the height of the cursor within a character cell.</summary>
        <value>Die Größe des Cursors in Prozent der Höhe einer Zeichenzelle. Der Eigenschaftswert liegt zwischen 1 und 100.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Cursor kann unterschiedlich dargestellt werden, von einer horizontalen Linie am unteren Rand der Zelle im Bereich, wenn der Eigenschaftswert 1 ist, um die Zelle vollständig ausfüllen, wenn der Wert der Eigenschaft "100".  
  
   
  
## Examples  
 Dieses Beispiel zeigt die <xref:System.Console.CursorSize%2A> Eigenschaft. Im Beispiel wird die Größe des Cursors jedes Mal alle Konsolentaste gedrückt wird, und stellt den Cursor auf seine ursprüngliche Größe vor der Beendigung erhöht.  
  
 [!code-cpp[console.cursorsize#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cursorsize/CPP/csize.cpp#1)]
 [!code-csharp[console.cursorsize#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cursorsize/CS/csize.cs#1)]
 [!code-vb[console.cursorsize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cursorsize/VB/csize.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value specified in a set operation is less than 1 or greater than 100.</exception>
        <exception cref="T:System.Security.SecurityException">The user does not have permission to perform this action.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CursorTop">
      <MemberSignature Language="C#" Value="public static int CursorTop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CursorTop" />
      <MemberSignature Language="DocId" Value="P:System.Console.CursorTop" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CursorTop As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int CursorTop { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CursorTop : int with get, set" Usage="System.Console.CursorTop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the row position of the cursor within the buffer area.</summary>
        <value>Die aktuelle Position des Cursors in Zeilen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Dieses Beispiel zeigt die <xref:System.Console.CursorLeft%2A> und <xref:System.Console.CursorTop%2A> Eigenschaften, und die <xref:System.Console.SetCursorPosition%2A> und <xref:System.Console.Clear%2A> Methoden. Im Beispiel wird der Cursor, der bestimmt, wo der nächste Schreibvorgang erfolgt ein 5 Zeichen durch eine Kombination von 5 Zeichen-Rechteck gezeichnet werden soll, "+", "&#124;", und "-" Zeichenfolgen. Beachten Sie, dass das Rechteck mit weniger Schritte, die mit einer Kombination aus anderen Zeichenfolgen werden konnte.  
  
 [!code-cpp[console.cursorLTS#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cursorLTS/CPP/lts.cpp#1)]
 [!code-csharp[console.cursorLTS#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cursorLTS/CS/lts.cs#1)]
 [!code-vb[console.cursorLTS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cursorLTS/VB/lts.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value in a set operation is less than zero.  -or-  The value in a set operation is greater than or equal to <see cref="P:System.Console.BufferHeight" />.</exception>
        <exception cref="T:System.Security.SecurityException">The user does not have permission to perform this action.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CursorVisible">
      <MemberSignature Language="C#" Value="public static bool CursorVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CursorVisible" />
      <MemberSignature Language="DocId" Value="P:System.Console.CursorVisible" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CursorVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CursorVisible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CursorVisible : bool with get, set" Usage="System.Console.CursorVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the cursor is visible.</summary>
        <value>
          <see langword="true" />, wenn der Cursor sichtbar ist, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Dieses Beispiel zeigt die <xref:System.Console.CursorVisible%2A> Eigenschaft. Im Beispiel wird den Cursor sichtbar, wenn die erste Spalte der Eingabe ein "+"-Zeichen ist oder nicht sichtbar, wenn die Eingabe ist ein "-" Zeichen.  
  
 [!code-cpp[console.cursorvis#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cursorvis/CPP/vis.cpp#1)]
 [!code-csharp[console.cursorvis#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cursorvis/CS/vis.cs#1)]
 [!code-vb[console.cursorvis#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cursorvis/VB/vis.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">The user does not have permission to perform this action.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Error">
      <MemberSignature Language="C#" Value="public static System.IO.TextWriter Error { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.IO.TextWriter Error" />
      <MemberSignature Language="DocId" Value="P:System.Console.Error" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Error As TextWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::IO::TextWriter ^ Error { System::IO::TextWriter ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Error : System.IO.TextWriter" Usage="System.Console.Error" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the standard error output stream.</summary>
        <value>Ein <see cref="T:System.IO.TextWriter" />, der den Standard-Fehlerausgabestream darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Standardfehlerstream wird an die Konsole standardmäßig festgelegt. Es kann festgelegt werden, in einen anderen Stream mit der <xref:System.Console.SetError%2A> Methode. Nach der Standardfehlerstream umgeleitet wird, kann es durch den Aufruf Synchronisierungsdomäne die <xref:System.Console.OpenStandardError%2A> Methode.  
  
 Der Standardfehler in konsolenanwendungen, deren Informationsausgabe häufig in eine Datei umgeleitet wird, Streamen über die <xref:System.Console.Error%2A> Eigenschaft kann verwendet werden, um die Informationen in der Konsole angezeigt, auch wenn die Ausgabe umgeleitet wird. Das folgende Beispiel zeigt Produkttabellen für 10 Zahlen ein, jeweils beginnend mit 1. Nach jedem Satz von 10 Zahlen ein die <xref:System.Console.Error%2A> Eigenschaft wird verwendet, um den Benutzer auffordern, ob den nächsten Satz angezeigt. Wenn die Standardausgabe in eine Datei umgeleitet wird, wird der Benutzer weiterhin gebeten, ob die Routine den nächsten Satz von Produkten generiert werden sollen.  
  
 [!code-csharp[System.Console.Error#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.error/cs/error1.cs#1)]
 [!code-vb[System.Console.Error#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.error/vb/error1.vb#1)]  
  
   
  
## Examples  
 Das folgende Beispiel ist ein Befehlszeilenprogramm, mit dem Namen ExpandTabs, das Tabstoppzeichen in einer Textdatei mit vier Leerzeichen, den Wert ersetzt den `tabSize` Variable. Er leitet die Standardeingabe und Ausgabe per Streaming auf Dateien, verwendet jedoch die <xref:System.Console.Error%2A> Eigenschaft, um den Standardfehlerstream in die Konsole geschrieben. Es kann über die Befehlszeile durch Angabe der Name der Datei, die Registerkarte "-Zeichen enthält und den Namen der Ausgabedatei gestartet werden.  
  
 [!code-cpp[Console-EXPANDTABSEX#1](~/samples/snippets/cpp/VS_Snippets_CLR/Console-EXPANDTABSEX/CPP/expandtabsex.cpp#1)]
 [!code-csharp[Console-EXPANDTABSEX#1](~/samples/snippets/csharp/VS_Snippets_CLR/Console-EXPANDTABSEX/CS/expandtabsex.cs#1)]
 [!code-vb[Console-EXPANDTABSEX#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Console-EXPANDTABSEX/VB/expandtabsex.vb#1)]  
  
 Im folgende Beispiel wird ein einfacher Text-Datei-Viewer, der den Inhalt von einem oder mehreren Textdateien auf der Konsole ausgibt. Wenn keine Befehlszeilenargumente vorhanden sind oder wenn keine Dateien als Befehlszeilenargumente übergeben nicht vorhanden sind, wird im Beispiel wird die <xref:System.Console.SetError%2A> Methodenaufrufe Fehlerinformationen in eine Datei umleiten der <xref:System.Console.OpenStandardError%2A> Methode beim erneuten der Standardfehler Stream und gibt an, dass die Fehlerinformationen in eine Datei geschrieben wurde.  
  
 [!code-csharp[System.Console.OpenStandardError#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.openstandarderror/cs/viewtextfile.cs#1)]
 [!code-vb[System.Console.OpenStandardError#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.openstandarderror/vb/viewtextfile.vb#1)]  
  
 Beachten Sie, dass die <xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=nameWithType> -Eigenschaftensatz auf `true` vor dem erneuten fehlerdatenstroms der. Dadurch wird sichergestellt, dass die Ausgabe wird sofort an die Konsole gesendet und nicht als gepuffert.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Console.In" />
        <altmember cref="P:System.Console.Out" />
        <altmember cref="P:System.Console.IsErrorRedirected" />
        <altmember cref="M:System.Console.SetError(System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="ForegroundColor">
      <MemberSignature Language="C#" Value="public static ConsoleColor ForegroundColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.ConsoleColor ForegroundColor" />
      <MemberSignature Language="DocId" Value="P:System.Console.ForegroundColor" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property ForegroundColor As ConsoleColor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property ConsoleColor ForegroundColor { ConsoleColor get(); void set(ConsoleColor value); };" />
      <MemberSignature Language="F#" Value="member this.ForegroundColor : ConsoleColor with get, set" Usage="System.Console.ForegroundColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ConsoleColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the foreground color of the console.</summary>
        <value>Eine <see cref="T:System.ConsoleColor" />, die die Vordergrundfarbe der Konsole angibt, d. h. die Farbe, in der alle Zeichen angezeigt werden. Die Standardeinstellung ist grau.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gibt ein Get-Vorgang für eine Windows-basierte Anwendung, in dem eine Konsole nicht vorhanden ist, <xref:System.ConsoleColor.Gray>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird überprüft, ob die Hintergrundfarbe der Konsole ist schwarz und, wenn dies der Fall, wird die Farbe des Hintergrunds auf Rot und die Vordergrundfarbe auf Schwarz geändert.  
  
 [!code-csharp[System.ConsoleColor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.consolecolor/cs/Example2.cs#2)] 
 [!code-vb[System.ConsoleColor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.consolecolor/vb/Example2.vb#2)]  
  
 Im folgende Beispiel speichert die Werte der <xref:System.ConsoleColor> Enumeration in ein Array und speichert die aktuellen Werte von der <xref:System.Console.BackgroundColor%2A> und <xref:System.Console.ForegroundColor%2A> Eigenschaften an Variablen. Anschließend wird die Vordergrundfarbe für jede Farbe in der <xref:System.ConsoleColor> Enumeration, mit der Ausnahme, die Farbe, die mit den aktuellen Hintergrund übereinstimmt, und die Farbe des Hintergrunds auf jede Farbe in ändert der <xref:System.ConsoleColor> Enumeration, außer auf die Farbe, entspricht die aktuelle Vordergrundfarbe. (Wenn die Vordergrundfarbe für die Farbe des Hintergrunds identisch ist, der Text nicht sichtbar ist.) Zum Schluss ruft es die <xref:System.Console.ResetColor%2A> Verfahren zum Wiederherstellen der ursprünglichen konsolenfarben.  
  
 [!code-csharp[System.ConsoleColor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.consolecolor/cs/foregroundcolor3.cs#1)]
 [!code-vb[System.ConsoleColor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.consolecolor/vb/foregroundcolor3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The color specified in a set operation is not a valid member of <see cref="T:System.ConsoleColor" />.</exception>
        <exception cref="T:System.Security.SecurityException">The user does not have permission to perform this action.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="In">
      <MemberSignature Language="C#" Value="public static System.IO.TextReader In { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.IO.TextReader In" />
      <MemberSignature Language="DocId" Value="P:System.Console.In" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property In As TextReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::IO::TextReader ^ In { System::IO::TextReader ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.In : System.IO.TextReader" Usage="System.Console.In" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.TextReader</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the standard input stream.</summary>
        <value>Ein <see cref="T:System.IO.TextReader" />, der den Standardeingabestream darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft ist standardmäßig auf den Standardeingabestream festgelegt. Diese Eigenschaft kann festgelegt werden, in einen anderen Stream mit der <xref:System.Console.SetIn%2A> Methode.  
  
 Lesevorgänge auf dem Standardeingabestream synchron ausgeführt. D. h., blockieren sie bis der angegebene Lesevorgang abgeschlossen ist. Dies gilt auch, wenn eine asynchrone Methode, wie z. B. <xref:System.IO.TextReader.ReadLineAsync%2A>, aufgerufen wird, auf die <xref:System.IO.TextReader> zurückgegebenes Objekt die <xref:System.Console.In%2A> Eigenschaft.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Verwendung der `In` Eigenschaft.  
  
 [!code-cpp[consolein#1](~/samples/snippets/cpp/VS_Snippets_CLR/consolein/CPP/consolein.cpp#1)]
 [!code-csharp[consolein#1](~/samples/snippets/csharp/VS_Snippets_CLR/consolein/CS/consolein.cs#1)]
 [!code-vb[consolein#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/consolein/VB/consolein.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Console.OpenStandardInput" />
        <altmember cref="P:System.Console.IsInputRedirected" />
        <altmember cref="P:System.Console.Error" />
        <altmember cref="P:System.Console.Out" />
        <altmember cref="M:System.Console.SetIn(System.IO.TextReader)" />
      </Docs>
    </Member>
    <Member MemberName="InputEncoding">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding InputEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Encoding InputEncoding" />
      <MemberSignature Language="DocId" Value="P:System.Console.InputEncoding" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property InputEncoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::Encoding ^ InputEncoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InputEncoding : System.Text.Encoding with get, set" Usage="System.Console.InputEncoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the encoding the console uses to read input.</summary>
        <value>Die Codierung, die verwendet wird, um die Konsoleneingabe zu lesen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Konsole verwendet, die Eingabe, die Codierung, die um Tastatureingaben in eine entsprechende Zeichen zu übersetzen. Eingabecodierung umfasst eine Codepage, die einzelne Zeichen 256 Zeichen bestehenden Codes für Tastatur zuordnet. Zu verschiedenen Codepages gehören verschiedene spezielle Zeichen, die normalerweise für eine Sprache oder eine Gruppe von Sprachen angepasst sind.  
  
 Beginnend mit der [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], ein Abrufvorgang Eigenschaft möglicherweise einen zwischengespeicherten Wert anstelle der Konsole aktuellen eingabecodierung zurück. Dies kann auftreten, wenn der Wert des der <xref:System.Console.InputEncoding%2A> Eigenschaft andere Zuweisung zu Weise geändert wird die <xref:System.Console.InputEncoding%2A> Eigenschaft, z. B. das Aufrufen der Windows `SetConsoleCP` Funktion oder mithilfe der `chcp` Befehl von einem Powershellskript.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The property value in a set operation is <see langword="null" />.</exception>
        <exception cref="T:System.IO.IOException">An error occurred during the execution of this operation.</exception>
        <exception cref="T:System.Security.SecurityException">Your application does not have permission to perform this operation.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Lesen und Schreiben in das Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="T:System.Text.Encoding" />
      </Docs>
    </Member>
    <Member MemberName="IsErrorRedirected">
      <MemberSignature Language="C#" Value="public static bool IsErrorRedirected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsErrorRedirected" />
      <MemberSignature Language="DocId" Value="P:System.Console.IsErrorRedirected" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsErrorRedirected As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool IsErrorRedirected { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsErrorRedirected : bool" Usage="System.Console.IsErrorRedirected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the error output stream has been redirected from the standard error stream.</summary>
        <value>
          <see langword="true" />, wenn die Fehlerausgabe umgeleitet wird; andernfalls <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Console.Error" />
        <altmember cref="M:System.Console.SetError(System.IO.TextWriter)" />
        <altmember cref="M:System.Console.OpenStandardError" />
      </Docs>
    </Member>
    <Member MemberName="IsInputRedirected">
      <MemberSignature Language="C#" Value="public static bool IsInputRedirected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsInputRedirected" />
      <MemberSignature Language="DocId" Value="P:System.Console.IsInputRedirected" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsInputRedirected As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool IsInputRedirected { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInputRedirected : bool" Usage="System.Console.IsInputRedirected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether input has been redirected from the standard input stream.</summary>
        <value>
          <see langword="true" />, wenn die Eingabe umgeleitet wird, andernfalls <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Console.In" />
        <altmember cref="M:System.Console.SetIn(System.IO.TextReader)" />
        <altmember cref="M:System.Console.OpenStandardInput" />
      </Docs>
    </Member>
    <Member MemberName="IsOutputRedirected">
      <MemberSignature Language="C#" Value="public static bool IsOutputRedirected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsOutputRedirected" />
      <MemberSignature Language="DocId" Value="P:System.Console.IsOutputRedirected" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsOutputRedirected As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool IsOutputRedirected { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsOutputRedirected : bool" Usage="System.Console.IsOutputRedirected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether output has been redirected from the standard output stream.</summary>
        <value>
          <see langword="true" />, wenn die Ausgabe umgeleitet wird, andernfalls <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Console.Out" />
        <altmember cref="M:System.Console.SetOut(System.IO.TextWriter)" />
        <altmember cref="M:System.Console.OpenStandardError" />
      </Docs>
    </Member>
    <Member MemberName="KeyAvailable">
      <MemberSignature Language="C#" Value="public static bool KeyAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool KeyAvailable" />
      <MemberSignature Language="DocId" Value="P:System.Console.KeyAvailable" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property KeyAvailable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool KeyAvailable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyAvailable : bool" Usage="System.Console.KeyAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether a key press is available in the input stream.</summary>
        <value>
          <see langword="true" />, wenn ein Tastendruck vorhanden ist, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Eigenschaftswert wird sofort zurückgegeben; d. h. die <xref:System.Console.KeyAvailable%2A> Eigenschaft wird die Eingabe nicht blockiert, bis ein Tastendruck vorhanden ist.  
  
 Verwenden der <xref:System.Console.KeyAvailable%2A> Eigenschaft nur in Verbindung mit der <xref:System.Console.ReadKey%2A> -Methode, nicht die <xref:System.Console.Read%2A> oder <xref:System.Console.ReadLine%2A> Methoden.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie die <xref:System.Console.KeyAvailable%2A> Eigenschaft zum Erstellen einer Schleife, die ausgeführt wird, bis eine Taste gedrückt wird.  
  
 [!code-cpp[console.keyavailable#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.keyavailable/CPP/ka.cpp#1)]
 [!code-csharp[console.keyavailable#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.keyavailable/CS/ka.cs#1)]
 [!code-vb[console.keyavailable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.keyavailable/VB/ka.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <exception cref="T:System.InvalidOperationException">Standard input is redirected to a file instead of the keyboard.</exception>
      </Docs>
    </Member>
    <Member MemberName="LargestWindowHeight">
      <MemberSignature Language="C#" Value="public static int LargestWindowHeight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 LargestWindowHeight" />
      <MemberSignature Language="DocId" Value="P:System.Console.LargestWindowHeight" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property LargestWindowHeight As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int LargestWindowHeight { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LargestWindowHeight : int" Usage="System.Console.LargestWindowHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the largest possible number of console window rows, based on the current font and screen resolution.</summary>
        <value>Die Höhe des größtmöglichen Konsolenfensters in Zeilen.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LargestWindowWidth">
      <MemberSignature Language="C#" Value="public static int LargestWindowWidth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 LargestWindowWidth" />
      <MemberSignature Language="DocId" Value="P:System.Console.LargestWindowWidth" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property LargestWindowWidth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int LargestWindowWidth { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LargestWindowWidth : int" Usage="System.Console.LargestWindowWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the largest possible number of console window columns, based on the current font and screen resolution.</summary>
        <value>Die Breite des größtmöglichen Konsolenfensters in Spalten.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveBufferArea">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Copies a specified source area of the screen buffer to a specified destination area.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveBufferArea">
      <MemberSignature Language="C#" Value="public static void MoveBufferArea (int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MoveBufferArea(int32 sourceLeft, int32 sourceTop, int32 sourceWidth, int32 sourceHeight, int32 targetLeft, int32 targetTop) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub MoveBufferArea (sourceLeft As Integer, sourceTop As Integer, sourceWidth As Integer, sourceHeight As Integer, targetLeft As Integer, targetTop As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MoveBufferArea(int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop);" />
      <MemberSignature Language="F#" Value="static member MoveBufferArea : int * int * int * int * int * int -&gt; unit" Usage="System.Console.MoveBufferArea (sourceLeft, sourceTop, sourceWidth, sourceHeight, targetLeft, targetTop)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceLeft" Type="System.Int32" />
        <Parameter Name="sourceTop" Type="System.Int32" />
        <Parameter Name="sourceWidth" Type="System.Int32" />
        <Parameter Name="sourceHeight" Type="System.Int32" />
        <Parameter Name="targetLeft" Type="System.Int32" />
        <Parameter Name="targetTop" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sourceLeft">The leftmost column of the source area.</param>
        <param name="sourceTop">The topmost row of the source area.</param>
        <param name="sourceWidth">The number of columns in the source area.</param>
        <param name="sourceHeight">The number of rows in the source area.</param>
        <param name="targetLeft">The leftmost column of the destination area.</param>
        <param name="targetTop">The topmost row of the destination area.</param>
        <summary>Copies a specified source area of the screen buffer to a specified destination area.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die Ziel- und Parameter eine Position außerhalb der Grenzen des aktuellen Bildschirmpuffer angeben, wird nur der Teil des Quellbereichs, die in dem Zielbereich passt kopiert. D. h. wird Quellbereichs abgeschnitten, damit Sie den aktuellen Bildschirmpuffer passt.  
  
 Die <xref:System.Console.MoveBufferArea%2A> Methode des Quellbereichs in den Zielbereich kopiert. Wenn sich der Zielbereich Quellbereichs nicht überschneiden, ist der Quellbereich mit Leerzeichen mit der aktuellen Vordergrund- und Hintergrundfarben gefüllt. Andernfalls ist der Teil der Schnittmenge des Quellbereichs nicht gefüllt.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">One or more of the parameters is less than zero.  -or-  <paramref name="sourceLeft" /> or <paramref name="targetLeft" /> is greater than or equal to <see cref="P:System.Console.BufferWidth" />.  -or-  <paramref name="sourceTop" /> or <paramref name="targetTop" /> is greater than or equal to <see cref="P:System.Console.BufferHeight" />.  -or-  <paramref name="sourceTop" /> + <paramref name="sourceHeight" /> is greater than or equal to <see cref="P:System.Console.BufferHeight" />.  -or-  <paramref name="sourceLeft" /> + <paramref name="sourceWidth" /> is greater than or equal to <see cref="P:System.Console.BufferWidth" />.</exception>
        <exception cref="T:System.Security.SecurityException">The user does not have permission to perform this action.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="MoveBufferArea">
      <MemberSignature Language="C#" Value="public static void MoveBufferArea (int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop, char sourceChar, ConsoleColor sourceForeColor, ConsoleColor sourceBackColor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MoveBufferArea(int32 sourceLeft, int32 sourceTop, int32 sourceWidth, int32 sourceHeight, int32 targetLeft, int32 targetTop, char sourceChar, valuetype System.ConsoleColor sourceForeColor, valuetype System.ConsoleColor sourceBackColor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub MoveBufferArea (sourceLeft As Integer, sourceTop As Integer, sourceWidth As Integer, sourceHeight As Integer, targetLeft As Integer, targetTop As Integer, sourceChar As Char, sourceForeColor As ConsoleColor, sourceBackColor As ConsoleColor)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MoveBufferArea(int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop, char sourceChar, ConsoleColor sourceForeColor, ConsoleColor sourceBackColor);" />
      <MemberSignature Language="F#" Value="static member MoveBufferArea : int * int * int * int * int * int * char * ConsoleColor * ConsoleColor -&gt; unit" Usage="System.Console.MoveBufferArea (sourceLeft, sourceTop, sourceWidth, sourceHeight, targetLeft, targetTop, sourceChar, sourceForeColor, sourceBackColor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceLeft" Type="System.Int32" />
        <Parameter Name="sourceTop" Type="System.Int32" />
        <Parameter Name="sourceWidth" Type="System.Int32" />
        <Parameter Name="sourceHeight" Type="System.Int32" />
        <Parameter Name="targetLeft" Type="System.Int32" />
        <Parameter Name="targetTop" Type="System.Int32" />
        <Parameter Name="sourceChar" Type="System.Char" />
        <Parameter Name="sourceForeColor" Type="System.ConsoleColor" />
        <Parameter Name="sourceBackColor" Type="System.ConsoleColor" />
      </Parameters>
      <Docs>
        <param name="sourceLeft">The leftmost column of the source area.</param>
        <param name="sourceTop">The topmost row of the source area.</param>
        <param name="sourceWidth">The number of columns in the source area.</param>
        <param name="sourceHeight">The number of rows in the source area.</param>
        <param name="targetLeft">The leftmost column of the destination area.</param>
        <param name="targetTop">The topmost row of the destination area.</param>
        <param name="sourceChar">The character used to fill the source area.</param>
        <param name="sourceForeColor">The foreground color used to fill the source area.</param>
        <param name="sourceBackColor">The background color used to fill the source area.</param>
        <summary>Copies a specified source area of the screen buffer to a specified destination area.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die Ziel- und Parameter eine Position außerhalb der Grenzen des aktuellen Bildschirmpuffer angeben, wird nur der Teil des Quellbereichs, die in dem Zielbereich passt kopiert. D. h. wird Quellbereichs abgeschnitten, damit Sie den aktuellen Bildschirmpuffer passt.  
  
 Die <xref:System.Console.MoveBufferArea%2A> Methode des Quellbereichs in den Zielbereich kopiert. Wenn sich der Zielbereich Quellbereichs nicht überschneiden, wird mit dem Zeichen, die gemäß des Quellbereichs gefüllt `sourceChar`, unter Verwendung der angegebenen von Farben `sourceForeColor` und `sourceBackColor`. Andernfalls ist der Teil der Schnittmenge des Quellbereichs nicht gefüllt.  
  
 Die <xref:System.Console.MoveBufferArea%2A> Methode führt keine Operation, wenn `sourceWidth` oder `sourceHeight` 0 (null).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">One or more of the parameters is less than zero.  -or-  <paramref name="sourceLeft" /> or <paramref name="targetLeft" /> is greater than or equal to <see cref="P:System.Console.BufferWidth" />.  -or-  <paramref name="sourceTop" /> or <paramref name="targetTop" /> is greater than or equal to <see cref="P:System.Console.BufferHeight" />.  -or-  <paramref name="sourceTop" /> + <paramref name="sourceHeight" /> is greater than or equal to <see cref="P:System.Console.BufferHeight" />.  -or-  <paramref name="sourceLeft" /> + <paramref name="sourceWidth" /> is greater than or equal to <see cref="P:System.Console.BufferWidth" />.</exception>
        <exception cref="T:System.ArgumentException">One or both of the color parameters is not a member of the <see cref="T:System.ConsoleColor" /> enumeration.</exception>
        <exception cref="T:System.Security.SecurityException">The user does not have permission to perform this action.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="NumberLock">
      <MemberSignature Language="C#" Value="public static bool NumberLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool NumberLock" />
      <MemberSignature Language="DocId" Value="P:System.Console.NumberLock" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property NumberLock As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool NumberLock { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.NumberLock : bool" Usage="System.Console.NumberLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the NUM LOCK keyboard toggle is turned on or turned off.</summary>
        <value>
          <see langword="true" />, wenn die NUM-TASTE aktiviert ist, <see langword="false" />, wenn die NUM-TASTE deaktiviert ist.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenStandardError">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Acquires the standard error stream.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenStandardError">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardError ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardError() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.OpenStandardError" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenStandardError () As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Stream ^ OpenStandardError();" />
      <MemberSignature Language="F#" Value="static member OpenStandardError : unit -&gt; System.IO.Stream" Usage="System.Console.OpenStandardError " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Acquires the standard error stream.</summary>
        <returns>The standard error stream.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode kann, der Standardfehlerstream nach dem Ändern durch die <xref:System.Console.SetError%2A> Methode.  
  
   
  
## Examples  
 Im folgende Beispiel wird ein einfacher Text-Datei-Viewer, der den Inhalt von einem oder mehreren Textdateien auf der Konsole ausgibt. Wenn keine Befehlszeilenargumente vorhanden sind oder wenn keine Dateien als Befehlszeilenargumente übergeben nicht vorhanden sind, wird im Beispiel wird die <xref:System.Console.SetError%2A> Methodenaufrufe Fehlerinformationen in eine Datei umleiten der <xref:System.Console.OpenStandardError%2A> Methode beim erneuten der Standardfehler Stream und gibt an, dass die Fehlerinformationen in eine Datei geschrieben wurde.  
  
 [!code-csharp[System.Console.OpenStandardError#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.openstandarderror/cs/viewtextfile.cs#1)]
 [!code-vb[System.Console.OpenStandardError#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.openstandarderror/vb/viewtextfile.vb#1)]  
  
 Beachten Sie, dass die <xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=nameWithType> -Eigenschaftensatz auf `true` vor dem erneuten fehlerdatenstroms der. Dadurch wird sichergestellt, dass die Ausgabe wird sofort an die Konsole gesendet und nicht als gepuffert.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Console.Error" />
        <altmember cref="P:System.Console.IsErrorRedirected" />
        <altmember cref="M:System.Console.SetError(System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="OpenStandardError">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardError (int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardError(int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.OpenStandardError(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenStandardError (bufferSize As Integer) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Stream ^ OpenStandardError(int bufferSize);" />
      <MemberSignature Language="F#" Value="static member OpenStandardError : int -&gt; System.IO.Stream" Usage="System.Console.OpenStandardError bufferSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bufferSize">The internal stream buffer size.</param>
        <summary>Acquires the standard error stream, which is set to a specified buffer size.</summary>
        <returns>The standard error stream.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode kann, der Standardfehlerstream nach dem Ändern durch die <xref:System.Console.SetError%2A> Methode.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="bufferSize" /> is less than or equal to zero.</exception>
        <altmember cref="P:System.Console.Error" />
        <altmember cref="P:System.Console.IsErrorRedirected" />
        <altmember cref="M:System.Console.SetError(System.IO.TextWriter)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenStandardInput">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Acquires the standard input stream.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenStandardInput">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardInput ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardInput() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.OpenStandardInput" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenStandardInput () As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Stream ^ OpenStandardInput();" />
      <MemberSignature Language="F#" Value="static member OpenStandardInput : unit -&gt; System.IO.Stream" Usage="System.Console.OpenStandardInput " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Acquires the standard input stream.</summary>
        <returns>The standard input stream.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode kann verwendet werden, auf den Standardeingabestream nach dem Ändern von der <xref:System.Console.SetIn%2A> Methode.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Verwendung der `OpenStandardInput` Eigenschaft.  
  
 [!code-cpp[System.Console.OpenStandartInput#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.OpenStandartInput/CPP/decode.cpp#1)]
 [!code-csharp[System.Console.OpenStandartInput#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.OpenStandartInput/CS/decode.cs#1)]
 [!code-vb[System.Console.OpenStandartInput#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.OpenStandartInput/VB/decode.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Console.In" />
        <altmember cref="P:System.Console.IsInputRedirected" />
        <altmember cref="M:System.Console.SetIn(System.IO.TextReader)" />
      </Docs>
    </Member>
    <Member MemberName="OpenStandardInput">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardInput (int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardInput(int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.OpenStandardInput(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenStandardInput (bufferSize As Integer) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Stream ^ OpenStandardInput(int bufferSize);" />
      <MemberSignature Language="F#" Value="static member OpenStandardInput : int -&gt; System.IO.Stream" Usage="System.Console.OpenStandardInput bufferSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bufferSize">The internal stream buffer size.</param>
        <summary>Acquires the standard input stream, which is set to a specified buffer size.</summary>
        <returns>The standard input stream.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode kann verwendet werden, an den Standardausgabestream zurückzuerhalten, nach dem Ändern von der <xref:System.Console.SetIn%2A> Methode.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Verwendung der `OpenStandardInput` Eigenschaft.  
  
 [!code-cpp[System.Console.OpenStandartInput#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.OpenStandartInput/CPP/decode.cpp#1)]
 [!code-csharp[System.Console.OpenStandartInput#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.OpenStandartInput/CS/decode.cs#1)]
 [!code-vb[System.Console.OpenStandartInput#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.OpenStandartInput/VB/decode.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="bufferSize" /> is less than or equal to zero.</exception>
        <altmember cref="P:System.Console.In" />
        <altmember cref="P:System.Console.IsInputRedirected" />
        <altmember cref="M:System.Console.SetIn(System.IO.TextReader)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenStandardOutput">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Acquires the standard output stream.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenStandardOutput">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardOutput ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardOutput() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.OpenStandardOutput" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenStandardOutput () As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Stream ^ OpenStandardOutput();" />
      <MemberSignature Language="F#" Value="static member OpenStandardOutput : unit -&gt; System.IO.Stream" Usage="System.Console.OpenStandardOutput " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Acquires the standard output stream.</summary>
        <returns>The standard output stream.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode kann verwendet werden, an den Standardausgabestream zurückzuerhalten, nach dem Ändern von der <xref:System.Console.SetOut%2A> Methode.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der <xref:System.Console.OpenStandardOutput%2A>-Methode veranschaulicht. Hierdurch werden vier aufeinander folgende Leerzeichen in einer Zeichenfolge durch ein Tabstoppzeichen ersetzt. Um es auszuführen, müssen Sie zwei Befehlszeilenargumente angeben. Das erste ist der Name einer vorhandenen Textdatei, in die der Standardeingabestream umgeleitet wird. Das zweite ist der Name einer Datei, in die der Standardausgabestream umgeleitet wird. Diese Datei muss nicht vorhanden sein. Wenn das der Fall ist, wird der Inhalt überschrieben.  
  
 [!code-cpp[System.Console-INSERTTABS#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CPP/inserttabs.cpp#1)]
 [!code-csharp[System.Console-INSERTTABS#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CS/inserttabs.cs#1)]
 [!code-vb[System.Console-INSERTTABS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-INSERTTABS/VB/inserttabs.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Console.Out" />
        <altmember cref="P:System.Console.IsOutputRedirected" />
        <altmember cref="M:System.Console.SetOut(System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="OpenStandardOutput">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardOutput (int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardOutput(int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.OpenStandardOutput(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenStandardOutput (bufferSize As Integer) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Stream ^ OpenStandardOutput(int bufferSize);" />
      <MemberSignature Language="F#" Value="static member OpenStandardOutput : int -&gt; System.IO.Stream" Usage="System.Console.OpenStandardOutput bufferSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bufferSize">The internal stream buffer size.</param>
        <summary>Acquires the standard output stream, which is set to a specified buffer size.</summary>
        <returns>The standard output stream.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode kann verwendet werden, an den Standardausgabestream zurückzuerhalten, nach dem Ändern von der <xref:System.Console.SetOut%2A> Methode.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der <xref:System.Console.OpenStandardOutput%2A>-Methode veranschaulicht. Hierdurch werden vier aufeinander folgende Leerzeichen in einer Zeichenfolge durch ein Tabstoppzeichen ersetzt. Um es auszuführen, müssen Sie zwei Befehlszeilenargumente angeben. Das erste ist der Name einer vorhandenen Textdatei, in die der Standardeingabestream umgeleitet wird. Das zweite ist der Name einer Datei, in die der Standardausgabestream umgeleitet wird. Diese Datei muss nicht vorhanden sein. Wenn das der Fall ist, wird der Inhalt überschrieben.  
  
 [!code-cpp[System.Console-INSERTTABS#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CPP/inserttabs.cpp#1)]
 [!code-csharp[System.Console-INSERTTABS#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CS/inserttabs.cs#1)]
 [!code-vb[System.Console-INSERTTABS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-INSERTTABS/VB/inserttabs.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="bufferSize" /> is less than or equal to zero.</exception>
        <altmember cref="P:System.Console.Out" />
        <altmember cref="P:System.Console.IsOutputRedirected" />
        <altmember cref="M:System.Console.SetOut(System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="Out">
      <MemberSignature Language="C#" Value="public static System.IO.TextWriter Out { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.IO.TextWriter Out" />
      <MemberSignature Language="DocId" Value="P:System.Console.Out" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Out As TextWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::IO::TextWriter ^ Out { System::IO::TextWriter ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Out : System.IO.TextWriter" Usage="System.Console.Out" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the standard output stream.</summary>
        <value>Ein <see cref="T:System.IO.TextWriter" />, der den Standardausgabestream darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft wird in den Standardausgabestream standardmäßig festgelegt. Diese Eigenschaft kann festgelegt werden, in einen anderen Stream mit der <xref:System.Console.SetOut%2A> Methode.  
  
 Beachten Sie, das Aufrufe an `Console.Out.WriteLine` Methoden sind gleichwertig in Aufrufe an den entsprechenden <xref:System.Console.WriteLine%2A> Methoden.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Console.Out%2A> Eigenschaft, um ein Array mit den Namen der Dateien im aktuellen Verzeichnis der Anwendung in das Standardausgabegerät anzuzeigen. Klicken Sie dann die Standardausgabe auf die Datei Files.txt festgelegt, und listet die Elemente des Arrays in der Datei. Schließlich legt die Ausgabe in den Standardausgabestream und zeigt erneut die Arrayelemente in das Standardausgabegerät.  
  
 [!code-csharp[System.Console.Out#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.out/cs/out1.cs#1)]
 [!code-vb[System.Console.Out#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.out/vb/out1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Console.Error" />
        <altmember cref="P:System.Console.In" />
        <altmember cref="M:System.Console.SetOut(System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="OutputEncoding">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding OutputEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Encoding OutputEncoding" />
      <MemberSignature Language="DocId" Value="P:System.Console.OutputEncoding" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property OutputEncoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::Encoding ^ OutputEncoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OutputEncoding : System.Text.Encoding with get, set" Usage="System.Console.OutputEncoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the encoding the console uses to write output.</summary>
        <value>Die Codierung, die verwendet wird, um die Konsolenausgabe zu schreiben.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Konsole verwendet ausgabecodierung, von einer Anwendung in die entsprechenden Zeichen vor Konsole Anzeige geschriebene Zeichen übersetzt. Die Standardcodepage, die die Konsole verwendet, wird durch das Gebietsschema des Systems bestimmt.  
  
 Beginnend mit der [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], ein Abrufvorgang Eigenschaft möglicherweise einen zwischengespeicherten Wert anstelle der Konsole aktuellen ausgabecodierung zurück. Dies kann auftreten, wenn der Wert des der <xref:System.Console.OutputEncoding%2A> Eigenschaft wird geändert, andere Zuweisung zu Weise die <xref:System.Console.OutputEncoding%2A> Eigenschaft, z. B. das Aufrufen der Windows `SetConsoleOutputCP` Funktion.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The property value in a set operation is <see langword="null" />.</exception>
        <exception cref="T:System.IO.IOException">An error occurred during the execution of this operation.</exception>
        <exception cref="T:System.Security.SecurityException">Your application does not have permission to perform this operation.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Lesen und Schreiben in das Fenster auf oberster Ebene und untergeordnete Fenster.  Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <block subset="none" type="usage">
          <para>Der Unicode-Codierungen die <see cref="T:System.Console" /> Klasse unterstützt UTF-8-Codierung mit der <see cref="T:System.Text.UTF8Encoding" /> Klasse und muss mit der [! Include[net_v45](~/Includes/NET-V45-MD.MD)], unterstützt Sie UTF-16-Codierung mit der <see cref="T:System.Text.UnicodeEncoding" /> Klasse. UTF-32-Codierung mit der <see cref="T:System.Text.UTF32Encoding" /> Klasse wird nicht unterstützt. Beim Festlegen der ausgabecodierung in UTF-32 löst eine <see cref="T:System.IO.IOException" />.  Beachten Sie, dass erfolgreich Anzeigen von Unicode-Zeichen in die Konsole ist Folgendes erforderlich:-die-Konsole muss eine TrueType-Schriftart an, wie Lucida Console oder Consolas, verwenden, um Zeichen anzuzeigen.  – Eine Schriftart, die von der Konsole muss die bestimmten Glyphe oder Symbole angezeigt werden definieren. Die Konsole nutzen schriftartverknüpfung um Symbole aus verknüpften Schriftarten angezeigt, wenn die Basis Schriftart keine Definition für dieses Symbol enthält.  Weitere Informationen zur Unterstützung für Unicode-Codierung von der Konsole finden Sie im Abschnitt "Unicode-Unterstützung für die Konsole" in der <see cref="T:System.Console" /> Klasse.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static int Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Read" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Read();" />
      <MemberSignature Language="F#" Value="static member Read : unit -&gt; int" Usage="System.Console.Read " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads the next character from the standard input stream.</summary>
        <returns>The next character from the input stream, or negative one (-1) if there are currently no more characters to be read.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Console.Read%2A> Methode deren Rückgabe blockiert, während Sie Eingabezeichen eingeben; es beendet, wenn Sie durch Drücken der <xref:System.ConsoleKey.Enter> Schlüssel. Durch Drücken der EINGABETASTE Fügt eine plattformabhängige Abschlusssequenz an Ihre Eingabe an (z. B. Windows fügt eine Carriage Return-Zeilenvorschub-Sequenz an). Nachfolgende Aufrufe der <xref:System.Console.Read%2A> Methode abgerufen, der ein Eingabezeichen zu einem Zeitpunkt. Nachdem das letzte Zeichen abgerufen wurden, <xref:System.Console.Read%2A> blockiert, deren Rückgabe erneut und der Zyklus wird wiederholt.  
  
> [!IMPORTANT]
>  Die <xref:System.Console.ReadLine%2A> -Methode oder die <xref:System.Console.KeyAvailable%2A> Eigenschaft und <xref:System.Console.ReadKey%2A> Methode sind vorzuziehen, mit der <xref:System.Console.Read%2A> Methode.  
  
 Beachten Sie, dass die Methode nicht-1 zurückgegeben werden, es sei denn, Sie eine der folgenden Aktionen ausführen:  
  
-   Drücken Sie gleichzeitig die <xref:System.ConsoleModifiers.Control> Modifizierertaste und <xref:System.ConsoleKey.Z> -Konsolentaste (STRG + Z), das die EOF-Bedingung signalisiert.  
  
-   Drücken Sie die einen entsprechenden Schlüssel, der signalisiert die EOF-Bedingung, z. B. mit der Taste F6 in Windows.  
  
-   Umleiten der Eingabestreams an eine Quelle, wie eine Textdatei, mit einem tatsächlichen EOF-Zeichen.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.Console.Read%2A> Methode.  
  
 [!code-cpp[console.read#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.read/CPP/read.cpp#1)]
 [!code-csharp[console.read#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.read/CS/read.cs#1)]
 [!code-vb[console.read#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.read/VB/read.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadKey">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Obtains the next character or function key pressed by the user.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadKey">
      <MemberSignature Language="C#" Value="public static ConsoleKeyInfo ReadKey ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ConsoleKeyInfo ReadKey() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.ReadKey" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadKey () As ConsoleKeyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ConsoleKeyInfo ReadKey();" />
      <MemberSignature Language="F#" Value="static member ReadKey : unit -&gt; ConsoleKeyInfo" Usage="System.Console.ReadKey " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ConsoleKeyInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtains the next character or function key pressed by the user. The pressed key is displayed in the console window.</summary>
        <returns>An object that describes the <see cref="T:System.ConsoleKey" /> constant and Unicode character, if any, that correspond to the pressed console key. The <see cref="T:System.ConsoleKeyInfo" /> object also describes, in a bitwise combination of <see cref="T:System.ConsoleModifiers" /> values, whether one or more Shift, Alt, or Ctrl modifier keys was pressed simultaneously with the console key.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Console.ReadKey%2A> Methode wartet, also der Thread ausstellenden blockiert die <xref:System.Console.ReadKey%2A> -Methode, bis eine Zeichen- oder Funktionstaste gedrückt wird. Eine Zeichen- oder Funktionstaste kann in Kombination mit ein oder mehrere der Modifizierertasten Alt, STRG oder UMSCHALT gedrückt werden. Allerdings drücken Modifizierertaste selbst wird nicht bewirken, dass die <xref:System.Console.ReadKey%2A> -Methode zurückgegeben.  
  
 Je nach Ihrer Anwendung möchten Sie möglicherweise verwenden die <xref:System.Console.ReadKey%2A> Methode in Verbindung mit der <xref:System.Console.KeyAvailable%2A> Eigenschaft.  
  
 Die <xref:System.Console.ReadKey%2A> Methode liest aus der Tastatur, selbst wenn die Standardeingabe umgeleitet wird, in eine Datei mit der <xref:System.Console.SetIn%2A> Methode.  
  
   
  
## Examples  
 Eine der am häufigsten verwendet, der die <xref:System.Console.ReadKey> Methode ist die Ausführung des Programms angehalten, bis der Benutzer eine Taste drückt, und die app beendet wird oder zeigt ein Fenster "zusätzliche", der Informationen. Im folgenden Beispiel wird die <xref:System.Console.ReadKey> Methode für den Benutzer die EINGABETASTE drücken, vor dem Beenden der app zu warten.  
  
 [!code-csharp[System.Console.ReadKey#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Console.ReadKey/cs/ReadKey1.cs#1)]
 [!code-vb[System.Console.ReadKey#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Console.ReadKey/vb/ReadKey1.vb#1)]  
  
 Beachten Sie, die dieser Überladung von der <xref:System.Console.ReadKey%2A> Methode standardmäßig wiederholt anzeigbaren Schlüssel, die der Benutzer, an die Konsole drückt. Aufrufen, um sie zu unterdrücken, die <xref:System.Console.ReadKey%2A> Methode mit einem `intercept` Argument `true`.  
  
 Im folgenden Beispiel wird die <xref:System.Console.ReadKey> Methode zum Anzeigen von Informationen über die Taste gedrückt..  
  
 [!code-cpp[console.readkey1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.readkey1/CPP/rk.cpp#1)]
 [!code-csharp[console.readkey1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.readkey1/CS/rk.cs#1)]
 [!code-vb[console.readkey1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.readkey1/VB/rk.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Console.In" /> property is redirected from some stream other than the console.</exception>
        <altmember cref="T:System.ConsoleKey" />
        <altmember cref="P:System.Console.KeyAvailable" />
        <altmember cref="P:System.Console.TreatControlCAsInput" />
        <altmember cref="E:System.Console.CancelKeyPress" />
      </Docs>
    </Member>
    <Member MemberName="ReadKey">
      <MemberSignature Language="C#" Value="public static ConsoleKeyInfo ReadKey (bool intercept);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ConsoleKeyInfo ReadKey(bool intercept) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.ReadKey(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadKey (intercept As Boolean) As ConsoleKeyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ConsoleKeyInfo ReadKey(bool intercept);" />
      <MemberSignature Language="F#" Value="static member ReadKey : bool -&gt; ConsoleKeyInfo" Usage="System.Console.ReadKey intercept" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ConsoleKeyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intercept" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="intercept">Determines whether to display the pressed key in the console window. <see langword="true" /> to not display the pressed key; otherwise, <see langword="false" />.</param>
        <summary>Obtains the next character or function key pressed by the user. The pressed key is optionally displayed in the console window.</summary>
        <returns>An object that describes the <see cref="T:System.ConsoleKey" /> constant and Unicode character, if any, that correspond to the pressed console key. The <see cref="T:System.ConsoleKeyInfo" /> object also describes, in a bitwise combination of <see cref="T:System.ConsoleModifiers" /> values, whether one or more Shift, Alt, or Ctrl modifier keys was pressed simultaneously with the console key.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Console.ReadKey%2A> Methode wartet, also der Thread ausstellenden blockiert die <xref:System.Console.ReadKey%2A> -Methode, bis eine Zeichen- oder Funktionstaste gedrückt wird. Eine Zeichen- oder Funktionstaste kann in Kombination mit ein oder mehrere der Modifizierertasten Alt, STRG oder UMSCHALT gedrückt werden. Allerdings drücken Modifizierertaste selbst wird nicht bewirken, dass die <xref:System.Console.ReadKey%2A> -Methode zurückgegeben.  
  
 Wenn die `intercept` Parameter ist `true`, die gedrückte Taste wird abgefangen und nicht im Konsolenfenster angezeigt; andernfalls wird die gedrückte Taste angezeigt.  
  
 Je nach Ihrer Anwendung möchten Sie möglicherweise verwenden die <xref:System.Console.ReadKey%2A> Methode in Verbindung mit der <xref:System.Console.KeyAvailable%2A> Eigenschaft.  
  
 Die <xref:System.Console.ReadKey%2A> Methode liest aus der Tastatur, selbst wenn die Standardeingabe umgeleitet wird, in eine Datei mit der <xref:System.Console.SetIn%2A> Methode.  
  
   
  
## Examples  
 Eine der am häufigsten verwendet, der die <xref:System.Console.ReadKey%2A> Methode ist die Ausführung des Programms angehalten, bis der Benutzer eine Taste drückt, und die app beendet wird oder zeigt ein Fenster "zusätzliche", der Informationen. Im folgenden Beispiel wird die <xref:System.Console.ReadKey%28System.Boolean%29> Methode für den Benutzer die EINGABETASTE drücken, vor dem Beenden der app zu warten. Beachten Sie, dass, wenn der Benutzer eine andere Taste drückt, ihn nicht an die Konsole ausgegeben wird.  
  
 [!code-csharp[System.Console.ReadKey#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Console.ReadKey/cs/ReadKey2.cs#2)]
 [!code-vb[System.Console.ReadKey#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Console.ReadKey/vb/ReadKey2.vb#2)]  
  
 Im folgenden Beispiel wird die <xref:System.Console.ReadKey%28System.Boolean%29> Methode, um Informationen über die Taste gedrückt durch einen Benutzer ohne Echo diesen Schlüssel in der Konsole anzuzeigen.  
  
 [!code-cpp[console.readkey2#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.readkey2/CPP/rkbool.cpp#1)]
 [!code-csharp[console.readkey2#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.readkey2/CS/rkbool.cs#1)]
 [!code-vb[console.readkey2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.readkey2/VB/rkbool.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Console.In" /> property is redirected from some stream other than the console.</exception>
        <altmember cref="T:System.ConsoleKey" />
        <altmember cref="P:System.Console.KeyAvailable" />
        <altmember cref="P:System.Console.TreatControlCAsInput" />
        <altmember cref="E:System.Console.CancelKeyPress" />
      </Docs>
    </Member>
    <Member MemberName="ReadLine">
      <MemberSignature Language="C#" Value="public static string ReadLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ReadLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.ReadLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadLine () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ReadLine();" />
      <MemberSignature Language="F#" Value="static member ReadLine : unit -&gt; string" Usage="System.Console.ReadLine " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads the next line of characters from the standard input stream.</summary>
        <returns>The next line of characters from the input stream, or <see langword="null" /> if no more lines are available.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Console.ReadLine%2A> Methode liest eine Zeile aus dem Standardeingabestream. (Die Definition einer Linie, finden Sie unter dem Absatz nach der folgenden Liste.) Dies bedeutet Folgendes:  
  
-   Ist der standard Eingabegerät, das der Tastatur die <xref:System.Console.ReadLine%2A> Methode blockiert, bis der Benutzer drückt die **EINGABETASTE** Schlüssel.  
  
     Eine der am häufigsten verwendet, der die <xref:System.Console.ReadLine%2A> Methode ist, zum Anhalten der Ausführung des Programms vor dem Löschen der Konsole und Anzeigen von Informationen zu neuen darauf, und fordert den Benutzer auf die EINGABETASTE drücken, bevor die Anwendung beendet. Dies wird anhand des folgenden Beispiels veranschaulicht.  
  
     [!code-cpp[System.Console.ReadLine#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.ReadLine/cpp/ReadLineSimple.cpp#6)]
     [!code-csharp[System.Console.ReadLine#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.ReadLine/cs/ReadLineSimple.cs#6)]
     [!code-vb[System.Console.ReadLine#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.ReadLine/vb/ReadLineSimple.vb#6)]  
  
-   Wenn die Standardeingabe in eine Datei umgeleitet wird die <xref:System.Console.ReadLine%2A> Methode liest eine Textzeile aus einer Datei. Folgendes ist z. B. eine Textdatei namens ReadLine1.txt:  
  
    ```  
  
    This is the first line.  
    This is the second line.  
    This is the third line.  
    This is the fourth line.  
  
    ```  
  
     Im folgenden Beispiel wird die <xref:System.Console.ReadLine%2A> Methode, um die Eingabe zu lesen, die aus einer Datei umgeleitet wird. Der Lesevorgang beendet, wenn die Methode zurückkehrt `null`, was bedeutet, dass keine Zeilen noch nicht gelesen werden.  
  
     [!code-csharp[System.Console.ReadLine#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.ReadLine/cs/ReadLine3.cs#3)]
     [!code-vb[System.Console.ReadLine#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.ReadLine/vb/ReadLine3.vb#3)]  
  
     Nach dem Kompilieren des Beispiels für eine ausführbare benannte ReadLine1.exe, können Sie ihn über die Befehlszeile mit der Syntax ausführen  
  
    ```  
    ReadLine1 < ReadLine1.txt  
    ```  
  
     um den Inhalt der Datei lesen und in der Konsole angezeigt werden.  
  
 Eine Zeile ist definiert als eine Folge von Zeichen, gefolgt von einem Wagenrücklauf (hexadezimal 0x000d), ein Zeilenvorschub (hexadezimal 0x000a) oder den Wert des der <xref:System.Environment.NewLine%2A?displayProperty=nameWithType> Eigenschaft. Die zurückgegebene Zeichenfolge enthält keine die abschließenden Zeichen. Die Methode liest standardmäßig Eingabe aus einem Eingabepuffer 256 Zeichen. Da dies schließt die <xref:System.Environment.NewLine%2A?displayProperty=nameWithType> Zeichen, die die Methode kann lesen Zeilen, die bis zu 254 Zeichen enthalten. Um mehr Zeilen zu lesen, rufen Sie die <xref:System.Console.OpenStandardInput%28System.Int32%29> Methode.  
  
 Die <xref:System.Console.ReadLine%2A> Methode wird synchron ausgeführt. D. h., wird sie bis zum Lesen einer Zeile oder die Tastenkombination STRG + Z gedrückt wird. Die <xref:System.Console.In%2A> Eigenschaft gibt eine <xref:System.IO.TextReader> -Objekt, das den Standardeingabestream darstellt und verfügt, die über eine synchrone <xref:System.IO.TextReader.ReadLine%2A?displayProperty=nameWithType> -Methode und eine asynchrone <xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=nameWithType> Methode. Jedoch, wenn es als Standardeingabestream der Konsole verwendet die <xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=nameWithType> führt synchron statt asynchron und gibt eine `Task<String>` erst nach Abschluss des Lesevorgangs hat.  
  
 Wenn diese Methode löst eine <xref:System.OutOfMemoryException> Ausnahme, die Position des Readers in der zugrunde liegenden <xref:System.IO.Stream> Objekt wird durch die Anzahl der Zeichen, die die Methode wurde lesen, aber die bereits in den internen gelesenen Zeichen erweiterte <xref:System.Console.ReadLine%2A> Puffer werden verworfen. Da die Position des Readers im Stream nicht geändert werden kann, die bereits gelesenen Zeichen nicht behebbar sind, und möglich, die nur durch erneutes Initialisieren der <xref:System.IO.TextReader>. Wenn die ursprüngliche Position im Stream unbekannt ist oder der Stream keine Suchvorgänge unterstützt, die zugrunde liegende <xref:System.IO.Stream> auch erneut initialisiert werden muss. Um diese Situation zu vermeiden und stabile Code zu erzeugen, sollten Sie verwenden die <xref:System.Console.KeyAvailable%2A> Eigenschaft und <xref:System.Console.ReadKey%2A> -Methode und Speicher die gelesenen Zeichen in einem vorab zugeordneten Puffer.  
  
 Wenn Sie STRG + z gedrückt wird, wenn die Methode Lesen von Eingaben über die Konsole ist, gibt die Methode `null`. Dadurch kann der Benutzer zu verhindern, dass weitere Tastatur Eingabe Wenn die <xref:System.Console.ReadLine%2A> Methode in einer Schleife aufgerufen wird. Im folgende Beispiel wird dieses Szenario veranschaulicht.  
  
 [!code-cpp[System.Console.ReadLine#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.ReadLine/cpp/readline2.cpp#1)]
 [!code-csharp[System.Console.ReadLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.ReadLine/cs/ReadLine2.cs#1)]
 [!code-vb[System.Console.ReadLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.ReadLine/vb/ReadLine2.vb#1)]  
  
   
  
## Examples  
 Das folgende Beispiel erfordert zwei Befehlszeilenargumente: den Namen einer vorhandenen Textdatei, und der Name einer Datei an die Ausgabe zu schreiben. Es wird die vorhandene Textdatei geöffnet und leitet die Standardeingabe über die Tastatur auf diese Datei. Er leitet auch die Standardausgabe aus der Konsole in die Ausgabedatei. Es verwendet dann die <xref:System.Console.ReadLine%2A?displayProperty=nameWithType> Methode, um jede Zeile in der Datei lesen jeder Sequenz von vier Leerzeichen durch ein Tabstoppzeichen ersetzt, und verwendet die <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> Methode, um das Ergebnis in die Ausgabedatei zu schreiben.  
  
 [!code-cpp[System.Console-INSERTTABS#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CPP/inserttabs.cpp#1)]
 [!code-csharp[System.Console-INSERTTABS#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CS/inserttabs.cs#1)]
 [!code-vb[System.Console-INSERTTABS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-INSERTTABS/VB/inserttabs.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <exception cref="T:System.OutOfMemoryException">There is insufficient memory to allocate a buffer for the returned string.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The number of characters in the next line of characters is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="ResetColor">
      <MemberSignature Language="C#" Value="public static void ResetColor ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ResetColor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.ResetColor" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ResetColor ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ResetColor();" />
      <MemberSignature Language="F#" Value="static member ResetColor : unit -&gt; unit" Usage="System.Console.ResetColor " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sets the foreground and background console colors to their defaults.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Vordergrund- und Hintergrundfarben werden die Farben wiederhergestellt, die vorhanden waren, wenn der aktuelle Prozess gestartet wurde. Weitere Informationen finden Sie unter der <xref:System.Console.ForegroundColor%2A> und <xref:System.Console.BackgroundColor%2A> Eigenschaften.  
  
   
  
## Examples  
 Im folgende Beispiel speichert die Werte der <xref:System.ConsoleColor> Enumeration in ein Array und speichert die aktuellen Werte von der <xref:System.Console.BackgroundColor%2A> und <xref:System.Console.ForegroundColor%2A> Eigenschaften an Variablen. Anschließend wird die Vordergrundfarbe für jede Farbe in der <xref:System.ConsoleColor> Enumeration, mit der Ausnahme, die Farbe, die mit den aktuellen Hintergrund übereinstimmt, und die Farbe des Hintergrunds auf jede Farbe in ändert der <xref:System.ConsoleColor> Enumeration, außer auf die Farbe, entspricht die aktuelle Vordergrundfarbe. (Wenn die Vordergrundfarbe für die Farbe des Hintergrunds identisch ist, der Text nicht sichtbar ist.) Zum Schluss ruft es die <xref:System.Console.ResetColor%2A> Verfahren zum Wiederherstellen der ursprünglichen konsolenfarben.  
  
 [!code-csharp[System.ConsoleColor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.consolecolor/cs/foregroundcolor3.cs#1)]
 [!code-vb[System.ConsoleColor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.consolecolor/vb/foregroundcolor3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">The user does not have permission to perform this action.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SetBufferSize">
      <MemberSignature Language="C#" Value="public static void SetBufferSize (int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetBufferSize(int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetBufferSize(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetBufferSize (width As Integer, height As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetBufferSize(int width, int height);" />
      <MemberSignature Language="F#" Value="static member SetBufferSize : int * int -&gt; unit" Usage="System.Console.SetBufferSize (width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="width">The width of the buffer area measured in columns.</param>
        <param name="height">The height of the buffer area measured in rows.</param>
        <summary>Sets the height and width of the screen buffer area to the specified values.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.Console.WindowLeft%2A>, <xref:System.Console.WindowTop%2A>, <xref:System.Console.WindowWidth%2A>, <xref:System.Console.WindowHeight%2A>, <xref:System.Console.BufferWidth%2A>, <xref:System.Console.BufferHeight%2A>, und <xref:System.Console.CursorVisible%2A> Eigenschaften und die <xref:System.Console.SetWindowPosition%2A>, <xref:System.Console.SetBufferSize%2A>, und <xref:System.Console.ReadKey%2A> Methoden. Im Beispiel zeichnet eine Rasterstruktur im Bildschirmpuffer basierend auf die Bildschirmbreite für die Puffer. Danach verschiebt im Beispiel wird das Konsolenfenster als Antwort auf die von der nach-oben, nach-unten, links oder nach-rechts-Konsole-Taste gedrückt wird. Das Grid-Muster können Sie die Verschiebung des Konsolenfensters relativ zum Bildschirmpuffer sehen.  
  
 [!code-cpp[console.windowLT#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.windowLT/CPP/wlt.cpp#1)]
 [!code-csharp[console.windowLT#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.windowLT/CS/wlt.cs#1)]
 [!code-vb[console.windowLT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.windowLT/VB/wlt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="height" /> or <paramref name="width" /> is less than or equal to zero.  -or-  <paramref name="height" /> or <paramref name="width" /> is greater than or equal to <see cref="F:System.Int16.MaxValue" />.  -or-  <paramref name="width" /> is less than <see cref="P:System.Console.WindowLeft" /> + <see cref="P:System.Console.WindowWidth" />.  -or-  <paramref name="height" /> is less than <see cref="P:System.Console.WindowTop" /> + <see cref="P:System.Console.WindowHeight" />.</exception>
        <exception cref="T:System.Security.SecurityException">The user does not have permission to perform this action.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SetCursorPosition">
      <MemberSignature Language="C#" Value="public static void SetCursorPosition (int left, int top);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCursorPosition(int32 left, int32 top) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetCursorPosition(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetCursorPosition (left As Integer, top As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetCursorPosition(int left, int top);" />
      <MemberSignature Language="F#" Value="static member SetCursorPosition : int * int -&gt; unit" Usage="System.Console.SetCursorPosition (left, top)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int32" />
        <Parameter Name="top" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="left">The column position of the cursor. Columns are numbered from left to right starting at 0.</param>
        <param name="top">The row position of the cursor. Rows are numbered from top to bottom starting at 0.</param>
        <summary>Sets the position of the cursor.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Console.SetCursorPosition%2A> Methode, um anzugeben, wo der nächste Schreibvorgang im Konsolenfenster begonnen werden soll. Wenn die angegebene Cursorposition außerhalb des Bereichs, die derzeit im Konsolenfenster angezeigt wird ist, ändert den Fensterursprung automatisch aus, um den Cursor sichtbar zu machen.  
  
 Der Cursor wird automatisch verschoben, auf die nächste Zeichenposition jedes Mal ein Zeichen in das Konsolenfenster geschrieben wird. Wenn der Cursor an der rechten unteren Zeichenposition des Konsolenfensters befindet, das nächste schreiben verursacht das Konsolenfenster scrollen, damit der Cursor sichtbar bleibt. Wenn Sie ein Zeichen in der unteren rechten Zeichenposition schreiben, ohne dass das Konsolenfenster scrollen, verwenden Sie möchten die <xref:System.Console.MoveBufferArea%2A> Methode, um ein Zeichen in dieser Position zu verschieben.  
  
   
  
## Examples  
 Dieses Beispiel zeigt die <xref:System.Console.CursorLeft%2A> und <xref:System.Console.CursorTop%2A> Eigenschaften, und die <xref:System.Console.SetCursorPosition%2A> und <xref:System.Console.Clear%2A> Methoden. Im Beispiel wird der Cursor, der bestimmt, wo der nächste Schreibvorgang erfolgt ein 5 Zeichen durch eine Kombination von 5 Zeichen-Rechteck gezeichnet werden soll, "+", "&#124;", und "-" Zeichenfolgen. Beachten Sie, dass das Rechteck mit weniger Schritte, die mit einer Kombination aus anderen Zeichenfolgen werden konnte.  
  
 [!code-cpp[console.cursorLTS#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cursorLTS/CPP/lts.cpp#1)]
 [!code-csharp[console.cursorLTS#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cursorLTS/CS/lts.cs#1)]
 [!code-vb[console.cursorLTS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cursorLTS/VB/lts.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="left" /> or <paramref name="top" /> is less than zero.  -or-  <paramref name="left" /> is greater than or equal to <see cref="P:System.Console.BufferWidth" />.  -or-  <paramref name="top" /> is greater than or equal to <see cref="P:System.Console.BufferHeight" />.</exception>
        <exception cref="T:System.Security.SecurityException">The user does not have permission to perform this action.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SetError">
      <MemberSignature Language="C#" Value="public static void SetError (System.IO.TextWriter newError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetError(class System.IO.TextWriter newError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetError(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetError (newError As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetError(System::IO::TextWriter ^ newError);" />
      <MemberSignature Language="F#" Value="static member SetError : System.IO.TextWriter -&gt; unit" Usage="System.Console.SetError newError" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newError" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="newError">A stream that is the new standard error output.</param>
        <summary>Sets the <see cref="P:System.Console.Error" /> property to the specified <see cref="T:System.IO.TextWriter" /> object.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wird standardmäßig die <xref:System.Console.Error%2A> Eigenschaft auf den Standard-Fehlerausgabestream festgelegt ist.  
  
 Ein <xref:System.IO.StreamWriter> , kapselt einen <xref:System.IO.FileStream> kann verwendet werden, um Fehlermeldungen in eine Datei senden.  
  
   
  
## Examples  
 Im folgende Beispiel wird gezeigt, wie den Standardfehlerstream in eine Datei umgeleitet wird.  
  
 [!code-cpp[System.Console.SetError#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.SetError/cpp/seterror1.cpp#1)]
 [!code-csharp[System.Console.SetError#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.SetError/cs/SetError1.cs#1)]
 [!code-vb[System.Console.SetError#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.SetError/vb/SetError1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="newError" /> is <see langword="null" />.</exception>
        <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">zum Aufrufen von nicht verwalteten Codes. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="P:System.Console.IsErrorRedirected" />
        <altmember cref="P:System.Console.Error" />
      </Docs>
    </Member>
    <Member MemberName="SetIn">
      <MemberSignature Language="C#" Value="public static void SetIn (System.IO.TextReader newIn);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetIn(class System.IO.TextReader newIn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetIn(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetIn (newIn As TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetIn(System::IO::TextReader ^ newIn);" />
      <MemberSignature Language="F#" Value="static member SetIn : System.IO.TextReader -&gt; unit" Usage="System.Console.SetIn newIn" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newIn" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="newIn">A stream that is the new standard input.</param>
        <summary>Sets the <see cref="P:System.Console.In" /> property to the specified <see cref="T:System.IO.TextReader" /> object.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wird standardmäßig die <xref:System.Console.In%2A> Eigenschaft auf den Standardeingabestream festgelegt ist.  
  
 Ein <xref:System.IO.StreamReader> , kapselt einen <xref:System.IO.FileStream> zum Empfangen von Eingaben aus einer Datei verwendet werden können.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der <xref:System.Console.SetIn%2A>-Methode veranschaulicht. Hierdurch werden vier aufeinander folgende Leerzeichen in einer Zeichenfolge durch ein Tabstoppzeichen ersetzt. Um es auszuführen, müssen Sie zwei Befehlszeilenargumente angeben. Das erste ist der Name einer vorhandenen Textdatei, in die der Standardeingabestream umgeleitet wird. Das zweite ist der Name einer Datei, in die der Standardausgabestream umgeleitet wird. Diese Datei muss nicht vorhanden sein. Wenn das der Fall ist, wird der Inhalt überschrieben.  
  
 [!code-cpp[System.Console-INSERTTABS#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CPP/inserttabs.cpp#1)]
 [!code-csharp[System.Console-INSERTTABS#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CS/inserttabs.cs#1)]
 [!code-vb[System.Console-INSERTTABS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-INSERTTABS/VB/inserttabs.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="newIn" /> is <see langword="null" />.</exception>
        <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">zum Aufrufen von nicht verwalteten Codes. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="T:System.IO.TextReader" />
        <altmember cref="P:System.Console.In" />
      </Docs>
    </Member>
    <Member MemberName="SetOut">
      <MemberSignature Language="C#" Value="public static void SetOut (System.IO.TextWriter newOut);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetOut(class System.IO.TextWriter newOut) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetOut(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetOut (newOut As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetOut(System::IO::TextWriter ^ newOut);" />
      <MemberSignature Language="F#" Value="static member SetOut : System.IO.TextWriter -&gt; unit" Usage="System.Console.SetOut newOut" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newOut" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="newOut">A stream that is the new standard output.</param>
        <summary>Sets the <see cref="P:System.Console.Out" /> property to the specified <see cref="T:System.IO.TextWriter" /> object.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wird standardmäßig die <xref:System.Console.Out%2A> Eigenschaft wird festgelegt, in den Standardausgabestream.  
  
 Ein <xref:System.IO.StreamWriter> , kapselt einen <xref:System.IO.FileStream> zum Senden der Ausgabe in eine Datei verwendet werden können. Zum Beispiel:  
  
 [!code-cpp[System.Console.SetOut#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.console.setout/cpp/source.cpp#1)]
 [!code-csharp[System.Console.SetOut#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.setout/cs/source.cs#1)]
 [!code-vb[System.Console.SetOut#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.setout/vb/source.vb#1)]  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der <xref:System.Console.SetOut%2A>-Methode veranschaulicht. Hierdurch werden vier aufeinander folgende Leerzeichen in einer Zeichenfolge durch ein Tabstoppzeichen ersetzt. Um es auszuführen, müssen Sie zwei Befehlszeilenargumente angeben. Das erste ist der Name einer vorhandenen Textdatei, in die der Standardeingabestream umgeleitet wird. Das zweite ist der Name einer Datei, in die der Standardausgabestream umgeleitet wird. Diese Datei muss nicht vorhanden sein. Wenn das der Fall ist, wird der Inhalt überschrieben.  
  
 [!code-cpp[System.Console-INSERTTABS#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CPP/inserttabs.cpp#1)]
 [!code-csharp[System.Console-INSERTTABS#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CS/inserttabs.cs#1)]
 [!code-vb[System.Console-INSERTTABS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-INSERTTABS/VB/inserttabs.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="newOut" /> is <see langword="null" />.</exception>
        <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">zum Aufrufen von nicht verwalteten Codes. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="P:System.Console.Out" />
      </Docs>
    </Member>
    <Member MemberName="SetWindowPosition">
      <MemberSignature Language="C#" Value="public static void SetWindowPosition (int left, int top);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetWindowPosition(int32 left, int32 top) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetWindowPosition(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetWindowPosition (left As Integer, top As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetWindowPosition(int left, int top);" />
      <MemberSignature Language="F#" Value="static member SetWindowPosition : int * int -&gt; unit" Usage="System.Console.SetWindowPosition (left, top)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int32" />
        <Parameter Name="top" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="left">The column position of the upper left  corner of the console window.</param>
        <param name="top">The row position of the upper left corner of the console window.</param>
        <summary>Sets the position of the console window relative to the screen buffer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das Betriebssystem-Fenster zeigt das Konsolenfenster und das Konsolenfenster zeigt einen Teil des Bildschirmpuffers. Die <xref:System.Console.SetWindowPosition%2A> Methode wirkt sich auf die Position des Konsolenfensters relativ zum Bildschirmpuffer, sondern wirkt sich nicht auf die Position des Fensters Betriebssystem in Bezug auf dem Desktop.  
  
 Die Windows-Konsole und Betriebssystem im Allgemeinen wirken miteinander sich nicht. Allerdings Bildschirmpuffer in der aktuellen Grenzen des Konsolenfensters angezeigt werden kann, fügt das Betriebssystem automatisch Bildlaufleisten an das Betriebssystem-Fenster. In diesem Fall verschieben Sie die Bildlaufleisten des Betriebssystems wirkt sich auf die Position des Konsolenfensters, und verschieben Sie das Konsolenfenster mit dem <xref:System.Console.SetWindowPosition%2A> Methode wirkt sich auf die Position des Bildlaufleisten des Betriebssystems.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.Console.WindowLeft%2A>, <xref:System.Console.WindowTop%2A>, <xref:System.Console.WindowWidth%2A>, <xref:System.Console.WindowHeight%2A>, <xref:System.Console.BufferWidth%2A>, <xref:System.Console.BufferHeight%2A>, und <xref:System.Console.CursorVisible%2A> Eigenschaften und die <xref:System.Console.SetWindowPosition%2A>, <xref:System.Console.SetBufferSize%2A>, und <xref:System.Console.ReadKey%2A> Methoden. Im Beispiel zeichnet eine Rasterstruktur im Bildschirmpuffer basierend auf die Bildschirmbreite für die Puffer. Danach verschiebt im Beispiel wird das Konsolenfenster als Antwort auf die von der nach-oben, nach-unten, links oder nach-rechts-Konsole-Taste gedrückt wird. Das Grid-Muster können Sie die Verschiebung des Konsolenfensters relativ zum Bildschirmpuffer sehen.  
  
 [!code-cpp[console.windowLT#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.windowLT/CPP/wlt.cpp#1)]
 [!code-csharp[console.windowLT#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.windowLT/CS/wlt.cs#1)]
 [!code-vb[console.windowLT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.windowLT/VB/wlt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="left" /> or <paramref name="top" /> is less than zero.  -or-  <paramref name="left" /> + <see cref="P:System.Console.WindowWidth" /> is greater than <see cref="P:System.Console.BufferWidth" />.  -or-  <paramref name="top" /> + <see cref="P:System.Console.WindowHeight" /> is greater than <see cref="P:System.Console.BufferHeight" />.</exception>
        <exception cref="T:System.Security.SecurityException">The user does not have permission to perform this action.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SetWindowSize">
      <MemberSignature Language="C#" Value="public static void SetWindowSize (int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetWindowSize(int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetWindowSize(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetWindowSize (width As Integer, height As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetWindowSize(int width, int height);" />
      <MemberSignature Language="F#" Value="static member SetWindowSize : int * int -&gt; unit" Usage="System.Console.SetWindowSize (width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="width">The width of the console window measured in columns.</param>
        <param name="height">The height of the console window measured in rows.</param>
        <summary>Sets the height and width of the console window to the specified values.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Dieses Beispiel zeigt die <xref:System.Console.SetWindowSize%2A> -Methode, und die <xref:System.Console.WindowWidth%2A> und <xref:System.Console.WindowHeight%2A> Eigenschaften. Sie müssen das Beispiel an, um die vollständigen Auswirkungen der Änderung der Größe des Konsolenfenster finden Sie unter ausführen.  
  
 Im Beispiel meldet die Dimensionen eines Konsolenfensters 85 Spalten und 43 Zeilen festgelegt und dann eine Taste gedrückt, wartet. Wenn eine beliebige Taste gedrückt wird, werden die Dimensionen des Konsolenfensters halbiert, die neuen Dimensionen werden gemeldet, und im Beispiel wird eine andere Drücken einer Taste gewartet. Wenn eine beliebige Taste gedrückt wird, wird im Konsolenfenster die ursprünglichen Proportionen wiederhergestellt und zum Schluss im Beispiel wird beendet.  
  
 [!code-cpp[console.setwindowsize#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.setwindowsize/CPP/sws.cpp#1)]
 [!code-csharp[console.setwindowsize#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.setwindowsize/CS/sws.cs#1)]
 [!code-vb[console.setwindowsize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.setwindowsize/VB/sws.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="width" /> or <paramref name="height" /> is less than or equal to zero.  -or-  <paramref name="width" /> plus <see cref="P:System.Console.WindowLeft" /> or <paramref name="height" /> plus <see cref="P:System.Console.WindowTop" /> is greater than or equal to <see cref="F:System.Int16.MaxValue" />.  -or-  <paramref name="width" /> or <paramref name="height" /> is greater than the largest possible window width or height for the current screen resolution and console font.</exception>
        <exception cref="T:System.Security.SecurityException">The user does not have permission to perform this action.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public static string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string Title" />
      <MemberSignature Language="DocId" Value="P:System.Console.Title" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Title As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ Title { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Title : string with get, set" Usage="System.Console.Title" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the title to display in the console title bar.</summary>
        <value>Die Zeichenfolge, die auf der Titelleiste der Konsole angezeigt werden soll. Die maximale Länge der Titelzeichenfolge beträgt 24500 Zeichen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Dieses Beispiel zeigt die <xref:System.Console.Title%2A> Eigenschaft. Im Beispiel zeigt den aktuellen Titel des Fensters Betriebssystem, ein Tastendruck wartet und dann ein neuer Titel angezeigt.  
  
 [!code-cpp[console.title#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.title/CPP/mytitle.cpp#1)]
 [!code-csharp[console.title#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.title/CS/mytitle.cs#1)]
 [!code-vb[console.title#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.title/VB/mytitle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">In a get operation, the retrieved title is longer than 24500 characters.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">In a set operation, the specified title is longer than 24500 characters.</exception>
        <exception cref="T:System.ArgumentNullException">In a set operation, the specified title is <see langword="null" />.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="TreatControlCAsInput">
      <MemberSignature Language="C#" Value="public static bool TreatControlCAsInput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool TreatControlCAsInput" />
      <MemberSignature Language="DocId" Value="P:System.Console.TreatControlCAsInput" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property TreatControlCAsInput As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool TreatControlCAsInput { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.TreatControlCAsInput : bool with get, set" Usage="System.Console.TreatControlCAsInput" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the combination of the <see cref="F:System.ConsoleModifiers.Control" /> modifier key and <see cref="F:System.ConsoleKey.C" /> console key (Ctrl+C) is treated as ordinary input or as an interruption that is handled by the operating system.</summary>
        <value>
          <see langword="true" />, wenn STRG+C als normale Eingabe behandelt wird, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn der Wert der <xref:System.Console.TreatControlCAsInput%2A> Eigenschaft ist `false` und STRG + C gedrückt wird, der gedrückten Schlüssel nicht im Eingabepuffer gespeichert werden und das Betriebssystem beendet den derzeit ausgeführten Prozess. Dies ist der Standardwert.  
  
> [!CAUTION]
>  Verwenden Sie diese Eigenschaft Umsicht, da es durch Festlegen auf `true` solche einen entscheidenden Einfluss hat. Die meisten Benutzer erwarten, STRG + C, um eine Konsolenanwendung zu beenden. Wenn Sie die Auswirkungen von STRG + C deaktivieren, muss die Benutzer daran denken, STRG + UNTBR verwenden, um die Anwendung zu beenden, die eine weniger bekannten Tastenkombination ist.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.Console.TreatControlCAsInput%2A> Eigenschaft.  
  
 [!code-cpp[console.readkey1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.readkey1/CPP/rk.cpp#1)]
 [!code-csharp[console.readkey1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.readkey1/CS/rk.cs#1)]
 [!code-vb[console.readkey1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.readkey1/VB/rk.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Unable to get or set the input mode of the console input buffer.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="F:System.ConsoleModifiers.Control" />
        <altmember cref="F:System.ConsoleKey.C" />
        <altmember cref="E:System.Console.CancelKeyPress" />
      </Docs>
    </Member>
    <Member MemberName="WindowHeight">
      <MemberSignature Language="C#" Value="public static int WindowHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 WindowHeight" />
      <MemberSignature Language="DocId" Value="P:System.Console.WindowHeight" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property WindowHeight As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int WindowHeight { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.WindowHeight : int with get, set" Usage="System.Console.WindowHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the height of the console window area.</summary>
        <value>Die Höhe des Konsolenfensters in Zeilen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beim Festlegen des Werts der <xref:System.Console.WindowHeight%2A> Eigenschaft, wenn die Ausgabe umgeleitet wird, löst entweder eine <xref:System.ArgumentOutOfRangeException> oder ein <xref:System.IO.IOException> Ausnahme. Um eine Ausnahme zu verhindern, können Sie legen den Wert für diese Eigenschaft nur, wenn die <xref:System.Console.IsOutputRedirected%2A> -Eigenschaft gibt `false`.  
  
   
  
## Examples  
 Dieses Beispiel zeigt die <xref:System.Console.SetWindowSize%2A> -Methode, und die <xref:System.Console.WindowWidth%2A> und <xref:System.Console.WindowHeight%2A> Eigenschaften. Sie müssen das Beispiel an, um die vollständigen Auswirkungen der Änderung der Größe des Konsolenfenster finden Sie unter ausführen.  
  
 Im Beispiel meldet die Dimensionen eines Konsolenfensters auf 85 Spalten und Zeilen 43 festgelegt und dann ein Tastendruck wartet. Wenn eine beliebige Taste gedrückt wird, werden die Dimensionen des Konsolenfensters halbiert, die neuen Dimensionen werden gemeldet, und im Beispiel wird eine andere Drücken einer Taste gewartet. Wenn eine beliebige Taste gedrückt wird, wird im Konsolenfenster die ursprünglichen Proportionen wiederhergestellt und zum Schluss im Beispiel wird beendet.  
  
 [!code-cpp[console.setwindowsize#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.setwindowsize/CPP/sws.cpp#1)]
 [!code-csharp[console.setwindowsize#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.setwindowsize/CS/sws.cs#1)]
 [!code-vb[console.setwindowsize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.setwindowsize/VB/sws.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Console.WindowWidth" /> property or the value of the <see cref="P:System.Console.WindowHeight" /> property is less than or equal to 0.  -or-  The value of the <see cref="P:System.Console.WindowHeight" /> property plus the value of the <see cref="P:System.Console.WindowTop" /> property is greater than or equal to <see cref="F:System.Int16.MaxValue" />.  -or-  The value of the <see cref="P:System.Console.WindowWidth" /> property or the value of the <see cref="P:System.Console.WindowHeight" /> property is greater than the largest possible window width or height for the current screen resolution and console font.</exception>
        <exception cref="T:System.IO.IOException">Error reading or writing information.</exception>
      </Docs>
    </Member>
    <Member MemberName="WindowLeft">
      <MemberSignature Language="C#" Value="public static int WindowLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 WindowLeft" />
      <MemberSignature Language="DocId" Value="P:System.Console.WindowLeft" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property WindowLeft As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int WindowLeft { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.WindowLeft : int with get, set" Usage="System.Console.WindowLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the leftmost position of the console window area relative to the screen buffer.</summary>
        <value>Die am weitesten links stehende Konsolenfensterposition in Spalten.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Konsole stellt ein rechteckiges Fenster in einem größeren rechteckigen Pufferbereich dar. Das Fenster und der Puffer werden vertikal nach deren Anzahl von Zeilen und horizontal nach deren Anzahl von Spalten gemessen. Die Dimensionen des Pufferbereichs werden definiert, durch die <xref:System.Console.BufferHeight%2A> und <xref:System.Console.BufferWidth%2A> Eigenschaften. Die Dimensionen der der Bereich der Konsole werden definiert, durch die <xref:System.Console.WindowHeight%2A> und <xref:System.Console.WindowWidth%2A> Eigenschaften. Die <xref:System.Console.WindowLeft%2A> Eigenschaft bestimmt, welche Spalte des Pufferbereichs in der ersten Spalte des Konsolenfensters angezeigt wird. Der Wert, der die <xref:System.Console.WindowLeft%2A> Eigenschaft kann im Bereich von 0 bis <xref:System.Console.BufferWidth%2A>  -  <xref:System.Console.WindowWidth%2A>. Beim Festlegen auf einen Wert außerhalb der, die im Bereich löst eine <xref:System.ArgumentOutOfRangeException>.  
  
 Wenn eine Konsolenfenster zuerst geöffnet wird, den Standardwert der <xref:System.Console.WindowLeft%2A> Eigenschaft ist 0 (null), der angibt, dass die erste Spalte (an Position 0 (null)) im Pufferbereich die erste Spalte, die von der Konsole angezeigt entspricht. Die Standardbreite das Konsolenfenster und Pufferbereichs ist 80 Spalten. Dies bedeutet, dass die <xref:System.Console.WindowLeft%2A> Eigenschaft kann geändert werden, nur dann, wenn das Konsolenfenster schmaler gemacht oder Pufferbereichs breiter gemacht wird.  
  
 Beachten Sie, dass die Breite des Pufferbereichs die Breite des Konsolenfensters, den Wert der überschreitet die <xref:System.Console.WindowLeft%2A> Eigenschaft wird automatisch angepasst, wenn der Benutzer die horizontale Bildlaufleiste verwendet, um die Beziehung des Fensters zu Pufferbereichs definieren.  
  
 Beim Festlegen des Werts der <xref:System.Console.WindowLeft%2A> Eigenschaft, wenn die Ausgabe umgeleitet, löst eine <xref:System.IO.IOException> Ausnahme. Um die Ausnahme zu verhindern, können Sie legen den Wert für diese Eigenschaft nur, wenn die <xref:System.Console.IsOutputRedirected%2A> -Eigenschaft gibt `false`.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein 80-Spalte Konsolenfenster geöffnet und definiert einen Pufferbereich,, der 120 Spalten breit ist. Es zeigt Informationen zum Fenster und die Puffergröße und wartet dann darauf, dass sich der Benutzer auf die links-Taste oder der nach-rechts-Taste drücken. Im ersten Fall ist es verringert den Wert von der <xref:System.Console.WindowLeft%2A> Eigenschaft um eins, wenn das Ergebnis ein gültiger Wert ist. Im letzteren Fall es erhöht den Wert des der <xref:System.Console.WindowLeft%2A> Eigenschaft um eins, wenn das Ergebnis gültig wäre. Im Beispiel nicht behandeln muss, eine <xref:System.ArgumentOutOfRangeException>, da wird, dass überprüft der Wert zugewiesen werden die <xref:System.Console.WindowLeft%2A> -Eigenschaft ist nicht negativ und nicht dazu, dass die Summe der der <xref:System.Console.WindowLeft%2A> und <xref:System.Console.WindowWidth%2A> Eigenschaften überschreitet die <xref:System.Console.BufferWidth%2A> Eigenschaftswert.  
  
 [!code-cpp[System.Console.WindowLeft#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.console.windowleft/cpp/windowleft1.cpp#1)]
 [!code-csharp[System.Console.WindowLeft#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.windowleft/cs/windowleft1.cs#1)]
 [!code-vb[System.Console.WindowLeft#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.windowleft/vb/windowleft1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">In a set operation, the value to be assigned is less than zero.  -or-  As a result of the assignment, <see cref="P:System.Console.WindowLeft" /> plus <see cref="P:System.Console.WindowWidth" /> would exceed <see cref="P:System.Console.BufferWidth" />.</exception>
        <exception cref="T:System.IO.IOException">Error reading or writing information.</exception>
      </Docs>
    </Member>
    <Member MemberName="WindowTop">
      <MemberSignature Language="C#" Value="public static int WindowTop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 WindowTop" />
      <MemberSignature Language="DocId" Value="P:System.Console.WindowTop" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property WindowTop As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int WindowTop { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.WindowTop : int with get, set" Usage="System.Console.WindowTop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the top position of the console window area relative to the screen buffer.</summary>
        <value>Die oberste Konsolenfensterposition in Zeilen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Konsole stellt ein rechteckiges Fenster in einem größeren rechteckigen Pufferbereich dar. Das Fenster und der Puffer werden vertikal nach deren Anzahl von Zeilen und horizontal nach deren Anzahl von Spalten gemessen. Die Dimensionen des Pufferbereichs werden definiert, durch die <xref:System.Console.BufferHeight%2A> und <xref:System.Console.BufferWidth%2A> Eigenschaften. Die Dimensionen der der Bereich der Konsole werden definiert, durch die <xref:System.Console.WindowHeight%2A> und <xref:System.Console.WindowWidth%2A> Eigenschaften. Die <xref:System.Console.WindowTop%2A> Eigenschaft bestimmt, welche Zeile des Pufferbereichs in der ersten Spalte des Konsolenfensters angezeigt wird. Der Wert, der die <xref:System.Console.WindowTop%2A> Eigenschaft kann im Bereich von 0 bis <xref:System.Console.BufferHeight%2A>  -  <xref:System.Console.WindowHeight%2A>. Beim Festlegen auf einen Wert außerhalb der, die im Bereich löst eine <xref:System.ArgumentOutOfRangeException>.  
  
 Beim Festlegen des Werts der <xref:System.Console.WindowTop%2A> Eigenschaft, wenn die Ausgabe umgeleitet, löst eine <xref:System.IO.IOException> Ausnahme. Um die Ausnahme zu verhindern, können Sie legen den Wert für diese Eigenschaft nur, wenn die <xref:System.Console.IsOutputRedirected%2A> -Eigenschaft gibt `false`.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.Console.WindowLeft%2A>, <xref:System.Console.WindowTop%2A>, <xref:System.Console.WindowWidth%2A>, <xref:System.Console.WindowHeight%2A>, <xref:System.Console.BufferWidth%2A>, <xref:System.Console.BufferHeight%2A>, und <xref:System.Console.CursorVisible%2A> Eigenschaften und die <xref:System.Console.SetWindowPosition%2A>, <xref:System.Console.SetBufferSize%2A>, und <xref:System.Console.ReadKey%2A> Methoden. Im Beispiel zeichnet eine Rasterstruktur im Bildschirmpuffer basierend auf die Bildschirmbreite für die Puffer. Danach verschiebt im Beispiel wird das Konsolenfenster als Antwort auf die von der nach-oben, nach-unten, links oder nach-rechts-Konsole-Taste gedrückt wird. Das Grid-Muster können Sie die Verschiebung des Konsolenfensters relativ zum Bildschirmpuffer sehen.  
  
 [!code-cpp[console.windowLT#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.windowLT/CPP/wlt.cpp#1)]
 [!code-csharp[console.windowLT#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.windowLT/CS/wlt.cs#1)]
 [!code-vb[console.windowLT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.windowLT/VB/wlt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">In a set operation, the value to be assigned is less than zero.  -or-  As a result of the assignment, <see cref="P:System.Console.WindowTop" /> plus <see cref="P:System.Console.WindowHeight" /> would exceed <see cref="P:System.Console.BufferHeight" />.</exception>
        <exception cref="T:System.IO.IOException">Error reading or writing information.</exception>
      </Docs>
    </Member>
    <Member MemberName="WindowWidth">
      <MemberSignature Language="C#" Value="public static int WindowWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 WindowWidth" />
      <MemberSignature Language="DocId" Value="P:System.Console.WindowWidth" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property WindowWidth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int WindowWidth { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.WindowWidth : int with get, set" Usage="System.Console.WindowWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the width of the console window.</summary>
        <value>Die Breite des Konsolenfensters in Spalten.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beim Festlegen des Werts der <xref:System.Console.WindowWidth%2A> Eigenschaft, wenn die Ausgabe umgeleitet wird, löst entweder eine <xref:System.ArgumentOutOfRangeException> oder ein <xref:System.IO.IOException> Ausnahme. Um eine Ausnahme zu verhindern, können Sie legen den Wert für diese Eigenschaft nur, wenn die <xref:System.Console.IsOutputRedirected%2A> -Eigenschaft gibt `false`.  
  
   
  
## Examples  
 Dieses Beispiel zeigt die <xref:System.Console.SetWindowSize%2A> -Methode, und die <xref:System.Console.WindowWidth%2A> und <xref:System.Console.WindowHeight%2A> Eigenschaften. Sie müssen das Beispiel an, um die vollständigen Auswirkungen der Änderung der Größe des Konsolenfenster finden Sie unter ausführen.  
  
 Im Beispiel meldet die Dimensionen eines Konsolenfensters auf 85 Spalten und Zeilen 43 festgelegt und dann ein Tastendruck wartet. Wenn eine beliebige Taste gedrückt wird, werden die Dimensionen des Konsolenfensters halbiert, die neuen Dimensionen werden gemeldet, und im Beispiel wird eine andere Drücken einer Taste gewartet. Wenn eine beliebige Taste gedrückt wird, wird im Konsolenfenster die ursprünglichen Proportionen wiederhergestellt und zum Schluss im Beispiel wird beendet.  
  
 [!code-cpp[console.setwindowsize#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.setwindowsize/CPP/sws.cpp#1)]
 [!code-csharp[console.setwindowsize#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.setwindowsize/CS/sws.cs#1)]
 [!code-vb[console.setwindowsize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.setwindowsize/VB/sws.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Console.WindowWidth" /> property or the value of the <see cref="P:System.Console.WindowHeight" /> property is less than or equal to 0.  -or-  The value of the <see cref="P:System.Console.WindowHeight" /> property plus the value of the <see cref="P:System.Console.WindowTop" /> property is greater than or equal to <see cref="F:System.Int16.MaxValue" />.  -or-  The value of the <see cref="P:System.Console.WindowWidth" /> property or the value of the <see cref="P:System.Console.WindowHeight" /> property is greater than the largest possible window width or height for the current screen resolution and console font.</exception>
        <exception cref="T:System.IO.IOException">Error reading or writing information.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Write">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Writes the text representation of the specified value or values to the standard output stream.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(bool value);" />
      <MemberSignature Language="F#" Value="static member Write : bool -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">The value to write.</param>
        <summary>Writes the text representation of the specified Boolean value to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Textdarstellung des `value` wird erzeugt, indem Aufrufen <xref:System.Boolean.ToString%2A?displayProperty=nameWithType>, dem gibt entweder <xref:System.Boolean.TrueString?displayProperty=nameWithType> oder <xref:System.Boolean.FalseString?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der `Write`-Methode veranschaulicht.  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(char value);" />
      <MemberSignature Language="F#" Value="static member Write : char -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">The value to write.</param>
        <summary>Writes the specified Unicode character value to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der `Write`-Methode veranschaulicht.  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (buffer As Char())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(cli::array &lt;char&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="static member Write : char[] -&gt; unit" Usage="System.Console.Write buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer">A Unicode character array.</param>
        <summary>Writes the specified array of Unicode characters to the standard output stream.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::Decimal value);" />
      <MemberSignature Language="F#" Value="static member Write : decimal -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">The value to write.</param>
        <summary>Writes the text representation of the specified <see cref="T:System.Decimal" /> value to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Textdarstellung des `value` wird erzeugt, indem Aufrufen <xref:System.Decimal.ToString%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der `Write`-Methode veranschaulicht.  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(double value);" />
      <MemberSignature Language="F#" Value="static member Write : double -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">The value to write.</param>
        <summary>Writes the text representation of the specified double-precision floating-point value to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Textdarstellung des `value` wird erstellt, durch Aufrufen der <xref:System.Double.ToString%2A?displayProperty=nameWithType> Methode.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der `Write`-Methode veranschaulicht.  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(int value);" />
      <MemberSignature Language="F#" Value="static member Write : int -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">The value to write.</param>
        <summary>Writes the text representation of the specified 32-bit signed integer value to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Textdarstellung des `value` wird erstellt, durch Aufrufen der <xref:System.Int32.ToString%2A?displayProperty=nameWithType> Methode.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der `Write`-Methode veranschaulicht.  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(long value);" />
      <MemberSignature Language="F#" Value="static member Write : int64 -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">The value to write.</param>
        <summary>Writes the text representation of the specified 64-bit signed integer value to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Textdarstellung des `value` wird erstellt, durch Aufrufen der <xref:System.Int64.ToString%2A?displayProperty=nameWithType> Methode.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der `Write`-Methode veranschaulicht.  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member Write : obj -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">The value to write, or <see langword="null" />.</param>
        <summary>Writes the text representation of the specified object to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `value` ist `null`, wird nichts geschrieben und keine Ausnahme ausgelöst wird. Andernfalls die `ToString` Methode `value` wird aufgerufen, um die Zeichenfolgendarstellung zu erzeugen und die resultierende Zeichenfolge wird in den Standardausgabestream geschrieben.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der `Write`-Methode veranschaulicht.  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(float value);" />
      <MemberSignature Language="F#" Value="static member Write : single -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">The value to write.</param>
        <summary>Writes the text representation of the specified single-precision floating-point value to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Textdarstellung des `value` wird erstellt, durch Aufrufen der <xref:System.Single.ToString%2A?displayProperty=nameWithType> Methode.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der `Write`-Methode veranschaulicht.  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member Write : string -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The value to write.</param>
        <summary>Writes the specified string value to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Falls der Wert `null`, wird nichts in den Standardausgabestream geschrieben.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der `Write`-Methode veranschaulicht.  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member Write : uint32 -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">The value to write.</param>
        <summary>Writes the text representation of the specified 32-bit unsigned integer value to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Textdarstellung des `value` wird erstellt, durch Aufrufen der <xref:System.UInt32.ToString%2A?displayProperty=nameWithType> Methode.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der `Write`-Methode veranschaulicht.  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member Write : uint64 -&gt; unit" Usage="System.Console.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">The value to write.</param>
        <summary>Writes the text representation of the specified 64-bit unsigned integer value to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Textdarstellung des `value` wird erstellt, durch Aufrufen der <xref:System.UInt64.ToString%2A?displayProperty=nameWithType> Methode.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der `Write`-Methode veranschaulicht.  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (format As String, arg0 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ format, System::Object ^ arg0);" />
      <MemberSignature Language="F#" Value="static member Write : string * obj -&gt; unit" Usage="System.Console.Write (format, arg0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">A composite format string.</param>
        <param name="arg0">An object to write using <c>format</c>.</param>
        <summary>Writes the text representation of the specified object to the standard output stream using the specified format information.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode verwendet die [Funktion für kombinierte Formatierung](~/docs/standard/base-types/composite-formatting.md) von .NET Framework, um den Wert eines Objekts in die Textdarstellung zu konvertieren und diese Darstellung in eine Zeichenfolge einzubetten. Die resultierende Zeichenfolge wird in den Ausgabestream geschrieben.  
  
 Die `format` -Parameter besteht aus 0 (null) oder mehreren Einheiten Text mit NULL oder mehr indizierten Platzhaltern enthalten, so genannten Formatelementen, die ein Objekt in der Parameterliste dieser Methode entsprechen. Der Formatierungsvorgang wird jedes Formatelement durch die Textdarstellung des Werts des entsprechenden Objekts ersetzt.  
  
 Die Syntax eines Formatelements ist `{` *Index*[`,`*Ausrichtung*] [`:`*"FormatString"*]`}`, gibt ein obligatorische Index, optionale Länge und Ausrichtung des formatierten Text und eine optionale Zeichenfolge von Formatbezeichnerzeichen, die steuern, wie der Wert des entsprechenden Objekts formatiert ist.  
  
 .NET Framework bietet eine umfangreiche formatierungsunterstützung, dies wird in den folgenden Themen zur Formatierung ausführlicher beschrieben.  
  
-   Weitere Informationen zu der Funktion für kombinierte Formatierung mit Methoden wie z. B. unterstützt <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, und einige Überladungen <xref:System.Console.WriteLine%2A>, finden Sie unter [kombinierte Formatierung](~/docs/standard/base-types/composite-formatting.md).  
  
-   Weitere Informationen zu numerischen Formatbezeichnern finden Sie unter [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) und [benutzerdefinierte Zahlenformatzeichenfolgen](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Weitere Informationen über Datum und Uhrzeit, die Formatbezeichner finden Sie unter [Standardformatbezeichner für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md) und [benutzerdefinierte Datums- und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
-   Weitere Informationen zu Formatbezeichnern finden Sie unter [Enumerationsformatzeichenfolgen](~/docs/standard/base-types/enumeration-format-strings.md).  
  
-   Weitere Informationen zur Formatierung finden Sie unter [Formatierung von Typen](~/docs/standard/base-types/formatting-types.md).  
  
   
  
## Examples  
 Im folgenden Beispiel werden die Standardformatbezeichner für Zahlen, Datumsangaben und Enumerationen mithilfe der `WriteLine`-Methode veranschaulicht.  
  
 [!code-cpp[console.writelineFmt1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.writelineFmt1/cpp/wl.cpp#1)] 
 [!code-csharp[console.writelineFmt1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.writelineFmt1/cs/wl.cs#1)] 
 [!code-vb[console.writelineFmt1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.writelineFmt1/vb/wl.vb#1)]  
  
 Im folgenden Beispiel wird die Verwendung der <xref:System.Console.Write%2A>-Methode veranschaulicht.  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">The format specification in <paramref name="format" /> is invalid.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string format, params object[] arg);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string format, object[] arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (format As String, ParamArray arg As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ arg);" />
      <MemberSignature Language="F#" Value="static member Write : string * obj[] -&gt; unit" Usage="System.Console.Write (format, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">A composite format string.</param>
        <param name="arg">An array of objects to write using <c>format</c>.</param>
        <summary>Writes the text representation of the specified array of objects to the standard output stream using the specified format information.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode verwendet die [Funktion für kombinierte Formatierung](~/docs/standard/base-types/composite-formatting.md) von .NET Framework, um den Wert eines Objekts in die Textdarstellung zu konvertieren und diese Darstellung in eine Zeichenfolge einzubetten. Die resultierende Zeichenfolge wird in den Ausgabestream geschrieben.  
  
 Die `format` -Parameter besteht aus 0 (null) oder mehreren Einheiten Text mit NULL oder mehr indizierten Platzhaltern enthalten, so genannten Formatelementen, die ein Objekt in der Parameterliste dieser Methode entsprechen. Der Formatierungsvorgang wird jedes Formatelement durch die Textdarstellung des Werts des entsprechenden Objekts ersetzt.  
  
 Die Syntax eines Formatelements ist `{` *Index*[`,`*Ausrichtung*] [`:`*"FormatString"*]`}`, gibt ein obligatorische Index, optionale Länge und Ausrichtung des formatierten Text und eine optionale Zeichenfolge von Formatbezeichnerzeichen, die steuern, wie der Wert des entsprechenden Objekts formatiert ist.  
  
 .NET Framework bietet eine umfangreiche formatierungsunterstützung, dies wird in den folgenden Themen zur Formatierung ausführlicher beschrieben.  
  
-   Weitere Informationen zu der Funktion für kombinierte Formatierung mit Methoden wie z. B. unterstützt <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, und einige Überladungen <xref:System.Console.WriteLine%2A>, finden Sie unter [kombinierte Formatierung](~/docs/standard/base-types/composite-formatting.md).  
  
-   Weitere Informationen zu numerischen Formatbezeichnern finden Sie unter [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) und [benutzerdefinierte Zahlenformatzeichenfolgen](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Weitere Informationen über Datum und Uhrzeit, die Formatbezeichner finden Sie unter [Standardformatbezeichner für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md) und [benutzerdefinierte Datums- und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
-   Weitere Informationen zu Formatbezeichnern finden Sie unter [Enumerationsformatzeichenfolgen](~/docs/standard/base-types/enumeration-format-strings.md).  
  
-   Weitere Informationen zur Formatierung finden Sie unter [Formatierung von Typen](~/docs/standard/base-types/formatting-types.md).  
  
 Die `arg` Parameter ist ein Parameterarray. Argumente können entweder als Array oder als Liste von fünf oder mehr Elementen an die Methode übergeben werden. Die Beispiele veranschaulichen die beiden Formen des Methodenaufrufs.  
  
   
  
## Examples  
 Das folgende Beispiel definiert eine `Person` Klasse mit einer Reihe von Eigenschaften, die Informationen zu einer Person bereitstellen. Die `GetDescription` -Methode gibt ein Array, das alle Eigenschaftswerte mit einer Ausnahme enthält. Im Beispiel wird dann verwendet das zurückgegebene Array die `GetDescription` Methode, um die Werte des Objekts Person anzuzeigen.  
  
 [!code-csharp[System.Console.Write#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.write/cs/WriteParams1.cs#1)]
 [!code-vb[System.Console.Write#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.write/vb/WriteParams1.vb#1)]  
  
 Beachten Sie, die im Beispiel wird die <xref:System.Console.Write%28System.String%2CSystem.Object%5B%5D%29> Methode statt über das <xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29> Methode, da er versucht, den Wert anzuzeigen die `Person.Remarks` Eigenschaft in derselben Zeile. Zu diesem Zweck den Wert des untersucht die <xref:System.Console.CursorLeft%2A> und <xref:System.Console.WindowWidth%2A> Eigenschaften zu bestimmen, ob genügend Speicherplatz für die angeführt passt vorhanden ist.  Wenn Sie vorhanden ist, wird die Zeile angezeigt. Wenn dies nicht der Fall, schreibt eine Zeile, rückt drei Leerzeichen und zeigt die angeführt.  
  
 Im folgende Beispiel wird mit dem ersten identisch, außer dass es eine Liste mit fünf Elementen als liefert die `arg` Argument anstelle von einem Parameterarray.  
  
 [!code-csharp[System.Console.Write#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.write/cs/WriteParams2.cs#2)]
 [!code-vb[System.Console.Write#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.write/vb/WriteParams2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> or <paramref name="arg" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">The format specification in <paramref name="format" /> is invalid.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <block subset="none" type="usage">
          <para>Diese Methode wird von C++-Code nicht aufgerufen. Der C++-Compiler löst Aufrufe [System.Console.Write](xref:System.Console.Write*), die als Aufruf an eine Zeichenfolge und eine Liste mit vier oder mehr Objektparameter enthalten <see cref="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)" />. Löst Aufrufe [System.Console.Write](xref:System.Console.Write*), die eine Zeichenfolge und ein Objektarray als Aufruf enthalten <see cref="M:System.Console.Write(System.String,System.Object)" />.</para>
        </block>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="static member Write : char[] * int * int -&gt; unit" Usage="System.Console.Write (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">An array of Unicode characters.</param>
        <param name="index">The starting position in <c>buffer</c>.</param>
        <param name="count">The number of characters to write.</param>
        <summary>Writes the specified subarray of Unicode characters to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode schreibt `count` Zeichen ab Position `index` von `buffer` in den Standardausgabestream.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> or <paramref name="count" /> is less than zero.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="index" /> plus <paramref name="count" /> specify a position that is not within <paramref name="buffer" />.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (format As String, arg0 As Object, arg1 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberSignature Language="F#" Value="static member Write : string * obj * obj -&gt; unit" Usage="System.Console.Write (format, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">A composite format string.</param>
        <param name="arg0">The first object to write using <c>format</c>.</param>
        <param name="arg1">The second object to write using <c>format</c>.</param>
        <summary>Writes the text representation of the specified objects to the standard output stream using the specified format information.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode verwendet die [Funktion für kombinierte Formatierung](~/docs/standard/base-types/composite-formatting.md) von .NET Framework, um den Wert eines Objekts in die Textdarstellung zu konvertieren und diese Darstellung in eine Zeichenfolge einzubetten. Die resultierende Zeichenfolge wird in den Ausgabestream geschrieben.  
  
 Die `format` -Parameter besteht aus 0 (null) oder mehreren Einheiten Text mit NULL oder mehr indizierten Platzhaltern enthalten, so genannten Formatelementen, die ein Objekt in der Parameterliste dieser Methode entsprechen. Der Formatierungsvorgang wird jedes Formatelement durch die Textdarstellung des Werts des entsprechenden Objekts ersetzt.  
  
 Die Syntax eines Formatelements ist `{` *Index*[`,`*Ausrichtung*] [`:`*"FormatString"*]`}`, gibt ein obligatorische Index, optionale Länge und Ausrichtung des formatierten Text und eine optionale Zeichenfolge von Formatbezeichnerzeichen, die steuern, wie der Wert des entsprechenden Objekts formatiert ist.  
  
 .NET Framework bietet eine umfangreiche formatierungsunterstützung, dies wird in den folgenden Themen zur Formatierung ausführlicher beschrieben.  
  
-   Weitere Informationen zu der Funktion für kombinierte Formatierung mit Methoden wie z. B. unterstützt <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, und einige Überladungen <xref:System.Console.WriteLine%2A>, finden Sie unter [kombinierte Formatierung](~/docs/standard/base-types/composite-formatting.md).  
  
-   Weitere Informationen zu numerischen Formatbezeichnern finden Sie unter [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) und [benutzerdefinierte Zahlenformatzeichenfolgen](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Weitere Informationen über Datum und Uhrzeit, die Formatbezeichner finden Sie unter [Standardformatbezeichner für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md) und [benutzerdefinierte Datums- und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
-   Weitere Informationen zu Formatbezeichnern finden Sie unter [Enumerationsformatzeichenfolgen](~/docs/standard/base-types/enumeration-format-strings.md).  
  
-   Weitere Informationen zur Formatierung finden Sie unter [Formatierung von Typen](~/docs/standard/base-types/formatting-types.md).  
  
   
  
## Examples  
 Im folgenden Beispiel werden die Standardformatbezeichner für Zahlen, Datumsangaben und Enumerationen mithilfe der `WriteLine`-Methode veranschaulicht.  
  
 [!code-cpp[console.writelineFmt1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.writelineFmt1/cpp/wl.cpp#1)] 
 [!code-csharp[console.writelineFmt1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.writelineFmt1/cs/wl.cs#1)]
 [!code-vb[console.writelineFmt1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.writelineFmt1/vb/wl.vb#1)]  
  
 Im folgenden Beispiel wird die Verwendung der `Write`-Methode veranschaulicht.  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">The format specification in <paramref name="format" /> is invalid.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string format, object arg0, object arg1, object arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string format, object arg0, object arg1, object arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.String,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (format As String, arg0 As Object, arg1 As Object, arg2 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2);" />
      <MemberSignature Language="F#" Value="static member Write : string * obj * obj * obj -&gt; unit" Usage="System.Console.Write (format, arg0, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">A composite format string.</param>
        <param name="arg0">The first object to write using <c>format</c>.</param>
        <param name="arg1">The second object to write using <c>format</c>.</param>
        <param name="arg2">The third object to write using <c>format</c>.</param>
        <summary>Writes the text representation of the specified objects to the standard output stream using the specified format information.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode verwendet die [Funktion für kombinierte Formatierung](~/docs/standard/base-types/composite-formatting.md) von .NET Framework, um den Wert eines Objekts in die Textdarstellung zu konvertieren und diese Darstellung in eine Zeichenfolge einzubetten. Die resultierende Zeichenfolge wird in den Ausgabestream geschrieben.  
  
 Die `format` -Parameter besteht aus 0 (null) oder mehreren Einheiten Text mit NULL oder mehr indizierten Platzhaltern enthalten, so genannten Formatelementen, die ein Objekt in der Parameterliste dieser Methode entsprechen. Der Formatierungsvorgang wird jedes Formatelement durch die Textdarstellung des Werts des entsprechenden Objekts ersetzt.  
  
 Die Syntax eines Formatelements ist `{` *Index*[`,`*Ausrichtung*] [`:`*"FormatString"*]`}`, gibt ein obligatorische Index, optionale Länge und Ausrichtung des formatierten Text und eine optionale Zeichenfolge von Formatbezeichnerzeichen, die steuern, wie der Wert des entsprechenden Objekts formatiert ist.  
  
 .NET Framework bietet eine umfangreiche formatierungsunterstützung, dies wird in den folgenden Themen zur Formatierung ausführlicher beschrieben.  
  
-   Weitere Informationen zu der Funktion für kombinierte Formatierung mit Methoden wie z. B. unterstützt <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, und einige Überladungen <xref:System.Console.WriteLine%2A>, finden Sie unter [kombinierte Formatierung](~/docs/standard/base-types/composite-formatting.md).  
  
-   Weitere Informationen zu numerischen Formatbezeichnern finden Sie unter [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) und [benutzerdefinierte Zahlenformatzeichenfolgen](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Weitere Informationen über Datum und Uhrzeit, die Formatbezeichner finden Sie unter [Standardformatbezeichner für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md) und [benutzerdefinierte Datums- und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
-   Weitere Informationen zu Formatbezeichnern finden Sie unter [Enumerationsformatzeichenfolgen](~/docs/standard/base-types/enumeration-format-strings.md).  
  
-   Weitere Informationen zur Formatierung finden Sie unter [Formatierung von Typen](~/docs/standard/base-types/formatting-types.md).  
  
   
  
## Examples  
 Im folgenden Beispiel werden die Standardformatbezeichner für Zahlen, Datumsangaben und Enumerationen mithilfe der `WriteLine`-Methode veranschaulicht.  
  
 [!code-cpp[console.writelineFmt1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.writelineFmt1/cpp/wl.cpp#1)] 
 [!code-csharp[console.writelineFmt1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.writelineFmt1/cs/wl.cs#1)]
 [!code-vb[console.writelineFmt1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.writelineFmt1/vb/wl.vb#1)]  
  
 Im folgenden Beispiel wird die Verwendung der `Write`-Methode veranschaulicht.  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">The format specification in <paramref name="format" /> is invalid.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string format, object arg0, object arg1, object arg2, object arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string format, object arg0, object arg1, object arg2, object arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (format As String, arg0 As Object, arg1 As Object, arg2 As Object, arg3 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2, System::Object ^ arg3);" />
      <MemberSignature Language="F#" Value="static member Write : string * obj * obj * obj * obj -&gt; unit" Usage="System.Console.Write (format, arg0, arg1, arg2, arg3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
        <Parameter Name="arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">A composite format string.</param>
        <param name="arg0">The first object to write using <c>format</c>.</param>
        <param name="arg1">The second object to write using <c>format</c>.</param>
        <param name="arg2">The third object to write using <c>format</c>.</param>
        <param name="arg3">The fourth object to write using <c>format</c>.</param>
        <summary>Writes the text representation of the specified objects and variable-length parameter list to the standard output stream using the specified format information.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Diese API ist nicht CLS-kompatibel. Die CLS-kompatible Alternative ist <xref:System.Console.Write%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>. Die C#- und Visual Basic-Compiler automatisch auflösen, einen Aufruf dieser Methode als Aufruf <xref:System.Console.Write%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>.  
  
 Diese Methode verwendet die [Funktion für kombinierte Formatierung](~/docs/standard/base-types/composite-formatting.md) von .NET Framework, um den Wert eines Objekts in die Textdarstellung zu konvertieren und diese Darstellung in eine Zeichenfolge einzubetten. Die resultierende Zeichenfolge wird in den Ausgabestream geschrieben.  
  
 Die `format` -Parameter besteht aus 0 (null) oder mehreren Einheiten Text mit NULL oder mehr indizierten Platzhaltern enthalten, so genannten Formatelementen, die ein Objekt in der Parameterliste dieser Methode entsprechen. Der Formatierungsvorgang wird jedes Formatelement durch die Textdarstellung des Werts des entsprechenden Objekts ersetzt.  
  
 Die Syntax eines Formatelements ist `{` *Index*[`,`*Ausrichtung*] [`:`*"FormatString"*]`}`, gibt ein obligatorische Index, optionale Länge und Ausrichtung des formatierten Text und eine optionale Zeichenfolge von Formatbezeichnerzeichen, die steuern, wie der Wert des entsprechenden Objekts formatiert ist.  
  
 .NET Framework bietet eine umfangreiche formatierungsunterstützung, dies wird in den folgenden Themen zur Formatierung ausführlicher beschrieben.  
  
-   Weitere Informationen zu der Funktion für kombinierte Formatierung mit Methoden wie z. B. unterstützt <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, und einige Überladungen <xref:System.Console.WriteLine%2A>, finden Sie unter [kombinierte Formatierung](~/docs/standard/base-types/composite-formatting.md).  
  
-   Weitere Informationen zu numerischen Formatbezeichnern finden Sie unter [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) und [benutzerdefinierte Zahlenformatzeichenfolgen](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Weitere Informationen über Datum und Uhrzeit, die Formatbezeichner finden Sie unter [Standardformatbezeichner für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md) und [benutzerdefinierte Datums- und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
-   Weitere Informationen zu Formatbezeichnern finden Sie unter [Enumerationsformatzeichenfolgen](~/docs/standard/base-types/enumeration-format-strings.md).  
  
-   Weitere Informationen zur Formatierung finden Sie unter [Formatierung von Typen](~/docs/standard/base-types/formatting-types.md).  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Verwendung von Variablen Parametern mit dem <xref:System.Console.Write%28System.String%2CSystem.Object%2CSystem.Object%2CSystem.Object%2CSystem.Object%29> Methode. Die Methode wird mit einer kombinierten Formatzeichenfolge und fünf Formatelementen aufgerufen.  
  
 [!code-cpp[System.Console.Write#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.console.write/cpp/con_write.cpp#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">The format specification in <paramref name="format" /> is invalid.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <block subset="none" type="usage">
          <para>Diese Methode ist mit markiert die <see langword="vararg" /> Schlüsselwort, das bedeutet, dass es sich um eine Variable Anzahl an Parametern unterstützt. Die Methode kann aufgerufen werden, von Visual C++, aber es kann nicht von c# oder Visual Basic-Code aufgerufen werden. Die C#- und Visual Basic-Compiler lösen Aufrufe an <see cref="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)" /> als Aufrufe von <see cref="M:System.Console.Write(System.String,System.Object[])" />.</para>
        </block>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteLine">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Writes the specified data, followed by the current line terminator, to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das Standardzeilenabschlusszeichen ist eine Zeichenfolge, deren Wert einem Wagenrücklaufzeichen gefolgt von einem Zeilenvorschub entspricht ("\r\n" in c# oder `vbCrLf` in Visual Basic). Sie können die für den Zeilenabschluss ändern, indem Sie festlegen der <xref:System.IO.TextWriter.NewLine%2A?displayProperty=nameWithType> Eigenschaft von der <xref:System.Console.Out%2A> Eigenschaft in eine andere Zeichenfolge.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine();" />
      <MemberSignature Language="F#" Value="static member WriteLine : unit -&gt; unit" Usage="System.Console.WriteLine " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Writes the current line terminator to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das Standardzeilenabschlusszeichen ist eine Zeichenfolge, deren Wert einem Wagenrücklaufzeichen gefolgt von einem Zeilenvorschub entspricht ("\r\n" in c# oder `vbCrLf` in Visual Basic). Sie können die für den Zeilenabschluss ändern, indem Sie festlegen der <xref:System.IO.TextWriter.NewLine%2A?displayProperty=nameWithType> Eigenschaft von der <xref:System.Console.Out%2A> Eigenschaft in eine andere Zeichenfolge. Dies wird im Beispiel veranschaulicht.  
  
   
  
## Examples  
 Im Beispiel wird das Zeilenabschlusszeichen von seinem Standardwert "\r\n" geändert oder `vbCrLf` auf "\r\n\r\n" oder `vbCrLf`  +  `vbCrLf`. Er ruft dann die <xref:System.Console.WriteLine> und <xref:System.Console.WriteLine%28System.String%29> Methoden, um die Ausgabe in der Konsole anzeigen.  
  
 [!code-cpp[System.Console.WriteLine#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.WriteLine/CPP/newline1.cpp#2)]
 [!code-csharp[System.Console.WriteLine#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/newline1.cs#2)]
 [!code-vb[System.Console.WriteLine#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/newline1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
        <altmember cref="P:System.IO.TextWriter.NewLine" />
        <altmember cref="P:System.Console.Out" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(bool value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : bool -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">The value to write.</param>
        <summary>Writes the text representation of the specified Boolean value, followed by the current line terminator, to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Textdarstellung des `value` wird erstellt, durch Aufrufen der <xref:System.Boolean.ToString%2A?displayProperty=nameWithType> Methode.  
  
 Weitere Informationen zu den für den Zeilenabschluss, finden Sie im Abschnitt "Hinweise" der <xref:System.Console.WriteLine%2A> -Methode, die keine Parameter akzeptiert.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die zehn zufällige ganze Zahlen generiert und verwendet die <xref:System.Console.WriteLine%28System.Boolean%29?displayProperty=nameWithType> Methode, um anzugeben, ob sie gerade sind.  
  
 [!code-cpp[System.Console.WriteLine#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.WriteLine/CPP/writeline_boolean1.cpp#4)]
 [!code-csharp[System.Console.WriteLine#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/writeline_boolean1.cs#4)]
 [!code-vb[System.Console.WriteLine#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/writeline_boolean1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(char value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : char -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">The value to write.</param>
        <summary>Writes the specified Unicode character, followed by the current line terminator, value to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zu den für den Zeilenabschluss, finden Sie im Abschnitt "Hinweise" der <xref:System.Console.WriteLine%2A> -Methode, die keine Parameter akzeptiert.  
  
   
  
## Examples  
 Im folgende Beispiel wird ein QuickInfo-Rechner, die ein Tipp 18 % berechnet und verwendet die <xref:System.Console.WriteLine%2A> Methode, um die Menge an den ursprünglichen Kosten, die Menge des Tipps und die Gesamtmenge anzuzeigen. Das Beispiel ist eine Konsolenanwendung, die der Benutzer die Menge der ursprünglichen kostenlos als Befehlszeilenparameter angeben muss.  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (buffer As Char())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(cli::array &lt;char&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="static member WriteLine : char[] -&gt; unit" Usage="System.Console.WriteLine buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer">A Unicode character array.</param>
        <summary>Writes the specified array of Unicode characters, followed by the current line terminator, to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen zu den für den Zeilenabschluss, finden Sie im Abschnitt "Hinweise" der <xref:System.Console.WriteLine%2A> -Methode, die keine Parameter akzeptiert.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::Decimal value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : decimal -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">The value to write.</param>
        <summary>Writes the text representation of the specified <see cref="T:System.Decimal" /> value, followed by the current line terminator, to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Textdarstellung des `value` wird erstellt, durch Aufrufen der <xref:System.Decimal.ToString%2A?displayProperty=nameWithType> Methode.  
  
 Weitere Informationen zu den für den Zeilenabschluss, finden Sie im Abschnitt "Hinweise" der <xref:System.Console.WriteLine%2A> -Methode, die keine Parameter akzeptiert.  
  
   
  
## Examples  
 Im folgende Beispiel wird ein QuickInfo-Rechner, die ein Tipp 18 % berechnet und verwendet die <xref:System.Console.WriteLine%2A> Methode, um die Menge an den ursprünglichen Kosten, die Menge des Tipps und die Gesamtmenge anzuzeigen. Das Beispiel ist eine Konsolenanwendung, die der Benutzer die Menge der ursprünglichen kostenlos als Befehlszeilenparameter angeben muss.  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(double value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : double -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">The value to write.</param>
        <summary>Writes the text representation of the specified double-precision floating-point value, followed by the current line terminator, to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Textdarstellung des `value` wird erstellt, durch Aufrufen der <xref:System.Double.ToString%2A?displayProperty=nameWithType> Methode.  
  
 Weitere Informationen zu den für den Zeilenabschluss, finden Sie im Abschnitt "Hinweise" der <xref:System.Console.WriteLine%2A> -Methode, die keine Parameter akzeptiert.  
  
   
  
## Examples  
 Im folgende Beispiel wird ein QuickInfo-Rechner, die ein Tipp 18 % berechnet und verwendet die <xref:System.Console.WriteLine%2A> Methode, um die Menge an den ursprünglichen Kosten, die Menge des Tipps und die Gesamtmenge anzuzeigen. Das Beispiel ist eine Konsolenanwendung, die der Benutzer die Menge der ursprünglichen kostenlos als Befehlszeilenparameter angeben muss.  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(int value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : int -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">The value to write.</param>
        <summary>Writes the text representation of the specified 32-bit signed integer value, followed by the current line terminator, to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Textdarstellung des `value` wird erstellt, durch Aufrufen der <xref:System.Int32.ToString%2A?displayProperty=nameWithType> Methode.  
  
 Weitere Informationen zu den für den Zeilenabschluss, finden Sie im Abschnitt "Hinweise" der <xref:System.Console.WriteLine%2A> -Methode, die keine Parameter akzeptiert.  
  
   
  
## Examples  
 Im folgende Beispiel wird ein QuickInfo-Rechner, die ein Tipp 18 % berechnet und verwendet die <xref:System.Console.WriteLine%2A> Methode, um die Menge an den ursprünglichen Kosten, die Menge des Tipps und die Gesamtmenge anzuzeigen. Das Beispiel ist eine Konsolenanwendung, die der Benutzer die Menge der ursprünglichen kostenlos als Befehlszeilenparameter angeben muss.  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(long value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : int64 -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">The value to write.</param>
        <summary>Writes the text representation of the specified 64-bit signed integer value, followed by the current line terminator, to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Textdarstellung des `value` wird erstellt, durch Aufrufen der <xref:System.Int64.ToString%2A?displayProperty=nameWithType> Methode.  
  
 Weitere Informationen zu den für den Zeilenabschluss, finden Sie im Abschnitt "Hinweise" der <xref:System.Console.WriteLine%2A> -Methode, die keine Parameter akzeptiert.  
  
   
  
## Examples  
 Im folgende Beispiel wird ein QuickInfo-Rechner, die ein Tipp 18 % berechnet und verwendet die <xref:System.Console.WriteLine%2A> Methode, um die Menge an den ursprünglichen Kosten, die Menge des Tipps und die Gesamtmenge anzuzeigen. Das Beispiel ist eine Konsolenanwendung, die der Benutzer die Menge der ursprünglichen kostenlos als Befehlszeilenparameter angeben muss.  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : obj -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">The value to write.</param>
        <summary>Writes the text representation of the specified object, followed by the current line terminator, to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `value``null` ist, wird nur das Zeichen für den Zeilenabschluss geschrieben. Andernfalls die `ToString` Methode `value` wird aufgerufen, um die Zeichenfolgendarstellung zu erzeugen und die resultierende Zeichenfolge wird in den Standardausgabestream geschrieben.  
  
 Weitere Informationen zu den für den Zeilenabschluss, finden Sie im Abschnitt "Hinweise" der <xref:System.Console.WriteLine%2A> -Methode, die keine Parameter akzeptiert.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Console.WriteLine%28System.Object%29> Methode, um jeden Wert in einem Objektarray an die Konsole anzuzeigen.  
  
 [!code-cpp[System.Console.WriteLine#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.WriteLine/CPP/writeline_obj1.cpp#3)]
 [!code-csharp[System.Console.WriteLine#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/writeline_obj1.cs#3)]
 [!code-vb[System.Console.WriteLine#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/writeline_obj1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(float value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : single -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">The value to write.</param>
        <summary>Writes the text representation of the specified single-precision floating-point value, followed by the current line terminator, to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Textdarstellung des `value` wird erstellt, durch Aufrufen der <xref:System.Single.ToString%2A?displayProperty=nameWithType> Methode.  
  
 Weitere Informationen zu den für den Zeilenabschluss, finden Sie im Abschnitt "Hinweise" der <xref:System.Console.WriteLine%2A> -Methode, die keine Parameter akzeptiert.  
  
   
  
## Examples  
 Im folgende Beispiel wird ein QuickInfo-Rechner, die ein Tipp 18 % berechnet und verwendet die <xref:System.Console.WriteLine%2A> Methode, um die Menge an den ursprünglichen Kosten, die Menge des Tipps und die Gesamtmenge anzuzeigen. Das Beispiel ist eine Konsolenanwendung, die der Benutzer die Menge der ursprünglichen kostenlos als Befehlszeilenparameter angeben muss.  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : string -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The value to write.</param>
        <summary>Writes the specified string value, followed by the current line terminator, to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Falls der Wert `null`, nur die für den Zeilenabschluss in den Standardausgabestream geschrieben.  
  
 Weitere Informationen zu den für den Zeilenabschluss, finden Sie im Abschnitt "Hinweise" der <xref:System.Console.WriteLine> Methode.  
  
   
  
## Examples  
 Im Beispiel wird das Zeilenabschlusszeichen von seinem Standardwert "\r\n" geändert oder `vbCrLf` auf "\r\n\r\n" oder `vbCrLf`  +  `vbCrLf`. Er ruft dann die <xref:System.Console.WriteLine> und <xref:System.Console.WriteLine%28System.String%29> Methoden, um die Ausgabe in der Konsole anzeigen.  
  
 [!code-cpp[System.Console.WriteLine#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.WriteLine/CPP/newline1.cpp#2)]
 [!code-csharp[System.Console.WriteLine#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/newline1.cs#2)]
 [!code-vb[System.Console.WriteLine#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/newline1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : uint32 -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">The value to write.</param>
        <summary>Writes the text representation of the specified 32-bit unsigned integer value, followed by the current line terminator, to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Textdarstellung des `value` wird erstellt, durch Aufrufen der <xref:System.UInt32.ToString%2A?displayProperty=nameWithType> Methode.  
  
 Weitere Informationen zu den für den Zeilenabschluss, finden Sie im Abschnitt "Hinweise" der <xref:System.Console.WriteLine%2A> -Methode, die keine Parameter akzeptiert.  
  
   
  
## Examples  
 Im folgende Beispiel wird ein QuickInfo-Rechner, die ein Tipp 18 % berechnet und verwendet die <xref:System.Console.WriteLine%2A> Methode, um die Menge an den ursprünglichen Kosten, die Menge des Tipps und die Gesamtmenge anzuzeigen. Das Beispiel ist eine Konsolenanwendung, die der Benutzer die Menge der ursprünglichen kostenlos als Befehlszeilenparameter angeben muss.  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : uint64 -&gt; unit" Usage="System.Console.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">The value to write.</param>
        <summary>Writes the text representation of the specified 64-bit unsigned integer value, followed by the current line terminator, to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Textdarstellung des `value` wird erstellt, durch Aufrufen der <xref:System.UInt64.ToString%2A?displayProperty=nameWithType> Methode.  
  
 Weitere Informationen zu den für den Zeilenabschluss, finden Sie im Abschnitt "Hinweise" der <xref:System.Console.WriteLine%2A> -Methode, die keine Parameter akzeptiert.  
  
   
  
## Examples  
 Im folgende Beispiel wird ein QuickInfo-Rechner, die ein Tipp 18 % berechnet und verwendet die <xref:System.Console.WriteLine%2A> Methode, um die Menge an den ursprünglichen Kosten, die Menge des Tipps und die Gesamtmenge anzuzeigen. Das Beispiel ist eine Konsolenanwendung, die der Benutzer die Menge der ursprünglichen kostenlos als Befehlszeilenparameter angeben muss.  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (format As String, arg0 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ format, System::Object ^ arg0);" />
      <MemberSignature Language="F#" Value="static member WriteLine : string * obj -&gt; unit" Usage="System.Console.WriteLine (format, arg0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">A composite format string.</param>
        <param name="arg0">An object to write using <c>format</c>.</param>
        <summary>Writes the text representation of the specified object, followed by the current line terminator, to the standard output stream using the specified format information.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode verwendet die [Funktion für kombinierte Formatierung](~/docs/standard/base-types/composite-formatting.md) von .NET Framework, um den Wert eines Objekts in die Textdarstellung zu konvertieren und diese Darstellung in eine Zeichenfolge einzubetten. Die resultierende Zeichenfolge wird in den Ausgabestream geschrieben.  
  
 Die `format` -Parameter besteht aus 0 (null) oder mehreren Einheiten Text mit NULL oder mehr indizierten Platzhaltern enthalten, so genannten Formatelementen, die ein Objekt in der Parameterliste dieser Methode entsprechen. Der Formatierungsvorgang wird jedes Formatelement durch die Textdarstellung des Werts des entsprechenden Objekts ersetzt.  
  
 Die Syntax eines Formatelements ist `{` *Index*[`,`*Ausrichtung*] [`:`*"FormatString"*]`}`, gibt ein obligatorische Index, optionale Länge und Ausrichtung des formatierten Text und eine optionale Zeichenfolge von Formatbezeichnerzeichen, die steuern, wie der Wert des entsprechenden Objekts formatiert ist.  
  
 .NET Framework bietet eine umfangreiche formatierungsunterstützung, dies wird in den folgenden Themen zur Formatierung ausführlicher beschrieben.  
  
-   Weitere Informationen zu der Funktion für kombinierte Formatierung mit Methoden wie z. B. unterstützt <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, und einige Überladungen <xref:System.Console.WriteLine%2A>, finden Sie unter [kombinierte Formatierung](~/docs/standard/base-types/composite-formatting.md).  
  
-   Weitere Informationen zu numerischen Formatbezeichnern finden Sie unter [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) und [benutzerdefinierte Zahlenformatzeichenfolgen](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Weitere Informationen über Datum und Uhrzeit, die Formatbezeichner finden Sie unter [Standardformatbezeichner für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md) und [benutzerdefinierte Datums- und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
-   Weitere Informationen zu Formatbezeichnern finden Sie unter [Enumerationsformatzeichenfolgen](~/docs/standard/base-types/enumeration-format-strings.md).  
  
-   Weitere Informationen zur Formatierung finden Sie unter [Formatierung von Typen](~/docs/standard/base-types/formatting-types.md).  
  
 Weitere Informationen zu den für den Zeilenabschluss, finden Sie im Abschnitt "Hinweise" der <xref:System.Console.WriteLine%2A> -Methode, die keine Parameter akzeptiert.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Console.WriteLine%28System.String%2CSystem.Object%29> anzuzeigenden fünf nach dem Zufallsprinzip generierte Methode <xref:System.Boolean> Werte.  
  
 [!code-csharp[System.Console.WriteLine#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/WriteLine6.cs#6)]
 [!code-vb[System.Console.WriteLine#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/WriteLine6.vb#6)]  
  
 Im folgenden Beispiel wird die <xref:System.Console.WriteLine%28System.String%2CSystem.Object%29> Methode, um das aktuelle Datum anzuzeigen.   Beachten Sie, die das Format-Element in der `format` Argument verwendet, das "D" [Formatzeichenfolge Standardformatbezeichner für Datum und Uhrzeit](~/docs/standard/base-types/standard-date-and-time-format-strings.md) das Datum im langen Datumsformat der aktuellen Kultur anzeigen.  
  
 [!code-csharp[System.Console.WriteLine#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/WriteLine7.cs#7)]
 [!code-vb[System.Console.WriteLine#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/WriteLine7.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">The format specification in <paramref name="format" /> is invalid.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, params object[] arg);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object[] arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (format As String, ParamArray arg As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ arg);" />
      <MemberSignature Language="F#" Value="static member WriteLine : string * obj[] -&gt; unit" Usage="System.Console.WriteLine (format, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">A composite format string.</param>
        <param name="arg">An array of objects to write using <c>format</c>.</param>
        <summary>Writes the text representation of the specified array of objects, followed by the current line terminator, to the standard output stream using the specified format information.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode verwendet die [Funktion für kombinierte Formatierung](~/docs/standard/base-types/composite-formatting.md) von .NET Framework, um den Wert eines Objekts in die Textdarstellung zu konvertieren und diese Darstellung in eine Zeichenfolge einzubetten. Die resultierende Zeichenfolge wird in den Ausgabestream geschrieben.  
  
 Die `format` -Parameter besteht aus 0 (null) oder mehreren Einheiten Text mit NULL oder mehr indizierten Platzhaltern enthalten, so genannten Formatelementen, die ein Objekt in der Parameterliste dieser Methode entsprechen. Der Formatierungsvorgang wird jedes Formatelement durch die Textdarstellung des Werts des entsprechenden Objekts ersetzt.  
  
 Die Syntax eines Formatelements ist `{` *Index*[`,`*Ausrichtung*] [`:`*"FormatString"*]`}`, gibt ein obligatorische Index, optionale Länge und Ausrichtung des formatierten Text und eine optionale Zeichenfolge von Formatbezeichnerzeichen, die steuern, wie der Wert des entsprechenden Objekts formatiert ist.  
  
 .NET Framework bietet eine umfangreiche formatierungsunterstützung, dies wird in den folgenden Themen zur Formatierung ausführlicher beschrieben.  
  
-   Weitere Informationen zu der Funktion für kombinierte Formatierung mit Methoden wie z. B. unterstützt <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, und einige Überladungen <xref:System.Console.WriteLine%2A>, finden Sie unter [kombinierte Formatierung](~/docs/standard/base-types/composite-formatting.md).  
  
-   Weitere Informationen zu numerischen Formatbezeichnern finden Sie unter [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) und [benutzerdefinierte Zahlenformatzeichenfolgen](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Weitere Informationen über Datum und Uhrzeit, die Formatbezeichner finden Sie unter [Standardformatbezeichner für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md) und [benutzerdefinierte Datums- und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
-   Weitere Informationen zu Formatbezeichnern finden Sie unter [Enumerationsformatzeichenfolgen](~/docs/standard/base-types/enumeration-format-strings.md).  
  
-   Weitere Informationen zur Formatierung finden Sie unter [Formatierung von Typen](~/docs/standard/base-types/formatting-types.md).  
  
 Weitere Informationen zu den für den Zeilenabschluss, finden Sie im Abschnitt "Hinweise" der <xref:System.Console.WriteLine%2A> -Methode, die keine Parameter akzeptiert.  
  
   
  
## Examples  
 Im folgenden Beispiel werden die Standardformatbezeichner für Zahlen, Datumsangaben und Enumerationen veranschaulicht.  
  
 [!code-cpp[console.writelineFmt1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.writelineFmt1/cpp/wl.cpp#1)] 
 [!code-csharp[console.writelineFmt1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.writelineFmt1/cs/wl.cs#1)]
 [!code-vb[console.writelineFmt1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.writelineFmt1/vb/wl.vb#1)]  
  
 Im folgende Beispiel wird ein QuickInfo-Rechner, die ein Tipp 18 % berechnet und verwendet die <xref:System.Console.WriteLine%2A> Methode, um die Menge an den ursprünglichen Kosten, die Menge des Tipps und die Gesamtmenge anzuzeigen. Das Beispiel ist eine Konsolenanwendung, die der Benutzer die Menge der ursprünglichen kostenlos als Befehlszeilenparameter angeben muss.  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> or <paramref name="arg" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">The format specification in <paramref name="format" /> is invalid.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <block subset="none" type="usage">
          <para>Diese Methode wird von C++-Code nicht aufgerufen. Der C++-Compiler löst Aufrufe [System.Console.WriteLine](xref:System.Console.WriteLine*), die als Aufruf an eine Zeichenfolge und eine Liste mit vier oder mehr Objektparameter enthalten <see cref="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)" />. Löst Aufrufe [System.Console.WriteLine](xref:System.Console.WriteLine*), die eine Zeichenfolge und ein Objektarray als Aufruf enthalten <see cref="M:System.Console.WriteLine(System.String,System.Object)" />.</para>
        </block>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="static member WriteLine : char[] * int * int -&gt; unit" Usage="System.Console.WriteLine (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">An array of Unicode characters.</param>
        <param name="index">The starting position in <c>buffer</c>.</param>
        <param name="count">The number of characters to write.</param>
        <summary>Writes the specified subarray of Unicode characters, followed by the current line terminator, to the standard output stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode schreibt `count` Zeichen ab Position `index` von `buffer` in den Standardausgabestream.  
  
 Weitere Informationen zu den für den Zeilenabschluss, finden Sie im Abschnitt "Hinweise" der <xref:System.Console.WriteLine%2A> -Methode, die keine Parameter akzeptiert.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> or <paramref name="count" /> is less than zero.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="index" /> plus <paramref name="count" /> specify a position that is not within <paramref name="buffer" />.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (format As String, arg0 As Object, arg1 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberSignature Language="F#" Value="static member WriteLine : string * obj * obj -&gt; unit" Usage="System.Console.WriteLine (format, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">A composite format string.</param>
        <param name="arg0">The first object to write using <c>format</c>.</param>
        <param name="arg1">The second object to write using <c>format</c>.</param>
        <summary>Writes the text representation of the specified objects, followed by the current line terminator, to the standard output stream using the specified format information.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode verwendet die [Funktion für kombinierte Formatierung](~/docs/standard/base-types/composite-formatting.md) von .NET Framework, um den Wert eines Objekts in die Textdarstellung zu konvertieren und diese Darstellung in eine Zeichenfolge einzubetten. Die resultierende Zeichenfolge wird in den Ausgabestream geschrieben.  
  
 Die `format` -Parameter besteht aus 0 (null) oder mehreren Einheiten Text mit NULL oder mehr indizierten Platzhaltern enthalten, so genannten Formatelementen, die ein Objekt in der Parameterliste dieser Methode entsprechen. Der Formatierungsvorgang wird jedes Formatelement durch die Textdarstellung des Werts des entsprechenden Objekts ersetzt.  
  
 Die Syntax eines Formatelements ist `{` *Index*[`,`*Ausrichtung*] [`:`*"FormatString"*]`}`, gibt ein obligatorische Index, optionale Länge und Ausrichtung des formatierten Text und eine optionale Zeichenfolge von Formatbezeichnerzeichen, die steuern, wie der Wert des entsprechenden Objekts formatiert ist.  
  
 .NET Framework bietet eine umfangreiche formatierungsunterstützung, dies wird in den folgenden Themen zur Formatierung ausführlicher beschrieben.  
  
-   Weitere Informationen zu der Funktion für kombinierte Formatierung mit Methoden wie z. B. unterstützt <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, und einige Überladungen <xref:System.Console.WriteLine%2A>, finden Sie unter [kombinierte Formatierung](~/docs/standard/base-types/composite-formatting.md).  
  
-   Weitere Informationen zu numerischen Formatbezeichnern finden Sie unter [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) und [benutzerdefinierte Zahlenformatzeichenfolgen](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Weitere Informationen über Datum und Uhrzeit, die Formatbezeichner finden Sie unter [Standardformatbezeichner für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md) und [benutzerdefinierte Datums- und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
-   Weitere Informationen zu Formatbezeichnern finden Sie unter [Enumerationsformatzeichenfolgen](~/docs/standard/base-types/enumeration-format-strings.md).  
  
-   Weitere Informationen zur Formatierung finden Sie unter [Formatierung von Typen](~/docs/standard/base-types/formatting-types.md).  
  
 Weitere Informationen zu den für den Zeilenabschluss, finden Sie im Abschnitt "Hinweise" der <xref:System.Console.WriteLine%2A> -Methode, die keine Parameter akzeptiert.  
  
   
  
## Examples  
 Im folgenden Beispiel werden die Standardformatbezeichner für Zahlen, Datumsangaben und Enumerationen veranschaulicht.  
  
 [!code-cpp[console.writelineFmt1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.writelineFmt1/cpp/wl.cpp#1)] 
 [!code-csharp[console.writelineFmt1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.writelineFmt1/cs/wl.cs#1)]
 [!code-vb[console.writelineFmt1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.writelineFmt1/vb/wl.vb#1)]  
  
 Im folgende Beispiel wird ein QuickInfo-Rechner, die ein Tipp 18 % berechnet und verwendet die <xref:System.Console.WriteLine%2A> Methode, um die Menge an den ursprünglichen Kosten, die Menge des Tipps und die Gesamtmenge anzuzeigen. Das Beispiel ist eine Konsolenanwendung, die der Benutzer die Menge der ursprünglichen kostenlos als Befehlszeilenparameter angeben muss.  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">The format specification in <paramref name="format" /> is invalid.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, object arg0, object arg1, object arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object arg0, object arg1, object arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (format As String, arg0 As Object, arg1 As Object, arg2 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2);" />
      <MemberSignature Language="F#" Value="static member WriteLine : string * obj * obj * obj -&gt; unit" Usage="System.Console.WriteLine (format, arg0, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">A composite format string.</param>
        <param name="arg0">The first object to write using <c>format</c>.</param>
        <param name="arg1">The second object to write using <c>format</c>.</param>
        <param name="arg2">The third object to write using <c>format</c>.</param>
        <summary>Writes the text representation of the specified objects, followed by the current line terminator, to the standard output stream using the specified format information.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode verwendet die [Funktion für kombinierte Formatierung](~/docs/standard/base-types/composite-formatting.md) von .NET Framework, um den Wert eines Objekts in die Textdarstellung zu konvertieren und diese Darstellung in eine Zeichenfolge einzubetten. Die resultierende Zeichenfolge wird in den Ausgabestream geschrieben.  
  
 Die `format` -Parameter besteht aus 0 (null) oder mehreren Einheiten Text mit NULL oder mehr indizierten Platzhaltern enthalten, so genannten Formatelementen, die ein Objekt in der Parameterliste dieser Methode entsprechen. Der Formatierungsvorgang wird jedes Formatelement durch die Textdarstellung des Werts des entsprechenden Objekts ersetzt.  
  
 Die Syntax eines Formatelements ist `{` *Index*[`,`*Ausrichtung*] [`:`*"FormatString"*]`}`, gibt ein obligatorische Index, optionale Länge und Ausrichtung des formatierten Text und eine optionale Zeichenfolge von Formatbezeichnerzeichen, die steuern, wie der Wert des entsprechenden Objekts formatiert ist.  
  
 .NET Framework bietet eine umfangreiche formatierungsunterstützung, dies wird in den folgenden Themen zur Formatierung ausführlicher beschrieben.  
  
-   Weitere Informationen zu der Funktion für kombinierte Formatierung mit Methoden wie z. B. unterstützt <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, und einige Überladungen <xref:System.Console.WriteLine%2A>, finden Sie unter [kombinierte Formatierung](~/docs/standard/base-types/composite-formatting.md).  
  
-   Weitere Informationen zu numerischen Formatbezeichnern finden Sie unter [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) und [benutzerdefinierte Zahlenformatzeichenfolgen](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Weitere Informationen über Datum und Uhrzeit, die Formatbezeichner finden Sie unter [Standardformatbezeichner für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md) und [benutzerdefinierte Datums- und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
-   Weitere Informationen zu Formatbezeichnern finden Sie unter [Enumerationsformatzeichenfolgen](~/docs/standard/base-types/enumeration-format-strings.md).  
  
-   Weitere Informationen zur Formatierung finden Sie unter [Formatierung von Typen](~/docs/standard/base-types/formatting-types.md).  
  
 Weitere Informationen zu den für den Zeilenabschluss, finden Sie im Abschnitt "Hinweise" der <xref:System.Console.WriteLine%2A> -Methode, die keine Parameter akzeptiert.  
  
   
  
## Examples  
 Im folgenden Beispiel werden die Standardformatbezeichner für Zahlen, Datumsangaben und Enumerationen veranschaulicht.  
  
 [!code-cpp[console.writelineFmt1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.writelineFmt1/cpp/wl.cpp#1)] 
 [!code-csharp[console.writelineFmt1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.writelineFmt1/cs/wl.cs#1)]
 [!code-vb[console.writelineFmt1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.writelineFmt1/vb/wl.vb#1)]  
  
 Im folgende Beispiel wird ein QuickInfo-Rechner, die ein Tipp 18 % berechnet und verwendet die <xref:System.Console.WriteLine%2A> Methode, um die Menge an den ursprünglichen Kosten, die Menge des Tipps und die Gesamtmenge anzuzeigen. Das Beispiel ist eine Konsolenanwendung, die der Benutzer die Menge der ursprünglichen kostenlos als Befehlszeilenparameter angeben muss.  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">The format specification in <paramref name="format" /> is invalid.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, object arg0, object arg1, object arg2, object arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object arg0, object arg1, object arg2, object arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (format As String, arg0 As Object, arg1 As Object, arg2 As Object, arg3 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2, System::Object ^ arg3);" />
      <MemberSignature Language="F#" Value="static member WriteLine : string * obj * obj * obj * obj -&gt; unit" Usage="System.Console.WriteLine (format, arg0, arg1, arg2, arg3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
        <Parameter Name="arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">A composite format string.</param>
        <param name="arg0">The first object to write using <c>format</c>.</param>
        <param name="arg1">The second object to write using <c>format</c>.</param>
        <param name="arg2">The third object to write using <c>format</c>.</param>
        <param name="arg3">The fourth object to write using <c>format</c>.</param>
        <summary>Writes the text representation of the specified objects and variable-length parameter list, followed by the current line terminator, to the standard output stream using the specified format information.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Diese API ist nicht CLS-kompatibel. Die CLS-kompatible Alternative ist <xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>. Die C#- und Visual Basic-Compiler automatisch auflösen, einen Aufruf dieser Methode als Aufruf <xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>.  
  
 Diese Methode verwendet die [Funktion für kombinierte Formatierung](~/docs/standard/base-types/composite-formatting.md) von .NET Framework, um den Wert eines Objekts in die Textdarstellung zu konvertieren und diese Darstellung in eine Zeichenfolge einzubetten. Die resultierende Zeichenfolge wird in den Ausgabestream geschrieben.  
  
 Die `format` -Parameter besteht aus 0 (null) oder mehreren Einheiten Text mit NULL oder mehr indizierten Platzhaltern enthalten, so genannten Formatelementen, die ein Objekt in der Parameterliste dieser Methode entsprechen. Der Formatierungsvorgang wird jedes Formatelement durch die Textdarstellung des Werts des entsprechenden Objekts ersetzt.  
  
 Die Syntax eines Formatelements ist `{` *Index*[`,`*Ausrichtung*] [`:`*"FormatString"*]`}`, gibt ein obligatorische Index, optionale Länge und Ausrichtung des formatierten Text und eine optionale Zeichenfolge von Formatbezeichnerzeichen, die steuern, wie der Wert des entsprechenden Objekts formatiert ist.  
  
 .NET Framework bietet eine umfangreiche formatierungsunterstützung, dies wird in den folgenden Themen zur Formatierung ausführlicher beschrieben.  
  
-   Weitere Informationen zu der Funktion für kombinierte Formatierung mit Methoden wie z. B. unterstützt <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, und einige Überladungen <xref:System.Console.WriteLine%2A>, finden Sie unter [kombinierte Formatierung](~/docs/standard/base-types/composite-formatting.md).  
  
-   Weitere Informationen zu numerischen Formatbezeichnern finden Sie unter [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) und [benutzerdefinierte Zahlenformatzeichenfolgen](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Weitere Informationen über Datum und Uhrzeit, die Formatbezeichner finden Sie unter [Standardformatbezeichner für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md) und [benutzerdefinierte Datums- und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
-   Weitere Informationen zu Formatbezeichnern finden Sie unter [Enumerationsformatzeichenfolgen](~/docs/standard/base-types/enumeration-format-strings.md).  
  
-   Weitere Informationen zur Formatierung finden Sie unter [Formatierung von Typen](~/docs/standard/base-types/formatting-types.md).  
  
 Weitere Informationen zu den für den Zeilenabschluss, finden Sie im Abschnitt "Hinweise" der <xref:System.Console.WriteLine%2A> -Methode, die keine Parameter akzeptiert.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Verwendung von Variablen Argumenten mit dem <xref:System.Console.WriteLine%28System.String%2CSystem.Object%2CSystem.Object%2CSystem.Object%2CSystem.Object%29> Methode. Die Methode wird mit einer kombinierten Formatzeichenfolge und fünf Formatelementen aufgerufen.  
  
 [!code-cpp[System.Console.WriteLine#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.WriteLine/CPP/writeline_vararg.cpp#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">The format specification in <paramref name="format" /> is invalid.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">zum Ändern von sicheren Fenster auf oberster Ebene und untergeordnete Fenster. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <block subset="none" type="usage">
          <para>Diese Methode ist mit markiert die <see langword="vararg" /> Schlüsselwort, das bedeutet, dass es sich um eine Variable Anzahl an Parametern unterstützt. Die Methode kann aufgerufen werden, von Visual C++, aber es kann nicht von c# oder Visual Basic-Code aufgerufen werden. Die C#- und Visual Basic-Compiler lösen Aufrufe an <see cref="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)" /> als Aufrufe von <see cref="M:System.Console.WriteLine(System.String,System.Object[])" />.</para>
        </block>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
  </Members>
</Type>
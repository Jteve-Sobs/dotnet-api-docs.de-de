<Type Name="Type" FullName="System.Type">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c62be0319fe7a3b473ac47a8e7b0afc1519eb5ff" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37731799" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class Type : System.Reflection.MemberInfo, System.Reflection.IReflect, System.Runtime.InteropServices._Type" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Type extends System.Reflection.MemberInfo implements class System.Reflection.IReflect, class System.Runtime.InteropServices._Type" />
  <TypeSignature Language="DocId" Value="T:System.Type" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Type&#xA;Inherits MemberInfo&#xA;Implements _Type, IReflect" />
  <TypeSignature Language="C++ CLI" Value="public ref class Type abstract : System::Reflection::MemberInfo, System::Reflection::IReflect, System::Runtime::InteropServices::_Type" />
  <TypeSignature Language="F#" Value="type Type = class&#xA;    inherit MemberInfo&#xA;    interface _Type&#xA;    interface IReflect" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.Reflection.MemberInfo</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Reflection.IReflect</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._Type</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._Type))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="96bec-101">Represents type declarations: class types, interface types, array types, value types, enumeration types, type parameters, generic type definitions, and open or closed constructed generic types.</span>
      <span class="sxs-lookup">
        <span data-stu-id="96bec-101">Represents type declarations: class types, interface types, array types, value types, enumeration types, type parameters, generic type definitions, and open or closed constructed generic types.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-102">`Type` ist der Stamm der <xref:System.Reflection> Funktionen und ist der einfachste Weg, um auf Metadaten zuzugreifen.</span><span class="sxs-lookup"><span data-stu-id="96bec-102">`Type` is the root of the <xref:System.Reflection> functionality and is the primary way to access metadata.</span></span> <span data-ttu-id="96bec-103">Verwenden Sie die Elemente der <xref:System.Type> zum Abrufen von Informationen über die Typdeklaration, über die Elemente eines Typs (z. B. die Konstruktoren, Methoden, Felder, Eigenschaften und Ereignisse von einer Klasse), sowie das Modul und die Assembly, in dem die Klasse bereitgestellt wird.</span><span class="sxs-lookup"><span data-stu-id="96bec-103">Use the members of <xref:System.Type> to get information about a type declaration, about the members of a type (such as the constructors, methods, fields, properties, and events of a class), as well as the module and the assembly in which the class is deployed.</span></span>  
  
 <span data-ttu-id="96bec-104">Es sind keine Berechtigungen erforderlich, damit Code Reflektion verwenden, um Informationen zu Typen und Member, unabhängig von ihrer Zugriffsebenen zu erhalten.</span><span class="sxs-lookup"><span data-stu-id="96bec-104">No permissions are required for code to use reflection to get information about types and their members, regardless of their access levels.</span></span> <span data-ttu-id="96bec-105">Es sind keine Berechtigungen erforderlich, damit Code Reflektion verwenden, um Zugriff auf öffentliche Member oder andere Elemente, deren Zugriffsebenen sie während der normalen Kompilierung sichtbar wäre.</span><span class="sxs-lookup"><span data-stu-id="96bec-105">No permissions are required for code to use reflection to access public members, or other members whose access levels would make them visible during normal compilation.</span></span> <span data-ttu-id="96bec-106">Allerdings nacheinander für Ihren Code Reflektion, um Zugriff auf Member zu verwenden, die normalerweise nicht zugegriffen werden kann, z. B. private oder interne Methoden werden, oder geschützte Felder eines Typs, die die Klasse erbt nicht, Ihr Code müssen <xref:System.Security.Permissions.ReflectionPermission>.</span><span class="sxs-lookup"><span data-stu-id="96bec-106">However, in order for your code to use reflection to access members that would normally be inaccessible, such as private or internal methods, or protected fields of a type your class does not inherit, your code must have <xref:System.Security.Permissions.ReflectionPermission>.</span></span> <span data-ttu-id="96bec-107">Finden Sie unter [Überlegungen zur Sicherheit für die Reflektion](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span><span class="sxs-lookup"><span data-stu-id="96bec-107">See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span></span>  
  
 <span data-ttu-id="96bec-108">`Type` ist eine abstrakte Basisklasse, die mehrere Implementierungen ermöglicht.</span><span class="sxs-lookup"><span data-stu-id="96bec-108">`Type` is an abstract base class that allows multiple implementations.</span></span> <span data-ttu-id="96bec-109">Das System stellt immer die abgeleitete Klasse `RuntimeType`.</span><span class="sxs-lookup"><span data-stu-id="96bec-109">The system will always provide the derived class `RuntimeType`.</span></span> <span data-ttu-id="96bec-110">In der Reflektion werden alle Klassen, die mit dem Wort Common Language Runtime beginnt nur einmal pro Objekt in der System- und Unterstützung Vergleichsvorgängen erstellt.</span><span class="sxs-lookup"><span data-stu-id="96bec-110">In reflection, all classes beginning with the word Runtime are created only once per object in the system and support comparison operations.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-111">Multithreading Szenarien, Sperren Sie keine <xref:System.Type> Objekte zum Synchronisieren des Zugriffs auf `static` Daten.</span><span class="sxs-lookup"><span data-stu-id="96bec-111">In multithreading scenarios, do not lock <xref:System.Type> objects in order to synchronize access to `static` data.</span></span> <span data-ttu-id="96bec-112">Anderer Code, in dem Sie keine Kontrolle, haben möglicherweise auch Ihr Klassentyp sperren.</span><span class="sxs-lookup"><span data-stu-id="96bec-112">Other code, over which you have no control, might also lock your class type.</span></span> <span data-ttu-id="96bec-113">Dies kann zu einem Deadlock führen.</span><span class="sxs-lookup"><span data-stu-id="96bec-113">This might result in a deadlock.</span></span> <span data-ttu-id="96bec-114">Synchronisieren Sie den Zugriff auf statische Daten stattdessen von Sperren eines privaten `static` Objekt.</span><span class="sxs-lookup"><span data-stu-id="96bec-114">Instead, synchronize access to static data by locking a private `static` object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-115">Eine abgeleitete Klasse kann es sich um geschützte Member der Basisklassen des aufrufenden Codes zugreifen.</span><span class="sxs-lookup"><span data-stu-id="96bec-115">A derived class can access protected members of the calling code's base classes.</span></span> <span data-ttu-id="96bec-116">Darüber hinaus ist der Zugriff auf Assemblymember des aufrufenden Codes Assembly zulässig.</span><span class="sxs-lookup"><span data-stu-id="96bec-116">Also, access is allowed to assembly members of the calling code's assembly.</span></span> <span data-ttu-id="96bec-117">Wenn Sie den Zugriff im Code früh gebundene dürfen er in der Regel auch in spät gebundenen Code zulässig.</span><span class="sxs-lookup"><span data-stu-id="96bec-117">As a rule, if you are allowed access in early-bound code, then you are also allowed access in late-bound code.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-118">Schnittstellen, die andere Schnittstellen erweitern erben nicht die Methoden, die in die erweiterten Schnittstellen definiert.</span><span class="sxs-lookup"><span data-stu-id="96bec-118">Interfaces that extend other interfaces do not inherit the methods defined in the extended interfaces.</span></span>  
  
 <span data-ttu-id="96bec-119">In diesem Abschnitt</span><span class="sxs-lookup"><span data-stu-id="96bec-119">In this section:</span></span>  
  
 <span data-ttu-id="96bec-120">[Welche Typen stellt ein Typobjekt dar?](#WhatTypes) </span><span class="sxs-lookup"><span data-stu-id="96bec-120">[What types does a Type object represent?](#WhatTypes) </span></span>  
 <span data-ttu-id="96bec-121">[Abrufen eines Typobjekt](#Retrieve) </span><span class="sxs-lookup"><span data-stu-id="96bec-121">[Retrieving a Type object](#Retrieve) </span></span>  
 [<span data-ttu-id="96bec-122">Vergleichen von Typ Objekte auf Gleichheit</span><span class="sxs-lookup"><span data-stu-id="96bec-122">Comparing type objects for equality</span></span>](#Equality)  
  
<a name="WhatTypes"></a>   
## <a name="what-types-does-a-type-object-represent"></a><span data-ttu-id="96bec-123">Welche Typen stellt ein Typobjekt dar?</span><span class="sxs-lookup"><span data-stu-id="96bec-123">What types does a Type object represent?</span></span>  
 <span data-ttu-id="96bec-124">Diese Klasse ist threadsicher. eine Instanz dieses Typs können mehrere Threads gleichzeitig gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-124">This class is thread safe; multiple threads can concurrently read from an instance of this type.</span></span> <span data-ttu-id="96bec-125">Eine Instanz von der <xref:System.Type> Klasse kann einen der folgenden Typen darstellen:</span><span class="sxs-lookup"><span data-stu-id="96bec-125">An instance of the <xref:System.Type> class can represent any of the following types:</span></span>  
  
-   <span data-ttu-id="96bec-126">Klassen</span><span class="sxs-lookup"><span data-stu-id="96bec-126">Classes</span></span>  
  
-   <span data-ttu-id="96bec-127">Werttypen</span><span class="sxs-lookup"><span data-stu-id="96bec-127">Value types</span></span>  
  
-   <span data-ttu-id="96bec-128">Arrays</span><span class="sxs-lookup"><span data-stu-id="96bec-128">Arrays</span></span>  
  
-   <span data-ttu-id="96bec-129">Schnittstellen</span><span class="sxs-lookup"><span data-stu-id="96bec-129">Interfaces</span></span>  
  
-   <span data-ttu-id="96bec-130">Enumerationen</span><span class="sxs-lookup"><span data-stu-id="96bec-130">Enumerations</span></span>  
  
-   <span data-ttu-id="96bec-131">Delegaten</span><span class="sxs-lookup"><span data-stu-id="96bec-131">Delegates</span></span>  
  
-   <span data-ttu-id="96bec-132">Konstruierte generische Typen und generische Typdefinitionen</span><span class="sxs-lookup"><span data-stu-id="96bec-132">Constructed generic types and generic type definitions</span></span>  
  
-   <span data-ttu-id="96bec-133">Geben Sie Argumente und Parameter der konstruierte generische Typen, generische Typdefinitionen und generischen Methodendefinitionen</span><span class="sxs-lookup"><span data-stu-id="96bec-133">Type arguments and type parameters of constructed generic types, generic type definitions, and generic method definitions</span></span>  
  
<a name="Retrieve"></a>   
## <a name="retrieving-a-type-object"></a><span data-ttu-id="96bec-134">Abrufen eines Typobjekt</span><span class="sxs-lookup"><span data-stu-id="96bec-134">Retrieving a Type object</span></span>  
 <span data-ttu-id="96bec-135">Die <xref:System.Type> einen bestimmten Typ zugeordnete Objekt abgerufen werden kann, es gibt folgende Möglichkeiten:</span><span class="sxs-lookup"><span data-stu-id="96bec-135">The <xref:System.Type> object associated with a particular type can be obtained in the following ways:</span></span>  
  
-   <span data-ttu-id="96bec-136">Die Instanz <xref:System.Object.GetType%2A?displayProperty=nameWithType> Methode gibt eine <xref:System.Type> -Objekt, das den Typ einer Instanz darstellt.</span><span class="sxs-lookup"><span data-stu-id="96bec-136">The instance <xref:System.Object.GetType%2A?displayProperty=nameWithType> method returns a <xref:System.Type> object that represents the type of an instance.</span></span> <span data-ttu-id="96bec-137">Da alle verwaltete Typen abgeleitet <xref:System.Object>, <xref:System.Object.GetType%2A> Methode für eine Instanz eines beliebigen Typs aufgerufen werden kann.</span><span class="sxs-lookup"><span data-stu-id="96bec-137">Because all managed types derive from <xref:System.Object>, the <xref:System.Object.GetType%2A> method can be called on an instance of any type.</span></span>  
  
     <span data-ttu-id="96bec-138">Im folgenden Beispiel wird die <xref:System.Object.GetType%2A?displayProperty=nameWithType> Methode, um den Laufzeittyp der einzelnen Objekte in einem Objektarray festzulegen.</span><span class="sxs-lookup"><span data-stu-id="96bec-138">The following example calls the <xref:System.Object.GetType%2A?displayProperty=nameWithType> method to determine the runtime type of each object in an object array.</span></span>  
  
     [!code-cpp[System.Type#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type/cpp/GetType1.cpp#2)]
     [!code-csharp[System.Type#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type/cs/GetType1.cs#2)]
     [!code-vb[System.Type#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type/vb/GetType1.vb#2)]  
  
-   <span data-ttu-id="96bec-139">Die statische <xref:System.Type.GetType%2A?displayProperty=nameWithType> Methoden zurückgeben einer <xref:System.Type> -Objekt, das einen durch den vollständig qualifizierten Namen angegebenen Typ darstellt.</span><span class="sxs-lookup"><span data-stu-id="96bec-139">The static <xref:System.Type.GetType%2A?displayProperty=nameWithType> methods return a <xref:System.Type> object that represents a type specified by its fully qualified name.</span></span>  
  
-   <span data-ttu-id="96bec-140">Die <xref:System.Reflection.Module.GetTypes%2A?displayProperty=nameWithType>, <xref:System.Reflection.Module.GetType%2A?displayProperty=nameWithType>, und <xref:System.Reflection.Module.FindTypes%2A?displayProperty=nameWithType> Methoden zurückgeben `Type` -Objekten, die in einem Modul definierten Typen darstellen.</span><span class="sxs-lookup"><span data-stu-id="96bec-140">The <xref:System.Reflection.Module.GetTypes%2A?displayProperty=nameWithType>, <xref:System.Reflection.Module.GetType%2A?displayProperty=nameWithType>, and <xref:System.Reflection.Module.FindTypes%2A?displayProperty=nameWithType> methods return `Type` objects that represent the types defined in a module.</span></span> <span data-ttu-id="96bec-141">Die erste Methode kann zum Abrufen eines Arrays von <xref:System.Type> Objekte für alle öffentlichen und privaten Typen, die in einem Modul definiert.</span><span class="sxs-lookup"><span data-stu-id="96bec-141">The first method can be used to obtain an array of <xref:System.Type> objects for all the public and private types defined in a module.</span></span> <span data-ttu-id="96bec-142">(Sie erhalten eine Instanz von `Module` über die <xref:System.Reflection.Assembly.GetModule%2A?displayProperty=nameWithType> oder <xref:System.Reflection.Assembly.GetModules%2A?displayProperty=nameWithType> -Methode, oder über die <xref:System.Type.Module%2A?displayProperty=nameWithType> Eigenschaft.)</span><span class="sxs-lookup"><span data-stu-id="96bec-142">(You can obtain an instance of `Module` through the <xref:System.Reflection.Assembly.GetModule%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetModules%2A?displayProperty=nameWithType> method, or through the <xref:System.Type.Module%2A?displayProperty=nameWithType> property.)</span></span>  
  
-   <span data-ttu-id="96bec-143">Die <xref:System.Reflection.Assembly?displayProperty=nameWithType> Objekt enthält eine Reihe von Methoden zum Abrufen von der Klassen, die in einer Assembly definiert, einschließlich <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>, <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType>, und <xref:System.Reflection.Assembly.GetExportedTypes%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="96bec-143">The <xref:System.Reflection.Assembly?displayProperty=nameWithType> object contains a number of methods to retrieve the classes defined in an assembly, including <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>, <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType>, and <xref:System.Reflection.Assembly.GetExportedTypes%2A?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="96bec-144">Die <xref:System.Type.FindInterfaces%2A> Methode gibt eine gefilterte Liste der Schnittstellentypen, die von einem Typ unterstützt.</span><span class="sxs-lookup"><span data-stu-id="96bec-144">The <xref:System.Type.FindInterfaces%2A> method returns a filtered list of interface types supported by a type.</span></span>  
  
-   <span data-ttu-id="96bec-145">Die <xref:System.Type.GetElementType%2A> Methode gibt eine `Type` -Objekt, das Element darstellt.</span><span class="sxs-lookup"><span data-stu-id="96bec-145">The <xref:System.Type.GetElementType%2A> method returns a `Type` object that represents the element.</span></span>  
  
-   <span data-ttu-id="96bec-146">Die <xref:System.Type.GetInterfaces%2A> und <xref:System.Type.GetInterface%2A> Methoden zurückgeben <xref:System.Type> Objekte, die von einem Typ unterstützten Schnittstellentypen darstellt.</span><span class="sxs-lookup"><span data-stu-id="96bec-146">The <xref:System.Type.GetInterfaces%2A> and <xref:System.Type.GetInterface%2A> methods return <xref:System.Type> objects representing the interface types supported by a type.</span></span>  
  
-   <span data-ttu-id="96bec-147">Die <xref:System.Type.GetTypeArray%2A> Methode gibt ein Array von <xref:System.Type> Objekte, die durch einen beliebigen Satz von Objekten angegebenen Typen darstellen.</span><span class="sxs-lookup"><span data-stu-id="96bec-147">The <xref:System.Type.GetTypeArray%2A> method returns an array of <xref:System.Type> objects representing the types specified by an arbitrary set of objects.</span></span> <span data-ttu-id="96bec-148">Die Objekte sind mit einem Array des Typs angegeben <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="96bec-148">The objects are specified with an array of type <xref:System.Object>.</span></span>  
  
-   <span data-ttu-id="96bec-149">Die <xref:System.Type.GetTypeFromProgID%2A> und <xref:System.Type.GetTypeFromCLSID%2A> Methoden für COM-Interoperabilität bereitgestellt werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-149">The <xref:System.Type.GetTypeFromProgID%2A> and <xref:System.Type.GetTypeFromCLSID%2A> methods are provided for COM interoperability.</span></span> <span data-ttu-id="96bec-150">Sie zurückgeben einer <xref:System.Type> -Objekt, den vom angegebenen Typ darstellt. ein `ProgID` oder `CLSID`.</span><span class="sxs-lookup"><span data-stu-id="96bec-150">They return a <xref:System.Type> object that represents the type specified by a `ProgID` or `CLSID`.</span></span>  
  
-   <span data-ttu-id="96bec-151">Die <xref:System.Type.GetTypeFromHandle%2A> Methode wird für die Interoperabilität bereitgestellt.</span><span class="sxs-lookup"><span data-stu-id="96bec-151">The <xref:System.Type.GetTypeFromHandle%2A> method is provided for interoperability.</span></span> <span data-ttu-id="96bec-152">Gibt eine `Type` -Objekt, den durch ein Klassenhandle angegebenen Typ darstellt.</span><span class="sxs-lookup"><span data-stu-id="96bec-152">It returns a `Type` object that represents the type specified by a class handle.</span></span>  
  
-   <span data-ttu-id="96bec-153">Die C#- `typeof` Operator an, die C++ `typeid` Operator und die Visual Basic `GetType` Operator erhalten die `Type` Objekt für einen Typ.</span><span class="sxs-lookup"><span data-stu-id="96bec-153">The C# `typeof` operator, the C++ `typeid` operator, and the Visual Basic `GetType` operator obtain the `Type` object for a type.</span></span>  
  
-   <span data-ttu-id="96bec-154">Die <xref:System.Type.MakeGenericType%2A> Methode gibt eine <xref:System.Type> Objekt einen konstruierten generischen Typ, der ein offener Typ ist, darstellt, die <xref:System.Type.ContainsGenericParameters%2A> -Eigenschaft gibt `true`, und einem geschlossenen konstruierten Typ andernfalls.</span><span class="sxs-lookup"><span data-stu-id="96bec-154">The <xref:System.Type.MakeGenericType%2A> method returns a <xref:System.Type> object representing a constructed generic type, which is an open constructed type if its <xref:System.Type.ContainsGenericParameters%2A> property returns `true`, and a closed constructed type otherwise.</span></span> <span data-ttu-id="96bec-155">Ein generischer Typ kann instanziiert werden, nur, wenn es geschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-155">A generic type can be instantiated only if it is closed.</span></span>  
  
-   <span data-ttu-id="96bec-156">Die <xref:System.Type.MakeArrayType%2A>, <xref:System.Type.MakePointerType%2A>, und <xref:System.Type.MakeByRefType%2A> Methoden zurückgeben <xref:System.Type> darstellende – Objekte, bzw. ein Array des angegebenen Typs, der einen Zeiger auf einen angegebenen Typ und den Typ des Verweisparameters (`ref` in c# `ByRef`in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="96bec-156">The <xref:System.Type.MakeArrayType%2A>, <xref:System.Type.MakePointerType%2A>, and <xref:System.Type.MakeByRefType%2A> methods return <xref:System.Type> objects that represent, respectively, an array of a specified type, a pointer to a specified type, and the type of a reference parameter (`ref` in C#, `ByRef` in Visual Basic).</span></span>  
  
<a name="Equality"></a>   
## <a name="comparing-type-objects-for-equality"></a><span data-ttu-id="96bec-157">Vergleichen von Typ Objekte auf Gleichheit</span><span class="sxs-lookup"><span data-stu-id="96bec-157">Comparing type objects for equality</span></span>  
 <span data-ttu-id="96bec-158">Ein <xref:System.Type> -Objekt, stellt ein Typ eindeutig ist, d. h. zwei <xref:System.Type> Objektverweise auf dasselbe Objekt verweisen, wenn sie denselben Typ darstellen.</span><span class="sxs-lookup"><span data-stu-id="96bec-158">A <xref:System.Type> object that represents a type is unique; that is, two <xref:System.Type> object references refer to the same object if and only if they represent the same type.</span></span> <span data-ttu-id="96bec-159">Dies ermöglicht den Vergleich von <xref:System.Type> Objekte mithilfe von Verweisgleichheit.</span><span class="sxs-lookup"><span data-stu-id="96bec-159">This allows for comparison of <xref:System.Type> objects using reference equality.</span></span> <span data-ttu-id="96bec-160">Im folgenden Beispiel wird die <xref:System.Type> Objekte, die als von ganzzahligen Werten Zahl, um zu bestimmen, ob diese vom gleichen Typ sind.</span><span class="sxs-lookup"><span data-stu-id="96bec-160">The following example compares the <xref:System.Type> objects that represent a number of integer values to determine whether they are of the same type.</span></span>  
  
 [!code-cpp[System.Type#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type/cpp/Equals1.cpp#3)]
 [!code-csharp[System.Type#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type/cs/Equals1.cs#3)]
 [!code-vb[System.Type#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type/vb/Equals1.vb#3)]  
  
   
  
## Examples  
 <span data-ttu-id="96bec-161">Das folgende Beispiel zeigt einige repräsentative Features von <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="96bec-161">The following  example shows a few representative features of <xref:System.Type>.</span></span> <span data-ttu-id="96bec-162">Die C#- `typeof` Operator (`GetType` -Operator in Visual Basic, `typeid` -Operator in Visual C++) Dient zum Abrufen einer <xref:System.Type> Objekt darstellt <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="96bec-162">The C# `typeof` operator (`GetType` operator in Visual Basic, `typeid` operator in Visual C++) is used to get a <xref:System.Type> object representing <xref:System.String>.</span></span> <span data-ttu-id="96bec-163">Aus diesem <xref:System.Type> Objekt die <xref:System.Type.GetMethod%2A> Methode dient zum Abrufen einer <xref:System.Reflection.MethodInfo> darstellt der <xref:System.String.Substring%2A> Überladung, die eine Anfangsposition und eine Länge akzeptiert.</span><span class="sxs-lookup"><span data-stu-id="96bec-163">From this <xref:System.Type> object, the <xref:System.Type.GetMethod%2A> method is used to get a <xref:System.Reflection.MethodInfo> representing the <xref:System.String.Substring%2A> overload that takes a starting location and a length.</span></span>  
  
 <span data-ttu-id="96bec-164">Um die Überladungssignatur zu identifizieren, das Codebeispiel erstellt ein temporäres Array mit zwei <xref:System.Type> Objekte darstellt `int` (`Integer` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="96bec-164">To identify the overload signature, the code example creates a temporary array containing two <xref:System.Type> objects representing `int` (`Integer` in Visual Basic).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-165">Genauer gesagt, das Array enthält zwei Verweise auf die Instanz von <xref:System.Type> darstellender `int` in der aktuellen Anwendungsdomäne.</span><span class="sxs-lookup"><span data-stu-id="96bec-165">To be precise, the array contains two references to the instance of <xref:System.Type> that represents `int` in the current application domain.</span></span> <span data-ttu-id="96bec-166">Für jeden Typ, es gibt nur eine Instanz des <xref:System.Type> pro Anwendungsdomäne.</span><span class="sxs-lookup"><span data-stu-id="96bec-166">For any type, there is only one instance of <xref:System.Type> per application domain.</span></span>  
  
 <span data-ttu-id="96bec-167">Das Codebeispiel verwendet die <xref:System.Reflection.MethodInfo> zum Aufrufen der <xref:System.String.Substring%2A> Methode in der Zeichenfolge "Hello, World!", und das Ergebnis wird angezeigt.</span><span class="sxs-lookup"><span data-stu-id="96bec-167">The code example uses the <xref:System.Reflection.MethodInfo> to invoke the <xref:System.String.Substring%2A> method on the string "Hello, World!", and displays the result.</span></span>  
  
 [!code-cpp[System.Type#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type/cpp/source.cpp#1)]
 [!code-csharp[System.Type#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type/cs/source.cs#1)]
 [!code-vb[System.Type#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="96bec-168">Dieser Typ ist threadsicher.</span>
      <span class="sxs-lookup">
        <span data-stu-id="96bec-168">This type is thread safe.</span>
      </span>
    </threadsafe>
    <block subset="none" type="overrides">
      <span data-ttu-id="96bec-169">
        <para>Beim Erben von <see langword="Type" />, müssen Sie die folgenden Member überschreiben:- <see cref="P:System.Type.Assembly" />   
  
-    <see cref="P:System.Type.AssemblyQualifiedName" />   
  
-    <see cref="P:System.Type.BaseType" />   
  
-    <see cref="P:System.Type.FullName" />   
  
-    <see cref="M:System.Type.GetAttributeFlagsImpl" />   
  
-   <see cref="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />  
  
-   <see cref="M:System.Type.GetConstructors(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetElementType" />  
  
-   <see cref="M:System.Type.GetEvent(System.String,System.Reflection.BindingFlags)" /> ,  -   <see cref="M:System.Type.GetEvents(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetFields(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetInterface(System.String,System.Boolean)" />  
  
-   <see cref="M:System.Type.GetInterfaces" />  
  
-   <see cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />  
  
-   <see cref="M:System.Type.GetMethods(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetNestedType(System.String,System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetNestedTypes(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />  
  
-   <see cref="P:System.Type.GUID" />  
  
-   <see cref="M:System.Type.HasElementTypeImpl" />  
  
-   <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />  
  
-   <see cref="M:System.Type.IsArrayImpl" />  
  
-   <see cref="M:System.Type.IsByRefImpl" />  
  
-   <see cref="M:System.Type.IsCOMObjectImpl" />  
  
-   <see cref="M:System.Type.IsPointerImpl" />  
  
-   <see cref="M:System.Type.IsPrimitiveImpl" />  
  
-   <see cref="P:System.Type.Module" />  
  
-   <see cref="P:System.Type.Namespace" />  
  
-   <see cref="P:System.Type.TypeHandle" />  
  
-   <see cref="P:System.Type.UnderlyingSystemType" />  
  
-   <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" />  
  
-   <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)" />  
  
-   <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" />  
  
-   <see cref="P:System.Reflection.MemberInfo.Name" /></para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="96bec-169">
          <para>When you inherit from <see langword="Type" />, you must override the following members:  -   <see cref="P:System.Type.Assembly" />  
  
-   <see cref="P:System.Type.AssemblyQualifiedName" />  
  
-   <see cref="P:System.Type.BaseType" />  
  
-   <see cref="P:System.Type.FullName" />  
  
-   <see cref="M:System.Type.GetAttributeFlagsImpl" />  
  
-   <see cref="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />  
  
-   <see cref="M:System.Type.GetConstructors(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetElementType" />  
  
-   <see cref="M:System.Type.GetEvent(System.String,System.Reflection.BindingFlags)" /> ,  -   <see cref="M:System.Type.GetEvents(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetFields(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetInterface(System.String,System.Boolean)" />  
  
-   <see cref="M:System.Type.GetInterfaces" />  
  
-   <see cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />  
  
-   <see cref="M:System.Type.GetMethods(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetNestedType(System.String,System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetNestedTypes(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />  
  
-   <see cref="P:System.Type.GUID" />  
  
-   <see cref="M:System.Type.HasElementTypeImpl" />  
  
-   <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />  
  
-   <see cref="M:System.Type.IsArrayImpl" />  
  
-   <see cref="M:System.Type.IsByRefImpl" />  
  
-   <see cref="M:System.Type.IsCOMObjectImpl" />  
  
-   <see cref="M:System.Type.IsPointerImpl" />  
  
-   <see cref="M:System.Type.IsPrimitiveImpl" />  
  
-   <see cref="P:System.Type.Module" />  
  
-   <see cref="P:System.Type.Namespace" />  
  
-   <see cref="P:System.Type.TypeHandle" />  
  
-   <see cref="P:System.Type.UnderlyingSystemType" />  
  
-   <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" />  
  
-   <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)" />  
  
-   <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" />  
  
-   <see cref="P:System.Reflection.MemberInfo.Name" /></para>
        </span>
      </span>
    </block>
    <altmember cref="T:System.Object" />
    <altmember cref="N:System.Reflection" />
    <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Type ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Type();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="96bec-170">Initializes a new instance of the <see cref="T:System.Type" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-170">Initializes a new instance of the <see cref="T:System.Type" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-171">Dieser Konstruktor wird von abgeleiteten Klassen aufgerufen, während der Konstruktion von Objekten des Typs.</span><span class="sxs-lookup"><span data-stu-id="96bec-171">This constructor is invoked by derived classes during the construction of type objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Assembly">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.Assembly Assembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly Assembly" />
      <MemberSignature Language="DocId" Value="P:System.Type.Assembly" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Assembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Reflection::Assembly ^ Assembly { System::Reflection::Assembly ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Assembly : System.Reflection.Assembly" Usage="System.Type.Assembly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.Assembly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-172">Gets the <see cref="T:System.Reflection.Assembly" /> in which the type is declared.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-172">Gets the <see cref="T:System.Reflection.Assembly" /> in which the type is declared.</span>
          </span>
          <span data-ttu-id="96bec-173">For generic types, gets the <see cref="T:System.Reflection.Assembly" /> in which the generic type is defined.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-173">For generic types, gets the <see cref="T:System.Reflection.Assembly" /> in which the generic type is defined.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-174">Eine <see cref="T:System.Reflection.Assembly" />-Instanz, die die Assembly mit dem aktuellen Typ beschreibt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-174">An <see cref="T:System.Reflection.Assembly" /> instance that describes the assembly containing the current type.</span>
          </span>
          <span data-ttu-id="96bec-175">Bei generischen Typen beschreibt die Instanz die Assembly, die die generische Typdefinition enthält, nicht die Assembly, in der ein bestimmter konstruierter Typ erstellt und verwendet wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-175">For generic types, the instance describes the assembly that contains the generic type definition, not the assembly that creates and uses a particular constructed type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-176">Wenn die aktuelle <xref:System.Type> -Objekt stellt einen konstruierten generischen Typ dar, das diese Eigenschaft gibt die Assembly, die generische Typdefinition enthält.</span><span class="sxs-lookup"><span data-stu-id="96bec-176">If the current <xref:System.Type> object represents a constructed generic type, this property returns the assembly that contains the generic type definition.</span></span> <span data-ttu-id="96bec-177">Nehmen wir beispielsweise an, die Sie erstellen eine Assembly mit dem Namen MyGenerics.dll, die die generische Typdefinition enthält `MyGenericStack<T>` (`MyGenericStack(Of T)` in Visual Basic `generic<T> ref class MyGenericStack` in C++).</span><span class="sxs-lookup"><span data-stu-id="96bec-177">For example, suppose you create an assembly named MyGenerics.dll that contains the generic type definition `MyGenericStack<T>` (`MyGenericStack(Of T)` in Visual Basic, `generic<T> ref class MyGenericStack` in C++).</span></span> <span data-ttu-id="96bec-178">Bei der Erstellung einer Instanz von `MyGenericStack<int>` (`MyGenericStack(Of Integer)` in Visual Basic) in einer anderen Assembly, die <xref:System.Type.Assembly%2A> -Eigenschaft für den konstruierten Typ gibt eine <xref:System.Reflection.Assembly> -Objekt, das MyGenerics.dll darstellt.</span><span class="sxs-lookup"><span data-stu-id="96bec-178">If you create an instance of `MyGenericStack<int>` (`MyGenericStack(Of Integer)` in Visual Basic) in another assembly, the <xref:System.Type.Assembly%2A> property for the constructed type returns an <xref:System.Reflection.Assembly> object that represents MyGenerics.dll.</span></span>  
  
 <span data-ttu-id="96bec-179">Auf ähnliche Weise, wenn die aktuelle <xref:System.Type> Objekt darstellt, einen nicht zugewiesenen generischen Parameter `T`, diese Eigenschaft gibt die Assembly, die den generischen Typ enthält, die definiert `T`.</span><span class="sxs-lookup"><span data-stu-id="96bec-179">Similarly, if the current <xref:System.Type> object represents an unassigned generic parameter `T`, this property returns the assembly that contains the generic type that defines `T`.</span></span>  
  
 <span data-ttu-id="96bec-180">Wenn die <xref:System.Type.Assembly%2A?displayProperty=nameWithType> Eigenschaft ist nicht in einer bestimmten .NET-Implementierung, z. B. .NET Core- oder die universelle Windows-Plattform verfügbar, verwenden Sie die <xref:System.Reflection.TypeInfo.Assembly?displayProperty=nameWithType> Eigenschaft stattdessen.</span><span class="sxs-lookup"><span data-stu-id="96bec-180">If the <xref:System.Type.Assembly%2A?displayProperty=nameWithType> property is not available on a particular .NET implementation, such as .NET Core or the Universal Windows Platform, use the <xref:System.Reflection.TypeInfo.Assembly?displayProperty=nameWithType> property instead.</span></span>      
  
 <span data-ttu-id="96bec-181">Diese Eigenschaft ist schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="96bec-181">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-182">Das folgende Beispiel zeigt den Namen der Assembly, der Klasse zugeordnet und der vollqualifizierte Name des Typs.</span><span class="sxs-lookup"><span data-stu-id="96bec-182">The following example displays the assembly name associated with the class and the fully qualified name of the type.</span></span>  
  
 [!code-cpp[Type_Assembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_Assembly/CPP/type_assembly.cpp#1)]
 [!code-csharp[Type_Assembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_Assembly/CS/type_assembly.cs#1)]
 [!code-vb[Type_Assembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_Assembly/VB/type_assembly.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AssemblyQualifiedName">
      <MemberSignature Language="C#" Value="public abstract string AssemblyQualifiedName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AssemblyQualifiedName" />
      <MemberSignature Language="DocId" Value="P:System.Type.AssemblyQualifiedName" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property AssemblyQualifiedName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ AssemblyQualifiedName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AssemblyQualifiedName : string" Usage="System.Type.AssemblyQualifiedName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.AssemblyQualifiedName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-183">Gets the assembly-qualified name of the type, which includes the name of the assembly from which this <see cref="T:System.Type" /> object was loaded.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-183">Gets the assembly-qualified name of the type, which includes the name of the assembly from which this <see cref="T:System.Type" /> object was loaded.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-184">Der durch die Assembly qualifizierte Name des <see cref="T:System.Type" />, der den Namen der Assembly enthält, aus der der <see cref="T:System.Type" /> geladen wurde, oder <see langword="null" />, wenn die aktuelle Instanz einen generischen Typparameter darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-184">The assembly-qualified name of the <see cref="T:System.Type" />, which includes the name of the assembly from which the <see cref="T:System.Type" /> was loaded, or <see langword="null" /> if the current instance represents a generic type parameter.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-185">Die Assembly qualifizierten Namen eines Typs besteht aus der Typname, einschließlich des Namespaces, gefolgt von einem Komma, gefolgt von den Anzeigenamen der Assembly.</span><span class="sxs-lookup"><span data-stu-id="96bec-185">The assembly-qualified name of a type consists of the type name, including its namespace, followed by a comma, followed by the display name of the assembly.</span></span> <span data-ttu-id="96bec-186">Der Anzeigename einer Assembly mit abgerufen wird die <xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="96bec-186">The display name of an assembly is obtained using the <xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-187">In .NET Framework, Version 2.0 Prozessorarchitektur Assemblyidentität hinzugefügt wird, und kann als Teil der Assembly-Zeichenfolgen angegeben werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-187">In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings.</span></span> <span data-ttu-id="96bec-188">Z. B. "ProcessorArchitecture = Msil".</span><span class="sxs-lookup"><span data-stu-id="96bec-188">For example, "ProcessorArchitecture=msil".</span></span> <span data-ttu-id="96bec-189">Es ist jedoch nicht enthalten in der Zeichenfolge, die vom der <xref:System.Type.AssemblyQualifiedName%2A> Eigenschaft aus Kompatibilitätsgründen.</span><span class="sxs-lookup"><span data-stu-id="96bec-189">However, it is not included in the string returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, for compatibility reasons.</span></span> <span data-ttu-id="96bec-190">Siehe <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="96bec-190">See <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="96bec-191">Alle Compiler, die die common Language Runtime unterstützen, geben den einfachen Namen einer geschachtelten Klasse und Reflektion erstellt einen ergänzten Namen in Übereinstimmung mit den folgenden Konventionen abgefragt.</span><span class="sxs-lookup"><span data-stu-id="96bec-191">All compilers that support the common language runtime emit the simple name of a nested class, and reflection constructs a mangled name when queried, in accordance with the following conventions.</span></span>  
  
|<span data-ttu-id="96bec-192">Trennzeichen</span><span class="sxs-lookup"><span data-stu-id="96bec-192">Delimiter</span></span>|<span data-ttu-id="96bec-193">Bedeutung</span><span class="sxs-lookup"><span data-stu-id="96bec-193">Meaning</span></span>|  
|---------------|-------------|  
|<span data-ttu-id="96bec-194">Umgekehrter Schrägstrich (\\)</span><span class="sxs-lookup"><span data-stu-id="96bec-194">Backslash (\\)</span></span>|<span data-ttu-id="96bec-195">Escape-Zeichen.</span><span class="sxs-lookup"><span data-stu-id="96bec-195">Escape character.</span></span>|  
|<span data-ttu-id="96bec-196">Komma (,)</span><span class="sxs-lookup"><span data-stu-id="96bec-196">Comma (,)</span></span>|<span data-ttu-id="96bec-197">Der Name der Assembly wird vorangestellt.</span><span class="sxs-lookup"><span data-stu-id="96bec-197">Precedes the Assembly name.</span></span>|  
|<span data-ttu-id="96bec-198">Pluszeichen (+)</span><span class="sxs-lookup"><span data-stu-id="96bec-198">Plus sign (+)</span></span>|<span data-ttu-id="96bec-199">Steht vor einer geschachtelten Klasse.</span><span class="sxs-lookup"><span data-stu-id="96bec-199">Precedes a nested class.</span></span>|  
|<span data-ttu-id="96bec-200">Punkt (.)</span><span class="sxs-lookup"><span data-stu-id="96bec-200">Period (.)</span></span>|<span data-ttu-id="96bec-201">Bezeichnet die Namespacebezeichner.</span><span class="sxs-lookup"><span data-stu-id="96bec-201">Denotes namespace identifiers.</span></span>|  
|<span data-ttu-id="96bec-202">Eckige Klammern ([])</span><span class="sxs-lookup"><span data-stu-id="96bec-202">Brackets ([])</span></span>|<span data-ttu-id="96bec-203">Nach der ein Typname gibt Sie ein Array dieses Typs an.</span><span class="sxs-lookup"><span data-stu-id="96bec-203">After a type name, denotes an array of that type.</span></span><br /><br /> <span data-ttu-id="96bec-204">- oder - </span><span class="sxs-lookup"><span data-stu-id="96bec-204">-or-</span></span><br /><br /> <span data-ttu-id="96bec-205">Für einen generischen Typ ist schließt die Argumentliste für den generischen Typ.</span><span class="sxs-lookup"><span data-stu-id="96bec-205">For a generic type, encloses the generic type argument list.</span></span><br /><br /> <span data-ttu-id="96bec-206">- oder - </span><span class="sxs-lookup"><span data-stu-id="96bec-206">-or-</span></span><br /><br /> <span data-ttu-id="96bec-207">In einer Liste der Typargumente schließt eine Assembly qualifizierten Typnamen ein.</span><span class="sxs-lookup"><span data-stu-id="96bec-207">Within a type argument list, encloses an assembly-qualified type.</span></span>|  
  
 <span data-ttu-id="96bec-208">Die Assembly qualifizierten Namen für eine Klasse kann beispielsweise wie folgt aussehen:</span><span class="sxs-lookup"><span data-stu-id="96bec-208">For example, the assembly-qualified name for a class might look like this:</span></span>  
  
```  
TopNamespace.SubNameSpace.ContainingClass+NestedClass, MyAssembly, Version=1.3.0.0, Culture=neutral, PublicKeyToken=b17a5c561934e089  
```  
  
 <span data-ttu-id="96bec-209">Wenn der Namespace enthalten, ein Pluszeichen (+), z. B. TopNamespace.Sub sind, und klicken Sie dann das Pluszeichen (+) ein Escapezeichen vorangestellt werden würde (\\) zu verhindern, dass es als geschachteltes Trennzeichen interpretiert wird.</span><span class="sxs-lookup"><span data-stu-id="96bec-209">If the namespace contained a plus sign, for example TopNamespace.Sub+Namespace, then the plus sign (+) would be preceded by an escape character (\\) to prevent it from being interpreted as a nesting separator.</span></span> <span data-ttu-id="96bec-210">Wird diese Zeichenfolge wie folgt für die Reflektionsausgabe:</span><span class="sxs-lookup"><span data-stu-id="96bec-210">Reflection would emit this string as follows:</span></span>  
  
```  
TopNamespace.Sub\+Namespace.ContainingClass+NestedClass, MyAssembly, Version=1.3.0.0, Culture=neutral, PublicKeyToken=b17a5c561934e089   
```  
  
 <span data-ttu-id="96bec-211">Ein "++" wird "\\+\\+", und ein "\\"wird"\\\\".</span><span class="sxs-lookup"><span data-stu-id="96bec-211">A "++" becomes "\\+\\+", and a "\\" becomes "\\\\".</span></span>  
  
 <span data-ttu-id="96bec-212">Dieser qualifizierte Name persistent gespeichert werden kann, und später verwendet, um das Laden der <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="96bec-212">This qualified name can be persisted and later used to load the <xref:System.Type>.</span></span> <span data-ttu-id="96bec-213">Suchen und Laden eine <xref:System.Type>, verwenden Sie <xref:System.Type.GetType%2A> entweder mit dem Typ oder einen Namen geben nur mit dem Namen der Assembly qualifizierten Typ.</span><span class="sxs-lookup"><span data-stu-id="96bec-213">To search for and load a <xref:System.Type>, use <xref:System.Type.GetType%2A> either with the type name only or with the assembly qualified type name.</span></span> <span data-ttu-id="96bec-214"><xref:System.Type.GetType%2A> mit dem Namen nur sucht die <xref:System.Type> in der Assembly des Aufrufers, und klicken Sie dann in der System-Assembly.</span><span class="sxs-lookup"><span data-stu-id="96bec-214"><xref:System.Type.GetType%2A> with the type name only will look for the <xref:System.Type> in the caller's assembly and then in the System assembly.</span></span> <span data-ttu-id="96bec-215"><xref:System.Type.GetType%2A> mit der Assembly qualifizierten Typnamen sucht die <xref:System.Type> in jeder Assembly.</span><span class="sxs-lookup"><span data-stu-id="96bec-215"><xref:System.Type.GetType%2A> with the assembly qualified type name will look for the <xref:System.Type> in any assembly.</span></span>  
  
 <span data-ttu-id="96bec-216">Namen können nachfolgende Zeichen enthalten, zusätzliche Informationen über den Typ, z. B., ob der Typ ein Verweistyp, ein Zeigertyp oder einen Arraytyp ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-216">Type names may include trailing characters that denote additional information about the type, such as whether the type is a reference type, a pointer type or an array type.</span></span> <span data-ttu-id="96bec-217">Verwenden Sie zum Abrufen der Typname ohne diese nachfolgenden Zeichen `t.GetElementType().ToString()`, wobei `t` ist der Typ.</span><span class="sxs-lookup"><span data-stu-id="96bec-217">To retrieve the type name without these trailing characters, use `t.GetElementType().ToString()`, where `t` is the type.</span></span>  
  
 <span data-ttu-id="96bec-218">Leerzeichen sind in allen Komponenten von Typnamen mit Ausnahme der Assemblyname relevant.</span><span class="sxs-lookup"><span data-stu-id="96bec-218">Spaces are relevant in all type name components except the assembly name.</span></span> <span data-ttu-id="96bec-219">Der Assemblyname Leerzeichen vor dem Trennzeichen ',' relevant, aber Leerzeichen nach dem Trennzeichen ',' werden ignoriert.</span><span class="sxs-lookup"><span data-stu-id="96bec-219">In the assembly name, spaces before the ',' separator are relevant, but spaces after the ',' separator are ignored.</span></span>  
  
 <span data-ttu-id="96bec-220">Generischen Argumente von generischen Typen werden selbst durch Assemblynamen gekennzeichnet.</span><span class="sxs-lookup"><span data-stu-id="96bec-220">Generic arguments of generic types are themselves qualified by assembly name.</span></span> <span data-ttu-id="96bec-221">Z. B. in der Assembly qualifizierter Typname für `MyGenericClass<int>` (`MyGenericClass(Of Integer)` in Visual Basic), `int` wird erweitert, um die Assembly qualifizierten Typnamen für <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="96bec-221">For example, in the assembly-qualified type name for `MyGenericClass<int>` (`MyGenericClass(Of Integer)` in Visual Basic), `int` is expanded to the assembly-qualified type name for <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="96bec-222">Wenn die aktuelle <xref:System.Type> -Objekt einen generischen Parameter darstellt, gibt diese Eigenschaft `null`.</span><span class="sxs-lookup"><span data-stu-id="96bec-222">If the current <xref:System.Type> object represents a generic parameter, this property returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-223">Das folgende Beispiel zeigt den Namen der Assembly, der Klasse zugeordnet und der vollqualifizierte Name des Typs.</span><span class="sxs-lookup"><span data-stu-id="96bec-223">The following example displays the assembly name associated with the class and the fully qualified name of the type.</span></span>  
  
 [!code-cpp[type_assembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_Assembly/CPP/type_assembly.cpp#1)]
 [!code-csharp[type_assembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_Assembly/CS/type_assembly.cs#1)]
 [!code-vb[type_assembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_Assembly/VB/type_assembly.vb#1)]  
  
 <span data-ttu-id="96bec-224">Im folgenden Beispiel wird die Zeichenfolgen, die zurückgegeben werden, indem die <xref:System.Type.ToString%2A> Methode und die `Name`, <xref:System.Type.FullName%2A>, und <xref:System.Type.AssemblyQualifiedName%2A> Eigenschaften.</span><span class="sxs-lookup"><span data-stu-id="96bec-224">The following example compares the strings returned by the <xref:System.Type.ToString%2A> method and the `Name`, <xref:System.Type.FullName%2A>, and <xref:System.Type.AssemblyQualifiedName%2A> properties.</span></span>  
  
 [!code-csharp[System.Type.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.tostring/cs/fullname1.cs#1)]
 [!code-vb[System.Type.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.tostring/vb/fullname1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:System.Type.GetType" />
        <altmember cref="P:System.Type.FullName" />
        <altmember cref="P:System.Type.Namespace" />
        <altmember cref="T:System.Reflection.AssemblyName" />
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public System.Reflection.TypeAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.TypeAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Type.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Attributes As TypeAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::TypeAttributes Attributes { System::Reflection::TypeAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.Attributes : System.Reflection.TypeAttributes" Usage="System.Type.Attributes" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.Attributes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-225">Gets the attributes associated with the <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-225">Gets the attributes associated with the <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-226">Ein <see cref="T:System.Reflection.TypeAttributes" />-Objekt, das die Attributgruppe von <see cref="T:System.Type" /> darstellt. Falls <see cref="T:System.Type" /> jedoch einen generischen Typparameter darstellt, ist der Wert nicht festgelegt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-226">A <see cref="T:System.Reflection.TypeAttributes" /> object representing the attribute set of the <see cref="T:System.Type" />, unless the <see cref="T:System.Type" /> represents a generic type parameter, in which case the value is unspecified.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-227">Ein Mitglied der <xref:System.Reflection.TypeAttributes> Enumeration werden von Masken, die eine Gruppe von Werten darstellen.</span><span class="sxs-lookup"><span data-stu-id="96bec-227">Some members of the <xref:System.Reflection.TypeAttributes> enumeration are masks that represent a group of values.</span></span> <span data-ttu-id="96bec-228">Jede Gruppe enthält ein Element, dessen zugrunde liegender Wert 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-228">Each group includes one member whose underlying value is zero.</span></span> <span data-ttu-id="96bec-229">Z. B. den zugrunde liegenden Wert von der <xref:System.Reflection.TypeAttributes.NotPublic?displayProperty=nameWithType> Element in der <xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> Gruppe ist 0 (null), da die <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType> Element in der <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> Gruppe.</span><span class="sxs-lookup"><span data-stu-id="96bec-229">For example, the underlying value of the <xref:System.Reflection.TypeAttributes.NotPublic?displayProperty=nameWithType> member in the <xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> group is zero, as is the <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType> member in the <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> group.</span></span> <span data-ttu-id="96bec-230">Aus diesem Grund müssen Sie die Maske verwenden, bevor Sie für diese Werte zu testen.</span><span class="sxs-lookup"><span data-stu-id="96bec-230">Because of this, you must use the mask before testing for those values.</span></span> <span data-ttu-id="96bec-231">Dies wird im Beispiel veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="96bec-231">The example provides an illustration.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="96bec-232">In den meisten Fällen Eigenschaften wie <xref:System.Type.IsClass%2A>,<xref:System.Type.IsAutoLayout%2A>, und <xref:System.Type.IsSpecialName%2A> sind einfacher zu verwenden als Attribute des Typs.</span><span class="sxs-lookup"><span data-stu-id="96bec-232">For most purposes, properties like <xref:System.Type.IsClass%2A>,<xref:System.Type.IsAutoLayout%2A>, and <xref:System.Type.IsSpecialName%2A> are easier to use than type attributes.</span></span>  
  
 <span data-ttu-id="96bec-233">Wenn die aktuelle <xref:System.Type> stellt ein konstruierter generischer Typ, diese Eigenschaft gibt die Attribute der Definition des generischen Typs zurück.</span><span class="sxs-lookup"><span data-stu-id="96bec-233">If the current <xref:System.Type> represents a constructed generic type, this property returns the attributes of the generic type definition.</span></span> <span data-ttu-id="96bec-234">Z. B. die Attribute, die für die zurückgegebenen `MyGenericClass<int>` (`MyGenericClass(Of Integer)` in Visual Basic) sind die Attribute des `MyGenericClass<T>` (`MyGenericClass(Of T)` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="96bec-234">For example, the attributes returned for `MyGenericClass<int>` (`MyGenericClass(Of Integer)` in Visual Basic) are the attributes of `MyGenericClass<T>` (`MyGenericClass(Of T)` in Visual Basic).</span></span>  
  
 <span data-ttu-id="96bec-235">Wenn die aktuelle <xref:System.Type> einen generischen Typparameter darstellt –, also wenn die <xref:System.Type.IsGenericParameter%2A> -Eigenschaft gibt `true` – die <xref:System.Reflection.TypeAttributes> von dieser Eigenschaft zurückgegebene Wert ist nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-235">If the current <xref:System.Type> represents a generic type parameter — that is, if the <xref:System.Type.IsGenericParameter%2A> property returns `true` — the <xref:System.Reflection.TypeAttributes> value returned by this property is unspecified.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-236">Das folgende Beispiel verwendet die <xref:System.Type.Attributes%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="96bec-236">The following example usesthe <xref:System.Type.Attributes%2A> property.</span></span>  
  
 [!code-csharp[System.Type.Attributes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.attributes/cs/attributes1.cs#1)]
 [!code-vb[System.Type.Attributes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.attributes/vb/attributes1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.GetAttributeFlagsImpl" />
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="BaseType">
      <MemberSignature Language="C#" Value="public abstract Type BaseType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type BaseType" />
      <MemberSignature Language="DocId" Value="P:System.Type.BaseType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property BaseType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Type ^ BaseType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseType : Type" Usage="System.Type.BaseType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.BaseType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-237">Gets the type from which the current <see cref="T:System.Type" /> directly inherits.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-237">Gets the type from which the current <see cref="T:System.Type" /> directly inherits.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-238">Der <see cref="T:System.Type" />, von dem der aktuelle <see cref="T:System.Type" /> direkt erbt, oder <see langword="null" />, wenn der aktuelle <see langword="Type" /> die <see cref="T:System.Object" />-Klasse oder eine Schnittstelle darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-238">The <see cref="T:System.Type" /> from which the current <see cref="T:System.Type" /> directly inherits, or <see langword="null" /> if the current <see langword="Type" /> represents the <see cref="T:System.Object" /> class or an interface.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-239">Der Basistyp ist der Typ, von dem der aktuelle Typ direkt erbt.</span><span class="sxs-lookup"><span data-stu-id="96bec-239">The base type is the type from which the current type directly inherits.</span></span> <span data-ttu-id="96bec-240"><xref:System.Object> ist der einzige Typ, der aus diesem Grund keinen Basistyp, `null` wird zurückgegeben, als der Basistyp des <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="96bec-240"><xref:System.Object> is the only type that does not have a base type, therefore `null` is returned as the base type of <xref:System.Object>.</span></span>  
  
 <span data-ttu-id="96bec-241">Schnittstellen werden von keinem oder mehreren Basisschnittstellen erben. aus diesem Grund gibt diese Eigenschaft zurück `null` Wenn die `Type` Objekt stellt eine Schnittstelle dar.</span><span class="sxs-lookup"><span data-stu-id="96bec-241">Interfaces inherit from zero or more base interfaces; therefore, this property returns `null` if the `Type` object represents an interface.</span></span> <span data-ttu-id="96bec-242">Die Basisschnittstellen können bestimmt werden, mit <xref:System.Type.GetInterfaces%2A> oder <xref:System.Type.FindInterfaces%2A>.</span><span class="sxs-lookup"><span data-stu-id="96bec-242">The base interfaces can be determined with <xref:System.Type.GetInterfaces%2A> or <xref:System.Type.FindInterfaces%2A>.</span></span>  
  
 <span data-ttu-id="96bec-243">Wenn die aktuelle <xref:System.Type> einen konstruierter generischen Typ darstellt, der Basistyp spiegelt wider, die generischen Argumente.</span><span class="sxs-lookup"><span data-stu-id="96bec-243">If the current <xref:System.Type> represents a constructed generic type, the base type reflects the generic arguments.</span></span> <span data-ttu-id="96bec-244">Betrachten Sie beispielsweise die folgenden Deklarationen:</span><span class="sxs-lookup"><span data-stu-id="96bec-244">For example, consider the following declarations:</span></span>  
  
 [!code-cpp[System.Type.BaseType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.type.basetype/cpp/remarks.cpp#1)]
 [!code-csharp[System.Type.BaseType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.basetype/cs/remarks.cs#1)]
 [!code-vb[System.Type.BaseType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.basetype/vb/remarks.vb#1)]  
  
 <span data-ttu-id="96bec-245">Für den konstruierten Typ `C<int>` (`C(Of Integer)` in Visual Basic), wird die <xref:System.Type.BaseType%2A> -Eigenschaft gibt `B<int>`.</span><span class="sxs-lookup"><span data-stu-id="96bec-245">For the constructed type `C<int>` (`C(Of Integer)` in Visual Basic), the <xref:System.Type.BaseType%2A> property returns `B<int>`.</span></span>  
  
 <span data-ttu-id="96bec-246">Wenn die aktuelle <xref:System.Type> stellt einen Typparameter einer generischen Typdefinition, <xref:System.Type.BaseType%2A> gibt zurück, der die Class-Einschränkung, d. h. die Klasse, die der Typparameter erben muss.</span><span class="sxs-lookup"><span data-stu-id="96bec-246">If the current <xref:System.Type> represents a type parameter of a generic type definition, <xref:System.Type.BaseType%2A> returns the class constraint, that is, the class the type parameter must inherit.</span></span> <span data-ttu-id="96bec-247">Es ist keine klasseneinschränkung <xref:System.Type.BaseType%2A> gibt <xref:System.Object?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="96bec-247">If there is no class constraint, <xref:System.Type.BaseType%2A> returns <xref:System.Object?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="96bec-248">Diese Eigenschaft ist schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="96bec-248">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-249">Das folgende Beispiel veranschaulicht die Verwendung der <xref:System.Type.BaseType%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="96bec-249">The following example demonstrates using the <xref:System.Type.BaseType%2A> property.</span></span>  
  
 [!code-cpp[TestBaseType#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestBaseType/CPP/testbasetype.cpp#1)]
 [!code-csharp[TestBaseType#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestBaseType/CS/testbasetype.cs#1)]
 [!code-vb[TestBaseType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestBaseType/VB/testbasetype.vb#1)]  
  
 <span data-ttu-id="96bec-250">Im folgenden Beispiel wird Rekursion, um die vollständige Vererbungshierarchie jeder Klasse finden Sie in einer Assembly aufzulisten.</span><span class="sxs-lookup"><span data-stu-id="96bec-250">The following example uses recursion to list the complete inheritance hierarchy of each class found in an assembly.</span></span> <span data-ttu-id="96bec-251">Das Beispiel definiert eine Klasse namens `C` abgeleitet, die eine Klasse namens `B`, das wiederum eine Klasse namens abgeleitet `A`.</span><span class="sxs-lookup"><span data-stu-id="96bec-251">The example defines a class named `C` that derives from a class named `B`, which, in turn, derives from a class named `A`.</span></span>  
  
 [!code-csharp[System.Type.BaseType#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.basetype/cs/basetype3.cs#2)]
 [!code-vb[System.Type.BaseType#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.basetype/vb/basetype3.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="M:System.Type.GetInterfaces" />
        <altmember cref="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />
        <altmember cref="P:System.Type.UnderlyingSystemType" />
        <altmember cref="M:System.Type.IsSubclassOf(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="ContainsGenericParameters">
      <MemberSignature Language="C#" Value="public virtual bool ContainsGenericParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ContainsGenericParameters" />
      <MemberSignature Language="DocId" Value="P:System.Type.ContainsGenericParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ContainsGenericParameters As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool ContainsGenericParameters { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ContainsGenericParameters : bool" Usage="System.Type.ContainsGenericParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-252">Gets a value indicating whether the current <see cref="T:System.Type" /> object has type parameters that have not been replaced by specific types.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-252">Gets a value indicating whether the current <see cref="T:System.Type" /> object has type parameters that have not been replaced by specific types.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-253">
            <see langword="true" />, wenn das <see cref="T:System.Type" />-Objekt selbst ein generischer Parametertyp ist oder über Typparameter verfügt, für die keine bestimmten Typen angegeben wurden, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-253">
              <see langword="true" /> if the <see cref="T:System.Type" /> object is itself a generic type parameter or has type parameters for which specific types have not been supplied; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-254">Um eine Instanz eines Typs zu erstellen, muss keine generische Typdefinitionen oder offenen konstruierten Typen in die Typargumente des Typs selbst, in der einschließenden generischen Typen oder Elemente des Typs vorhanden sein.</span><span class="sxs-lookup"><span data-stu-id="96bec-254">In order to create an instance of a type, there must be no generic type definitions or open constructed types in the type arguments of the type itself, in any enclosing generic types, or in any elements of the type.</span></span> <span data-ttu-id="96bec-255">Anders ausgedrückt: Dies ist bei überprüft rekursiv, der Typ muss keine generischen Typparameter enthalten.</span><span class="sxs-lookup"><span data-stu-id="96bec-255">Another way of saying this is that when examined recursively, the type must contain no generic type parameters.</span></span>  
  
 <span data-ttu-id="96bec-256">Da die Typen nicht übermäßig komplex sein können, ist dieser Feststellung schwierig.</span><span class="sxs-lookup"><span data-stu-id="96bec-256">Since types can be arbitrarily complex, making this determination is difficult.</span></span> <span data-ttu-id="96bec-257">Der Einfachheit halber und reduzieren die Wahrscheinlichkeit, dass Fehler, die <xref:System.Type.ContainsGenericParameters%2A> Eigenschaft bietet eine standardisierte Möglichkeit zur Unterscheidung von geschlossener konstruierter Typen, die instanziiert werden kann, und offen konstruierte Typen, die nicht.</span><span class="sxs-lookup"><span data-stu-id="96bec-257">For convenience and to reduce the chance of error, the <xref:System.Type.ContainsGenericParameters%2A> property provides a standard way to distinguish between closed constructed types, which can be instantiated, and open constructed types, which cannot.</span></span> <span data-ttu-id="96bec-258">Wenn die <xref:System.Type.ContainsGenericParameters%2A> -Eigenschaft gibt `true`, der Typ kann nicht instanziiert werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-258">If the <xref:System.Type.ContainsGenericParameters%2A> property returns `true`, the type cannot be instantiated.</span></span>  
  
 <span data-ttu-id="96bec-259">Die <xref:System.Type.ContainsGenericParameters%2A> Eigenschaft sucht rekursiv nach Typparameter.</span><span class="sxs-lookup"><span data-stu-id="96bec-259">The <xref:System.Type.ContainsGenericParameters%2A> property searches recursively for type parameters.</span></span> <span data-ttu-id="96bec-260">Es gibt z. B. `true` für ein Array, dessen Elemente sind `A<T>` (`A(Of T)` in Visual Basic), auch wenn das Array selbst nicht generisch ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-260">For example, it returns `true` for an array whose elements are type `A<T>` (`A(Of T)` in Visual Basic), even though the array is not itself generic.</span></span> <span data-ttu-id="96bec-261">Vergleichen Sie dies mit dem Verhalten von der <xref:System.Type.IsGenericType%2A> -Eigenschaft, die gibt `false` für Arrays.</span><span class="sxs-lookup"><span data-stu-id="96bec-261">Contrast this with the behavior of the <xref:System.Type.IsGenericType%2A> property, which returns `false` for arrays.</span></span>  
  
 <span data-ttu-id="96bec-262">Für eine Reihe von Beispielklassen und eine Tabelle mit den Werten der der <xref:System.Type.ContainsGenericParameters%2A> -Eigenschaft finden Sie unter <xref:System.Type.IsGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="96bec-262">For a set of example classes and a table showing the values of the <xref:System.Type.ContainsGenericParameters%2A> property, see <xref:System.Type.IsGenericType%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-263">Im folgenden Beispiel wird eine generische Klasse mit zwei Typparametern und definiert dann eine zweite generische Klasse, die von der ersten Klasse abgeleitet ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-263">The following example defines a generic class with two type parameters and then defines a second generic class that derives from the first class.</span></span> <span data-ttu-id="96bec-264">Basisklasse für die abgeleitete Klasse verfügt über zwei Typargumente: der erste <xref:System.Int32> und die zweite ist ein Typparameter des abgeleiteten Typs.</span><span class="sxs-lookup"><span data-stu-id="96bec-264">The derived class's base class has two type arguments: the first is <xref:System.Int32> and the second is a type parameter of the derived type.</span></span> <span data-ttu-id="96bec-265">Das Beispiel zeigt Informationen zu diesen generischen Klassen, von gemeldeten einschließlich die Positionen der <xref:System.Type.GenericParameterPosition%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="96bec-265">The example displays information about these generic classes, including the positions reported by the <xref:System.Type.GenericParameterPosition%2A> property.</span></span>  
  
 [!code-cpp[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/CPP/source.cpp#1)]
 [!code-csharp[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/CS/source.cs#1)]
 [!code-vb[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="P:System.Type.IsGenericTypeDefinition" />
        <altmember cref="M:System.Type.MakeGenericType(System.Type[])" />
      </Docs>
    </Member>
    <Member MemberName="DeclaringMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodBase DeclaringMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodBase DeclaringMethod" />
      <MemberSignature Language="DocId" Value="P:System.Type.DeclaringMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DeclaringMethod As MethodBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodBase ^ DeclaringMethod { System::Reflection::MethodBase ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeclaringMethod : System.Reflection.MethodBase" Usage="System.Type.DeclaringMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-266">Gets a <see cref="T:System.Reflection.MethodBase" /> that represents the declaring method, if the current <see cref="T:System.Type" /> represents a type parameter of a generic method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-266">Gets a <see cref="T:System.Reflection.MethodBase" /> that represents the declaring method, if the current <see cref="T:System.Type" /> represents a type parameter of a generic method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-267">Wenn der aktuelle <see cref="T:System.Type" /> einen Typparameter einer generischen Methode darstellt, eine <see cref="T:System.Reflection.MethodBase" />, die die deklarierende Methode darstellt, andernfalls <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-267">If the current <see cref="T:System.Type" /> represents a type parameter of a generic method, a <see cref="T:System.Reflection.MethodBase" /> that represents declaring method; otherwise, <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-268">Die deklarierende Methode ist eine generische Methodendefinition.</span><span class="sxs-lookup"><span data-stu-id="96bec-268">The declaring method is a generic method definition.</span></span> <span data-ttu-id="96bec-269">D. h. wenn <xref:System.Type.DeclaringMethod%2A> keinen zurückgibt `null`, klicken Sie dann `DeclaringMethod.IsGenericMethodDefinition` gibt `true`.</span><span class="sxs-lookup"><span data-stu-id="96bec-269">That is, if <xref:System.Type.DeclaringMethod%2A> does not return `null`, then `DeclaringMethod.IsGenericMethodDefinition` returns `true`.</span></span>  
  
 <span data-ttu-id="96bec-270">Die <xref:System.Type.DeclaringType%2A> und <xref:System.Type.DeclaringMethod%2A> Eigenschaften identifizieren, die generische Typdefinition oder generische Methodendefinition, die in der der generische Typparameter ursprünglich definiert wurde:</span><span class="sxs-lookup"><span data-stu-id="96bec-270">The <xref:System.Type.DeclaringType%2A> and <xref:System.Type.DeclaringMethod%2A> properties identify the generic type definition or generic method definition in which the generic type parameter was originally defined:</span></span>  
  
-   <span data-ttu-id="96bec-271">Wenn die <xref:System.Type.DeclaringMethod%2A> -Eigenschaft gibt eine <xref:System.Reflection.MethodInfo>, <xref:System.Reflection.MethodInfo> stellt eine generische Methodendefinition, und das aktuelle <xref:System.Type> Objekt einen Typparameter der generischen Methodendefinition darstellt.</span><span class="sxs-lookup"><span data-stu-id="96bec-271">If the <xref:System.Type.DeclaringMethod%2A> property returns a <xref:System.Reflection.MethodInfo>, that <xref:System.Reflection.MethodInfo> represents a generic method definition, and the current <xref:System.Type> object represents a type parameter of that generic method definition.</span></span>  
  
-   <span data-ttu-id="96bec-272">Wenn die <xref:System.Type.DeclaringMethod%2A> -Eigenschaft gibt `null`, und klicken Sie dann die <xref:System.Type.DeclaringType%2A> -Eigenschaft gibt immer einen <xref:System.Type> Objekt, das eine generische Typdefinition, und das aktuelle darstellt <xref:System.Type> -Objekt einen Typparameter des generischen Typs darstellt die Definition.</span><span class="sxs-lookup"><span data-stu-id="96bec-272">If the <xref:System.Type.DeclaringMethod%2A> property returns `null`, then the <xref:System.Type.DeclaringType%2A> property always returns a <xref:System.Type> object representing a generic type definition, and the current <xref:System.Type> object represents a type parameter of that generic type definition.</span></span>  
  
-   <span data-ttu-id="96bec-273">Abrufen der <xref:System.Type.DeclaringMethod%2A> Eigenschaft für einen Typ, dessen <xref:System.Type.IsGenericParameter%2A> Eigenschaft `false` löst eine <xref:System.InvalidOperationException>.</span><span class="sxs-lookup"><span data-stu-id="96bec-273">Getting the <xref:System.Type.DeclaringMethod%2A> property on a type whose <xref:System.Type.IsGenericParameter%2A> property is `false` throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="96bec-274">Die <xref:System.Reflection.MethodBase> von zurückgegebenen der <xref:System.Type.DeclaringMethod%2A> -Eigenschaft ist entweder ein <xref:System.Reflection.MethodInfo> im Fall einer generischen Methode oder ein <xref:System.Reflection.ConstructorInfo> bei einem generischen Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="96bec-274">The <xref:System.Reflection.MethodBase> that is returned by the <xref:System.Type.DeclaringMethod%2A> property is either a <xref:System.Reflection.MethodInfo> in the case of a generic method, or a <xref:System.Reflection.ConstructorInfo> in the case of a generic constructor.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-275">In .NET Framework, Version 2.0 sind generische Konstruktoren nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="96bec-275">In the .NET Framework version 2.0, generic constructors are not supported.</span></span>  
  
 <span data-ttu-id="96bec-276">Eine Liste der invarianten Bedingungen für Begriffe, für Begriffe, die für die Reflektion mit generischen Methoden verwendet werden, finden Sie in den Hinweisen zur Eigenschaft <xref:System.Type.IsGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="96bec-276">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-277">Das folgende Codebeispiel definiert eine Klasse, die eine generische Methode, ein Typargument an die Methode weist und die sich ergebende konstruierte generische Methode aufruft.</span><span class="sxs-lookup"><span data-stu-id="96bec-277">The following code example defines a class that has a generic method, assigns a type argument to the method, and invokes the resulting constructed generic method.</span></span> <span data-ttu-id="96bec-278">Außerdem werden Informationen zur Definition der generischen Methode und die konstruierte Methode angezeigt.</span><span class="sxs-lookup"><span data-stu-id="96bec-278">It also displays information about the generic method definition and the constructed method.</span></span> <span data-ttu-id="96bec-279">Anzeigen von Informationen über die Typparameter der generischen Methodendefinition, in der `DisplayGenericMethodInfo` -Methode der Beispielcode zeigt den Wert des der <xref:System.Type.DeclaringMethod%2A> -Eigenschaft für generischen Typparameter der Methode.</span><span class="sxs-lookup"><span data-stu-id="96bec-279">When displaying information about the type parameters of the generic method definition, in the `DisplayGenericMethodInfo` method, the example code shows the value of the <xref:System.Type.DeclaringMethod%2A> property for the method's generic type parameter.</span></span>  
  
 [!code-cpp[MethodInfo.Generics#1](~/samples/snippets/cpp/VS_Snippets_CLR/MethodInfo.Generics/cpp/source.cpp#1)]
 [!code-csharp[MethodInfo.Generics#1](~/samples/snippets/csharp/VS_Snippets_CLR/MethodInfo.Generics/CS/source.cs#1)]
 [!code-vb[MethodInfo.Generics#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodInfo.Generics/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsGenericParameter" />
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public override Type DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DeclaringType" />
      <MemberSignature Language="DocId" Value="P:System.Type.DeclaringType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DeclaringType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ DeclaringType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeclaringType : Type" Usage="System.Type.DeclaringType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.DeclaringType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-280">Gets the type that declares the current nested type or generic type parameter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-280">Gets the type that declares the current nested type or generic type parameter.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-281">Ein <see cref="T:System.Type" />-Objekt, das den einschließenden Typ darstellt, wenn es sich bei dem aktuellen Typ um einen geschachtelten Typ handelt. Die generische Typdefinition, wenn es sich bei dem aktuellen Typ um einen Typparameter eines generischen Typs handelt. Der Typ, der die generische Methode deklariert, wenn es sich bei dem aktuellen Typ um einen Typparameter einer generischen Methode handelt. Andernfalls <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-281">A <see cref="T:System.Type" /> object representing the enclosing type, if the current type is a nested type; or the generic type definition, if the current type is a type parameter of a generic type; or the type that declares the generic method, if the current type is a type parameter of a generic method; otherwise, <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-282">Wenn die aktuelle <xref:System.Type> -Objekt einen Typparameter eines generischen Typs darstellt, diese Eigenschaft gibt die Definition des generischen Typs zurück.</span><span class="sxs-lookup"><span data-stu-id="96bec-282">If the current <xref:System.Type> object represents a type parameter of a generic type, this property returns the generic type definition.</span></span>  
  
 <span data-ttu-id="96bec-283">Wenn die aktuelle <xref:System.Type> -Objekt einen Typparameter einer generischen Methode darstellt, diese Eigenschaft gibt den Typ zurück, die die Methodendefinition enthält.</span><span class="sxs-lookup"><span data-stu-id="96bec-283">If the current <xref:System.Type> object represents a type parameter of a generic method, this property returns the type that contains the generic method definition.</span></span> <span data-ttu-id="96bec-284">Wenn der Typ generisch ist, wird die Definition des generischen Typs zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-284">If the type is generic, the generic type definition is returned.</span></span> <span data-ttu-id="96bec-285">Der folgende Code gibt, also die generische Typdefinition von der <xref:System.Collections.Generic.List%601> generische Klasse, die enthält die <xref:System.Collections.Generic.List%601.ConvertAll%2A> generische Methode:</span><span class="sxs-lookup"><span data-stu-id="96bec-285">That is, the following code returns the generic type definition of the <xref:System.Collections.Generic.List%601> generic class, which contains the <xref:System.Collections.Generic.List%601.ConvertAll%2A> generic method:</span></span>  
  
 [!code-cpp[System.Type.DeclaringType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.type.declaringtype/cpp/remarks.cpp#1)]
 [!code-csharp[System.Type.DeclaringType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.declaringtype/cs/remarks.cs#1)]
 [!code-vb[System.Type.DeclaringType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.declaringtype/vb/remarks.vb#1)]  
  
 <span data-ttu-id="96bec-286">Wenn die aktuelle <xref:System.Type> einen Typparameter in der Definition eines generischen Typs oder generische Methode darstellt der <xref:System.Type.DeclaringType%2A> und <xref:System.Type.DeclaringMethod%2A> Eigenschaften identifizieren, die generische Typdefinition oder generische Methodendefinition, in dem der generische Typparameter, ursprünglich definiert wurde:</span><span class="sxs-lookup"><span data-stu-id="96bec-286">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, the <xref:System.Type.DeclaringType%2A> and <xref:System.Type.DeclaringMethod%2A> properties identify the generic type definition or generic method definition where the generic type parameter was originally defined:</span></span>  
  
-   <span data-ttu-id="96bec-287">Wenn die <xref:System.Type.DeclaringMethod%2A> -Eigenschaft gibt eine <xref:System.Reflection.MethodInfo>, <xref:System.Reflection.MethodInfo> stellt eine generische Methodendefinition, und das aktuelle <xref:System.Type> Objekt einen Typparameter der generischen Methodendefinition darstellt.</span><span class="sxs-lookup"><span data-stu-id="96bec-287">If the <xref:System.Type.DeclaringMethod%2A> property returns a <xref:System.Reflection.MethodInfo>, that <xref:System.Reflection.MethodInfo> represents a generic method definition, and the current <xref:System.Type> object represents a type parameter of that generic method definition.</span></span>  
  
-   <span data-ttu-id="96bec-288">Wenn die <xref:System.Type.DeclaringMethod%2A> -Eigenschaft gibt `null`, und klicken Sie dann die <xref:System.Type.DeclaringType%2A> -Eigenschaft gibt immer einen <xref:System.Type> Objekt, das eine generische Typdefinition, und das aktuelle darstellt <xref:System.Type> -Objekt einen Typparameter des generischen Typs darstellt die Definition.</span><span class="sxs-lookup"><span data-stu-id="96bec-288">If the <xref:System.Type.DeclaringMethod%2A> property returns `null`, then the <xref:System.Type.DeclaringType%2A> property always returns a <xref:System.Type> object representing a generic type definition, and the current <xref:System.Type> object represents a type parameter of that generic type definition.</span></span>  
  
-   <span data-ttu-id="96bec-289">Abrufen der <xref:System.Type.DeclaringType%2A> Eigenschaft für einen Typ, dessen <xref:System.Type.IsGenericParameter%2A> Eigenschaft `false` löst eine <xref:System.InvalidOperationException>.</span><span class="sxs-lookup"><span data-stu-id="96bec-289">Getting the <xref:System.Type.DeclaringType%2A> property on a type whose <xref:System.Type.IsGenericParameter%2A> property is `false` throws an <xref:System.InvalidOperationException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-290">Dieses Beispiel zeigt den deklarierenden Typ einer Methode in einer abgeleiteten Klasse.</span><span class="sxs-lookup"><span data-stu-id="96bec-290">This example displays the declaring type of a method in a derived class.</span></span>  
  
 [!code-cpp[Classic Type.DeclaringType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.DeclaringType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.DeclaringType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.DeclaringType Example/CS/source.cs#1)]
 [!code-vb[Classic Type.DeclaringType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.DeclaringType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="P:System.Type.ReflectedType" />
      </Docs>
    </Member>
    <Member MemberName="DefaultBinder">
      <MemberSignature Language="C#" Value="public static System.Reflection.Binder DefaultBinder { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Reflection.Binder DefaultBinder" />
      <MemberSignature Language="DocId" Value="P:System.Type.DefaultBinder" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DefaultBinder As Binder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Reflection::Binder ^ DefaultBinder { System::Reflection::Binder ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultBinder : System.Reflection.Binder" Usage="System.Type.DefaultBinder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Binder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-291">Gets a reference to the default binder, which implements internal rules for selecting the appropriate members to be called by <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-291">Gets a reference to the default binder, which implements internal rules for selecting the appropriate members to be called by <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-292">Ein Verweis auf den vom System verwendeten Standardbinder.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-292">A reference to the default binder used by the system.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-293">Der Standardbinder bereitgestellt, mit der common Language Runtime ist in allen außer den sehr speziellen Umständen anwendbar.</span><span class="sxs-lookup"><span data-stu-id="96bec-293">The default binder provided with the common language runtime is applicable in all but the most specialized circumstances.</span></span> <span data-ttu-id="96bec-294">Bei Bedarf einen Binder, mit denen Regeln folgt, die von den angegebenen Standardbinder unterscheiden definiert ein abgeleiteten Typ der <xref:System.Reflection.Binder> Klasse und übergeben Sie eine Instanz dieses Typs mithilfe der `binder` Parameter eines der <xref:System.Type.InvokeMember%2A> Überladungen.</span><span class="sxs-lookup"><span data-stu-id="96bec-294">If you need a binder that follows rules that differ from those of the supplied default binder, define a type derived from the <xref:System.Reflection.Binder> class and pass an instance of that type using the `binder` parameter of one of the <xref:System.Type.InvokeMember%2A> overloads.</span></span>  
  
 <span data-ttu-id="96bec-295">Reflektion modelliert die Zugriffsregeln des allgemeinen Typsystems.</span><span class="sxs-lookup"><span data-stu-id="96bec-295">Reflection models the accessibility rules of the common type system.</span></span> <span data-ttu-id="96bec-296">Wenn der Aufrufer in der gleichen Assembly ist, wird z. B. spezielle Berechtigungen von der Aufrufer nicht für interne Member benötigt.</span><span class="sxs-lookup"><span data-stu-id="96bec-296">For example, if the caller is in the same assembly, the caller does not need special permissions for internal members.</span></span> <span data-ttu-id="96bec-297">Andernfalls, benötigt der Aufrufer <xref:System.Security.Permissions.ReflectionPermission>.</span><span class="sxs-lookup"><span data-stu-id="96bec-297">Otherwise, the caller needs <xref:System.Security.Permissions.ReflectionPermission>.</span></span> <span data-ttu-id="96bec-298">Dies ist konsistent mit der Suche nach Membern, die geschützt werden, private und so weiter.</span><span class="sxs-lookup"><span data-stu-id="96bec-298">This is consistent with lookup of members that are protected, private, and so on.</span></span>  
  
 <span data-ttu-id="96bec-299">Im Allgemeinen gilt, die <xref:System.Reflection.Binder.ChangeType%2A> nur erweiternde Konvertierungen, die keine Daten verloren gehen durchführen sollte.</span><span class="sxs-lookup"><span data-stu-id="96bec-299">The general principle is that <xref:System.Reflection.Binder.ChangeType%2A> should perform only widening conversions, which never lose data.</span></span> <span data-ttu-id="96bec-300">Ein Beispiel für eine erweiternde Konvertierung ist das Konvertieren eines Werts, der eine 32-Bit-Ganzzahl mit Vorzeichen in einen Wert, der eine 64-Bit-Ganzzahl mit Vorzeichen ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-300">An example of a widening conversion is converting a value that is a 32-bit signed integer to a value that is a 64-bit signed integer.</span></span> <span data-ttu-id="96bec-301">Dies ist von einer einschränkenden Konvertierung unterschieden, die Daten verloren gehen können.</span><span class="sxs-lookup"><span data-stu-id="96bec-301">This is distinguished from a narrowing conversion, which may lose data.</span></span> <span data-ttu-id="96bec-302">Ein Beispiel für eine einschränkende Konvertierung ist eine 64-Bit-Ganzzahl mit Vorzeichen in eine 32-Bit-Ganzzahl mit Vorzeichen konvertiert werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-302">An example of a narrowing conversion is converting a 64-bit signed integer to a 32-bit signed integer.</span></span>  
  
 <span data-ttu-id="96bec-303">Die folgende Tabelle enthält die Konvertierungen, die von der Standardbinder unterstützt werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-303">The following table lists the conversions supported by the default binder.</span></span>  
  
|<span data-ttu-id="96bec-304">Quelltyp</span><span class="sxs-lookup"><span data-stu-id="96bec-304">Source Type</span></span>|<span data-ttu-id="96bec-305">Zieltyp</span><span class="sxs-lookup"><span data-stu-id="96bec-305">Target Type</span></span>|  
|-----------------|-----------------|  
|<span data-ttu-id="96bec-306">Beliebiger Typ</span><span class="sxs-lookup"><span data-stu-id="96bec-306">Any type</span></span>|<span data-ttu-id="96bec-307">Basistyp.</span><span class="sxs-lookup"><span data-stu-id="96bec-307">Its base type.</span></span>|  
|<span data-ttu-id="96bec-308">Beliebiger Typ</span><span class="sxs-lookup"><span data-stu-id="96bec-308">Any type</span></span>|<span data-ttu-id="96bec-309">Die Schnittstelle, die er implementiert.</span><span class="sxs-lookup"><span data-stu-id="96bec-309">The interface it implements.</span></span>|  
|<span data-ttu-id="96bec-310">Char</span><span class="sxs-lookup"><span data-stu-id="96bec-310">Char</span></span>|<span data-ttu-id="96bec-311">Unt16 "," UInt32 "," Int32 "," UInt64 "," Int64, Single, Double</span><span class="sxs-lookup"><span data-stu-id="96bec-311">Unt16, UInt32, Int32, UInt64, Int64, Single, Double</span></span>|  
|<span data-ttu-id="96bec-312">Byte</span><span class="sxs-lookup"><span data-stu-id="96bec-312">Byte</span></span>|<span data-ttu-id="96bec-313">Char-Zeichen, Unt16 "," Int16 "," UInt32 "," Int32 "," UInt64 "," Int64, Single, Double</span><span class="sxs-lookup"><span data-stu-id="96bec-313">Char, Unt16, Int16, UInt32, Int32, UInt64, Int64, Single, Double</span></span>|  
|<span data-ttu-id="96bec-314">SByte</span><span class="sxs-lookup"><span data-stu-id="96bec-314">SByte</span></span>|<span data-ttu-id="96bec-315">Int16, Int32, Int64, Single, Double</span><span class="sxs-lookup"><span data-stu-id="96bec-315">Int16, Int32, Int64, Single, Double</span></span>|  
|<span data-ttu-id="96bec-316">UInt16</span><span class="sxs-lookup"><span data-stu-id="96bec-316">UInt16</span></span>|<span data-ttu-id="96bec-317">UInt32, Int32, UInt64, Int64, Single, Double</span><span class="sxs-lookup"><span data-stu-id="96bec-317">UInt32, Int32, UInt64, Int64, Single, Double</span></span>|  
|<span data-ttu-id="96bec-318">Int16</span><span class="sxs-lookup"><span data-stu-id="96bec-318">Int16</span></span>|<span data-ttu-id="96bec-319">Int32, Int64, Single, Double</span><span class="sxs-lookup"><span data-stu-id="96bec-319">Int32, Int64, Single, Double</span></span>|  
|<span data-ttu-id="96bec-320">UInt32</span><span class="sxs-lookup"><span data-stu-id="96bec-320">UInt32</span></span>|<span data-ttu-id="96bec-321">UInt64, Int64, Single, Double</span><span class="sxs-lookup"><span data-stu-id="96bec-321">UInt64, Int64, Single, Double</span></span>|  
|<span data-ttu-id="96bec-322">Int32</span><span class="sxs-lookup"><span data-stu-id="96bec-322">Int32</span></span>|<span data-ttu-id="96bec-323">Int64, Single, Double</span><span class="sxs-lookup"><span data-stu-id="96bec-323">Int64, Single, Double</span></span>|  
|<span data-ttu-id="96bec-324">UInt64</span><span class="sxs-lookup"><span data-stu-id="96bec-324">UInt64</span></span>|<span data-ttu-id="96bec-325">Single, Double</span><span class="sxs-lookup"><span data-stu-id="96bec-325">Single, Double</span></span>|  
|<span data-ttu-id="96bec-326">Int64</span><span class="sxs-lookup"><span data-stu-id="96bec-326">Int64</span></span>|<span data-ttu-id="96bec-327">Single, Double</span><span class="sxs-lookup"><span data-stu-id="96bec-327">Single, Double</span></span>|  
|<span data-ttu-id="96bec-328">Single</span><span class="sxs-lookup"><span data-stu-id="96bec-328">Single</span></span>|<span data-ttu-id="96bec-329">Double</span><span class="sxs-lookup"><span data-stu-id="96bec-329">Double</span></span>|  
|<span data-ttu-id="96bec-330">Ohne Verweis</span><span class="sxs-lookup"><span data-stu-id="96bec-330">Non-reference</span></span>|<span data-ttu-id="96bec-331">Per-Verweis.</span><span class="sxs-lookup"><span data-stu-id="96bec-331">By-reference.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="96bec-332">Im folgenden Beispiel wird den Standardbinder aus der `DefaultBinder` -Eigenschaft, und ruft Sie einen Member von MyClass durch Übergeben der `DefaultBinder` Wert als Parameter an <xref:System.Type.InvokeMember%2A>.</span><span class="sxs-lookup"><span data-stu-id="96bec-332">The following example gets the default binder from the `DefaultBinder` property, and invokes a member of MyClass by passing the `DefaultBinder` value as a parameter to <xref:System.Type.InvokeMember%2A>.</span></span>  
  
 [!code-cpp[Type_DefaultBinder#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_DefaultBinder/CPP/type_defaultbinder.cpp#1)]
 [!code-csharp[Type_DefaultBinder#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_DefaultBinder/CS/type_defaultbinder.cs#1)]
 [!code-vb[Type_DefaultBinder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_DefaultBinder/VB/type_defaultbinder.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.Binder" />
      </Docs>
    </Member>
    <Member MemberName="Delimiter">
      <MemberSignature Language="C#" Value="public static readonly char Delimiter;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly char Delimiter" />
      <MemberSignature Language="DocId" Value="F:System.Type.Delimiter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Delimiter As Char " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly char Delimiter;" />
      <MemberSignature Language="F#" Value=" staticval mutable Delimiter : char" Usage="System.Type.Delimiter" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-333">Separates names in the namespace of the <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-333">Separates names in the namespace of the <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="96bec-334">This field is read-only.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-334">This field is read-only.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EmptyTypes">
      <MemberSignature Language="C#" Value="public static readonly Type[] EmptyTypes;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Type[] EmptyTypes" />
      <MemberSignature Language="DocId" Value="F:System.Type.EmptyTypes" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly EmptyTypes As Type() " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly cli::array &lt;Type ^&gt; ^ EmptyTypes;" />
      <MemberSignature Language="F#" Value=" staticval mutable EmptyTypes : Type[]" Usage="System.Type.EmptyTypes" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-335">Represents an empty array of type <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-335">Represents an empty array of type <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="96bec-336">This field is read-only.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-336">This field is read-only.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="96bec-337">Das folgende Codebeispiel zeigt die `EmptyTypes` Feld verwendet die `GetConstructor` Methoden zum Abrufen eines Konstruktors, der keine Parameter akzeptiert.</span><span class="sxs-lookup"><span data-stu-id="96bec-337">The following code example shows the `EmptyTypes` field used in one of the `GetConstructor` methods to get a constructor that takes no parameters.</span></span>  
  
 [!code-cpp[Classic Type.EmptyTypes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.EmptyTypes Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.EmptyTypes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.EmptyTypes Example/CS/source.cs#1)]
 [!code-vb[Classic Type.EmptyTypes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.EmptyTypes Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-338">Determines if the underlying system type of the current <see cref="T:System.Type" /> is the same as the underlying system type of the specified <see cref="T:System.Object" /> or <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-338">Determines if the underlying system type of the current <see cref="T:System.Type" /> is the same as the underlying system type of the specified <see cref="T:System.Object" /> or <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="type.Equals o" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.Equals(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">
          <span data-ttu-id="96bec-339">The object whose underlying system type is to be compared with the underlying system type of the current <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-339">The object whose underlying system type is to be compared with the underlying system type of the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="96bec-340">For the comparison to succeed, <c>o</c> must be able to be cast or converted to an object of type   <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-340">For the comparison to succeed, <c>o</c> must be able to be cast or converted to an object of type   <see cref="T:System.Type" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-341">Determines if the underlying system type of the current <see cref="T:System.Type" /> object is the same as the underlying system type of the specified <see cref="T:System.Object" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-341">Determines if the underlying system type of the current <see cref="T:System.Type" /> object is the same as the underlying system type of the specified <see cref="T:System.Object" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-342">
            <see langword="true" /> if the underlying system type of <paramref name="o" /> is the same as the underlying system type of the current <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-342">
              <see langword="true" /> if the underlying system type of <paramref name="o" /> is the same as the underlying system type of the current <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="96bec-343">This method also returns <see langword="false" /> if: .</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-343">This method also returns <see langword="false" /> if: .</span>
          </span>
          <span data-ttu-id="96bec-344">  
  
-   <paramref name="o" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-344">  
  
-   <paramref name="o" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="96bec-345">  
  
-   <paramref name="o" /> cannot be cast or converted to a <see cref="T:System.Type" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-345">  
  
-   <paramref name="o" /> cannot be cast or converted to a <see cref="T:System.Type" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-346">Diese Methode überschreibt <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="96bec-346">This method overrides <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="96bec-347">Es wandelt `o` auf ein Objekt des Typs <xref:System.Type> und ruft die <xref:System.Type.Equals%28System.Type%29?displayProperty=nameWithType> Methode.</span><span class="sxs-lookup"><span data-stu-id="96bec-347">It casts `o` to an object of type <xref:System.Type> and calls the <xref:System.Type.Equals%28System.Type%29?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-348">Im folgenden Beispiel wird <xref:System.Type.Equals%28System.Object%29> zum Vergleichen verschiedener <xref:System.Type> Objektinstanzen mit verschiedenen <xref:System.Object> Instanzen.</span><span class="sxs-lookup"><span data-stu-id="96bec-348">The following example uses <xref:System.Type.Equals%28System.Object%29> to compare various <xref:System.Type> object instances with various <xref:System.Object> instances.</span></span>  
  
 [!code-csharp[System.Type.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Type.Equals/cs/EqualsEx1.cs#1)]
 [!code-vb[System.Type.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Type.Equals/vb/EqualsEx1.vb#1)]  
  
 <span data-ttu-id="96bec-349">Zwei Dinge sind besonders erwähnenswert Informationen zum Beispiel:</span><span class="sxs-lookup"><span data-stu-id="96bec-349">Two things are particularly worth noting about the example:</span></span>  
  
-   <span data-ttu-id="96bec-350">Der Vergleich eine <xref:System.Type> Objekt, das eine ganze Zahl mit darstellt eine <xref:System.Reflection.TypeInfo> -Objekt, das eine ganze Zahl zurückgeben darstellt `true` da <xref:System.Reflection.TypeInfo> ergibt sich aus <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="96bec-350">The comparison of a <xref:System.Type> object that represents an integer with a <xref:System.Reflection.TypeInfo> object that represents an integer return `true` because <xref:System.Reflection.TypeInfo> is derived from <xref:System.Type>.</span></span>  
  
-   <span data-ttu-id="96bec-351">Der Vergleich eine <xref:System.Type> Objekt, das darstellt eine <xref:System.Collections.Generic.IList%601> Objekt (ein offener generischer Typ) mit einer `List(Of String)` -Objekt (einen geschlossenen generischen Typ) zurückgibt `false`.</span><span class="sxs-lookup"><span data-stu-id="96bec-351">The comparison of a  <xref:System.Type> object that represents a <xref:System.Collections.Generic.IList%601> object (an open generic type) with a `List(Of String)` object (a closed generic type) returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.UnderlyingSystemType" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public virtual bool Equals (Type o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.Type o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.Equals(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Equals (o As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(Type ^ o);" />
      <MemberSignature Language="F#" Value="override this.Equals : Type -&gt; bool" Usage="type.Equals o" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.Equals(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="o">
          <span data-ttu-id="96bec-352">The object whose underlying system type is to be compared with the underlying system type of the current <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-352">The object whose underlying system type is to be compared with the underlying system type of the current <see cref="T:System.Type" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-353">Determines if the underlying system type of the current <see cref="T:System.Type" /> is the same as the underlying system type of the specified <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-353">Determines if the underlying system type of the current <see cref="T:System.Type" /> is the same as the underlying system type of the specified <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-354">
            <see langword="true" /> if the underlying system type of <paramref name="o" /> is the same as the underlying system type of the current <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-354">
              <see langword="true" /> if the underlying system type of <paramref name="o" /> is the same as the underlying system type of the current <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="96bec-355">Im folgenden Beispiel wird `Equals` zum Vergleichen zweier Typen.</span><span class="sxs-lookup"><span data-stu-id="96bec-355">The following example uses `Equals` to compare two types.</span></span>  
  
 [!code-csharp[Classic Type.Equals1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.Equals1 Example/CS/source.cs#1)]
 [!code-vb[Classic Type.Equals1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.Equals1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.UnderlyingSystemType" />
      </Docs>
    </Member>
    <Member MemberName="FilterAttribute">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.MemberFilter FilterAttribute;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Reflection.MemberFilter FilterAttribute" />
      <MemberSignature Language="DocId" Value="F:System.Type.FilterAttribute" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FilterAttribute As MemberFilter " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::MemberFilter ^ FilterAttribute;" />
      <MemberSignature Language="F#" Value=" staticval mutable FilterAttribute : System.Reflection.MemberFilter" Usage="System.Type.FilterAttribute" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberFilter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-356">Represents the member filter used on attributes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-356">Represents the member filter used on attributes.</span>
          </span>
          <span data-ttu-id="96bec-357">This field is read-only.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-357">This field is read-only.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-358">Dieses Feld enthält einen Verweis auf den Delegaten ein, die die <xref:System.Type.FindMembers%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="96bec-358">This field holds a reference to the delegate used by the <xref:System.Type.FindMembers%2A> method.</span></span> <span data-ttu-id="96bec-359">Durch diesen Delegaten gekapselte Methode akzeptiert zwei Parameter: die erste ist ein <xref:System.Reflection.MemberInfo> Objekt und die zweite ist ein `Object`.</span><span class="sxs-lookup"><span data-stu-id="96bec-359">The method encapsulated by this delegate takes two parameters: the first is a <xref:System.Reflection.MemberInfo> object and the second is an `Object`.</span></span> <span data-ttu-id="96bec-360">Die Methode bestimmt, ob die `MemberInfo` Objekt mit die vom angegebenen Kriterien übereinstimmt. die `Object`.</span><span class="sxs-lookup"><span data-stu-id="96bec-360">The method determines whether the `MemberInfo` object matches the criteria specified by the `Object`.</span></span> <span data-ttu-id="96bec-361">Die `Object` möglicherweise den Wert eines der Felder in den Klassen zugeordnet <xref:System.Reflection.FieldAttributes>, <xref:System.Reflection.MethodAttributes>, oder <xref:System.Reflection.MethodImplAttributes>.</span><span class="sxs-lookup"><span data-stu-id="96bec-361">The `Object` may be assigned the value of any one of the fields on the classes <xref:System.Reflection.FieldAttributes>, <xref:System.Reflection.MethodAttributes>, or <xref:System.Reflection.MethodImplAttributes>.</span></span>  
  
 <span data-ttu-id="96bec-362">Z. B. die `Object` kann der Wert eines Felds aus zugewiesen werden `FieldAttributes` wie "Public".</span><span class="sxs-lookup"><span data-stu-id="96bec-362">For example, the `Object` can be assigned the value of a field from `FieldAttributes` such as Public.</span></span> <span data-ttu-id="96bec-363">In diesem Fall, wenn die `FilterAttribute` Delegat wird aufgerufen, wird zurückgegeben, die `true` nur dann, wenn die Methode von dargestellt die `MemberInfo` Objekt mit dem öffentlichen Feld-Attribut in den Metadaten ergänzt wird.</span><span class="sxs-lookup"><span data-stu-id="96bec-363">In that case, when the `FilterAttribute` delegate is invoked, it will return `true` only if the method represented by the `MemberInfo` object is decorated with the public field attribute in metadata.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-364">Im folgenden Beispiel wird die `FilterAttribute` delegieren, übergibt sie als Parameter an die <xref:System.Type.FindMembers%2A> -Methode, und zeigt die angegebenen Elemente und ihre Attribute.</span><span class="sxs-lookup"><span data-stu-id="96bec-364">The following example gets the `FilterAttribute` delegate, passes it as a parameter to the <xref:System.Type.FindMembers%2A> method, and displays the specified members and their attributes.</span></span>  
  
 [!code-cpp[Type_FilterAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_FilterAttribute/CPP/type_filterattribute.cpp#1)]
 [!code-csharp[Type_FilterAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_FilterAttribute/CS/type_filterattribute.cs#1)]
 [!code-vb[Type_FilterAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_FilterAttribute/VB/type_filterattribute.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
        <altmember cref="T:System.Reflection.MemberFilter" />
      </Docs>
    </Member>
    <Member MemberName="FilterName">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.MemberFilter FilterName;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Reflection.MemberFilter FilterName" />
      <MemberSignature Language="DocId" Value="F:System.Type.FilterName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FilterName As MemberFilter " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::MemberFilter ^ FilterName;" />
      <MemberSignature Language="F#" Value=" staticval mutable FilterName : System.Reflection.MemberFilter" Usage="System.Type.FilterName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberFilter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-365">Represents the case-sensitive member filter used on names.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-365">Represents the case-sensitive member filter used on names.</span>
          </span>
          <span data-ttu-id="96bec-366">This field is read-only.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-366">This field is read-only.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-367">Dieses Feld enthält einen Verweis auf den Delegaten ein, die die <xref:System.Type.FindMembers%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="96bec-367">This field holds a reference to the delegate used by the <xref:System.Type.FindMembers%2A> method.</span></span> <span data-ttu-id="96bec-368">Durch diesen Delegaten gekapselte Methode akzeptiert zwei Parameter: die erste ist ein <xref:System.Reflection.MemberInfo> Objekt und die zweite ist ein `Object`.</span><span class="sxs-lookup"><span data-stu-id="96bec-368">The method encapsulated by this delegate takes two parameters: the first is a <xref:System.Reflection.MemberInfo> object and the second is an `Object`.</span></span> <span data-ttu-id="96bec-369">Die Methode bestimmt, ob die `MemberInfo` Objekt mit die vom angegebenen Kriterien übereinstimmt. die `Object`.</span><span class="sxs-lookup"><span data-stu-id="96bec-369">The method determines whether the `MemberInfo` object matches the criteria specified by the `Object`.</span></span> <span data-ttu-id="96bec-370">Die `Object` erhält einen Zeichenfolgenwert an, die kein nachfolgendes Zeichen enthalten, kann "\*" Platzhalterzeichen.</span><span class="sxs-lookup"><span data-stu-id="96bec-370">The `Object` is assigned a string value, which may include a trailing "\*" wildcard character.</span></span> <span data-ttu-id="96bec-371">Nur Ende Zeichenfolge mit Platzhalterzeichen werden unterstützt.</span><span class="sxs-lookup"><span data-stu-id="96bec-371">Only wildcard end string matching is supported.</span></span>  
  
 <span data-ttu-id="96bec-372">Z. B. die `Object` kann den Wert "Byte \*" zugewiesen werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-372">For example, the `Object` may be assigned the value "Byte\*".</span></span> <span data-ttu-id="96bec-373">In diesem Fall, wenn die `FilterName` Delegat wird aufgerufen, wird zurückgegeben, die `true` nur dann, wenn die Methode von dargestellt die `MemberInfo` Objekt hat einen Namen, die mit "Byte" beginnt.</span><span class="sxs-lookup"><span data-stu-id="96bec-373">In that case, when the `FilterName` delegate is invoked, it will return `true` only if the method represented by the `MemberInfo` object has a name that begins with "Byte".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-374">Im folgenden Codebeispiel wird Ruft ab, die die benutzerdefinierte zugeordneten Methoden `Application` Typ.</span><span class="sxs-lookup"><span data-stu-id="96bec-374">The following code example gets the methods associated with the user-defined `Application` type.</span></span>  
  
 [!code-cpp[Classic Type.FilterName Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.FilterName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.FilterName Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.FilterName Example/CS/source.cs#1)]
 [!code-vb[Classic Type.FilterName Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.FilterName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
        <altmember cref="T:System.Reflection.MemberFilter" />
      </Docs>
    </Member>
    <Member MemberName="FilterNameIgnoreCase">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.MemberFilter FilterNameIgnoreCase;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Reflection.MemberFilter FilterNameIgnoreCase" />
      <MemberSignature Language="DocId" Value="F:System.Type.FilterNameIgnoreCase" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FilterNameIgnoreCase As MemberFilter " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::MemberFilter ^ FilterNameIgnoreCase;" />
      <MemberSignature Language="F#" Value=" staticval mutable FilterNameIgnoreCase : System.Reflection.MemberFilter" Usage="System.Type.FilterNameIgnoreCase" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberFilter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-375">Represents the case-insensitive member filter used on names.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-375">Represents the case-insensitive member filter used on names.</span>
          </span>
          <span data-ttu-id="96bec-376">This field is read-only.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-376">This field is read-only.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-377">Dieses Feld enthält einen Verweis auf den Delegaten ein, die die <xref:System.Type.FindMembers%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="96bec-377">This field holds a reference to the delegate used by the <xref:System.Type.FindMembers%2A> method.</span></span> <span data-ttu-id="96bec-378">Durch diesen Delegaten gekapselte Methode akzeptiert zwei Parameter: die erste ist ein <xref:System.Reflection.MemberInfo> Objekt und die zweite ist ein `Object`.</span><span class="sxs-lookup"><span data-stu-id="96bec-378">The method encapsulated by this delegate takes two parameters: the first is a <xref:System.Reflection.MemberInfo> object and the second is an `Object`.</span></span> <span data-ttu-id="96bec-379">Die Methode bestimmt, ob die `MemberInfo` Objekt mit die vom angegebenen Kriterien übereinstimmt. die `Object`.</span><span class="sxs-lookup"><span data-stu-id="96bec-379">The method determines whether the `MemberInfo` object matches the criteria specified by the `Object`.</span></span> <span data-ttu-id="96bec-380">Die `Object` erhält einen Zeichenfolgenwert an, die kein nachfolgendes Zeichen enthalten, kann "\*" Platzhalterzeichen.</span><span class="sxs-lookup"><span data-stu-id="96bec-380">The `Object` is assigned a string value, which may include a trailing "\*" wildcard character.</span></span> <span data-ttu-id="96bec-381">Nur Ende Zeichenfolge mit Platzhalterzeichen werden unterstützt.</span><span class="sxs-lookup"><span data-stu-id="96bec-381">Only wildcard end string matching is supported.</span></span>  
  
 <span data-ttu-id="96bec-382">Z. B. die `Object` kann den Wert "ByTe \*" zugewiesen werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-382">For example, the `Object` may be assigned the value "ByTe\*".</span></span> <span data-ttu-id="96bec-383">In diesem Fall, wenn die `FilterName` Delegat wird aufgerufen, es wird nur dann true zurück, wenn die Methode von dargestellt die `MemberInfo` Objekt hat einen Namen, die mit "Byte", ignorieren Groß-/Kleinschreibung beginnt.</span><span class="sxs-lookup"><span data-stu-id="96bec-383">In that case, when the `FilterName` delegate is invoked, it will return true only if the method represented by the `MemberInfo` object has a name that begins with "byte", ignoring case.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-384">Im folgenden Beispiel wird die `MemberFilter` delegieren, übergibt sie als Parameter an die <xref:System.Type.FindMembers%2A> -Methode, und zeigt die Methoden und ihre Attribute den `String` -Klasse, die mit dem Buchstaben "c", wobei die Groß-/Kleinschreibung beginnen.</span><span class="sxs-lookup"><span data-stu-id="96bec-384">The following example gets the `MemberFilter` delegate, passes it as a parameter to the <xref:System.Type.FindMembers%2A> method, and displays the methods and their attributes of the `String` class that begin with the letter "c", disregarding the case.</span></span>  
  
 [!code-cpp[Type_FilterNameIgnoreCase#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_FilterNameIgnoreCase/CPP/type_filternameignorecase.cpp#1)]
 [!code-csharp[Type_FilterNameIgnoreCase#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_FilterNameIgnoreCase/CS/type_filternameignorecase.cs#1)]
 [!code-vb[Type_FilterNameIgnoreCase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_FilterNameIgnoreCase/VB/type_filternameignorecase.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
        <altmember cref="T:System.Reflection.MemberFilter" />
      </Docs>
    </Member>
    <Member MemberName="FindInterfaces">
      <MemberSignature Language="C#" Value="public virtual Type[] FindInterfaces (System.Reflection.TypeFilter filter, object filterCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] FindInterfaces(class System.Reflection.TypeFilter filter, object filterCriteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindInterfaces (filter As TypeFilter, filterCriteria As Object) As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ FindInterfaces(System::Reflection::TypeFilter ^ filter, System::Object ^ filterCriteria);" />
      <MemberSignature Language="F#" Value="abstract member FindInterfaces : System.Reflection.TypeFilter * obj -&gt; Type[]&#xA;override this.FindInterfaces : System.Reflection.TypeFilter * obj -&gt; Type[]" Usage="type.FindInterfaces (filter, filterCriteria)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.Reflection.TypeFilter" />
        <Parameter Name="filterCriteria" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="filter">
          <span data-ttu-id="96bec-385">The delegate that compares the interfaces against <c>filterCriteria</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-385">The delegate that compares the interfaces against <c>filterCriteria</c>.</span>
          </span>
        </param>
        <param name="filterCriteria">
          <span data-ttu-id="96bec-386">The search criteria that determines whether an interface should be included in the returned array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-386">The search criteria that determines whether an interface should be included in the returned array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-387">Returns an array of <see cref="T:System.Type" /> objects representing a filtered list of interfaces implemented or inherited by the current <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-387">Returns an array of <see cref="T:System.Type" /> objects representing a filtered list of interfaces implemented or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-388">An array of <see cref="T:System.Type" /> objects representing a filtered list of the interfaces implemented or inherited by the current <see cref="T:System.Type" />, or an empty array of type <see cref="T:System.Type" /> if no interfaces matching the filter are implemented or inherited by the current <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-388">An array of <see cref="T:System.Type" /> objects representing a filtered list of the interfaces implemented or inherited by the current <see cref="T:System.Type" />, or an empty array of type <see cref="T:System.Type" /> if no interfaces matching the filter are implemented or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-389">Diese Methode kann von einer abgeleiteten Klasse überschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-389">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="96bec-390">Die <xref:System.Reflection.Module.FilterTypeName?displayProperty=nameWithType> und <xref:System.Reflection.Module.FilterTypeNameIgnoreCase?displayProperty=nameWithType> Delegaten die <xref:System.Reflection.Module?displayProperty=nameWithType> Klasse kann auch in verwendet werden, anstelle der der <xref:System.Reflection.TypeFilter?displayProperty=nameWithType> delegieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-390">The <xref:System.Reflection.Module.FilterTypeName?displayProperty=nameWithType> and <xref:System.Reflection.Module.FilterTypeNameIgnoreCase?displayProperty=nameWithType> delegates supplied by the <xref:System.Reflection.Module?displayProperty=nameWithType> class may also be used, in lieu of the <xref:System.Reflection.TypeFilter?displayProperty=nameWithType> delegate.</span></span>  
  
 <span data-ttu-id="96bec-391">Alle von dieser Klasse implementierten Schnittstellen gelten bei der Suche, ob die von einer Basisklasse oder von der Klasse selbst deklariert.</span><span class="sxs-lookup"><span data-stu-id="96bec-391">All of the interfaces implemented by this class are considered during the search, whether declared by a base class or this class itself.</span></span>  
  
 <span data-ttu-id="96bec-392">Diese Methode sucht in der Basisklasse-Hierarchie, die zurückgegeben wird, jede der entsprechenden Schnittstellen, die jede Klasse implementiert wird, sowie alle entsprechenden Schnittstellen für jede von diesen Schnittstellen implementiert (d. h. der transitive Abschluss von den entsprechenden Schnittstellen wird zurückgegeben).</span><span class="sxs-lookup"><span data-stu-id="96bec-392">This method searches the base class hierarchy, returning each of the matching interfaces each class implements as well as all the matching interfaces each of those interfaces implements (that is, the transitive closure of the matching interfaces is returned).</span></span> <span data-ttu-id="96bec-393">Es werden keine doppelten Schnittstellen zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-393">No duplicate interfaces are returned.</span></span>  
  
 <span data-ttu-id="96bec-394">Wenn die aktuelle <xref:System.Type> einen Typparameter in der Definition eines generischen Typs oder generische Methode darstellt <xref:System.Type.FindInterfaces%2A> sucht alle Schnittstellen in den Einschränkungen für den Typparameter deklariert, und alle Schnittstellen, die über die Schnittstellen vererbt in den Einschränkungen deklariert.</span><span class="sxs-lookup"><span data-stu-id="96bec-394">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, <xref:System.Type.FindInterfaces%2A> searches all the interfaces declared in the constraints on the type parameter, and all interfaces inherited through the interfaces declared in the constraints.</span></span> <span data-ttu-id="96bec-395">Wenn die aktuelle <xref:System.Type> stellt ein Typargument eines generischen Typs, <xref:System.Type.FindInterfaces%2A> sucht Sie alle Schnittstellen vom Typ, implementiert werden, und zwar unabhängig davon, ob sie Einschränkungen entsprechen.</span><span class="sxs-lookup"><span data-stu-id="96bec-395">If the current <xref:System.Type> represents a type argument of a generic type, <xref:System.Type.FindInterfaces%2A> searches all the interfaces implemented by the type, whether or not they match constraints.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-396"><xref:System.Type.FindInterfaces%2A> generische Schnittstellen, sogar für Typen, die nicht generisch sind, können zurückgegeben werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-396"><xref:System.Type.FindInterfaces%2A> can return generic interfaces, even on types that are not generic.</span></span> <span data-ttu-id="96bec-397">Beispielsweise kann ein nicht generischer Typ implementieren `IEnumerable<int>` (`IEnumerable(Of Integer)` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="96bec-397">For example, a nongeneric type might implement `IEnumerable<int>` (`IEnumerable(Of Integer)` in Visual Basic).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-398">Das folgende Beispiel sucht die angegebene Schnittstelle implementiert oder geerbt vom angegebenen Typ und zeigt dann die Schnittstellennamen.</span><span class="sxs-lookup"><span data-stu-id="96bec-398">The following example finds the specified interface implemented or inherited by the specified type, and then displays the interface names.</span></span>  
  
 [!code-cpp[Type_FindInterfaces#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_FindInterfaces/CPP/type_findinterfaces.cpp#1)]
 [!code-csharp[Type_FindInterfaces#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_FindInterfaces/CS/type_findinterfaces.cs#1)]
 [!code-vb[Type_FindInterfaces#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_FindInterfaces/VB/type_findinterfaces.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96bec-399">
            <paramref name="filter" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-399">
              <paramref name="filter" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="96bec-400">A static initializer is invoked and throws an exception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-400">A static initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.Module" />
        <altmember cref="T:System.Reflection.TypeFilter" />
        <altmember cref="M:System.Type.GetInterface(System.String)" />
        <altmember cref="M:System.Type.GetInterfaces" />
      </Docs>
    </Member>
    <Member MemberName="FindMembers">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MemberInfo[] FindMembers (System.Reflection.MemberTypes memberType, System.Reflection.BindingFlags bindingAttr, System.Reflection.MemberFilter filter, object filterCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] FindMembers(valuetype System.Reflection.MemberTypes memberType, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.MemberFilter filter, object filterCriteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindMembers (memberType As MemberTypes, bindingAttr As BindingFlags, filter As MemberFilter, filterCriteria As Object) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ FindMembers(System::Reflection::MemberTypes memberType, System::Reflection::BindingFlags bindingAttr, System::Reflection::MemberFilter ^ filter, System::Object ^ filterCriteria);" />
      <MemberSignature Language="F#" Value="abstract member FindMembers : System.Reflection.MemberTypes * System.Reflection.BindingFlags * System.Reflection.MemberFilter * obj -&gt; System.Reflection.MemberInfo[]&#xA;override this.FindMembers : System.Reflection.MemberTypes * System.Reflection.BindingFlags * System.Reflection.MemberFilter * obj -&gt; System.Reflection.MemberInfo[]" Usage="type.FindMembers (memberType, bindingAttr, filter, filterCriteria)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberType" Type="System.Reflection.MemberTypes" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="filter" Type="System.Reflection.MemberFilter" />
        <Parameter Name="filterCriteria" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="memberType">
          <span data-ttu-id="96bec-401">An object that indicates the type of member to search for.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-401">An object that indicates the type of member to search for.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="96bec-402">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-402">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="96bec-403">-or-  Zero, to return <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-403">-or-  Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="filter">
          <span data-ttu-id="96bec-404">The delegate that does the comparisons, returning <see langword="true" /> if the member currently being inspected matches the <c>filterCriteria</c> and <see langword="false" /> otherwise.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-404">The delegate that does the comparisons, returning <see langword="true" /> if the member currently being inspected matches the <c>filterCriteria</c> and <see langword="false" /> otherwise.</span>
          </span>
          <span data-ttu-id="96bec-405">You can use the <see langword="FilterAttribute" />, <see langword="FilterName" />, and <see langword="FilterNameIgnoreCase" /> delegates supplied by this class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-405">You can use the <see langword="FilterAttribute" />, <see langword="FilterName" />, and <see langword="FilterNameIgnoreCase" /> delegates supplied by this class.</span>
          </span>
          <span data-ttu-id="96bec-406">The first uses the fields of <see langword="FieldAttributes" />, <see langword="MethodAttributes" />, and <see langword="MethodImplAttributes" /> as search criteria, and the other two delegates use <see langword="String" /> objects as the search criteria.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-406">The first uses the fields of <see langword="FieldAttributes" />, <see langword="MethodAttributes" />, and <see langword="MethodImplAttributes" /> as search criteria, and the other two delegates use <see langword="String" /> objects as the search criteria.</span>
          </span>
        </param>
        <param name="filterCriteria">
          <span data-ttu-id="96bec-407">The search criteria that determines whether a member is returned in the array of <see langword="MemberInfo" /> objects.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-407">The search criteria that determines whether a member is returned in the array of <see langword="MemberInfo" /> objects.</span>
          </span>
          <span data-ttu-id="96bec-408">The fields of <see langword="FieldAttributes" />, <see langword="MethodAttributes" />, and <see langword="MethodImplAttributes" /> can be used in conjunction with the <see langword="FilterAttribute" /> delegate supplied by this class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-408">The fields of <see langword="FieldAttributes" />, <see langword="MethodAttributes" />, and <see langword="MethodImplAttributes" /> can be used in conjunction with the <see langword="FilterAttribute" /> delegate supplied by this class.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-409">Returns a filtered array of <see cref="T:System.Reflection.MemberInfo" /> objects of the specified member type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-409">Returns a filtered array of <see cref="T:System.Reflection.MemberInfo" /> objects of the specified member type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-410">A filtered array of <see cref="T:System.Reflection.MemberInfo" /> objects of the specified member type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-410">A filtered array of <see cref="T:System.Reflection.MemberInfo" /> objects of the specified member type.</span>
          </span>
          <span data-ttu-id="96bec-411">-or-  An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have members of type <paramref name="memberType" /> that match the filter criteria.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-411">-or-  An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have members of type <paramref name="memberType" /> that match the filter criteria.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-412">Diese Methode kann von einer abgeleiteten Klasse überschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-412">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="96bec-413">Mitglieder enthalten Eigenschaften, Methoden, Felder, Ereignisse und So weiter.</span><span class="sxs-lookup"><span data-stu-id="96bec-413">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="96bec-414">Die folgenden <xref:System.Reflection.BindingFlags> Filterflags können verwendet werden, auf welche Member in die Suche einbezogen werden:</span><span class="sxs-lookup"><span data-stu-id="96bec-414">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="96bec-415">Geben Sie `BindingFlags.Instance` oder `BindingFlags.Static` um ein Ergebnis zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-415">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="96bec-416">Geben Sie `BindingFlags.Instance` Instanzmember in die Suche eingeschlossen.</span><span class="sxs-lookup"><span data-stu-id="96bec-416">Specify `BindingFlags.Instance` to include instance members in the search.</span></span>  
  
-   <span data-ttu-id="96bec-417">Geben Sie `BindingFlags.Static` statische Mitglieder in die Suche eingeschlossen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="96bec-417">Specify `BindingFlags.Static` to include static members in the search.</span></span>  
  
-   <span data-ttu-id="96bec-418">Geben Sie `BindingFlags.Public` öffentliche Mitglieder in die Suche eingeschlossen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="96bec-418">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="96bec-419">Geben Sie `BindingFlags.NonPublic` nicht öffentliche Mitglieder (d. h. private, interne und geschützte Member) in die Suche eingeschlossen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="96bec-419">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span>  
  
 <span data-ttu-id="96bec-420">Die folgenden <xref:System.Reflection.BindingFlags> Modifiziererflags können verwendet werden, um die Funktionsweise der Suche ändern:</span><span class="sxs-lookup"><span data-stu-id="96bec-420">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="96bec-421">`BindingFlags.DeclaredOnly` Suchen Sie nur die Member deklariert die <xref:System.Type>, nicht die Elemente, die nur geerbt wurden.</span><span class="sxs-lookup"><span data-stu-id="96bec-421">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="96bec-422">Weitere Informationen finden Sie unter <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="96bec-422">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="96bec-423">Gültige Werte für <xref:System.Type.MemberType%2A> in definiert <xref:System.Reflection.MemberInfo>.</span><span class="sxs-lookup"><span data-stu-id="96bec-423">Valid values for <xref:System.Type.MemberType%2A> are defined in <xref:System.Reflection.MemberInfo>.</span></span> <span data-ttu-id="96bec-424">Wenn keine solchen Member gefunden werden, wird ein leeres Array zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-424">If no such members are found, an empty array is returned.</span></span>  
  
 <span data-ttu-id="96bec-425">Rufen Sie die klasseninitialisierung (.cctor), die mit dieser Methode müssen Sie angeben <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="96bec-425">To get the class initializer (.cctor) using this method, you must specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="96bec-426">Erhalten Sie auch die klasseninitialisierung verwenden die <xref:System.Type.TypeInitializer%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="96bec-426">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="96bec-427">Wenn die aktuelle <xref:System.Type> stellt einen Typparameter einer generischen Typ-oder Methodendefinition, <xref:System.Type.FindMembers%2A> verarbeitet alle Member deklariert, indem die Class-Einschränkung und die schnittstelleneinschränkungen des Typparameters.</span><span class="sxs-lookup"><span data-stu-id="96bec-427">If the current <xref:System.Type> represents a type parameter of a generic type or generic method, <xref:System.Type.FindMembers%2A> processes any members declared by the class constraint and the interface constraints of the type parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-428">Im folgende Beispiel sucht alle Elemente in einer Klasse, die die angegebenen Suchkriterien entsprechen, und klicken Sie dann werden die übereinstimmenden Elemente angezeigt.</span><span class="sxs-lookup"><span data-stu-id="96bec-428">The following example finds all the members in a class that match the specified search criteria, and then displays the matched members.</span></span>  
  
 [!code-cpp[Type_FindMembers#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_FindMembers/CPP/type_findmembers.cpp#1)]
 [!code-csharp[Type_FindMembers#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_FindMembers/CS/type_findmembers.cs#1)]
 [!code-vb[Type_FindMembers#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_FindMembers/VB/type_findmembers.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96bec-429">
            <paramref name="filter" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-429">
              <paramref name="filter" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMember(System.String)" />
        <altmember cref="M:System.Type.GetMembers" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
      </Docs>
    </Member>
    <Member MemberName="FullName">
      <MemberSignature Language="C#" Value="public abstract string FullName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullName" />
      <MemberSignature Language="DocId" Value="P:System.Type.FullName" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property FullName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ FullName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FullName : string" Usage="System.Type.FullName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.FullName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-430">Gets the fully qualified name of the type, including its namespace but not its assembly.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-430">Gets the fully qualified name of the type, including its namespace but not its assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-431">Der vollqualifizierte Name des Typs, einschließlich des Namespace, jedoch ausschließlich der Assembly, oder <see langword="null" />, wenn die aktuelle Instanz einen auf einem Typparameter basierenden generischen Typparameter, Arraytyp, Zeigertyp oder <see langword="byref" />-Typ oder einen generischen Typ darstellt, der keine generische Typdefinition ist, jedoch nicht aufgelöste Typparameter enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-431">The fully qualified name of the type, including its namespace but not its assembly; or <see langword="null" /> if the current instance represents a generic type parameter, an array type, pointer type, or <see langword="byref" /> type based on a type parameter, or a generic type that is not a generic type definition but contains unresolved type parameters.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-432">Z. B. den vollqualifizierten Namen des der <xref:System.String> Typ `System.String`.</span><span class="sxs-lookup"><span data-stu-id="96bec-432">For example, the fully qualified name of the <xref:System.String> type is `System.String`.</span></span> <span data-ttu-id="96bec-433">Vergleichen Sie dies mit dem assemblyqualifizierten Namen zurückgegeben werden, indem die <xref:System.Type.AssemblyQualifiedName%2A> -Eigenschaft, die den vollständigen Namen sowie den vollständigen Assemblynamen besteht.</span><span class="sxs-lookup"><span data-stu-id="96bec-433">Contrast this with the assembly-qualified name returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, which consists of the full name plus the full assembly name.</span></span>  
  
 <span data-ttu-id="96bec-434">Wenn der aktuelle Typ einen geschlossenen generischen Typ darstellt, die Typargumente, die in der Zeichenfolge zurückgegeben, durch die <xref:System.Type.FullName%2A> Eigenschaft werden durch ihren vollständigen Assemblynamen, qualifiziert, auch wenn die Zeichenfolgendarstellung des generischen Typs selbst nicht durch seine voll qualifiziert wird Name der Assembly.</span><span class="sxs-lookup"><span data-stu-id="96bec-434">If the current type represents a closed generic type, the type arguments in the string returned by the <xref:System.Type.FullName%2A> property are qualified by their full assembly name, even though the string representation of the generic type itself is not qualified by its full assembly name.</span></span> <span data-ttu-id="96bec-435">Das folgende Beispiel veranschaulicht den Unterschied in der FullName-Eigenschaft für einen Typ, der generische Typdefinition darstellt, und eine, die einen geschlossenen generischen Typ darstellt.</span><span class="sxs-lookup"><span data-stu-id="96bec-435">The following example illustrates the difference in the FullName property for a type that represents generic type definition and one that represents a closed generic type.</span></span>  
  
 [!code-csharp[System.Type.FullName#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.fullname/cs/fullnameex1.cs#2)]
 [!code-vb[System.Type.FullName#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.fullname/vb/fullnameex1.vb#2)]  
  
 <span data-ttu-id="96bec-436">Diese Eigenschaft gibt `null` wenn:</span><span class="sxs-lookup"><span data-stu-id="96bec-436">This property returns `null` if:</span></span>  
  
-   <span data-ttu-id="96bec-437">Die aktuelle <xref:System.Type> -Objekt einen Typparameter eines generischen Typs darstellt.</span><span class="sxs-lookup"><span data-stu-id="96bec-437">The current <xref:System.Type> object represents a type parameter of a generic type.</span></span>  
  
     <span data-ttu-id="96bec-438">Das folgende Beispiel ruft die Typparameter der <xref:System.Nullable%601> Typ und die Versuche zum Anzeigen der <xref:System.Type.FullName%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="96bec-438">The following example retrieves the type parameter of the <xref:System.Nullable%601> type and attempts to display its <xref:System.Type.FullName%2A> property.</span></span>  
  
     [!code-csharp[System.Type.FullName#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.fullname/cs/Fullname3.cs#3)]
     [!code-vb[System.Type.FullName#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.fullname/vb/Fullname3.vb#3)]  
  
-   <span data-ttu-id="96bec-439">Die aktuelle <xref:System.Type> Objekt stellt einen Arraytyp, ein Zeigertyp oder ein `byref` Typ, der auf einen generischen Typparameter basiert.</span><span class="sxs-lookup"><span data-stu-id="96bec-439">The current <xref:System.Type> object represents an array type, a pointer  type, or a `byref` type that is based on a generic type parameter.</span></span>  
  
     <span data-ttu-id="96bec-440">Das folgende Beispiel definiert einen generischen Typ `Generictype1<T>`, mit drei Methoden: `Display(T[])`, die ein Array vom Typ T, übergeben wird `HandleT(T)`, die ein T-Objekt übergeben wird und `ChangeValue(ref T)`, die ein T-Objekt als Verweis übergeben wird.</span><span class="sxs-lookup"><span data-stu-id="96bec-440">The following example defines a generic type, `Generictype1<T>`, with three methods: `Display(T[])`, which is passed an array of type T; `HandleT(T)`, which is passed a T object; and `ChangeValue(ref T)`, which is passed a T object by reference.</span></span> <span data-ttu-id="96bec-441">Da C#- und Visual Basic, definieren Sie T als Zeiger in unzulässig sind die `HandleT` -Methode aufrufen, müssen die <xref:System.Type.MakePointerType%2A> Methode für die <xref:System.Type> -Objekt, Parametertyp der Methode, um einen Zeiger auf einen generischen Typ erstellen darstellt.</span><span class="sxs-lookup"><span data-stu-id="96bec-441">Because C# and Visual Basic do not allow us to define T as a pointer in the `HandleT` method, we have to call the <xref:System.Type.MakePointerType%2A> method on the <xref:System.Type> object that represents the method's parameter type to create a pointer to a generic type.</span></span> <span data-ttu-id="96bec-442">Die Ausgabe des Beispiels zeigt, dass in allen drei Fällen die <xref:System.Type.FullName%2A> Eigenschaft `null`.</span><span class="sxs-lookup"><span data-stu-id="96bec-442">The output from the example shows that in all three cases, the <xref:System.Type.FullName%2A> property is `null`.</span></span>  
  
     [!code-csharp[System.Type.FullName#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.fullname/cs/Fullname4.cs#4)]
     [!code-vb[System.Type.FullName#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.fullname/vb/FullName4.vb#4)]  
  
-   <span data-ttu-id="96bec-443">Der aktuelle Typ enthält generischen Typparameter, die nicht durch bestimmte Typen ersetzt wurden (d. h. die <xref:System.Type.ContainsGenericParameters%2A> -Eigenschaft gibt `true`), aber der Typ ist nicht die Definition eines generischen Typs (, also die <xref:System.Type.IsGenericTypeDefinition%2A> -Eigenschaft gibt `false`</span><span class="sxs-lookup"><span data-stu-id="96bec-443">The current type contains generic type parameters that have not been replaced by specific types (that is, the <xref:System.Type.ContainsGenericParameters%2A> property returns `true`), but the type is not a generic type definition (that is, the <xref:System.Type.IsGenericTypeDefinition%2A> property returns `false`</span></span>  
  
     <span data-ttu-id="96bec-444">Im folgenden Beispiel `Derived<T>` erbt `Base<T>`.</span><span class="sxs-lookup"><span data-stu-id="96bec-444">In the following example, `Derived<T>` inherits from `Base<T>`.</span></span> <span data-ttu-id="96bec-445">Die <xref:System.Type.BaseType%2A> Eigenschaft ruft die <xref:System.Type> Objekt, das den Basistyp darstellt `Derived<T>`, und die zugehörige <xref:System.Type.FullName%2A> -Eigenschaft gibt `null`.</span><span class="sxs-lookup"><span data-stu-id="96bec-445">The <xref:System.Type.BaseType%2A> property obtains the  <xref:System.Type> object that represents the base type of `Derived<T>`, and its <xref:System.Type.FullName%2A> property returns `null`.</span></span>  
  
     [!code-csharp[System.Type.FullName#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.fullname/cs/Fullname5.cs#5)]
     [!code-vb[System.Type.FullName#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.fullname/vb/FullName5.vb#5)]  
  
     <span data-ttu-id="96bec-446">Zum Abrufen einer <xref:System.Type.FullName%2A> , die sich nicht `null`, können Sie die <xref:System.Type.GetGenericTypeDefinition%2A> Methode, um die Definition eines generischen Typs abzurufen, wie im Beispiel veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="96bec-446">To get a <xref:System.Type.FullName%2A> that is not `null`, you can use the <xref:System.Type.GetGenericTypeDefinition%2A> method to get the generic type definition, as the example illustrates.</span></span>  
  
 <span data-ttu-id="96bec-447">Diese Eigenschaft ist schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="96bec-447">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-448">Das folgende Beispiel zeigt den vollständigen Namen des angegebenen Typs.</span><span class="sxs-lookup"><span data-stu-id="96bec-448">The following example displays the full name of the specified type.</span></span>  
  
 [!code-cpp[TestFullName#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestFullName/CPP/TestFullName.cpp#1)]
 [!code-csharp[TestFullName#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestFullName/CS/testfullname.cs#1)]
 [!code-vb[TestFullName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestFullName/VB/testfullname.vb#1)]  
  
 <span data-ttu-id="96bec-449">Im folgenden Beispiel wird die Zeichenfolgen, die zurückgegeben werden, indem die <xref:System.Type.ToString%2A> Methode und die `Name`, <xref:System.Type.FullName%2A>, und <xref:System.Type.AssemblyQualifiedName%2A> Eigenschaften.</span><span class="sxs-lookup"><span data-stu-id="96bec-449">The following example compares the strings returned by the <xref:System.Type.ToString%2A> method and the `Name`, <xref:System.Type.FullName%2A>, and <xref:System.Type.AssemblyQualifiedName%2A> properties.</span></span>  
  
 [!code-csharp[System.Type.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.tostring/cs/fullname1.cs#1)]
 [!code-vb[System.Type.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.tostring/vb/fullname1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.Namespace" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
        <altmember cref="T:System.Reflection.AssemblyName" />
      </Docs>
    </Member>
    <Member MemberName="GenericParameterAttributes">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.GenericParameterAttributes GenericParameterAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.GenericParameterAttributes GenericParameterAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Type.GenericParameterAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property GenericParameterAttributes As GenericParameterAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::GenericParameterAttributes GenericParameterAttributes { System::Reflection::GenericParameterAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.GenericParameterAttributes : System.Reflection.GenericParameterAttributes" Usage="System.Type.GenericParameterAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.GenericParameterAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-450">Gets a combination of <see cref="T:System.Reflection.GenericParameterAttributes" /> flags that describe the covariance and special constraints of the current generic type parameter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-450">Gets a combination of <see cref="T:System.Reflection.GenericParameterAttributes" /> flags that describe the covariance and special constraints of the current generic type parameter.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-451">Eine bitweise Kombination von <see cref="T:System.Reflection.GenericParameterAttributes" />-Werten, die die Kovarianz und die speziellen Einschränkungen des aktuellen generischen Typparameters beschreiben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-451">A bitwise combination of <see cref="T:System.Reflection.GenericParameterAttributes" /> values that describes the covariance and special constraints of the current generic type parameter.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-452">Der Wert dieser Eigenschaft enthält Flags, die beschreiben, ob der aktuellen generischen Typparameter kovariant ist, und die Flags, die besonderen Einschränkungen zu beschreiben.</span><span class="sxs-lookup"><span data-stu-id="96bec-452">The value of this property contains flags that describe whether the current generic type parameter is covariant, and flags that describe any special constraints.</span></span> <span data-ttu-id="96bec-453">Verwenden Sie die <xref:System.Reflection.GenericParameterAttributes.VarianceMask?displayProperty=nameWithType> Wert, der die Kovarianzflags auswählen, und Verwenden der <xref:System.Reflection.GenericParameterAttributes.SpecialConstraintMask?displayProperty=nameWithType> Wert, der die Einschränkungsflags auswählen.</span><span class="sxs-lookup"><span data-stu-id="96bec-453">Use the <xref:System.Reflection.GenericParameterAttributes.VarianceMask?displayProperty=nameWithType> value to select the covariance flags, and use the <xref:System.Reflection.GenericParameterAttributes.SpecialConstraintMask?displayProperty=nameWithType> value to select the constraint flags.</span></span>  
  
 <span data-ttu-id="96bec-454">Eine Liste der invarianten Bedingungen für Begriffe, für Begriffe, die für die Reflektion mit generischen Methoden verwendet werden, finden Sie in den Hinweisen zur Eigenschaft <xref:System.Type.IsGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="96bec-454">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-455">Das folgende Codebeispiel definiert einen generischen Typ `Test` mit zwei Typparametern, die verschiedene Einschränkungen aufweisen.</span><span class="sxs-lookup"><span data-stu-id="96bec-455">The following code example defines a generic type `Test` with two type parameters that have different constraints.</span></span> <span data-ttu-id="96bec-456">Wenn das Programm ausgeführt wird, die Einschränkungen werden überprüft, mit der <xref:System.Type.GenericParameterAttributes%2A> Eigenschaft und die <xref:System.Type.GetGenericParameterConstraints%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="96bec-456">When the program executes, the constraints are examined using the <xref:System.Type.GenericParameterAttributes%2A> property and the <xref:System.Type.GetGenericParameterConstraints%2A> method.</span></span>  
  
 [!code-cpp[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/CPP/source.cpp#1)]
 [!code-csharp[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/CS/source.cs#1)]
 [!code-vb[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="96bec-457">The current <see cref="T:System.Type" /> object is not a generic type parameter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-457">The current <see cref="T:System.Type" /> object is not a generic type parameter.</span>
          </span>
          <span data-ttu-id="96bec-458">That is, the <see cref="P:System.Type.IsGenericParameter" /> property returns <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-458">That is, the <see cref="P:System.Type.IsGenericParameter" /> property returns <see langword="false" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="96bec-459">The invoked method is not supported in the base class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-459">The invoked method is not supported in the base class.</span>
          </span>
        </exception>
        <altmember cref="M:System.Type.GetGenericParameterConstraints" />
        <altmember cref="P:System.Type.IsGenericParameter" />
      </Docs>
    </Member>
    <Member MemberName="GenericParameterPosition">
      <MemberSignature Language="C#" Value="public virtual int GenericParameterPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 GenericParameterPosition" />
      <MemberSignature Language="DocId" Value="P:System.Type.GenericParameterPosition" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property GenericParameterPosition As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int GenericParameterPosition { int get(); };" />
      <MemberSignature Language="F#" Value="member this.GenericParameterPosition : int" Usage="System.Type.GenericParameterPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-460">Gets the position of the type parameter in the type parameter list of the generic type or method that declared the parameter, when the <see cref="T:System.Type" /> object represents a type parameter of a generic type or a generic method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-460">Gets the position of the type parameter in the type parameter list of the generic type or method that declared the parameter, when the <see cref="T:System.Type" /> object represents a type parameter of a generic type or a generic method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-461">Die Position eines Typparameters in der Typparameterliste des generischen Typs oder der generischen Methode, der bzw. die den Parameter definiert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-461">The position of a type parameter in the type parameter list of the generic type or method that defines the parameter.</span>
          </span>
          <span data-ttu-id="96bec-462">Die Positionsnummern beginnen mit 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-462">Position numbers begin at 0.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-463">Die <xref:System.Type.GenericParameterPosition%2A> -Eigenschaft gibt die Position eines Typparameters in der Parameterliste der Definition eines generischen Typs oder generische Methodendefinition, in dem der Typparameter ursprünglich definiert wurde.</span><span class="sxs-lookup"><span data-stu-id="96bec-463">The <xref:System.Type.GenericParameterPosition%2A> property returns the position of a type parameter in the parameter list of the generic type definition or generic method definition where the type parameter was originally defined.</span></span> <span data-ttu-id="96bec-464">Die <xref:System.Type.DeclaringType%2A> und <xref:System.Type.DeclaringMethod%2A> Eigenschaften identifizieren den generische Typ- oder Methodendefinition:</span><span class="sxs-lookup"><span data-stu-id="96bec-464">The <xref:System.Type.DeclaringType%2A> and <xref:System.Type.DeclaringMethod%2A> properties identify the generic type or method definition:</span></span>  
  
-   <span data-ttu-id="96bec-465">Wenn die <xref:System.Type.DeclaringMethod%2A> -Eigenschaft gibt eine <xref:System.Reflection.MethodInfo>, <xref:System.Reflection.MethodInfo> stellt eine generische Methodendefinition, und das aktuelle <xref:System.Type> Objekt einen Typparameter der generischen Methodendefinition darstellt.</span><span class="sxs-lookup"><span data-stu-id="96bec-465">If the <xref:System.Type.DeclaringMethod%2A> property returns a <xref:System.Reflection.MethodInfo>, that <xref:System.Reflection.MethodInfo> represents a generic method definition, and the current <xref:System.Type> object represents a type parameter of that generic method definition.</span></span>  
  
-   <span data-ttu-id="96bec-466">Wenn die <xref:System.Type.DeclaringMethod%2A> -Eigenschaft gibt `null`, und klicken Sie dann die <xref:System.Type.DeclaringType%2A> -Eigenschaft gibt immer einen <xref:System.Type> Objekt, das eine generische Typdefinition, und das aktuelle darstellt <xref:System.Type> -Objekt einen Typparameter des generischen Typs darstellt die Definition.</span><span class="sxs-lookup"><span data-stu-id="96bec-466">If the <xref:System.Type.DeclaringMethod%2A> property returns `null`, then the <xref:System.Type.DeclaringType%2A> property always returns a <xref:System.Type> object representing a generic type definition, and the current <xref:System.Type> object represents a type parameter of that generic type definition.</span></span>  
  
 <span data-ttu-id="96bec-467">Zu den richtigen Kontext für den Wert der <xref:System.Type.GenericParameterPosition%2A> -Eigenschaft, es ist notwendig, identifizieren Sie die generischen Typ oder Methode, die ein Typparameter gehört.</span><span class="sxs-lookup"><span data-stu-id="96bec-467">To provide the correct context for the value of the <xref:System.Type.GenericParameterPosition%2A> property, it is necessary to identify the generic type or method a type parameter belongs to.</span></span> <span data-ttu-id="96bec-468">Betrachten Sie beispielsweise den Rückgabewert der generischen Methode `GetSomething` in den folgenden Code:</span><span class="sxs-lookup"><span data-stu-id="96bec-468">For example, consider the return value of the generic method `GetSomething` in the following code:</span></span>  
  
 [!code-cpp[System.Type.GenericParameterPosition#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.type.genericparameterposition/cpp/remarks.cpp#1)]
 [!code-csharp[System.Type.GenericParameterPosition#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.genericparameterposition/cs/remarks.cs#1)]
 [!code-vb[System.Type.GenericParameterPosition#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.genericparameterposition/vb/remarks.vb#1)]  
  
 <span data-ttu-id="96bec-469">Der Rückgabetyp von `GetSomething` hängt von der Klasse angegebenen Typargumente `A` und `GetSomething` selbst.</span><span class="sxs-lookup"><span data-stu-id="96bec-469">The type returned by `GetSomething` depends on the type arguments supplied to class `A` and to `GetSomething` itself.</span></span> <span data-ttu-id="96bec-470">Sie erhalten eine <xref:System.Reflection.MethodInfo> für `GetSomething`, und von dem Sie den Rückgabetyp erhalten.</span><span class="sxs-lookup"><span data-stu-id="96bec-470">You can obtain a <xref:System.Reflection.MethodInfo> for `GetSomething`, and from that you can obtain the return type.</span></span> <span data-ttu-id="96bec-471">Wenn Sie überprüfen, dass die Typparameter des Rückgabetyps, <xref:System.Type.GenericParameterPosition%2A> gibt 0 zurück, für beide.</span><span class="sxs-lookup"><span data-stu-id="96bec-471">When you examine the type parameters of the return type, <xref:System.Type.GenericParameterPosition%2A> returns 0 for both.</span></span> <span data-ttu-id="96bec-472">Die Position des `V` ist 0, da `V` ist der erste Typparameter in der Liste der Typparameter für die Klasse `A`.</span><span class="sxs-lookup"><span data-stu-id="96bec-472">The position of `V` is 0 because `V` is the first type parameter in the type parameter list for class `A`.</span></span> <span data-ttu-id="96bec-473">Die Position des `X` ist 0, da `X` ist der erste Typparameter in der Typparameterliste für `GetSomething`.</span><span class="sxs-lookup"><span data-stu-id="96bec-473">The position of `X` is 0 because `X` is the first type parameter in the type parameter list for `GetSomething`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-474">Aufrufen der <xref:System.Type.GenericParameterPosition%2A> Eigenschaft löst eine Ausnahme aus, wenn die aktuelle <xref:System.Type> stellt keinen Typparameter dar.</span><span class="sxs-lookup"><span data-stu-id="96bec-474">Calling the <xref:System.Type.GenericParameterPosition%2A> property causes an exception if the current <xref:System.Type> does not represent a type parameter.</span></span> <span data-ttu-id="96bec-475">Wenn Sie die Typargumente eines offenen konstruierten Typs zu untersuchen, verwenden Sie die <xref:System.Type.IsGenericParameter%2A> Eigenschaft mitteilen, welche Parameter vom Typ und die Typen sind.</span><span class="sxs-lookup"><span data-stu-id="96bec-475">When you examine the type arguments of an open constructed type, use the <xref:System.Type.IsGenericParameter%2A> property to tell which are type parameters and which are types.</span></span> <span data-ttu-id="96bec-476">Die <xref:System.Type.IsGenericParameter%2A> -Eigenschaft gibt `true` für einen Typparameter; anschließend können Sie die <xref:System.Type.GenericParameterPosition%2A> Methode, um seine Position abrufen und Verwenden der <xref:System.Type.DeclaringMethod%2A> und <xref:System.Type.DeclaringType%2A> Eigenschaften, um zu bestimmen die generische Methode, oder geben Sie die Definition, die es definiert .</span><span class="sxs-lookup"><span data-stu-id="96bec-476">The <xref:System.Type.IsGenericParameter%2A> property returns `true` for a type parameter; you can then use the <xref:System.Type.GenericParameterPosition%2A> method to obtain its position and use the <xref:System.Type.DeclaringMethod%2A> and <xref:System.Type.DeclaringType%2A> properties to determine the generic method or type definition that defines it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-477">Im folgenden Beispiel wird eine generische Klasse mit zwei Typparametern, und es wird eine zweite generische Klasse, die von der ersten Klasse abgeleitet ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-477">The following example defines a generic class with two type parameters and defines a second generic class that derives from the first class.</span></span> <span data-ttu-id="96bec-478">Basisklasse für die abgeleitete Klasse verfügt über zwei Typargumente: der erste <xref:System.Int32>, und die zweite ist ein Typparameter des abgeleiteten Typs.</span><span class="sxs-lookup"><span data-stu-id="96bec-478">The derived class's base class has two type arguments: the first is <xref:System.Int32>, and the second is a type parameter of the derived type.</span></span> <span data-ttu-id="96bec-479">Das Beispiel zeigt Informationen zu diesen generischen Klassen, von gemeldeten einschließlich die Positionen der <xref:System.Type.GenericParameterPosition%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="96bec-479">The example displays information about these generic classes, including the positions reported by the <xref:System.Type.GenericParameterPosition%2A> property.</span></span>  
  
 [!code-cpp[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/CPP/source.cpp#1)]
 [!code-csharp[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/CS/source.cs#1)]
 [!code-vb[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="96bec-480">The current type does not represent a type parameter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-480">The current type does not represent a type parameter.</span>
          </span>
          <span data-ttu-id="96bec-481">That is, <see cref="P:System.Type.IsGenericParameter" /> returns <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-481">That is, <see cref="P:System.Type.IsGenericParameter" /> returns <see langword="false" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Type.MakeGenericType(System.Type[])" />
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="P:System.Type.IsGenericParameter" />
      </Docs>
    </Member>
    <Member MemberName="GenericTypeArguments">
      <MemberSignature Language="C#" Value="public virtual Type[] GenericTypeArguments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type[] GenericTypeArguments" />
      <MemberSignature Language="DocId" Value="P:System.Type.GenericTypeArguments" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property GenericTypeArguments As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property cli::array &lt;Type ^&gt; ^ GenericTypeArguments { cli::array &lt;Type ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GenericTypeArguments : Type[]" Usage="System.Type.GenericTypeArguments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-482">Gets an array of the generic type arguments for this type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-482">Gets an array of the generic type arguments for this type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-483">Ein Array von generischen Typargumenten für diesen Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-483">An array of the generic type arguments for this type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-484">Diese Eigenschaft wird nur die generischen Typargumente; d. h. Typen, die für die generischen Typparameter des aktuellen Typs angegeben wurden.</span><span class="sxs-lookup"><span data-stu-id="96bec-484">This property gets only the generic type arguments; that is, the types that have been specified for the generic type parameters of the current type.</span></span> <span data-ttu-id="96bec-485">Wenn der aktuelle Typ eine generische Typdefinition ist, gibt diese Eigenschaft ein leeres Array zurück.</span><span class="sxs-lookup"><span data-stu-id="96bec-485">If the current type is a generic type definition, this property returns an empty array.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-486">Wenn ein generischer Typ in einer generischen Methode oder in einem anderen generischen Typ verwendet wird, möglicherweise einiger seiner generischen Typargumente der einschließenden Methode oder der Typ generische Typparameter.</span><span class="sxs-lookup"><span data-stu-id="96bec-486">If a generic type is used in a generic method or in another generic type, some of its generic type arguments might be generic type parameters of the enclosing method or type.</span></span>  
  
 <span data-ttu-id="96bec-487">Rufen Sie die generischen Typparameter eines Typs, die eine generische Typdefinition darstellt, mit der <xref:System.Reflection.TypeInfo.GenericTypeParameters%2A?displayProperty=nameWithType> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="96bec-487">To get the generic type parameters of a type that represents a generic type definition, use the <xref:System.Reflection.TypeInfo.GenericTypeParameters%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="96bec-488">Zum Abrufen einer <xref:System.Reflection.TypeInfo> Objekt für die aktuelle <xref:System.Type> -Objekts die <xref:System.Reflection.IntrospectionExtensions.GetTypeInfo%2A?displayProperty=nameWithType> -Erweiterungsmethode.</span><span class="sxs-lookup"><span data-stu-id="96bec-488">To get a <xref:System.Reflection.TypeInfo> object for the current <xref:System.Type> object, use the <xref:System.Reflection.IntrospectionExtensions.GetTypeInfo%2A?displayProperty=nameWithType> extension method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArrayRank">
      <MemberSignature Language="C#" Value="public virtual int GetArrayRank ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetArrayRank() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetArrayRank" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetArrayRank () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetArrayRank();" />
      <MemberSignature Language="F#" Value="abstract member GetArrayRank : unit -&gt; int&#xA;override this.GetArrayRank : unit -&gt; int" Usage="type.GetArrayRank " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetArrayRank</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="96bec-489">Gets the number of dimensions in an array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-489">Gets the number of dimensions in an array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-490">An integer that contains the number of dimensions in the current type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-490">An integer that contains the number of dimensions in the current type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="96bec-491">Das folgende Beispiel zeigt die Anzahl der Dimensionen in einem Array.</span><span class="sxs-lookup"><span data-stu-id="96bec-491">The following example displays the number of dimensions in an array.</span></span>  
  
 [!code-cpp[Type_GetArrayRank#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetArrayRank/CPP/type_getarrayrank.cpp#1)]
 [!code-csharp[Type_GetArrayRank#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetArrayRank/CS/type_getarrayrank.cs#1)]
 [!code-vb[Type_GetArrayRank#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetArrayRank/VB/type_getarrayrank.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="96bec-492">The functionality of this method is unsupported in the base class and must be implemented in a derived class instead.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-492">The functionality of this method is unsupported in the base class and must be implemented in a derived class instead.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="96bec-493">The current type is not an array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-493">The current type is not an array.</span>
          </span>
        </exception>
        <altmember cref="T:System.Array" />
        <altmember cref="P:System.Array.Rank" />
      </Docs>
    </Member>
    <Member MemberName="GetAttributeFlagsImpl">
      <MemberSignature Language="C#" Value="protected abstract System.Reflection.TypeAttributes GetAttributeFlagsImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Reflection.TypeAttributes GetAttributeFlagsImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetAttributeFlagsImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetAttributeFlagsImpl () As TypeAttributes" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Reflection::TypeAttributes GetAttributeFlagsImpl();" />
      <MemberSignature Language="F#" Value="abstract member GetAttributeFlagsImpl : unit -&gt; System.Reflection.TypeAttributes" Usage="type.GetAttributeFlagsImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeAttributes</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="96bec-494">When overridden in a derived class, implements the <see cref="P:System.Type.Attributes" /> property and gets a bitmask indicating the attributes associated with the <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-494">When overridden in a derived class, implements the <see cref="P:System.Type.Attributes" /> property and gets a bitmask indicating the attributes associated with the <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-495">A <see cref="T:System.Reflection.TypeAttributes" /> object representing the attribute set of the <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-495">A <see cref="T:System.Reflection.TypeAttributes" /> object representing the attribute set of the <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Type.Attributes" />
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetConstructor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-496">Gets a specific constructor of the current <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-496">Gets a specific constructor of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo GetConstructor (Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructor(class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructor(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConstructor (types As Type()) As ConstructorInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::ConstructorInfo ^ GetConstructor(cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructor : Type[] -&gt; System.Reflection.ConstructorInfo&#xA;override this.GetConstructor : Type[] -&gt; System.Reflection.ConstructorInfo" Usage="type.GetConstructor types" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetConstructor(System.Type[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="types">
          <span data-ttu-id="96bec-497">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the desired constructor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-497">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the desired constructor.</span>
          </span>
          <span data-ttu-id="96bec-498">-or-  An empty array of <see cref="T:System.Type" /> objects, to get a constructor that takes no parameters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-498">-or-  An empty array of <see cref="T:System.Type" /> objects, to get a constructor that takes no parameters.</span>
          </span>
          <span data-ttu-id="96bec-499">Such an empty array is provided by the <see langword="static" /> field <see cref="F:System.Type.EmptyTypes" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-499">Such an empty array is provided by the <see langword="static" /> field <see cref="F:System.Type.EmptyTypes" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-500">Searches for a public instance constructor whose parameters match the types in the specified array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-500">Searches for a public instance constructor whose parameters match the types in the specified array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-501">An object representing the public instance constructor whose parameters match the types in the parameter type array, if found; otherwise, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-501">An object representing the public instance constructor whose parameters match the types in the parameter type array, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-502">Diese methodenüberladung sucht nach öffentlichen Instanzkonstruktoren und kann nicht verwendet werden, um ein Klasseninitialisierer (.cctor) zu erhalten.</span><span class="sxs-lookup"><span data-stu-id="96bec-502">This method overload looks for public instance constructors and cannot be used to obtain a class initializer (.cctor).</span></span> <span data-ttu-id="96bec-503">Um ein Klasseninitialisierer zu erhalten, verwenden Sie eine Überladung mit <xref:System.Reflection.BindingFlags>, und geben Sie <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="96bec-503">To get a class initializer, use an overload that takes <xref:System.Reflection.BindingFlags>, and specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="96bec-504">Erhalten Sie auch die klasseninitialisierung verwenden die <xref:System.Type.TypeInitializer%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="96bec-504">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="96bec-505">Wenn der angeforderte Konstruktor nicht öffentlich ist, gibt diese Methode `null`.</span><span class="sxs-lookup"><span data-stu-id="96bec-505">If the requested constructor is non-public, this method returns `null`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-506">Sie können keine Parameter auslassen, beim Nachschlagen von Konstruktoren und Methoden.</span><span class="sxs-lookup"><span data-stu-id="96bec-506">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="96bec-507">Sie können nur Parameter auslassen, beim Aufrufen.</span><span class="sxs-lookup"><span data-stu-id="96bec-507">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="96bec-508">Wenn die aktuelle <xref:System.Type> einen konstruierten generischen Typ darstellt, gibt diese Methode die <xref:System.Reflection.ConstructorInfo> mit den Typparametern, die durch die entsprechenden Typargumente ersetzt.</span><span class="sxs-lookup"><span data-stu-id="96bec-508">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="96bec-509">Wenn die aktuelle <xref:System.Type> einen Typparameter in der Definition eines generischen Typs oder generische Methode darstellt, auf diese Methode gibt immer `null`.</span><span class="sxs-lookup"><span data-stu-id="96bec-509">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method always returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-510">Im folgende Beispiel ruft den Typ der `MyClass`, ruft der <xref:System.Reflection.ConstructorInfo> Objekt aus, und zeigt die Signatur des Konstruktors.</span><span class="sxs-lookup"><span data-stu-id="96bec-510">The following example obtains the type of `MyClass`, gets the <xref:System.Reflection.ConstructorInfo> object, and displays the constructor signature.</span></span>  
  
 [!code-cpp[Type_GetConstructor#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetConstructor/CPP/type_getconstructor.cpp#1)]
 [!code-csharp[Type_GetConstructor#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetConstructor/CS/type_getconstructor.cs#1)]
 [!code-vb[Type_GetConstructor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetConstructor/VB/type_getconstructor.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96bec-511">
            <paramref name="types" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-511">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="96bec-512">-or-  One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-512">-or-  One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="96bec-513">
            <paramref name="types" /> is multidimensional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-513">
              <paramref name="types" /> is multidimensional.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetConstructors" />
      </Docs>
    </Member>
    <Member MemberName="GetConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo GetConstructor (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructor(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::ConstructorInfo ^ GetConstructor(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructor : System.Reflection.BindingFlags * System.Reflection.Binder * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.ConstructorInfo&#xA;override this.GetConstructor : System.Reflection.BindingFlags * System.Reflection.Binder * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.ConstructorInfo" Usage="type.GetConstructor (bindingAttr, binder, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="96bec-514">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-514">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="96bec-515">-or-  Zero, to return <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-515">-or-  Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="96bec-516">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-516">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="96bec-517">-or-  A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-517">-or-  A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="96bec-518">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-518">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.</span>
          </span>
          <span data-ttu-id="96bec-519">-or-  An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-519">-or-  An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</span>
          </span>
          <span data-ttu-id="96bec-520">-or-  <see cref="F:System.Type.EmptyTypes" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-520">-or-  <see cref="F:System.Type.EmptyTypes" />.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="96bec-521">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the parameter type array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-521">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the parameter type array.</span>
          </span>
          <span data-ttu-id="96bec-522">The default binder does not process this parameter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-522">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-523">Searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-523">Searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-524">A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-524">A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-525">Wenn eine genaue Übereinstimmung nicht vorhanden ist, die `binder` wird versucht, die im angegebenen Parametertypen zu konvertieren die `types` Array, um eine Übereinstimmung auszuwählen.</span><span class="sxs-lookup"><span data-stu-id="96bec-525">If an exact match does not exist, the `binder` will attempt to coerce the parameter types specified in the `types` array in order to select a match.</span></span> <span data-ttu-id="96bec-526">Wenn die `binder` kann eine Übereinstimmung, wählen Sie dann `null` zurückgegeben wird.</span><span class="sxs-lookup"><span data-stu-id="96bec-526">If the `binder` is unable to select a match, then `null` is returned.</span></span>  
  
 <span data-ttu-id="96bec-527">Die folgenden <xref:System.Reflection.BindingFlags> Filterflags können verwendet werden, um die Konstruktoren in die Suche einbezogen werden:</span><span class="sxs-lookup"><span data-stu-id="96bec-527">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which constructors to include in the search:</span></span>  
  
-   <span data-ttu-id="96bec-528">Geben Sie `BindingFlags.Instance` oder `BindingFlags.Static` um ein Ergebnis zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-528">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="96bec-529">Geben Sie `BindingFlags.Public` öffentliche Konstruktoren in die Suche eingeschlossen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="96bec-529">Specify `BindingFlags.Public` to include public constructors in the search.</span></span>  
  
-   <span data-ttu-id="96bec-530">Geben Sie `BindingFlags.NonPublic` nicht öffentlichen Konstruktoren (d.h. private, interne und geschützte Konstruktoren) in die Suche eingeschlossen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="96bec-530">Specify `BindingFlags.NonPublic` to include non-public constructors (that is, private, internal, and protected constructors) in the search.</span></span>  
  
 <span data-ttu-id="96bec-531">Weitere Informationen finden Sie unter <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="96bec-531">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="96bec-532">Rufen Sie die klasseninitialisierung (.cctor) mithilfe der Überladung dieser Methode müssen Sie angeben <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="96bec-532">To get the class initializer (.cctor) using this method overload, you must specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="96bec-533">Erhalten Sie auch die klasseninitialisierung verwenden die <xref:System.Type.TypeInitializer%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="96bec-533">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-534">Sie können keine Parameter auslassen, beim Nachschlagen von Konstruktoren und Methoden.</span><span class="sxs-lookup"><span data-stu-id="96bec-534">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="96bec-535">Sie können nur Parameter auslassen, beim Aufrufen.</span><span class="sxs-lookup"><span data-stu-id="96bec-535">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="96bec-536">Wenn die aktuelle <xref:System.Type> einen konstruierten generischen Typ darstellt, gibt diese Methode die <xref:System.Reflection.ConstructorInfo> mit den Typparametern, die durch die entsprechenden Typargumente ersetzt.</span><span class="sxs-lookup"><span data-stu-id="96bec-536">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="96bec-537">Wenn die aktuelle <xref:System.Type> einen Typparameter in der Definition eines generischen Typs oder generische Methode darstellt, auf diese Methode gibt immer `null`.</span><span class="sxs-lookup"><span data-stu-id="96bec-537">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method always returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-538">Das folgende Programm ruft den Typ der `MyClass1` -Klasse ruft die <xref:System.Reflection.ConstructorInfo> Objekt den angegebenen Bindungsflags und zeigt die Signatur des Konstruktors.</span><span class="sxs-lookup"><span data-stu-id="96bec-538">The following program obtains the type of `MyClass1` class, gets the <xref:System.Reflection.ConstructorInfo> object matching the specified binding flags, and displays the signature of the constructor.</span></span>  
  
 [!code-cpp[Type_GetConstructor2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetConstructor2/CPP/type_getconstructor2.cpp#1)]
 [!code-csharp[Type_GetConstructor2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetConstructor2/CS/type_getconstructor2.cs#1)]
 [!code-vb[Type_GetConstructor2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetConstructor2/VB/type_getconstructor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96bec-539">
            <paramref name="types" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-539">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="96bec-540">-or-  One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-540">-or-  One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="96bec-541">
            <paramref name="types" /> is multidimensional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-541">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="96bec-542">-or-  <paramref name="modifiers" /> is multidimensional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-542">-or-  <paramref name="modifiers" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="96bec-543">-or-  <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-543">-or-  <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetConstructors" />
      </Docs>
    </Member>
    <Member MemberName="GetConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo GetConstructor (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructor(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::ConstructorInfo ^ GetConstructor(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructor : System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.ConstructorInfo&#xA;override this.GetConstructor : System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.ConstructorInfo" Usage="type.GetConstructor (bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="96bec-544">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-544">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="96bec-545">-or-  Zero, to return <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-545">-or-  Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="96bec-546">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-546">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="96bec-547">-or-  A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-547">-or-  A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="callConvention">
          <span data-ttu-id="96bec-548">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and the stack is cleaned up.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-548">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and the stack is cleaned up.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="96bec-549">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-549">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.</span>
          </span>
          <span data-ttu-id="96bec-550">-or-  An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-550">-or-  An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="96bec-551">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-551">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="96bec-552">The default binder does not process this parameter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-552">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-553">Searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-553">Searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-554">An object representing the constructor that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-554">An object representing the constructor that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-555">Obwohl nicht der Standardbinder verarbeitet <xref:System.Reflection.ParameterModifier> (die `modifiers` Parameter), können Sie die abstrakte <xref:System.Reflection.Binder?displayProperty=nameWithType> Klasse, um einen benutzerdefinierten Binder zu schreiben, der verarbeitet `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="96bec-555">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="96bec-556">`ParameterModifier` wird nur verwendet werden, wenn der Aufruf über COM-Interop und behandelt nur die Parameter, die als Verweis übergeben werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-556">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="96bec-557">Wenn eine genaue Übereinstimmung nicht vorhanden ist, die `binder` wird versucht, die im angegebenen Parametertypen zu konvertieren die `types` Array, um eine Übereinstimmung auszuwählen.</span><span class="sxs-lookup"><span data-stu-id="96bec-557">If an exact match does not exist, the `binder` will attempt to coerce the parameter types specified in the `types` array in order to select a match.</span></span> <span data-ttu-id="96bec-558">Wenn die `binder` kann eine Übereinstimmung, wählen Sie dann `null` zurückgegeben wird.</span><span class="sxs-lookup"><span data-stu-id="96bec-558">If the `binder` is unable to select a match, then `null` is returned.</span></span>  
  
 <span data-ttu-id="96bec-559">Die folgenden <xref:System.Reflection.BindingFlags> Filterflags können verwendet werden, um die Konstruktoren in die Suche einbezogen werden:</span><span class="sxs-lookup"><span data-stu-id="96bec-559">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which constructors to include in the search:</span></span>  
  
-   <span data-ttu-id="96bec-560">Geben Sie `BindingFlags.Instance` oder `BindingFlags.Static` um ein Ergebnis zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-560">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="96bec-561">Geben Sie `BindingFlags.Public` öffentliche Konstruktoren in die Suche eingeschlossen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="96bec-561">Specify `BindingFlags.Public` to include public constructors in the search.</span></span>  
  
-   <span data-ttu-id="96bec-562">Geben Sie `BindingFlags.NonPublic` nicht öffentlichen Konstruktoren (d.h. private, interne und geschützte Konstruktoren) in die Suche eingeschlossen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="96bec-562">Specify `BindingFlags.NonPublic` to include non-public constructors (that is, private, internal, and protected constructors) in the search.</span></span>  
  
 <span data-ttu-id="96bec-563">Weitere Informationen finden Sie unter <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="96bec-563">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="96bec-564">Rufen Sie die klasseninitialisierung (.cctor), die mit dieser Methode müssen Sie angeben <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="96bec-564">To get the class initializer (.cctor) using this method, you must specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="96bec-565">Erhalten Sie auch die klasseninitialisierung verwenden die <xref:System.Type.TypeInitializer%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="96bec-565">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="96bec-566">Die folgende Tabelle zeigt, welche Member einer Basisklasse von zurückgegeben werden die `Get` Methoden ein, wenn für einen Typ reflektieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-566">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="96bec-567">Memberart</span><span class="sxs-lookup"><span data-stu-id="96bec-567">Member Type</span></span>|<span data-ttu-id="96bec-568">Statisch</span><span class="sxs-lookup"><span data-stu-id="96bec-568">Static</span></span>|<span data-ttu-id="96bec-569">Nicht statische</span><span class="sxs-lookup"><span data-stu-id="96bec-569">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="96bec-570">Konstruktor</span><span class="sxs-lookup"><span data-stu-id="96bec-570">Constructor</span></span>|<span data-ttu-id="96bec-571">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-571">No</span></span>|<span data-ttu-id="96bec-572">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-572">No</span></span>|  
|<span data-ttu-id="96bec-573">Feld</span><span class="sxs-lookup"><span data-stu-id="96bec-573">Field</span></span>|<span data-ttu-id="96bec-574">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-574">No</span></span>|<span data-ttu-id="96bec-575">Ja.</span><span class="sxs-lookup"><span data-stu-id="96bec-575">Yes.</span></span> <span data-ttu-id="96bec-576">Ein Feld ist immer nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-576">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="96bec-577">event</span><span class="sxs-lookup"><span data-stu-id="96bec-577">Event</span></span>|<span data-ttu-id="96bec-578">Nicht zutreffend</span><span class="sxs-lookup"><span data-stu-id="96bec-578">Not applicable</span></span>|<span data-ttu-id="96bec-579">Die allgemeinen Typsystem ist, dass die Vererbung ist identisch mit der Methoden, die die Eigenschaft zu implementieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-579">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="96bec-580">Reflektion behandelt Eigenschaften als nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-580">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-581">Siehe Hinweis 2 weiter unten.</span><span class="sxs-lookup"><span data-stu-id="96bec-581">See note 2 below.</span></span>|  
|<span data-ttu-id="96bec-582">Methode</span><span class="sxs-lookup"><span data-stu-id="96bec-582">Method</span></span>|<span data-ttu-id="96bec-583">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-583">No</span></span>|<span data-ttu-id="96bec-584">Ja.</span><span class="sxs-lookup"><span data-stu-id="96bec-584">Yes.</span></span> <span data-ttu-id="96bec-585">Eine Methode (virtuelle und nicht virtuelle) möglich Ausblenden nach Namen oder nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-585">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="96bec-586">Geschachtelter Typ</span><span class="sxs-lookup"><span data-stu-id="96bec-586">Nested Type</span></span>|<span data-ttu-id="96bec-587">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-587">No</span></span>|<span data-ttu-id="96bec-588">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-588">No</span></span>|  
|<span data-ttu-id="96bec-589">Eigenschaft</span><span class="sxs-lookup"><span data-stu-id="96bec-589">Property</span></span>|<span data-ttu-id="96bec-590">Nicht zutreffend</span><span class="sxs-lookup"><span data-stu-id="96bec-590">Not applicable</span></span>|<span data-ttu-id="96bec-591">Die allgemeinen Typsystem ist, dass die Vererbung ist identisch mit der Methoden, die die Eigenschaft zu implementieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-591">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="96bec-592">Reflektion behandelt Eigenschaften als nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-592">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-593">Siehe Hinweis 2 weiter unten.</span><span class="sxs-lookup"><span data-stu-id="96bec-593">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="96bec-594">Nach Name und Signatur ausblenden berücksichtigt, dass alle Teile der Signatur, die benutzerdefinierten Modifizierer, einschließlich Typen, Parametertypen, Sentinels enthält und nicht verwaltete Aufrufkonventionen zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-594">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="96bec-595">Dies ist ein binärer Vergleich.</span><span class="sxs-lookup"><span data-stu-id="96bec-595">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="96bec-596">Für die Reflektion sind die Eigenschaften und Ereignisse nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-596">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-597">Wenn Sie eine Eigenschaft mit dem ein Get und Set-Accessor in der Basisklasse haben, aber die abgeleitete Klasse nur einen Get-Accessor hat, die Eigenschaft der abgeleiteten Klasse blendet die Basisklasseneigenschaft aus, und nicht werden auf den Setter in der Basisklasse zugreifen.</span><span class="sxs-lookup"><span data-stu-id="96bec-597">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="96bec-598">Benutzerdefinierte Attribute sind nicht Teil des allgemeinen Typsystems.</span><span class="sxs-lookup"><span data-stu-id="96bec-598">Custom attributes are not part of the common type system.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-599">Sie können keine Parameter auslassen, beim Nachschlagen von Konstruktoren und Methoden.</span><span class="sxs-lookup"><span data-stu-id="96bec-599">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="96bec-600">Sie können nur Parameter auslassen, beim Aufrufen.</span><span class="sxs-lookup"><span data-stu-id="96bec-600">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="96bec-601">Wenn die aktuelle <xref:System.Type> einen konstruierten generischen Typ darstellt, gibt diese Methode die <xref:System.Reflection.ConstructorInfo> mit den Typparametern, die durch die entsprechenden Typargumente ersetzt.</span><span class="sxs-lookup"><span data-stu-id="96bec-601">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="96bec-602">Wenn die aktuelle <xref:System.Type> einen Typparameter in der Definition eines generischen Typs oder generische Methode darstellt, auf diese Methode gibt immer `null`.</span><span class="sxs-lookup"><span data-stu-id="96bec-602">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method always returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-603">Im folgende Beispiel ruft den Typ der `MyClass1`, ruft der <xref:System.Reflection.ConstructorInfo> -Objekt, das den angegebenen Bindungsflags entspricht, und zeigt die Signatur des Konstruktors.</span><span class="sxs-lookup"><span data-stu-id="96bec-603">The following example obtains the type of `MyClass1`, gets the <xref:System.Reflection.ConstructorInfo> object that matches the specified binding flags, and displays the constructor signature.</span></span>  
  
 [!code-cpp[Type_GetConstructor3#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetConstructor3/CPP/type_getconstructor3.cpp#1)]
 [!code-csharp[Type_GetConstructor3#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetConstructor3/CS/type_getconstructor3.cs#1)]
 [!code-vb[Type_GetConstructor3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetConstructor3/VB/type_getconstructor3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96bec-604">
            <paramref name="types" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-604">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="96bec-605">-or-  One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-605">-or-  One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="96bec-606">
            <paramref name="types" /> is multidimensional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-606">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="96bec-607">-or-  <paramref name="modifiers" /> is multidimensional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-607">-or-  <paramref name="modifiers" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="96bec-608">-or-  <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-608">-or-  <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.CallingConventions" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetConstructors" />
      </Docs>
    </Member>
    <Member MemberName="GetConstructorImpl">
      <MemberSignature Language="C#" Value="protected abstract System.Reflection.ConstructorInfo GetConstructorImpl (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructorImpl(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Reflection::ConstructorInfo ^ GetConstructorImpl(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructorImpl : System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.ConstructorInfo" Usage="type.GetConstructorImpl (bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="96bec-609">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-609">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="96bec-610">-or-  Zero, to return <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-610">-or-  Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="96bec-611">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-611">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="96bec-612">-or-  A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-612">-or-  A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="callConvention">
          <span data-ttu-id="96bec-613">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and the stack is cleaned up.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-613">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and the stack is cleaned up.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="96bec-614">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-614">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.</span>
          </span>
          <span data-ttu-id="96bec-615">-or-  An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-615">-or-  An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="96bec-616">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-616">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="96bec-617">The default binder does not process this parameter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-617">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-618">When overridden in a derived class, searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-618">When overridden in a derived class, searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-619">A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-619">A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-620">Obwohl nicht der Standardbinder verarbeitet <xref:System.Reflection.ParameterModifier> (die `modifiers` Parameter), können Sie die abstrakte <xref:System.Reflection.Binder?displayProperty=nameWithType> Klasse, um einen benutzerdefinierten Binder zu schreiben, der verarbeitet `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="96bec-620">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="96bec-621">`ParameterModifier` wird nur verwendet werden, wenn der Aufruf über COM-Interop und behandelt nur die Parameter, die als Verweis übergeben werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-621">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="96bec-622">Wenn eine genaue Übereinstimmung nicht vorhanden ist, die `binder` wird versucht, die im angegebenen Parametertypen zu konvertieren die `types` Array, um eine Übereinstimmung auszuwählen.</span><span class="sxs-lookup"><span data-stu-id="96bec-622">If an exact match does not exist, the `binder` will attempt to coerce the parameter types specified in the `types` array in order to select a match.</span></span> <span data-ttu-id="96bec-623">Wenn die `binder` kann eine Übereinstimmung, wählen Sie dann `null` zurückgegeben wird.</span><span class="sxs-lookup"><span data-stu-id="96bec-623">If the `binder` is unable to select a match, then `null` is returned.</span></span>  
  
 <span data-ttu-id="96bec-624">Die folgenden <xref:System.Reflection.BindingFlags> Filterflags können verwendet werden, um die Konstruktoren in die Suche einbezogen werden:</span><span class="sxs-lookup"><span data-stu-id="96bec-624">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which constructors to include in the search:</span></span>  
  
-   <span data-ttu-id="96bec-625">Geben Sie `BindingFlags.Instance` oder `BindingFlags.Static` um ein Ergebnis zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-625">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="96bec-626">Geben Sie `BindingFlags.Public` öffentliche Konstruktoren in die Suche eingeschlossen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="96bec-626">Specify `BindingFlags.Public` to include public constructors in the search.</span></span>  
  
-   <span data-ttu-id="96bec-627">Geben Sie `BindingFlags.NonPublic` nicht öffentlichen Konstruktoren (d.h. private, interne und geschützte Konstruktoren) in die Suche eingeschlossen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="96bec-627">Specify `BindingFlags.NonPublic` to include non-public constructors (that is, private, internal, and protected constructors) in the search.</span></span>  
  
 <span data-ttu-id="96bec-628">Weitere Informationen finden Sie unter <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="96bec-628">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="96bec-629">Diese Methode implementiert <xref:System.Type.GetConstructor%2A>.</span><span class="sxs-lookup"><span data-stu-id="96bec-629">This method implements <xref:System.Type.GetConstructor%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96bec-630">
            <paramref name="types" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-630">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="96bec-631">-or-  One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-631">-or-  One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="96bec-632">
            <paramref name="types" /> is multidimensional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-632">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="96bec-633">-or-  <paramref name="modifiers" /> is multidimensional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-633">-or-  <paramref name="modifiers" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="96bec-634">-or-  <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-634">-or-  <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="96bec-635">The current type is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> or <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-635">The current type is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> or <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.CallingConventions" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetConstructors" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetConstructors">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-636">Gets the constructors of the current <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-636">Gets the constructors of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetConstructors">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo[] GetConstructors ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo[] GetConstructors() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructors" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConstructors () As ConstructorInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::ConstructorInfo ^&gt; ^ GetConstructors();" />
      <MemberSignature Language="F#" Value="abstract member GetConstructors : unit -&gt; System.Reflection.ConstructorInfo[]&#xA;override this.GetConstructors : unit -&gt; System.Reflection.ConstructorInfo[]" Usage="type.GetConstructors " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetConstructors</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="96bec-637">Returns all the public constructors defined for the current <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-637">Returns all the public constructors defined for the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-638">An array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing all the public instance constructors defined for the current <see cref="T:System.Type" />, but not including the type initializer (static constructor).</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-638">An array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing all the public instance constructors defined for the current <see cref="T:System.Type" />, but not including the type initializer (static constructor).</span>
          </span>
          <span data-ttu-id="96bec-639">If no public instance constructors are defined for the current <see cref="T:System.Type" />, or if the current <see cref="T:System.Type" /> represents a type parameter in the definition of a generic type or generic method, an empty array of type <see cref="T:System.Reflection.ConstructorInfo" /> is returned.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-639">If no public instance constructors are defined for the current <see cref="T:System.Type" />, or if the current <see cref="T:System.Type" /> represents a type parameter in the definition of a generic type or generic method, an empty array of type <see cref="T:System.Reflection.ConstructorInfo" /> is returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-640">Die <xref:System.Type.GetConstructors%2A> Methode Konstruktoren nicht in einer bestimmten Reihenfolge, z. B. die Reihenfolge der Deklaration zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-640">The <xref:System.Type.GetConstructors%2A> method does not return constructors in a particular order, such as declaration order.</span></span> <span data-ttu-id="96bec-641">Ihr Code muss nicht abhängig von der Reihenfolge, in der Konstruktoren zurückgegeben werden, da, die variieren kann.</span><span class="sxs-lookup"><span data-stu-id="96bec-641">Your code must not depend on the order in which constructors are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="96bec-642">Die folgende Tabelle zeigt, welche Member einer Basisklasse von zurückgegeben werden die `Get` Methoden ein, wenn für einen Typ reflektieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-642">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="96bec-643">Memberart</span><span class="sxs-lookup"><span data-stu-id="96bec-643">Member Type</span></span>|<span data-ttu-id="96bec-644">Statisch</span><span class="sxs-lookup"><span data-stu-id="96bec-644">Static</span></span>|<span data-ttu-id="96bec-645">Nicht statische</span><span class="sxs-lookup"><span data-stu-id="96bec-645">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="96bec-646">Konstruktor</span><span class="sxs-lookup"><span data-stu-id="96bec-646">Constructor</span></span>|<span data-ttu-id="96bec-647">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-647">No</span></span>|<span data-ttu-id="96bec-648">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-648">No</span></span>|  
|<span data-ttu-id="96bec-649">Feld</span><span class="sxs-lookup"><span data-stu-id="96bec-649">Field</span></span>|<span data-ttu-id="96bec-650">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-650">No</span></span>|<span data-ttu-id="96bec-651">Ja.</span><span class="sxs-lookup"><span data-stu-id="96bec-651">Yes.</span></span> <span data-ttu-id="96bec-652">Ein Feld ist immer nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-652">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="96bec-653">event</span><span class="sxs-lookup"><span data-stu-id="96bec-653">Event</span></span>|<span data-ttu-id="96bec-654">Nicht zutreffend</span><span class="sxs-lookup"><span data-stu-id="96bec-654">Not applicable</span></span>|<span data-ttu-id="96bec-655">Die allgemeinen Typsystem ist, dass die Vererbung ist identisch mit der Methoden, die die Eigenschaft zu implementieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-655">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="96bec-656">Reflektion behandelt Eigenschaften als nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-656">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-657">Siehe Hinweis 2 weiter unten.</span><span class="sxs-lookup"><span data-stu-id="96bec-657">See note 2 below.</span></span>|  
|<span data-ttu-id="96bec-658">Methode</span><span class="sxs-lookup"><span data-stu-id="96bec-658">Method</span></span>|<span data-ttu-id="96bec-659">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-659">No</span></span>|<span data-ttu-id="96bec-660">Ja.</span><span class="sxs-lookup"><span data-stu-id="96bec-660">Yes.</span></span> <span data-ttu-id="96bec-661">Eine Methode (virtuelle und nicht virtuelle) möglich Ausblenden nach Namen oder nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-661">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="96bec-662">Geschachtelter Typ</span><span class="sxs-lookup"><span data-stu-id="96bec-662">Nested Type</span></span>|<span data-ttu-id="96bec-663">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-663">No</span></span>|<span data-ttu-id="96bec-664">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-664">No</span></span>|  
|<span data-ttu-id="96bec-665">Eigenschaft</span><span class="sxs-lookup"><span data-stu-id="96bec-665">Property</span></span>|<span data-ttu-id="96bec-666">Nicht zutreffend</span><span class="sxs-lookup"><span data-stu-id="96bec-666">Not applicable</span></span>|<span data-ttu-id="96bec-667">Die allgemeinen Typsystem ist, dass die Vererbung ist identisch mit der Methoden, die die Eigenschaft zu implementieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-667">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="96bec-668">Reflektion behandelt Eigenschaften als nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-668">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-669">Siehe Hinweis 2 weiter unten.</span><span class="sxs-lookup"><span data-stu-id="96bec-669">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="96bec-670">Nach Name und Signatur ausblenden berücksichtigt, dass alle Teile der Signatur, die benutzerdefinierten Modifizierer, einschließlich Typen, Parametertypen, Sentinels enthält und nicht verwaltete Aufrufkonventionen zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-670">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="96bec-671">Dies ist ein binärer Vergleich.</span><span class="sxs-lookup"><span data-stu-id="96bec-671">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="96bec-672">Für die Reflektion sind die Eigenschaften und Ereignisse nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-672">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-673">Wenn Sie eine Eigenschaft mit dem ein Get und Set-Accessor in der Basisklasse haben, aber die abgeleitete Klasse nur einen Get-Accessor hat, die Eigenschaft der abgeleiteten Klasse blendet die Basisklasseneigenschaft aus, und nicht werden auf den Setter in der Basisklasse zugreifen.</span><span class="sxs-lookup"><span data-stu-id="96bec-673">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="96bec-674">Benutzerdefinierte Attribute sind nicht Teil des allgemeinen Typsystems.</span><span class="sxs-lookup"><span data-stu-id="96bec-674">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="96bec-675">Diese methodenüberladung Ruft die <xref:System.Type.GetConstructors%28System.Reflection.BindingFlags%29> methodenüberladung mit <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="96bec-675">This method overload calls the <xref:System.Type.GetConstructors%28System.Reflection.BindingFlags%29> method overload, with <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="96bec-676">Die Klasseninitialisierer (.cctor) nicht gefunden.</span><span class="sxs-lookup"><span data-stu-id="96bec-676">It will not find class initializers (.cctor).</span></span> <span data-ttu-id="96bec-677">Um Klasseninitialisierer zu ermitteln, verwenden Sie eine Überladung mit <xref:System.Reflection.BindingFlags>, und geben Sie <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="96bec-677">To find class initializers, use an overload that takes <xref:System.Reflection.BindingFlags>, and specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="96bec-678">Erhalten Sie auch die klasseninitialisierung verwenden die <xref:System.Type.TypeInitializer%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="96bec-678">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="96bec-679">Wenn die aktuelle <xref:System.Type> einen konstruierten generischen Typ darstellt, gibt diese Methode die <xref:System.Reflection.ConstructorInfo> Objekte mit den Typparametern, die durch die entsprechenden Typargumente ersetzt.</span><span class="sxs-lookup"><span data-stu-id="96bec-679">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="96bec-680">Z. B. Wenn Klasse `C<T>` verfügt über einen Konstruktor `C(T t1)` (`Sub New(ByVal t1 As T)` in Visual Basic), wird beim Aufruf <xref:System.Type.GetConstructors%2A> auf `C<int>` gibt eine <xref:System.Reflection.ConstructorInfo> darstellender `C(int t1)` in c# (`Sub New(ByVal t1 As Integer)` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="96bec-680">For example, if class `C<T>` has a constructor `C(T t1)` (`Sub New(ByVal t1 As T)` in Visual Basic), calling <xref:System.Type.GetConstructors%2A> on `C<int>` returns a <xref:System.Reflection.ConstructorInfo> that represents `C(int t1)` in C# (`Sub New(ByVal t1 As Integer)` in Visual Basic).</span></span>  
  
 <span data-ttu-id="96bec-681">Wenn die aktuelle <xref:System.Type> stellt einen generischen Typparameter, der <xref:System.Type.GetConstructors%2A> Methode ein leeres Array zurück.</span><span class="sxs-lookup"><span data-stu-id="96bec-681">If the current <xref:System.Type> represents a generic type parameter, the <xref:System.Type.GetConstructors%2A> method returns an empty array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-682">Dieses Beispiel zeigt die Ausgabe der <xref:System.Type.GetConstructors%2A> überladen, die von einer Klasse, die über zwei Instanzkonstruktoren und einen statischen Konstruktor verfügt.</span><span class="sxs-lookup"><span data-stu-id="96bec-682">This example shows the output of the <xref:System.Type.GetConstructors%2A> overload from a class that has two instance constructors and one static constructor.</span></span>  
  
 [!code-cpp[Classic Type.GetConstructors Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CPP/source1.cpp#1)]
 [!code-csharp[Classic Type.GetConstructors Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CS/source1.cs#1)]
 [!code-vb[Classic Type.GetConstructors Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/VB/source1.vb#1)]  
  
 <span data-ttu-id="96bec-683">Die Ausgabe dieses Codes lautet:</span><span class="sxs-lookup"><span data-stu-id="96bec-683">The output of this code is:</span></span>  
  
 <span data-ttu-id="96bec-684">2</span><span class="sxs-lookup"><span data-stu-id="96bec-684">2</span></span>  
  
 <span data-ttu-id="96bec-685">False</span><span class="sxs-lookup"><span data-stu-id="96bec-685">False</span></span>  
  
 <span data-ttu-id="96bec-686">False</span><span class="sxs-lookup"><span data-stu-id="96bec-686">False</span></span>  
  
 <span data-ttu-id="96bec-687">Da die <xref:System.Type.GetConstructors> Überladung verwendet nur <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> und <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>, der statische Konstruktor ist weder gezählt, indem die `for` Ausdruck noch ausgewertet, indem `IsStatic`.</span><span class="sxs-lookup"><span data-stu-id="96bec-687">Because the <xref:System.Type.GetConstructors> overload uses only <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> and <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>, the static constructor is neither counted by the `for` expression nor evaluated by `IsStatic`.</span></span>  
  
 <span data-ttu-id="96bec-688">Um statische Konstruktoren zu suchen, verwenden die <xref:System.Type.GetConstructors%28System.Reflection.BindingFlags%29> überladen, und übergeben Sie die Kombination (logische `OR`) der <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>, wie im folgenden Codebeispiel gezeigt:</span><span class="sxs-lookup"><span data-stu-id="96bec-688">To find static constructors, use the <xref:System.Type.GetConstructors%28System.Reflection.BindingFlags%29> overload, and pass the combination (logical `OR`) of <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>, as shown in the following code example:</span></span>  
  
 [!code-cpp[Classic Type.GetConstructors Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic Type.GetConstructors Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CS/source2.cs#2)]
 [!code-vb[Classic Type.GetConstructors Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/VB/source2.vb#2)]  
  
 <span data-ttu-id="96bec-689">Jetzt ist die Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="96bec-689">Now the output is:</span></span>  
  
 <span data-ttu-id="96bec-690">3</span><span class="sxs-lookup"><span data-stu-id="96bec-690">3</span></span>  
  
 <span data-ttu-id="96bec-691">False</span><span class="sxs-lookup"><span data-stu-id="96bec-691">False</span></span>  
  
 <span data-ttu-id="96bec-692">True</span><span class="sxs-lookup"><span data-stu-id="96bec-692">True</span></span>  
  
 <span data-ttu-id="96bec-693">False</span><span class="sxs-lookup"><span data-stu-id="96bec-693">False</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <Member MemberName="GetConstructors">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.ConstructorInfo[] GetConstructors (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo[] GetConstructors(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructors(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetConstructors (bindingAttr As BindingFlags) As ConstructorInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::ConstructorInfo ^&gt; ^ GetConstructors(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructors : System.Reflection.BindingFlags -&gt; System.Reflection.ConstructorInfo[]" Usage="type.GetConstructors bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetConstructors(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="96bec-694">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-694">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="96bec-695">-or-  Zero, to return <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-695">-or-  Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-696">When overridden in a derived class, searches for the constructors defined for the current <see cref="T:System.Type" />, using the specified <see langword="BindingFlags" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-696">When overridden in a derived class, searches for the constructors defined for the current <see cref="T:System.Type" />, using the specified <see langword="BindingFlags" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-697">An array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing all constructors defined for the current <see cref="T:System.Type" /> that match the specified binding constraints, including the type initializer if it is defined.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-697">An array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing all constructors defined for the current <see cref="T:System.Type" /> that match the specified binding constraints, including the type initializer if it is defined.</span>
          </span>
          <span data-ttu-id="96bec-698">Returns an empty array of type <see cref="T:System.Reflection.ConstructorInfo" /> if no constructors are defined for the current <see cref="T:System.Type" />, if none of the defined constructors match the binding constraints, or if the current <see cref="T:System.Type" /> represents a type parameter in the definition of a generic type or generic method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-698">Returns an empty array of type <see cref="T:System.Reflection.ConstructorInfo" /> if no constructors are defined for the current <see cref="T:System.Type" />, if none of the defined constructors match the binding constraints, or if the current <see cref="T:System.Type" /> represents a type parameter in the definition of a generic type or generic method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-699">Die <xref:System.Type.GetConstructors%2A> Methode Konstruktoren nicht in einer bestimmten Reihenfolge, z. B. die Reihenfolge der Deklaration zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-699">The <xref:System.Type.GetConstructors%2A> method does not return constructors in a particular order, such as declaration order.</span></span> <span data-ttu-id="96bec-700">Ihr Code muss nicht abhängig von der Reihenfolge, in der Konstruktoren zurückgegeben werden, da, die variieren kann.</span><span class="sxs-lookup"><span data-stu-id="96bec-700">Your code must not depend on the order in which constructors are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="96bec-701">`bindingAttr` kann verwendet werden, um anzugeben, ob ausschließlich öffentliche Konstruktoren oder sowohl öffentliche als auch nicht öffentliche Konstruktoren zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-701">`bindingAttr` can be used to specify whether to return only public constructors or both public and non-public constructors.</span></span>  
  
 <span data-ttu-id="96bec-702">Wenn eine genaue Übereinstimmung nicht vorhanden ist, die `binder` wird versucht, die im angegebenen Parametertypen zu konvertieren die `types` Array, um eine Übereinstimmung auszuwählen.</span><span class="sxs-lookup"><span data-stu-id="96bec-702">If an exact match does not exist, the `binder` will attempt to coerce the parameter types specified in the `types` array in order to select a match.</span></span> <span data-ttu-id="96bec-703">Wenn die `binder` kann eine Übereinstimmung, wählen Sie dann `null` zurückgegeben wird.</span><span class="sxs-lookup"><span data-stu-id="96bec-703">If the `binder` is unable to select a match, then `null` is returned.</span></span>  
  
 <span data-ttu-id="96bec-704">Die folgenden <xref:System.Reflection.BindingFlags> Filterflags können verwendet werden, um die Konstruktoren in die Suche einbezogen werden:</span><span class="sxs-lookup"><span data-stu-id="96bec-704">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which constructors to include in the search:</span></span>  
  
-   <span data-ttu-id="96bec-705">Geben Sie `BindingFlags.Instance` oder `BindingFlags.Static` um ein Ergebnis zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-705">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="96bec-706">Geben Sie `BindingFlags.Public` öffentliche Konstruktoren in die Suche eingeschlossen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="96bec-706">Specify `BindingFlags.Public` to include public constructors in the search.</span></span>  
  
-   <span data-ttu-id="96bec-707">Geben Sie `BindingFlags.NonPublic` nicht öffentlichen Konstruktoren (d.h. private, interne und geschützte Konstruktoren) in die Suche eingeschlossen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="96bec-707">Specify `BindingFlags.NonPublic` to include non-public constructors (that is, private, internal, and protected constructors) in the search.</span></span> <span data-ttu-id="96bec-708">Konstruktoren von Basisklassen werden nicht zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-708">Constructors of base classes are not returned.</span></span>  
  
 <span data-ttu-id="96bec-709">Weitere Informationen finden Sie unter <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="96bec-709">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="96bec-710">Rufen Sie die klasseninitialisierung (.cctor) mithilfe der Überladung dieser Methode müssen Sie angeben <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="96bec-710">To get the class initializer (.cctor) using this method overload, you must specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="96bec-711">Erhalten Sie auch die klasseninitialisierung verwenden die <xref:System.Type.TypeInitializer%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="96bec-711">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="96bec-712">Wenn die aktuelle <xref:System.Type> einen konstruierten generischen Typ darstellt, gibt diese Methode die <xref:System.Reflection.ConstructorInfo> Objekte mit den Typparametern, die durch die entsprechenden Typargumente ersetzt.</span><span class="sxs-lookup"><span data-stu-id="96bec-712">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="96bec-713">Z. B. Wenn Klasse `C<T>` verfügt über einen Konstruktor `C(T t1)` (`Sub New(ByVal t1 As T)` in Visual Basic), wird beim Aufruf <xref:System.Type.GetConstructors%2A> auf `C<int>` gibt eine <xref:System.Reflection.ConstructorInfo> darstellender `C(int t1)` in c# (`Sub New(ByVal t1 As Integer)` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="96bec-713">For example, if class `C<T>` has a constructor `C(T t1)` (`Sub New(ByVal t1 As T)` in Visual Basic), calling <xref:System.Type.GetConstructors%2A> on `C<int>` returns a <xref:System.Reflection.ConstructorInfo> that represents `C(int t1)` in C# (`Sub New(ByVal t1 As Integer)` in Visual Basic).</span></span>  
  
 <span data-ttu-id="96bec-714">Wenn die aktuelle <xref:System.Type> stellt einen generischen Typparameter, der <xref:System.Type.GetConstructors%2A> Methode ein leeres Array zurück.</span><span class="sxs-lookup"><span data-stu-id="96bec-714">If the current <xref:System.Type> represents a generic type parameter, the <xref:System.Type.GetConstructors%2A> method returns an empty array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-715">Dieses Beispiel zeigt die Ausgabe der <xref:System.Type.GetConstructors> überladen, die von einer Klasse, die über zwei Instanzkonstruktoren und einen statischen Konstruktor verfügt.</span><span class="sxs-lookup"><span data-stu-id="96bec-715">This example shows the output of the <xref:System.Type.GetConstructors> overload from a class that has two instance constructors and one static constructor.</span></span>  
  
 [!code-cpp[Classic Type.GetConstructors Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CPP/source1.cpp#1)]
 [!code-csharp[Classic Type.GetConstructors Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CS/source1.cs#1)]
 [!code-vb[Classic Type.GetConstructors Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/VB/source1.vb#1)]  
  
 <span data-ttu-id="96bec-716">Die Ausgabe dieses Codes lautet:</span><span class="sxs-lookup"><span data-stu-id="96bec-716">The output of this code is:</span></span>  
  
 <span data-ttu-id="96bec-717">2</span><span class="sxs-lookup"><span data-stu-id="96bec-717">2</span></span>  
  
 <span data-ttu-id="96bec-718">False</span><span class="sxs-lookup"><span data-stu-id="96bec-718">False</span></span>  
  
 <span data-ttu-id="96bec-719">False</span><span class="sxs-lookup"><span data-stu-id="96bec-719">False</span></span>  
  
 <span data-ttu-id="96bec-720">Da die <xref:System.Type.GetConstructors%2A> Überladung verwendet nur <xref:System.Reflection.BindingFlags.Public> und <xref:System.Reflection.BindingFlags.Instance>, der statische Konstruktor ist weder gezählt, indem die `for` Ausdruck noch ausgewertet, indem `IsStatic`.</span><span class="sxs-lookup"><span data-stu-id="96bec-720">Because the <xref:System.Type.GetConstructors%2A> overload uses only <xref:System.Reflection.BindingFlags.Public> and <xref:System.Reflection.BindingFlags.Instance>, the static constructor is neither counted by the `for` expression nor evaluated by `IsStatic`.</span></span>  
  
 <span data-ttu-id="96bec-721">Um statische Konstruktoren zu suchen, verwenden die <xref:System.Type.GetConstructors%2A> überladen, und übergeben sie die Kombination (logisches OR) von <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>, wie im folgenden Codebeispiel gezeigt:</span><span class="sxs-lookup"><span data-stu-id="96bec-721">To find static constructors, use the <xref:System.Type.GetConstructors%2A> overload, and pass it the combination (logical OR) of <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>, as shown in the following code example:</span></span>  
  
 [!code-cpp[Classic Type.GetConstructors Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic Type.GetConstructors Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CS/source2.cs#2)]
 [!code-vb[Classic Type.GetConstructors Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/VB/source2.vb#2)]  
  
 <span data-ttu-id="96bec-722">Jetzt ist die Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="96bec-722">Now the output is:</span></span>  
  
 <span data-ttu-id="96bec-723">3</span><span class="sxs-lookup"><span data-stu-id="96bec-723">3</span></span>  
  
 <span data-ttu-id="96bec-724">False</span><span class="sxs-lookup"><span data-stu-id="96bec-724">False</span></span>  
  
 <span data-ttu-id="96bec-725">True</span><span class="sxs-lookup"><span data-stu-id="96bec-725">True</span></span>  
  
 <span data-ttu-id="96bec-726">False</span><span class="sxs-lookup"><span data-stu-id="96bec-726">False</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <Member MemberName="GetDefaultMembers">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MemberInfo[] GetDefaultMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetDefaultMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetDefaultMembers" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDefaultMembers () As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetDefaultMembers();" />
      <MemberSignature Language="F#" Value="abstract member GetDefaultMembers : unit -&gt; System.Reflection.MemberInfo[]&#xA;override this.GetDefaultMembers : unit -&gt; System.Reflection.MemberInfo[]" Usage="type.GetDefaultMembers " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetDefaultMembers</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="96bec-727">Searches for the members defined for the current <see cref="T:System.Type" /> whose <see cref="T:System.Reflection.DefaultMemberAttribute" /> is set.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-727">Searches for the members defined for the current <see cref="T:System.Type" /> whose <see cref="T:System.Reflection.DefaultMemberAttribute" /> is set.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-728">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all default members of the current <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-728">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all default members of the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="96bec-729">-or-  An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have default members.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-729">-or-  An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have default members.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-730">Die <xref:System.Type.GetDefaultMembers%2A> Methode nicht zurückgegeben Member in einer bestimmten Reihenfolge, z. B. alphabetische oder Reihenfolge der Deklaration.</span><span class="sxs-lookup"><span data-stu-id="96bec-730">The <xref:System.Type.GetDefaultMembers%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="96bec-731">Ihr Code muss nicht abhängig von der Reihenfolge, in der Elemente zurückgegeben werden, da, die variieren kann.</span><span class="sxs-lookup"><span data-stu-id="96bec-731">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="96bec-732">Diese Methode kann von einer abgeleiteten Klasse überschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-732">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="96bec-733">Mitglieder enthalten Eigenschaften, Methoden, Felder, Ereignisse und So weiter.</span><span class="sxs-lookup"><span data-stu-id="96bec-733">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="96bec-734">Die folgende Tabelle zeigt, welche Member einer Basisklasse von zurückgegeben werden die `Get` Methoden ein, wenn für einen Typ reflektieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-734">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="96bec-735">Memberart</span><span class="sxs-lookup"><span data-stu-id="96bec-735">Member Type</span></span>|<span data-ttu-id="96bec-736">Statisch</span><span class="sxs-lookup"><span data-stu-id="96bec-736">Static</span></span>|<span data-ttu-id="96bec-737">Nicht statische</span><span class="sxs-lookup"><span data-stu-id="96bec-737">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="96bec-738">Konstruktor</span><span class="sxs-lookup"><span data-stu-id="96bec-738">Constructor</span></span>|<span data-ttu-id="96bec-739">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-739">No</span></span>|<span data-ttu-id="96bec-740">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-740">No</span></span>|  
|<span data-ttu-id="96bec-741">Feld</span><span class="sxs-lookup"><span data-stu-id="96bec-741">Field</span></span>|<span data-ttu-id="96bec-742">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-742">No</span></span>|<span data-ttu-id="96bec-743">Ja.</span><span class="sxs-lookup"><span data-stu-id="96bec-743">Yes.</span></span> <span data-ttu-id="96bec-744">Ein Feld ist immer nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-744">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="96bec-745">event</span><span class="sxs-lookup"><span data-stu-id="96bec-745">Event</span></span>|<span data-ttu-id="96bec-746">Nicht zutreffend</span><span class="sxs-lookup"><span data-stu-id="96bec-746">Not applicable</span></span>|<span data-ttu-id="96bec-747">Die allgemeinen Typsystem ist, dass die Vererbung ist identisch mit der Methoden, die die Eigenschaft zu implementieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-747">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="96bec-748">Reflektion behandelt Eigenschaften als nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-748">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-749">Siehe Hinweis 2 weiter unten.</span><span class="sxs-lookup"><span data-stu-id="96bec-749">See note 2 below.</span></span>|  
|<span data-ttu-id="96bec-750">Methode</span><span class="sxs-lookup"><span data-stu-id="96bec-750">Method</span></span>|<span data-ttu-id="96bec-751">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-751">No</span></span>|<span data-ttu-id="96bec-752">Ja.</span><span class="sxs-lookup"><span data-stu-id="96bec-752">Yes.</span></span> <span data-ttu-id="96bec-753">Eine Methode (virtuelle und nicht virtuelle) möglich Ausblenden nach Namen oder nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-753">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="96bec-754">Geschachtelter Typ</span><span class="sxs-lookup"><span data-stu-id="96bec-754">Nested Type</span></span>|<span data-ttu-id="96bec-755">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-755">No</span></span>|<span data-ttu-id="96bec-756">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-756">No</span></span>|  
|<span data-ttu-id="96bec-757">Eigenschaft</span><span class="sxs-lookup"><span data-stu-id="96bec-757">Property</span></span>|<span data-ttu-id="96bec-758">Nicht zutreffend</span><span class="sxs-lookup"><span data-stu-id="96bec-758">Not applicable</span></span>|<span data-ttu-id="96bec-759">Die allgemeinen Typsystem ist, dass die Vererbung ist identisch mit der Methoden, die die Eigenschaft zu implementieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-759">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="96bec-760">Reflektion behandelt Eigenschaften als nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-760">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-761">Siehe Hinweis 2 weiter unten.</span><span class="sxs-lookup"><span data-stu-id="96bec-761">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="96bec-762">Nach Name und Signatur ausblenden berücksichtigt, dass alle Teile der Signatur, die benutzerdefinierten Modifizierer, einschließlich Typen, Parametertypen, Sentinels enthält und nicht verwaltete Aufrufkonventionen zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-762">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="96bec-763">Dies ist ein binärer Vergleich.</span><span class="sxs-lookup"><span data-stu-id="96bec-763">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="96bec-764">Für die Reflektion sind die Eigenschaften und Ereignisse nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-764">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-765">Wenn Sie eine Eigenschaft mit dem ein Get und Set-Accessor in der Basisklasse haben, aber die abgeleitete Klasse nur einen Get-Accessor hat, die Eigenschaft der abgeleiteten Klasse blendet die Basisklasseneigenschaft aus, und nicht werden auf den Setter in der Basisklasse zugreifen.</span><span class="sxs-lookup"><span data-stu-id="96bec-765">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="96bec-766">Benutzerdefinierte Attribute sind nicht Teil des allgemeinen Typsystems.</span><span class="sxs-lookup"><span data-stu-id="96bec-766">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="96bec-767">Wenn die aktuelle <xref:System.Type> einen konstruierten generischen Typ darstellt, gibt diese Methode die <xref:System.Reflection.MemberInfo> Objekte mit den Typparametern, die durch die entsprechenden Typargumente ersetzt.</span><span class="sxs-lookup"><span data-stu-id="96bec-767">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="96bec-768">Z. B. Wenn Klasse `C<T>` verfügt über eine Eigenschaft `P` zurückgibt `T`, wird beim Aufruf <xref:System.Type.GetDefaultMembers%2A> auf `C<int>` gibt `int P` in c# (`Property P As Integer` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="96bec-768">For example, if class `C<T>` has a property `P` that returns `T`, calling <xref:System.Type.GetDefaultMembers%2A> on `C<int>` returns `int P` in C# (`Property P As Integer` in Visual Basic).</span></span>  
  
 <span data-ttu-id="96bec-769">Wenn die aktuelle <xref:System.Type> stellt ein Typparameter in der Definition eines generischen Typs oder generische Methode, diese Methode sucht, die Mitglieder der Class-Einschränkung oder die Mitglieder der <xref:System.Object> liegt keine klasseneinschränkung.</span><span class="sxs-lookup"><span data-stu-id="96bec-769">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-770">Im folgende Beispiel ruft die Informationen der `MyClass` und zeigt die Standardelemente.</span><span class="sxs-lookup"><span data-stu-id="96bec-770">The following example obtains the default member information of `MyClass` and displays the default members.</span></span>  
  
 [!code-cpp[Type_GetDefaultMembers#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetDefaultMembers/CPP/type_getdefaultmembers.cpp#1)]
 [!code-csharp[Type_GetDefaultMembers#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetDefaultMembers/CS/type_getdefaultmembers.cs#1)]
 [!code-vb[Type_GetDefaultMembers#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetDefaultMembers/VB/type_getdefaultmembers.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.Reflection.DefaultMemberAttribute" />
        <altmember cref="M:System.Type.GetMember(System.String)" />
        <altmember cref="M:System.Type.GetMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetElementType">
      <MemberSignature Language="C#" Value="public abstract Type GetElementType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetElementType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetElementType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetElementType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Type ^ GetElementType();" />
      <MemberSignature Language="F#" Value="abstract member GetElementType : unit -&gt; Type" Usage="type.GetElementType " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetElementType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="96bec-771">When overridden in a derived class, returns the <see cref="T:System.Type" /> of the object encompassed or referred to by the current array, pointer or reference type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-771">When overridden in a derived class, returns the <see cref="T:System.Type" /> of the object encompassed or referred to by the current array, pointer or reference type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-772">The <see cref="T:System.Type" /> of the object encompassed or referred to by the current array, pointer, or reference type, or <see langword="null" /> if the current <see cref="T:System.Type" /> is not an array or a pointer, or is not passed by reference, or represents a generic type or a type parameter in the definition of a generic type or generic method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-772">The <see cref="T:System.Type" /> of the object encompassed or referred to by the current array, pointer, or reference type, or <see langword="null" /> if the current <see cref="T:System.Type" /> is not an array or a pointer, or is not passed by reference, or represents a generic type or a type parameter in the definition of a generic type or generic method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-773">Diese Methode gibt `null` für die <xref:System.Array> Klasse.</span><span class="sxs-lookup"><span data-stu-id="96bec-773">This method returns `null` for the <xref:System.Array> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-774">Das folgende Beispiel veranschaulicht die Verwendung der `GetElementType` Methode.</span><span class="sxs-lookup"><span data-stu-id="96bec-774">The following example demonstrates using the `GetElementType` method.</span></span>  
  
 [!code-cpp[TestGetElementType#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestGetElementType/CPP/TestGetElementType.cpp#1)]
 [!code-csharp[TestGetElementType#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestGetElementType/CS/testgetelementtype.cs#1)]
 [!code-vb[TestGetElementType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestGetElementType/VB/testgetelementtype.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.HasElementType" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumName">
      <MemberSignature Language="C#" Value="public virtual string GetEnumName (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetEnumName(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEnumName(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumName (value As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetEnumName(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member GetEnumName : obj -&gt; string&#xA;override this.GetEnumName : obj -&gt; string" Usage="type.GetEnumName value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="96bec-775">The value whose name is to be retrieved.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-775">The value whose name is to be retrieved.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-776">Returns the name of the constant that has the specified value, for the current enumeration type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-776">Returns the name of the constant that has the specified value, for the current enumeration type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-777">The name of the member of the current enumeration type that has the specified value, or <see langword="null" /> if no such constant is found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-777">The name of the member of the current enumeration type that has the specified value, or <see langword="null" /> if no such constant is found.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="96bec-778">The current type is not an enumeration.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-778">The current type is not an enumeration.</span>
          </span>
          <span data-ttu-id="96bec-779">-or-  <paramref name="value" /> is neither of the current type nor does it have the same underlying type as the current type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-779">-or-  <paramref name="value" /> is neither of the current type nor does it have the same underlying type as the current type.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96bec-780">
            <paramref name="value" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-780">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumNames">
      <MemberSignature Language="C#" Value="public virtual string[] GetEnumNames ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetEnumNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEnumNames" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumNames () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::String ^&gt; ^ GetEnumNames();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumNames : unit -&gt; string[]&#xA;override this.GetEnumNames : unit -&gt; string[]" Usage="type.GetEnumNames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="96bec-781">Returns the names of the members of the current enumeration type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-781">Returns the names of the members of the current enumeration type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-782">An array that contains the names of the members of the enumeration.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-782">An array that contains the names of the members of the enumeration.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-783">Die Elemente des Arrays Rückgabewert werden nach den Binärwerten (d. h. aus den Werten ohne Vorzeichen) der Enumerationskonstanten sortiert.</span><span class="sxs-lookup"><span data-stu-id="96bec-783">The elements of the return value array are sorted by the binary values (that is, the unsigned values) of the enumerated constants.</span></span> <span data-ttu-id="96bec-784">Wenn das Array aufgezählte Konstanten mit dem gleichen Wert enthält, ist die Reihenfolge der entsprechenden Namen nicht angegeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-784">If the array contains enumerated constants with the same value, the order of their corresponding names is unspecified.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="96bec-785">The current type is not an enumeration.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-785">The current type is not an enumeration.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumUnderlyingType">
      <MemberSignature Language="C#" Value="public virtual Type GetEnumUnderlyingType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetEnumUnderlyingType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEnumUnderlyingType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumUnderlyingType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetEnumUnderlyingType();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumUnderlyingType : unit -&gt; Type&#xA;override this.GetEnumUnderlyingType : unit -&gt; Type" Usage="type.GetEnumUnderlyingType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="96bec-786">Returns the underlying type of the current enumeration type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-786">Returns the underlying type of the current enumeration type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-787">The underlying type of the current enumeration.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-787">The underlying type of the current enumeration.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-788">Standardmäßig ist der zugrunde liegende Typ einer Enumeration in c# und Visual Basic <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="96bec-788">By default, the underlying type of an enumeration in C# and Visual Basic is <xref:System.Int32>.</span></span> <span data-ttu-id="96bec-789">Andere Integer-Typen können angegeben werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-789">Other integer types can be specified.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="96bec-790">The current type is not an enumeration.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-790">The current type is not an enumeration.</span>
          </span>
          <span data-ttu-id="96bec-791">-or-  The enumeration type is not valid, because it contains more than one instance field.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-791">-or-  The enumeration type is not valid, because it contains more than one instance field.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumValues">
      <MemberSignature Language="C#" Value="public virtual Array GetEnumValues ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Array GetEnumValues() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEnumValues" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumValues () As Array" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Array ^ GetEnumValues();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumValues : unit -&gt; Array&#xA;override this.GetEnumValues : unit -&gt; Array" Usage="type.GetEnumValues " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Array</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="96bec-792">Returns an array of the values of the constants in the current enumeration type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-792">Returns an array of the values of the constants in the current enumeration type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-793">An array that contains the values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-793">An array that contains the values.</span>
          </span>
          <span data-ttu-id="96bec-794">The elements of the array are sorted by the binary values (that is, the unsigned values) of the enumeration constants.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-794">The elements of the array are sorted by the binary values (that is, the unsigned values) of the enumeration constants.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="96bec-795">The current type is not an enumeration.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-795">The current type is not an enumeration.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEvent">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-796">Gets a specific event declared or inherited by the current <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-796">Gets a specific event declared or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEvent">
      <MemberSignature Language="C#" Value="public System.Reflection.EventInfo GetEvent (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo GetEvent(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEvent (name As String) As EventInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::EventInfo ^ GetEvent(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetEvent : string -&gt; System.Reflection.EventInfo&#xA;override this.GetEvent : string -&gt; System.Reflection.EventInfo" Usage="type.GetEvent name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetEvent(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="96bec-797">The string containing the name of an event that is declared or inherited by the current <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-797">The string containing the name of an event that is declared or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-798">Returns the <see cref="T:System.Reflection.EventInfo" /> object representing the specified public event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-798">Returns the <see cref="T:System.Reflection.EventInfo" /> object representing the specified public event.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-799">The object representing the specified public event that is declared or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-799">The object representing the specified public event that is declared or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-800">Ein Ereignis ist Reflektion als öffentlich betrachtet, wenn er verfügt über mindestens eine Methode oder der Accessor, der öffentlich ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-800">An event is considered public to reflection if it has at least one method or accessor that is public.</span></span> <span data-ttu-id="96bec-801">Andernfalls wird das Ereignis als private betrachtet, und Sie müssen <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic kombinieren Sie die Werte mit `Or`) anfordern.</span><span class="sxs-lookup"><span data-stu-id="96bec-801">Otherwise the event is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="96bec-802">Die Suche nach `name` Groß-/Kleinschreibung beachtet wird.</span><span class="sxs-lookup"><span data-stu-id="96bec-802">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="96bec-803">Die Suche enthält öffentliche statisch und öffentlich Instanz Ereignisse.</span><span class="sxs-lookup"><span data-stu-id="96bec-803">The search includes public static and public instance events.</span></span>  
  
 <span data-ttu-id="96bec-804">Die folgende Tabelle zeigt, welche Member einer Basisklasse von zurückgegeben werden die `Get` Methoden ein, wenn für einen Typ reflektieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-804">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="96bec-805">Memberart</span><span class="sxs-lookup"><span data-stu-id="96bec-805">Member Type</span></span>|<span data-ttu-id="96bec-806">Statisch</span><span class="sxs-lookup"><span data-stu-id="96bec-806">Static</span></span>|<span data-ttu-id="96bec-807">Nicht statische</span><span class="sxs-lookup"><span data-stu-id="96bec-807">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="96bec-808">Konstruktor</span><span class="sxs-lookup"><span data-stu-id="96bec-808">Constructor</span></span>|<span data-ttu-id="96bec-809">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-809">No</span></span>|<span data-ttu-id="96bec-810">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-810">No</span></span>|  
|<span data-ttu-id="96bec-811">Feld</span><span class="sxs-lookup"><span data-stu-id="96bec-811">Field</span></span>|<span data-ttu-id="96bec-812">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-812">No</span></span>|<span data-ttu-id="96bec-813">Ja.</span><span class="sxs-lookup"><span data-stu-id="96bec-813">Yes.</span></span> <span data-ttu-id="96bec-814">Ein Feld ist immer nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-814">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="96bec-815">event</span><span class="sxs-lookup"><span data-stu-id="96bec-815">Event</span></span>|<span data-ttu-id="96bec-816">Nicht zutreffend</span><span class="sxs-lookup"><span data-stu-id="96bec-816">Not applicable</span></span>|<span data-ttu-id="96bec-817">Die allgemeinen Typsystem ist, dass die Vererbung ist identisch mit der Methoden, die die Eigenschaft zu implementieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-817">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="96bec-818">Reflektion behandelt Eigenschaften als nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-818">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-819">Siehe Hinweis 2 weiter unten.</span><span class="sxs-lookup"><span data-stu-id="96bec-819">See note 2 below.</span></span>|  
|<span data-ttu-id="96bec-820">Methode</span><span class="sxs-lookup"><span data-stu-id="96bec-820">Method</span></span>|<span data-ttu-id="96bec-821">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-821">No</span></span>|<span data-ttu-id="96bec-822">Ja.</span><span class="sxs-lookup"><span data-stu-id="96bec-822">Yes.</span></span> <span data-ttu-id="96bec-823">Eine Methode (virtuelle und nicht virtuelle) möglich Ausblenden nach Namen oder nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-823">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="96bec-824">Geschachtelter Typ</span><span class="sxs-lookup"><span data-stu-id="96bec-824">Nested Type</span></span>|<span data-ttu-id="96bec-825">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-825">No</span></span>|<span data-ttu-id="96bec-826">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-826">No</span></span>|  
|<span data-ttu-id="96bec-827">Eigenschaft</span><span class="sxs-lookup"><span data-stu-id="96bec-827">Property</span></span>|<span data-ttu-id="96bec-828">Nicht zutreffend</span><span class="sxs-lookup"><span data-stu-id="96bec-828">Not applicable</span></span>|<span data-ttu-id="96bec-829">Die allgemeinen Typsystem ist, dass die Vererbung ist identisch mit der Methoden, die die Eigenschaft zu implementieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-829">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="96bec-830">Reflektion behandelt Eigenschaften als nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-830">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-831">Siehe Hinweis 2 weiter unten.</span><span class="sxs-lookup"><span data-stu-id="96bec-831">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="96bec-832">Nach Name und Signatur ausblenden berücksichtigt, dass alle Teile der Signatur, die benutzerdefinierten Modifizierer, einschließlich Typen, Parametertypen, Sentinels enthält und nicht verwaltete Aufrufkonventionen zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-832">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="96bec-833">Dies ist ein binärer Vergleich.</span><span class="sxs-lookup"><span data-stu-id="96bec-833">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="96bec-834">Für die Reflektion sind die Eigenschaften und Ereignisse nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-834">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-835">Wenn Sie eine Eigenschaft mit dem ein Get und Set-Accessor in der Basisklasse haben, aber die abgeleitete Klasse nur einen Get-Accessor hat, die Eigenschaft der abgeleiteten Klasse blendet die Basisklasseneigenschaft aus, und nicht werden auf den Setter in der Basisklasse zugreifen.</span><span class="sxs-lookup"><span data-stu-id="96bec-835">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="96bec-836">Benutzerdefinierte Attribute sind nicht Teil des allgemeinen Typsystems.</span><span class="sxs-lookup"><span data-stu-id="96bec-836">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="96bec-837">Wenn die aktuelle <xref:System.Type> einen konstruierten generischen Typ darstellt, gibt diese Methode die <xref:System.Reflection.EventInfo> mit den Typparametern, die durch die entsprechenden Typargumente ersetzt.</span><span class="sxs-lookup"><span data-stu-id="96bec-837">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.EventInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="96bec-838">Wenn die aktuelle <xref:System.Type> stellt einen Typparameter in der Definition einer generischen Typ-oder Methodendefinition, sucht diese Methode die Ereignisse der Class-Einschränkung.</span><span class="sxs-lookup"><span data-stu-id="96bec-838">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the events of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-839">Das folgende Beispiel erstellt eine <xref:System.Reflection.EventInfo> -Objekt und ruft das Ereignis für ein Button-Klasse für das angegebene Ereignis ab.</span><span class="sxs-lookup"><span data-stu-id="96bec-839">The following example creates an <xref:System.Reflection.EventInfo> object and gets the event for a button class for the specified event.</span></span>  
  
 [!code-cpp[Type_GetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetEvent/CPP/type_getevent.cpp#1)]
 [!code-csharp[Type_GetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetEvent/CS/type_getevent.cs#1)]
 [!code-vb[Type_GetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetEvent/VB/type_getevent.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96bec-840">
            <paramref name="name" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-840">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.EventInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetEvents" />
      </Docs>
    </Member>
    <Member MemberName="GetEvent">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.EventInfo GetEvent (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo GetEvent(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEvent(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEvent (name As String, bindingAttr As BindingFlags) As EventInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::EventInfo ^ GetEvent(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetEvent : string * System.Reflection.BindingFlags -&gt; System.Reflection.EventInfo" Usage="type.GetEvent (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetEvent(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="96bec-841">The string containing the name of an event which is declared or inherited by the current <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-841">The string containing the name of an event which is declared or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="96bec-842">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-842">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="96bec-843">-or-  Zero, to return <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-843">-or-  Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-844">When overridden in a derived class, returns the <see cref="T:System.Reflection.EventInfo" /> object representing the specified event, using the specified binding constraints.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-844">When overridden in a derived class, returns the <see cref="T:System.Reflection.EventInfo" /> object representing the specified event, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-845">The object representing the specified event that is declared or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-845">The object representing the specified event that is declared or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-846">Die folgenden <xref:System.Reflection.BindingFlags> Filterflags können festgelegt werden, welche Ereignisse in die Suche einbezogen werden:</span><span class="sxs-lookup"><span data-stu-id="96bec-846">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which events to include in the search:</span></span>  
  
-   <span data-ttu-id="96bec-847">Geben Sie `BindingFlags.Instance` oder `BindingFlags.Static` um ein Ergebnis zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-847">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="96bec-848">Geben Sie `BindingFlags.Public` öffentlichen Ereignisse in die Suche eingeschlossen.</span><span class="sxs-lookup"><span data-stu-id="96bec-848">Specify `BindingFlags.Public` to include public events in the search.</span></span>  
  
-   <span data-ttu-id="96bec-849">Geben Sie `BindingFlags.NonPublic` nicht öffentlichen Ereignisse (d. h. private, interne und geschützten) in die Suche eingeschlossen.</span><span class="sxs-lookup"><span data-stu-id="96bec-849">Specify `BindingFlags.NonPublic` to include non-public events (that is, private, internal, and protected events) in the search.</span></span>  
  
-   <span data-ttu-id="96bec-850">Geben Sie `BindingFlags.FlattenHierarchy` sollen `public` und `protected` statische Member der Hierarchie; `private` statische Member in geerbten Klassen sind nicht enthalten.</span><span class="sxs-lookup"><span data-stu-id="96bec-850">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="96bec-851">Die folgenden <xref:System.Reflection.BindingFlags> Modifiziererflags können verwendet werden, um die Funktionsweise der Suche ändern:</span><span class="sxs-lookup"><span data-stu-id="96bec-851">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="96bec-852">`BindingFlags.IgnoreCase` um die Groß-/Kleinschreibung ignorieren `name`.</span><span class="sxs-lookup"><span data-stu-id="96bec-852">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="96bec-853">`BindingFlags.DeclaredOnly` Suchen Sie nur die Ereignisse, die deklariert wird, auf die <xref:System.Type>, nicht die Ereignisse, die nur geerbt wurden.</span><span class="sxs-lookup"><span data-stu-id="96bec-853">`BindingFlags.DeclaredOnly` to search only the events declared on the <xref:System.Type>, not events that were simply inherited.</span></span>  
  
 <span data-ttu-id="96bec-854">Weitere Informationen finden Sie unter <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="96bec-854">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="96bec-855">Ein Ereignis ist Reflektion als öffentlich betrachtet, wenn er verfügt über mindestens eine Methode oder der Accessor, der öffentlich ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-855">An event is considered public to reflection if it has at least one method or accessor that is public.</span></span> <span data-ttu-id="96bec-856">Andernfalls wird das Ereignis als private betrachtet, und Sie müssen <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic kombinieren Sie die Werte mit `Or`) anfordern.</span><span class="sxs-lookup"><span data-stu-id="96bec-856">Otherwise the event is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="96bec-857">Wenn die aktuelle <xref:System.Type> einen konstruierten generischen Typ darstellt, gibt diese Methode die <xref:System.Reflection.EventInfo> mit den Typparametern, die durch die entsprechenden Typargumente ersetzt.</span><span class="sxs-lookup"><span data-stu-id="96bec-857">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.EventInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="96bec-858">Wenn die aktuelle <xref:System.Type> stellt einen Typparameter in der Definition einer generischen Typ-oder Methodendefinition, sucht diese Methode die Ereignisse der Class-Einschränkung.</span><span class="sxs-lookup"><span data-stu-id="96bec-858">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the events of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-859">Im folgenden Codebeispiel wird die <xref:System.Type.GetEvent%28System.String%2CSystem.Reflection.BindingFlags%29> Methode, um einen Typ für einen öffentlichen oder privaten-Ereignis, die mit dem Namen "Click" zu suchen, die nicht `static` (`Shared` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="96bec-859">The following code example uses the <xref:System.Type.GetEvent%28System.String%2CSystem.Reflection.BindingFlags%29> method to search a type for a public or non-public event named "Click" that is not `static` (`Shared` in Visual Basic).</span></span>  
  
 [!code-cpp[Type_GetEvent1#1](~/samples/snippets/cpp/VS_Snippets_CLR/type_getevent1/CPP/type_getevent1.cpp#1)]
 [!code-csharp[Type_GetEvent1#1](~/samples/snippets/csharp/VS_Snippets_CLR/type_getevent1/CS/type_getevent1.cs#1)]
 [!code-vb[Type_GetEvent1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/type_getevent1/VB/type_getevent1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96bec-860">
            <paramref name="name" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-860">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.EventInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetEvents" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEvents">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-861">Gets the events that are declared or inherited by the current <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-861">Gets the events that are declared or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEvents">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.EventInfo[] GetEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo[] GetEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEvents" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEvents () As EventInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::EventInfo ^&gt; ^ GetEvents();" />
      <MemberSignature Language="F#" Value="abstract member GetEvents : unit -&gt; System.Reflection.EventInfo[]&#xA;override this.GetEvents : unit -&gt; System.Reflection.EventInfo[]" Usage="type.GetEvents " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetEvents</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="96bec-862">Returns all the public events that are declared or inherited by the current <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-862">Returns all the public events that are declared or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-863">An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all the public events which are declared or inherited by the current <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-863">An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all the public events which are declared or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="96bec-864">-or-  An empty array of type <see cref="T:System.Reflection.EventInfo" />, if the current <see cref="T:System.Type" /> does not have public events.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-864">-or-  An empty array of type <see cref="T:System.Reflection.EventInfo" />, if the current <see cref="T:System.Type" /> does not have public events.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-865">Ein Ereignis ist Reflektion als öffentlich betrachtet, wenn er verfügt über mindestens eine Methode oder der Accessor, der öffentlich ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-865">An event is considered public to reflection if it has at least one method or accessor that is public.</span></span> <span data-ttu-id="96bec-866">Andernfalls wird das Ereignis als private betrachtet, und Sie müssen <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic kombinieren Sie die Werte mit `Or`) anfordern.</span><span class="sxs-lookup"><span data-stu-id="96bec-866">Otherwise the event is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="96bec-867">Die <xref:System.Type.GetEvents%2A> Methode nicht zurückgegeben Ereignisse in einer bestimmten Reihenfolge, z. B. alphabetische oder Reihenfolge der Deklaration.</span><span class="sxs-lookup"><span data-stu-id="96bec-867">The <xref:System.Type.GetEvents%2A> method does not return events in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="96bec-868">Ihr Code muss nicht abhängig von der Reihenfolge, in der Ereignisse zurückgegeben werden, da, die variieren kann.</span><span class="sxs-lookup"><span data-stu-id="96bec-868">Your code must not depend on the order in which events are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="96bec-869">Diese Methode kann von einer abgeleiteten Klasse überschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-869">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="96bec-870">Die folgende Tabelle zeigt, welche Member einer Basisklasse von zurückgegeben werden die `Get` Methoden ein, wenn für einen Typ reflektieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-870">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="96bec-871">Memberart</span><span class="sxs-lookup"><span data-stu-id="96bec-871">Member Type</span></span>|<span data-ttu-id="96bec-872">Statisch</span><span class="sxs-lookup"><span data-stu-id="96bec-872">Static</span></span>|<span data-ttu-id="96bec-873">Nicht statische</span><span class="sxs-lookup"><span data-stu-id="96bec-873">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="96bec-874">Konstruktor</span><span class="sxs-lookup"><span data-stu-id="96bec-874">Constructor</span></span>|<span data-ttu-id="96bec-875">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-875">No</span></span>|<span data-ttu-id="96bec-876">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-876">No</span></span>|  
|<span data-ttu-id="96bec-877">Feld</span><span class="sxs-lookup"><span data-stu-id="96bec-877">Field</span></span>|<span data-ttu-id="96bec-878">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-878">No</span></span>|<span data-ttu-id="96bec-879">Ja.</span><span class="sxs-lookup"><span data-stu-id="96bec-879">Yes.</span></span> <span data-ttu-id="96bec-880">Ein Feld ist immer nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-880">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="96bec-881">event</span><span class="sxs-lookup"><span data-stu-id="96bec-881">Event</span></span>|<span data-ttu-id="96bec-882">Nicht zutreffend</span><span class="sxs-lookup"><span data-stu-id="96bec-882">Not applicable</span></span>|<span data-ttu-id="96bec-883">Die allgemeinen Typsystem ist, dass die Vererbung ist identisch mit der Methoden, die die Eigenschaft zu implementieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-883">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="96bec-884">Reflektion behandelt Eigenschaften als nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-884">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-885">Siehe Hinweis 2 weiter unten.</span><span class="sxs-lookup"><span data-stu-id="96bec-885">See note 2 below.</span></span>|  
|<span data-ttu-id="96bec-886">Methode</span><span class="sxs-lookup"><span data-stu-id="96bec-886">Method</span></span>|<span data-ttu-id="96bec-887">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-887">No</span></span>|<span data-ttu-id="96bec-888">Ja.</span><span class="sxs-lookup"><span data-stu-id="96bec-888">Yes.</span></span> <span data-ttu-id="96bec-889">Eine Methode (virtuelle und nicht virtuelle) möglich Ausblenden nach Namen oder nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-889">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="96bec-890">Geschachtelter Typ</span><span class="sxs-lookup"><span data-stu-id="96bec-890">Nested Type</span></span>|<span data-ttu-id="96bec-891">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-891">No</span></span>|<span data-ttu-id="96bec-892">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-892">No</span></span>|  
|<span data-ttu-id="96bec-893">Eigenschaft</span><span class="sxs-lookup"><span data-stu-id="96bec-893">Property</span></span>|<span data-ttu-id="96bec-894">Nicht zutreffend</span><span class="sxs-lookup"><span data-stu-id="96bec-894">Not applicable</span></span>|<span data-ttu-id="96bec-895">Die allgemeinen Typsystem ist, dass die Vererbung ist identisch mit der Methoden, die die Eigenschaft zu implementieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-895">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="96bec-896">Reflektion behandelt Eigenschaften als nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-896">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-897">Siehe Hinweis 2 weiter unten.</span><span class="sxs-lookup"><span data-stu-id="96bec-897">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="96bec-898">Nach Name und Signatur ausblenden berücksichtigt, dass alle Teile der Signatur, die benutzerdefinierten Modifizierer, einschließlich Typen, Parametertypen, Sentinels enthält und nicht verwaltete Aufrufkonventionen zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-898">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="96bec-899">Dies ist ein binärer Vergleich.</span><span class="sxs-lookup"><span data-stu-id="96bec-899">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="96bec-900">Für die Reflektion sind die Eigenschaften und Ereignisse nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-900">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-901">Wenn Sie eine Eigenschaft mit dem ein Get und Set-Accessor in der Basisklasse haben, aber die abgeleitete Klasse nur einen Get-Accessor hat, die Eigenschaft der abgeleiteten Klasse blendet die Basisklasseneigenschaft aus, und nicht werden auf den Setter in der Basisklasse zugreifen.</span><span class="sxs-lookup"><span data-stu-id="96bec-901">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="96bec-902">Benutzerdefinierte Attribute sind nicht Teil des allgemeinen Typsystems.</span><span class="sxs-lookup"><span data-stu-id="96bec-902">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="96bec-903">Wenn die aktuelle <xref:System.Type> einen konstruierten generischen Typ darstellt, gibt diese Methode die <xref:System.Reflection.EventInfo> Objekte mit den Typparametern, die durch die entsprechenden Typargumente ersetzt.</span><span class="sxs-lookup"><span data-stu-id="96bec-903">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.EventInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="96bec-904">Wenn die aktuelle <xref:System.Type> stellt einen Typparameter in der Definition einer generischen Typ-oder Methodendefinition, sucht diese Methode die Ereignisse der Class-Einschränkung.</span><span class="sxs-lookup"><span data-stu-id="96bec-904">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the events of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-905">Im folgende Beispiel ruft ein Array von <xref:System.Reflection.EventInfo> Objekte, die alle Ereignisse für eine `Button` Klasse, und die Ereignisnamen angezeigt.</span><span class="sxs-lookup"><span data-stu-id="96bec-905">The following example obtains an array of <xref:System.Reflection.EventInfo> objects, gets all the events for a `Button` class, and displays the event names.</span></span> <span data-ttu-id="96bec-906">Um die Visual Basic-Beispiel zu kompilieren, verwenden Sie die folgende Befehlszeile ein:</span><span class="sxs-lookup"><span data-stu-id="96bec-906">To compile the Visual Basic example, use the following command line:</span></span>  
  
 `vbc type_getevents1.vb /r:System.Windows.Forms.dll /r:System.dll`  
  
 [!code-cpp[Type_GetEvents1#1](~/samples/snippets/cpp/VS_Snippets_CLR/type_getevents1/CPP/type_getevents1.cpp#1)]
 [!code-csharp[Type_GetEvents1#1](~/samples/snippets/csharp/VS_Snippets_CLR/type_getevents1/CS/type_getevents1.cs#1)]
 [!code-vb[Type_GetEvents1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/type_getevents1/VB/type_getevents1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.EventInfo" />
        <altmember cref="M:System.Type.GetEvent(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetEvents">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.EventInfo[] GetEvents (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo[] GetEvents(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEvents(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEvents (bindingAttr As BindingFlags) As EventInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::EventInfo ^&gt; ^ GetEvents(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetEvents : System.Reflection.BindingFlags -&gt; System.Reflection.EventInfo[]" Usage="type.GetEvents bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetEvents(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="96bec-907">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-907">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="96bec-908">-or-  Zero, to return <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-908">-or-  Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-909">When overridden in a derived class, searches for events that are declared or inherited by the current <see cref="T:System.Type" />, using the specified binding constraints.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-909">When overridden in a derived class, searches for events that are declared or inherited by the current <see cref="T:System.Type" />, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-910">An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all events that are declared or inherited by the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-910">An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all events that are declared or inherited by the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="96bec-911">-or-  An empty array of type <see cref="T:System.Reflection.EventInfo" />, if the current <see cref="T:System.Type" /> does not have events, or if none of the events match the binding constraints.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-911">-or-  An empty array of type <see cref="T:System.Reflection.EventInfo" />, if the current <see cref="T:System.Type" /> does not have events, or if none of the events match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-912">Die <xref:System.Type.GetEvents%2A> Methode nicht zurückgegeben Ereignisse in einer bestimmten Reihenfolge, z. B. alphabetische oder Reihenfolge der Deklaration.</span><span class="sxs-lookup"><span data-stu-id="96bec-912">The <xref:System.Type.GetEvents%2A> method does not return events in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="96bec-913">Ihr Code muss nicht abhängig von der Reihenfolge, in der Ereignisse zurückgegeben werden, da, die variieren kann.</span><span class="sxs-lookup"><span data-stu-id="96bec-913">Your code must not depend on the order in which events are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="96bec-914">Die folgenden <xref:System.Reflection.BindingFlags> Filterflags können festgelegt werden, welche Ereignisse in die Suche einbezogen werden:</span><span class="sxs-lookup"><span data-stu-id="96bec-914">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which events to include in the search:</span></span>  
  
-   <span data-ttu-id="96bec-915">Geben Sie `BindingFlags.Instance` oder `BindingFlags.Static` um ein Ergebnis zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-915">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="96bec-916">Geben Sie `BindingFlags.Public` öffentlichen Ereignisse in die Suche eingeschlossen.</span><span class="sxs-lookup"><span data-stu-id="96bec-916">Specify `BindingFlags.Public` to include public events in the search.</span></span>  
  
-   <span data-ttu-id="96bec-917">Geben Sie `BindingFlags.NonPublic` nicht öffentlichen Ereignisse (d. h. private, interne und geschützten) in die Suche eingeschlossen.</span><span class="sxs-lookup"><span data-stu-id="96bec-917">Specify `BindingFlags.NonPublic` to include non-public events (that is, private, internal, and protected events) in the search.</span></span> <span data-ttu-id="96bec-918">Nur geschützte und interne Ereignisse in Basisklassen werden zurückgegeben. Private Ereignisse in Basisklassen werden nicht zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-918">Only protected and internal events on base classes are returned; private events on base classes are not returned.</span></span>  
  
-   <span data-ttu-id="96bec-919">Geben Sie `BindingFlags.FlattenHierarchy` sollen `public` und `protected` statische Member der Hierarchie; `private` statische Member in geerbten Klassen sind nicht enthalten.</span><span class="sxs-lookup"><span data-stu-id="96bec-919">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="96bec-920">Die folgenden <xref:System.Reflection.BindingFlags> Modifiziererflags können verwendet werden, um die Funktionsweise der Suche ändern:</span><span class="sxs-lookup"><span data-stu-id="96bec-920">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="96bec-921">`BindingFlags.DeclaredOnly` Suchen Sie nur die Ereignisse, die deklariert wird, auf die <xref:System.Type>, nicht die Ereignisse, die nur geerbt wurden.</span><span class="sxs-lookup"><span data-stu-id="96bec-921">`BindingFlags.DeclaredOnly` to search only the events declared on the <xref:System.Type>, not events that were simply inherited.</span></span>  
  
 <span data-ttu-id="96bec-922">Weitere Informationen finden Sie unter <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="96bec-922">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="96bec-923">Ein Ereignis ist Reflektion als öffentlich betrachtet, wenn er verfügt über mindestens eine Methode oder der Accessor, der öffentlich ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-923">An event is considered public to reflection if it has at least one method or accessor that is public.</span></span> <span data-ttu-id="96bec-924">Andernfalls wird das Ereignis als private betrachtet, und Sie müssen <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic kombinieren Sie die Werte mit `Or`) anfordern.</span><span class="sxs-lookup"><span data-stu-id="96bec-924">Otherwise the event is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="96bec-925">Wenn die aktuelle <xref:System.Type> einen konstruierten generischen Typ darstellt, gibt diese Methode die <xref:System.Reflection.EventInfo> Objekte mit den Typparametern, die durch die entsprechenden Typargumente ersetzt.</span><span class="sxs-lookup"><span data-stu-id="96bec-925">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.EventInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="96bec-926">Wenn die aktuelle <xref:System.Type> stellt einen Typparameter in der Definition einer generischen Typ-oder Methodendefinition, sucht diese Methode die Ereignisse der Class-Einschränkung.</span><span class="sxs-lookup"><span data-stu-id="96bec-926">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the events of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-927">Im folgende Beispiel ruft ein Array von <xref:System.Reflection.EventInfo> Objekte, die den angegebenen Bindungsflags entsprechen Ruft alle Ereignisse für eine `Button` Klasse, und die Ereignisnamen angezeigt.</span><span class="sxs-lookup"><span data-stu-id="96bec-927">The following example obtains an array of <xref:System.Reflection.EventInfo> objects that match the specified binding flags, gets all the events for a `Button` class, and displays the event names.</span></span> <span data-ttu-id="96bec-928">Um die Visual Basic-Beispiel zu kompilieren, verwenden Sie die folgende Befehlszeile ein:</span><span class="sxs-lookup"><span data-stu-id="96bec-928">To compile the Visual Basic example, use the following command line:</span></span>  
  
 `vbc type_getevents2.vb /r:System.Windows.Forms.dll /r:System.dll`  
  
 [!code-cpp[Type_GetEvents2#1](~/samples/snippets/cpp/VS_Snippets_CLR/type_getevents2/CPP/type_getevents2.cpp#1)]
 [!code-csharp[Type_GetEvents2#1](~/samples/snippets/csharp/VS_Snippets_CLR/type_getevents2/CS/type_getevents2.cs#1)]
 [!code-vb[Type_GetEvents2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/type_getevents2/VB/type_getevents2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.EventInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetEvent(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetField">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-929">Gets a specific field of the current <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-929">Gets a specific field of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetField">
      <MemberSignature Language="C#" Value="public System.Reflection.FieldInfo GetField (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo GetField(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetField(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetField (name As String) As FieldInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::FieldInfo ^ GetField(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetField : string -&gt; System.Reflection.FieldInfo&#xA;override this.GetField : string -&gt; System.Reflection.FieldInfo" Usage="type.GetField name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetField(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="96bec-930">The string containing the name of the data field to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-930">The string containing the name of the data field to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-931">Searches for the public field with the specified name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-931">Searches for the public field with the specified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-932">An object representing the public field with the specified name, if found; otherwise, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-932">An object representing the public field with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-933">Die Suche nach `name` Groß-/Kleinschreibung beachtet wird.</span><span class="sxs-lookup"><span data-stu-id="96bec-933">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="96bec-934">Die Suche enthält öffentliche statisch und öffentlich Instanzfelder.</span><span class="sxs-lookup"><span data-stu-id="96bec-934">The search includes public static and public instance fields.</span></span>  
  
 <span data-ttu-id="96bec-935">Wenn die aktuelle <xref:System.Type> einen konstruierten generischen Typ darstellt, gibt diese Methode die <xref:System.Reflection.FieldInfo> mit den Typparametern, die durch die entsprechenden Typargumente ersetzt.</span><span class="sxs-lookup"><span data-stu-id="96bec-935">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.FieldInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="96bec-936">Wenn die aktuelle <xref:System.Type> stellt einen Typparameter in der Definition einer generischen Typ-oder Methodendefinition, sucht diese Methode die Felder der Class-Einschränkung.</span><span class="sxs-lookup"><span data-stu-id="96bec-936">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the fields of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-937">Im folgenden Beispiel wird die `Type` Objekt für die angegebene Klasse, erhält der <xref:System.Reflection.FieldInfo> Objekt für das Feld, und der Wert des Felds angezeigt.</span><span class="sxs-lookup"><span data-stu-id="96bec-937">The following example gets the `Type` object for the specified class, obtains the <xref:System.Reflection.FieldInfo> object for the field, and displays the value of the field.</span></span>  
  
 [!code-cpp[Type_GetField#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetField/CPP/type_getfield.cpp#1)]
 [!code-csharp[Type_GetField#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetField/CS/type_getfield.cs#1)]
 [!code-vb[Type_GetField#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetField/VB/type_getfield.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96bec-938">
            <paramref name="name" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-938">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="96bec-939">This <see cref="T:System.Type" /> object is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> whose <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> method has not yet been called.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-939">This <see cref="T:System.Type" /> object is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> whose <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> method has not yet been called.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.FieldInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetFields" />
      </Docs>
    </Member>
    <Member MemberName="GetField">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo GetField(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetField (name As String, bindingAttr As BindingFlags) As FieldInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::FieldInfo ^ GetField(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetField : string * System.Reflection.BindingFlags -&gt; System.Reflection.FieldInfo" Usage="type.GetField (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetField(System.String,System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetField(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="96bec-940">The string containing the name of the data field to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-940">The string containing the name of the data field to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="96bec-941">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-941">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="96bec-942">-or-  Zero, to return <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-942">-or-  Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-943">Searches for the specified field, using the specified binding constraints.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-943">Searches for the specified field, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-944">An object representing the field that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-944">An object representing the field that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-945">Die folgende Tabelle zeigt, welche Member einer Basisklasse von zurückgegeben werden die `Get` Methoden ein, wenn für einen Typ reflektieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-945">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="96bec-946">Memberart</span><span class="sxs-lookup"><span data-stu-id="96bec-946">Member Type</span></span>|<span data-ttu-id="96bec-947">Statisch</span><span class="sxs-lookup"><span data-stu-id="96bec-947">Static</span></span>|<span data-ttu-id="96bec-948">Nicht statische</span><span class="sxs-lookup"><span data-stu-id="96bec-948">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="96bec-949">Konstruktor</span><span class="sxs-lookup"><span data-stu-id="96bec-949">Constructor</span></span>|<span data-ttu-id="96bec-950">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-950">No</span></span>|<span data-ttu-id="96bec-951">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-951">No</span></span>|  
|<span data-ttu-id="96bec-952">Feld</span><span class="sxs-lookup"><span data-stu-id="96bec-952">Field</span></span>|<span data-ttu-id="96bec-953">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-953">No</span></span>|<span data-ttu-id="96bec-954">Ja.</span><span class="sxs-lookup"><span data-stu-id="96bec-954">Yes.</span></span> <span data-ttu-id="96bec-955">Ein Feld ist immer nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-955">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="96bec-956">event</span><span class="sxs-lookup"><span data-stu-id="96bec-956">Event</span></span>|<span data-ttu-id="96bec-957">Nicht zutreffend</span><span class="sxs-lookup"><span data-stu-id="96bec-957">Not applicable</span></span>|<span data-ttu-id="96bec-958">Die allgemeinen Typsystem ist, dass die Vererbung ist identisch mit der Methoden, die die Eigenschaft zu implementieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-958">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="96bec-959">Reflektion behandelt Eigenschaften als nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-959">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-960">Siehe Hinweis 2 weiter unten.</span><span class="sxs-lookup"><span data-stu-id="96bec-960">See note 2 below.</span></span>|  
|<span data-ttu-id="96bec-961">Methode</span><span class="sxs-lookup"><span data-stu-id="96bec-961">Method</span></span>|<span data-ttu-id="96bec-962">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-962">No</span></span>|<span data-ttu-id="96bec-963">Ja.</span><span class="sxs-lookup"><span data-stu-id="96bec-963">Yes.</span></span> <span data-ttu-id="96bec-964">Eine Methode (virtuelle und nicht virtuelle) möglich Ausblenden nach Namen oder nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-964">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="96bec-965">Geschachtelter Typ</span><span class="sxs-lookup"><span data-stu-id="96bec-965">Nested Type</span></span>|<span data-ttu-id="96bec-966">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-966">No</span></span>|<span data-ttu-id="96bec-967">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-967">No</span></span>|  
|<span data-ttu-id="96bec-968">Eigenschaft</span><span class="sxs-lookup"><span data-stu-id="96bec-968">Property</span></span>|<span data-ttu-id="96bec-969">Nicht zutreffend</span><span class="sxs-lookup"><span data-stu-id="96bec-969">Not applicable</span></span>|<span data-ttu-id="96bec-970">Die allgemeinen Typsystem ist, dass die Vererbung ist identisch mit der Methoden, die die Eigenschaft zu implementieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-970">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="96bec-971">Reflektion behandelt Eigenschaften als nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-971">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-972">Siehe Hinweis 2 weiter unten.</span><span class="sxs-lookup"><span data-stu-id="96bec-972">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="96bec-973">Nach Name und Signatur ausblenden berücksichtigt, dass alle Teile der Signatur, die benutzerdefinierten Modifizierer, einschließlich Typen, Parametertypen, Sentinels enthält und nicht verwaltete Aufrufkonventionen zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-973">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="96bec-974">Dies ist ein binärer Vergleich.</span><span class="sxs-lookup"><span data-stu-id="96bec-974">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="96bec-975">Für die Reflektion sind die Eigenschaften und Ereignisse nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-975">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-976">Wenn Sie eine Eigenschaft mit dem ein Get und Set-Accessor in der Basisklasse haben, aber die abgeleitete Klasse nur einen Get-Accessor hat, die Eigenschaft der abgeleiteten Klasse blendet die Basisklasseneigenschaft aus, und nicht werden auf den Setter in der Basisklasse zugreifen.</span><span class="sxs-lookup"><span data-stu-id="96bec-976">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="96bec-977">Benutzerdefinierte Attribute sind nicht Teil des allgemeinen Typsystems.</span><span class="sxs-lookup"><span data-stu-id="96bec-977">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="96bec-978">Die folgenden <xref:System.Reflection.BindingFlags> Filterflags können festgelegt werden, welche Felder in die Suche einbezogen werden:</span><span class="sxs-lookup"><span data-stu-id="96bec-978">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which fields to include in the search:</span></span>  
  
-   <span data-ttu-id="96bec-979">Geben Sie `BindingFlags.Instance` oder `BindingFlags.Static` um ein Ergebnis zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-979">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="96bec-980">Geben Sie `BindingFlags.Public` öffentliche Felder in die Suche eingeschlossen.</span><span class="sxs-lookup"><span data-stu-id="96bec-980">Specify `BindingFlags.Public` to include public fields in the search.</span></span>  
  
-   <span data-ttu-id="96bec-981">Geben Sie `BindingFlags.NonPublic` auf nicht öffentliche Felder (d.h. private, interne und geschützte Felder) in die Suche einbeziehen.</span><span class="sxs-lookup"><span data-stu-id="96bec-981">Specify `BindingFlags.NonPublic` to include non-public fields (that is, private, internal, and protected fields) in the search.</span></span>  
  
-   <span data-ttu-id="96bec-982">Geben Sie `BindingFlags.FlattenHierarchy` sollen `public` und `protected` statische Member der Hierarchie; `private` statische Member in geerbten Klassen sind nicht enthalten.</span><span class="sxs-lookup"><span data-stu-id="96bec-982">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="96bec-983">Die folgenden <xref:System.Reflection.BindingFlags> Modifiziererflags können verwendet werden, um die Funktionsweise der Suche ändern:</span><span class="sxs-lookup"><span data-stu-id="96bec-983">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="96bec-984">`BindingFlags.IgnoreCase` um die Groß-/Kleinschreibung ignorieren `name`.</span><span class="sxs-lookup"><span data-stu-id="96bec-984">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="96bec-985">`BindingFlags.DeclaredOnly` Suchen Sie nur die Felder, die deklariert wird, auf die <xref:System.Type>, nicht nach Feldern, die nur geerbt wurden.</span><span class="sxs-lookup"><span data-stu-id="96bec-985">`BindingFlags.DeclaredOnly` to search only the fields declared on the <xref:System.Type>, not fields that were simply inherited.</span></span>  
  
 <span data-ttu-id="96bec-986">Weitere Informationen finden Sie unter <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="96bec-986">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="96bec-987">Wenn die aktuelle <xref:System.Type> einen konstruierten generischen Typ darstellt, gibt diese Methode die <xref:System.Reflection.FieldInfo> mit den Typparametern, die durch die entsprechenden Typargumente ersetzt.</span><span class="sxs-lookup"><span data-stu-id="96bec-987">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.FieldInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="96bec-988">Wenn die aktuelle <xref:System.Type> stellt einen Typparameter in der Definition einer generischen Typ-oder Methodendefinition, sucht diese Methode die Felder der Class-Einschränkung.</span><span class="sxs-lookup"><span data-stu-id="96bec-988">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the fields of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-989">Im folgenden Beispiel wird die `Type` Objekt für die angegebene Klasse, erhält der <xref:System.Reflection.FieldInfo> -Objekt für das Feld, das den angegebenen Bindungsflags entspricht, und zeigt den Wert des Felds.</span><span class="sxs-lookup"><span data-stu-id="96bec-989">The following example gets the `Type` object for the specified class, obtains the <xref:System.Reflection.FieldInfo> object for the field that matches the specified binding flags, and displays the value of the field.</span></span>  
  
 [!code-cpp[Type_GetField#2](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetField/CPP/type_getfield.cpp#2)]
 [!code-csharp[Type_GetField#2](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetField/CS/type_getfield.cs#2)]
 [!code-vb[Type_GetField#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetField/VB/type_getfield.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96bec-990">
            <paramref name="name" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-990">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.FieldInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetFields" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFields">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-991">Gets the fields of the current <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-991">Gets the fields of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFields">
      <MemberSignature Language="C#" Value="public System.Reflection.FieldInfo[] GetFields ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo[] GetFields() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetFields" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFields () As FieldInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::FieldInfo ^&gt; ^ GetFields();" />
      <MemberSignature Language="F#" Value="abstract member GetFields : unit -&gt; System.Reflection.FieldInfo[]&#xA;override this.GetFields : unit -&gt; System.Reflection.FieldInfo[]" Usage="type.GetFields " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetFields</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="96bec-992">Returns all the public fields of the current <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-992">Returns all the public fields of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-993">An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing all the public fields defined for the current <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-993">An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing all the public fields defined for the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="96bec-994">-or-  An empty array of type <see cref="T:System.Reflection.FieldInfo" />, if no public fields are defined for the current <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-994">-or-  An empty array of type <see cref="T:System.Reflection.FieldInfo" />, if no public fields are defined for the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-995">Die <xref:System.Type.GetFields%2A> Methode nicht zurückgegeben Felder in einer bestimmten Reihenfolge, z. B. alphabetische oder Reihenfolge der Deklaration.</span><span class="sxs-lookup"><span data-stu-id="96bec-995">The <xref:System.Type.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="96bec-996">Ihr Code muss nicht abhängig von der Reihenfolge, in der Felder zurückgegeben werden, da, die variieren kann.</span><span class="sxs-lookup"><span data-stu-id="96bec-996">Your code must not depend on the order in which fields are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="96bec-997">Die folgende Tabelle zeigt, welche Member einer Basisklasse von zurückgegeben werden die `Get` Methoden ein, wenn für einen Typ reflektieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-997">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="96bec-998">Memberart</span><span class="sxs-lookup"><span data-stu-id="96bec-998">Member Type</span></span>|<span data-ttu-id="96bec-999">Statisch</span><span class="sxs-lookup"><span data-stu-id="96bec-999">Static</span></span>|<span data-ttu-id="96bec-1000">Nicht statische</span><span class="sxs-lookup"><span data-stu-id="96bec-1000">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="96bec-1001">Konstruktor</span><span class="sxs-lookup"><span data-stu-id="96bec-1001">Constructor</span></span>|<span data-ttu-id="96bec-1002">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-1002">No</span></span>|<span data-ttu-id="96bec-1003">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-1003">No</span></span>|  
|<span data-ttu-id="96bec-1004">Feld</span><span class="sxs-lookup"><span data-stu-id="96bec-1004">Field</span></span>|<span data-ttu-id="96bec-1005">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-1005">No</span></span>|<span data-ttu-id="96bec-1006">Ja.</span><span class="sxs-lookup"><span data-stu-id="96bec-1006">Yes.</span></span> <span data-ttu-id="96bec-1007">Ein Feld ist immer nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1007">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="96bec-1008">event</span><span class="sxs-lookup"><span data-stu-id="96bec-1008">Event</span></span>|<span data-ttu-id="96bec-1009">Nicht zutreffend</span><span class="sxs-lookup"><span data-stu-id="96bec-1009">Not applicable</span></span>|<span data-ttu-id="96bec-1010">Die allgemeinen Typsystem ist, dass die Vererbung ist identisch mit der Methoden, die die Eigenschaft zu implementieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-1010">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="96bec-1011">Reflektion behandelt Eigenschaften als nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1011">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-1012">Siehe Hinweis 2 weiter unten.</span><span class="sxs-lookup"><span data-stu-id="96bec-1012">See note 2 below.</span></span>|  
|<span data-ttu-id="96bec-1013">Methode</span><span class="sxs-lookup"><span data-stu-id="96bec-1013">Method</span></span>|<span data-ttu-id="96bec-1014">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-1014">No</span></span>|<span data-ttu-id="96bec-1015">Ja.</span><span class="sxs-lookup"><span data-stu-id="96bec-1015">Yes.</span></span> <span data-ttu-id="96bec-1016">Eine Methode (virtuelle und nicht virtuelle) möglich Ausblenden nach Namen oder nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1016">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="96bec-1017">Geschachtelter Typ</span><span class="sxs-lookup"><span data-stu-id="96bec-1017">Nested Type</span></span>|<span data-ttu-id="96bec-1018">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-1018">No</span></span>|<span data-ttu-id="96bec-1019">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-1019">No</span></span>|  
|<span data-ttu-id="96bec-1020">Eigenschaft</span><span class="sxs-lookup"><span data-stu-id="96bec-1020">Property</span></span>|<span data-ttu-id="96bec-1021">Nicht zutreffend</span><span class="sxs-lookup"><span data-stu-id="96bec-1021">Not applicable</span></span>|<span data-ttu-id="96bec-1022">Die allgemeinen Typsystem ist, dass die Vererbung ist identisch mit der Methoden, die die Eigenschaft zu implementieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-1022">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="96bec-1023">Reflektion behandelt Eigenschaften als nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1023">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-1024">Siehe Hinweis 2 weiter unten.</span><span class="sxs-lookup"><span data-stu-id="96bec-1024">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="96bec-1025">Nach Name und Signatur ausblenden berücksichtigt, dass alle Teile der Signatur, die benutzerdefinierten Modifizierer, einschließlich Typen, Parametertypen, Sentinels enthält und nicht verwaltete Aufrufkonventionen zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-1025">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="96bec-1026">Dies ist ein binärer Vergleich.</span><span class="sxs-lookup"><span data-stu-id="96bec-1026">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="96bec-1027">Für die Reflektion sind die Eigenschaften und Ereignisse nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1027">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-1028">Wenn Sie eine Eigenschaft mit dem ein Get und Set-Accessor in der Basisklasse haben, aber die abgeleitete Klasse nur einen Get-Accessor hat, die Eigenschaft der abgeleiteten Klasse blendet die Basisklasseneigenschaft aus, und nicht werden auf den Setter in der Basisklasse zugreifen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1028">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="96bec-1029">Benutzerdefinierte Attribute sind nicht Teil des allgemeinen Typsystems.</span><span class="sxs-lookup"><span data-stu-id="96bec-1029">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="96bec-1030">Wenn die aktuelle <xref:System.Type> einen konstruierten generischen Typ darstellt, gibt diese Methode die <xref:System.Reflection.FieldInfo> Objekte mit den Typparametern, die durch die entsprechenden Typargumente ersetzt.</span><span class="sxs-lookup"><span data-stu-id="96bec-1030">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.FieldInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="96bec-1031">Wenn die aktuelle <xref:System.Type> stellt einen Typparameter in der Definition einer generischen Typ-oder Methodendefinition, sucht diese Methode die öffentlichen Felder des der Class-Einschränkung.</span><span class="sxs-lookup"><span data-stu-id="96bec-1031">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the public fields of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-1032">Das folgende Beispiel veranschaulicht die Verwendung von der `GetFields()` Methode.</span><span class="sxs-lookup"><span data-stu-id="96bec-1032">The following example shows a use of the `GetFields()` method.</span></span>  
  
 [!code-cpp[FieldInfo_IsSpecialName#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo_IsSpecialName/CPP/fieldinfo_isspecialname.cpp#1)]
 [!code-csharp[FieldInfo_IsSpecialName#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_IsSpecialName/CS/fieldinfo_isspecialname.cs#1)]
 [!code-vb[FieldInfo_IsSpecialName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_IsSpecialName/VB/fieldinfo_isspecialname.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldInfo" />
        <altmember cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetFields">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo[] GetFields(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetFields(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetFields (bindingAttr As BindingFlags) As FieldInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::FieldInfo ^&gt; ^ GetFields(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetFields : System.Reflection.BindingFlags -&gt; System.Reflection.FieldInfo[]" Usage="type.GetFields bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetFields(System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetFields(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="96bec-1033">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1033">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="96bec-1034">-or-  Zero, to return <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1034">-or-  Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-1035">When overridden in a derived class, searches for the fields defined for the current <see cref="T:System.Type" />, using the specified binding constraints.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1035">When overridden in a derived class, searches for the fields defined for the current <see cref="T:System.Type" />, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-1036">An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing all fields defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1036">An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing all fields defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="96bec-1037">-or-  An empty array of type <see cref="T:System.Reflection.FieldInfo" />, if no fields are defined for the current <see cref="T:System.Type" />, or if none of the defined fields match the binding constraints.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1037">-or-  An empty array of type <see cref="T:System.Reflection.FieldInfo" />, if no fields are defined for the current <see cref="T:System.Type" />, or if none of the defined fields match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-1038">Die <xref:System.Type.GetFields%2A> Methode nicht zurückgegeben Felder in einer bestimmten Reihenfolge, z. B. alphabetische oder Reihenfolge der Deklaration.</span><span class="sxs-lookup"><span data-stu-id="96bec-1038">The <xref:System.Type.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="96bec-1039">Ihr Code muss nicht abhängig von der Reihenfolge, in der Felder zurückgegeben werden, da, die variieren kann.</span><span class="sxs-lookup"><span data-stu-id="96bec-1039">Your code must not depend on the order in which fields are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="96bec-1040">Die folgenden <xref:System.Reflection.BindingFlags> Filterflags können festgelegt werden, welche Felder in die Suche einbezogen werden:</span><span class="sxs-lookup"><span data-stu-id="96bec-1040">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which fields to include in the search:</span></span>  
  
-   <span data-ttu-id="96bec-1041">Geben Sie `BindingFlags.Instance` oder `BindingFlags.Static` um ein Ergebnis zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-1041">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="96bec-1042">Geben Sie `BindingFlags.Public` öffentliche Felder in die Suche eingeschlossen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1042">Specify `BindingFlags.Public` to include public fields in the search.</span></span>  
  
-   <span data-ttu-id="96bec-1043">Geben Sie `BindingFlags.NonPublic` auf nicht öffentliche Felder (d.h. private, interne und geschützte Felder) in die Suche einbeziehen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1043">Specify `BindingFlags.NonPublic` to include non-public fields (that is, private, internal, and protected fields) in the search.</span></span> <span data-ttu-id="96bec-1044">Nur geschützte und internen Felder auf der Basis-Klassen zurückgegeben werden. private Felder für Basisklassen werden nicht zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-1044">Only protected and internal fields on base classes are returned; private fields on base classes are not returned.</span></span>  
  
-   <span data-ttu-id="96bec-1045">Geben Sie `BindingFlags.FlattenHierarchy` sollen `public` und `protected` statische Member der Hierarchie; `private` statische Member in geerbten Klassen sind nicht enthalten.</span><span class="sxs-lookup"><span data-stu-id="96bec-1045">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="96bec-1046">Die folgenden <xref:System.Reflection.BindingFlags> Modifiziererflags können verwendet werden, um die Funktionsweise der Suche ändern:</span><span class="sxs-lookup"><span data-stu-id="96bec-1046">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="96bec-1047">`BindingFlags.DeclaredOnly` Suchen Sie nur die Felder, die deklariert wird, auf die <xref:System.Type>, nicht nach Feldern, die nur geerbt wurden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1047">`BindingFlags.DeclaredOnly` to search only the fields declared on the <xref:System.Type>, not fields that were simply inherited.</span></span>  
  
 <span data-ttu-id="96bec-1048">Weitere Informationen finden Sie unter <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="96bec-1048">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="96bec-1049">Wenn die aktuelle <xref:System.Type> einen konstruierten generischen Typ darstellt, gibt diese Methode die <xref:System.Reflection.FieldInfo> Objekte mit den Typparametern, die durch die entsprechenden Typargumente ersetzt.</span><span class="sxs-lookup"><span data-stu-id="96bec-1049">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.FieldInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="96bec-1050">Wenn die aktuelle <xref:System.Type> stellt einen Typparameter in der Definition einer generischen Typ-oder Methodendefinition, sucht diese Methode die öffentlichen Felder des der Class-Einschränkung.</span><span class="sxs-lookup"><span data-stu-id="96bec-1050">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the public fields of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-1051">Das folgende Beispiel veranschaulicht die Verwendung von der `GetFields(BindingFlags)` Methode.</span><span class="sxs-lookup"><span data-stu-id="96bec-1051">The following example shows a use of the `GetFields(BindingFlags)` method.</span></span>  
  
 [!code-cpp[Classic MethodBase.Attributes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MethodBase.Attributes Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MethodBase.Attributes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MethodBase.Attributes Example/CS/source.cs#1)]
 [!code-vb[Classic MethodBase.Attributes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MethodBase.Attributes Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetGenericArguments">
      <MemberSignature Language="C#" Value="public virtual Type[] GetGenericArguments ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetGenericArguments() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetGenericArguments" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGenericArguments () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetGenericArguments();" />
      <MemberSignature Language="F#" Value="abstract member GetGenericArguments : unit -&gt; Type[]&#xA;override this.GetGenericArguments : unit -&gt; Type[]" Usage="type.GetGenericArguments " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="96bec-1052">Returns an array of <see cref="T:System.Type" /> objects that represent the type arguments of a closed generic type or the type parameters of a generic type definition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1052">Returns an array of <see cref="T:System.Type" /> objects that represent the type arguments of a closed generic type or the type parameters of a generic type definition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-1053">An array of <see cref="T:System.Type" /> objects that represent the type arguments of a generic type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1053">An array of <see cref="T:System.Type" /> objects that represent the type arguments of a generic type.</span>
          </span>
          <span data-ttu-id="96bec-1054">Returns an empty array if the current type is not a generic type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1054">Returns an empty array if the current type is not a generic type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-1055">Die Elemente des Arrays werden in der Reihenfolge zurückgegeben, in denen sie in der Liste der Typargumente für den generischen Typ angezeigt werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1055">The array elements are returned in the order in which they appear in the list of type arguments for the generic type.</span></span>  
  
-   <span data-ttu-id="96bec-1056">Wenn der aktuelle Typ ein geschlossener konstruierter Typ ist (, also die <xref:System.Type.ContainsGenericParameters%2A> -Eigenschaft gibt `false`), das von zurückgegebene Array die <xref:System.Type.GetGenericArguments%2A> Methode enthält die Typen, die die generischen Typparameter der generischen Typdefinition zugewiesen wurden .</span><span class="sxs-lookup"><span data-stu-id="96bec-1056">If the current type is a closed constructed type (that is, the <xref:System.Type.ContainsGenericParameters%2A> property returns `false`), the array returned by the <xref:System.Type.GetGenericArguments%2A> method contains the types that have been assigned to the generic type parameters of the generic type definition.</span></span>  
  
-   <span data-ttu-id="96bec-1057">Wenn der aktuelle Typ eine generische Typdefinition ist, enthält das Array die Typparameter an.</span><span class="sxs-lookup"><span data-stu-id="96bec-1057">If the current type is a generic type definition, the array contains the type parameters.</span></span>  
  
-   <span data-ttu-id="96bec-1058">Wenn der aktuelle Typ ein offener Typ ist (d. h. die <xref:System.Type.ContainsGenericParameters%2A> -Eigenschaft gibt `true`) in denen bestimmten Typen nicht für alle Typparameter und Typparameter von einschließenden generischen Typen oder Methoden zugewiesen wurden, enthält das Array sowohl Typen als auch Typparameter.</span><span class="sxs-lookup"><span data-stu-id="96bec-1058">If the current type is an open constructed type (that is, the <xref:System.Type.ContainsGenericParameters%2A> property returns `true`) in which specific types have not been assigned to all of the type parameters and type parameters of enclosing generic types or methods, the array contains both types and type parameters.</span></span> <span data-ttu-id="96bec-1059">Verwenden der <xref:System.Type.IsGenericParameter%2A> Eigenschaft, um Sie voneinander zu unterscheiden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1059">Use the <xref:System.Type.IsGenericParameter%2A> property to tell them apart.</span></span> <span data-ttu-id="96bec-1060">Eine Demonstration dieses Szenarios finden Sie im Codebeispiel für die <xref:System.Type.ContainsGenericParameters%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="96bec-1060">For a demonstration of this scenario, see the code example for the <xref:System.Type.ContainsGenericParameters%2A> property.</span></span>  
  
 <span data-ttu-id="96bec-1061">Eine Liste der invarianten Bedingungen für Begriffe, für Begriffe, die für die Reflektion mit generischen Methoden verwendet werden, finden Sie in den Hinweisen zur Eigenschaft <xref:System.Type.IsGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="96bec-1061">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-1062">Im folgenden Codebeispiel wird die <xref:System.Type.GetGenericArguments%2A> Methode, um die Typargumente einer konstruierten Typ und die Typparameter der generischen Typdefinition anzuzeigen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1062">The following code example uses the <xref:System.Type.GetGenericArguments%2A> method to display the type arguments of a constructed type and the type parameters of its generic type definition.</span></span>  
  
 <span data-ttu-id="96bec-1063">Dieses Codebeispiel ist Teil eines umfangreicheren Beispiels für die <xref:System.Type.IsGenericTypeDefinition%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="96bec-1063">This code example is part of a larger example provided for the <xref:System.Type.IsGenericTypeDefinition%2A> property.</span></span> <span data-ttu-id="96bec-1064">Finden Sie unter den umfangreicheren Beispiels für die Ausgabe des Beispiels.</span><span class="sxs-lookup"><span data-stu-id="96bec-1064">See the larger example for sample output.</span></span>  
  
 [!code-cpp[System.Type.IsGenericTypeDefinition#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/CPP/source.cpp#2)]
 [!code-csharp[System.Type.IsGenericTypeDefinition#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/CS/source.cs#2)]
 [!code-vb[System.Type.IsGenericTypeDefinition#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="96bec-1065">The invoked method is not supported in the base class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1065">The invoked method is not supported in the base class.</span>
          </span>
          <span data-ttu-id="96bec-1066">Derived classes must provide an implementation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1066">Derived classes must provide an implementation.</span>
          </span>
        </exception>
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="P:System.Type.IsGenericTypeDefinition" />
      </Docs>
    </Member>
    <Member MemberName="GetGenericParameterConstraints">
      <MemberSignature Language="C#" Value="public virtual Type[] GetGenericParameterConstraints ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetGenericParameterConstraints() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetGenericParameterConstraints" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGenericParameterConstraints () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetGenericParameterConstraints();" />
      <MemberSignature Language="F#" Value="abstract member GetGenericParameterConstraints : unit -&gt; Type[]&#xA;override this.GetGenericParameterConstraints : unit -&gt; Type[]" Usage="type.GetGenericParameterConstraints " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="96bec-1067">Returns an array of <see cref="T:System.Type" /> objects that represent the constraints on the current generic type parameter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1067">Returns an array of <see cref="T:System.Type" /> objects that represent the constraints on the current generic type parameter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-1068">An array of <see cref="T:System.Type" /> objects that represent the constraints on the current generic type parameter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1068">An array of <see cref="T:System.Type" /> objects that represent the constraints on the current generic type parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-1069">Jede Einschränkung für einen generischen Typparameter wird als eine <xref:System.Type> Objekt.</span><span class="sxs-lookup"><span data-stu-id="96bec-1069">Each constraint on a generic type parameter is expressed as a <xref:System.Type> object.</span></span> <span data-ttu-id="96bec-1070">Verwenden der <xref:System.Type.IsClass%2A> Eigenschaft, um zu bestimmen, ob eine Einschränkung der basisklassenconstraint ist; wenn die Eigenschaft zurückgibt `false`, die Einschränkung ist eine schnittstelleneinschränkung.</span><span class="sxs-lookup"><span data-stu-id="96bec-1070">Use the <xref:System.Type.IsClass%2A> property to determine whether a constraint is the base class constraint; if the property returns `false`, the constraint is an interface constraint.</span></span> <span data-ttu-id="96bec-1071">Wenn ein Typparameter ohne klasseneinschränkung und keine schnittstelleneinschränkungen verfügt, wird ein leeres Array zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-1071">If a type parameter has no class constraint and no interface constraints, an empty array is returned.</span></span>  
  
 <span data-ttu-id="96bec-1072">Eine Liste der invarianten Bedingungen für Begriffe, für Begriffe, die für die Reflektion mit generischen Methoden verwendet werden, finden Sie in den Hinweisen zur Eigenschaft <xref:System.Type.IsGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="96bec-1072">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-1073">Das folgende Codebeispiel definiert einen generischen Typ `Test` mit zwei Typparametern, die verschiedene Einschränkungen aufweisen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1073">The following code example defines a generic type `Test` with two type parameters that have different constraints.</span></span> <span data-ttu-id="96bec-1074">Wenn das Programm ausgeführt wird, die Einschränkungen werden überprüft, mit der <xref:System.Type.GenericParameterAttributes%2A> Eigenschaft und die <xref:System.Type.GetGenericParameterConstraints%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="96bec-1074">When the program executes, the constraints are examined using the <xref:System.Type.GenericParameterAttributes%2A> property and the <xref:System.Type.GetGenericParameterConstraints%2A> method.</span></span>  
  
 [!code-cpp[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/CPP/source.cpp#1)]
 [!code-csharp[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/CS/source.cs#1)]
 [!code-vb[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="96bec-1075">The current <see cref="T:System.Type" /> object is not a generic type parameter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1075">The current <see cref="T:System.Type" /> object is not a generic type parameter.</span>
          </span>
          <span data-ttu-id="96bec-1076">That is, the <see cref="P:System.Type.IsGenericParameter" /> property returns <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1076">That is, the <see cref="P:System.Type.IsGenericParameter" /> property returns <see langword="false" />.</span>
          </span>
        </exception>
        <altmember cref="P:System.Type.GenericParameterAttributes" />
        <altmember cref="P:System.Type.IsGenericParameter" />
      </Docs>
    </Member>
    <Member MemberName="GetGenericTypeDefinition">
      <MemberSignature Language="C#" Value="public virtual Type GetGenericTypeDefinition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetGenericTypeDefinition() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetGenericTypeDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGenericTypeDefinition () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetGenericTypeDefinition();" />
      <MemberSignature Language="F#" Value="abstract member GetGenericTypeDefinition : unit -&gt; Type&#xA;override this.GetGenericTypeDefinition : unit -&gt; Type" Usage="type.GetGenericTypeDefinition " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="96bec-1077">Returns a <see cref="T:System.Type" /> object that represents a generic type definition from which the current generic type can be constructed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1077">Returns a <see cref="T:System.Type" /> object that represents a generic type definition from which the current generic type can be constructed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-1078">A <see cref="T:System.Type" /> object representing a generic type from which the current type can be constructed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1078">A <see cref="T:System.Type" /> object representing a generic type from which the current type can be constructed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-1079">Eine generische Typdefinition ist eine Vorlage aus der anderen Typen konstruiert werden können.</span><span class="sxs-lookup"><span data-stu-id="96bec-1079">A generic type definition is a template from which other types can be constructed.</span></span> <span data-ttu-id="96bec-1080">Z. B. von der generischen Typdefinition `G<T>` (ausgedrückt in C#-Syntax; `G(Of T)` in Visual Basic oder `generic <typename T> ref class G` in C++) können Sie zu erstellen und den Typ instanziieren `G<int>` (`G(Of Integer)` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="96bec-1080">For example, from the generic type definition `G<T>` (expressed in C# syntax; `G(Of T)` in Visual Basic or `generic <typename T> ref class G` in C++) you can construct and instantiate the type `G<int>` (`G(Of Integer)` in Visual Basic).</span></span> <span data-ttu-id="96bec-1081">Erhält eine <xref:System.Type> Objekt, das diese darstellt konstruierter Typ, der <xref:System.Type.GetGenericTypeDefinition%2A> Methode gibt zurück, die generische Typdefinition.</span><span class="sxs-lookup"><span data-stu-id="96bec-1081">Given a <xref:System.Type> object representing this constructed type, the <xref:System.Type.GetGenericTypeDefinition%2A> method returns the generic type definition.</span></span>  
  
 <span data-ttu-id="96bec-1082">Wenn zwei konstruierte Typen aus der gleichen generischen Typdefinition erstellt werden, verwenden Sie die gleichen Argumenten des Typs, der <xref:System.Type.GetGenericTypeDefinition%2A> Methode gibt denselben Wert zurück <xref:System.Type> -Objekt für beide Typen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1082">If two constructed types are created from the same generic type definition, using the same type arguments, the <xref:System.Type.GetGenericTypeDefinition%2A> method returns the same <xref:System.Type> object for both types.</span></span>  
  
 <span data-ttu-id="96bec-1083">Aufrufen der <xref:System.Type.GetGenericTypeDefinition%2A> Methode für eine <xref:System.Type> -Objekt, das bereits eine Definition eines generischen Typs darstellt wird die aktuelle <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="96bec-1083">If you call the <xref:System.Type.GetGenericTypeDefinition%2A> method on a <xref:System.Type> object that already represents a generic type definition, it returns the current <xref:System.Type>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="96bec-1084">Ein Array von generischen Typen ist selbst nicht generisch.</span><span class="sxs-lookup"><span data-stu-id="96bec-1084">An array of generic types is not itself generic.</span></span> <span data-ttu-id="96bec-1085">In der C#-Code `A<int>[] v;` oder Visual Basic-Code `Dim v() As A(Of Integer)`, den Typ der Variable `v` ist nicht generisch.</span><span class="sxs-lookup"><span data-stu-id="96bec-1085">In the C# code `A<int>[] v;` or the Visual Basic code `Dim v() As A(Of Integer)`, the type of variable `v` is not generic.</span></span> <span data-ttu-id="96bec-1086">Verwendung <xref:System.Type.IsGenericType%2A> zu bestimmen, ob ein Typ generisch ist, vor dem Aufruf ist <xref:System.Type.GetGenericTypeDefinition%2A>.</span><span class="sxs-lookup"><span data-stu-id="96bec-1086">Use <xref:System.Type.IsGenericType%2A> to determine whether a type is generic before calling <xref:System.Type.GetGenericTypeDefinition%2A>.</span></span>  
  
 <span data-ttu-id="96bec-1087">Eine Liste der invarianten Bedingungen für Begriffe, für Begriffe, die für die Reflektion mit generischen Methoden verwendet werden, finden Sie in den Hinweisen zur Eigenschaft <xref:System.Type.IsGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="96bec-1087">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-1088">Das folgende Codebeispiel erstellt eine Instanz eines konstruierten Typs mit normalen instanzerstellung und verwendet dann die <xref:System.Type.GetType%2A> und <xref:System.Type.GetGenericTypeDefinition%2A> Methoden zum Abrufen der konstruierte Typ und die generische Typdefinition.</span><span class="sxs-lookup"><span data-stu-id="96bec-1088">The following code example creates an instance of a constructed type by using ordinary instance creation and then uses the <xref:System.Type.GetType%2A> and <xref:System.Type.GetGenericTypeDefinition%2A> methods to retrieve the constructed type and the generic type definition.</span></span> <span data-ttu-id="96bec-1089">In diesem Beispiel verwendet den generischen <xref:System.Collections.Generic.Dictionary%602> ein, der den konstruierten Typ darstellt eine <xref:System.Collections.Generic.Dictionary%602> von `Test` Objekte mit Zeichenfolgenschlüsseln.</span><span class="sxs-lookup"><span data-stu-id="96bec-1089">This example uses the generic <xref:System.Collections.Generic.Dictionary%602> type; the constructed type represents a <xref:System.Collections.Generic.Dictionary%602> of `Test` objects with string keys.</span></span>  
  
 [!code-cpp[System.Type.GetGenericTypeDefinition#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.GetGenericTypeDefinition/CPP/source.cpp#1)]
 [!code-csharp[System.Type.GetGenericTypeDefinition#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.GetGenericTypeDefinition/CS/source.cs#1)]
 [!code-vb[System.Type.GetGenericTypeDefinition#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.GetGenericTypeDefinition/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="96bec-1090">The current type is not a generic type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1090">The current type is not a generic type.</span>
          </span>
          <span data-ttu-id="96bec-1091">That is, <see cref="P:System.Type.IsGenericType" /> returns <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1091">That is, <see cref="P:System.Type.IsGenericType" /> returns <see langword="false" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="96bec-1092">The invoked method is not supported in the base class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1092">The invoked method is not supported in the base class.</span>
          </span>
          <span data-ttu-id="96bec-1093">Derived classes must provide an implementation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1093">Derived classes must provide an implementation.</span>
          </span>
        </exception>
        <altmember cref="M:System.Type.MakeGenericType(System.Type[])" />
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="P:System.Type.IsGenericTypeDefinition" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="type.GetHashCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetHashCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="96bec-1094">Returns the hash code for this instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1094">Returns the hash code for this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-1095">The hash code for this instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1095">The hash code for this instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-1096">Diese Methode überschreibt <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="96bec-1096">This method overrides <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-1097">Das folgende Beispiel zeigt den Hashcode der `System.Windows.Forms.Button` Klasse.</span><span class="sxs-lookup"><span data-stu-id="96bec-1097">The following example displays the hash code of the `System.Windows.Forms.Button` class.</span></span>  
  
 [!code-cpp[Type_GetHashCode_GetFields#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetHashCode_GetFields/CPP/type_gethashcode_getfields.cpp#1)]
 [!code-csharp[Type_GetHashCode_GetFields#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetHashCode_GetFields/CS/type_gethashcode_getfields.cs#1)]
 [!code-vb[Type_GetHashCode_GetFields#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetHashCode_GetFields/VB/type_gethashcode_getfields.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetInterface">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-1098">Gets a specific interface implemented or inherited by the current <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1098">Gets a specific interface implemented or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInterface">
      <MemberSignature Language="C#" Value="public Type GetInterface (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetInterface(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetInterface(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInterface (name As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetInterface(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetInterface : string -&gt; Type&#xA;override this.GetInterface : string -&gt; Type" Usage="type.GetInterface name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetInterface(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="96bec-1099">The string containing the name of the interface to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1099">The string containing the name of the interface to get.</span>
          </span>
          <span data-ttu-id="96bec-1100">For generic interfaces, this is the mangled name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1100">For generic interfaces, this is the mangled name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-1101">Searches for the interface with the specified name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1101">Searches for the interface with the specified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-1102">An object representing the interface with the specified name, implemented or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1102">An object representing the interface with the specified name, implemented or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-1103">Die Suche nach `name` Groß-/Kleinschreibung beachtet wird.</span><span class="sxs-lookup"><span data-stu-id="96bec-1103">The search for `name` is case-sensitive.</span></span>  
  
 <span data-ttu-id="96bec-1104">Wenn die aktuelle <xref:System.Type> einen konstruierten generischen Typ darstellt, gibt diese Methode die <xref:System.Type> mit den Typparametern, die durch die entsprechenden Typargumente ersetzt.</span><span class="sxs-lookup"><span data-stu-id="96bec-1104">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Type> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="96bec-1105">Wenn die aktuelle <xref:System.Type> stellt ein Typparameter in der Definition eines generischen Typs oder generische Methode, diese Methode durchsucht, die schnittstelleneinschränkungen und alle Schnittstellen, die von der Klasse oder Schnittstelle Einschränkungen geerbt.</span><span class="sxs-lookup"><span data-stu-id="96bec-1105">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the interface constraints and any interfaces inherited from class or interface constraints.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-1106">Bei generischen Schnittstellen die `name` -Parameter ist der ergänzte Name, endend mit einem Graviszeichen (\`) und die Anzahl von Typparametern.</span><span class="sxs-lookup"><span data-stu-id="96bec-1106">For generic interfaces, the `name` parameter is the mangled name, ending with a grave accent (\`) and the number of type parameters.</span></span> <span data-ttu-id="96bec-1107">Dies gilt für sowohl die generische Schnittstellendefinitionen als auch die konstruierte generische Schnittstellen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1107">This is true for both generic interface definitions and constructed generic interfaces.</span></span> <span data-ttu-id="96bec-1108">Beispielsweise, um suchen `IExample<T>` (`IExample(Of T)` in Visual Basic) oder `IExample<string>` (`IExample(Of String)` in Visual Basic), suchen Sie nach ``"IExample`1"``.</span><span class="sxs-lookup"><span data-stu-id="96bec-1108">For example, to find `IExample<T>` (`IExample(Of T)` in Visual Basic) or `IExample<string>` (`IExample(Of String)` in Visual Basic), search for ``"IExample`1"``.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-1109">Im folgenden Codebeispiel wird die <xref:System.Type.GetInterface%28System.String%29> Methode zum Suchen der <xref:System.Collections.Hashtable> -Klasse für die <xref:System.Runtime.Serialization.IDeserializationCallback> -Schnittstelle und Listen die Methoden der Schnittstelle.</span><span class="sxs-lookup"><span data-stu-id="96bec-1109">The following code example uses the <xref:System.Type.GetInterface%28System.String%29> method to search the <xref:System.Collections.Hashtable> class for the <xref:System.Runtime.Serialization.IDeserializationCallback> interface, and lists the methods of the interface.</span></span>  
  
 <span data-ttu-id="96bec-1110">Im Codebeispiel wird veranschaulicht, die auch die <xref:System.Type.GetInterface%28System.String%2CSystem.Boolean%29> -methodenüberladung, und die <xref:System.Type.GetInterfaceMap%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="96bec-1110">The code example also demonstrates the <xref:System.Type.GetInterface%28System.String%2CSystem.Boolean%29> method overload and the <xref:System.Type.GetInterfaceMap%2A> method.</span></span>  
  
 [!code-cpp[Type_GetInterface#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetInterface/CPP/type_getinterface.cpp#1)]
 [!code-csharp[Type_GetInterface#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetInterface/CS/type_getinterface.cs#1)]
 [!code-vb[Type_GetInterface#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetInterface/VB/type_getinterface.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96bec-1111">
            <paramref name="name" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1111">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="96bec-1112">The current <see cref="T:System.Type" /> represents a type that implements the same generic interface with different type arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1112">The current <see cref="T:System.Type" /> represents a type that implements the same generic interface with different type arguments.</span>
          </span>
        </exception>
        <altmember cref="T:System.String" />
        <altmember cref="M:System.Type.GetInterfaces" />
        <altmember cref="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetInterface">
      <MemberSignature Language="C#" Value="public abstract Type GetInterface (string name, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetInterface(string name, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetInterface(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetInterface (name As String, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Type ^ GetInterface(System::String ^ name, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="abstract member GetInterface : string * bool -&gt; Type" Usage="type.GetInterface (name, ignoreCase)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetInterface(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="96bec-1113">The string containing the name of the interface to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1113">The string containing the name of the interface to get.</span>
          </span>
          <span data-ttu-id="96bec-1114">For generic interfaces, this is the mangled name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1114">For generic interfaces, this is the mangled name.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="96bec-1115">
            <see langword="true" /> to ignore the case of that part of <c>name</c> that specifies the simple interface name (the part that specifies the namespace must be correctly cased).</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1115">
              <see langword="true" /> to ignore the case of that part of <c>name</c> that specifies the simple interface name (the part that specifies the namespace must be correctly cased).</span>
          </span>
          <span data-ttu-id="96bec-1116">-or-  <see langword="false" /> to perform a case-sensitive search for all parts of <c>name</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1116">-or-  <see langword="false" /> to perform a case-sensitive search for all parts of <c>name</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-1117">When overridden in a derived class, searches for the specified interface, specifying whether to do a case-insensitive search for the interface name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1117">When overridden in a derived class, searches for the specified interface, specifying whether to do a case-insensitive search for the interface name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-1118">An object representing the interface with the specified name, implemented or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1118">An object representing the interface with the specified name, implemented or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-1119">Die `ignoreCase` Parameter gilt nur für den einfachen Schnittstellennamen, nicht für den Namespace.</span><span class="sxs-lookup"><span data-stu-id="96bec-1119">The `ignoreCase` parameter applies only to the simple interface name, not to the namespace.</span></span> <span data-ttu-id="96bec-1120">Der Teil des `name` , die angibt, der Namespace muss die Groß-/Kleinschreibung, oder die Schnittstelle wird nicht gefunden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1120">The portion of `name` that specifies the namespace must have the correct case, or the interface will not be found.</span></span> <span data-ttu-id="96bec-1121">Z. B. die Zeichenfolge "System.icomparable" sucht nach dem <xref:System.IComparable> -Schnittstelle, die Zeichenfolge "system.icomparable" hingegen nicht.</span><span class="sxs-lookup"><span data-stu-id="96bec-1121">For example, the string "System.icomparable" finds the <xref:System.IComparable> interface, but the string "system.icomparable" does not.</span></span>  
  
 <span data-ttu-id="96bec-1122">Wenn die aktuelle <xref:System.Type> einen konstruierten generischen Typ darstellt, gibt diese Methode die <xref:System.Type> mit den Typparametern, die durch die entsprechenden Typargumente ersetzt.</span><span class="sxs-lookup"><span data-stu-id="96bec-1122">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Type> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="96bec-1123">Wenn die aktuelle <xref:System.Type> stellt ein Typparameter in der Definition eines generischen Typs oder generische Methode, diese Methode durchsucht, die schnittstelleneinschränkungen und alle Schnittstellen, die von der Klasse oder Schnittstelle Einschränkungen geerbt.</span><span class="sxs-lookup"><span data-stu-id="96bec-1123">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the interface constraints and any interfaces inherited from class or interface constraints.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-1124">Bei generischen Schnittstellen die `name` -Parameter ist der ergänzte Name, endend mit einem Graviszeichen (\`) und die Anzahl von Typparametern.</span><span class="sxs-lookup"><span data-stu-id="96bec-1124">For generic interfaces, the `name` parameter is the mangled name, ending with a grave accent (\`) and the number of type parameters.</span></span> <span data-ttu-id="96bec-1125">Dies gilt für sowohl die generische Schnittstellendefinitionen als auch die konstruierte generische Schnittstellen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1125">This is true for both generic interface definitions and constructed generic interfaces.</span></span> <span data-ttu-id="96bec-1126">Beispielsweise, um suchen `IExample<T>` (`IExample(Of T)` in Visual Basic) oder `IExample<string>` (`IExample(Of String)` in Visual Basic), suchen Sie nach `"IExample`1"".</span><span class="sxs-lookup"><span data-stu-id="96bec-1126">For example, to find `IExample<T>` (`IExample(Of T)` in Visual Basic) or `IExample<string>` (`IExample(Of String)` in Visual Basic), search for `"IExample`1"\`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-1127">Im folgenden Codebeispiel wird die <xref:System.Type.GetInterface%28System.String%2CSystem.Boolean%29> Methode zum Durchführen einer Suche in Groß-/Kleinschreibung der <xref:System.Collections.Hashtable> -Klasse für die <xref:System.Collections.IEnumerable> Schnittstelle.</span><span class="sxs-lookup"><span data-stu-id="96bec-1127">The following code example uses the <xref:System.Type.GetInterface%28System.String%2CSystem.Boolean%29> method to perform a case-insensitive search of the <xref:System.Collections.Hashtable> class for the <xref:System.Collections.IEnumerable> interface.</span></span>  
  
 <span data-ttu-id="96bec-1128">Im Codebeispiel wird veranschaulicht, die auch die <xref:System.Type.GetInterface%28System.String%29> -methodenüberladung, und die <xref:System.Type.GetInterfaceMap%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="96bec-1128">The code example also demonstrates the <xref:System.Type.GetInterface%28System.String%29> method overload and the <xref:System.Type.GetInterfaceMap%2A> method.</span></span>  
  
 [!code-cpp[Type_GetInterface#2](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetInterface/CPP/type_getinterface.cpp#2)]
 [!code-csharp[Type_GetInterface#2](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetInterface/CS/type_getinterface.cs#2)]
 [!code-vb[Type_GetInterface#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetInterface/VB/type_getinterface.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96bec-1129">
            <paramref name="name" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1129">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="96bec-1130">The current <see cref="T:System.Type" /> represents a type that implements the same generic interface with different type arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1130">The current <see cref="T:System.Type" /> represents a type that implements the same generic interface with different type arguments.</span>
          </span>
        </exception>
        <altmember cref="T:System.String" />
        <altmember cref="M:System.Type.GetInterfaces" />
        <altmember cref="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetInterfaceMap">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.InterfaceMapping GetInterfaceMap (Type interfaceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Reflection.InterfaceMapping GetInterfaceMap(class System.Type interfaceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetInterfaceMap(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetInterfaceMap (interfaceType As Type) As InterfaceMapping" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::InterfaceMapping GetInterfaceMap(Type ^ interfaceType);" />
      <MemberSignature Language="F#" Value="abstract member GetInterfaceMap : Type -&gt; System.Reflection.InterfaceMapping&#xA;override this.GetInterfaceMap : Type -&gt; System.Reflection.InterfaceMapping" Usage="type.GetInterfaceMap interfaceType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetInterfaceMap(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.InterfaceMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interfaceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="interfaceType">
          <span data-ttu-id="96bec-1131">The interface type to retrieve a mapping for.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1131">The interface type to retrieve a mapping for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-1132">Returns an interface mapping for the specified interface type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1132">Returns an interface mapping for the specified interface type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-1133">An object that represents the interface mapping for <paramref name="interfaceType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1133">An object that represents the interface mapping for <paramref name="interfaceType" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-1134">Die schnittstellenzuordnung gibt an, wie eine Schnittstelle in die tatsächlichen Mitglieder in einer Klasse zugeordnet ist, das diese Schnittstelle implementiert.</span><span class="sxs-lookup"><span data-stu-id="96bec-1134">The interface map denotes how an interface is mapped into the actual members on a class that implements that interface.</span></span>  
  
 <span data-ttu-id="96bec-1135">Wenn die aktuelle <xref:System.Type> einen konstruierten generischen Typ darstellt, Parameter, durch die entsprechenden Typargumente in den Elementen des ersetzt werden, Typs der <xref:System.Reflection.InterfaceMapping> von dieser Methode zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-1135">If the current <xref:System.Type> represents a constructed generic type, type parameters are replaced by the appropriate type arguments in the elements of the <xref:System.Reflection.InterfaceMapping> returned by this method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-1136">Im folgenden Beispiel wird die <xref:System.Type.GetInterfaceMap%2A> Methode, um zu bestimmen, wie die <xref:System.IFormatProvider> Schnittstelle ordnet <xref:System.Globalization.CultureInfo> Methoden, und wie die <xref:System.IAppDomainSetup> Schnittstelle zugeordnet <xref:System.AppDomainSetup> Eigenschaften.</span><span class="sxs-lookup"><span data-stu-id="96bec-1136">The following example calls the <xref:System.Type.GetInterfaceMap%2A> method to determine how the <xref:System.IFormatProvider> interface maps to <xref:System.Globalization.CultureInfo> methods, and how the <xref:System.IAppDomainSetup> interface maps to <xref:System.AppDomainSetup> properties.</span></span> <span data-ttu-id="96bec-1137">Beachten Sie, dass, weil die <xref:System.IAppDomainSetup> Schnittstelle definiert einen Satz von Eigenschaften, die zurückgegebene <xref:System.Reflection.InterfaceMapping> Objekt enthält separate <xref:System.Reflection.MethodInfo> Objekte für eine Eigenschaft Get und Set-Accessoren.</span><span class="sxs-lookup"><span data-stu-id="96bec-1137">Note that, because the <xref:System.IAppDomainSetup> interface defines a set of properties, the returned <xref:System.Reflection.InterfaceMapping> object includes separate <xref:System.Reflection.MethodInfo> objects for a property's get and set accessors.</span></span>  
  
 [!code-csharp[System.Type.GetInterfaceMap#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.getinterfacemap/cs/interfacemapping1.cs#1)]
 [!code-vb[System.Type.GetInterfaceMap#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.getinterfacemap/vb/interfacemapping1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="96bec-1138">
            <paramref name="interfaceType" /> is not implemented by the current type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1138">
              <paramref name="interfaceType" /> is not implemented by the current type.</span>
          </span>
          <span data-ttu-id="96bec-1139">-or-  The <paramref name="interfaceType" /> parameter does not refer to an interface.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1139">-or-  The <paramref name="interfaceType" /> parameter does not refer to an interface.</span>
          </span>
          <span data-ttu-id="96bec-1140">-or-  <paramref name="interfaceType" /> is a generic interface, and the current type is an array type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1140">-or-  <paramref name="interfaceType" /> is a generic interface, and the current type is an array type.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96bec-1141">
            <paramref name="interfaceType" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1141">
              <paramref name="interfaceType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="96bec-1142">The current <see cref="T:System.Type" /> represents a generic type parameter; that is, <see cref="P:System.Type.IsGenericParameter" /> is <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1142">The current <see cref="T:System.Type" /> represents a generic type parameter; that is, <see cref="P:System.Type.IsGenericParameter" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="96bec-1143">The invoked method is not supported in the base class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1143">The invoked method is not supported in the base class.</span>
          </span>
          <span data-ttu-id="96bec-1144">Derived classes must provide an implementation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1144">Derived classes must provide an implementation.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.InterfaceMapping" />
      </Docs>
    </Member>
    <Member MemberName="GetInterfaces">
      <MemberSignature Language="C#" Value="public abstract Type[] GetInterfaces ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetInterfaces() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetInterfaces" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetInterfaces () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;Type ^&gt; ^ GetInterfaces();" />
      <MemberSignature Language="F#" Value="abstract member GetInterfaces : unit -&gt; Type[]" Usage="type.GetInterfaces " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetInterfaces</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="96bec-1145">When overridden in a derived class, gets all the interfaces implemented or inherited by the current <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1145">When overridden in a derived class, gets all the interfaces implemented or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-1146">An array of <see cref="T:System.Type" /> objects representing all the interfaces implemented or inherited by the current <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1146">An array of <see cref="T:System.Type" /> objects representing all the interfaces implemented or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="96bec-1147">-or-  An empty array of type <see cref="T:System.Type" />, if no interfaces are implemented or inherited by the current <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1147">-or-  An empty array of type <see cref="T:System.Type" />, if no interfaces are implemented or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-1148">Die <xref:System.Type.GetInterfaces%2A> Methode nicht zurückgegeben Schnittstellen in einer bestimmten Reihenfolge, z. B. alphabetische oder Reihenfolge der Deklaration.</span><span class="sxs-lookup"><span data-stu-id="96bec-1148">The <xref:System.Type.GetInterfaces%2A> method does not return interfaces in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="96bec-1149">Ihr Code muss nicht abhängig von der Reihenfolge, in der Schnittstellen zurückgegeben werden, da, die variieren kann.</span><span class="sxs-lookup"><span data-stu-id="96bec-1149">Your code must not depend on the order in which interfaces are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="96bec-1150">Wenn die aktuelle <xref:System.Type> einen konstruierten generischen Typ darstellt, gibt diese Methode die <xref:System.Type> Objekte mit den Typparametern, die durch die entsprechenden Typargumente ersetzt.</span><span class="sxs-lookup"><span data-stu-id="96bec-1150">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Type> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="96bec-1151">Wenn die aktuelle <xref:System.Type> stellt ein Typparameter in der Definition eines generischen Typs oder generische Methode, diese Methode durchsucht, die schnittstelleneinschränkungen und alle Schnittstellen, die von der Klasse oder Schnittstelle Einschränkungen geerbt.</span><span class="sxs-lookup"><span data-stu-id="96bec-1151">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the interface constraints and any interfaces inherited from class or interface constraints.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-1152">Im folgenden Beispiel ruft den Typ der angegebenen Klasse ab und zeigt alle Schnittstellen, die der Typ implementiert oder erbt.</span><span class="sxs-lookup"><span data-stu-id="96bec-1152">The following example gets the type of the specified class and displays all the interfaces that the type implements or inherits.</span></span> <span data-ttu-id="96bec-1153">Verwenden Sie die folgenden Compilerbefehle zum Kompilieren der Visual Basic-Beispiel:</span><span class="sxs-lookup"><span data-stu-id="96bec-1153">To compile the Visual Basic example, use the following compiler commands:</span></span>  
  
 `vbc type_getinterfaces1.vb /r:System.Web.dll /r:System.dll`  
  
 [!code-cpp[Type_GetInterfaces1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetInterfaces1/CPP/type_getinterfaces1.cpp#1)]
 [!code-csharp[Type_GetInterfaces1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetInterfaces1/CS/type_getinterfaces1.cs#1)]
 [!code-vb[Type_GetInterfaces1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetInterfaces1/VB/type_getinterfaces1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="96bec-1154">A static initializer is invoked and throws an exception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1154">A static initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <altmember cref="M:System.Type.GetInterface(System.String)" />
        <altmember cref="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMember">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-1155">Gets the specified members of the current <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1155">Gets the specified members of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetMember (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMember(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMember(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMember (name As String) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetMember : string -&gt; System.Reflection.MemberInfo[]&#xA;override this.GetMember : string -&gt; System.Reflection.MemberInfo[]" Usage="type.GetMember name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMember(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="96bec-1156">The string containing the name of the public members to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1156">The string containing the name of the public members to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-1157">Searches for the public members with the specified name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1157">Searches for the public members with the specified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-1158">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1158">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-1159">Die Suche nach `name` Groß-/Kleinschreibung beachtet wird.</span><span class="sxs-lookup"><span data-stu-id="96bec-1159">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="96bec-1160">Die Suche enthält öffentliche statisch und öffentlich Instanzmember.</span><span class="sxs-lookup"><span data-stu-id="96bec-1160">The search includes public static and public instance members.</span></span>  
  
 <span data-ttu-id="96bec-1161">Mitglieder enthalten Eigenschaften, Methoden, Felder, Ereignisse und So weiter.</span><span class="sxs-lookup"><span data-stu-id="96bec-1161">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="96bec-1162">Die <xref:System.Type.GetMember%2A> Methode nicht zurückgegeben Member in einer bestimmten Reihenfolge, z. B. alphabetische oder Reihenfolge der Deklaration.</span><span class="sxs-lookup"><span data-stu-id="96bec-1162">The <xref:System.Type.GetMember%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="96bec-1163">Ihr Code muss nicht abhängig von der Reihenfolge, in der Elemente zurückgegeben werden, da, die variieren kann.</span><span class="sxs-lookup"><span data-stu-id="96bec-1163">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="96bec-1164">Diese methodenüberladung wird Klasseninitialisierer (.cctor) nicht gefunden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1164">This method overload will not find class initializers (.cctor).</span></span> <span data-ttu-id="96bec-1165">Um Klasseninitialisierer zu ermitteln, verwenden Sie eine Überladung mit <xref:System.Reflection.BindingFlags>, und geben Sie <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="96bec-1165">To find class initializers, use an overload that takes <xref:System.Reflection.BindingFlags>, and specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="96bec-1166">Erhalten Sie auch die klasseninitialisierung verwenden die <xref:System.Type.TypeInitializer%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="96bec-1166">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="96bec-1167">Die folgende Tabelle zeigt, welche Member einer Basisklasse von zurückgegeben werden die `Get` Methoden ein, wenn für einen Typ reflektieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-1167">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="96bec-1168">Memberart</span><span class="sxs-lookup"><span data-stu-id="96bec-1168">Member Type</span></span>|<span data-ttu-id="96bec-1169">Statisch</span><span class="sxs-lookup"><span data-stu-id="96bec-1169">Static</span></span>|<span data-ttu-id="96bec-1170">Nicht statische</span><span class="sxs-lookup"><span data-stu-id="96bec-1170">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="96bec-1171">Konstruktor</span><span class="sxs-lookup"><span data-stu-id="96bec-1171">Constructor</span></span>|<span data-ttu-id="96bec-1172">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-1172">No</span></span>|<span data-ttu-id="96bec-1173">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-1173">No</span></span>|  
|<span data-ttu-id="96bec-1174">Feld</span><span class="sxs-lookup"><span data-stu-id="96bec-1174">Field</span></span>|<span data-ttu-id="96bec-1175">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-1175">No</span></span>|<span data-ttu-id="96bec-1176">Ja.</span><span class="sxs-lookup"><span data-stu-id="96bec-1176">Yes.</span></span> <span data-ttu-id="96bec-1177">Ein Feld ist immer nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1177">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="96bec-1178">event</span><span class="sxs-lookup"><span data-stu-id="96bec-1178">Event</span></span>|<span data-ttu-id="96bec-1179">Nicht zutreffend</span><span class="sxs-lookup"><span data-stu-id="96bec-1179">Not applicable</span></span>|<span data-ttu-id="96bec-1180">Die allgemeinen Typsystem ist, dass die Vererbung ist identisch mit der Methoden, die die Eigenschaft zu implementieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-1180">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="96bec-1181">Reflektion behandelt Eigenschaften als nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1181">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-1182">Siehe Hinweis 2 weiter unten.</span><span class="sxs-lookup"><span data-stu-id="96bec-1182">See note 2 below.</span></span>|  
|<span data-ttu-id="96bec-1183">Methode</span><span class="sxs-lookup"><span data-stu-id="96bec-1183">Method</span></span>|<span data-ttu-id="96bec-1184">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-1184">No</span></span>|<span data-ttu-id="96bec-1185">Ja.</span><span class="sxs-lookup"><span data-stu-id="96bec-1185">Yes.</span></span> <span data-ttu-id="96bec-1186">Eine Methode (virtuelle und nicht virtuelle) möglich Ausblenden nach Namen oder nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1186">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="96bec-1187">Geschachtelter Typ</span><span class="sxs-lookup"><span data-stu-id="96bec-1187">Nested Type</span></span>|<span data-ttu-id="96bec-1188">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-1188">No</span></span>|<span data-ttu-id="96bec-1189">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-1189">No</span></span>|  
|<span data-ttu-id="96bec-1190">Eigenschaft</span><span class="sxs-lookup"><span data-stu-id="96bec-1190">Property</span></span>|<span data-ttu-id="96bec-1191">Nicht zutreffend</span><span class="sxs-lookup"><span data-stu-id="96bec-1191">Not applicable</span></span>|<span data-ttu-id="96bec-1192">Die allgemeinen Typsystem ist, dass die Vererbung ist identisch mit der Methoden, die die Eigenschaft zu implementieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-1192">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="96bec-1193">Reflektion behandelt Eigenschaften als nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1193">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-1194">Siehe Hinweis 2 weiter unten.</span><span class="sxs-lookup"><span data-stu-id="96bec-1194">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="96bec-1195">Nach Name und Signatur ausblenden berücksichtigt, dass alle Teile der Signatur, die benutzerdefinierten Modifizierer, einschließlich Typen, Parametertypen, Sentinels enthält und nicht verwaltete Aufrufkonventionen zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-1195">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="96bec-1196">Dies ist ein binärer Vergleich.</span><span class="sxs-lookup"><span data-stu-id="96bec-1196">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="96bec-1197">Für die Reflektion sind die Eigenschaften und Ereignisse nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1197">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-1198">Wenn Sie eine Eigenschaft mit dem ein Get und Set-Accessor in der Basisklasse haben, aber die abgeleitete Klasse nur einen Get-Accessor hat, die Eigenschaft der abgeleiteten Klasse blendet die Basisklasseneigenschaft aus, und nicht werden auf den Setter in der Basisklasse zugreifen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1198">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="96bec-1199">Benutzerdefinierte Attribute sind nicht Teil des allgemeinen Typsystems.</span><span class="sxs-lookup"><span data-stu-id="96bec-1199">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="96bec-1200">Wenn die aktuelle <xref:System.Type> einen konstruierten generischen Typ darstellt, gibt diese Methode die <xref:System.Reflection.MemberInfo> mit den Typparametern, die durch die entsprechenden Typargumente ersetzt.</span><span class="sxs-lookup"><span data-stu-id="96bec-1200">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="96bec-1201">Wenn die aktuelle <xref:System.Type> stellt ein Typparameter in der Definition eines generischen Typs oder generische Methode, diese Methode sucht, die Mitglieder der Class-Einschränkung oder die Mitglieder der <xref:System.Object> liegt keine klasseneinschränkung.</span><span class="sxs-lookup"><span data-stu-id="96bec-1201">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-1202">Für generische Methoden enthalten nicht die Typargumente in `name`.</span><span class="sxs-lookup"><span data-stu-id="96bec-1202">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="96bec-1203">Z. B. der C#-Code `GetMember("MyMethod<int>")` sucht ein Element mit dem Textnamen "`MyMethod<int>`", und nicht für eine Methode namens `MyMethod` Listenfeldsteuerelement mit einem generisches Argument des Typs `int`.</span><span class="sxs-lookup"><span data-stu-id="96bec-1203">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-1204">Das folgende Beispiel zeigt alle Member der `String` -Klasse, die mit dem Buchstaben c beginnen</span><span class="sxs-lookup"><span data-stu-id="96bec-1204">The following example displays all the members of the `String` class that start with the letter C.</span></span>  
  
 [!code-cpp[Type_GetMember#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMember/CPP/type_getmember.cpp#1)]
 [!code-csharp[Type_GetMember#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMember/CS/type_getmember.cs#1)]
 [!code-vb[Type_GetMember#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMember/VB/type_getmember.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96bec-1205">
            <paramref name="name" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1205">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMembers" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMember(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMember (name As String, bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMember : string * System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]&#xA;override this.GetMember : string * System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]" Usage="type.GetMember (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMember(System.String,System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetMember(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="96bec-1206">The string containing the name of the members to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1206">The string containing the name of the members to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="96bec-1207">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1207">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="96bec-1208">-or-  Zero, to return an empty array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1208">-or-  Zero, to return an empty array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-1209">Searches for the specified members, using the specified binding constraints.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1209">Searches for the specified members, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-1210">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1210">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-1211">Diese Methode kann von einer abgeleiteten Klasse überschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1211">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="96bec-1212">Mitglieder enthalten Eigenschaften, Methoden, Felder, Ereignisse und So weiter.</span><span class="sxs-lookup"><span data-stu-id="96bec-1212">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="96bec-1213">Die <xref:System.Type.GetMember%2A> Methode nicht zurückgegeben Member in einer bestimmten Reihenfolge, z. B. alphabetische oder Reihenfolge der Deklaration.</span><span class="sxs-lookup"><span data-stu-id="96bec-1213">The <xref:System.Type.GetMember%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="96bec-1214">Ihr Code muss nicht abhängig von der Reihenfolge, in der Elemente zurückgegeben werden, da, die variieren kann.</span><span class="sxs-lookup"><span data-stu-id="96bec-1214">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="96bec-1215">Die folgenden <xref:System.Reflection.BindingFlags> Filterflags können verwendet werden, auf welche Member in die Suche einbezogen werden:</span><span class="sxs-lookup"><span data-stu-id="96bec-1215">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="96bec-1216">Geben Sie `BindingFlags.Instance` oder `BindingFlags.Static` um ein Ergebnis zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-1216">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="96bec-1217">Geben Sie `BindingFlags.Public` öffentliche Mitglieder in die Suche eingeschlossen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1217">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="96bec-1218">Geben Sie `BindingFlags.NonPublic` nicht öffentliche Mitglieder (d. h. private, interne und geschützte Member) in die Suche eingeschlossen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1218">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span>  
  
-   <span data-ttu-id="96bec-1219">Geben Sie `BindingFlags.FlattenHierarchy` sollen `public` und `protected` statische Member der Hierarchie; `private` statische Member in geerbten Klassen sind nicht enthalten.</span><span class="sxs-lookup"><span data-stu-id="96bec-1219">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="96bec-1220">Die folgenden <xref:System.Reflection.BindingFlags> Modifiziererflags können verwendet werden, um die Funktionsweise der Suche ändern:</span><span class="sxs-lookup"><span data-stu-id="96bec-1220">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="96bec-1221">`BindingFlags.IgnoreCase` um die Groß-/Kleinschreibung ignorieren `name`.</span><span class="sxs-lookup"><span data-stu-id="96bec-1221">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="96bec-1222">`BindingFlags.DeclaredOnly` Suchen Sie nur die Member deklariert die <xref:System.Type>, nicht die Elemente, die nur geerbt wurden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1222">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="96bec-1223">Weitere Informationen finden Sie unter <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="96bec-1223">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="96bec-1224">Rufen Sie die klasseninitialisierung (.cctor) mithilfe der Überladung dieser Methode geben Sie ".cctor" für `name`, und <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic) für `bindingAttr`.</span><span class="sxs-lookup"><span data-stu-id="96bec-1224">To get the class initializer (.cctor) using this method overload, you must specify ".cctor" for `name`, and <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic) for `bindingAttr`.</span></span> <span data-ttu-id="96bec-1225">Erhalten Sie auch die klasseninitialisierung verwenden die <xref:System.Type.TypeInitializer%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="96bec-1225">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="96bec-1226">Wenn die aktuelle <xref:System.Type> einen konstruierten generischen Typ darstellt, gibt diese Methode die <xref:System.Reflection.MemberInfo> mit den Typparametern, die durch die entsprechenden Typargumente ersetzt.</span><span class="sxs-lookup"><span data-stu-id="96bec-1226">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="96bec-1227">Wenn die aktuelle <xref:System.Type> stellt ein Typparameter in der Definition eines generischen Typs oder generische Methode, diese Methode sucht, die Mitglieder der Class-Einschränkung oder die Mitglieder der <xref:System.Object> liegt keine klasseneinschränkung.</span><span class="sxs-lookup"><span data-stu-id="96bec-1227">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-1228">Für generische Methoden enthalten nicht die Typargumente in `name`.</span><span class="sxs-lookup"><span data-stu-id="96bec-1228">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="96bec-1229">Z. B. der C#-Code `GetMember("MyMethod<int>")` sucht ein Element mit dem Textnamen "`MyMethod<int>`", und nicht für eine Methode namens `MyMethod` Listenfeldsteuerelement mit einem generisches Argument des Typs `int`.</span><span class="sxs-lookup"><span data-stu-id="96bec-1229">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-1230">Das folgende Beispiel zeigt alle öffentlichen statischen Member von der `myString` -Klasse, die mit dem Buchstaben c beginnen</span><span class="sxs-lookup"><span data-stu-id="96bec-1230">The following example displays all the public static members of the `myString` class that start with the letter C.</span></span>  
  
 [!code-cpp[Type_GetMember#2](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMember/CPP/type_getmember.cpp#2)]
 [!code-csharp[Type_GetMember#2](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMember/CS/type_getmember.cs#2)]
 [!code-vb[Type_GetMember#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMember/VB/type_getmember.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96bec-1231">
            <paramref name="name" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1231">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMembers" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.MemberTypes type, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMember (name As String, type As MemberTypes, bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name, System::Reflection::MemberTypes type, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMember : string * System.Reflection.MemberTypes * System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]&#xA;override this.GetMember : string * System.Reflection.MemberTypes * System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]" Usage="type.GetMember (name, type, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="type" Type="System.Reflection.MemberTypes" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="96bec-1232">The string containing the name of the members to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1232">The string containing the name of the members to get.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="96bec-1233">The value to search for.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1233">The value to search for.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="96bec-1234">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1234">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="96bec-1235">-or-  Zero, to return an empty array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1235">-or-  Zero, to return an empty array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-1236">Searches for the specified members of the specified member type, using the specified binding constraints.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1236">Searches for the specified members of the specified member type, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-1237">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1237">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-1238">Mitglieder enthalten Eigenschaften, Methoden, Felder, Ereignisse und So weiter.</span><span class="sxs-lookup"><span data-stu-id="96bec-1238">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="96bec-1239">Die <xref:System.Type.GetMember%2A> Methode nicht zurückgegeben Member in einer bestimmten Reihenfolge, z. B. alphabetische oder Reihenfolge der Deklaration.</span><span class="sxs-lookup"><span data-stu-id="96bec-1239">The <xref:System.Type.GetMember%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="96bec-1240">Ihr Code muss nicht abhängig von der Reihenfolge, in der Elemente zurückgegeben werden, da, die variieren kann.</span><span class="sxs-lookup"><span data-stu-id="96bec-1240">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="96bec-1241">Die folgenden <xref:System.Reflection.BindingFlags> Filterflags können verwendet werden, auf welche Member in die Suche einbezogen werden:</span><span class="sxs-lookup"><span data-stu-id="96bec-1241">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="96bec-1242">Geben Sie `BindingFlags.Instance` oder `BindingFlags.Static` um ein Ergebnis zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-1242">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="96bec-1243">Geben Sie `BindingFlags.Public` öffentliche Mitglieder in die Suche eingeschlossen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1243">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="96bec-1244">Geben Sie `BindingFlags.NonPublic` nicht öffentliche Mitglieder (d. h. private, interne und geschützte Member) in die Suche eingeschlossen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1244">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span>  
  
-   <span data-ttu-id="96bec-1245">Geben Sie `BindingFlags.FlattenHierarchy` sollen `public` und `protected` statische Member der Hierarchie; `private` statische Member in geerbten Klassen sind nicht enthalten.</span><span class="sxs-lookup"><span data-stu-id="96bec-1245">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="96bec-1246">Die folgenden <xref:System.Reflection.BindingFlags> Modifiziererflags können verwendet werden, um die Funktionsweise der Suche ändern:</span><span class="sxs-lookup"><span data-stu-id="96bec-1246">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="96bec-1247">`BindingFlags.IgnoreCase` um die Groß-/Kleinschreibung ignorieren `name`.</span><span class="sxs-lookup"><span data-stu-id="96bec-1247">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="96bec-1248">`BindingFlags.DeclaredOnly` Suchen Sie nur die Member deklariert die <xref:System.Type>, nicht die Elemente, die nur geerbt wurden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1248">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="96bec-1249">Weitere Informationen finden Sie unter <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="96bec-1249">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="96bec-1250">Rufen Sie die klasseninitialisierung (.cctor) mithilfe der Überladung dieser Methode geben Sie ".cctor" für `name`, <xref:System.Reflection.MemberTypes.Constructor?displayProperty=nameWithType> für `type`, und <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic) für `bindingAttr`.</span><span class="sxs-lookup"><span data-stu-id="96bec-1250">To get the class initializer (.cctor) using this method overload, you must specify ".cctor" for `name`, <xref:System.Reflection.MemberTypes.Constructor?displayProperty=nameWithType> for `type`, and  <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic) for `bindingAttr`.</span></span> <span data-ttu-id="96bec-1251">Erhalten Sie auch die klasseninitialisierung verwenden die <xref:System.Type.TypeInitializer%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="96bec-1251">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="96bec-1252">Wenn die aktuelle <xref:System.Type> einen konstruierten generischen Typ darstellt, gibt diese Methode die <xref:System.Reflection.MemberInfo> mit den Typparametern, die durch die entsprechenden Typargumente ersetzt.</span><span class="sxs-lookup"><span data-stu-id="96bec-1252">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="96bec-1253">Wenn die aktuelle <xref:System.Type> stellt ein Typparameter in der Definition eines generischen Typs oder generische Methode, diese Methode sucht, die Mitglieder der Class-Einschränkung oder die Mitglieder der <xref:System.Object> liegt keine klasseneinschränkung.</span><span class="sxs-lookup"><span data-stu-id="96bec-1253">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-1254">Für generische Methoden enthalten nicht die Typargumente in `name`.</span><span class="sxs-lookup"><span data-stu-id="96bec-1254">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="96bec-1255">Z. B. der C#-Code `GetMember("MyMethod<int>")` sucht ein Element mit dem Textnamen "`MyMethod<int>`", und nicht für eine Methode namens `MyMethod` Listenfeldsteuerelement mit einem generisches Argument des Typs `int`.</span><span class="sxs-lookup"><span data-stu-id="96bec-1255">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-1256">Das folgende Beispiel zeigt alle Methoden der `myString` -Klasse, die mit dem Buchstaben c beginnen</span><span class="sxs-lookup"><span data-stu-id="96bec-1256">The following example displays all the methods of the `myString` class that start with the letter C.</span></span>  
  
 [!code-cpp[Type_GetMember#3](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMember/CPP/type_getmember.cpp#3)]
 [!code-csharp[Type_GetMember#3](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMember/CS/type_getmember.cs#3)]
 [!code-vb[Type_GetMember#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMember/VB/type_getmember.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96bec-1257">
            <paramref name="name" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1257">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="96bec-1258">A derived class must provide an implementation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1258">A derived class must provide an implementation.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMembers" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMembers">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-1259">Gets the members (properties, methods, fields, events, and so on) of the current <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1259">Gets the members (properties, methods, fields, events, and so on) of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMembers">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMembers" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMembers () As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMembers();" />
      <MemberSignature Language="F#" Value="abstract member GetMembers : unit -&gt; System.Reflection.MemberInfo[]&#xA;override this.GetMembers : unit -&gt; System.Reflection.MemberInfo[]" Usage="type.GetMembers " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMembers</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="96bec-1260">Returns all the public members of the current <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1260">Returns all the public members of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-1261">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all the public members of the current <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1261">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all the public members of the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="96bec-1262">-or-  An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have public members.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1262">-or-  An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have public members.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-1263">Mitglieder enthalten Eigenschaften, Methoden, Felder, Ereignisse und So weiter.</span><span class="sxs-lookup"><span data-stu-id="96bec-1263">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="96bec-1264">Die <xref:System.Type.GetMembers%2A> Methode nicht zurückgegeben Member in einer bestimmten Reihenfolge, z. B. alphabetische oder Reihenfolge der Deklaration.</span><span class="sxs-lookup"><span data-stu-id="96bec-1264">The <xref:System.Type.GetMembers%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="96bec-1265">Ihr Code muss nicht abhängig von der Reihenfolge, in der Elemente zurückgegeben werden, da, die variieren kann.</span><span class="sxs-lookup"><span data-stu-id="96bec-1265">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="96bec-1266">Diese methodenüberladung Ruft die <xref:System.Type.GetMembers%28System.Reflection.BindingFlags%29> methodenüberladung mit <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="96bec-1266">This method overload calls the <xref:System.Type.GetMembers%28System.Reflection.BindingFlags%29> method overload, with <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="96bec-1267">Die Klasseninitialisierer (.cctor) nicht gefunden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1267">It will not find class initializers (.cctor).</span></span> <span data-ttu-id="96bec-1268">Um Klasseninitialisierer zu ermitteln, verwenden Sie eine Überladung mit <xref:System.Reflection.BindingFlags>, und geben Sie <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="96bec-1268">To find class initializers, use an overload that takes <xref:System.Reflection.BindingFlags>, and specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="96bec-1269">Erhalten Sie auch die klasseninitialisierung verwenden die <xref:System.Type.TypeInitializer%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="96bec-1269">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="96bec-1270">Die folgende Tabelle zeigt, welche Member einer Basisklasse von zurückgegeben werden die `Get` Methoden ein, wenn für einen Typ reflektieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-1270">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="96bec-1271">Memberart</span><span class="sxs-lookup"><span data-stu-id="96bec-1271">Member Type</span></span>|<span data-ttu-id="96bec-1272">Statisch</span><span class="sxs-lookup"><span data-stu-id="96bec-1272">Static</span></span>|<span data-ttu-id="96bec-1273">Nicht statische</span><span class="sxs-lookup"><span data-stu-id="96bec-1273">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="96bec-1274">Konstruktor</span><span class="sxs-lookup"><span data-stu-id="96bec-1274">Constructor</span></span>|<span data-ttu-id="96bec-1275">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-1275">No</span></span>|<span data-ttu-id="96bec-1276">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-1276">No</span></span>|  
|<span data-ttu-id="96bec-1277">Feld</span><span class="sxs-lookup"><span data-stu-id="96bec-1277">Field</span></span>|<span data-ttu-id="96bec-1278">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-1278">No</span></span>|<span data-ttu-id="96bec-1279">Ja.</span><span class="sxs-lookup"><span data-stu-id="96bec-1279">Yes.</span></span> <span data-ttu-id="96bec-1280">Ein Feld ist immer nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1280">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="96bec-1281">event</span><span class="sxs-lookup"><span data-stu-id="96bec-1281">Event</span></span>|<span data-ttu-id="96bec-1282">Nicht zutreffend</span><span class="sxs-lookup"><span data-stu-id="96bec-1282">Not applicable</span></span>|<span data-ttu-id="96bec-1283">Die allgemeinen Typsystem ist, dass die Vererbung ist identisch mit der Methoden, die die Eigenschaft zu implementieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-1283">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="96bec-1284">Reflektion behandelt Eigenschaften als nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1284">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-1285">Siehe Hinweis 2 weiter unten.</span><span class="sxs-lookup"><span data-stu-id="96bec-1285">See note 2 below.</span></span>|  
|<span data-ttu-id="96bec-1286">Methode</span><span class="sxs-lookup"><span data-stu-id="96bec-1286">Method</span></span>|<span data-ttu-id="96bec-1287">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-1287">No</span></span>|<span data-ttu-id="96bec-1288">Ja.</span><span class="sxs-lookup"><span data-stu-id="96bec-1288">Yes.</span></span> <span data-ttu-id="96bec-1289">Eine Methode (virtuelle und nicht virtuelle) möglich Ausblenden nach Namen oder nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1289">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="96bec-1290">Geschachtelter Typ</span><span class="sxs-lookup"><span data-stu-id="96bec-1290">Nested Type</span></span>|<span data-ttu-id="96bec-1291">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-1291">No</span></span>|<span data-ttu-id="96bec-1292">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-1292">No</span></span>|  
|<span data-ttu-id="96bec-1293">Eigenschaft</span><span class="sxs-lookup"><span data-stu-id="96bec-1293">Property</span></span>|<span data-ttu-id="96bec-1294">Nicht zutreffend</span><span class="sxs-lookup"><span data-stu-id="96bec-1294">Not applicable</span></span>|<span data-ttu-id="96bec-1295">Die allgemeinen Typsystem ist, dass die Vererbung ist identisch mit der Methoden, die die Eigenschaft zu implementieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-1295">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="96bec-1296">Reflektion behandelt Eigenschaften als nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1296">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-1297">Siehe Hinweis 2 weiter unten.</span><span class="sxs-lookup"><span data-stu-id="96bec-1297">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="96bec-1298">Nach Name und Signatur ausblenden berücksichtigt, dass alle Teile der Signatur, die benutzerdefinierten Modifizierer, einschließlich Typen, Parametertypen, Sentinels enthält und nicht verwaltete Aufrufkonventionen zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-1298">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="96bec-1299">Dies ist ein binärer Vergleich.</span><span class="sxs-lookup"><span data-stu-id="96bec-1299">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="96bec-1300">Für die Reflektion sind die Eigenschaften und Ereignisse nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1300">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-1301">Wenn Sie eine Eigenschaft mit dem ein Get und Set-Accessor in der Basisklasse haben, aber die abgeleitete Klasse nur einen Get-Accessor hat, die Eigenschaft der abgeleiteten Klasse blendet die Basisklasseneigenschaft aus, und nicht werden auf den Setter in der Basisklasse zugreifen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1301">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="96bec-1302">Benutzerdefinierte Attribute sind nicht Teil des allgemeinen Typsystems.</span><span class="sxs-lookup"><span data-stu-id="96bec-1302">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="96bec-1303">Wenn die aktuelle <xref:System.Type> einen konstruierten generischen Typ darstellt, gibt diese Methode die <xref:System.Reflection.MemberInfo> Objekte mit den Typparametern, die durch die entsprechenden Typargumente ersetzt.</span><span class="sxs-lookup"><span data-stu-id="96bec-1303">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="96bec-1304">Wenn die aktuelle <xref:System.Type> stellt ein Typparameter in der Definition eines generischen Typs oder generische Methode, diese Methode sucht, die Mitglieder der Class-Einschränkung oder die Mitglieder der <xref:System.Object> liegt keine klasseneinschränkung.</span><span class="sxs-lookup"><span data-stu-id="96bec-1304">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-1305">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit der <xref:System.Type.GetMembers> -methodenüberladung, um Informationen zu allen öffentlichen Membern einer bestimmten Klasse zu sammeln.</span><span class="sxs-lookup"><span data-stu-id="96bec-1305">The following code example demonstrates how to use the <xref:System.Type.GetMembers> method overload to collect information about all public members of a specified class.</span></span>  
  
 [!code-cpp[Type_GetMembers1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMembers1/CPP/type_getmembers1.cpp#1)]
 [!code-csharp[Type_GetMembers1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMembers1/CS/type_getmembers1.cs#1)]
 [!code-vb[Type_GetMembers1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMembers1/VB/type_getmembers1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="M:System.Type.GetMember(System.String)" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetMembers">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMembers(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMembers(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetMembers (bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMembers(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMembers : System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]" Usage="type.GetMembers bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMembers(System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetMembers(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="96bec-1306">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1306">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="96bec-1307">-or-  Zero (<see cref="F:System.Reflection.BindingFlags.Default" />), to return an empty array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1307">-or-  Zero (<see cref="F:System.Reflection.BindingFlags.Default" />), to return an empty array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-1308">When overridden in a derived class, searches for the members defined for the current <see cref="T:System.Type" />, using the specified binding constraints.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1308">When overridden in a derived class, searches for the members defined for the current <see cref="T:System.Type" />, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-1309">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all members defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1309">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all members defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="96bec-1310">-or-  An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if no members are defined for the current <see cref="T:System.Type" />, or if none of the defined members match the binding constraints.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1310">-or-  An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if no members are defined for the current <see cref="T:System.Type" />, or if none of the defined members match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-1311">Mitglieder enthalten Eigenschaften, Methoden, Felder, Ereignisse und So weiter.</span><span class="sxs-lookup"><span data-stu-id="96bec-1311">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="96bec-1312">Die <xref:System.Type.GetMembers%2A> Methode nicht zurückgegeben Member in einer bestimmten Reihenfolge, z. B. alphabetische oder Reihenfolge der Deklaration.</span><span class="sxs-lookup"><span data-stu-id="96bec-1312">The <xref:System.Type.GetMembers%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="96bec-1313">Ihr Code muss nicht abhängig von der Reihenfolge, in der Elemente zurückgegeben werden, da, die variieren kann.</span><span class="sxs-lookup"><span data-stu-id="96bec-1313">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="96bec-1314">Die folgenden <xref:System.Reflection.BindingFlags> Filterflags können verwendet werden, auf welche Member in die Suche einbezogen werden:</span><span class="sxs-lookup"><span data-stu-id="96bec-1314">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="96bec-1315">Geben Sie `BindingFlags.Instance` oder `BindingFlags.Static` um ein Ergebnis zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-1315">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="96bec-1316">Geben Sie `BindingFlags.Public` öffentliche Mitglieder in die Suche eingeschlossen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1316">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="96bec-1317">Geben Sie `BindingFlags.NonPublic` nicht öffentliche Mitglieder (d. h. private, interne und geschützte Member) in die Suche eingeschlossen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1317">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span> <span data-ttu-id="96bec-1318">Nur geschützte und internen Member in Basisklassen werden zurückgegeben. Private Member in Basisklassen werden nicht zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-1318">Only protected and internal members on base classes are returned; private members on base classes are not returned.</span></span>  
  
-   <span data-ttu-id="96bec-1319">Geben Sie `BindingFlags.FlattenHierarchy` sollen `public` und `protected` statische Member der Hierarchie; `private` statische Member in geerbten Klassen sind nicht enthalten.</span><span class="sxs-lookup"><span data-stu-id="96bec-1319">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="96bec-1320">Die folgenden <xref:System.Reflection.BindingFlags> Modifiziererflags können verwendet werden, um die Funktionsweise der Suche ändern:</span><span class="sxs-lookup"><span data-stu-id="96bec-1320">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="96bec-1321">`BindingFlags.DeclaredOnly` Suchen Sie nur die Member deklariert die <xref:System.Type>, nicht die Elemente, die nur geerbt wurden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1321">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="96bec-1322">Beim Aufruf dieser Methode nur die `Public` Flag oder nur die `NonPublic` Flag die angegebenen Member zurück, und alle anderen Flags sind nicht erforderlich.</span><span class="sxs-lookup"><span data-stu-id="96bec-1322">Calling this method with only the `Public` flag or only the `NonPublic` flag will return the specified members and does not require any other flags.</span></span>  
  
 <span data-ttu-id="96bec-1323">Weitere Informationen finden Sie unter <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="96bec-1323">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="96bec-1324">Rufen Sie die klasseninitialisierung (.cctor) mithilfe der Überladung dieser Methode müssen Sie angeben <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="96bec-1324">To get the class initializer (.cctor) using this method overload, you must specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="96bec-1325">Erhalten Sie auch die klasseninitialisierung verwenden die <xref:System.Type.TypeInitializer%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="96bec-1325">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="96bec-1326">Wenn die aktuelle t: System.Type einen konstruierten generischen Typ darstellt, gibt diese Methode die <xref:System.Reflection.MemberInfo> Objekte mit den Typparametern, die durch die entsprechenden Typargumente ersetzt.</span><span class="sxs-lookup"><span data-stu-id="96bec-1326">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="96bec-1327">Wenn die aktuelle <xref:System.Type> stellt ein Typparameter in der Definition eines generischen Typs oder generische Methode, diese Methode sucht, die Mitglieder der Class-Einschränkung oder die Mitglieder der <xref:System.Object> liegt keine klasseneinschränkung.</span><span class="sxs-lookup"><span data-stu-id="96bec-1327">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-1328">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit der <xref:System.Type.GetMembers%28System.Reflection.BindingFlags%29> -methodenüberladung, um die Erfassung von Informationen über alle öffentlichen Instanzmember einer bestimmten Klasse.</span><span class="sxs-lookup"><span data-stu-id="96bec-1328">The following code example demonstrates how to use the <xref:System.Type.GetMembers%28System.Reflection.BindingFlags%29> method overload to collect information about all public instance members of a specified class.</span></span>  
  
 [!code-cpp[Type_GetMembers2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMembers2/CPP/type_getmembers2.cpp#1)]
 [!code-csharp[Type_GetMembers2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMembers2/CS/type_getmembers2.cs#1)]
 [!code-vb[Type_GetMembers2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMembers2/VB/type_getmembers2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMember(System.String)" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMethod">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-1329">Gets a specific method of the current <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1329">Gets a specific method of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethod : string -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="96bec-1330">The string containing the name of the public method to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1330">The string containing the name of the public method to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-1331">Searches for the public method with the specified name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1331">Searches for the public method with the specified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-1332">An object that represents the public method with the specified name, if found; otherwise, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1332">An object that represents the public method with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-1333">Die Suche nach `name` Groß-/Kleinschreibung beachtet wird.</span><span class="sxs-lookup"><span data-stu-id="96bec-1333">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="96bec-1334">Die Suche enthält öffentliche Instanzmethoden für statisch und öffentlich zur Verfügung.</span><span class="sxs-lookup"><span data-stu-id="96bec-1334">The search includes public static and public instance methods.</span></span>  
  
 <span data-ttu-id="96bec-1335">Wenn eine Methode überladen ist, und verfügt über mehr als eine öffentliche Methode, die <xref:System.Type.GetMethod%28System.String%29> -Methode löst eine <xref:System.Reflection.AmbiguousMatchException> Ausnahme.</span><span class="sxs-lookup"><span data-stu-id="96bec-1335">If a method is overloaded and has more than one public method, the <xref:System.Type.GetMethod%28System.String%29> method throws an <xref:System.Reflection.AmbiguousMatchException> exception.</span></span> <span data-ttu-id="96bec-1336">Im folgenden Beispiel wird eine Ausnahme ausgelöst, da es mehr als eine öffentliche Überladung von gibt der <xref:System.Int32.ToString%2A?displayProperty=nameWithType> Methode.</span><span class="sxs-lookup"><span data-stu-id="96bec-1336">In the following example, an exception is thrown because there is more than one public overload of the <xref:System.Int32.ToString%2A?displayProperty=nameWithType> method.</span></span>  <span data-ttu-id="96bec-1337">Andererseits, da die `Person.ToString` methodenüberschreibungen <xref:System.Object.ToString%2A?displayProperty=nameWithType> und ist daher nicht überladen, <xref:System.Type.GetMethod%28System.String%29> besteht im Abrufen der <xref:System.Reflection.MethodInfo> Objekt.</span><span class="sxs-lookup"><span data-stu-id="96bec-1337">On the other hand, because the `Person.ToString` method overrides  <xref:System.Object.ToString%2A?displayProperty=nameWithType> and therefore is not overloaded, the <xref:System.Type.GetMethod%28System.String%29> method is able to retrieve the <xref:System.Reflection.MethodInfo> object.</span></span>  
  
 [!code-csharp[System.Type.GetMethod#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Type.GetMethod/cs/GetMethodWithOverloads2.cs#3)]
 [!code-vb[System.Type.GetMethod#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Type.GetMethod/vb/GetMethodWithOverloads2.vb#3)]  
  
 <span data-ttu-id="96bec-1338">Sie können eine zum Abrufen einer bestimmten Methode die folgenden Aktionen ausführen:</span><span class="sxs-lookup"><span data-stu-id="96bec-1338">You can do one of the following to retrieve a specific method:</span></span>  
  
-   <span data-ttu-id="96bec-1339">Rufen Sie die <xref:System.Type.GetMethod%28System.String%2CSystem.Reflection.BindingFlags%29> Methode, und geben Sie einen `bindingAttr` Argument, das die Methode eindeutig identifiziert.</span><span class="sxs-lookup"><span data-stu-id="96bec-1339">Call the <xref:System.Type.GetMethod%28System.String%2CSystem.Reflection.BindingFlags%29> method and specify a `bindingAttr` argument that uniquely identifies the method.</span></span> <span data-ttu-id="96bec-1340">Z. B. wenn die Ausnahme ausgelöst wird, da ein Typ ein statischer und eine Überladung für die Instanz hat, können Sie angeben einer `bindingAttr` Argument <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="96bec-1340">For example, if the exception is thrown because a type has a static and an instance overload, you can specify a  `bindingAttr` argument  of <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="96bec-1341">Rufen Sie eine Überladung von der <xref:System.Type.GetMethod%2A> Methode, enthält eine `types` Parameter, die die Typen der Parameter der Methode definiert.</span><span class="sxs-lookup"><span data-stu-id="96bec-1341">Call an overload of the <xref:System.Type.GetMethod%2A> method that includes a `types` parameter which defines the types of the method's parameters.</span></span>  
  
-   <span data-ttu-id="96bec-1342">Rufen Sie die <xref:System.Type.GetMethods> Methode zum Abrufen von einem Array, das alle öffentlichen Methoden, die auf einen Typ gehören.</span><span class="sxs-lookup"><span data-stu-id="96bec-1342">Call the <xref:System.Type.GetMethods> method to retrieve an array containing all of the public methods belonging to a type.</span></span> <span data-ttu-id="96bec-1343">Sie können dann durchlaufen, um die doppelte Methoden, die mit dem Namen identifizieren `name`.</span><span class="sxs-lookup"><span data-stu-id="96bec-1343">You can then iterate it to identify the duplicate methods named `name`.</span></span>  
  
 <span data-ttu-id="96bec-1344">Wenn die aktuelle t: System.Type einen konstruierten generischen Typ darstellt, gibt diese Methode die <xref:System.Reflection.MethodInfo> mit den Typparametern, die durch die entsprechenden Typargumente ersetzt.</span><span class="sxs-lookup"><span data-stu-id="96bec-1344">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="96bec-1345">Wenn die aktuelle <xref:System.Type> stellt ein Typparameter in der Definition eines generischen Typs oder generische Methode, diese Methode sucht, die Methoden der klasseneinschränkung oder die Methoden der <xref:System.Object> liegt keine klasseneinschränkung.</span><span class="sxs-lookup"><span data-stu-id="96bec-1345">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-1346">Für generische Methoden enthalten nicht die Typargumente in `name`.</span><span class="sxs-lookup"><span data-stu-id="96bec-1346">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="96bec-1347">Z. B. der C#-Code `GetMember("MyMethod<int>")` sucht ein Element mit dem Textnamen "`MyMethod<int>`", und nicht für eine Methode namens `MyMethod` Listenfeldsteuerelement mit einem generisches Argument des Typs `int`.</span><span class="sxs-lookup"><span data-stu-id="96bec-1347">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-1348">Im folgenden Beispiel wird eine Methode namens `MethodA`.</span><span class="sxs-lookup"><span data-stu-id="96bec-1348">The following example gets a method named `MethodA`.</span></span>  
  
 [!code-cpp[Type_GetMethod1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethod1/CPP/type_getmethod1.cpp#1)]
 [!code-csharp[Type_GetMethod1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod1/CS/type_getmethod1.cs#1)]
 [!code-vb[Type_GetMethod1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethod1/VB/type_getmethod1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="96bec-1349">More than one method is found with the specified name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1349">More than one method is found with the specified name.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96bec-1350">
            <paramref name="name" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1350">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, bindingAttr As BindingFlags) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * System.Reflection.BindingFlags -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethod : string * System.Reflection.BindingFlags -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="96bec-1351">The string containing the name of the method to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1351">The string containing the name of the method to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="96bec-1352">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1352">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="96bec-1353">-or-  Zero, to return <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1353">-or-  Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-1354">Searches for the specified method, using the specified binding constraints.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1354">Searches for the specified method, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-1355">An object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1355">An object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-1356">Die folgenden <xref:System.Reflection.BindingFlags> Filterflags können festgelegt werden, welche Methoden in die Suche einbezogen werden:</span><span class="sxs-lookup"><span data-stu-id="96bec-1356">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:</span></span>  
  
-   <span data-ttu-id="96bec-1357">Geben Sie <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> oder <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> um ein Ergebnis zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-1357">You must specify either <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> or <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> in order to get a return.</span></span>  
  
-   <span data-ttu-id="96bec-1358">Geben Sie <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> öffentliche Methoden in der Suche eingeschlossen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1358">Specify <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> to include public methods in the search.</span></span>  
  
-   <span data-ttu-id="96bec-1359">Geben Sie <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> auf nicht öffentliche Methoden (d.h. private, interne und geschützte Methoden) in die Suche einbeziehen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1359">Specify <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> to include non-public methods (that is, private, internal, and protected methods) in the search.</span></span>  
  
-   <span data-ttu-id="96bec-1360">Geben Sie <xref:System.Reflection.BindingFlags.FlattenHierarchy?displayProperty=nameWithType> sollen `public` und `protected` statische Member der Hierarchie; `private` statische Member in geerbten Klassen sind nicht enthalten.</span><span class="sxs-lookup"><span data-stu-id="96bec-1360">Specify <xref:System.Reflection.BindingFlags.FlattenHierarchy?displayProperty=nameWithType> to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="96bec-1361">Die folgenden <xref:System.Reflection.BindingFlags> Modifiziererflags können verwendet werden, um die Funktionsweise der Suche ändern:</span><span class="sxs-lookup"><span data-stu-id="96bec-1361">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="96bec-1362"><xref:System.Reflection.BindingFlags.IgnoreCase?displayProperty=nameWithType> um die Groß-/Kleinschreibung ignorieren `name`.</span><span class="sxs-lookup"><span data-stu-id="96bec-1362"><xref:System.Reflection.BindingFlags.IgnoreCase?displayProperty=nameWithType> to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="96bec-1363"><xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType> Suchen Sie nur die Methoden, die deklariert die <xref:System.Type>, nicht die Methoden, die nur geerbt wurden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1363"><xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType> to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.</span></span>  
  
 <span data-ttu-id="96bec-1364">Weitere Informationen finden Sie unter <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="96bec-1364">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="96bec-1365">Wenn eine Methode überladen wird und mehr als einer Überladung Einschränkungen der `bindingAttr` -Argument, löst die Methode eine <xref:System.Reflection.AmbiguousMatchException> Ausnahme.</span><span class="sxs-lookup"><span data-stu-id="96bec-1365">If a method is overloaded and more than one overload meets the constraints specified by the `bindingAttr` argument, the method throws an <xref:System.Reflection.AmbiguousMatchException> exception.</span></span> <span data-ttu-id="96bec-1366">Im folgenden Beispiel wird eine Ausnahme ausgelöst, da:</span><span class="sxs-lookup"><span data-stu-id="96bec-1366">In the following example, an exception is thrown because:</span></span>  
  
-   <span data-ttu-id="96bec-1367">Der `TestClass` Typ verfügt über zwei öffentliche Überladungen der `DisplayValue` Methode `DisplayValue(String)` und `DisplayValue(String, Object[])`.</span><span class="sxs-lookup"><span data-stu-id="96bec-1367">The `TestClass` type has two public instance overloads of the `DisplayValue` method, `DisplayValue(String)` and `DisplayValue(String, Object[])`.</span></span>  
  
-   <span data-ttu-id="96bec-1368">Die `TestClass` Typ verfügt über zwei öffentliche Überladungen der `Equals` -Methode, von denen geerbt wird, von <xref:System.Object>: `Equals(TestClass)` und `Equals(Object)`.</span><span class="sxs-lookup"><span data-stu-id="96bec-1368">The `TestClass` type has two public instance overloads of the `Equals` method,  one of which is inherited from <xref:System.Object>: `Equals(TestClass)` and `Equals(Object)`.</span></span>  
  
 [!code-csharp[System.Type.GetMethod#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Type.GetMethod/cs/GetMethodWithOverloads1.cs#2)]
 [!code-vb[System.Type.GetMethod#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Type.GetMethod/vb/GetMethodWithOverloads1.vb#2)]  
  
 <span data-ttu-id="96bec-1369">Sie können eine zum Abrufen einer bestimmten Methode die folgenden Aktionen ausführen:</span><span class="sxs-lookup"><span data-stu-id="96bec-1369">You can do one of the following to retrieve a specific method:</span></span>  
  
-   <span data-ttu-id="96bec-1370">Ändern Sie die bindungseinschränkungen entsprechen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1370">Change the binding constraints.</span></span> <span data-ttu-id="96bec-1371">Im vorherigen Beispiel versucht, eine öffentliche Instanz abzurufen `Equals` Methode, die durch den Typ deklariert und nicht geerbt erfolgreich abruft `Equals(TestClass)`.</span><span class="sxs-lookup"><span data-stu-id="96bec-1371">In the previous example, attempting to retrieve a public instance `Equals` method that is declared by the type and not inherited successfully retrieves `Equals(TestClass)`.</span></span>  
  
-   <span data-ttu-id="96bec-1372">Rufen Sie eine Überladung von der <xref:System.Type.GetMethod%2A> Methode, enthält eine `types` Parameter, die die Typen der Parameter der Methode definiert.</span><span class="sxs-lookup"><span data-stu-id="96bec-1372">Call an overload of the <xref:System.Type.GetMethod%2A> method that includes a `types` parameter which defines the types of the method's parameters.</span></span>  
  
-   <span data-ttu-id="96bec-1373">Rufen Sie die <xref:System.Type.GetMethods%28System.Reflection.BindingFlags%29> Methode zum Abrufen von einem Array, das alle Methoden, die auf einen Typ gehören, die die angegebenen Bindungsattribute aufweisen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1373">Call the <xref:System.Type.GetMethods%28System.Reflection.BindingFlags%29> method to retrieve an array containing all of the methods belonging to a type that have the specified binding attributes.</span></span> <span data-ttu-id="96bec-1374">Sie können dann durchlaufen, um die doppelte Methoden, die mit dem Namen identifizieren `name`.</span><span class="sxs-lookup"><span data-stu-id="96bec-1374">You can then iterate it to identify the duplicate methods named `name`.</span></span> <span data-ttu-id="96bec-1375">Dieser Ansatz wird veranschaulicht, in dem vorherigen Beispiel-Handler für die <xref:System.Reflection.AmbiguousMatchException> Ausnahme.</span><span class="sxs-lookup"><span data-stu-id="96bec-1375">This approach is illustrated in the previous example's handler for the <xref:System.Reflection.AmbiguousMatchException> exception.</span></span>  
  
 <span data-ttu-id="96bec-1376">Wenn die aktuelle <xref:System.Type> einen konstruierten generischen Typ darstellt, gibt diese Methode die <xref:System.Reflection.MethodInfo> mit den Typparametern, die durch die entsprechenden Typargumente ersetzt.</span><span class="sxs-lookup"><span data-stu-id="96bec-1376">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="96bec-1377">Wenn die aktuelle <xref:System.Type> stellt ein Typparameter in der Definition eines generischen Typs oder generische Methode, diese Methode sucht, die Methoden der klasseneinschränkung oder die Methoden der <xref:System.Object> liegt keine klasseneinschränkung.</span><span class="sxs-lookup"><span data-stu-id="96bec-1377">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-1378">Für generische Methoden enthalten nicht die Typargumente in `name`.</span><span class="sxs-lookup"><span data-stu-id="96bec-1378">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="96bec-1379">Z. B. der C#-Code `GetMember("MyMethod<int>")` sucht ein Element mit dem Textnamen "`MyMethod<int>`", und nicht für eine Methode namens `MyMethod` Listenfeldsteuerelement mit einem generisches Argument des Typs `int`.</span><span class="sxs-lookup"><span data-stu-id="96bec-1379">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-1380">Im folgenden Beispiel wird die Methode, die den angegebenen Bindungsflags entspricht.</span><span class="sxs-lookup"><span data-stu-id="96bec-1380">The following example gets the method that matches the specified binding flags.</span></span>  
  
 [!code-cpp[Type_GetMethod2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethod2/CPP/type_getmethod2.cpp#1)]
 [!code-csharp[Type_GetMethod2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod2/CS/type_getmethod2.cs#1)]
 [!code-vb[Type_GetMethod2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethod2/VB/type_getmethod2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="96bec-1381">More than one method is found with the specified name and matching the specified binding constraints.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1381">More than one method is found with the specified name and matching the specified binding constraints.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96bec-1382">
            <paramref name="name" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1382">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, types As Type()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * Type[] -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethod : string * Type[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, types)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Type[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="96bec-1383">The string containing the name of the public method to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1383">The string containing the name of the public method to get.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="96bec-1384">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1384">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span>
          </span>
          <span data-ttu-id="96bec-1385">-or-  An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1385">-or-  An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-1386">Searches for the specified public method whose parameters match the specified argument types.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1386">Searches for the specified public method whose parameters match the specified argument types.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-1387">An object representing the public method whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1387">An object representing the public method whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-1388">Die Suche nach `name` Groß-/Kleinschreibung beachtet wird.</span><span class="sxs-lookup"><span data-stu-id="96bec-1388">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="96bec-1389">Die Suche enthält öffentliche Instanzmethoden für statisch und öffentlich zur Verfügung.</span><span class="sxs-lookup"><span data-stu-id="96bec-1389">The search includes public static and public instance methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-1390">Sie können keine Parameter auslassen, beim Nachschlagen von Konstruktoren und Methoden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1390">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="96bec-1391">Sie können nur Parameter auslassen, beim Aufrufen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1391">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="96bec-1392">Wenn die aktuelle <xref:System.Type> einen konstruierten generischen Typ darstellt, gibt diese Methode die <xref:System.Reflection.MethodInfo> mit den Typparametern, die durch die entsprechenden Typargumente ersetzt.</span><span class="sxs-lookup"><span data-stu-id="96bec-1392">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="96bec-1393">Wenn die aktuelle <xref:System.Type> stellt ein Typparameter in der Definition eines generischen Typs oder generische Methode, diese Methode sucht, die Methoden der klasseneinschränkung oder die Methoden der <xref:System.Object> liegt keine klasseneinschränkung.</span><span class="sxs-lookup"><span data-stu-id="96bec-1393">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-1394">Die `name` Parameter kann keine Typargumente enthalten.</span><span class="sxs-lookup"><span data-stu-id="96bec-1394">The `name` parameter cannot include type arguments.</span></span> <span data-ttu-id="96bec-1395">Z. B. der C#-Code `GetMethod("MyGenericMethod<int>")` sucht nach einer Methode mit dem Textnamen "`MyGenericMethod<int>`", und nicht für eine Methode namens `MyGenericMethod` Listenfeldsteuerelement mit einem generisches Argument des Typs `int`.</span><span class="sxs-lookup"><span data-stu-id="96bec-1395">For example, the C# code `GetMethod("MyGenericMethod<int>")` searches for a method with the text name "`MyGenericMethod<int>`", rather than for a method named `MyGenericMethod` that has one generic argument of type `int`.</span></span> <span data-ttu-id="96bec-1396">Verwenden Sie stattdessen `GetMethod("MyGenericMethod")` mit dem entsprechenden Parameter in der `types` Array.</span><span class="sxs-lookup"><span data-stu-id="96bec-1396">Instead, use `GetMethod("MyGenericMethod")` with the appropriate parameter in the `types` array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-1397">Das folgende Beispiel sucht nach bestimmten Überladungen der `MethodA`, eine Vielzahl von Argumenttypen angeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-1397">The following example finds specific overloads of `MethodA`, specifying a variety of argument types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-1398">Die [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] Beispiel erfordert die `/unsafe` -Compileroption.</span><span class="sxs-lookup"><span data-stu-id="96bec-1398">The [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] example requires the `/unsafe` compiler option.</span></span>  
  
 [!code-cpp[Type_GetMethod4#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethod4/CPP/type_getmethod4.cpp#1)]
 [!code-csharp[Type_GetMethod4#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod4/CS/type_getmethod4.cs#1)]
 [!code-vb[Type_GetMethod4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethod4/VB/type_getmethod4.vb#1)]  
  
 <span data-ttu-id="96bec-1399">Das folgende Beispiel ruft <xref:System.Reflection.MethodInfo> Objekte, die darstellen, die `Add` Methoden eines nicht generischen Typs (der <xref:System.Collections.ArrayList> Klasse), ein offener generischer Typ (der <xref:System.Collections.Generic.List%601> Klasse), und einen geschlossenen generischen Typ (der `List(Of String)` Typ.</span><span class="sxs-lookup"><span data-stu-id="96bec-1399">The following example retrieves <xref:System.Reflection.MethodInfo> objects that represent the `Add` methods  of a non-generic type (the <xref:System.Collections.ArrayList> class), an open generic type (the <xref:System.Collections.Generic.List%601> class), and a closed generic type (the `List(Of String)` type.</span></span>  
  
 [!code-csharp[System.Type.GetMethod#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Type.GetMethod/cs/GetMethod1.cs#1)]
 [!code-vb[System.Type.GetMethod#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Type.GetMethod/vb/GetMethod1.vb#1)]  
  
 <span data-ttu-id="96bec-1400">Das Beispiel definiert eine `GetAddMethod` Methode, die die entsprechende abruft <xref:System.Reflection.MethodInfo> Objekt.</span><span class="sxs-lookup"><span data-stu-id="96bec-1400">The example defines a `GetAddMethod` method that retrieves the appropriate <xref:System.Reflection.MethodInfo> object.</span></span> <span data-ttu-id="96bec-1401">Bereitstellen der `types` Argument für ein offener generischer Typ, ruft der <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> Methode.</span><span class="sxs-lookup"><span data-stu-id="96bec-1401">To provide the `types` argument for an open generic type, it calls the <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="96bec-1402">Bereitstellen der `types` Argument für einen geschlossenen generischen Typ, der Wert abgerufen, der die <xref:System.Type.GenericTypeArguments%2A?displayProperty=nameWithType> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="96bec-1402">To provide the `types` argument for a closed generic type, it retrieves the value of the <xref:System.Type.GenericTypeArguments%2A?displayProperty=nameWithType> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="96bec-1403">More than one method is found with the specified name and specified parameters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1403">More than one method is found with the specified name and specified parameters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96bec-1404">
            <paramref name="name" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1404">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="96bec-1405">-or-  <paramref name="types" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1405">-or-  <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="96bec-1406">-or-  One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1406">-or-  One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="96bec-1407">
            <paramref name="types" /> is multidimensional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1407">
              <paramref name="types" /> is multidimensional.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, int genericParameterCount, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.MethodInfo GetMethod(string name, int32 genericParameterCount, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Int32,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, genericParameterCount As Integer, types As Type()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, int genericParameterCount, cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="member this.GetMethod : string * int * Type[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, genericParameterCount, types)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="genericParameterCount" Type="System.Int32" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="genericParameterCount">To be added.</param>
        <param name="types">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, types As Type(), modifiers As ParameterModifier()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethod : string * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="96bec-1408">The string containing the name of the public method to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1408">The string containing the name of the public method to get.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="96bec-1409">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1409">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span>
          </span>
          <span data-ttu-id="96bec-1410">-or-  An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1410">-or-  An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="96bec-1411">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1411">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="96bec-1412">To be only used when calling through COM interop, and only parameters that are passed by reference are handled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1412">To be only used when calling through COM interop, and only parameters that are passed by reference are handled.</span>
          </span>
          <span data-ttu-id="96bec-1413">The default binder does not process this parameter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1413">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-1414">Searches for the specified public method whose parameters match the specified argument types and modifiers.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1414">Searches for the specified public method whose parameters match the specified argument types and modifiers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-1415">An object representing the public method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1415">An object representing the public method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-1416">Obwohl nicht der Standardbinder verarbeitet <xref:System.Reflection.ParameterModifier> (die `modifiers` Parameter), können Sie die abstrakte <xref:System.Reflection.Binder?displayProperty=nameWithType> Klasse, um einen benutzerdefinierten Binder zu schreiben, der verarbeitet `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="96bec-1416">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="96bec-1417">`ParameterModifier` wird nur verwendet werden, wenn der Aufruf über COM-Interop und behandelt nur die Parameter, die als Verweis übergeben werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1417">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="96bec-1418">Die Suche nach `name` Groß-/Kleinschreibung beachtet wird.</span><span class="sxs-lookup"><span data-stu-id="96bec-1418">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="96bec-1419">Die Suche enthält öffentliche Instanzmethoden für statisch und öffentlich zur Verfügung.</span><span class="sxs-lookup"><span data-stu-id="96bec-1419">The search includes public static and public instance methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-1420">Sie können keine Parameter auslassen, beim Nachschlagen von Konstruktoren und Methoden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1420">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="96bec-1421">Sie können nur Parameter auslassen, beim Aufrufen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1421">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="96bec-1422">Wenn die aktuelle t: System.Type einen konstruierten generischen Typ darstellt, gibt diese Methode die <xref:System.Reflection.MethodInfo> mit den Typparametern, die durch die entsprechenden Typargumente ersetzt.</span><span class="sxs-lookup"><span data-stu-id="96bec-1422">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="96bec-1423">Wenn die aktuelle <xref:System.Type> stellt ein Typparameter in der Definition eines generischen Typs oder generische Methode, diese Methode sucht, die Methoden der klasseneinschränkung oder die Methoden der <xref:System.Object> liegt keine klasseneinschränkung.</span><span class="sxs-lookup"><span data-stu-id="96bec-1423">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-1424">Für generische Methoden enthalten nicht die Typargumente in `name`.</span><span class="sxs-lookup"><span data-stu-id="96bec-1424">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="96bec-1425">Z. B. der C#-Code `GetMethod("MyMethod<int>")` sucht ein Element mit dem Textnamen "`MyMethod<int>`", und nicht für eine Methode namens `MyMethod` Listenfeldsteuerelement mit einem generisches Argument des Typs `int`.</span><span class="sxs-lookup"><span data-stu-id="96bec-1425">For example, the C# code `GetMethod("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span> <span data-ttu-id="96bec-1426">Verwenden Sie stattdessen `GetMethod("MyMethod")` mit dem entsprechenden Parameter in der `types` Array.</span><span class="sxs-lookup"><span data-stu-id="96bec-1426">Instead, use `GetMethod("MyMethod")` with the appropriate parameter in the `types` array.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="96bec-1427">More than one method is found with the specified name and specified parameters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1427">More than one method is found with the specified name and specified parameters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96bec-1428">
            <paramref name="name" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1428">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="96bec-1429">-or-  <paramref name="types" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1429">-or-  <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="96bec-1430">-or-  One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1430">-or-  One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="96bec-1431">
            <paramref name="types" /> is multidimensional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1431">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="96bec-1432">-or-  <paramref name="modifiers" /> is multidimensional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1432">-or-  <paramref name="modifiers" /> is multidimensional.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, int genericParameterCount, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.MethodInfo GetMethod(string name, int32 genericParameterCount, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Int32,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, genericParameterCount As Integer, types As Type(), modifiers As ParameterModifier()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, int genericParameterCount, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="member this.GetMethod : string * int * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, genericParameterCount, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="genericParameterCount" Type="System.Int32" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="genericParameterCount">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethod : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, bindingAttr, binder, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="96bec-1433">The string containing the name of the method to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1433">The string containing the name of the method to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="96bec-1434">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1434">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="96bec-1435">-or-  Zero, to return <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1435">-or-  Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="96bec-1436">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1436">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="96bec-1437">-or-  A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1437">-or-  A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="96bec-1438">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1438">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span>
          </span>
          <span data-ttu-id="96bec-1439">-or-  An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1439">-or-  An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="96bec-1440">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1440">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="96bec-1441">To be only used when calling through COM interop, and only parameters that are passed by reference are handled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1441">To be only used when calling through COM interop, and only parameters that are passed by reference are handled.</span>
          </span>
          <span data-ttu-id="96bec-1442">The default binder does not process this parameter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1442">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-1443">Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1443">Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-1444">An object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1444">An object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-1445">Obwohl nicht der Standardbinder verarbeitet <xref:System.Reflection.ParameterModifier> (die `modifiers` Parameter), können Sie die abstrakte <xref:System.Reflection.Binder?displayProperty=nameWithType> Klasse, um einen benutzerdefinierten Binder zu schreiben, der verarbeitet `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="96bec-1445">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="96bec-1446">`ParameterModifier` wird nur verwendet werden, wenn der Aufruf über COM-Interop und behandelt nur die Parameter, die als Verweis übergeben werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1446">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="96bec-1447">Die folgenden <xref:System.Reflection.BindingFlags> Filterflags können festgelegt werden, welche Methoden in die Suche einbezogen werden:</span><span class="sxs-lookup"><span data-stu-id="96bec-1447">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:</span></span>  
  
-   <span data-ttu-id="96bec-1448">Geben Sie `BindingFlags.Instance` oder `BindingFlags.Static` um ein Ergebnis zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-1448">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="96bec-1449">Geben Sie `BindingFlags.Public` öffentliche Methoden in der Suche eingeschlossen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1449">Specify `BindingFlags.Public` to include public methods in the search.</span></span>  
  
-   <span data-ttu-id="96bec-1450">Geben Sie `BindingFlags.NonPublic` nicht öffentliche Methoden (d.h. private, interne und geschützte Methoden) in die Suche eingeschlossen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1450">Specify `BindingFlags.NonPublic` to include nonpublic methods (that is, private, internal, and protected methods) in the search.</span></span>  
  
-   <span data-ttu-id="96bec-1451">Geben Sie `BindingFlags.FlattenHierarchy` sollen `public` und `protected` statische Member der Hierarchie; `private` statische Member in geerbten Klassen sind nicht enthalten.</span><span class="sxs-lookup"><span data-stu-id="96bec-1451">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="96bec-1452">Die folgenden <xref:System.Reflection.BindingFlags> Modifiziererflags können verwendet werden, um die Funktionsweise der Suche ändern:</span><span class="sxs-lookup"><span data-stu-id="96bec-1452">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="96bec-1453">`BindingFlags.IgnoreCase` um die Groß-/Kleinschreibung ignorieren `name`.</span><span class="sxs-lookup"><span data-stu-id="96bec-1453">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="96bec-1454">`BindingFlags.DeclaredOnly` Suchen Sie nur die Methoden, die deklariert die <xref:System.Type>, nicht die Methoden, die nur geerbt wurden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1454">`BindingFlags.DeclaredOnly` to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.</span></span>  
  
 <span data-ttu-id="96bec-1455">Weitere Informationen finden Sie unter <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="96bec-1455">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-1456">Sie können keine Parameter auslassen, beim Nachschlagen von Konstruktoren und Methoden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1456">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="96bec-1457">Sie können nur Parameter auslassen, beim Aufrufen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1457">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="96bec-1458">Wenn die aktuelle t: System.Type einen konstruierten generischen Typ darstellt, gibt diese Methode die <xref:System.Reflection.MethodInfo> mit den Typparametern, die durch die entsprechenden Typargumente ersetzt.</span><span class="sxs-lookup"><span data-stu-id="96bec-1458">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="96bec-1459">Wenn die aktuelle <xref:System.Type> stellt ein Typparameter in der Definition eines generischen Typs oder generische Methode, diese Methode sucht, die Methoden der klasseneinschränkung oder die Methoden der <xref:System.Object> liegt keine klasseneinschränkung.</span><span class="sxs-lookup"><span data-stu-id="96bec-1459">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-1460">Für generische Methoden enthalten nicht die Typargumente in `name`.</span><span class="sxs-lookup"><span data-stu-id="96bec-1460">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="96bec-1461">Z. B. der C#-Code `GetMember("MyMethod<int>")` sucht ein Element mit dem Textnamen "`MyMethod<int>`", und nicht für eine Methode namens `MyMethod` Listenfeldsteuerelement mit einem generisches Argument des Typs `int`.</span><span class="sxs-lookup"><span data-stu-id="96bec-1461">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-1462">Das folgende Beispiel sucht nach bestimmten Überladungen der `MethodA`, bindungseinschränkungen und eine Vielzahl von Argumenttypen angeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-1462">The following example finds specific overloads of `MethodA`, specifying binding constraints and a variety of argument types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-1463">Die [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] Beispiel erfordert die `/unsafe` -Compileroption.</span><span class="sxs-lookup"><span data-stu-id="96bec-1463">The [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] example requires the `/unsafe` compiler option.</span></span>  
  
 [!code-cpp[Type_GetMethod5#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethod5/CPP/type_getmethod5.cpp#1)]
 [!code-csharp[Type_GetMethod5#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod5/CS/type_getmethod5.cs#1)]
 [!code-vb[Type_GetMethod5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethod5/VB/type_getmethod5.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="96bec-1464">More than one method is found with the specified name and matching the specified binding constraints.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1464">More than one method is found with the specified name and matching the specified binding constraints.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96bec-1465">
            <paramref name="name" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1465">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="96bec-1466">-or-  <paramref name="types" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1466">-or-  <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="96bec-1467">-or-  One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1467">-or-  One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="96bec-1468">
            <paramref name="types" /> is multidimensional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1468">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="96bec-1469">-or-  <paramref name="modifiers" /> is multidimensional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1469">-or-  <paramref name="modifiers" /> is multidimensional.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, int genericParameterCount, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.MethodInfo GetMethod(string name, int32 genericParameterCount, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Int32,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, int genericParameterCount, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="member this.GetMethod : string * int * System.Reflection.BindingFlags * System.Reflection.Binder * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, genericParameterCount, bindingAttr, binder, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="genericParameterCount" Type="System.Int32" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="genericParameterCount">To be added.</param>
        <param name="bindingAttr">To be added.</param>
        <param name="binder">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethod : string * System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="96bec-1470">The string containing the name of the method to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1470">The string containing the name of the method to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="96bec-1471">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1471">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="96bec-1472">-or-  Zero, to return <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1472">-or-  Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="96bec-1473">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1473">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="96bec-1474">-or-  A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1474">-or-  A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="callConvention">
          <span data-ttu-id="96bec-1475">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and how the stack is cleaned up.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1475">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and how the stack is cleaned up.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="96bec-1476">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1476">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span>
          </span>
          <span data-ttu-id="96bec-1477">-or-  An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1477">-or-  An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="96bec-1478">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1478">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="96bec-1479">To be only used when calling through COM interop, and only parameters that are passed by reference are handled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1479">To be only used when calling through COM interop, and only parameters that are passed by reference are handled.</span>
          </span>
          <span data-ttu-id="96bec-1480">The default binder does not process this parameter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1480">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-1481">Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1481">Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-1482">An object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1482">An object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-1483">Obwohl nicht der Standardbinder verarbeitet <xref:System.Reflection.ParameterModifier> (die `modifiers` Parameter), können Sie die abstrakte <xref:System.Reflection.Binder?displayProperty=nameWithType> Klasse, um einen benutzerdefinierten Binder zu schreiben, der verarbeitet `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="96bec-1483">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="96bec-1484">`ParameterModifier` wird nur verwendet werden, wenn der Aufruf über COM-Interop und behandelt nur die Parameter, die als Verweis übergeben werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1484">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="96bec-1485">Die folgende Tabelle zeigt, welche Member einer Basisklasse von zurückgegeben werden die `GetXXX` Methoden ein, wenn für einen Typ reflektieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-1485">The following table shows what members of a base class are returned by the `GetXXX` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="96bec-1486">Memberart</span><span class="sxs-lookup"><span data-stu-id="96bec-1486">Member Type</span></span>|<span data-ttu-id="96bec-1487">Statisch</span><span class="sxs-lookup"><span data-stu-id="96bec-1487">Static</span></span>|<span data-ttu-id="96bec-1488">Nicht statische</span><span class="sxs-lookup"><span data-stu-id="96bec-1488">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="96bec-1489">Konstruktor</span><span class="sxs-lookup"><span data-stu-id="96bec-1489">Constructor</span></span>|<span data-ttu-id="96bec-1490">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-1490">No</span></span>|<span data-ttu-id="96bec-1491">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-1491">No</span></span>|  
|<span data-ttu-id="96bec-1492">Feld</span><span class="sxs-lookup"><span data-stu-id="96bec-1492">Field</span></span>|<span data-ttu-id="96bec-1493">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-1493">No</span></span>|<span data-ttu-id="96bec-1494">Ja.</span><span class="sxs-lookup"><span data-stu-id="96bec-1494">Yes.</span></span> <span data-ttu-id="96bec-1495">Ein Feld ist immer nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1495">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="96bec-1496">event</span><span class="sxs-lookup"><span data-stu-id="96bec-1496">Event</span></span>|<span data-ttu-id="96bec-1497">Nicht zutreffend</span><span class="sxs-lookup"><span data-stu-id="96bec-1497">Not applicable</span></span>|<span data-ttu-id="96bec-1498">Die allgemeinen Typsystem ist, dass die Vererbung ist identisch mit der Methoden, die die Eigenschaft zu implementieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-1498">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="96bec-1499">Reflektion behandelt Eigenschaften als nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1499">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-1500">Siehe Hinweis 2 weiter unten.</span><span class="sxs-lookup"><span data-stu-id="96bec-1500">See note 2 below.</span></span>|  
|<span data-ttu-id="96bec-1501">Methode</span><span class="sxs-lookup"><span data-stu-id="96bec-1501">Method</span></span>|<span data-ttu-id="96bec-1502">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-1502">No</span></span>|<span data-ttu-id="96bec-1503">Ja.</span><span class="sxs-lookup"><span data-stu-id="96bec-1503">Yes.</span></span> <span data-ttu-id="96bec-1504">Eine Methode (virtuelle und nicht virtuelle) möglich Ausblenden nach Namen oder nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1504">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="96bec-1505">Geschachtelter Typ</span><span class="sxs-lookup"><span data-stu-id="96bec-1505">Nested Type</span></span>|<span data-ttu-id="96bec-1506">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-1506">No</span></span>|<span data-ttu-id="96bec-1507">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-1507">No</span></span>|  
|<span data-ttu-id="96bec-1508">Eigenschaft</span><span class="sxs-lookup"><span data-stu-id="96bec-1508">Property</span></span>|<span data-ttu-id="96bec-1509">Nicht zutreffend</span><span class="sxs-lookup"><span data-stu-id="96bec-1509">Not applicable</span></span>|<span data-ttu-id="96bec-1510">Die allgemeinen Typsystem ist, dass die Vererbung ist identisch mit der Methoden, die die Eigenschaft zu implementieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-1510">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="96bec-1511">Reflektion behandelt Eigenschaften als nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1511">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-1512">Siehe Hinweis 2 weiter unten.</span><span class="sxs-lookup"><span data-stu-id="96bec-1512">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="96bec-1513">Nach Name und Signatur ausblenden berücksichtigt, dass alle Teile der Signatur, die benutzerdefinierten Modifizierer, einschließlich Typen, Parametertypen, Sentinels enthält und nicht verwaltete Aufrufkonventionen zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-1513">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="96bec-1514">Dies ist ein binärer Vergleich.</span><span class="sxs-lookup"><span data-stu-id="96bec-1514">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="96bec-1515">Für die Reflektion sind die Eigenschaften und Ereignisse nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1515">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-1516">Wenn Sie eine Eigenschaft mit dem ein Get und Set-Accessor in der Basisklasse haben, aber die abgeleitete Klasse nur einen Get-Accessor hat, die Eigenschaft der abgeleiteten Klasse blendet die Basisklasseneigenschaft aus, und nicht werden auf den Setter in der Basisklasse zugreifen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1516">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="96bec-1517">Benutzerdefinierte Attribute sind nicht Teil des allgemeinen Typsystems.</span><span class="sxs-lookup"><span data-stu-id="96bec-1517">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="96bec-1518">Die folgenden <xref:System.Reflection.BindingFlags> Filterflags können festgelegt werden, welche Methoden in die Suche einbezogen werden:</span><span class="sxs-lookup"><span data-stu-id="96bec-1518">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:</span></span>  
  
-   <span data-ttu-id="96bec-1519">Geben Sie `BindingFlags.Instance` oder `BindingFlags.Static` um ein Ergebnis zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-1519">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="96bec-1520">Geben Sie `BindingFlags.Public` öffentliche Methoden in der Suche eingeschlossen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1520">Specify `BindingFlags.Public` to include public methods in the search.</span></span>  
  
-   <span data-ttu-id="96bec-1521">Geben Sie `BindingFlags.NonPublic` nicht öffentliche Methoden (d.h. private, interne und geschützte Methoden) in die Suche eingeschlossen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1521">Specify `BindingFlags.NonPublic` to include nonpublic methods (that is, private, internal, and protected methods) in the search.</span></span>  
  
-   <span data-ttu-id="96bec-1522">Geben Sie `BindingFlags.FlattenHierarchy` sollen `public` und `protected` statische Member der Hierarchie; `private` statische Member in geerbten Klassen sind nicht enthalten.</span><span class="sxs-lookup"><span data-stu-id="96bec-1522">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="96bec-1523">Die folgenden <xref:System.Reflection.BindingFlags> Modifiziererflags können verwendet werden, um die Funktionsweise der Suche ändern:</span><span class="sxs-lookup"><span data-stu-id="96bec-1523">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="96bec-1524">`BindingFlags.IgnoreCase` um die Groß-/Kleinschreibung ignorieren `name`.</span><span class="sxs-lookup"><span data-stu-id="96bec-1524">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="96bec-1525">`BindingFlags.DeclaredOnly` Suchen Sie nur die Methoden, die deklariert die <xref:System.Type>, nicht die Methoden, die nur geerbt wurden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1525">`BindingFlags.DeclaredOnly` to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.</span></span>  
  
 <span data-ttu-id="96bec-1526">Weitere Informationen finden Sie unter <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="96bec-1526">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-1527">Sie können keine Parameter auslassen, beim Nachschlagen von Konstruktoren und Methoden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1527">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="96bec-1528">Sie können nur Parameter auslassen, beim Aufrufen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1528">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="96bec-1529">Wenn die aktuelle t: System.Type einen konstruierten generischen Typ darstellt, gibt diese Methode die <xref:System.Reflection.MethodInfo> mit den Typparametern, die durch die entsprechenden Typargumente ersetzt.</span><span class="sxs-lookup"><span data-stu-id="96bec-1529">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="96bec-1530">Wenn die aktuelle <xref:System.Type> stellt ein Typparameter in der Definition eines generischen Typs oder generische Methode, diese Methode sucht, die Methoden der klasseneinschränkung oder die Methoden der <xref:System.Object> liegt keine klasseneinschränkung.</span><span class="sxs-lookup"><span data-stu-id="96bec-1530">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-1531">Für generische Methoden enthalten nicht die Typargumente in `name`.</span><span class="sxs-lookup"><span data-stu-id="96bec-1531">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="96bec-1532">Z. B. der C#-Code `GetMember("MyMethod<int>")` sucht ein Element mit dem Textnamen "`MyMethod<int>`", und nicht für eine Methode namens `MyMethod` Listenfeldsteuerelement mit einem generisches Argument des Typs `int`.</span><span class="sxs-lookup"><span data-stu-id="96bec-1532">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-1533">Das folgende Beispiel sucht nach bestimmten Überladungen der `MethodA`, Angeben von bindungseinschränkungen, Aufrufkonventionen, und eine Vielzahl von Argumenttypen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1533">The following example finds specific overloads of `MethodA`, specifying binding constraints, calling conventions, and a variety of argument types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-1534">Die [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] Beispiel erfordert die `/unsafe` -Compileroption.</span><span class="sxs-lookup"><span data-stu-id="96bec-1534">The [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] example requires the `/unsafe` compiler option.</span></span>  
  
 [!code-cpp[Type_GetMethod3#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethod3/CPP/type_getmethod3.cpp#1)]
 [!code-csharp[Type_GetMethod3#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod3/CS/type_getmethod3.cs#1)]
 [!code-vb[Type_GetMethod3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethod3/VB/type_getmethod3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="96bec-1535">More than one method is found with the specified name and matching the specified binding constraints.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1535">More than one method is found with the specified name and matching the specified binding constraints.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96bec-1536">
            <paramref name="name" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1536">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="96bec-1537">-or-  <paramref name="types" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1537">-or-  <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="96bec-1538">-or-  One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1538">-or-  One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="96bec-1539">
            <paramref name="types" /> is multidimensional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1539">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="96bec-1540">-or-  <paramref name="modifiers" /> is multidimensional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1540">-or-  <paramref name="modifiers" /> is multidimensional.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.CallingConventions" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, int genericParameterCount, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.MethodInfo GetMethod(string name, int32 genericParameterCount, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Int32,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, int genericParameterCount, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="member this.GetMethod : string * int * System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, genericParameterCount, bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="genericParameterCount" Type="System.Int32" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="genericParameterCount">To be added.</param>
        <param name="bindingAttr">To be added.</param>
        <param name="binder">To be added.</param>
        <param name="callConvention">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethodImpl">
      <MemberSignature Language="C#" Value="protected abstract System.Reflection.MethodInfo GetMethodImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethodImpl(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Reflection::MethodInfo ^ GetMethodImpl(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetMethodImpl : string * System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethodImpl (name, bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="96bec-1541">The string containing the name of the method to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1541">The string containing the name of the method to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="96bec-1542">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1542">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="96bec-1543">-or-  Zero, to return <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1543">-or-  Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="96bec-1544">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1544">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="96bec-1545">-or-  A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1545">-or-  A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="callConvention">
          <span data-ttu-id="96bec-1546">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and what process cleans up the stack.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1546">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and what process cleans up the stack.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="96bec-1547">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1547">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span>
          </span>
          <span data-ttu-id="96bec-1548">-or-  An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1548">-or-  An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</span>
          </span>
          <span data-ttu-id="96bec-1549">-or-  <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1549">-or-  <see langword="null" />.</span>
          </span>
          <span data-ttu-id="96bec-1550">If <c>types</c> is <see langword="null" />, arguments are not matched.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1550">If <c>types</c> is <see langword="null" />, arguments are not matched.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="96bec-1551">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1551">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="96bec-1552">The default binder does not process this parameter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1552">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-1553">When overridden in a derived class, searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1553">When overridden in a derived class, searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-1554">An object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1554">An object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-1555">Obwohl nicht der Standardbinder verarbeitet <xref:System.Reflection.ParameterModifier> (die `modifiers` Parameter), können Sie die abstrakte <xref:System.Reflection.Binder?displayProperty=nameWithType> Klasse, um einen benutzerdefinierten Binder zu schreiben, der verarbeitet `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="96bec-1555">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="96bec-1556">`ParameterModifier` wird nur verwendet werden, wenn der Aufruf über COM-Interop und behandelt nur die Parameter, die als Verweis übergeben werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1556">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="96bec-1557">Wenn `types` `null` ist, wird keine Übereinstimmung von Argumenten überprüft.</span><span class="sxs-lookup"><span data-stu-id="96bec-1557">If `types` is `null`, arguments are not matched.</span></span>  
  
 <span data-ttu-id="96bec-1558">Die folgenden <xref:System.Reflection.BindingFlags> Filterflags können festgelegt werden, welche Methoden in die Suche einbezogen werden:</span><span class="sxs-lookup"><span data-stu-id="96bec-1558">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:</span></span>  
  
-   <span data-ttu-id="96bec-1559">Geben Sie `BindingFlags.Instance` oder `BindingFlags.Static` um ein Ergebnis zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-1559">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="96bec-1560">Geben Sie `BindingFlags.Public` öffentliche Methoden in der Suche eingeschlossen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1560">Specify `BindingFlags.Public` to include public methods in the search.</span></span>  
  
-   <span data-ttu-id="96bec-1561">Geben Sie `BindingFlags.NonPublic` auf nicht öffentliche Methoden (d.h. private, interne und geschützte Methoden) in die Suche einbeziehen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1561">Specify `BindingFlags.NonPublic` to include non-public methods (that is, private, internal, and protected methods) in the search.</span></span>  
  
-   <span data-ttu-id="96bec-1562">Geben Sie `BindingFlags.FlattenHierarchy` sollen `public` und `protected` statische Member der Hierarchie; `private` statische Member in geerbten Klassen sind nicht enthalten.</span><span class="sxs-lookup"><span data-stu-id="96bec-1562">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="96bec-1563">Die folgenden <xref:System.Reflection.BindingFlags> Modifiziererflags können verwendet werden, um die Funktionsweise der Suche ändern:</span><span class="sxs-lookup"><span data-stu-id="96bec-1563">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="96bec-1564">`BindingFlags.IgnoreCase` um die Groß-/Kleinschreibung ignorieren `name`.</span><span class="sxs-lookup"><span data-stu-id="96bec-1564">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="96bec-1565">`BindingFlags.DeclaredOnly` Suchen Sie nur die Methoden, die deklariert die <xref:System.Type>, nicht die Methoden, die nur geerbt wurden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1565">`BindingFlags.DeclaredOnly` to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.</span></span>  
  
 <span data-ttu-id="96bec-1566">Weitere Informationen finden Sie unter <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="96bec-1566">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="96bec-1567">More than one method is found with the specified name and matching the specified binding constraints.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1567">More than one method is found with the specified name and matching the specified binding constraints.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96bec-1568">
            <paramref name="name" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1568">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="96bec-1569">
            <paramref name="types" /> is multidimensional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1569">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="96bec-1570">-or-  <paramref name="modifiers" /> is multidimensional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1570">-or-  <paramref name="modifiers" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="96bec-1571">-or-  <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1571">-or-  <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="96bec-1572">The current type is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> or <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1572">The current type is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> or <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.CallingConventions" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethodImpl">
      <MemberSignature Language="C#" Value="protected virtual System.Reflection.MethodInfo GetMethodImpl (string name, int genericParameterCount, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethodImpl(string name, int32 genericParameterCount, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethodImpl(System.String,System.Int32,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Reflection::MethodInfo ^ GetMethodImpl(System::String ^ name, int genericParameterCount, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetMethodImpl : string * int * System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethodImpl : string * int * System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethodImpl (name, genericParameterCount, bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="genericParameterCount" Type="System.Int32" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="genericParameterCount">To be added.</param>
        <param name="bindingAttr">To be added.</param>
        <param name="binder">To be added.</param>
        <param name="callConvention">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMethods">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-1573">Gets the methods of the current <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1573">Gets the methods of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMethods">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo[] GetMethods ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetMethods() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethods" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethods () As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetMethods();" />
      <MemberSignature Language="F#" Value="abstract member GetMethods : unit -&gt; System.Reflection.MethodInfo[]&#xA;override this.GetMethods : unit -&gt; System.Reflection.MethodInfo[]" Usage="type.GetMethods " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethods</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="96bec-1574">Returns all the public methods of the current <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1574">Returns all the public methods of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-1575">An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all the public methods defined for the current <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1575">An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all the public methods defined for the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="96bec-1576">-or-  An empty array of type <see cref="T:System.Reflection.MethodInfo" />, if no public methods are defined for the current <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1576">-or-  An empty array of type <see cref="T:System.Reflection.MethodInfo" />, if no public methods are defined for the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-1577">Die <xref:System.Type.GetMethods%2A> Methode nicht zurückgegeben Methoden in einer bestimmten Reihenfolge, z. B. alphabetische oder Reihenfolge der Deklaration.</span><span class="sxs-lookup"><span data-stu-id="96bec-1577">The <xref:System.Type.GetMethods%2A> method does not return methods in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="96bec-1578">Ihr Code muss nicht abhängig von der Reihenfolge, in der Methoden zurückgegeben werden, da, die variieren kann.</span><span class="sxs-lookup"><span data-stu-id="96bec-1578">Your code must not depend on the order in which methods are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="96bec-1579">Konstruktoren sind nicht im Array der Methoden, die von diesem Aufruf zurückgegebenen enthalten.</span><span class="sxs-lookup"><span data-stu-id="96bec-1579">Constructors are not included in the array of methods returned by this call.</span></span> <span data-ttu-id="96bec-1580">Stellen Sie einen separaten Aufruf von `GetConstructors()` Konstruktormethoden abgerufen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1580">Make a separate call to `GetConstructors()` to get the constructor methods.</span></span>  
  
 <span data-ttu-id="96bec-1581">Die folgende Tabelle zeigt, welche Member einer Basisklasse von zurückgegeben werden die `Get` Methoden ein, wenn für einen Typ reflektieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-1581">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="96bec-1582">Memberart</span><span class="sxs-lookup"><span data-stu-id="96bec-1582">Member Type</span></span>|<span data-ttu-id="96bec-1583">Statisch</span><span class="sxs-lookup"><span data-stu-id="96bec-1583">Static</span></span>|<span data-ttu-id="96bec-1584">Nicht statische</span><span class="sxs-lookup"><span data-stu-id="96bec-1584">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="96bec-1585">Konstruktor</span><span class="sxs-lookup"><span data-stu-id="96bec-1585">Constructor</span></span>|<span data-ttu-id="96bec-1586">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-1586">No</span></span>|<span data-ttu-id="96bec-1587">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-1587">No</span></span>|  
|<span data-ttu-id="96bec-1588">Feld</span><span class="sxs-lookup"><span data-stu-id="96bec-1588">Field</span></span>|<span data-ttu-id="96bec-1589">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-1589">No</span></span>|<span data-ttu-id="96bec-1590">Ja.</span><span class="sxs-lookup"><span data-stu-id="96bec-1590">Yes.</span></span> <span data-ttu-id="96bec-1591">Ein Feld ist immer nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1591">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="96bec-1592">event</span><span class="sxs-lookup"><span data-stu-id="96bec-1592">Event</span></span>|<span data-ttu-id="96bec-1593">Nicht zutreffend</span><span class="sxs-lookup"><span data-stu-id="96bec-1593">Not applicable</span></span>|<span data-ttu-id="96bec-1594">Die allgemeinen Typsystem ist, dass die Vererbung ist identisch mit der Methoden, die die Eigenschaft zu implementieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-1594">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="96bec-1595">Reflektion behandelt Eigenschaften als nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1595">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-1596">Siehe Hinweis 2 weiter unten.</span><span class="sxs-lookup"><span data-stu-id="96bec-1596">See note 2 below.</span></span>|  
|<span data-ttu-id="96bec-1597">Methode</span><span class="sxs-lookup"><span data-stu-id="96bec-1597">Method</span></span>|<span data-ttu-id="96bec-1598">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-1598">No</span></span>|<span data-ttu-id="96bec-1599">Ja.</span><span class="sxs-lookup"><span data-stu-id="96bec-1599">Yes.</span></span> <span data-ttu-id="96bec-1600">Eine Methode (virtuelle und nicht virtuelle) möglich Ausblenden nach Namen oder nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1600">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="96bec-1601">Geschachtelter Typ</span><span class="sxs-lookup"><span data-stu-id="96bec-1601">Nested Type</span></span>|<span data-ttu-id="96bec-1602">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-1602">No</span></span>|<span data-ttu-id="96bec-1603">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-1603">No</span></span>|  
|<span data-ttu-id="96bec-1604">Eigenschaft</span><span class="sxs-lookup"><span data-stu-id="96bec-1604">Property</span></span>|<span data-ttu-id="96bec-1605">Nicht zutreffend</span><span class="sxs-lookup"><span data-stu-id="96bec-1605">Not applicable</span></span>|<span data-ttu-id="96bec-1606">Die allgemeinen Typsystem ist, dass die Vererbung ist identisch mit der Methoden, die die Eigenschaft zu implementieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-1606">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="96bec-1607">Reflektion behandelt Eigenschaften als nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1607">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-1608">Siehe Hinweis 2 weiter unten.</span><span class="sxs-lookup"><span data-stu-id="96bec-1608">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="96bec-1609">Nach Name und Signatur ausblenden berücksichtigt, dass alle Teile der Signatur, die benutzerdefinierten Modifizierer, einschließlich Typen, Parametertypen, Sentinels enthält und nicht verwaltete Aufrufkonventionen zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-1609">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="96bec-1610">Dies ist ein binärer Vergleich.</span><span class="sxs-lookup"><span data-stu-id="96bec-1610">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="96bec-1611">Für die Reflektion sind die Eigenschaften und Ereignisse nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1611">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-1612">Wenn Sie eine Eigenschaft mit dem ein Get und Set-Accessor in der Basisklasse haben, aber die abgeleitete Klasse nur einen Get-Accessor hat, die Eigenschaft der abgeleiteten Klasse blendet die Basisklasseneigenschaft aus, und nicht werden auf den Setter in der Basisklasse zugreifen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1612">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="96bec-1613">Benutzerdefinierte Attribute sind nicht Teil des allgemeinen Typsystems.</span><span class="sxs-lookup"><span data-stu-id="96bec-1613">Custom attributes are not part of the common type system.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-1614">Sie können keine Parameter auslassen, beim Nachschlagen von Konstruktoren und Methoden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1614">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="96bec-1615">Sie können nur Parameter auslassen, beim Aufrufen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1615">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="96bec-1616">Wenn die aktuelle t: System.Type einen konstruierten generischen Typ darstellt, gibt diese Methode die <xref:System.Reflection.MethodInfo> Objekte mit den Typparametern, die durch die entsprechenden Typargumente ersetzt.</span><span class="sxs-lookup"><span data-stu-id="96bec-1616">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="96bec-1617">Wenn die aktuelle <xref:System.Type> stellt ein Typparameter in der Definition eines generischen Typs oder generische Methode, diese Methode sucht, die Methoden der klasseneinschränkung oder die Methoden der <xref:System.Object> liegt keine klasseneinschränkung.</span><span class="sxs-lookup"><span data-stu-id="96bec-1617">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <Member MemberName="GetMethods">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetMethods(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethods(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetMethods (bindingAttr As BindingFlags) As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetMethods(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMethods : System.Reflection.BindingFlags -&gt; System.Reflection.MethodInfo[]" Usage="type.GetMethods bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethods(System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetMethods(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="96bec-1618">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1618">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="96bec-1619">-or-  Zero, to return <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1619">-or-  Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-1620">When overridden in a derived class, searches for the methods defined for the current <see cref="T:System.Type" />, using the specified binding constraints.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1620">When overridden in a derived class, searches for the methods defined for the current <see cref="T:System.Type" />, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-1621">An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all methods defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1621">An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all methods defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="96bec-1622">-or-  An empty array of type <see cref="T:System.Reflection.MethodInfo" />, if no methods are defined for the current <see cref="T:System.Type" />, or if none of the defined methods match the binding constraints.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1622">-or-  An empty array of type <see cref="T:System.Reflection.MethodInfo" />, if no methods are defined for the current <see cref="T:System.Type" />, or if none of the defined methods match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-1623">Die <xref:System.Type.GetMethods%2A> Methode nicht zurückgegeben Methoden in einer bestimmten Reihenfolge, z. B. alphabetische oder Reihenfolge der Deklaration.</span><span class="sxs-lookup"><span data-stu-id="96bec-1623">The <xref:System.Type.GetMethods%2A> method does not return methods in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="96bec-1624">Ihr Code muss nicht abhängig von der Reihenfolge, in der Methoden zurückgegeben werden, da, die variieren kann.</span><span class="sxs-lookup"><span data-stu-id="96bec-1624">Your code must not depend on the order in which methods are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="96bec-1625">Die folgenden <xref:System.Reflection.BindingFlags> Filterflags können festgelegt werden, welche Methoden in die Suche einbezogen werden:</span><span class="sxs-lookup"><span data-stu-id="96bec-1625">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:</span></span>  
  
-   <span data-ttu-id="96bec-1626">Geben Sie `BindingFlags.Instance` oder `BindingFlags.Static` um ein Ergebnis zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-1626">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="96bec-1627">Geben Sie `BindingFlags.Public` öffentliche Methoden in der Suche eingeschlossen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1627">Specify `BindingFlags.Public` to include public methods in the search.</span></span>  
  
-   <span data-ttu-id="96bec-1628">Geben Sie `BindingFlags.NonPublic` auf nicht öffentliche Methoden (d.h. private, interne und geschützte Methoden) in die Suche einbeziehen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1628">Specify `BindingFlags.NonPublic` to include non-public methods (that is, private, internal, and protected methods) in the search.</span></span> <span data-ttu-id="96bec-1629">Nur geschützte und interne Methoden in Basisklassen werden zurückgegeben. private Methoden in Basisklassen werden nicht zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-1629">Only protected and internal methods on base classes are returned; private methods on base classes are not returned.</span></span>  
  
-   <span data-ttu-id="96bec-1630">Geben Sie `BindingFlags.FlattenHierarchy` sollen `public` und `protected` statische Member der Hierarchie; `private` statische Member in geerbten Klassen sind nicht enthalten.</span><span class="sxs-lookup"><span data-stu-id="96bec-1630">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="96bec-1631">Die folgenden <xref:System.Reflection.BindingFlags> Modifiziererflags können verwendet werden, um die Funktionsweise der Suche ändern:</span><span class="sxs-lookup"><span data-stu-id="96bec-1631">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="96bec-1632">`BindingFlags.DeclaredOnly` Suchen Sie nur die Methoden, die deklariert die <xref:System.Type>, nicht die Methoden, die nur geerbt wurden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1632">`BindingFlags.DeclaredOnly` to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.</span></span>  
  
 <span data-ttu-id="96bec-1633">Weitere Informationen finden Sie unter <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="96bec-1633">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-1634">Sie können keine Parameter auslassen, beim Nachschlagen von Konstruktoren und Methoden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1634">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="96bec-1635">Sie können nur Parameter auslassen, beim Aufrufen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1635">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="96bec-1636">Wenn die aktuelle t: System.Type einen konstruierten generischen Typ darstellt, gibt diese Methode die <xref:System.Reflection.MethodInfo> Objekte mit den Typparametern, die durch die entsprechenden Typargumente ersetzt.</span><span class="sxs-lookup"><span data-stu-id="96bec-1636">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="96bec-1637">Wenn die aktuelle <xref:System.Type> stellt ein Typparameter in der Definition eines generischen Typs oder generische Methode, diese Methode sucht, die Methoden der klasseneinschränkung oder die Methoden der <xref:System.Object> liegt keine klasseneinschränkung.</span><span class="sxs-lookup"><span data-stu-id="96bec-1637">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-1638">Das folgende Beispiel erstellt eine Klasse mit zwei öffentliche Methoden und eine geschützte Methode, eine `Type` -Objekt entsprechende `MyTypeClass`Ruft alle öffentliche und nicht öffentlichen Methoden und ihre Namen angezeigt.</span><span class="sxs-lookup"><span data-stu-id="96bec-1638">The following example creates a class with two public methods and one protected method, creates a `Type` object corresponding to `MyTypeClass`, gets all public and non-public methods, and displays their names.</span></span>  
  
 [!code-cpp[Type_GetMethods2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethods2/CPP/type_getmethods2.cpp#1)]
 [!code-csharp[Type_GetMethods2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethods2/CS/type_getmethods2.cs#1)]
 [!code-vb[Type_GetMethods2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethods2/VB/type_getmethods2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNestedType">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-1639">Gets a specific type nested within the current <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1639">Gets a specific type nested within the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNestedType">
      <MemberSignature Language="C#" Value="public Type GetNestedType (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetNestedType(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetNestedType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNestedType (name As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetNestedType(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetNestedType : string -&gt; Type&#xA;override this.GetNestedType : string -&gt; Type" Usage="type.GetNestedType name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetNestedType(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="96bec-1640">The string containing the name of the nested type to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1640">The string containing the name of the nested type to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-1641">Searches for the public nested type with the specified name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1641">Searches for the public nested type with the specified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-1642">An object representing the public nested type with the specified name, if found; otherwise, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1642">An object representing the public nested type with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-1643">Die Suche nach `name` Groß-/Kleinschreibung beachtet wird.</span><span class="sxs-lookup"><span data-stu-id="96bec-1643">The search for `name` is case-sensitive.</span></span>  
  
 <span data-ttu-id="96bec-1644">Verwenden Sie den einfachen Namen der geschachtelten Klasse für `name`.</span><span class="sxs-lookup"><span data-stu-id="96bec-1644">Use the simple name of the nested class for `name`.</span></span> <span data-ttu-id="96bec-1645">Kennzeichnen Sie ihn nicht mit dem Namen der äußeren Klasse.</span><span class="sxs-lookup"><span data-stu-id="96bec-1645">Do not qualify it with the name of the outer class.</span></span> <span data-ttu-id="96bec-1646">Verwenden Sie für die geschachtelte generische Klasse, die der ergänzte Name – d.h., fügen Sie ein Graviszeichen und die Anzahl der generischen Argumente.</span><span class="sxs-lookup"><span data-stu-id="96bec-1646">For a generic nested class, use the mangled name — that is, append a grave accent and the number of generic arguments.</span></span> <span data-ttu-id="96bec-1647">Verwenden Sie z. B. die Zeichenfolge "innere\`1" zum Abrufen des generisches der geschachtelten Klasse `Inner<T>` (`Inner(Of T)` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="96bec-1647">For example, use the string "Inner\`1" to get the generic nested class `Inner<T>` (`Inner(Of T)` in Visual Basic).</span></span> <span data-ttu-id="96bec-1648">Fügen Sie keine sprachspezifische Syntax für Parameter vom Typ.</span><span class="sxs-lookup"><span data-stu-id="96bec-1648">Do not include language-specific syntax for type parameters.</span></span>  
  
 <span data-ttu-id="96bec-1649">Die folgende Tabelle zeigt, welche Member einer Basisklasse von zurückgegeben werden die `Get` Methoden ein, wenn für einen Typ reflektieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-1649">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="96bec-1650">Memberart</span><span class="sxs-lookup"><span data-stu-id="96bec-1650">Member Type</span></span>|<span data-ttu-id="96bec-1651">Statisch</span><span class="sxs-lookup"><span data-stu-id="96bec-1651">Static</span></span>|<span data-ttu-id="96bec-1652">Nicht statische</span><span class="sxs-lookup"><span data-stu-id="96bec-1652">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="96bec-1653">Konstruktor</span><span class="sxs-lookup"><span data-stu-id="96bec-1653">Constructor</span></span>|<span data-ttu-id="96bec-1654">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-1654">No</span></span>|<span data-ttu-id="96bec-1655">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-1655">No</span></span>|  
|<span data-ttu-id="96bec-1656">Feld</span><span class="sxs-lookup"><span data-stu-id="96bec-1656">Field</span></span>|<span data-ttu-id="96bec-1657">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-1657">No</span></span>|<span data-ttu-id="96bec-1658">Ja.</span><span class="sxs-lookup"><span data-stu-id="96bec-1658">Yes.</span></span> <span data-ttu-id="96bec-1659">Ein Feld ist immer nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1659">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="96bec-1660">event</span><span class="sxs-lookup"><span data-stu-id="96bec-1660">Event</span></span>|<span data-ttu-id="96bec-1661">Nicht zutreffend</span><span class="sxs-lookup"><span data-stu-id="96bec-1661">Not applicable</span></span>|<span data-ttu-id="96bec-1662">Die allgemeinen Typsystem ist, dass die Vererbung ist identisch mit der Methoden, die die Eigenschaft zu implementieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-1662">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="96bec-1663">Reflektion behandelt Eigenschaften als nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1663">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-1664">Siehe Hinweis 2 weiter unten.</span><span class="sxs-lookup"><span data-stu-id="96bec-1664">See note 2 below.</span></span>|  
|<span data-ttu-id="96bec-1665">Methode</span><span class="sxs-lookup"><span data-stu-id="96bec-1665">Method</span></span>|<span data-ttu-id="96bec-1666">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-1666">No</span></span>|<span data-ttu-id="96bec-1667">Ja.</span><span class="sxs-lookup"><span data-stu-id="96bec-1667">Yes.</span></span> <span data-ttu-id="96bec-1668">Eine Methode (virtuelle und nicht virtuelle) möglich Ausblenden nach Namen oder nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1668">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="96bec-1669">Geschachtelter Typ</span><span class="sxs-lookup"><span data-stu-id="96bec-1669">Nested Type</span></span>|<span data-ttu-id="96bec-1670">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-1670">No</span></span>|<span data-ttu-id="96bec-1671">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-1671">No</span></span>|  
|<span data-ttu-id="96bec-1672">Eigenschaft</span><span class="sxs-lookup"><span data-stu-id="96bec-1672">Property</span></span>|<span data-ttu-id="96bec-1673">Nicht zutreffend</span><span class="sxs-lookup"><span data-stu-id="96bec-1673">Not applicable</span></span>|<span data-ttu-id="96bec-1674">Die allgemeinen Typsystem ist, dass die Vererbung ist identisch mit der Methoden, die die Eigenschaft zu implementieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-1674">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="96bec-1675">Reflektion behandelt Eigenschaften als nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1675">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-1676">Siehe Hinweis 2 weiter unten.</span><span class="sxs-lookup"><span data-stu-id="96bec-1676">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="96bec-1677">Nach Name und Signatur ausblenden berücksichtigt, dass alle Teile der Signatur, die benutzerdefinierten Modifizierer, einschließlich Typen, Parametertypen, Sentinels enthält und nicht verwaltete Aufrufkonventionen zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-1677">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="96bec-1678">Dies ist ein binärer Vergleich.</span><span class="sxs-lookup"><span data-stu-id="96bec-1678">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="96bec-1679">Für die Reflektion sind die Eigenschaften und Ereignisse nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1679">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-1680">Wenn Sie eine Eigenschaft mit dem ein Get und Set-Accessor in der Basisklasse haben, aber die abgeleitete Klasse nur einen Get-Accessor hat, die Eigenschaft der abgeleiteten Klasse blendet die Basisklasseneigenschaft aus, und nicht werden auf den Setter in der Basisklasse zugreifen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1680">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="96bec-1681">Benutzerdefinierte Attribute sind nicht Teil des allgemeinen Typsystems.</span><span class="sxs-lookup"><span data-stu-id="96bec-1681">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="96bec-1682">Wenn die aktuelle <xref:System.Type> stellt einen Typparameter in der Definition einer generischen Typ-oder Methodendefinition, sucht diese Methode die geschachtelten Typen von der Class-Einschränkung.</span><span class="sxs-lookup"><span data-stu-id="96bec-1682">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the nested types of the class constraint.</span></span>  
  
 <span data-ttu-id="96bec-1683">Wenn ein geschachtelter Typ generisch ist, gibt diese Methode die generische Typdefinition.</span><span class="sxs-lookup"><span data-stu-id="96bec-1683">If a nested type is generic, this method returns its generic type definition.</span></span> <span data-ttu-id="96bec-1684">Dies gilt auch, wenn der einschließenden generischen Typs ein geschlossener konstruierter Typ ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-1684">This is true even if the enclosing generic type is a closed constructed type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-1685">Wenn die aktuelle <xref:System.Type> stellt einen generischen Typ definiert, die in c#, Visual Basic oder C++, dessen geschachtelten Typen sind alle generisch, auch wenn sie keine eigenen generischen Parameter verfügen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1685">If the current <xref:System.Type> represents a generic type defined in C#, Visual Basic, or C++, its nested types are all generic even if they have no generic parameters of their own.</span></span> <span data-ttu-id="96bec-1686">Dies gilt nicht unbedingt für geschachtelte Typen in dynamischen Assemblys definiert, oder Kompilieren mit der [Ilasm.exe (IL-Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span><span class="sxs-lookup"><span data-stu-id="96bec-1686">This is not necessarily true of nested types defined in dynamic assemblies or compiled with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
 <span data-ttu-id="96bec-1687">Weitere Informationen über geschachtelte generische Typen und zum Erstellen von geschachtelten generischer Typen von generischen Typdefinitionen, finden Sie unter <xref:System.Type.MakeGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="96bec-1687">For information on nested generic types, and on constructing nested generic types from their generic type definitions, see <xref:System.Type.MakeGenericType%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96bec-1688">
            <paramref name="name" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1688">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetNestedTypes" />
      </Docs>
    </Member>
    <Member MemberName="GetNestedType">
      <MemberSignature Language="C#" Value="public abstract Type GetNestedType (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetNestedType(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetNestedType(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetNestedType (name As String, bindingAttr As BindingFlags) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Type ^ GetNestedType(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetNestedType : string * System.Reflection.BindingFlags -&gt; Type" Usage="type.GetNestedType (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetNestedType(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="96bec-1689">The string containing the name of the nested type to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1689">The string containing the name of the nested type to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="96bec-1690">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1690">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="96bec-1691">-or-  Zero, to return <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1691">-or-  Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-1692">When overridden in a derived class, searches for the specified nested type, using the specified binding constraints.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1692">When overridden in a derived class, searches for the specified nested type, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-1693">An object representing the nested type that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1693">An object representing the nested type that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-1694">Verwenden Sie den einfachen Namen der geschachtelten Klasse für `name`.</span><span class="sxs-lookup"><span data-stu-id="96bec-1694">Use the simple name of the nested class for `name`.</span></span> <span data-ttu-id="96bec-1695">Kennzeichnen Sie ihn nicht mit dem Namen der äußeren Klasse.</span><span class="sxs-lookup"><span data-stu-id="96bec-1695">Do not qualify it with the name of the outer class.</span></span> <span data-ttu-id="96bec-1696">Verwenden Sie für die geschachtelte generische Klasse, die der ergänzte Name – d.h., fügen Sie ein Graviszeichen und die Anzahl der generischen Parameter.</span><span class="sxs-lookup"><span data-stu-id="96bec-1696">For a generic nested class, use the mangled name — that is, append a grave accent and the number of generic parameters.</span></span> <span data-ttu-id="96bec-1697">Verwenden Sie z. B. die Zeichenfolge "innere\`1" zum Abrufen des generisches der geschachtelten Klasse `Inner<T>` (`Inner(Of T)` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="96bec-1697">For example, use the string "Inner\`1" to get the generic nested class `Inner<T>` (`Inner(Of T)` in Visual Basic).</span></span> <span data-ttu-id="96bec-1698">Fügen Sie keine sprachspezifische Syntax für Parameter vom Typ.</span><span class="sxs-lookup"><span data-stu-id="96bec-1698">Do not include language-specific syntax for type parameters.</span></span>  
  
 <span data-ttu-id="96bec-1699">Die folgenden <xref:System.Reflection.BindingFlags> Flags können verwendet werden, definieren Sie die geschachtelte Filtertypen in die Suche eingeschlossen werden sollen:</span><span class="sxs-lookup"><span data-stu-id="96bec-1699">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which nested types to include in the search:</span></span>  
  
-   <span data-ttu-id="96bec-1700">Geben Sie <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> oder <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> ein Ergebnis zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-1700">You must specify either <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> or <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> to get a return.</span></span>  
  
-   <span data-ttu-id="96bec-1701">Geben Sie <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> öffentliche geschachtelte Typen in die Suche eingeschlossen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1701">Specify <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> to include public nested types in the search.</span></span>  
  
-   <span data-ttu-id="96bec-1702">Geben Sie <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> nicht öffentlichen geschachtelte Typen (d.h. private, interne und geschützte geschachtelte Typen) in die Suche eingeschlossen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1702">Specify <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> to include non-public nested types (that is, private, internal, and protected nested types) in the search.</span></span>  
  
 <span data-ttu-id="96bec-1703">Diese Methode gibt nur die geschachtelten Typen des aktuellen Typs zurück.</span><span class="sxs-lookup"><span data-stu-id="96bec-1703">This method returns only the nested types of the current type.</span></span> <span data-ttu-id="96bec-1704">Die Basisklassen des aktuellen Typs werden nicht durchsucht.</span><span class="sxs-lookup"><span data-stu-id="96bec-1704">It does not search the base classes of the current type.</span></span> <span data-ttu-id="96bec-1705">Um Typen zu suchen, die geschachtelt sind in Basisklassen, müssen Sie die Vererbungshierarchie aufrufen durchlaufen <xref:System.Type.GetNestedType%2A> auf jeder Ebene.</span><span class="sxs-lookup"><span data-stu-id="96bec-1705">To find types that are nested in base classes, you must walk the inheritance hierarchy, calling <xref:System.Type.GetNestedType%2A> at each level.</span></span>  
  
 <span data-ttu-id="96bec-1706"><xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> und <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> werden ignoriert.</span><span class="sxs-lookup"><span data-stu-id="96bec-1706"><xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> and <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> are ignored.</span></span>  
  
 <span data-ttu-id="96bec-1707">Beim Aufruf dieser Methode nur die <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> Flag oder nur die <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> Flag gibt zurück, der angegebenen geschachtelten Typen und alle anderen Flags sind nicht erforderlich.</span><span class="sxs-lookup"><span data-stu-id="96bec-1707">Calling this method with only the <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> flag or only the <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> flag will return the specified nested types and does not require any other flags.</span></span>  
  
 <span data-ttu-id="96bec-1708">Weitere Informationen finden Sie unter <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="96bec-1708">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="96bec-1709">Wenn die aktuelle <xref:System.Type> stellt einen Typparameter in der Definition einer generischen Typ-oder Methodendefinition, sucht diese Methode die geschachtelten Typen von der Class-Einschränkung.</span><span class="sxs-lookup"><span data-stu-id="96bec-1709">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the nested types of the class constraint.</span></span>  
  
 <span data-ttu-id="96bec-1710">Wenn ein geschachtelter Typ generisch ist, gibt diese Methode die generische Typdefinition.</span><span class="sxs-lookup"><span data-stu-id="96bec-1710">If a nested type is generic, this method returns its generic type definition.</span></span> <span data-ttu-id="96bec-1711">Dies gilt auch, wenn der einschließenden generischen Typs ein geschlossener konstruierter Typ ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-1711">This is true even if the enclosing generic type is a closed constructed type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-1712">Wenn die aktuelle <xref:System.Type> stellt einen generischen Typ definiert, die in c#, Visual Basic oder C++, dessen geschachtelten Typen sind alle generisch, auch wenn sie keine eigenen generischen Parameter verfügen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1712">If the current <xref:System.Type> represents a generic type defined in C#, Visual Basic, or C++, its nested types are all generic even if they have no generic parameters of their own.</span></span> <span data-ttu-id="96bec-1713">Dies gilt nicht unbedingt für geschachtelte Typen in dynamischen Assemblys definiert, oder Kompilieren mit der [Ilasm.exe (IL-Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span><span class="sxs-lookup"><span data-stu-id="96bec-1713">This is not necessarily true of nested types defined in dynamic assemblies or compiled with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
 <span data-ttu-id="96bec-1714">Weitere Informationen über geschachtelte generische Typen und zum Erstellen von geschachtelten generischer Typen von generischen Typdefinitionen, finden Sie unter <xref:System.Type.MakeGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="96bec-1714">For information on nested generic types, and on constructing nested generic types from their generic type definitions, see <xref:System.Type.MakeGenericType%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96bec-1715">
            <paramref name="name" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1715">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetNestedTypes" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNestedTypes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-1716">Gets the types nested within the current <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1716">Gets the types nested within the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNestedTypes">
      <MemberSignature Language="C#" Value="public Type[] GetNestedTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetNestedTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetNestedTypes" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNestedTypes () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetNestedTypes();" />
      <MemberSignature Language="F#" Value="abstract member GetNestedTypes : unit -&gt; Type[]&#xA;override this.GetNestedTypes : unit -&gt; Type[]" Usage="type.GetNestedTypes " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetNestedTypes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="96bec-1717">Returns the public types nested in the current <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1717">Returns the public types nested in the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-1718">An array of <see cref="T:System.Type" /> objects representing the public types nested in the current <see cref="T:System.Type" /> (the search is not recursive), or an empty array of type <see cref="T:System.Type" /> if no public types are nested in the current <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1718">An array of <see cref="T:System.Type" /> objects representing the public types nested in the current <see cref="T:System.Type" /> (the search is not recursive), or an empty array of type <see cref="T:System.Type" /> if no public types are nested in the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-1719">Die <xref:System.Type.GetNestedTypes%2A> Methode nicht zurückgegeben Typen in einer bestimmten Reihenfolge, z. B. alphabetische oder Reihenfolge der Deklaration.</span><span class="sxs-lookup"><span data-stu-id="96bec-1719">The <xref:System.Type.GetNestedTypes%2A> method does not return types in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="96bec-1720">Ihr Code muss nicht abhängig von der Reihenfolge, in der Typen zurückgegeben werden, da, die variieren kann.</span><span class="sxs-lookup"><span data-stu-id="96bec-1720">Your code must not depend on the order in which types are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="96bec-1721">Nur die öffentlichen Typen sofort in den aktuellen Typ geschachtelt werden zurückgegeben. die Suche ist nicht rekursiv.</span><span class="sxs-lookup"><span data-stu-id="96bec-1721">Only the public types immediately nested in the current type are returned; the search is not recursive.</span></span>  
  
 <span data-ttu-id="96bec-1722">Die folgende Tabelle zeigt, welche Member einer Basisklasse von zurückgegeben werden die `Get` Methoden ein, wenn für einen Typ reflektieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-1722">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="96bec-1723">Memberart</span><span class="sxs-lookup"><span data-stu-id="96bec-1723">Member Type</span></span>|<span data-ttu-id="96bec-1724">Statisch</span><span class="sxs-lookup"><span data-stu-id="96bec-1724">Static</span></span>|<span data-ttu-id="96bec-1725">Nicht statische</span><span class="sxs-lookup"><span data-stu-id="96bec-1725">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="96bec-1726">Konstruktor</span><span class="sxs-lookup"><span data-stu-id="96bec-1726">Constructor</span></span>|<span data-ttu-id="96bec-1727">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-1727">No</span></span>|<span data-ttu-id="96bec-1728">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-1728">No</span></span>|  
|<span data-ttu-id="96bec-1729">Feld</span><span class="sxs-lookup"><span data-stu-id="96bec-1729">Field</span></span>|<span data-ttu-id="96bec-1730">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-1730">No</span></span>|<span data-ttu-id="96bec-1731">Ja.</span><span class="sxs-lookup"><span data-stu-id="96bec-1731">Yes.</span></span> <span data-ttu-id="96bec-1732">Ein Feld ist immer nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1732">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="96bec-1733">event</span><span class="sxs-lookup"><span data-stu-id="96bec-1733">Event</span></span>|<span data-ttu-id="96bec-1734">Nicht zutreffend</span><span class="sxs-lookup"><span data-stu-id="96bec-1734">Not applicable</span></span>|<span data-ttu-id="96bec-1735">Die allgemeinen Typsystem ist, dass die Vererbung ist identisch mit der Methoden, die die Eigenschaft zu implementieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-1735">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="96bec-1736">Reflektion behandelt Eigenschaften als nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1736">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-1737">Siehe Hinweis 2 weiter unten.</span><span class="sxs-lookup"><span data-stu-id="96bec-1737">See note 2 below.</span></span>|  
|<span data-ttu-id="96bec-1738">Methode</span><span class="sxs-lookup"><span data-stu-id="96bec-1738">Method</span></span>|<span data-ttu-id="96bec-1739">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-1739">No</span></span>|<span data-ttu-id="96bec-1740">Ja.</span><span class="sxs-lookup"><span data-stu-id="96bec-1740">Yes.</span></span> <span data-ttu-id="96bec-1741">Eine Methode (virtuelle und nicht virtuelle) möglich Ausblenden nach Namen oder nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1741">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="96bec-1742">Geschachtelter Typ</span><span class="sxs-lookup"><span data-stu-id="96bec-1742">Nested Type</span></span>|<span data-ttu-id="96bec-1743">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-1743">No</span></span>|<span data-ttu-id="96bec-1744">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-1744">No</span></span>|  
|<span data-ttu-id="96bec-1745">Eigenschaft</span><span class="sxs-lookup"><span data-stu-id="96bec-1745">Property</span></span>|<span data-ttu-id="96bec-1746">Nicht zutreffend</span><span class="sxs-lookup"><span data-stu-id="96bec-1746">Not applicable</span></span>|<span data-ttu-id="96bec-1747">Die allgemeinen Typsystem ist, dass die Vererbung ist identisch mit der Methoden, die die Eigenschaft zu implementieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-1747">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="96bec-1748">Reflektion behandelt Eigenschaften als nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1748">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-1749">Siehe Hinweis 2 weiter unten.</span><span class="sxs-lookup"><span data-stu-id="96bec-1749">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="96bec-1750">Nach Name und Signatur ausblenden berücksichtigt, dass alle Teile der Signatur, die benutzerdefinierten Modifizierer, einschließlich Typen, Parametertypen, Sentinels enthält und nicht verwaltete Aufrufkonventionen zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-1750">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="96bec-1751">Dies ist ein binärer Vergleich.</span><span class="sxs-lookup"><span data-stu-id="96bec-1751">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="96bec-1752">Für die Reflektion sind die Eigenschaften und Ereignisse nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1752">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-1753">Wenn Sie eine Eigenschaft mit dem ein Get und Set-Accessor in der Basisklasse haben, aber die abgeleitete Klasse nur einen Get-Accessor hat, die Eigenschaft der abgeleiteten Klasse blendet die Basisklasseneigenschaft aus, und nicht werden auf den Setter in der Basisklasse zugreifen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1753">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="96bec-1754">Benutzerdefinierte Attribute sind nicht Teil des allgemeinen Typsystems.</span><span class="sxs-lookup"><span data-stu-id="96bec-1754">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="96bec-1755">Wenn die aktuelle <xref:System.Type> stellt einen Typparameter in der Definition einer generischen Typ-oder Methodendefinition, sucht diese Methode die geschachtelten Typen von der Class-Einschränkung.</span><span class="sxs-lookup"><span data-stu-id="96bec-1755">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the nested types of the class constraint.</span></span>  
  
 <span data-ttu-id="96bec-1756">Wenn ein geschachtelter Typ generisch ist, gibt diese Methode die generische Typdefinition.</span><span class="sxs-lookup"><span data-stu-id="96bec-1756">If a nested type is generic, this method returns its generic type definition.</span></span> <span data-ttu-id="96bec-1757">Dies gilt auch, wenn der einschließenden generischen Typs ein geschlossener konstruierter Typ ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-1757">This is true even if the enclosing generic type is a closed constructed type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-1758">Wenn die aktuelle <xref:System.Type> stellt einen generischen Typ definiert, die in c#, Visual Basic oder C++, dessen geschachtelten Typen sind alle generisch, auch wenn sie keine eigenen generischen Parameter verfügen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1758">If the current <xref:System.Type> represents a generic type defined in C#, Visual Basic, or C++, its nested types are all generic even if they have no generic parameters of their own.</span></span> <span data-ttu-id="96bec-1759">Dies gilt nicht unbedingt für geschachtelte Typen in dynamischen Assemblys definiert, oder Kompilieren mit der [Ilasm.exe (IL-Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span><span class="sxs-lookup"><span data-stu-id="96bec-1759">This is not necessarily true of nested types defined in dynamic assemblies or compiled with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
 <span data-ttu-id="96bec-1760">Weitere Informationen über geschachtelte generische Typen und zum Erstellen von geschachtelten generischer Typen von generischen Typdefinitionen, finden Sie unter <xref:System.Type.MakeGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="96bec-1760">For information on nested generic types, and on constructing nested generic types from their generic type definitions, see <xref:System.Type.MakeGenericType%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-1761">Das folgende Beispiel definiert eine geschachtelte Klasse und ein `struct` in `MyClass`, und anschließend ruft Objekte der geschachtelten Typen mit dem Typ der `MyClass`.</span><span class="sxs-lookup"><span data-stu-id="96bec-1761">The following example defines a nested class and a `struct` in `MyClass`, and then obtains objects of the nested types using the type of `MyClass`.</span></span>  
  
 [!code-cpp[Type_GetNestedTypes#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetNestedTypes/CPP/type_getnestedtypes.cpp#1)]
 [!code-csharp[Type_GetNestedTypes#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetNestedTypes/CS/type_getnestedtypes.cs#1)]
 [!code-vb[Type_GetNestedTypes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetNestedTypes/VB/type_getnestedtypes.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.GetNestedType(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetNestedTypes">
      <MemberSignature Language="C#" Value="public abstract Type[] GetNestedTypes (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetNestedTypes(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetNestedTypes(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetNestedTypes (bindingAttr As BindingFlags) As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;Type ^&gt; ^ GetNestedTypes(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetNestedTypes : System.Reflection.BindingFlags -&gt; Type[]" Usage="type.GetNestedTypes bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetNestedTypes(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="96bec-1762">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1762">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="96bec-1763">-or-  Zero, to return <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1763">-or-  Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-1764">When overridden in a derived class, searches for the types nested in the current <see cref="T:System.Type" />, using the specified binding constraints.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1764">When overridden in a derived class, searches for the types nested in the current <see cref="T:System.Type" />, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-1765">An array of <see cref="T:System.Type" /> objects representing all the types nested in the current <see cref="T:System.Type" /> that match the specified binding constraints (the search is not recursive), or an empty array of type <see cref="T:System.Type" />, if no nested types are found that match the binding constraints.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1765">An array of <see cref="T:System.Type" /> objects representing all the types nested in the current <see cref="T:System.Type" /> that match the specified binding constraints (the search is not recursive), or an empty array of type <see cref="T:System.Type" />, if no nested types are found that match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-1766">Die Suche nach geschachtelte Typen ist nicht rekursiv.</span><span class="sxs-lookup"><span data-stu-id="96bec-1766">The search for nested types is not recursive.</span></span>  
  
 <span data-ttu-id="96bec-1767">Die <xref:System.Type.GetNestedTypes%2A> Methode nicht zurückgegeben Typen in einer bestimmten Reihenfolge, z. B. alphabetische oder Reihenfolge der Deklaration.</span><span class="sxs-lookup"><span data-stu-id="96bec-1767">The <xref:System.Type.GetNestedTypes%2A> method does not return types in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="96bec-1768">Ihr Code muss nicht abhängig von der Reihenfolge, in der Typen zurückgegeben werden, da, die variieren kann.</span><span class="sxs-lookup"><span data-stu-id="96bec-1768">Your code must not depend on the order in which types are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="96bec-1769">Die folgenden <xref:System.Reflection.BindingFlags> Flags können verwendet werden, definieren Sie die geschachtelte Filtertypen in die Suche eingeschlossen werden sollen:</span><span class="sxs-lookup"><span data-stu-id="96bec-1769">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which nested types to include in the search:</span></span>  
  
-   <span data-ttu-id="96bec-1770">Geben Sie <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> oder <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> ein Ergebnis zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-1770">You must specify either <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> or <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> to get a return.</span></span>  
  
-   <span data-ttu-id="96bec-1771">Geben Sie <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> öffentliche geschachtelte Typen in die Suche eingeschlossen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1771">Specify <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> to include public nested types in the search.</span></span>  
  
-   <span data-ttu-id="96bec-1772">Geben Sie <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> nicht öffentlichen geschachtelte Typen (d.h. private, interne und geschützte geschachtelte Typen) in die Suche eingeschlossen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1772">Specify <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> to include non-public nested types (that is, private, internal, and protected nested types) in the search.</span></span>  
  
 <span data-ttu-id="96bec-1773">Diese Methode gibt nur die geschachtelten Typen des aktuellen Typs zurück.</span><span class="sxs-lookup"><span data-stu-id="96bec-1773">This method returns only the nested types of the current type.</span></span> <span data-ttu-id="96bec-1774">Die Basisklassen des aktuellen Typs werden nicht durchsucht.</span><span class="sxs-lookup"><span data-stu-id="96bec-1774">It does not search the base classes of the current type.</span></span> <span data-ttu-id="96bec-1775">Um Typen zu suchen, die geschachtelt sind in Basisklassen, müssen Sie die Vererbungshierarchie aufrufen durchlaufen <xref:System.Type.GetNestedTypes%2A> auf jeder Ebene.</span><span class="sxs-lookup"><span data-stu-id="96bec-1775">To find types that are nested in base classes, you must walk the inheritance hierarchy, calling <xref:System.Type.GetNestedTypes%2A> at each level.</span></span>  
  
 <span data-ttu-id="96bec-1776"><xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> und <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> werden ignoriert.</span><span class="sxs-lookup"><span data-stu-id="96bec-1776"><xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> and <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> are ignored.</span></span>  
  
 <span data-ttu-id="96bec-1777">Beim Aufruf dieser Methode nur die <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> Flag oder nur die <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> Flag gibt zurück, der angegebenen geschachtelten Typen und alle anderen Flags sind nicht erforderlich.</span><span class="sxs-lookup"><span data-stu-id="96bec-1777">Calling this method with only the <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> flag or only the <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> flag will return the specified nested types and does not require any other flags.</span></span>  
  
 <span data-ttu-id="96bec-1778">Weitere Informationen finden Sie unter <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="96bec-1778">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="96bec-1779">Wenn die aktuelle <xref:System.Type> stellt einen Typparameter in der Definition einer generischen Typ-oder Methodendefinition, sucht diese Methode die geschachtelten Typen von der Class-Einschränkung.</span><span class="sxs-lookup"><span data-stu-id="96bec-1779">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the nested types of the class constraint.</span></span>  
  
 <span data-ttu-id="96bec-1780">Wenn ein geschachtelter Typ generisch ist, gibt diese Methode die generische Typdefinition.</span><span class="sxs-lookup"><span data-stu-id="96bec-1780">If a nested type is generic, this method returns its generic type definition.</span></span> <span data-ttu-id="96bec-1781">Dies gilt auch, wenn der einschließenden generischen Typs ein geschlossener konstruierter Typ ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-1781">This is true even if the enclosing generic type is a closed constructed type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-1782">Wenn die aktuelle <xref:System.Type> stellt einen generischen Typ definiert, die in c#, Visual Basic oder C++, dessen geschachtelten Typen sind alle generisch, auch wenn sie keine eigenen generischen Parameter verfügen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1782">If the current <xref:System.Type> represents a generic type defined in C#, Visual Basic, or C++, its nested types are all generic even if they have no generic parameters of their own.</span></span> <span data-ttu-id="96bec-1783">Dies gilt nicht unbedingt für geschachtelte Typen in dynamischen Assemblys definiert, oder Kompilieren mit der [Ilasm.exe (IL-Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span><span class="sxs-lookup"><span data-stu-id="96bec-1783">This is not necessarily true of nested types defined in dynamic assemblies or compiled with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
 <span data-ttu-id="96bec-1784">Weitere Informationen über geschachtelte generische Typen und zum Erstellen von geschachtelten generischer Typen von generischen Typdefinitionen, finden Sie unter <xref:System.Type.MakeGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="96bec-1784">For information on nested generic types, and on constructing nested generic types from their generic type definitions, see <xref:System.Type.MakeGenericType%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-1785">Im folgende Beispiel werden zwei geschachtelte öffentliche Klassen und zwei geschachtelte geschützten Klassen erstellt und zeigt Informationen zu Klassen, die die angegebenen bindungseinschränkungen entsprechen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1785">The following example creates two nested public classes and two nested protected classes, and displays information for classes that match the specified binding constraints.</span></span>  
  
 [!code-cpp[Type_GetNestedClassesAbs#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetNestedClassesAbs/CPP/type_getnestedclassesabs.cpp#1)]
 [!code-csharp[Type_GetNestedClassesAbs#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetNestedClassesAbs/CS/type_getnestedclassesabs.cs#1)]
 [!code-vb[Type_GetNestedClassesAbs#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetNestedClassesAbs/VB/type_getnestedclassesabs.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetNestedType(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetProperties">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-1786">Gets the properties of the current <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1786">Gets the properties of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo[] GetProperties ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo[] GetProperties() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperties" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperties () As PropertyInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::PropertyInfo ^&gt; ^ GetProperties();" />
      <MemberSignature Language="F#" Value="abstract member GetProperties : unit -&gt; System.Reflection.PropertyInfo[]&#xA;override this.GetProperties : unit -&gt; System.Reflection.PropertyInfo[]" Usage="type.GetProperties " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperties</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="96bec-1787">Returns all the public properties of the current <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1787">Returns all the public properties of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-1788">An array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing all public properties of the current <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1788">An array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing all public properties of the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="96bec-1789">-or-  An empty array of type <see cref="T:System.Reflection.PropertyInfo" />, if the current <see cref="T:System.Type" /> does not have public properties.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1789">-or-  An empty array of type <see cref="T:System.Reflection.PropertyInfo" />, if the current <see cref="T:System.Type" /> does not have public properties.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-1790">Das Aufrufen dieser Überladung entspricht dem Aufrufen der <xref:System.Type.GetProperties%28System.Reflection.BindingFlags%29> -Überladung mit einem `bindingAttr` Argument gleich `BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public` in C# geschrieben und `BindingFlags.Instance Or BindingFlags.Static Or BindingFlags.Public` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="96bec-1790">Calling this overload is equivalent to calling the <xref:System.Type.GetProperties%28System.Reflection.BindingFlags%29> overload with a `bindingAttr` argument equal to `BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public` in C# and  `BindingFlags.Instance Or BindingFlags.Static Or BindingFlags.Public` in Visual Basic.</span></span> <span data-ttu-id="96bec-1791">Gibt alle öffentliche und statische Eigenschaften, die durch den vom aktuellen Typ definiert <xref:System.Type> Objekt als auch solche, die von Basistypen geerbt.</span><span class="sxs-lookup"><span data-stu-id="96bec-1791">It returns all public instance and static properties, both those defined by the type represented by the current <xref:System.Type> object as well as those inherited from its base types.</span></span>  
  
 <span data-ttu-id="96bec-1792">Eine Eigenschaft ist Reflektion als öffentlich betrachtet, wenn es sich um mindestens einen Accessor enthält, die öffentlich ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-1792">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="96bec-1793">Andernfalls wird die Eigenschaft als privat betrachtet, und Sie müssen <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic kombinieren Sie die Werte mit `Or`) anfordern.</span><span class="sxs-lookup"><span data-stu-id="96bec-1793">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="96bec-1794">Die <xref:System.Type.GetProperties%2A> Methode nicht zurückgegeben Eigenschaften in einer bestimmten Reihenfolge, z. B. alphabetische oder Reihenfolge der Deklaration.</span><span class="sxs-lookup"><span data-stu-id="96bec-1794">The <xref:System.Type.GetProperties%2A> method does not return properties in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="96bec-1795">Ihr Code muss nicht abhängig von der Reihenfolge, in der Eigenschaften zurückgegeben werden, da, die variieren kann.</span><span class="sxs-lookup"><span data-stu-id="96bec-1795">Your code must not depend on the order in which properties are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="96bec-1796">Die folgende Tabelle zeigt, welche Member einer Basisklasse von zurückgegeben werden die `Get` Methoden ein, wenn für einen Typ reflektieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-1796">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="96bec-1797">Memberart</span><span class="sxs-lookup"><span data-stu-id="96bec-1797">Member Type</span></span>|<span data-ttu-id="96bec-1798">Statisch</span><span class="sxs-lookup"><span data-stu-id="96bec-1798">Static</span></span>|<span data-ttu-id="96bec-1799">Nicht statische</span><span class="sxs-lookup"><span data-stu-id="96bec-1799">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="96bec-1800">Konstruktor</span><span class="sxs-lookup"><span data-stu-id="96bec-1800">Constructor</span></span>|<span data-ttu-id="96bec-1801">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-1801">No</span></span>|<span data-ttu-id="96bec-1802">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-1802">No</span></span>|  
|<span data-ttu-id="96bec-1803">Feld</span><span class="sxs-lookup"><span data-stu-id="96bec-1803">Field</span></span>|<span data-ttu-id="96bec-1804">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-1804">No</span></span>|<span data-ttu-id="96bec-1805">Ja.</span><span class="sxs-lookup"><span data-stu-id="96bec-1805">Yes.</span></span> <span data-ttu-id="96bec-1806">Ein Feld ist immer nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1806">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="96bec-1807">event</span><span class="sxs-lookup"><span data-stu-id="96bec-1807">Event</span></span>|<span data-ttu-id="96bec-1808">Nicht zutreffend</span><span class="sxs-lookup"><span data-stu-id="96bec-1808">Not applicable</span></span>|<span data-ttu-id="96bec-1809">Die allgemeinen Typsystem ist, dass die Vererbung ist identisch mit der Methoden, die die Eigenschaft zu implementieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-1809">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="96bec-1810">Reflektion behandelt Eigenschaften als nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1810">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-1811">Siehe Hinweis 2 weiter unten.</span><span class="sxs-lookup"><span data-stu-id="96bec-1811">See note 2 below.</span></span>|  
|<span data-ttu-id="96bec-1812">Methode</span><span class="sxs-lookup"><span data-stu-id="96bec-1812">Method</span></span>|<span data-ttu-id="96bec-1813">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-1813">No</span></span>|<span data-ttu-id="96bec-1814">Ja.</span><span class="sxs-lookup"><span data-stu-id="96bec-1814">Yes.</span></span> <span data-ttu-id="96bec-1815">Eine Methode (virtuelle und nicht virtuelle) möglich Ausblenden nach Namen oder nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1815">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="96bec-1816">Geschachtelter Typ</span><span class="sxs-lookup"><span data-stu-id="96bec-1816">Nested Type</span></span>|<span data-ttu-id="96bec-1817">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-1817">No</span></span>|<span data-ttu-id="96bec-1818">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-1818">No</span></span>|  
|<span data-ttu-id="96bec-1819">Eigenschaft</span><span class="sxs-lookup"><span data-stu-id="96bec-1819">Property</span></span>|<span data-ttu-id="96bec-1820">Nicht zutreffend</span><span class="sxs-lookup"><span data-stu-id="96bec-1820">Not applicable</span></span>|<span data-ttu-id="96bec-1821">Die allgemeinen Typsystem ist, dass die Vererbung ist identisch mit der Methoden, die die Eigenschaft zu implementieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-1821">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="96bec-1822">Reflektion behandelt Eigenschaften als nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1822">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-1823">Siehe Hinweis 2 weiter unten.</span><span class="sxs-lookup"><span data-stu-id="96bec-1823">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="96bec-1824">Nach Name und Signatur ausblenden berücksichtigt, dass alle Teile der Signatur, die benutzerdefinierten Modifizierer, einschließlich Typen, Parametertypen, Sentinels enthält und nicht verwaltete Aufrufkonventionen zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-1824">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="96bec-1825">Dies ist ein binärer Vergleich.</span><span class="sxs-lookup"><span data-stu-id="96bec-1825">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="96bec-1826">Für die Reflektion sind die Eigenschaften und Ereignisse nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1826">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-1827">Wenn Sie eine Eigenschaft mit dem ein Get und Set-Accessor in der Basisklasse haben, aber die abgeleitete Klasse nur einen Get-Accessor hat, die Eigenschaft der abgeleiteten Klasse blendet die Basisklasseneigenschaft aus, und nicht werden auf den Setter in der Basisklasse zugreifen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1827">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="96bec-1828">Benutzerdefinierte Attribute sind nicht Teil des allgemeinen Typsystems.</span><span class="sxs-lookup"><span data-stu-id="96bec-1828">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="96bec-1829">Wenn die aktuelle t: System.Type einen konstruierten generischen Typ darstellt, gibt diese Methode die <xref:System.Reflection.PropertyInfo> Objekte mit den Typparametern, die durch die entsprechenden Typargumente ersetzt.</span><span class="sxs-lookup"><span data-stu-id="96bec-1829">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="96bec-1830">Wenn die aktuelle <xref:System.Type> stellt einen Typparameter in der Definition einer generischen Typ-oder Methodendefinition, sucht diese Methode die Eigenschaften der Class-Einschränkung.</span><span class="sxs-lookup"><span data-stu-id="96bec-1830">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-1831">Im folgenden Beispiel wird die Verwendung der `GetProperties`-Methode gezeigt.</span><span class="sxs-lookup"><span data-stu-id="96bec-1831">The following example demonstrates the use of the `GetProperties` method.</span></span>  
  
 [!code-cpp[Type_GetTypeCode#2](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeCode/CPP/type_gettypecode.cpp#2)]
 [!code-csharp[Type_GetTypeCode#2](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeCode/CS/type_gettypecode.cs#2)]
 [!code-vb[Type_GetTypeCode#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeCode/VB/type_gettypecode.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo[] GetProperties(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetProperties (bindingAttr As BindingFlags) As PropertyInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::PropertyInfo ^&gt; ^ GetProperties(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetProperties : System.Reflection.BindingFlags -&gt; System.Reflection.PropertyInfo[]" Usage="type.GetProperties bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperties(System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetProperties(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="96bec-1832">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1832">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="96bec-1833">-or-  Zero, to return <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1833">-or-  Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-1834">When overridden in a derived class, searches for the properties of the current <see cref="T:System.Type" />, using the specified binding constraints.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1834">When overridden in a derived class, searches for the properties of the current <see cref="T:System.Type" />, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-1835">An array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing all properties of the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1835">An array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing all properties of the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="96bec-1836">-or-  An empty array of type <see cref="T:System.Reflection.PropertyInfo" />, if the current <see cref="T:System.Type" /> does not have properties, or if none of the properties match the binding constraints.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1836">-or-  An empty array of type <see cref="T:System.Reflection.PropertyInfo" />, if the current <see cref="T:System.Type" /> does not have properties, or if none of the properties match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-1837">Eine Eigenschaft ist Reflektion als öffentlich betrachtet, wenn es sich um mindestens einen Accessor enthält, die öffentlich ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-1837">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="96bec-1838">Andernfalls wird die Eigenschaft als privat betrachtet, und Sie müssen <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic kombinieren Sie die Werte mit `Or`) anfordern.</span><span class="sxs-lookup"><span data-stu-id="96bec-1838">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="96bec-1839">Die <xref:System.Type.GetProperties%2A> Methode nicht zurückgegeben Eigenschaften in einer bestimmten Reihenfolge, z. B. alphabetische oder Reihenfolge der Deklaration.</span><span class="sxs-lookup"><span data-stu-id="96bec-1839">The <xref:System.Type.GetProperties%2A> method does not return properties in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="96bec-1840">Ihr Code muss nicht abhängig von der Reihenfolge, in der Eigenschaften zurückgegeben werden, da, die variieren kann.</span><span class="sxs-lookup"><span data-stu-id="96bec-1840">Your code must not depend on the order in which properties are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="96bec-1841">Die folgenden <xref:System.Reflection.BindingFlags> Flags können verwendet werden, definieren Sie die geschachtelte Filtertypen in die Suche eingeschlossen werden sollen:</span><span class="sxs-lookup"><span data-stu-id="96bec-1841">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which nested types to include in the search:</span></span>  
  
-   <span data-ttu-id="96bec-1842">Geben Sie `BindingFlags.Instance` oder `BindingFlags.Static` um ein Ergebnis zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-1842">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="96bec-1843">Geben Sie `BindingFlags.Public` öffentliche Eigenschaften in die Suche eingeschlossen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1843">Specify `BindingFlags.Public` to include public properties in the search.</span></span>  
  
-   <span data-ttu-id="96bec-1844">Geben Sie `BindingFlags.NonPublic` auf nicht öffentliche Eigenschaften (d.h. private, interne und geschützten Eigenschaften) in die Suche einbeziehen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1844">Specify `BindingFlags.NonPublic` to include non-public properties (that is, private, internal, and protected properties) in the search.</span></span> <span data-ttu-id="96bec-1845">Nur geschützte und interne Eigenschaften für Basisklassen werden zurückgegeben. Private Eigenschaften für Basisklassen werden nicht zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-1845">Only protected and internal properties on base classes are returned; private properties on base classes are not returned.</span></span>  
  
-   <span data-ttu-id="96bec-1846">Geben Sie `BindingFlags.FlattenHierarchy` sollen `public` und `protected` statische Member der Hierarchie; `private` statische Member in geerbten Klassen sind nicht enthalten.</span><span class="sxs-lookup"><span data-stu-id="96bec-1846">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="96bec-1847">Die folgenden <xref:System.Reflection.BindingFlags> Modifiziererflags können verwendet werden, um die Funktionsweise der Suche ändern:</span><span class="sxs-lookup"><span data-stu-id="96bec-1847">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="96bec-1848">`BindingFlags.DeclaredOnly` Suchen Sie nur die deklarierten Eigenschaften der <xref:System.Type>, nicht über Eigenschaften, die nur geerbt wurden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1848">`BindingFlags.DeclaredOnly` to search only the properties declared on the <xref:System.Type>, not properties that were simply inherited.</span></span>  
  
 <span data-ttu-id="96bec-1849">Weitere Informationen finden Sie unter <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="96bec-1849">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="96bec-1850">Eine Eigenschaft ist Reflektion als öffentlich betrachtet, wenn es sich um mindestens einen Accessor enthält, die öffentlich ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-1850">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="96bec-1851">Andernfalls wird die Eigenschaft als privat betrachtet, und Sie müssen <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic kombinieren Sie die Werte mit `Or`) anfordern.</span><span class="sxs-lookup"><span data-stu-id="96bec-1851">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="96bec-1852">Wenn die aktuelle t: System.Type einen konstruierten generischen Typ darstellt, gibt diese Methode die <xref:System.Reflection.PropertyInfo> Objekte mit den Typparametern, die durch die entsprechenden Typargumente ersetzt.</span><span class="sxs-lookup"><span data-stu-id="96bec-1852">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="96bec-1853">Wenn die aktuelle <xref:System.Type> stellt einen Typparameter in der Definition einer generischen Typ-oder Methodendefinition, sucht diese Methode die Eigenschaften der Class-Einschränkung.</span><span class="sxs-lookup"><span data-stu-id="96bec-1853">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-1854">Das folgende Beispiel definiert eine Klasse namens `PropertyClass` sechs Eigenschaften enthält: zwei sind öffentlich, ist eine privat, eine geschützt ist, eine interne ist (`Friend` in Visual Basic), und eine interne geschützt ist (`Protected Friend` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="96bec-1854">The following example defines a class named `PropertyClass` that includes six properties: two are public, one is private, one is protected, one is internal (`Friend` in Visual Basic), and one is protected internal (`Protected Friend` in Visual Basic).</span></span> <span data-ttu-id="96bec-1855">Anschließend werden einige grundlegende Informationen (dem Eigenschaftennamen und der Typ, ob es sich um Lese-/Schreibzugriff, und die Sichtbarkeit der seine `get` und `set` Accessoren) für die Eigenschaften, die die angegebenen bindungseinschränkungen entsprechen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1855">It then displays some basic property information (the property name and type, whether it is read/write, and the visibility of its `get` and `set` accessors) for the properties that match the specified binding constraints.</span></span>  
  
 [!code-cpp[Type_GetProperties2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperties2/CPP/type_getproperties2.cpp#1)]
 [!code-csharp[Type_GetProperties2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperties2/CS/type_getproperties2.cs#1)]
 [!code-vb[Type_GetProperties2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperties2/VB/type_getproperties2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetProperty">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-1856">Gets a specific property of the current <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1856">Gets a specific property of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string -&gt; System.Reflection.PropertyInfo" Usage="type.GetProperty name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="96bec-1857">The string containing the name of the public property to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1857">The string containing the name of the public property to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-1858">Searches for the public property with the specified name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1858">Searches for the public property with the specified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-1859">An object representing the public property with the specified name, if found; otherwise, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1859">An object representing the public property with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-1860">Die Suche nach `name` Groß-/Kleinschreibung beachtet wird.</span><span class="sxs-lookup"><span data-stu-id="96bec-1860">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="96bec-1861">Die Suche enthält öffentliche statisch und öffentlich Instanzeigenschaften.</span><span class="sxs-lookup"><span data-stu-id="96bec-1861">The search includes public static and public instance properties.</span></span>  
  
 <span data-ttu-id="96bec-1862">Eine Eigenschaft ist Reflektion als öffentlich betrachtet, wenn es sich um mindestens einen Accessor enthält, die öffentlich ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-1862">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="96bec-1863">Andernfalls wird die Eigenschaft als privat betrachtet, und Sie müssen <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic kombinieren Sie die Werte mit `Or`) anfordern.</span><span class="sxs-lookup"><span data-stu-id="96bec-1863">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="96bec-1864">Wenn die aktuelle <xref:System.Type> einen konstruierten generischen Typ darstellt, gibt diese Methode die <xref:System.Reflection.PropertyInfo> mit den Typparametern, die durch die entsprechenden Typargumente ersetzt.</span><span class="sxs-lookup"><span data-stu-id="96bec-1864">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="96bec-1865">Wenn die aktuelle <xref:System.Type> stellt einen Typparameter in der Definition einer generischen Typ-oder Methodendefinition, sucht diese Methode die Eigenschaften der Class-Einschränkung.</span><span class="sxs-lookup"><span data-stu-id="96bec-1865">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
 <span data-ttu-id="96bec-1866">Situationen, in denen <xref:System.Reflection.AmbiguousMatchException> tritt auf, umfassen Folgendes:</span><span class="sxs-lookup"><span data-stu-id="96bec-1866">Situations in which <xref:System.Reflection.AmbiguousMatchException> occurs include the following:</span></span>  
  
-   <span data-ttu-id="96bec-1867">Ein Typ enthält zwei indizierte Eigenschaften mit dem gleichen Namen, jedoch eine unterschiedliche Anzahl von Parametern.</span><span class="sxs-lookup"><span data-stu-id="96bec-1867">A type contains two indexed properties that have the same name but different numbers of parameters.</span></span> <span data-ttu-id="96bec-1868">Um die Mehrdeutigkeit zu beheben, verwenden Sie eine Überladung von der <xref:System.Type.GetProperty%2A> Methode, die Parametertypen angibt.</span><span class="sxs-lookup"><span data-stu-id="96bec-1868">To resolve the ambiguity, use an overload of the <xref:System.Type.GetProperty%2A> method that specifies parameter types.</span></span>  
  
-   <span data-ttu-id="96bec-1869">Ein abgeleiteter Typ deklariert eine Eigenschaft, die eine geerbte Eigenschaft mit dem gleichen Namen, mit verbirgt die `new` Modifizierer (`Shadows` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="96bec-1869">A derived type declares a property that hides an inherited property with the same name, by using the `new` modifier (`Shadows` in Visual Basic).</span></span> <span data-ttu-id="96bec-1870">Um die Mehrdeutigkeit zu beheben, verwenden die <xref:System.Type.GetProperty%28System.String%2CSystem.Reflection.BindingFlags%29> methodenüberladung, und fügen die <xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType> Flag, um die Suche auf Elemente zu beschränken, die nicht geerbt werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1870">To resolve the ambiguity, use the <xref:System.Type.GetProperty%28System.String%2CSystem.Reflection.BindingFlags%29> method overload and add the <xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType> flag to restrict the search to members that are not inherited.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="96bec-1871">Indexer und Eigenschaften</span><span class="sxs-lookup"><span data-stu-id="96bec-1871">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="96bec-1872">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], und [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] bieten eine vereinfachte Syntax für den Zugriff auf indizierte Eigenschaften und ermöglichen eine indizierte Eigenschaft einen Standardwert für seinen Datentyp sein.</span><span class="sxs-lookup"><span data-stu-id="96bec-1872">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="96bec-1873">Z. B. wenn die Variable `myList` bezieht sich auf eine <xref:System.Collections.ArrayList>, die Syntax `myList[3]` (`myList(3)` in Visual Basic) Ruft das Element mit dem Index 3 ab.</span><span class="sxs-lookup"><span data-stu-id="96bec-1873">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="96bec-1874">Sie können die Eigenschaft überladen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1874">You can overload the property.</span></span>  
  
 <span data-ttu-id="96bec-1875">In c# wird dieses Feature einen Indexer aufgerufen wird und nicht anhand des Namens bezeichnet.</span><span class="sxs-lookup"><span data-stu-id="96bec-1875">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="96bec-1876">Standardmäßig wird ein C#-Indexer in den Metadaten, wie eine indizierte Eigenschaft mit dem Namen "Item" angezeigt wird.</span><span class="sxs-lookup"><span data-stu-id="96bec-1876">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="96bec-1877">Entwickeln einer Klassenbibliothek können jedoch die <xref:System.Runtime.CompilerServices.IndexerNameAttribute> Attribut, um den Namen des Indexers in den Metadaten zu ändern.</span><span class="sxs-lookup"><span data-stu-id="96bec-1877">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="96bec-1878">Z. B. die <xref:System.String> -Klasse verfügt über einen Indexer, der mit dem Namen <xref:System.String.Chars%2A>.</span><span class="sxs-lookup"><span data-stu-id="96bec-1878">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="96bec-1879">Indizierte Eigenschaften, die mit anderen Sprachen als C# -Code erstellt haben auch die Namen als Element.</span><span class="sxs-lookup"><span data-stu-id="96bec-1879">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="96bec-1880">Um zu bestimmen, ob ein Typ eine Standardeigenschaft verfügt, verwenden Sie die <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> -Methode zur Prüfung auf die <xref:System.Reflection.DefaultMemberAttribute> Attribut.</span><span class="sxs-lookup"><span data-stu-id="96bec-1880">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="96bec-1881">Wenn der Typ hat <xref:System.Reflection.DefaultMemberAttribute>, <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> Eigenschaft gibt den Namen der Standardeigenschaft zurück.</span><span class="sxs-lookup"><span data-stu-id="96bec-1881">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-1882">Das folgende Beispiel ruft die `Type` Objekt einer benutzerdefinierten Klasse ruft eine Eigenschaft dieser Klasse ab und zeigt den Eigenschaftennamen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1882">The following example retrieves the `Type` object of a user-defined class, retrieves a property of that class, and displays the property name.</span></span>  
  
 [!code-cpp[Type_GetProperty1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperty1/CPP/type_getproperty1.cpp#1)]
 [!code-csharp[Type_GetProperty1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty1/CS/type_getproperty1.cs#1)]
 [!code-vb[Type_GetProperty1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperty1/VB/type_getproperty1.vb#1)]  
  
 <span data-ttu-id="96bec-1883">Intern wird diese Eigenschaft in den Metadaten mit dem Namen "Element". bezeichnet</span><span class="sxs-lookup"><span data-stu-id="96bec-1883">Internally, this property is referred to in the metadata by the name "Item."</span></span> <span data-ttu-id="96bec-1884">Jeder Versuch, die erste `PropertyInfo` mithilfe von Reflektion dieser internen Name angeben muss, um ordnungsgemäß zurück der `PropertyInfo` Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="96bec-1884">Any attempt to get `PropertyInfo` using reflection must specify this internal name in order to correctly return the `PropertyInfo` property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="96bec-1885">More than one property is found with the specified name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1885">More than one property is found with the specified name.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96bec-1886">
            <paramref name="name" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1886">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, bindingAttr As BindingFlags) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * System.Reflection.BindingFlags -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string * System.Reflection.BindingFlags -&gt; System.Reflection.PropertyInfo" Usage="type.GetProperty (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="96bec-1887">The string containing the name of the property to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1887">The string containing the name of the property to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="96bec-1888">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1888">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="96bec-1889">-or-  Zero, to return <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1889">-or-  Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-1890">Searches for the specified property, using the specified binding constraints.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1890">Searches for the specified property, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-1891">An object representing the property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1891">An object representing the property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-1892">Eine Eigenschaft ist Reflektion als öffentlich betrachtet, wenn es sich um mindestens einen Accessor enthält, die öffentlich ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-1892">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="96bec-1893">Andernfalls wird die Eigenschaft als privat betrachtet, und Sie müssen <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic kombinieren Sie die Werte mit `Or`) anfordern.</span><span class="sxs-lookup"><span data-stu-id="96bec-1893">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="96bec-1894">Die folgenden <xref:System.Reflection.BindingFlags> Filterflags können festgelegt werden, welche Eigenschaften in die Suche einbezogen werden:</span><span class="sxs-lookup"><span data-stu-id="96bec-1894">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which properties to include in the search:</span></span>  
  
-   <span data-ttu-id="96bec-1895">Geben Sie `BindingFlags.Instance` oder `BindingFlags.Static` um ein Ergebnis zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-1895">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="96bec-1896">Geben Sie `BindingFlags.Public` öffentliche Eigenschaften in die Suche eingeschlossen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1896">Specify `BindingFlags.Public` to include public properties in the search.</span></span>  
  
-   <span data-ttu-id="96bec-1897">Geben Sie `BindingFlags.NonPublic` auf nicht öffentliche Eigenschaften (d.h. private, interne und geschützten Eigenschaften) in die Suche einbeziehen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1897">Specify `BindingFlags.NonPublic` to include non-public properties (that is, private, internal, and protected properties) in the search.</span></span>  
  
-   <span data-ttu-id="96bec-1898">Geben Sie `BindingFlags.FlattenHierarchy` sollen `public` und `protected` statische Member der Hierarchie; `private` statische Member in geerbten Klassen sind nicht enthalten.</span><span class="sxs-lookup"><span data-stu-id="96bec-1898">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="96bec-1899">Die folgenden <xref:System.Reflection.BindingFlags> Modifiziererflags können verwendet werden, um die Funktionsweise der Suche ändern:</span><span class="sxs-lookup"><span data-stu-id="96bec-1899">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="96bec-1900">`BindingFlags.IgnoreCase` um die Groß-/Kleinschreibung ignorieren `name`.</span><span class="sxs-lookup"><span data-stu-id="96bec-1900">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="96bec-1901">`BindingFlags.DeclaredOnly` Suchen Sie nur die deklarierten Eigenschaften der <xref:System.Type>, nicht über Eigenschaften, die nur geerbt wurden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1901">`BindingFlags.DeclaredOnly` to search only the properties declared on the <xref:System.Type>, not properties that were simply inherited.</span></span>  
  
 <span data-ttu-id="96bec-1902">Weitere Informationen finden Sie unter <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="96bec-1902">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="96bec-1903">Wenn die aktuelle <xref:System.Type> einen konstruierten generischen Typ darstellt, gibt diese Methode die <xref:System.Reflection.PropertyInfo> mit den Typparametern, die durch die entsprechenden Typargumente ersetzt.</span><span class="sxs-lookup"><span data-stu-id="96bec-1903">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="96bec-1904">Wenn die aktuelle <xref:System.Type> stellt einen Typparameter in der Definition einer generischen Typ-oder Methodendefinition, sucht diese Methode die Eigenschaften der Class-Einschränkung.</span><span class="sxs-lookup"><span data-stu-id="96bec-1904">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
 <span data-ttu-id="96bec-1905">Situationen, in denen <xref:System.Reflection.AmbiguousMatchException> tritt auf, umfassen Folgendes:</span><span class="sxs-lookup"><span data-stu-id="96bec-1905">Situations in which <xref:System.Reflection.AmbiguousMatchException> occurs include the following:</span></span>  
  
-   <span data-ttu-id="96bec-1906">Ein Typ enthält zwei indizierte Eigenschaften mit dem gleichen Namen, jedoch eine unterschiedliche Anzahl von Parametern.</span><span class="sxs-lookup"><span data-stu-id="96bec-1906">A type contains two indexed properties that have the same name but different numbers of parameters.</span></span> <span data-ttu-id="96bec-1907">Um die Mehrdeutigkeit zu beheben, verwenden Sie eine Überladung von der <xref:System.Type.GetProperty%2A> Methode, die Parametertypen angibt.</span><span class="sxs-lookup"><span data-stu-id="96bec-1907">To resolve the ambiguity, use an overload of the <xref:System.Type.GetProperty%2A> method that specifies parameter types.</span></span>  
  
-   <span data-ttu-id="96bec-1908">Ein abgeleiteter Typ deklariert eine Eigenschaft, die eine geerbte Eigenschaft mit den gleichen Namen ausblendet mithilfe der `new` Modifizierer (`Shadows` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="96bec-1908">A derived type declares a property that hides an inherited property with the same name, using the `new` modifier (`Shadows` in Visual Basic).</span></span> <span data-ttu-id="96bec-1909">Um die Mehrdeutigkeit zu beheben, schließen <xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType> um die Suche auf Elemente zu beschränken, die nicht geerbt werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-1909">To resolve the ambiguity, include <xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType> to restrict the search to members that are not inherited.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="96bec-1910">Indexer und Eigenschaften</span><span class="sxs-lookup"><span data-stu-id="96bec-1910">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="96bec-1911">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], und [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] bieten eine vereinfachte Syntax für den Zugriff auf indizierte Eigenschaften und ermöglichen eine indizierte Eigenschaft einen Standardwert für seinen Datentyp sein.</span><span class="sxs-lookup"><span data-stu-id="96bec-1911">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="96bec-1912">Z. B. wenn die Variable `myList` bezieht sich auf eine <xref:System.Collections.ArrayList>, die Syntax `myList[3]` (`myList(3)` in Visual Basic) Ruft das Element mit dem Index 3 ab.</span><span class="sxs-lookup"><span data-stu-id="96bec-1912">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="96bec-1913">Sie können die Eigenschaft überladen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1913">You can overload the property.</span></span>  
  
 <span data-ttu-id="96bec-1914">In c# wird dieses Feature einen Indexer aufgerufen wird und nicht anhand des Namens bezeichnet.</span><span class="sxs-lookup"><span data-stu-id="96bec-1914">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="96bec-1915">Standardmäßig wird ein C#-Indexer in den Metadaten, wie eine indizierte Eigenschaft mit dem Namen "Item" angezeigt wird.</span><span class="sxs-lookup"><span data-stu-id="96bec-1915">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="96bec-1916">Entwickeln einer Klassenbibliothek können jedoch die <xref:System.Runtime.CompilerServices.IndexerNameAttribute> Attribut, um den Namen des Indexers in den Metadaten zu ändern.</span><span class="sxs-lookup"><span data-stu-id="96bec-1916">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="96bec-1917">Z. B. die <xref:System.String> -Klasse verfügt über einen Indexer, der mit dem Namen <xref:System.String.Chars%2A>.</span><span class="sxs-lookup"><span data-stu-id="96bec-1917">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="96bec-1918">Indizierte Eigenschaften, die mit anderen Sprachen als C# -Code erstellt haben auch die Namen als Element.</span><span class="sxs-lookup"><span data-stu-id="96bec-1918">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="96bec-1919">Um zu bestimmen, ob ein Typ eine Standardeigenschaft verfügt, verwenden Sie die <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> -Methode zur Prüfung auf die <xref:System.Reflection.DefaultMemberAttribute> Attribut.</span><span class="sxs-lookup"><span data-stu-id="96bec-1919">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="96bec-1920">Wenn der Typ hat <xref:System.Reflection.DefaultMemberAttribute>, <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> Eigenschaft gibt den Namen der Standardeigenschaft zurück.</span><span class="sxs-lookup"><span data-stu-id="96bec-1920">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-1921">Im folgende Beispiel ruft den Typ einer benutzerdefinierten Klasse ab, ruft eine Eigenschaft dieser Klasse ab und zeigt den Namen der Eigenschaft in Übereinstimmung mit den angegebenen bindungseinschränkungen entsprechen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1921">The following example retrieves the type of a user-defined class, retrieves a property of that class and displays the property name in accordance with the specified binding constraints.</span></span>  
  
 [!code-cpp[Type_GetProperty2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperty2/CPP/type_getproperty2.cpp#1)]
 [!code-csharp[Type_GetProperty2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty2/CS/type_getproperty2.cs#1)]
 [!code-vb[Type_GetProperty2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperty2/VB/type_getproperty2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="96bec-1922">More than one property is found with the specified name and matching the specified binding constraints.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1922">More than one property is found with the specified name and matching the specified binding constraints.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96bec-1923">
            <paramref name="name" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1923">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, returnType As Type) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, Type ^ returnType);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * Type -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string * Type -&gt; System.Reflection.PropertyInfo" Usage="type.GetProperty (name, returnType)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="96bec-1924">The string containing the name of the public property to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1924">The string containing the name of the public property to get.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="96bec-1925">The return type of the property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1925">The return type of the property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-1926">Searches for the public property with the specified name and return type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1926">Searches for the public property with the specified name and return type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-1927">An object representing the public property with the specified name, if found; otherwise, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1927">An object representing the public property with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-1928">Eine Eigenschaft ist Reflektion als öffentlich betrachtet, wenn es sich um mindestens einen Accessor enthält, die öffentlich ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-1928">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="96bec-1929">Andernfalls wird die Eigenschaft als privat betrachtet, und Sie müssen <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic kombinieren Sie die Werte mit `Or`) anfordern.</span><span class="sxs-lookup"><span data-stu-id="96bec-1929">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="96bec-1930">Die Suche nach `name` Groß-/Kleinschreibung beachtet wird.</span><span class="sxs-lookup"><span data-stu-id="96bec-1930">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="96bec-1931">Die Suche enthält öffentliche statisch und öffentlich Instanzeigenschaften.</span><span class="sxs-lookup"><span data-stu-id="96bec-1931">The search includes public static and public instance properties.</span></span>  
  
 <span data-ttu-id="96bec-1932">Wenn die aktuelle <xref:System.Type> einen konstruierten generischen Typ darstellt, gibt diese Methode die <xref:System.Reflection.PropertyInfo> mit den Typparametern, die durch die entsprechenden Typargumente ersetzt.</span><span class="sxs-lookup"><span data-stu-id="96bec-1932">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="96bec-1933">Wenn die aktuelle <xref:System.Type> stellt einen Typparameter in der Definition einer generischen Typ-oder Methodendefinition, sucht diese Methode die Eigenschaften der Class-Einschränkung.</span><span class="sxs-lookup"><span data-stu-id="96bec-1933">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="96bec-1934">Indexer und Eigenschaften</span><span class="sxs-lookup"><span data-stu-id="96bec-1934">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="96bec-1935">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], und [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] bieten eine vereinfachte Syntax für den Zugriff auf indizierte Eigenschaften und ermöglichen eine indizierte Eigenschaft einen Standardwert für seinen Datentyp sein.</span><span class="sxs-lookup"><span data-stu-id="96bec-1935">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="96bec-1936">Z. B. wenn die Variable `myList` bezieht sich auf eine <xref:System.Collections.ArrayList>, die Syntax `myList[3]` (`myList(3)` in Visual Basic) Ruft das Element mit dem Index 3 ab.</span><span class="sxs-lookup"><span data-stu-id="96bec-1936">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="96bec-1937">Sie können die Eigenschaft überladen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1937">You can overload the property.</span></span>  
  
 <span data-ttu-id="96bec-1938">In c# wird dieses Feature einen Indexer aufgerufen wird und nicht anhand des Namens bezeichnet.</span><span class="sxs-lookup"><span data-stu-id="96bec-1938">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="96bec-1939">Standardmäßig wird ein C#-Indexer in den Metadaten, wie eine indizierte Eigenschaft mit dem Namen "Item" angezeigt wird.</span><span class="sxs-lookup"><span data-stu-id="96bec-1939">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="96bec-1940">Entwickeln einer Klassenbibliothek können jedoch die <xref:System.Runtime.CompilerServices.IndexerNameAttribute> Attribut, um den Namen des Indexers in den Metadaten zu ändern.</span><span class="sxs-lookup"><span data-stu-id="96bec-1940">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="96bec-1941">Z. B. die <xref:System.String> -Klasse verfügt über einen Indexer, der mit dem Namen <xref:System.String.Chars%2A>.</span><span class="sxs-lookup"><span data-stu-id="96bec-1941">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="96bec-1942">Indizierte Eigenschaften, die mit anderen Sprachen als C# -Code erstellt haben auch die Namen als Element.</span><span class="sxs-lookup"><span data-stu-id="96bec-1942">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="96bec-1943">Um zu bestimmen, ob ein Typ eine Standardeigenschaft verfügt, verwenden Sie die <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> -Methode zur Prüfung auf die <xref:System.Reflection.DefaultMemberAttribute> Attribut.</span><span class="sxs-lookup"><span data-stu-id="96bec-1943">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="96bec-1944">Wenn der Typ hat <xref:System.Reflection.DefaultMemberAttribute>, <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> Eigenschaft gibt den Namen der Standardeigenschaft zurück.</span><span class="sxs-lookup"><span data-stu-id="96bec-1944">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-1945">Das folgende Beispiel definiert eine Klasse mit einer Eigenschaft, und ruft den Namen und Typ der Eigenschaft ab.</span><span class="sxs-lookup"><span data-stu-id="96bec-1945">The following example defines a class with one property and retrieves the name and type of the property.</span></span>  
  
 [!code-cpp[Type_GetProperty_Types#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperty_Types/CPP/type_getproperty_types.cpp#1)]
 [!code-csharp[Type_GetProperty_Types#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty_Types/CS/type_getproperty_types.cs#1)]
 [!code-vb[Type_GetProperty_Types#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperty_Types/VB/type_getproperty_types.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="96bec-1946">More than one property is found with the specified name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1946">More than one property is found with the specified name.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96bec-1947">
            <paramref name="name" /> is <see langword="null" />, or <paramref name="returnType" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1947">
              <paramref name="name" /> is <see langword="null" />, or <paramref name="returnType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, types As Type()) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * Type[] -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string * Type[] -&gt; System.Reflection.PropertyInfo" Usage="type.GetProperty (name, types)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="96bec-1948">The string containing the name of the public property to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1948">The string containing the name of the public property to get.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="96bec-1949">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1949">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span>
          </span>
          <span data-ttu-id="96bec-1950">-or-  An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1950">-or-  An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-1951">Searches for the specified public property whose parameters match the specified argument types.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1951">Searches for the specified public property whose parameters match the specified argument types.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-1952">An object representing the public property whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1952">An object representing the public property whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-1953">Eine Eigenschaft ist Reflektion als öffentlich betrachtet, wenn es sich um mindestens einen Accessor enthält, die öffentlich ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-1953">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="96bec-1954">Andernfalls wird die Eigenschaft als privat betrachtet, und Sie müssen <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic kombinieren Sie die Werte mit `Or`) anfordern.</span><span class="sxs-lookup"><span data-stu-id="96bec-1954">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="96bec-1955">Die Suche nach `name` Groß-/Kleinschreibung beachtet wird.</span><span class="sxs-lookup"><span data-stu-id="96bec-1955">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="96bec-1956">Die Suche enthält öffentliche statisch und öffentlich Instanzeigenschaften.</span><span class="sxs-lookup"><span data-stu-id="96bec-1956">The search includes public static and public instance properties.</span></span>  
  
 <span data-ttu-id="96bec-1957">Wenn die aktuelle <xref:System.Type> einen konstruierten generischen Typ darstellt, gibt diese Methode die <xref:System.Reflection.PropertyInfo> mit den Typparametern, die durch die entsprechenden Typargumente ersetzt.</span><span class="sxs-lookup"><span data-stu-id="96bec-1957">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="96bec-1958">Wenn die aktuelle <xref:System.Type> stellt einen Typparameter in der Definition einer generischen Typ-oder Methodendefinition, sucht diese Methode die Eigenschaften der Class-Einschränkung.</span><span class="sxs-lookup"><span data-stu-id="96bec-1958">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="96bec-1959">Indexer und Eigenschaften</span><span class="sxs-lookup"><span data-stu-id="96bec-1959">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="96bec-1960">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], und [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] bieten eine vereinfachte Syntax für den Zugriff auf indizierte Eigenschaften und ermöglichen eine indizierte Eigenschaft einen Standardwert für seinen Datentyp sein.</span><span class="sxs-lookup"><span data-stu-id="96bec-1960">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="96bec-1961">Z. B. wenn die Variable `myList` bezieht sich auf eine <xref:System.Collections.ArrayList>, die Syntax `myList[3]` (`myList(3)` in Visual Basic) Ruft das Element mit dem Index 3 ab.</span><span class="sxs-lookup"><span data-stu-id="96bec-1961">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="96bec-1962">Sie können die Eigenschaft überladen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1962">You can overload the property.</span></span>  
  
 <span data-ttu-id="96bec-1963">In c# wird dieses Feature einen Indexer aufgerufen wird und nicht anhand des Namens bezeichnet.</span><span class="sxs-lookup"><span data-stu-id="96bec-1963">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="96bec-1964">Standardmäßig wird ein C#-Indexer in den Metadaten, wie eine indizierte Eigenschaft mit dem Namen "Item" angezeigt wird.</span><span class="sxs-lookup"><span data-stu-id="96bec-1964">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="96bec-1965">Entwickeln einer Klassenbibliothek können jedoch die <xref:System.Runtime.CompilerServices.IndexerNameAttribute> Attribut, um den Namen des Indexers in den Metadaten zu ändern.</span><span class="sxs-lookup"><span data-stu-id="96bec-1965">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="96bec-1966">Z. B. die <xref:System.String> -Klasse verfügt über einen Indexer, der mit dem Namen <xref:System.String.Chars%2A>.</span><span class="sxs-lookup"><span data-stu-id="96bec-1966">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="96bec-1967">Indizierte Eigenschaften, die mit anderen Sprachen als C# -Code erstellt haben auch die Namen als Element.</span><span class="sxs-lookup"><span data-stu-id="96bec-1967">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="96bec-1968">Um zu bestimmen, ob ein Typ eine Standardeigenschaft verfügt, verwenden Sie die <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> -Methode zur Prüfung auf die <xref:System.Reflection.DefaultMemberAttribute> Attribut.</span><span class="sxs-lookup"><span data-stu-id="96bec-1968">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="96bec-1969">Wenn der Typ hat <xref:System.Reflection.DefaultMemberAttribute>, <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> Eigenschaft gibt den Namen der Standardeigenschaft zurück.</span><span class="sxs-lookup"><span data-stu-id="96bec-1969">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-1970">Das folgende Beispiel ruft die `Type` Objekt einer Klasse eine benutzerdefinierte, ruft die Eigenschaft dieser Klasse ab und zeigt den Namen und Typ der Eigenschaft gemäß der übergebenen Argumente `GetProperty`.</span><span class="sxs-lookup"><span data-stu-id="96bec-1970">The following example retrieves the `Type` object of a user-defined class, retrieves the property of that class, and displays the property name and type of the property as specified by the arguments passed to `GetProperty`.</span></span>  
  
 [!code-cpp[Type_GetProperty3#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperty3/CPP/type_getproperty3.cpp#1)]
 [!code-csharp[Type_GetProperty3#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty3/CS/type_getproperty3.cs#1)]
 [!code-vb[Type_GetProperty3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperty3/VB/type_getproperty3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="96bec-1971">More than one property is found with the specified name and matching the specified argument types.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1971">More than one property is found with the specified name and matching the specified argument types.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96bec-1972">
            <paramref name="name" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1972">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="96bec-1973">-or-  <paramref name="types" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1973">-or-  <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="96bec-1974">
            <paramref name="types" /> is multidimensional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1974">
              <paramref name="types" /> is multidimensional.</span>
          </span>
        </exception>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="96bec-1975">An element of <paramref name="types" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1975">An element of <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Type,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, returnType As Type, types As Type()) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * Type * Type[] -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string * Type * Type[] -&gt; System.Reflection.PropertyInfo" Usage="type.GetProperty (name, returnType, types)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type,System.Type[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="96bec-1976">The string containing the name of the public property to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1976">The string containing the name of the public property to get.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="96bec-1977">The return type of the property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1977">The return type of the property.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="96bec-1978">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1978">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span>
          </span>
          <span data-ttu-id="96bec-1979">-or-  An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1979">-or-  An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-1980">Searches for the specified public property whose parameters match the specified argument types.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1980">Searches for the specified public property whose parameters match the specified argument types.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-1981">An object representing the public property whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1981">An object representing the public property whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-1982">Eine Eigenschaft ist Reflektion als öffentlich betrachtet, wenn es sich um mindestens einen Accessor enthält, die öffentlich ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-1982">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="96bec-1983">Andernfalls wird die Eigenschaft als privat betrachtet, und Sie müssen <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic kombinieren Sie die Werte mit `Or`) anfordern.</span><span class="sxs-lookup"><span data-stu-id="96bec-1983">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="96bec-1984">Die Suche nach `name` Groß-/Kleinschreibung beachtet wird.</span><span class="sxs-lookup"><span data-stu-id="96bec-1984">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="96bec-1985">Die Suche enthält öffentliche statisch und öffentlich Instanzeigenschaften.</span><span class="sxs-lookup"><span data-stu-id="96bec-1985">The search includes public static and public instance properties.</span></span>  
  
 <span data-ttu-id="96bec-1986">Wenn die aktuelle <xref:System.Type> einen konstruierten generischen Typ darstellt, gibt diese Methode die <xref:System.Reflection.PropertyInfo> mit den Typparametern, die durch die entsprechenden Typargumente ersetzt.</span><span class="sxs-lookup"><span data-stu-id="96bec-1986">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="96bec-1987">Wenn die aktuelle <xref:System.Type> stellt einen Typparameter in der Definition einer generischen Typ-oder Methodendefinition, sucht diese Methode die Eigenschaften der Class-Einschränkung.</span><span class="sxs-lookup"><span data-stu-id="96bec-1987">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="96bec-1988">Indexer und Eigenschaften</span><span class="sxs-lookup"><span data-stu-id="96bec-1988">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="96bec-1989">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], und [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] bieten eine vereinfachte Syntax für den Zugriff auf indizierte Eigenschaften und ermöglichen eine indizierte Eigenschaft einen Standardwert für seinen Datentyp sein.</span><span class="sxs-lookup"><span data-stu-id="96bec-1989">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="96bec-1990">Z. B. wenn die Variable `myList` bezieht sich auf eine <xref:System.Collections.ArrayList>, die Syntax `myList[3]` (`myList(3)` in Visual Basic) Ruft das Element mit dem Index 3 ab.</span><span class="sxs-lookup"><span data-stu-id="96bec-1990">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="96bec-1991">Sie können die Eigenschaft überladen.</span><span class="sxs-lookup"><span data-stu-id="96bec-1991">You can overload the property.</span></span>  
  
 <span data-ttu-id="96bec-1992">In c# wird dieses Feature einen Indexer aufgerufen wird und nicht anhand des Namens bezeichnet.</span><span class="sxs-lookup"><span data-stu-id="96bec-1992">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="96bec-1993">Standardmäßig wird ein C#-Indexer in den Metadaten, wie eine indizierte Eigenschaft mit dem Namen "Item" angezeigt wird.</span><span class="sxs-lookup"><span data-stu-id="96bec-1993">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="96bec-1994">Entwickeln einer Klassenbibliothek können jedoch die <xref:System.Runtime.CompilerServices.IndexerNameAttribute> Attribut, um den Namen des Indexers in den Metadaten zu ändern.</span><span class="sxs-lookup"><span data-stu-id="96bec-1994">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="96bec-1995">Z. B. die <xref:System.String> -Klasse verfügt über einen Indexer, der mit dem Namen <xref:System.String.Chars%2A>.</span><span class="sxs-lookup"><span data-stu-id="96bec-1995">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="96bec-1996">Indizierte Eigenschaften, die mit anderen Sprachen als C# -Code erstellt haben auch die Namen als Element.</span><span class="sxs-lookup"><span data-stu-id="96bec-1996">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="96bec-1997">Um zu bestimmen, ob ein Typ eine Standardeigenschaft verfügt, verwenden Sie die <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> -Methode zur Prüfung auf die <xref:System.Reflection.DefaultMemberAttribute> Attribut.</span><span class="sxs-lookup"><span data-stu-id="96bec-1997">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="96bec-1998">Wenn der Typ hat <xref:System.Reflection.DefaultMemberAttribute>, <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> Eigenschaft gibt den Namen der Standardeigenschaft zurück.</span><span class="sxs-lookup"><span data-stu-id="96bec-1998">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="96bec-1999">More than one property is found with the specified name and matching the specified argument types.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-1999">More than one property is found with the specified name and matching the specified argument types.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96bec-2000">
            <paramref name="name" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2000">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="96bec-2001">-or-  <paramref name="types" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2001">-or-  <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="96bec-2002">
            <paramref name="types" /> is multidimensional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2002">
              <paramref name="types" /> is multidimensional.</span>
          </span>
        </exception>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="96bec-2003">An element of <paramref name="types" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2003">An element of <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, returnType As Type, types As Type(), modifiers As ParameterModifier()) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo" Usage="type.GetProperty (name, returnType, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="96bec-2004">The string containing the name of the public property to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2004">The string containing the name of the public property to get.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="96bec-2005">The return type of the property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2005">The return type of the property.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="96bec-2006">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2006">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span>
          </span>
          <span data-ttu-id="96bec-2007">-or-  An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2007">-or-  An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="96bec-2008">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2008">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="96bec-2009">The default binder does not process this parameter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2009">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-2010">Searches for the specified public property whose parameters match the specified argument types and modifiers.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2010">Searches for the specified public property whose parameters match the specified argument types and modifiers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-2011">An object representing the public property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2011">An object representing the public property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-2012">Eine Eigenschaft ist Reflektion als öffentlich betrachtet, wenn es sich um mindestens einen Accessor enthält, die öffentlich ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-2012">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="96bec-2013">Andernfalls wird die Eigenschaft als privat betrachtet, und Sie müssen <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic kombinieren Sie die Werte mit `Or`) anfordern.</span><span class="sxs-lookup"><span data-stu-id="96bec-2013">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="96bec-2014">Obwohl nicht der Standardbinder verarbeitet <xref:System.Reflection.ParameterModifier> (die `modifiers` Parameter), können Sie die abstrakte <xref:System.Reflection.Binder?displayProperty=nameWithType> Klasse, um einen benutzerdefinierten Binder zu schreiben, der verarbeitet `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="96bec-2014">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="96bec-2015">`ParameterModifier` wird nur verwendet werden, wenn der Aufruf über COM-Interop und behandelt nur die Parameter, die als Verweis übergeben werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-2015">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="96bec-2016">Die Suche nach `name` Groß-/Kleinschreibung beachtet wird.</span><span class="sxs-lookup"><span data-stu-id="96bec-2016">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="96bec-2017">Die Suche enthält öffentliche statisch und öffentlich Instanzeigenschaften.</span><span class="sxs-lookup"><span data-stu-id="96bec-2017">The search includes public static and public instance properties.</span></span>  
  
 <span data-ttu-id="96bec-2018">Wenn die aktuelle <xref:System.Type> einen konstruierten generischen Typ darstellt, gibt diese Methode die <xref:System.Reflection.PropertyInfo> mit den Typparametern, die durch die entsprechenden Typargumente ersetzt.</span><span class="sxs-lookup"><span data-stu-id="96bec-2018">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="96bec-2019">Wenn die aktuelle <xref:System.Type> stellt einen Typparameter in der Definition einer generischen Typ-oder Methodendefinition, sucht diese Methode die Eigenschaften der Class-Einschränkung.</span><span class="sxs-lookup"><span data-stu-id="96bec-2019">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="96bec-2020">Indexer und Eigenschaften</span><span class="sxs-lookup"><span data-stu-id="96bec-2020">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="96bec-2021">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], und [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] bieten eine vereinfachte Syntax für den Zugriff auf indizierte Eigenschaften und ermöglichen eine indizierte Eigenschaft einen Standardwert für seinen Datentyp sein.</span><span class="sxs-lookup"><span data-stu-id="96bec-2021">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="96bec-2022">Z. B. wenn die Variable `myList` bezieht sich auf eine <xref:System.Collections.ArrayList>, die Syntax `myList[3]` (`myList(3)` in Visual Basic) Ruft das Element mit dem Index 3 ab.</span><span class="sxs-lookup"><span data-stu-id="96bec-2022">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="96bec-2023">Sie können die Eigenschaft überladen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2023">You can overload the property.</span></span>  
  
 <span data-ttu-id="96bec-2024">In c# wird dieses Feature einen Indexer aufgerufen wird und nicht anhand des Namens bezeichnet.</span><span class="sxs-lookup"><span data-stu-id="96bec-2024">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="96bec-2025">Standardmäßig wird ein C#-Indexer in den Metadaten, wie eine indizierte Eigenschaft mit dem Namen "Item" angezeigt wird.</span><span class="sxs-lookup"><span data-stu-id="96bec-2025">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="96bec-2026">Entwickeln einer Klassenbibliothek können jedoch die <xref:System.Runtime.CompilerServices.IndexerNameAttribute> Attribut, um den Namen des Indexers in den Metadaten zu ändern.</span><span class="sxs-lookup"><span data-stu-id="96bec-2026">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="96bec-2027">Z. B. die <xref:System.String> -Klasse verfügt über einen Indexer, der mit dem Namen <xref:System.String.Chars%2A>.</span><span class="sxs-lookup"><span data-stu-id="96bec-2027">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="96bec-2028">Indizierte Eigenschaften, die mit anderen Sprachen als C# -Code erstellt haben auch die Namen als Element.</span><span class="sxs-lookup"><span data-stu-id="96bec-2028">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="96bec-2029">Um zu bestimmen, ob ein Typ eine Standardeigenschaft verfügt, verwenden Sie die <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> -Methode zur Prüfung auf die <xref:System.Reflection.DefaultMemberAttribute> Attribut.</span><span class="sxs-lookup"><span data-stu-id="96bec-2029">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="96bec-2030">Wenn der Typ hat <xref:System.Reflection.DefaultMemberAttribute>, <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> Eigenschaft gibt den Namen der Standardeigenschaft zurück.</span><span class="sxs-lookup"><span data-stu-id="96bec-2030">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-2031">Im folgenden Beispiel eine `Type` -Objekt entsprechende `MyPropertyClass`, und die indizierte Eigenschaft dieser Klasse abgerufen wird, mit den Argumenten, die an die `GetProperty` Methode.</span><span class="sxs-lookup"><span data-stu-id="96bec-2031">The following example obtains a `Type` object corresponding to `MyPropertyClass`, and the indexed property of this class is retrieved using the arguments passed to the `GetProperty` method.</span></span>  
  
 [!code-cpp[Type_GetProperty5#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperty5/CPP/type_getproperty2.cpp#1)]
 [!code-csharp[Type_GetProperty5#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty5/CS/type_getproperty2.cs#1)]
 [!code-vb[Type_GetProperty5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperty5/VB/type_getproperty2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="96bec-2032">More than one property is found with the specified name and matching the specified argument types and modifiers.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2032">More than one property is found with the specified name and matching the specified argument types and modifiers.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96bec-2033">
            <paramref name="name" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2033">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="96bec-2034">-or-  <paramref name="types" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2034">-or-  <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="96bec-2035">
            <paramref name="types" /> is multidimensional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2035">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="96bec-2036">-or-  <paramref name="modifiers" /> is multidimensional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2036">-or-  <paramref name="modifiers" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="96bec-2037">-or-  <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2037">-or-  <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span>
          </span>
        </exception>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="96bec-2038">An element of <paramref name="types" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2038">An element of <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo" Usage="type.GetProperty (name, bindingAttr, binder, returnType, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="96bec-2039">The string containing the name of the property to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2039">The string containing the name of the property to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="96bec-2040">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2040">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="96bec-2041">-or-  Zero, to return <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2041">-or-  Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="96bec-2042">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2042">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="96bec-2043">-or-  A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2043">-or-  A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="96bec-2044">The return type of the property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2044">The return type of the property.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="96bec-2045">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2045">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span>
          </span>
          <span data-ttu-id="96bec-2046">-or-  An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2046">-or-  An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="96bec-2047">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2047">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="96bec-2048">The default binder does not process this parameter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2048">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-2049">Searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2049">Searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-2050">An object representing the property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2050">An object representing the property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-2051">Eine Eigenschaft ist Reflektion als öffentlich betrachtet, wenn es sich um mindestens einen Accessor enthält, die öffentlich ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-2051">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="96bec-2052">Andernfalls wird die Eigenschaft als privat betrachtet, und Sie müssen <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic kombinieren Sie die Werte mit `Or`) anfordern.</span><span class="sxs-lookup"><span data-stu-id="96bec-2052">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="96bec-2053">Obwohl nicht der Standardbinder verarbeitet <xref:System.Reflection.ParameterModifier> (die `modifiers` Parameter), können Sie die abstrakte <xref:System.Reflection.Binder?displayProperty=nameWithType> Klasse, um einen benutzerdefinierten Binder zu schreiben, der verarbeitet `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="96bec-2053">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="96bec-2054">`ParameterModifier` wird nur verwendet werden, wenn der Aufruf über COM-Interop und behandelt nur die Parameter, die als Verweis übergeben werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-2054">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="96bec-2055">Die folgende Tabelle zeigt, welche Member einer Basisklasse von zurückgegeben werden die `Get` Methoden ein, wenn für einen Typ reflektieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-2055">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="96bec-2056">Memberart</span><span class="sxs-lookup"><span data-stu-id="96bec-2056">Member Type</span></span>|<span data-ttu-id="96bec-2057">Statisch</span><span class="sxs-lookup"><span data-stu-id="96bec-2057">Static</span></span>|<span data-ttu-id="96bec-2058">Nicht statische</span><span class="sxs-lookup"><span data-stu-id="96bec-2058">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="96bec-2059">Konstruktor</span><span class="sxs-lookup"><span data-stu-id="96bec-2059">Constructor</span></span>|<span data-ttu-id="96bec-2060">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-2060">No</span></span>|<span data-ttu-id="96bec-2061">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-2061">No</span></span>|  
|<span data-ttu-id="96bec-2062">Feld</span><span class="sxs-lookup"><span data-stu-id="96bec-2062">Field</span></span>|<span data-ttu-id="96bec-2063">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-2063">No</span></span>|<span data-ttu-id="96bec-2064">Ja.</span><span class="sxs-lookup"><span data-stu-id="96bec-2064">Yes.</span></span> <span data-ttu-id="96bec-2065">Ein Feld ist immer nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-2065">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="96bec-2066">event</span><span class="sxs-lookup"><span data-stu-id="96bec-2066">Event</span></span>|<span data-ttu-id="96bec-2067">Nicht zutreffend</span><span class="sxs-lookup"><span data-stu-id="96bec-2067">Not applicable</span></span>|<span data-ttu-id="96bec-2068">Die allgemeinen Typsystem ist, dass die Vererbung ist identisch mit der Methoden, die die Eigenschaft zu implementieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-2068">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="96bec-2069">Reflektion behandelt Eigenschaften als nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-2069">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-2070">Siehe Hinweis 2 weiter unten.</span><span class="sxs-lookup"><span data-stu-id="96bec-2070">See note 2 below.</span></span>|  
|<span data-ttu-id="96bec-2071">Methode</span><span class="sxs-lookup"><span data-stu-id="96bec-2071">Method</span></span>|<span data-ttu-id="96bec-2072">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-2072">No</span></span>|<span data-ttu-id="96bec-2073">Ja.</span><span class="sxs-lookup"><span data-stu-id="96bec-2073">Yes.</span></span> <span data-ttu-id="96bec-2074">Eine Methode (virtuelle und nicht virtuelle) möglich Ausblenden nach Namen oder nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-2074">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="96bec-2075">Geschachtelter Typ</span><span class="sxs-lookup"><span data-stu-id="96bec-2075">Nested Type</span></span>|<span data-ttu-id="96bec-2076">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-2076">No</span></span>|<span data-ttu-id="96bec-2077">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-2077">No</span></span>|  
|<span data-ttu-id="96bec-2078">Eigenschaft</span><span class="sxs-lookup"><span data-stu-id="96bec-2078">Property</span></span>|<span data-ttu-id="96bec-2079">Nicht zutreffend</span><span class="sxs-lookup"><span data-stu-id="96bec-2079">Not applicable</span></span>|<span data-ttu-id="96bec-2080">Die allgemeinen Typsystem ist, dass die Vererbung ist identisch mit der Methoden, die die Eigenschaft zu implementieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-2080">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="96bec-2081">Reflektion behandelt Eigenschaften als nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-2081">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-2082">Siehe Hinweis 2 weiter unten.</span><span class="sxs-lookup"><span data-stu-id="96bec-2082">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="96bec-2083">Nach Name und Signatur ausblenden berücksichtigt, dass alle Teile der Signatur, die benutzerdefinierten Modifizierer, einschließlich Typen, Parametertypen, Sentinels enthält und nicht verwaltete Aufrufkonventionen zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-2083">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="96bec-2084">Dies ist ein binärer Vergleich.</span><span class="sxs-lookup"><span data-stu-id="96bec-2084">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="96bec-2085">Für die Reflektion sind die Eigenschaften und Ereignisse nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-2085">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-2086">Wenn Sie eine Eigenschaft mit dem ein Get und Set-Accessor in der Basisklasse haben, aber die abgeleitete Klasse nur einen Get-Accessor hat, die Eigenschaft der abgeleiteten Klasse blendet die Basisklasseneigenschaft aus, und nicht werden auf den Setter in der Basisklasse zugreifen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2086">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="96bec-2087">Benutzerdefinierte Attribute sind nicht Teil des allgemeinen Typsystems.</span><span class="sxs-lookup"><span data-stu-id="96bec-2087">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="96bec-2088">Die folgenden <xref:System.Reflection.BindingFlags> Filterflags können festgelegt werden, welche Eigenschaften in die Suche einbezogen werden:</span><span class="sxs-lookup"><span data-stu-id="96bec-2088">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which properties to include in the search:</span></span>  
  
-   <span data-ttu-id="96bec-2089">Geben Sie `BindingFlags.Instance` oder `BindingFlags.Static` um ein Ergebnis zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-2089">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="96bec-2090">Geben Sie `BindingFlags.Public` öffentliche Eigenschaften in die Suche eingeschlossen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2090">Specify `BindingFlags.Public` to include public properties in the search.</span></span>  
  
-   <span data-ttu-id="96bec-2091">Geben Sie `BindingFlags.NonPublic` auf nicht öffentliche Eigenschaften (d.h. private, interne und geschützten Eigenschaften) in die Suche einbeziehen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2091">Specify `BindingFlags.NonPublic` to include non-public properties (that is, private, internal, and protected properties) in the search.</span></span>  
  
-   <span data-ttu-id="96bec-2092">Geben Sie `BindingFlags.FlattenHierarchy` sollen `public` und `protected` statische Member der Hierarchie; `private` statische Member in geerbten Klassen sind nicht enthalten.</span><span class="sxs-lookup"><span data-stu-id="96bec-2092">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="96bec-2093">Die folgenden <xref:System.Reflection.BindingFlags> Modifiziererflags können verwendet werden, um die Funktionsweise der Suche ändern:</span><span class="sxs-lookup"><span data-stu-id="96bec-2093">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="96bec-2094">`BindingFlags.IgnoreCase` um die Groß-/Kleinschreibung ignorieren `name`.</span><span class="sxs-lookup"><span data-stu-id="96bec-2094">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="96bec-2095">`BindingFlags.DeclaredOnly` Suchen Sie nur die deklarierten Eigenschaften der <xref:System.Type>, nicht über Eigenschaften, die nur geerbt wurden.</span><span class="sxs-lookup"><span data-stu-id="96bec-2095">`BindingFlags.DeclaredOnly` to search only the properties declared on the <xref:System.Type>, not properties that were simply inherited.</span></span>  
  
 <span data-ttu-id="96bec-2096">Weitere Informationen finden Sie unter <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="96bec-2096">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="96bec-2097">Wenn die aktuelle <xref:System.Type> einen konstruierten generischen Typ darstellt, gibt diese Methode die <xref:System.Reflection.PropertyInfo> mit den Typparametern, die durch die entsprechenden Typargumente ersetzt.</span><span class="sxs-lookup"><span data-stu-id="96bec-2097">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="96bec-2098">Wenn die aktuelle <xref:System.Type> stellt einen Typparameter in der Definition einer generischen Typ-oder Methodendefinition, sucht diese Methode die Eigenschaften der Class-Einschränkung.</span><span class="sxs-lookup"><span data-stu-id="96bec-2098">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="96bec-2099">Indexer und Eigenschaften</span><span class="sxs-lookup"><span data-stu-id="96bec-2099">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="96bec-2100">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], und [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] bieten eine vereinfachte Syntax für den Zugriff auf indizierte Eigenschaften und ermöglichen eine indizierte Eigenschaft einen Standardwert für seinen Datentyp sein.</span><span class="sxs-lookup"><span data-stu-id="96bec-2100">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="96bec-2101">Z. B. wenn die Variable `myList` bezieht sich auf eine <xref:System.Collections.ArrayList>, die Syntax `myList[3]` (`myList(3)` in Visual Basic) Ruft das Element mit dem Index 3 ab.</span><span class="sxs-lookup"><span data-stu-id="96bec-2101">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="96bec-2102">Sie können die Eigenschaft überladen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2102">You can overload the property.</span></span>  
  
 <span data-ttu-id="96bec-2103">In c# wird dieses Feature einen Indexer aufgerufen wird und nicht anhand des Namens bezeichnet.</span><span class="sxs-lookup"><span data-stu-id="96bec-2103">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="96bec-2104">Standardmäßig wird ein C#-Indexer in den Metadaten, wie eine indizierte Eigenschaft mit dem Namen "Item" angezeigt wird.</span><span class="sxs-lookup"><span data-stu-id="96bec-2104">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="96bec-2105">Entwickeln einer Klassenbibliothek können jedoch die <xref:System.Runtime.CompilerServices.IndexerNameAttribute> Attribut, um den Namen des Indexers in den Metadaten zu ändern.</span><span class="sxs-lookup"><span data-stu-id="96bec-2105">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="96bec-2106">Z. B. die <xref:System.String> -Klasse verfügt über einen Indexer, der mit dem Namen <xref:System.String.Chars%2A>.</span><span class="sxs-lookup"><span data-stu-id="96bec-2106">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="96bec-2107">Indizierte Eigenschaften, die mit anderen Sprachen als C# -Code erstellt haben auch die Namen als Element.</span><span class="sxs-lookup"><span data-stu-id="96bec-2107">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="96bec-2108">Um zu bestimmen, ob ein Typ eine Standardeigenschaft verfügt, verwenden Sie die <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> -Methode zur Prüfung auf die <xref:System.Reflection.DefaultMemberAttribute> Attribut.</span><span class="sxs-lookup"><span data-stu-id="96bec-2108">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="96bec-2109">Wenn der Typ hat <xref:System.Reflection.DefaultMemberAttribute>, <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> Eigenschaft gibt den Namen der Standardeigenschaft zurück.</span><span class="sxs-lookup"><span data-stu-id="96bec-2109">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="96bec-2110">More than one property is found with the specified name and matching the specified binding constraints.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2110">More than one property is found with the specified name and matching the specified binding constraints.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96bec-2111">
            <paramref name="name" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2111">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="96bec-2112">-or-  <paramref name="types" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2112">-or-  <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="96bec-2113">
            <paramref name="types" /> is multidimensional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2113">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="96bec-2114">-or-  <paramref name="modifiers" /> is multidimensional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2114">-or-  <paramref name="modifiers" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="96bec-2115">-or-  <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2115">-or-  <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span>
          </span>
        </exception>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="96bec-2116">An element of <paramref name="types" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2116">An element of <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetPropertyImpl">
      <MemberSignature Language="C#" Value="protected abstract System.Reflection.PropertyInfo GetPropertyImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.PropertyInfo GetPropertyImpl(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Reflection::PropertyInfo ^ GetPropertyImpl(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetPropertyImpl : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo" Usage="type.GetPropertyImpl (name, bindingAttr, binder, returnType, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="96bec-2117">The string containing the name of the property to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2117">The string containing the name of the property to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="96bec-2118">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2118">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="96bec-2119">-or-  Zero, to return <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2119">-or-  Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="96bec-2120">An object that defines a set of properties and enables binding, which can involve selection of an overloaded member, coercion of argument types, and invocation of a member through reflection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2120">An object that defines a set of properties and enables binding, which can involve selection of an overloaded member, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="96bec-2121">-or-  A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2121">-or-  A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="96bec-2122">The return type of the property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2122">The return type of the property.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="96bec-2123">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2123">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span>
          </span>
          <span data-ttu-id="96bec-2124">-or-  An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2124">-or-  An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="96bec-2125">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2125">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="96bec-2126">The default binder does not process this parameter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2126">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-2127">When overridden in a derived class, searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2127">When overridden in a derived class, searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-2128">An object representing the property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2128">An object representing the property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-2129">Obwohl nicht der Standardbinder verarbeitet <xref:System.Reflection.ParameterModifier> (die `modifiers` Parameter), können Sie die abstrakte <xref:System.Reflection.Binder?displayProperty=nameWithType> Klasse, um einen benutzerdefinierten Binder zu schreiben, der verarbeitet `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="96bec-2129">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="96bec-2130">`ParameterModifier` wird nur verwendet werden, wenn der Aufruf über COM-Interop und behandelt nur die Parameter, die als Verweis übergeben werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-2130">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="96bec-2131">Die folgenden <xref:System.Reflection.BindingFlags> Filterflags können festgelegt werden, welche Eigenschaften in die Suche einbezogen werden:</span><span class="sxs-lookup"><span data-stu-id="96bec-2131">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which properties to include in the search:</span></span>  
  
-   <span data-ttu-id="96bec-2132">Geben Sie `BindingFlags.Instance` oder `BindingFlags.Static` um ein Ergebnis zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-2132">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="96bec-2133">Geben Sie `BindingFlags.Public` öffentliche Eigenschaften in die Suche eingeschlossen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2133">Specify `BindingFlags.Public` to include public properties in the search.</span></span>  
  
-   <span data-ttu-id="96bec-2134">Geben Sie `BindingFlags.NonPublic` auf nicht öffentliche Eigenschaften (d.h. private, interne und geschützten Eigenschaften) in die Suche einbeziehen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2134">Specify `BindingFlags.NonPublic` to include non-public properties (that is, private, internal, and protected properties) in the search.</span></span>  
  
-   <span data-ttu-id="96bec-2135">Geben Sie `BindingFlags.FlattenHierarchy` sollen `public` und `protected` statische Member der Hierarchie; `private` statische Member in geerbten Klassen sind nicht enthalten.</span><span class="sxs-lookup"><span data-stu-id="96bec-2135">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="96bec-2136">Die folgenden <xref:System.Reflection.BindingFlags> Modifiziererflags können verwendet werden, um die Funktionsweise der Suche ändern:</span><span class="sxs-lookup"><span data-stu-id="96bec-2136">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="96bec-2137">`BindingFlags.IgnoreCase` um die Groß-/Kleinschreibung ignorieren `name`.</span><span class="sxs-lookup"><span data-stu-id="96bec-2137">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="96bec-2138">`BindingFlags.DeclaredOnly` Suchen Sie nur die deklarierten Eigenschaften der <xref:System.Type>, nicht über Eigenschaften, die nur geerbt wurden.</span><span class="sxs-lookup"><span data-stu-id="96bec-2138">`BindingFlags.DeclaredOnly` to search only the properties declared on the <xref:System.Type>, not properties that were simply inherited.</span></span>  
  
 <span data-ttu-id="96bec-2139">Weitere Informationen finden Sie unter <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="96bec-2139">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="96bec-2140">More than one property is found with the specified name and matching the specified binding constraints.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2140">More than one property is found with the specified name and matching the specified binding constraints.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96bec-2141">
            <paramref name="name" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2141">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="96bec-2142">-or-  <paramref name="types" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2142">-or-  <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="96bec-2143">-or-  One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2143">-or-  One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="96bec-2144">
            <paramref name="types" /> is multidimensional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2144">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="96bec-2145">-or-  <paramref name="modifiers" /> is multidimensional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2145">-or-  <paramref name="modifiers" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="96bec-2146">-or-  <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2146">-or-  <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="96bec-2147">The current type is a <see cref="T:System.Reflection.Emit.TypeBuilder" />, <see cref="T:System.Reflection.Emit.EnumBuilder" />, or <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2147">The current type is a <see cref="T:System.Reflection.Emit.TypeBuilder" />, <see cref="T:System.Reflection.Emit.EnumBuilder" />, or <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetType">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-2148">Gets a <see cref="T:System.Type" /> object that represents the specified type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2148">Gets a <see cref="T:System.Type" /> object that represents the specified type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetType();" />
      <MemberSignature Language="F#" Value="override this.GetType : unit -&gt; Type" Usage="type.GetType " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="96bec-2149">Gets the current <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2149">Gets the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-2150">The current <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2150">The current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="96bec-2151">A class initializer is invoked and throws an exception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2151">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <altmember cref="T:System.TypeLoadException" />
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName);" />
      <MemberSignature Language="F#" Value="static member GetType : string -&gt; Type" Usage="System.Type.GetType typeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="96bec-2152">The assembly-qualified name of the type to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2152">The assembly-qualified name of the type to get.</span>
          </span>
          <span data-ttu-id="96bec-2153">See <see cref="P:System.Type.AssemblyQualifiedName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2153">See <see cref="P:System.Type.AssemblyQualifiedName" />.</span>
          </span>
          <span data-ttu-id="96bec-2154">If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2154">If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-2155">Gets the <see cref="T:System.Type" /> with the specified name, performing a case-sensitive search.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2155">Gets the <see cref="T:System.Type" /> with the specified name, performing a case-sensitive search.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-2156">The type with the specified name, if found; otherwise, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2156">The type with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-2157">Können Sie die <xref:System.Type.GetType%2A> Methode zum Abrufen einer <xref:System.Type> Objekt für einen Typ in einer anderen Assembly, wenn Sie die Assembly qualifizierten Namen kennen, die aus abgerufen werden können <xref:System.Type.AssemblyQualifiedName>.</span><span class="sxs-lookup"><span data-stu-id="96bec-2157">You can use the <xref:System.Type.GetType%2A> method to obtain a <xref:System.Type> object for a type in another assembly, if you know its assembly-qualified name which can be obtained from <xref:System.Type.AssemblyQualifiedName>.</span></span> <span data-ttu-id="96bec-2158"><xref:System.Type.GetType%2A> führt zum Laden der Assembly im angegebenen `typeName`.</span><span class="sxs-lookup"><span data-stu-id="96bec-2158"><xref:System.Type.GetType%2A> causes loading of the assembly specified in `typeName`.</span></span> <span data-ttu-id="96bec-2159">Sie können auch laden eine Assembly unter Verwendung der <xref:System.Reflection.Assembly.Load%2A> -Methode und anschließend auf die <xref:System.Type.GetType%2A> oder <xref:System.Reflection.Assembly.GetTypes%2A> Methoden der <xref:System.Reflection.Assembly> Klasse zum Abrufen <xref:System.Type> Objekte.</span><span class="sxs-lookup"><span data-stu-id="96bec-2159">You can also load an assembly using the <xref:System.Reflection.Assembly.Load%2A> method, and then use the <xref:System.Type.GetType%2A> or <xref:System.Reflection.Assembly.GetTypes%2A> methods of the <xref:System.Reflection.Assembly> class to get <xref:System.Type> objects.</span></span> <span data-ttu-id="96bec-2160">Wenn ein Typ in einer Assembly mit dem Programm zur Kompilierzeit bekannt ist, ist es effizienter, die in c# verwenden <xref:System.Type.GetType%2A> in Visual Basic oder c++.</span><span class="sxs-lookup"><span data-stu-id="96bec-2160">If a type is in an assembly known to your program at compile time, it is more efficient to use  in C#, <xref:System.Type.GetType%2A> in Visual Basic, or  in C++.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-2161">Wenn `typeName` kann nicht gefunden werden, den Aufruf der <xref:System.Type.GetType%28System.String%29> Methodenrückgabe `null`.</span><span class="sxs-lookup"><span data-stu-id="96bec-2161">If `typeName` cannot be found, the call to the <xref:System.Type.GetType%28System.String%29> method returns `null`.</span></span> <span data-ttu-id="96bec-2162">Es löst keine Ausnahme aus.</span><span class="sxs-lookup"><span data-stu-id="96bec-2162">It does not throw an exception.</span></span> <span data-ttu-id="96bec-2163">Um zu steuern, ob eine Ausnahme wird ausgelöst, rufen Sie eine Überladung von der <xref:System.Type.GetType%2A> Methode mit einem `throwOnError` Parameter.</span><span class="sxs-lookup"><span data-stu-id="96bec-2163">To control whether an exception is thrown, call an overload of the <xref:System.Type.GetType%2A> method that has a `throwOnError` parameter.</span></span>  
  
 <span data-ttu-id="96bec-2164"><xref:System.Type.GetType%2A> funktioniert nur für Assemblys, die vom Datenträger geladen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2164"><xref:System.Type.GetType%2A> only works on assemblies loaded from disk.</span></span> <span data-ttu-id="96bec-2165">Aufrufen <xref:System.Type.GetType%2A> zum Nachschlagen eines Typs in einer dynamischen Assembly definiert, definiert der <xref:System.Reflection.Emit> Services erhalten Sie möglicherweise inkonsistentes Verhalten.</span><span class="sxs-lookup"><span data-stu-id="96bec-2165">If you call <xref:System.Type.GetType%2A> to look up a type defined in a dynamic assembly defined using the <xref:System.Reflection.Emit> services, you might get inconsistent behavior.</span></span> <span data-ttu-id="96bec-2166">Das Verhalten abhängig, ob die dynamische Assembly persistent, d. h. ist, wird erstellt, mit der `RunAndSave` oder `Save` Zugriff auf die Modi für die <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="96bec-2166">The behavior depends on whether the dynamic assembly is persistent, that is, created using the `RunAndSave` or `Save` access modes of the <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType> enumeration.</span></span> <span data-ttu-id="96bec-2167">Wenn die dynamische Assembly persistent ist und bevor Sie auf den Datenträger geschrieben wurde `GetType` wird aufgerufen, das Ladeprogramm die gespeicherte Assembly sucht, auf dem Datenträger, lädt die Assembly und ruft den Typ aus dieser Assembly ab.</span><span class="sxs-lookup"><span data-stu-id="96bec-2167">If the dynamic assembly is persistent and has been written to disk before `GetType` is called, the loader finds the saved assembly on disk, loads that assembly, and retrieves the type from that assembly.</span></span> <span data-ttu-id="96bec-2168">Wenn die Assembly nicht gespeichert wurde, wenn auf dem Datenträger `GetType` aufgerufen wird, wird der Methodenrückgabe `null`.</span><span class="sxs-lookup"><span data-stu-id="96bec-2168">If the assembly has not been saved to disk when `GetType` is called, the method returns `null`.</span></span> <span data-ttu-id="96bec-2169">`GetType` flüchtige dynamische Assemblys versteht nicht; aus diesem Grund Aufrufen `GetType` zum Abrufen eines Typs in eine vorübergehende dynamische Assembly gibt `null`.</span><span class="sxs-lookup"><span data-stu-id="96bec-2169">`GetType` does not understand transient dynamic assemblies; therefore, calling `GetType` to retrieve a type in a transient dynamic assembly returns `null`.</span></span>  
  
 <span data-ttu-id="96bec-2170">Mit `GetType` für ein dynamisches Modul, abonnieren das <xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType> Ereignis, und rufen `GetType` vor dem Speichern.</span><span class="sxs-lookup"><span data-stu-id="96bec-2170">To use `GetType` on a dynamic module, subscribe to the <xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType> event and call `GetType` before saving.</span></span> <span data-ttu-id="96bec-2171">Andernfalls erhalten Sie zwei Kopien der Assembly im Speicher.</span><span class="sxs-lookup"><span data-stu-id="96bec-2171">Otherwise, you will get two copies of the assembly in memory.</span></span>  
  
 <span data-ttu-id="96bec-2172">Die folgende Tabelle zeigt, welche Member einer Basisklasse von zurückgegeben werden die `Get` Methoden ein, wenn für einen Typ reflektieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-2172">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="96bec-2173">Memberart</span><span class="sxs-lookup"><span data-stu-id="96bec-2173">Member Type</span></span>|<span data-ttu-id="96bec-2174">Statisch</span><span class="sxs-lookup"><span data-stu-id="96bec-2174">Static</span></span>|<span data-ttu-id="96bec-2175">Nicht statische</span><span class="sxs-lookup"><span data-stu-id="96bec-2175">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="96bec-2176">Konstruktor</span><span class="sxs-lookup"><span data-stu-id="96bec-2176">Constructor</span></span>|<span data-ttu-id="96bec-2177">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-2177">No</span></span>|<span data-ttu-id="96bec-2178">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-2178">No</span></span>|  
|<span data-ttu-id="96bec-2179">Feld</span><span class="sxs-lookup"><span data-stu-id="96bec-2179">Field</span></span>|<span data-ttu-id="96bec-2180">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-2180">No</span></span>|<span data-ttu-id="96bec-2181">Ja.</span><span class="sxs-lookup"><span data-stu-id="96bec-2181">Yes.</span></span> <span data-ttu-id="96bec-2182">Ein Feld ist immer nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-2182">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="96bec-2183">event</span><span class="sxs-lookup"><span data-stu-id="96bec-2183">Event</span></span>|<span data-ttu-id="96bec-2184">Nicht zutreffend</span><span class="sxs-lookup"><span data-stu-id="96bec-2184">Not applicable</span></span>|<span data-ttu-id="96bec-2185">Die allgemeinen Typsystem ist, dass die Vererbung ist identisch mit der Methoden, die die Eigenschaft zu implementieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-2185">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="96bec-2186">Reflektion behandelt Eigenschaften als nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-2186">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-2187">Siehe Hinweis 2 weiter unten.</span><span class="sxs-lookup"><span data-stu-id="96bec-2187">See note 2 below.</span></span>|  
|<span data-ttu-id="96bec-2188">Methode</span><span class="sxs-lookup"><span data-stu-id="96bec-2188">Method</span></span>|<span data-ttu-id="96bec-2189">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-2189">No</span></span>|<span data-ttu-id="96bec-2190">Ja.</span><span class="sxs-lookup"><span data-stu-id="96bec-2190">Yes.</span></span> <span data-ttu-id="96bec-2191">Eine Methode (virtuelle und nicht virtuelle) möglich Ausblenden nach Namen oder nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-2191">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="96bec-2192">Geschachtelter Typ</span><span class="sxs-lookup"><span data-stu-id="96bec-2192">Nested Type</span></span>|<span data-ttu-id="96bec-2193">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-2193">No</span></span>|<span data-ttu-id="96bec-2194">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-2194">No</span></span>|  
|<span data-ttu-id="96bec-2195">Eigenschaft</span><span class="sxs-lookup"><span data-stu-id="96bec-2195">Property</span></span>|<span data-ttu-id="96bec-2196">Nicht zutreffend</span><span class="sxs-lookup"><span data-stu-id="96bec-2196">Not applicable</span></span>|<span data-ttu-id="96bec-2197">Die allgemeinen Typsystem ist, dass die Vererbung ist identisch mit der Methoden, die die Eigenschaft zu implementieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-2197">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="96bec-2198">Reflektion behandelt Eigenschaften als nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-2198">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-2199">Siehe Hinweis 2 weiter unten.</span><span class="sxs-lookup"><span data-stu-id="96bec-2199">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="96bec-2200">Nach Name und Signatur ausblenden berücksichtigt, dass alle Teile der Signatur, die benutzerdefinierten Modifizierer, einschließlich Typen, Parametertypen, Sentinels enthält und nicht verwaltete Aufrufkonventionen zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-2200">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="96bec-2201">Dies ist ein binärer Vergleich.</span><span class="sxs-lookup"><span data-stu-id="96bec-2201">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="96bec-2202">Für die Reflektion sind die Eigenschaften und Ereignisse nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-2202">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-2203">Wenn Sie eine Eigenschaft mit dem ein Get und Set-Accessor in der Basisklasse haben, aber die abgeleitete Klasse nur einen Get-Accessor hat, die Eigenschaft der abgeleiteten Klasse blendet die Basisklasseneigenschaft aus, und nicht werden auf den Setter in der Basisklasse zugreifen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2203">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="96bec-2204">Benutzerdefinierte Attribute sind nicht Teil des allgemeinen Typsystems.</span><span class="sxs-lookup"><span data-stu-id="96bec-2204">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="96bec-2205">Arrays oder COM-Typen werden nicht für durchsucht, es sei denn, sie bereits in der Tabelle der verfügbaren Klassen geladen wurden.</span><span class="sxs-lookup"><span data-stu-id="96bec-2205">Arrays or COM types are not searched for unless they have already been loaded into the table of available classes.</span></span>  
  
 <span data-ttu-id="96bec-2206">`typeName` Der Typname kann durch den Namespace oder eine Assembly qualifizierten Namen, der Angabe eines Assemblynamens enthält qualifiziert werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-2206">`typeName` can be the type name qualified by its namespace or an assembly-qualified name that includes an assembly name specification.</span></span> <span data-ttu-id="96bec-2207">Siehe <xref:System.Type.AssemblyQualifiedName%2A>.</span><span class="sxs-lookup"><span data-stu-id="96bec-2207">See <xref:System.Type.AssemblyQualifiedName%2A>.</span></span>  
  
 <span data-ttu-id="96bec-2208">Wenn `typeName` umfasst den Namespace, jedoch nicht den Assemblynamen eingeben, sucht diese Methode nur die Assembly des aufrufenden Objekts und die Datei "mscorlib.dll", in dieser Reihenfolge.</span><span class="sxs-lookup"><span data-stu-id="96bec-2208">If `typeName` includes the namespace but not the assembly name, this method searches only the calling object's assembly and Mscorlib.dll, in that order.</span></span> <span data-ttu-id="96bec-2209">Wenn TypeName vollqualifizierten mit dem Assemblynamen für teilweise oder vollständig ist, sucht diese Methode, in der angegebenen Assembly.</span><span class="sxs-lookup"><span data-stu-id="96bec-2209">If typeName is fully qualified with the partial or complete assembly name, this method searches in the specified assembly.</span></span> <span data-ttu-id="96bec-2210">Wenn die Assembly einen starken Namen aufweist, muss ein vollständigen Assemblynamen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2210">If the assembly has a strong name, a complete assembly name is required.</span></span>  
  
 <span data-ttu-id="96bec-2211">Die <xref:System.Type.AssemblyQualifiedName%2A> Eigenschaft gibt einen vollqualifizierten Typnamen einschließlich geschachtelte Typen, Assemblyname und generische Typargumente.</span><span class="sxs-lookup"><span data-stu-id="96bec-2211">The <xref:System.Type.AssemblyQualifiedName%2A> property returns a fully qualified type name including nested types, the assembly name, and generic type arguments.</span></span> <span data-ttu-id="96bec-2212">Alle Compiler, die die common Language Runtime unterstützen, werden der einfache Name einer geschachtelten Klasse geben an, und Reflektion erstellt einen ergänzten Namen in Übereinstimmung mit den folgenden Konventionen abgefragt.</span><span class="sxs-lookup"><span data-stu-id="96bec-2212">All compilers that support the common language runtime will emit the simple name of a nested class, and reflection constructs a mangled name when queried, in accordance with the following conventions.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-2213">In .NET Framework, Version 2.0 Prozessorarchitektur Assemblyidentität hinzugefügt wird, und kann als Teil der Assembly-Zeichenfolgen angegeben werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-2213">In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings.</span></span> <span data-ttu-id="96bec-2214">Z. B. "ProcessorArchitecture = Msil".</span><span class="sxs-lookup"><span data-stu-id="96bec-2214">For example, "ProcessorArchitecture=msil".</span></span> <span data-ttu-id="96bec-2215">Es ist jedoch nicht enthalten in der Zeichenfolge, die vom der <xref:System.Type.AssemblyQualifiedName%2A> Eigenschaft aus Kompatibilitätsgründen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2215">However, it is not included in the string returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, for compatibility reasons.</span></span> <span data-ttu-id="96bec-2216">Außerdem können Sie Typen laden, indem Sie erstellen eine <xref:System.Reflection.AssemblyName> -Objekt und die Übergabe an eine entsprechende Überladung von der <xref:System.Reflection.Assembly.Load%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="96bec-2216">You can also load types by creating an <xref:System.Reflection.AssemblyName> object and passing it to an appropriate overload of the <xref:System.Reflection.Assembly.Load%2A> method.</span></span> <span data-ttu-id="96bec-2217">Anschließend können Sie die <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> -Methode zum Laden von Typen aus der Assembly.</span><span class="sxs-lookup"><span data-stu-id="96bec-2217">You can then use the <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> method to load types from the assembly.</span></span> <span data-ttu-id="96bec-2218">Siehe auch <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="96bec-2218">See also <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span></span>  
  
|<span data-ttu-id="96bec-2219">Trennzeichen</span><span class="sxs-lookup"><span data-stu-id="96bec-2219">Delimiter</span></span>|<span data-ttu-id="96bec-2220">Bedeutung</span><span class="sxs-lookup"><span data-stu-id="96bec-2220">Meaning</span></span>|  
|---------------|-------------|  
|<span data-ttu-id="96bec-2221">Umgekehrter Schrägstrich (\\)</span><span class="sxs-lookup"><span data-stu-id="96bec-2221">Backslash (\\)</span></span>|<span data-ttu-id="96bec-2222">Escape-Zeichen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2222">Escape character.</span></span>|  
|<span data-ttu-id="96bec-2223">Graviszeichen (')</span><span class="sxs-lookup"><span data-stu-id="96bec-2223">Backtick (\`)</span></span>|<span data-ttu-id="96bec-2224">Steht vor einer oder mehreren Ziffern, die die Anzahl von Typparametern, die am Ende des Namens eines generischen Typs darstellt.</span><span class="sxs-lookup"><span data-stu-id="96bec-2224">Precedes one or more digits representing the number of type parameters, located at the end of the name of a generic type.</span></span>|  
|<span data-ttu-id="96bec-2225">Eckige Klammern ([])</span><span class="sxs-lookup"><span data-stu-id="96bec-2225">Brackets ([])</span></span>|<span data-ttu-id="96bec-2226">Schließen Sie eine generischen Typargumentliste für einen konstruierten generischen Typ; Schließen Sie in einer Liste der Typargumente eine Assembly qualifizierten Typnamen ein.</span><span class="sxs-lookup"><span data-stu-id="96bec-2226">Enclose a generic type argument list, for a constructed generic type; within a type argument list, enclose an assembly-qualified type.</span></span>|  
|<span data-ttu-id="96bec-2227">Komma (,)</span><span class="sxs-lookup"><span data-stu-id="96bec-2227">Comma (,)</span></span>|<span data-ttu-id="96bec-2228">Der Name der Assembly wird vorangestellt.</span><span class="sxs-lookup"><span data-stu-id="96bec-2228">Precedes the Assembly name.</span></span>|  
|<span data-ttu-id="96bec-2229">Punkt (.)</span><span class="sxs-lookup"><span data-stu-id="96bec-2229">Period (.)</span></span>|<span data-ttu-id="96bec-2230">Bezeichnet die Namespacebezeichner.</span><span class="sxs-lookup"><span data-stu-id="96bec-2230">Denotes namespace identifiers.</span></span>|  
|<span data-ttu-id="96bec-2231">Pluszeichen (+)</span><span class="sxs-lookup"><span data-stu-id="96bec-2231">Plus sign (+)</span></span>|<span data-ttu-id="96bec-2232">Steht vor einer geschachtelten Klasse.</span><span class="sxs-lookup"><span data-stu-id="96bec-2232">Precedes a nested class.</span></span>|  
  
 <span data-ttu-id="96bec-2233">Der vollqualifizierte Name für eine Klasse kann beispielsweise wie folgt aussehen:</span><span class="sxs-lookup"><span data-stu-id="96bec-2233">For example, the fully qualified name for a class might look like this:</span></span>  
  
```  
TopNamespace.SubNameSpace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="96bec-2234">Wenn der Namespace z.B. TopNamespace.Sub, würde die Zeichenfolge auf das Pluszeichen (+), ein Escapezeichen vorangestellt haben (\\) zu verhindern, dass es als geschachteltes Trennzeichen interpretiert wird.</span><span class="sxs-lookup"><span data-stu-id="96bec-2234">If the namespace were TopNamespace.Sub+Namespace, then the string would have to precede the plus sign (+) with an escape character (\\) to prevent it from being interpreted as a nesting separator.</span></span> <span data-ttu-id="96bec-2235">Reflektion gibt diese Zeichenfolge wie folgt aus:</span><span class="sxs-lookup"><span data-stu-id="96bec-2235">Reflection emits this string as follows:</span></span>  
  
```  
TopNamespace.Sub\+Namespace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="96bec-2236">Ein "++" wird "\\+\\+", und ein "\\"wird"\\\\".</span><span class="sxs-lookup"><span data-stu-id="96bec-2236">A "++" becomes "\\+\\+", and a "\\" becomes "\\\\".</span></span>  
  
 <span data-ttu-id="96bec-2237">Dieser qualifizierte Name persistent gespeichert werden kann, und später verwendet, um das Laden der <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="96bec-2237">This qualified name can be persisted and later used to load the <xref:System.Type>.</span></span> <span data-ttu-id="96bec-2238">Suchen und Laden eine <xref:System.Type>, verwenden Sie <xref:System.Type.GetType%2A> entweder mit dem Typ oder einen Namen geben nur mit dem Namen der Assembly qualifizierten Typ.</span><span class="sxs-lookup"><span data-stu-id="96bec-2238">To search for and load a <xref:System.Type>, use <xref:System.Type.GetType%2A> either with the type name only or with the assembly qualified type name.</span></span> <span data-ttu-id="96bec-2239"><xref:System.Type.GetType%2A> mit dem Namen nur sucht die <xref:System.Type> in der Assembly des Aufrufers, und klicken Sie dann in der System-Assembly.</span><span class="sxs-lookup"><span data-stu-id="96bec-2239"><xref:System.Type.GetType%2A> with the type name only will look for the <xref:System.Type> in the caller's assembly and then in the System assembly.</span></span> <span data-ttu-id="96bec-2240"><xref:System.Type.GetType%2A> mit der Assembly qualifizierten Typnamen sucht die <xref:System.Type> in jeder Assembly.</span><span class="sxs-lookup"><span data-stu-id="96bec-2240"><xref:System.Type.GetType%2A> with the assembly qualified type name will look for the <xref:System.Type> in any assembly.</span></span>  
  
 <span data-ttu-id="96bec-2241">Namen können nachfolgende Zeichen enthalten, zusätzliche Informationen über den Typ, z. B., ob der Typ ein Verweistyp, ein Zeigertyp oder einen Arraytyp ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-2241">Type names may include trailing characters that denote additional information about the type, such as whether the type is a reference type, a pointer type or an array type.</span></span> <span data-ttu-id="96bec-2242">Verwenden Sie zum Abrufen der Typname ohne diese nachfolgenden Zeichen `t.GetElementType().ToString()`, wobei `t` ist der Typ.</span><span class="sxs-lookup"><span data-stu-id="96bec-2242">To retrieve the type name without these trailing characters, use `t.GetElementType().ToString()`, where `t` is the type.</span></span>  
  
 <span data-ttu-id="96bec-2243">Leerzeichen sind in allen Komponenten von Typnamen mit Ausnahme der Assemblyname relevant.</span><span class="sxs-lookup"><span data-stu-id="96bec-2243">Spaces are relevant in all type name components except the assembly name.</span></span> <span data-ttu-id="96bec-2244">Der Assemblyname Leerzeichen vor dem Trennzeichen ',' relevant, aber Leerzeichen nach dem Trennzeichen ',' werden ignoriert.</span><span class="sxs-lookup"><span data-stu-id="96bec-2244">In the assembly name, spaces before the ',' separator are relevant, but spaces after the ',' separator are ignored.</span></span>  
  
 <span data-ttu-id="96bec-2245">Der Name eines generischen Typs endet mit einem Graviszeichen (\`) gefolgt von Ziffern, die die Anzahl der Argumente des generischen Typs darstellt.</span><span class="sxs-lookup"><span data-stu-id="96bec-2245">The name of a generic type ends with a backtick (\`) followed by digits representing the number of generic type arguments.</span></span> <span data-ttu-id="96bec-2246">Dieser Name-mangling dient zum Zulassen von Compilern zur Unterstützung von generischer Typen mit demselben Namen aber mit einer unterschiedlichen Anzahl von Typparametern, im gleichen Gültigkeitsbereich auftritt.</span><span class="sxs-lookup"><span data-stu-id="96bec-2246">The purpose of this name mangling is to allow compilers to support generic types with the same name but with different numbers of type parameters, occurring in the same scope.</span></span> <span data-ttu-id="96bec-2247">Reflektion gibt z. B. die ergänzten Namen `Tuple`1` and `Tupel`2` die generischen Methoden `Tuple(Of T)` und `Tuple(Of T0, T1)` in Visual Basic oder `Tuple<T>` und Tupel`\<T0, T1>` in Visual c#.</span><span class="sxs-lookup"><span data-stu-id="96bec-2247">For example, reflection returns the mangled names `Tuple`1` and `Tuple`2` from the generic methods `Tuple(Of T)` and `Tuple(Of T0, T1)` in Visual Basic, or `Tuple<T>` and Tuple`\<T0, T1>` in Visual C#.</span></span>  
  
 <span data-ttu-id="96bec-2248">Bei generischen Typen wird die Typargumentliste in Klammern gesetzt, und die Typargumente durch Kommas getrennt.</span><span class="sxs-lookup"><span data-stu-id="96bec-2248">For generic types, the type argument list is enclosed in brackets, and the type arguments are separated by commas.</span></span> <span data-ttu-id="96bec-2249">Zum Beispiel eine generische <xref:System.Collections.Generic.Dictionary%602> verfügt über zwei Typparameter.</span><span class="sxs-lookup"><span data-stu-id="96bec-2249">For example, a generic <xref:System.Collections.Generic.Dictionary%602> has two type parameters.</span></span> <span data-ttu-id="96bec-2250">Ein <xref:System.Collections.Generic.Dictionary%602> von `MyType` mit Schlüsseln vom Typ <xref:System.String> kann wie folgt dargestellt werden:</span><span class="sxs-lookup"><span data-stu-id="96bec-2250">A <xref:System.Collections.Generic.Dictionary%602> of `MyType` with keys of type <xref:System.String> might be represented as follows:</span></span>  
  
```  
System.Collections.Generic.Dictionary`2[System.String,MyType]  
```  
  
 <span data-ttu-id="96bec-2251">Um eine Assembly qualifizierten Typnamen in einer Liste der Typargumente angeben, schließen Sie die Assembly qualifizierten Typnamen in eckige Klammern ein.</span><span class="sxs-lookup"><span data-stu-id="96bec-2251">To specify an assembly-qualified type within a type argument list, enclose the assembly-qualified type within brackets.</span></span> <span data-ttu-id="96bec-2252">Andernfalls werden die Kommas, die trennen die Teile der Assembly qualifizierten Namen, interpretiert, als Trennzeichen für zusätzliche Typargumente.</span><span class="sxs-lookup"><span data-stu-id="96bec-2252">Otherwise, the commas that separate the parts of the assembly-qualified name are interpreted as delimiting additional type arguments.</span></span> <span data-ttu-id="96bec-2253">Z. B. eine <xref:System.Collections.Generic.Dictionary%602> von `MyType` fromMyAssembly.dll, mit Schlüsseln vom Typ <xref:System.String>, könnte wie folgt angegeben werden:</span><span class="sxs-lookup"><span data-stu-id="96bec-2253">For example, a <xref:System.Collections.Generic.Dictionary%602> of `MyType` fromMyAssembly.dll, with keys of type <xref:System.String>, might be specified as follows:</span></span>  
  
```  
Type.GetType("System.Collections.Generic.Dictionary`2[System.String,[MyType,MyAssembly]]")  
```  
  
> [!NOTE]
>  <span data-ttu-id="96bec-2254">Ein Typ mit assemblyqualifikation kann in Klammern eingeschlossen werden, nur, wenn er in einer Liste der Parameter angezeigt wird.</span><span class="sxs-lookup"><span data-stu-id="96bec-2254">An assembly-qualified type can be enclosed in brackets only when it appears within a type parameter list.</span></span> <span data-ttu-id="96bec-2255">Die Regeln für die Suche von Assemblys für qualifizierte und unvollständigen Typen in Typparameterlisten sind identisch mit den Regeln für den qualifizierten und nicht qualifizierte nicht generische Typen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2255">The rules for searching assemblies for qualified and unqualified types in type parameter lists are the same as the rules for qualified and unqualified nongeneric types.</span></span>  
  
 <span data-ttu-id="96bec-2256">Nullable-Typen sind ein besonderer Fall von generischen Typen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2256">Nullable types are a special case of generic types.</span></span> <span data-ttu-id="96bec-2257">Beispielsweise eine auf NULL festlegbare <xref:System.Int32> wird dargestellt, durch die Zeichenfolge "System.Nullable'1[System.Int32]".</span><span class="sxs-lookup"><span data-stu-id="96bec-2257">For example, a nullable <xref:System.Int32> is represented by the string "System.Nullable\`1[System.Int32]".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-2258">In c#, C++ und Visual Basic können Sie auch auf NULL festlegbare Typen, die mithilfe von Operatoren abrufen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2258">In C#, C++, and Visual Basic you can also get nullable types using type operators.</span></span> <span data-ttu-id="96bec-2259">Z. B. die NULL-Werte zulassen <xref:System.Boolean> Typ wird zurückgegeben, indem `typeof(Nullable<bool>)` in c# durch `Nullable<Boolean>::typeid` in C++, und durch `GetType(Nullable(Of Boolean))` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="96bec-2259">For example, the nullable <xref:System.Boolean> type is returned by `typeof(Nullable<bool>)` in C#, by `Nullable<Boolean>::typeid` in C++, and by `GetType(Nullable(Of Boolean))` in Visual Basic.</span></span>  
  
 <span data-ttu-id="96bec-2260">Die folgende Tabelle zeigt die Syntax, mit `GetType` für verschiedene Typen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2260">The following table shows the syntax you use with `GetType` for various types.</span></span>  
  
|<span data-ttu-id="96bec-2261">Zum Abrufen</span><span class="sxs-lookup"><span data-stu-id="96bec-2261">To Get</span></span>|<span data-ttu-id="96bec-2262">Mit</span><span class="sxs-lookup"><span data-stu-id="96bec-2262">Use</span></span>|  
|------------|---------|  
|<span data-ttu-id="96bec-2263">Ein NULL-Werte zulässt <xref:System.Int32></span><span class="sxs-lookup"><span data-stu-id="96bec-2263">A nullable <xref:System.Int32></span></span>|<span data-ttu-id="96bec-2264">`Type.GetType("System.Nullable`1[System.Int32]")\`</span><span class="sxs-lookup"><span data-stu-id="96bec-2264">`Type.GetType("System.Nullable`1[System.Int32]")\`</span></span>|  
|<span data-ttu-id="96bec-2265">Ein nicht verwalteter Zeiger auf `MyType`</span><span class="sxs-lookup"><span data-stu-id="96bec-2265">An unmanaged pointer to `MyType`</span></span>|`Type.GetType("MyType*")`|  
|<span data-ttu-id="96bec-2266">Ein nicht verwalteter Zeiger auf einen Zeiger auf `MyType`</span><span class="sxs-lookup"><span data-stu-id="96bec-2266">An unmanaged pointer to a pointer to `MyType`</span></span>|`Type.GetType("MyType**")`|  
|<span data-ttu-id="96bec-2267">Ein verwalteter Zeiger oder Verweis auf `MyType`</span><span class="sxs-lookup"><span data-stu-id="96bec-2267">A managed pointer or reference to `MyType`</span></span>|<span data-ttu-id="96bec-2268">`Type.GetType("MyType&")`</span><span class="sxs-lookup"><span data-stu-id="96bec-2268">`Type.GetType("MyType&")`.</span></span> <span data-ttu-id="96bec-2269">Beachten Sie, dass Verweise im Gegensatz zu Zeigern auf eine Ebene beschränkt sind.</span><span class="sxs-lookup"><span data-stu-id="96bec-2269">Note that unlike pointers, references are limited to one level.</span></span>|  
|<span data-ttu-id="96bec-2270">Eine übergeordnete Klasse und eine geschachtelte Klasse.</span><span class="sxs-lookup"><span data-stu-id="96bec-2270">A parent class and a nested class</span></span>|`Type.GetType("MyParentClass+MyNestedClass")`|  
|<span data-ttu-id="96bec-2271">Ein eindimensionales Array mit einer unteren Grenze von 0</span><span class="sxs-lookup"><span data-stu-id="96bec-2271">A one-dimensional array with a lower bound of 0</span></span>|`Type.GetType("MyType[]")`|  
|<span data-ttu-id="96bec-2272">Ein eindimensionales Array mit einem Unbekannter unterer Grenze</span><span class="sxs-lookup"><span data-stu-id="96bec-2272">A one-dimensional array with an unknown lower bound</span></span>|`Type.GetType("MyType[*]")`|  
|<span data-ttu-id="96bec-2273">Ein Array mit n-dimensionalen</span><span class="sxs-lookup"><span data-stu-id="96bec-2273">An n-dimensional array</span></span>|<span data-ttu-id="96bec-2274">Ein Komma (,) innerhalb der Klammern eine insgesamt n-1 Mal.</span><span class="sxs-lookup"><span data-stu-id="96bec-2274">A comma (,) inside the brackets a total of n-1 times.</span></span> <span data-ttu-id="96bec-2275">Z. B. `System.Object[,,]` stellt ein dreidimensionales `Object` Array.</span><span class="sxs-lookup"><span data-stu-id="96bec-2275">For example, `System.Object[,,]` represents a three-dimensional `Object` array.</span></span>|  
|<span data-ttu-id="96bec-2276">Ein Array von eindimensionale arrays</span><span class="sxs-lookup"><span data-stu-id="96bec-2276">An array of one-dimensional arrays</span></span>|`Type.GetType("MyType[][]")`|  
|<span data-ttu-id="96bec-2277">Ein rechteckiges zweidimensionales Array mit Unbekannter unterer Grenze</span><span class="sxs-lookup"><span data-stu-id="96bec-2277">A rectangular two-dimensional array with unknown lower bounds</span></span>|`Type.GetType("MyType[,]")`|  
|<span data-ttu-id="96bec-2278">Ein generischer Typ mit einem Typargument</span><span class="sxs-lookup"><span data-stu-id="96bec-2278">A generic type with one type argument</span></span>|<span data-ttu-id="96bec-2279">`Type.GetType("MyGenericType`1[MyType]")\`</span><span class="sxs-lookup"><span data-stu-id="96bec-2279">`Type.GetType("MyGenericType`1[MyType]")\`</span></span>|  
|<span data-ttu-id="96bec-2280">Ein generischer Typ mit zwei Typargumente</span><span class="sxs-lookup"><span data-stu-id="96bec-2280">A generic type with two type arguments</span></span>|<span data-ttu-id="96bec-2281">`Type.GetType("MyGenericType`2[MyType,AnotherType]")"</span><span class="sxs-lookup"><span data-stu-id="96bec-2281">`Type.GetType("MyGenericType`2[MyType,AnotherType]")\`</span></span>|  
|<span data-ttu-id="96bec-2282">Ein generischer Typ mit zwei Argumenten der Assembly qualifizierten Typnamen</span><span class="sxs-lookup"><span data-stu-id="96bec-2282">A generic type with two assembly-qualified type arguments</span></span>|<span data-ttu-id="96bec-2283">`Type.GetType("MyGenericType`2[[MyType,MyAssembly],[AnotherType,AnotherAssembly]]")"</span><span class="sxs-lookup"><span data-stu-id="96bec-2283">`Type.GetType("MyGenericType`2[[MyType,MyAssembly],[AnotherType,AnotherAssembly]]")\`</span></span>|  
|<span data-ttu-id="96bec-2284">Ein mit assemblyqualifikation, generischer Typ mit einem Argument für die Assembly qualifizierten Typnamen</span><span class="sxs-lookup"><span data-stu-id="96bec-2284">An assembly-qualified generic type with an assembly-qualified type argument</span></span>|<span data-ttu-id="96bec-2285">`Type.GetType("MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly")"</span><span class="sxs-lookup"><span data-stu-id="96bec-2285">`Type.GetType("MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly")\`</span></span>|  
|<span data-ttu-id="96bec-2286">Ein generischer Typ, dessen Typargument eines generischen Typs mit zwei Argumente des Typs ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-2286">A generic type whose type argument is a generic type with two type arguments</span></span>|<span data-ttu-id="96bec-2287">`Type.GetType("MyGenericType`1 [AnotherGenericType`2[MyType,AnotherType]]")`</span><span class="sxs-lookup"><span data-stu-id="96bec-2287">`Type.GetType("MyGenericType`1[AnotherGenericType`2[MyType,AnotherType]]")`</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="96bec-2288">Das folgende Beispiel ruft den Typ des `System.Int32` und verwendet das Typobjekt zum Anzeigen der <xref:System.Type.FullName%2A> Eigenschaft `System.Int32`.</span><span class="sxs-lookup"><span data-stu-id="96bec-2288">The following example retrieves the type of `System.Int32` and uses that type object to display the <xref:System.Type.FullName%2A> property of `System.Int32`.</span></span>  
  
 [!code-cpp[Type_GetType#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetType/CPP/type_gettype.cpp#1)]
 [!code-csharp[Type_GetType#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetType/CS/type_gettype.cs#1)]
 [!code-vb[Type_GetType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetType/VB/type_gettype.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96bec-2289">
            <paramref name="typeName" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2289">
              <paramref name="typeName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="96bec-2290">A class initializer is invoked and throws an exception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2290">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="96bec-2291">
            <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2291">
              <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span>
          </span>
          <span data-ttu-id="96bec-2292">-or-  <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2292">-or-  <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span>
          </span>
          <span data-ttu-id="96bec-2293">-or-  <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2293">-or-  <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="96bec-2294">
            <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2294">
              <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="96bec-2295">
            <block subset="none" type="note">
              <para> In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.IO.IOException" />, instead.  </para>
            </block>  The assembly or one of its dependencies was found, but could not be loaded.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2295">
              <block subset="none" type="note">
                <para> In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.IO.IOException" />, instead.  </para>
              </block>  The assembly or one of its dependencies was found, but could not be loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="96bec-2296">The assembly or one of its dependencies is not valid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2296">The assembly or one of its dependencies is not valid.</span>
          </span>
          <span data-ttu-id="96bec-2297">-or-  Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2297">-or-  Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</span>
          </span>
        </exception>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.TypeLoadException" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
        <altmember cref="M:System.Reflection.Assembly.GetAssembly(System.Type)" />
        <altmember cref="M:System.Reflection.Assembly.GetType(System.String)" />
        <altmember cref="T:System.Reflection.AssemblyName" />
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String, throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName, bool throwOnError);" />
      <MemberSignature Language="F#" Value="static member GetType : string * bool -&gt; Type" Usage="System.Type.GetType (typeName, throwOnError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="96bec-2298">The assembly-qualified name of the type to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2298">The assembly-qualified name of the type to get.</span>
          </span>
          <span data-ttu-id="96bec-2299">See <see cref="P:System.Type.AssemblyQualifiedName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2299">See <see cref="P:System.Type.AssemblyQualifiedName" />.</span>
          </span>
          <span data-ttu-id="96bec-2300">If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2300">If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.</span>
          </span>
        </param>
        <param name="throwOnError">
          <span data-ttu-id="96bec-2301">
            <see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2301">
              <see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" />.</span>
          </span>
          <span data-ttu-id="96bec-2302">Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2302">Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them.</span>
          </span>
          <span data-ttu-id="96bec-2303">See the Exceptions section.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2303">See the Exceptions section.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-2304">Gets the <see cref="T:System.Type" /> with the specified name, performing a case-sensitive search and specifying whether to throw an exception if the type is not found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2304">Gets the <see cref="T:System.Type" /> with the specified name, performing a case-sensitive search and specifying whether to throw an exception if the type is not found.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-2305">The type with the specified name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2305">The type with the specified name.</span>
          </span>
          <span data-ttu-id="96bec-2306">If the type is not found, the <paramref name="throwOnError" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2306">If the type is not found, the <paramref name="throwOnError" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown.</span>
          </span>
          <span data-ttu-id="96bec-2307">In some cases, an exception is thrown regardless of the value of <paramref name="throwOnError" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2307">In some cases, an exception is thrown regardless of the value of <paramref name="throwOnError" />.</span>
          </span>
          <span data-ttu-id="96bec-2308">See the Exceptions section.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2308">See the Exceptions section.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-2309">Können Sie die <xref:System.Type.GetType%2A> Methode zum Abrufen einer <xref:System.Type> Objekt für einen Typ in einer anderen Assembly, wenn Sie die Assembly qualifizierten Namen kennen, die aus abgerufen werden können <xref:System.Type.AssemblyQualifiedName>.</span><span class="sxs-lookup"><span data-stu-id="96bec-2309">You can use the <xref:System.Type.GetType%2A> method to obtain a <xref:System.Type> object for a type in another assembly, if you know its assembly-qualified name which can be obtained from <xref:System.Type.AssemblyQualifiedName>.</span></span> <span data-ttu-id="96bec-2310"><xref:System.Type.GetType%2A> führt zum Laden der Assembly im angegebenen `typeName`.</span><span class="sxs-lookup"><span data-stu-id="96bec-2310"><xref:System.Type.GetType%2A> causes loading of the assembly specified in `typeName`.</span></span> <span data-ttu-id="96bec-2311">Sie können auch laden eine Assembly unter Verwendung der <xref:System.Reflection.Assembly.Load%2A> -Methode und anschließend auf die <xref:System.Type.GetType%2A> oder <xref:System.Reflection.Assembly.GetTypes%2A> Methoden der <xref:System.Reflection.Assembly> Klasse zum Abrufen <xref:System.Type> Objekte.</span><span class="sxs-lookup"><span data-stu-id="96bec-2311">You can also load an assembly using the <xref:System.Reflection.Assembly.Load%2A> method, and then use the <xref:System.Type.GetType%2A> or <xref:System.Reflection.Assembly.GetTypes%2A> methods of the <xref:System.Reflection.Assembly> class to get <xref:System.Type> objects.</span></span> <span data-ttu-id="96bec-2312">Wenn ein Typ in einer Assembly mit dem Programm zur Kompilierzeit bekannt ist, ist es effizienter, verwenden Sie `typeof` in c# <xref:System.Type.GetType%2A> in Visual Basic oder `typeid` in C++.</span><span class="sxs-lookup"><span data-stu-id="96bec-2312">If a type is in an assembly known to your program at compile time, it is more efficient to use `typeof` in C#, <xref:System.Type.GetType%2A> in Visual Basic, or `typeid` in C++.</span></span>  
  
 <span data-ttu-id="96bec-2313">`GetType` funktioniert nur für Assemblys, die vom Datenträger geladen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2313">`GetType` only works on assemblies loaded from disk.</span></span> <span data-ttu-id="96bec-2314">Aufrufen `GetType` zum Nachschlagen eines Typs in einer dynamischen Assembly definiert, definiert der <xref:System.Reflection.Emit> Services erhalten Sie möglicherweise inkonsistentes Verhalten.</span><span class="sxs-lookup"><span data-stu-id="96bec-2314">If you call `GetType` to look up a type defined in a dynamic assembly defined using the <xref:System.Reflection.Emit> services, you might get inconsistent behavior.</span></span> <span data-ttu-id="96bec-2315">Das Verhalten abhängig, ob die dynamische Assembly persistent, d. h. ist, wird erstellt, mit der `RunAndSave` oder `Save` Zugriff auf die Modi für die <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="96bec-2315">The behavior depends on whether the dynamic assembly is persistent, that is, created using the `RunAndSave` or `Save` access modes of the <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType> enumeration.</span></span> <span data-ttu-id="96bec-2316">Wenn die dynamische Assembly persistent ist und bevor Sie auf den Datenträger geschrieben wurde `GetType` wird aufgerufen, das Ladeprogramm die gespeicherte Assembly sucht, auf dem Datenträger, lädt die Assembly und ruft den Typ aus dieser Assembly ab.</span><span class="sxs-lookup"><span data-stu-id="96bec-2316">If the dynamic assembly is persistent and has been written to disk before `GetType` is called, the loader finds the saved assembly on disk, loads that assembly, and retrieves the type from that assembly.</span></span> <span data-ttu-id="96bec-2317">Wenn die Assembly nicht gespeichert wurde, wenn auf dem Datenträger `GetType` aufgerufen wird, wird der Methodenrückgabe `null`.</span><span class="sxs-lookup"><span data-stu-id="96bec-2317">If the assembly has not been saved to disk when `GetType` is called, the method returns `null`.</span></span> <span data-ttu-id="96bec-2318">`GetType` flüchtige dynamische Assemblys versteht nicht; aus diesem Grund Aufrufen `GetType` zum Abrufen eines Typs in eine vorübergehende dynamische Assembly gibt `null`.</span><span class="sxs-lookup"><span data-stu-id="96bec-2318">`GetType` does not understand transient dynamic assemblies; therefore, calling `GetType` to retrieve a type in a transient dynamic assembly returns `null`.</span></span>  
  
 <span data-ttu-id="96bec-2319">Mit `GetType` für ein dynamisches Modul, abonnieren das <xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType> Ereignis, und rufen `GetType` vor dem Speichern.</span><span class="sxs-lookup"><span data-stu-id="96bec-2319">To use `GetType` on a dynamic module, subscribe to the <xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType> event and call `GetType` before saving.</span></span> <span data-ttu-id="96bec-2320">Andernfalls erhalten Sie zwei Kopien der Assembly im Speicher.</span><span class="sxs-lookup"><span data-stu-id="96bec-2320">Otherwise, you will get two copies of the assembly in memory.</span></span>  
  
 <span data-ttu-id="96bec-2321">Die `throwOnError` Parameter gibt an, was geschieht, wenn der Typ wurde nicht gefunden, und auch bestimmte andere Ausnahmebedingungen unterdrückt, wie im Abschnitt für Ausnahmen beschrieben.</span><span class="sxs-lookup"><span data-stu-id="96bec-2321">The `throwOnError` parameter specifies what happens when the type is not found, and also suppresses certain other exception conditions, as described in the Exceptions section.</span></span> <span data-ttu-id="96bec-2322">Einige Ausnahmen werden ausgelöst, unabhängig vom Wert der `throwOnError`.</span><span class="sxs-lookup"><span data-stu-id="96bec-2322">Some exceptions are thrown regardless of the value of `throwOnError`.</span></span> <span data-ttu-id="96bec-2323">Wenn der Typ befindet sich aber nicht geladen werden, z. B. eine <xref:System.TypeLoadException> wird ausgelöst, selbst wenn `throwOnError` ist `false`.</span><span class="sxs-lookup"><span data-stu-id="96bec-2323">For example, if the type is found but cannot be loaded, a <xref:System.TypeLoadException> is thrown even if `throwOnError` is `false`.</span></span>  
  
 <span data-ttu-id="96bec-2324">Die folgende Tabelle zeigt, welche Member einer Basisklasse von zurückgegeben werden die `Get` Methoden ein, wenn für einen Typ reflektieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-2324">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="96bec-2325">Memberart</span><span class="sxs-lookup"><span data-stu-id="96bec-2325">Member Type</span></span>|<span data-ttu-id="96bec-2326">Statisch</span><span class="sxs-lookup"><span data-stu-id="96bec-2326">Static</span></span>|<span data-ttu-id="96bec-2327">Nicht statische</span><span class="sxs-lookup"><span data-stu-id="96bec-2327">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="96bec-2328">Konstruktor</span><span class="sxs-lookup"><span data-stu-id="96bec-2328">Constructor</span></span>|<span data-ttu-id="96bec-2329">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-2329">No</span></span>|<span data-ttu-id="96bec-2330">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-2330">No</span></span>|  
|<span data-ttu-id="96bec-2331">Feld</span><span class="sxs-lookup"><span data-stu-id="96bec-2331">Field</span></span>|<span data-ttu-id="96bec-2332">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-2332">No</span></span>|<span data-ttu-id="96bec-2333">Ja.</span><span class="sxs-lookup"><span data-stu-id="96bec-2333">Yes.</span></span> <span data-ttu-id="96bec-2334">Ein Feld ist immer nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-2334">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="96bec-2335">event</span><span class="sxs-lookup"><span data-stu-id="96bec-2335">Event</span></span>|<span data-ttu-id="96bec-2336">Nicht zutreffend</span><span class="sxs-lookup"><span data-stu-id="96bec-2336">Not applicable</span></span>|<span data-ttu-id="96bec-2337">Die allgemeinen Typsystem ist, dass die Vererbung ist identisch mit der Methoden, die die Eigenschaft zu implementieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-2337">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="96bec-2338">Reflektion behandelt Eigenschaften als nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-2338">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-2339">Siehe Hinweis 2 weiter unten.</span><span class="sxs-lookup"><span data-stu-id="96bec-2339">See note 2 below.</span></span>|  
|<span data-ttu-id="96bec-2340">Methode</span><span class="sxs-lookup"><span data-stu-id="96bec-2340">Method</span></span>|<span data-ttu-id="96bec-2341">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-2341">No</span></span>|<span data-ttu-id="96bec-2342">Ja.</span><span class="sxs-lookup"><span data-stu-id="96bec-2342">Yes.</span></span> <span data-ttu-id="96bec-2343">Eine Methode (virtuelle und nicht virtuelle) möglich Ausblenden nach Namen oder nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-2343">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="96bec-2344">Geschachtelter Typ</span><span class="sxs-lookup"><span data-stu-id="96bec-2344">Nested Type</span></span>|<span data-ttu-id="96bec-2345">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-2345">No</span></span>|<span data-ttu-id="96bec-2346">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-2346">No</span></span>|  
|<span data-ttu-id="96bec-2347">Eigenschaft</span><span class="sxs-lookup"><span data-stu-id="96bec-2347">Property</span></span>|<span data-ttu-id="96bec-2348">Nicht zutreffend</span><span class="sxs-lookup"><span data-stu-id="96bec-2348">Not applicable</span></span>|<span data-ttu-id="96bec-2349">Die allgemeinen Typsystem ist, dass die Vererbung ist identisch mit der Methoden, die die Eigenschaft zu implementieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-2349">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="96bec-2350">Reflektion behandelt Eigenschaften als nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-2350">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-2351">Siehe Hinweis 2 weiter unten.</span><span class="sxs-lookup"><span data-stu-id="96bec-2351">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="96bec-2352">Nach Name und Signatur ausblenden berücksichtigt, dass alle Teile der Signatur, die benutzerdefinierten Modifizierer, einschließlich Typen, Parametertypen, Sentinels enthält und nicht verwaltete Aufrufkonventionen zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-2352">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="96bec-2353">Dies ist ein binärer Vergleich.</span><span class="sxs-lookup"><span data-stu-id="96bec-2353">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="96bec-2354">Für die Reflektion sind die Eigenschaften und Ereignisse nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-2354">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-2355">Wenn Sie eine Eigenschaft mit dem ein Get und Set-Accessor in der Basisklasse haben, aber die abgeleitete Klasse nur einen Get-Accessor hat, die Eigenschaft der abgeleiteten Klasse blendet die Basisklasseneigenschaft aus, und nicht werden auf den Setter in der Basisklasse zugreifen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2355">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="96bec-2356">Benutzerdefinierte Attribute sind nicht Teil des allgemeinen Typsystems.</span><span class="sxs-lookup"><span data-stu-id="96bec-2356">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="96bec-2357">Arrays oder COM-Typen werden nicht für durchsucht, es sei denn, sie bereits in der Tabelle der verfügbaren Klassen geladen wurden.</span><span class="sxs-lookup"><span data-stu-id="96bec-2357">Arrays or COM types are not searched for unless they have already been loaded into the table of available classes.</span></span>  
  
 <span data-ttu-id="96bec-2358">`typeName` Der Typname kann durch den Namespace oder eine Assembly qualifizierten Namen, der Angabe eines Assemblynamens enthält qualifiziert werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-2358">`typeName` can be the type name qualified by its namespace or an assembly-qualified name that includes an assembly name specification.</span></span> <span data-ttu-id="96bec-2359">Siehe <xref:System.Type.AssemblyQualifiedName%2A>.</span><span class="sxs-lookup"><span data-stu-id="96bec-2359">See <xref:System.Type.AssemblyQualifiedName%2A>.</span></span>  
  
 <span data-ttu-id="96bec-2360">Wenn `typeName` umfasst den Namespace, jedoch nicht den Assemblynamen eingeben, sucht diese Methode nur die Assembly des aufrufenden Objekts und die Datei "mscorlib.dll", in dieser Reihenfolge.</span><span class="sxs-lookup"><span data-stu-id="96bec-2360">If `typeName` includes the namespace but not the assembly name, this method searches only the calling object's assembly and Mscorlib.dll, in that order.</span></span> <span data-ttu-id="96bec-2361">Wenn TypeName vollqualifizierten mit dem Assemblynamen für teilweise oder vollständig ist, sucht diese Methode, in der angegebenen Assembly.</span><span class="sxs-lookup"><span data-stu-id="96bec-2361">If typeName is fully qualified with the partial or complete assembly name, this method searches in the specified assembly.</span></span> <span data-ttu-id="96bec-2362">Wenn die Assembly einen starken Namen aufweist, muss ein vollständigen Assemblynamen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2362">If the assembly has a strong name, a complete assembly name is required.</span></span>  
  
 <span data-ttu-id="96bec-2363">Die <xref:System.Type.AssemblyQualifiedName%2A> Eigenschaft gibt einen vollqualifizierten Typnamen einschließlich geschachtelte Typen, Assemblyname und generischen Argumente zurück.</span><span class="sxs-lookup"><span data-stu-id="96bec-2363">The <xref:System.Type.AssemblyQualifiedName%2A> property returns a fully qualified type name including nested types, the assembly name, and generic arguments.</span></span> <span data-ttu-id="96bec-2364">Alle Compiler, die die common Language Runtime unterstützen, werden der einfache Name einer geschachtelten Klasse geben an, und Reflektion erstellt einen ergänzten Namen in Übereinstimmung mit den folgenden Konventionen abgefragt.</span><span class="sxs-lookup"><span data-stu-id="96bec-2364">All compilers that support the common language runtime will emit the simple name of a nested class, and reflection constructs a mangled name when queried, in accordance with the following conventions.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-2365">In .NET Framework, Version 2.0 Prozessorarchitektur Assemblyidentität hinzugefügt wird, und kann als Teil der Assembly-Zeichenfolgen angegeben werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-2365">In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings.</span></span> <span data-ttu-id="96bec-2366">Z. B. "ProcessorArchitecture = Msil".</span><span class="sxs-lookup"><span data-stu-id="96bec-2366">For example, "ProcessorArchitecture=msil".</span></span> <span data-ttu-id="96bec-2367">Es ist jedoch nicht enthalten in der Zeichenfolge, die vom der <xref:System.Type.AssemblyQualifiedName%2A> Eigenschaft aus Kompatibilitätsgründen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2367">However, it is not included in the string returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, for compatibility reasons.</span></span> <span data-ttu-id="96bec-2368">Außerdem können Sie Typen laden, indem Sie erstellen eine <xref:System.Reflection.AssemblyName> -Objekt und die Übergabe an eine entsprechende Überladung von der <xref:System.Reflection.Assembly.Load%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="96bec-2368">You can also load types by creating an <xref:System.Reflection.AssemblyName> object and passing it to an appropriate overload of the <xref:System.Reflection.Assembly.Load%2A> method.</span></span> <span data-ttu-id="96bec-2369">Anschließend können Sie die <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> -Methode zum Laden von Typen aus der Assembly.</span><span class="sxs-lookup"><span data-stu-id="96bec-2369">You can then use the <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> method to load types from the assembly.</span></span> <span data-ttu-id="96bec-2370">Siehe auch <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="96bec-2370">See also <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span></span>  
  
|<span data-ttu-id="96bec-2371">Trennzeichen</span><span class="sxs-lookup"><span data-stu-id="96bec-2371">Delimiter</span></span>|<span data-ttu-id="96bec-2372">Bedeutung</span><span class="sxs-lookup"><span data-stu-id="96bec-2372">Meaning</span></span>|  
|---------------|-------------|  
|<span data-ttu-id="96bec-2373">Umgekehrter Schrägstrich (\\)</span><span class="sxs-lookup"><span data-stu-id="96bec-2373">Backslash (\\)</span></span>|<span data-ttu-id="96bec-2374">Escape-Zeichen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2374">Escape character.</span></span>|  
|<span data-ttu-id="96bec-2375">Graviszeichen (')</span><span class="sxs-lookup"><span data-stu-id="96bec-2375">Backtick (\`)</span></span>|<span data-ttu-id="96bec-2376">Steht vor einer oder mehreren Ziffern, die die Anzahl von Typparametern, die am Ende des Namens eines generischen Typs darstellt.</span><span class="sxs-lookup"><span data-stu-id="96bec-2376">Precedes one or more digits representing the number of type parameters, located at the end of the name of a generic type.</span></span>|  
|<span data-ttu-id="96bec-2377">Eckige Klammern ([])</span><span class="sxs-lookup"><span data-stu-id="96bec-2377">Brackets ([])</span></span>|<span data-ttu-id="96bec-2378">Schließen Sie eine generischen Typargumentliste für einen konstruierten generischen Typ; Schließen Sie in einer Liste der Typargumente eine Assembly qualifizierten Typnamen ein.</span><span class="sxs-lookup"><span data-stu-id="96bec-2378">Enclose a generic type argument list, for a constructed generic type; within a type argument list, enclose an assembly-qualified type.</span></span>|  
|<span data-ttu-id="96bec-2379">Komma (,)</span><span class="sxs-lookup"><span data-stu-id="96bec-2379">Comma (,)</span></span>|<span data-ttu-id="96bec-2380">Der Name der Assembly wird vorangestellt.</span><span class="sxs-lookup"><span data-stu-id="96bec-2380">Precedes the Assembly name.</span></span>|  
|<span data-ttu-id="96bec-2381">Punkt (.)</span><span class="sxs-lookup"><span data-stu-id="96bec-2381">Period (.)</span></span>|<span data-ttu-id="96bec-2382">Bezeichnet die Namespacebezeichner.</span><span class="sxs-lookup"><span data-stu-id="96bec-2382">Denotes namespace identifiers.</span></span>|  
|<span data-ttu-id="96bec-2383">Pluszeichen (+)</span><span class="sxs-lookup"><span data-stu-id="96bec-2383">Plus sign (+)</span></span>|<span data-ttu-id="96bec-2384">Steht vor einer geschachtelten Klasse.</span><span class="sxs-lookup"><span data-stu-id="96bec-2384">Precedes a nested class.</span></span>|  
  
 <span data-ttu-id="96bec-2385">Der vollqualifizierte Name für eine Klasse kann beispielsweise wie folgt aussehen:</span><span class="sxs-lookup"><span data-stu-id="96bec-2385">For example, the fully qualified name for a class might look like this:</span></span>  
  
```  
TopNamespace.SubNameSpace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="96bec-2386">Wenn der Namespace z.B. TopNamespace.Sub, würde die Zeichenfolge auf das Pluszeichen (+), ein Escapezeichen vorangestellt haben (\\) zu verhindern, dass es als geschachteltes Trennzeichen interpretiert wird.</span><span class="sxs-lookup"><span data-stu-id="96bec-2386">If the namespace were TopNamespace.Sub+Namespace, then the string would have to precede the plus sign (+) with an escape character (\\) to prevent it from being interpreted as a nesting separator.</span></span> <span data-ttu-id="96bec-2387">Reflektion gibt diese Zeichenfolge wie folgt aus:</span><span class="sxs-lookup"><span data-stu-id="96bec-2387">Reflection emits this string as follows:</span></span>  
  
```  
TopNamespace.Sub\+Namespace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="96bec-2388">Ein "++" wird "\\+\\+", und ein "\\"wird"\\\\".</span><span class="sxs-lookup"><span data-stu-id="96bec-2388">A "++" becomes "\\+\\+", and a "\\" becomes "\\\\".</span></span>  
  
 <span data-ttu-id="96bec-2389">Dieser qualifizierte Name persistent gespeichert werden kann, und später verwendet, um das Laden der <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="96bec-2389">This qualified name can be persisted and later used to load the <xref:System.Type>.</span></span> <span data-ttu-id="96bec-2390">Suchen und Laden eine <xref:System.Type>, verwenden Sie <xref:System.Type.GetType%2A> entweder mit dem Typ oder einen Namen geben nur mit dem Namen der Assembly qualifizierten Typ.</span><span class="sxs-lookup"><span data-stu-id="96bec-2390">To search for and load a <xref:System.Type>, use <xref:System.Type.GetType%2A> either with the type name only or with the assembly qualified type name.</span></span> <span data-ttu-id="96bec-2391"><xref:System.Type.GetType%2A> mit dem Namen nur sucht die <xref:System.Type> in der Assembly des Aufrufers, und klicken Sie dann in der System-Assembly.</span><span class="sxs-lookup"><span data-stu-id="96bec-2391"><xref:System.Type.GetType%2A> with the type name only will look for the <xref:System.Type> in the caller's assembly and then in the System assembly.</span></span> <span data-ttu-id="96bec-2392"><xref:System.Type.GetType%2A> mit der Assembly qualifizierten Typnamen sucht die <xref:System.Type> in jeder Assembly.</span><span class="sxs-lookup"><span data-stu-id="96bec-2392"><xref:System.Type.GetType%2A> with the assembly qualified type name will look for the <xref:System.Type> in any assembly.</span></span>  
  
 <span data-ttu-id="96bec-2393">Namen können nachfolgende Zeichen enthalten, zusätzliche Informationen über den Typ, z. B., ob der Typ ein Verweistyp, ein Zeigertyp oder einen Arraytyp ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-2393">Type names may include trailing characters that denote additional information about the type, such as whether the type is a reference type, a pointer type or an array type.</span></span> <span data-ttu-id="96bec-2394">Verwenden Sie zum Abrufen der Typname ohne diese nachfolgenden Zeichen `t.GetElementType().ToString()`, wobei `t` ist der Typ.</span><span class="sxs-lookup"><span data-stu-id="96bec-2394">To retrieve the type name without these trailing characters, use `t.GetElementType().ToString()`, where `t` is the type.</span></span>  
  
 <span data-ttu-id="96bec-2395">Leerzeichen sind in allen Komponenten von Typnamen mit Ausnahme der Assemblyname relevant.</span><span class="sxs-lookup"><span data-stu-id="96bec-2395">Spaces are relevant in all type name components except the assembly name.</span></span> <span data-ttu-id="96bec-2396">Der Assemblyname Leerzeichen vor dem Trennzeichen ',' relevant, aber Leerzeichen nach dem Trennzeichen ',' werden ignoriert.</span><span class="sxs-lookup"><span data-stu-id="96bec-2396">In the assembly name, spaces before the ',' separator are relevant, but spaces after the ',' separator are ignored.</span></span>  
  
 <span data-ttu-id="96bec-2397">Der Name eines generischen Typs endet mit einem Graviszeichen (\`) gefolgt von Ziffern, die die Anzahl der Argumente des generischen Typs darstellt.</span><span class="sxs-lookup"><span data-stu-id="96bec-2397">The name of a generic type ends with a backtick (\`) followed by digits representing the number of generic type arguments.</span></span> <span data-ttu-id="96bec-2398">Dieser Name-mangling dient zum Zulassen von Compilern zur Unterstützung von generischer Typen mit demselben Namen aber mit einer unterschiedlichen Anzahl von Typparametern, im gleichen Gültigkeitsbereich auftritt.</span><span class="sxs-lookup"><span data-stu-id="96bec-2398">The purpose of this name mangling is to allow compilers to support generic types with the same name but with different numbers of type parameters, occurring in the same scope.</span></span> <span data-ttu-id="96bec-2399">Reflektion gibt z. B. die ergänzten Namen `Tuple`1` and `Tupel`2` die generischen Methoden `Tuple(Of T)` und `Tuple(Of T0, T1)` in Visual Basic oder `Tuple<T>` und Tupel`\<T0, T1>` in Visual c#.</span><span class="sxs-lookup"><span data-stu-id="96bec-2399">For example, reflection returns the mangled names `Tuple`1` and `Tuple`2` from the generic methods `Tuple(Of T)` and `Tuple(Of T0, T1)` in Visual Basic, or `Tuple<T>` and Tuple`\<T0, T1>` in Visual C#.</span></span>  
  
 <span data-ttu-id="96bec-2400">Bei generischen Typen wird die Typargumentliste in Klammern gesetzt, und die Typargumente durch Kommas getrennt.</span><span class="sxs-lookup"><span data-stu-id="96bec-2400">For generic types, the type argument list is enclosed in brackets, and the type arguments are separated by commas.</span></span> <span data-ttu-id="96bec-2401">Zum Beispiel eine generische <xref:System.Collections.Generic.Dictionary%602> verfügt über zwei Typparameter.</span><span class="sxs-lookup"><span data-stu-id="96bec-2401">For example, a generic <xref:System.Collections.Generic.Dictionary%602> has two type parameters.</span></span> <span data-ttu-id="96bec-2402">Ein <xref:System.Collections.Generic.Dictionary%602> von `MyType` mit Schlüsseln vom Typ <xref:System.String> kann wie folgt dargestellt werden:</span><span class="sxs-lookup"><span data-stu-id="96bec-2402">A <xref:System.Collections.Generic.Dictionary%602> of `MyType` with keys of type <xref:System.String> might be represented as follows:</span></span>  
  
```  
System.Collections.Generic.Dictionary`2[System.String,MyType]  
```  
  
 <span data-ttu-id="96bec-2403">Um eine Assembly qualifizierten Typnamen in einer Liste der Typargumente angeben, schließen Sie die Assembly qualifizierten Typnamen in eckige Klammern ein.</span><span class="sxs-lookup"><span data-stu-id="96bec-2403">To specify an assembly-qualified type within a type argument list, enclose the assembly-qualified type within brackets.</span></span> <span data-ttu-id="96bec-2404">Andernfalls werden die Kommas, die trennen die Teile der Assembly qualifizierten Namen, interpretiert, als Trennzeichen für zusätzliche Typargumente.</span><span class="sxs-lookup"><span data-stu-id="96bec-2404">Otherwise, the commas that separate the parts of the assembly-qualified name are interpreted as delimiting additional type arguments.</span></span> <span data-ttu-id="96bec-2405">Z. B. eine <xref:System.Collections.Generic.Dictionary%602> von `MyType` aus mit Schlüsseln vom Typ "MeineAssembly.dll" <xref:System.String>, könnte wie folgt angegeben werden:</span><span class="sxs-lookup"><span data-stu-id="96bec-2405">For example, a <xref:System.Collections.Generic.Dictionary%602> of `MyType` from MyAssembly.dll, with keys of type <xref:System.String>, might be specified as follows:</span></span>  
  
```  
Type.GetType("System.Collections.Generic.Dictionary`2[System.String,[MyType,MyAssembly]]")  
```  
  
> [!NOTE]
>  <span data-ttu-id="96bec-2406">Ein Typ mit assemblyqualifikation kann in Klammern eingeschlossen werden, nur, wenn er in einer Liste der Parameter angezeigt wird.</span><span class="sxs-lookup"><span data-stu-id="96bec-2406">An assembly-qualified type can be enclosed in brackets only when it appears within a type parameter list.</span></span> <span data-ttu-id="96bec-2407">Die Regeln für die Suche von Assemblys für qualifizierte und unvollständigen Typen in Typparameterlisten sind identisch mit den Regeln für den qualifizierten und nicht qualifizierte nicht generische Typen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2407">The rules for searching assemblies for qualified and unqualified types in type parameter lists are the same as the rules for qualified and unqualified nongeneric types.</span></span>  
  
 <span data-ttu-id="96bec-2408">Nullable-Typen sind ein besonderer Fall von generischen Typen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2408">Nullable types are a special case of generic types.</span></span> <span data-ttu-id="96bec-2409">Beispielsweise eine auf NULL festlegbare <xref:System.Int32> wird dargestellt, durch die Zeichenfolge "System.Nullable'1[System.Int32]".</span><span class="sxs-lookup"><span data-stu-id="96bec-2409">For example, a nullable <xref:System.Int32> is represented by the string "System.Nullable\`1[System.Int32]".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-2410">In c#, C++ und Visual Basic können Sie auch auf NULL festlegbare Typen, die mithilfe von Operatoren abrufen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2410">In C#, C++, and Visual Basic you can also get nullable types using type operators.</span></span> <span data-ttu-id="96bec-2411">Z. B. die NULL-Werte zulassen <xref:System.Boolean> Typ wird zurückgegeben, indem `typeof(Nullable<bool>)` in c# durch `Nullable<Boolean>::typeid` in C++, und durch `GetType(Nullable(Of Boolean))` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="96bec-2411">For example, the nullable <xref:System.Boolean> type is returned by `typeof(Nullable<bool>)` in C#, by `Nullable<Boolean>::typeid` in C++, and by `GetType(Nullable(Of Boolean))` in Visual Basic.</span></span>  
  
 <span data-ttu-id="96bec-2412">Die folgende Tabelle zeigt die Syntax, mit `GetType` für verschiedene Typen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2412">The following table shows the syntax you use with `GetType` for various types.</span></span>  
  
|<span data-ttu-id="96bec-2413">Zum Abrufen</span><span class="sxs-lookup"><span data-stu-id="96bec-2413">To Get</span></span>|<span data-ttu-id="96bec-2414">Mit</span><span class="sxs-lookup"><span data-stu-id="96bec-2414">Use</span></span>|  
|------------|---------|  
|<span data-ttu-id="96bec-2415">Ein NULL-Werte zulässt <xref:System.Int32></span><span class="sxs-lookup"><span data-stu-id="96bec-2415">A nullable <xref:System.Int32></span></span>|<span data-ttu-id="96bec-2416">`Type.GetType("System.Nullable`1[System.Int32]")\`</span><span class="sxs-lookup"><span data-stu-id="96bec-2416">`Type.GetType("System.Nullable`1[System.Int32]")\`</span></span>|  
|<span data-ttu-id="96bec-2417">Ein nicht verwalteter Zeiger auf `MyType`</span><span class="sxs-lookup"><span data-stu-id="96bec-2417">An unmanaged pointer to `MyType`</span></span>|`Type.GetType("MyType*")`|  
|<span data-ttu-id="96bec-2418">Ein nicht verwalteter Zeiger auf einen Zeiger auf `MyType`</span><span class="sxs-lookup"><span data-stu-id="96bec-2418">An unmanaged pointer to a pointer to `MyType`</span></span>|`Type.GetType("MyType**")`|  
|<span data-ttu-id="96bec-2419">Ein verwalteter Zeiger oder Verweis auf `MyType`</span><span class="sxs-lookup"><span data-stu-id="96bec-2419">A managed pointer or reference to `MyType`</span></span>|<span data-ttu-id="96bec-2420">`Type.GetType("MyType&")`</span><span class="sxs-lookup"><span data-stu-id="96bec-2420">`Type.GetType("MyType&")`.</span></span> <span data-ttu-id="96bec-2421">Beachten Sie, dass Verweise im Gegensatz zu Zeigern auf eine Ebene beschränkt sind.</span><span class="sxs-lookup"><span data-stu-id="96bec-2421">Note that unlike pointers, references are limited to one level.</span></span>|  
|<span data-ttu-id="96bec-2422">Eine übergeordnete Klasse und eine geschachtelte Klasse.</span><span class="sxs-lookup"><span data-stu-id="96bec-2422">A parent class and a nested class</span></span>|`Type.GetType("MyParentClass+MyNestedClass")`|  
|<span data-ttu-id="96bec-2423">Ein eindimensionales Array mit einer unteren Grenze von 0</span><span class="sxs-lookup"><span data-stu-id="96bec-2423">A one-dimensional array with a lower bound of 0</span></span>|`Type.GetType("MyArray[]")`|  
|<span data-ttu-id="96bec-2424">Ein eindimensionales Array mit einem Unbekannter unterer Grenze</span><span class="sxs-lookup"><span data-stu-id="96bec-2424">A one-dimensional array with an unknown lower bound</span></span>|`Type.GetType("MyArray[*]")`|  
|<span data-ttu-id="96bec-2425">Ein Array mit n-dimensionalen</span><span class="sxs-lookup"><span data-stu-id="96bec-2425">An n-dimensional array</span></span>|<span data-ttu-id="96bec-2426">Ein Komma (,) innerhalb der Klammern eine insgesamt n-1 Mal.</span><span class="sxs-lookup"><span data-stu-id="96bec-2426">A comma (,) inside the brackets a total of n-1 times.</span></span> <span data-ttu-id="96bec-2427">Z. B. `System.Object[,,]` stellt ein dreidimensionales `Object` Array.</span><span class="sxs-lookup"><span data-stu-id="96bec-2427">For example, `System.Object[,,]` represents a three-dimensional `Object` array.</span></span>|  
|<span data-ttu-id="96bec-2428">Ein zweidimensionales Array von Arrays</span><span class="sxs-lookup"><span data-stu-id="96bec-2428">A two-dimensional array's array</span></span>|`Type.GetType("MyArray[][]")`|  
|<span data-ttu-id="96bec-2429">Ein rechteckiges zweidimensionales Array mit Unbekannter unterer Grenze</span><span class="sxs-lookup"><span data-stu-id="96bec-2429">A rectangular two-dimensional array with unknown lower bounds</span></span>|`Type.GetType("MyArray[,]")`|  
|<span data-ttu-id="96bec-2430">Ein generischer Typ mit einem Typargument</span><span class="sxs-lookup"><span data-stu-id="96bec-2430">A generic type with one type argument</span></span>|<span data-ttu-id="96bec-2431">`Type.GetType("MyGenericType`1[MyType]")\`</span><span class="sxs-lookup"><span data-stu-id="96bec-2431">`Type.GetType("MyGenericType`1[MyType]")\`</span></span>|  
|<span data-ttu-id="96bec-2432">Ein generischer Typ mit zwei Typargumente</span><span class="sxs-lookup"><span data-stu-id="96bec-2432">A generic type with two type arguments</span></span>|<span data-ttu-id="96bec-2433">`Type.GetType("MyGenericType`2[MyType,AnotherType]")"</span><span class="sxs-lookup"><span data-stu-id="96bec-2433">`Type.GetType("MyGenericType`2[MyType,AnotherType]")\`</span></span>|  
|<span data-ttu-id="96bec-2434">Ein generischer Typ mit zwei Argumenten der Assembly qualifizierten Typnamen</span><span class="sxs-lookup"><span data-stu-id="96bec-2434">A generic type with two assembly-qualified type arguments</span></span>|<span data-ttu-id="96bec-2435">`Type.GetType("MyGenericType`2[[MyType,MyAssembly],[AnotherType,AnotherAssembly]]")"</span><span class="sxs-lookup"><span data-stu-id="96bec-2435">`Type.GetType("MyGenericType`2[[MyType,MyAssembly],[AnotherType,AnotherAssembly]]")\`</span></span>|  
|<span data-ttu-id="96bec-2436">Ein mit assemblyqualifikation, generischer Typ mit einem Argument für die Assembly qualifizierten Typnamen</span><span class="sxs-lookup"><span data-stu-id="96bec-2436">An assembly-qualified generic type with an assembly-qualified type argument</span></span>|<span data-ttu-id="96bec-2437">`Type.GetType("MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly")"</span><span class="sxs-lookup"><span data-stu-id="96bec-2437">`Type.GetType("MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly")\`</span></span>|  
|<span data-ttu-id="96bec-2438">Ein generischer Typ, dessen Typargument eines generischen Typs mit zwei Argumente des Typs ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-2438">A generic type whose type argument is a generic type with two type arguments</span></span>|<span data-ttu-id="96bec-2439">`Type.GetType("MyGenericType`1 [AnotherGenericType`2[MyType,AnotherType]]")`</span><span class="sxs-lookup"><span data-stu-id="96bec-2439">`Type.GetType("MyGenericType`1[AnotherGenericType`2[MyType,AnotherType]]")`</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="96bec-2440">Das folgende Beispiel ruft den Typ des `System.Int32` und verwendet das Typobjekt zum Anzeigen der <xref:System.Type.FullName%2A> Eigenschaft `System.Int32`.</span><span class="sxs-lookup"><span data-stu-id="96bec-2440">The following example retrieves the type of `System.Int32` and uses that type object to display the <xref:System.Type.FullName%2A> property of `System.Int32`.</span></span> <span data-ttu-id="96bec-2441">Wenn ein Typobjekt auf eine Assembly, die nicht vorhanden ist verweist, wird in diesem Beispiel wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="96bec-2441">If a type object refers to an assembly that does not exist, this example throws an exception.</span></span>  
  
 [!code-cpp[Type_GetType#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetType/CPP/type_gettype.cpp#1)]
 [!code-csharp[Type_GetType#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetType/CS/type_gettype.cs#1)]
 [!code-vb[Type_GetType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetType/VB/type_gettype.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96bec-2442">
            <paramref name="typeName" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2442">
              <paramref name="typeName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="96bec-2443">A class initializer is invoked and throws an exception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2443">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="96bec-2444">
            <paramref name="throwOnError" /> is <see langword="true" /> and the type is not found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2444">
              <paramref name="throwOnError" /> is <see langword="true" /> and the type is not found.</span>
          </span>
          <span data-ttu-id="96bec-2445">-or-  <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.  -or-  <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2445">-or-  <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.  -or-  <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.</span>
          </span>
          <span data-ttu-id="96bec-2446">-or-  <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2446">-or-  <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.</span>
          </span>
          <span data-ttu-id="96bec-2447">-or-  <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2447">-or-  <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="96bec-2448">
            <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2448">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax.</span>
          </span>
          <span data-ttu-id="96bec-2449">For example, "MyType[,\*,]".</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2449">For example, "MyType[,\*,]".</span>
          </span>
          <span data-ttu-id="96bec-2450">-or-  <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2450">-or-  <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span>
          </span>
          <span data-ttu-id="96bec-2451">-or-  <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2451">-or-  <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span>
          </span>
          <span data-ttu-id="96bec-2452">-or-  <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2452">-or-  <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="96bec-2453">
            <paramref name="throwOnError" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2453">
              <paramref name="throwOnError" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="96bec-2454">
            <block subset="none" type="note">
              <para> In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.IO.IOException" />, instead.  </para>
            </block>  The assembly or one of its dependencies was found, but could not be loaded.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2454">
              <block subset="none" type="note">
                <para> In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.IO.IOException" />, instead.  </para>
              </block>  The assembly or one of its dependencies was found, but could not be loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="96bec-2455">The assembly or one of its dependencies is not valid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2455">The assembly or one of its dependencies is not valid.</span>
          </span>
          <span data-ttu-id="96bec-2456">-or-  Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2456">-or-  Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</span>
          </span>
        </exception>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.TypeLoadException" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
        <altmember cref="M:System.Reflection.Assembly.GetAssembly(System.Type)" />
        <altmember cref="M:System.Reflection.Assembly.GetType(System.String)" />
        <altmember cref="T:System.Reflection.AssemblyName" />
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName, bool throwOnError, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName, bool throwOnError, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String, throwOnError As Boolean, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName, bool throwOnError, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member GetType : string * bool * bool -&gt; Type" Usage="System.Type.GetType (typeName, throwOnError, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="96bec-2457">The assembly-qualified name of the type to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2457">The assembly-qualified name of the type to get.</span>
          </span>
          <span data-ttu-id="96bec-2458">See <see cref="P:System.Type.AssemblyQualifiedName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2458">See <see cref="P:System.Type.AssemblyQualifiedName" />.</span>
          </span>
          <span data-ttu-id="96bec-2459">If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2459">If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.</span>
          </span>
        </param>
        <param name="throwOnError">
          <span data-ttu-id="96bec-2460">
            <see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" />.Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2460">
              <see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" />.Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them.</span>
          </span>
          <span data-ttu-id="96bec-2461">See the Exceptions section.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2461">See the Exceptions section.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="96bec-2462">
            <see langword="true" /> to perform a case-insensitive search for <c>typeName</c>, <see langword="false" /> to perform a case-sensitive search for <c>typeName</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2462">
              <see langword="true" /> to perform a case-insensitive search for <c>typeName</c>, <see langword="false" /> to perform a case-sensitive search for <c>typeName</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-2463">Gets the <see cref="T:System.Type" /> with the specified name, specifying whether to throw an exception if the type is not found and whether to perform a case-sensitive search.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2463">Gets the <see cref="T:System.Type" /> with the specified name, specifying whether to throw an exception if the type is not found and whether to perform a case-sensitive search.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-2464">The type with the specified name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2464">The type with the specified name.</span>
          </span>
          <span data-ttu-id="96bec-2465">If the type is not found, the <paramref name="throwOnError" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2465">If the type is not found, the <paramref name="throwOnError" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown.</span>
          </span>
          <span data-ttu-id="96bec-2466">In some cases, an exception is thrown regardless of the value of <paramref name="throwOnError" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2466">In some cases, an exception is thrown regardless of the value of <paramref name="throwOnError" />.</span>
          </span>
          <span data-ttu-id="96bec-2467">See the Exceptions section.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2467">See the Exceptions section.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-2468">Können Sie die <xref:System.Type.GetType%2A> Methode zum Abrufen einer <xref:System.Type> Objekt für einen Typ in einer anderen Assembly, wenn Sie die Assembly qualifizierten Namen kennen, die aus abgerufen werden können <xref:System.Type.AssemblyQualifiedName>.</span><span class="sxs-lookup"><span data-stu-id="96bec-2468">You can use the <xref:System.Type.GetType%2A> method to obtain a <xref:System.Type> object for a type in another assembly, if you know its assembly-qualified name which can be obtained from <xref:System.Type.AssemblyQualifiedName>.</span></span> <span data-ttu-id="96bec-2469"><xref:System.Type.GetType%2A> führt zum Laden der Assembly im angegebenen `typeName`.</span><span class="sxs-lookup"><span data-stu-id="96bec-2469"><xref:System.Type.GetType%2A> causes loading of the assembly specified in `typeName`.</span></span> <span data-ttu-id="96bec-2470">Sie können auch laden eine Assembly unter Verwendung der <xref:System.Reflection.Assembly.Load%2A> -Methode und anschließend auf die <xref:System.Type.GetType%2A> oder <xref:System.Reflection.Assembly.GetTypes%2A> Methoden der <xref:System.Reflection.Assembly> Klasse zum Abrufen <xref:System.Type> Objekte.</span><span class="sxs-lookup"><span data-stu-id="96bec-2470">You can also load an assembly using the <xref:System.Reflection.Assembly.Load%2A> method, and then use the <xref:System.Type.GetType%2A> or <xref:System.Reflection.Assembly.GetTypes%2A> methods of the <xref:System.Reflection.Assembly> class to get <xref:System.Type> objects.</span></span> <span data-ttu-id="96bec-2471">Wenn ein Typ in einer Assembly mit dem Programm zur Kompilierzeit bekannt ist, ist es effizienter, verwenden Sie `typeof` in c# <xref:System.Type.GetType%2A> in Visual Basic oder `typeid` in C++.</span><span class="sxs-lookup"><span data-stu-id="96bec-2471">If a type is in an assembly known to your program at compile time, it is more efficient to use `typeof` in C#, <xref:System.Type.GetType%2A> in Visual Basic, or `typeid` in C++.</span></span>  
  
 <span data-ttu-id="96bec-2472">`GetType` funktioniert nur für Assemblys, die vom Datenträger geladen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2472">`GetType` only works on assemblies loaded from disk.</span></span> <span data-ttu-id="96bec-2473">Aufrufen `GetType` zum Nachschlagen eines Typs in einer dynamischen Assembly definiert, definiert der <xref:System.Reflection.Emit> Services erhalten Sie möglicherweise inkonsistentes Verhalten.</span><span class="sxs-lookup"><span data-stu-id="96bec-2473">If you call `GetType` to look up a type defined in a dynamic assembly defined using the <xref:System.Reflection.Emit> services, you might get inconsistent behavior.</span></span> <span data-ttu-id="96bec-2474">Das Verhalten abhängig, ob die dynamische Assembly persistent, d. h. ist, wird erstellt, mit der `RunAndSave` oder `Save` Zugriff auf die Modi für die <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType> Enumeration.</span><span class="sxs-lookup"><span data-stu-id="96bec-2474">The behavior depends on whether the dynamic assembly is persistent, that is, created using the `RunAndSave` or `Save` access modes of the <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType> enumeration.</span></span> <span data-ttu-id="96bec-2475">Wenn die dynamische Assembly persistent ist und bevor Sie auf den Datenträger geschrieben wurde `GetType` wird aufgerufen, das Ladeprogramm die gespeicherte Assembly sucht, auf dem Datenträger, lädt die Assembly und ruft den Typ aus dieser Assembly ab.</span><span class="sxs-lookup"><span data-stu-id="96bec-2475">If the dynamic assembly is persistent and has been written to disk before `GetType` is called, the loader finds the saved assembly on disk, loads that assembly, and retrieves the type from that assembly.</span></span> <span data-ttu-id="96bec-2476">Wenn die Assembly nicht gespeichert wurde, wenn auf dem Datenträger `GetType` aufgerufen wird, wird der Methodenrückgabe `null`.</span><span class="sxs-lookup"><span data-stu-id="96bec-2476">If the assembly has not been saved to disk when `GetType` is called, the method returns `null`.</span></span> <span data-ttu-id="96bec-2477">`GetType` flüchtige dynamische Assemblys versteht nicht; aus diesem Grund Aufrufen `GetType` zum Abrufen eines Typs in eine vorübergehende dynamische Assembly gibt `null`.</span><span class="sxs-lookup"><span data-stu-id="96bec-2477">`GetType` does not understand transient dynamic assemblies; therefore, calling `GetType` to retrieve a type in a transient dynamic assembly returns `null`.</span></span>  
  
 <span data-ttu-id="96bec-2478">Mit `GetType` für ein dynamisches Modul, abonnieren das <xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType> Ereignis, und rufen `GetType` vor dem Speichern.</span><span class="sxs-lookup"><span data-stu-id="96bec-2478">To use `GetType` on a dynamic module, subscribe to the <xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType> event and call `GetType` before saving.</span></span> <span data-ttu-id="96bec-2479">Andernfalls erhalten Sie zwei Kopien der Assembly im Speicher.</span><span class="sxs-lookup"><span data-stu-id="96bec-2479">Otherwise, you will get two copies of the assembly in memory.</span></span>  
  
 <span data-ttu-id="96bec-2480">Die `throwOnError` Parameter gibt an, was geschieht, wenn der Typ wurde nicht gefunden, und auch bestimmte andere Ausnahmebedingungen unterdrückt, wie im Abschnitt für Ausnahmen beschrieben.</span><span class="sxs-lookup"><span data-stu-id="96bec-2480">The `throwOnError` parameter specifies what happens when the type is not found, and also suppresses certain other exception conditions, as described in the Exceptions section.</span></span> <span data-ttu-id="96bec-2481">Einige Ausnahmen werden ausgelöst, unabhängig vom Wert der `throwOnError`.</span><span class="sxs-lookup"><span data-stu-id="96bec-2481">Some exceptions are thrown regardless of the value of `throwOnError`.</span></span> <span data-ttu-id="96bec-2482">Wenn der Typ befindet sich aber nicht geladen werden, z. B. eine <xref:System.TypeLoadException> wird ausgelöst, selbst wenn `throwOnError` ist `false`.</span><span class="sxs-lookup"><span data-stu-id="96bec-2482">For example, if the type is found but cannot be loaded, a <xref:System.TypeLoadException> is thrown even if `throwOnError` is `false`.</span></span>  
  
 <span data-ttu-id="96bec-2483">Die folgende Tabelle zeigt, welche Member einer Basisklasse von zurückgegeben werden die `Get` Methoden ein, wenn für einen Typ reflektieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-2483">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="96bec-2484">Memberart</span><span class="sxs-lookup"><span data-stu-id="96bec-2484">Member Type</span></span>|<span data-ttu-id="96bec-2485">Statisch</span><span class="sxs-lookup"><span data-stu-id="96bec-2485">Static</span></span>|<span data-ttu-id="96bec-2486">Nicht statische</span><span class="sxs-lookup"><span data-stu-id="96bec-2486">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="96bec-2487">Konstruktor</span><span class="sxs-lookup"><span data-stu-id="96bec-2487">Constructor</span></span>|<span data-ttu-id="96bec-2488">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-2488">No</span></span>|<span data-ttu-id="96bec-2489">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-2489">No</span></span>|  
|<span data-ttu-id="96bec-2490">Feld</span><span class="sxs-lookup"><span data-stu-id="96bec-2490">Field</span></span>|<span data-ttu-id="96bec-2491">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-2491">No</span></span>|<span data-ttu-id="96bec-2492">Ja.</span><span class="sxs-lookup"><span data-stu-id="96bec-2492">Yes.</span></span> <span data-ttu-id="96bec-2493">Ein Feld ist immer nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-2493">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="96bec-2494">event</span><span class="sxs-lookup"><span data-stu-id="96bec-2494">Event</span></span>|<span data-ttu-id="96bec-2495">Nicht zutreffend</span><span class="sxs-lookup"><span data-stu-id="96bec-2495">Not applicable</span></span>|<span data-ttu-id="96bec-2496">Die allgemeinen Typsystem ist, dass die Vererbung ist identisch mit der Methoden, die die Eigenschaft zu implementieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-2496">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="96bec-2497">Reflektion behandelt Eigenschaften als nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-2497">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-2498">Siehe Hinweis 2 weiter unten.</span><span class="sxs-lookup"><span data-stu-id="96bec-2498">See note 2 below.</span></span>|  
|<span data-ttu-id="96bec-2499">Methode</span><span class="sxs-lookup"><span data-stu-id="96bec-2499">Method</span></span>|<span data-ttu-id="96bec-2500">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-2500">No</span></span>|<span data-ttu-id="96bec-2501">Ja.</span><span class="sxs-lookup"><span data-stu-id="96bec-2501">Yes.</span></span> <span data-ttu-id="96bec-2502">Eine Methode (virtuelle und nicht virtuelle) möglich Ausblenden nach Namen oder nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-2502">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="96bec-2503">Geschachtelter Typ</span><span class="sxs-lookup"><span data-stu-id="96bec-2503">Nested Type</span></span>|<span data-ttu-id="96bec-2504">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-2504">No</span></span>|<span data-ttu-id="96bec-2505">Nein</span><span class="sxs-lookup"><span data-stu-id="96bec-2505">No</span></span>|  
|<span data-ttu-id="96bec-2506">Eigenschaft</span><span class="sxs-lookup"><span data-stu-id="96bec-2506">Property</span></span>|<span data-ttu-id="96bec-2507">Nicht zutreffend</span><span class="sxs-lookup"><span data-stu-id="96bec-2507">Not applicable</span></span>|<span data-ttu-id="96bec-2508">Die allgemeinen Typsystem ist, dass die Vererbung ist identisch mit der Methoden, die die Eigenschaft zu implementieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-2508">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="96bec-2509">Reflektion behandelt Eigenschaften als nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-2509">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-2510">Siehe Hinweis 2 weiter unten.</span><span class="sxs-lookup"><span data-stu-id="96bec-2510">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="96bec-2511">Nach Name und Signatur ausblenden berücksichtigt, dass alle Teile der Signatur, die benutzerdefinierten Modifizierer, einschließlich Typen, Parametertypen, Sentinels enthält und nicht verwaltete Aufrufkonventionen zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-2511">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="96bec-2512">Dies ist ein binärer Vergleich.</span><span class="sxs-lookup"><span data-stu-id="96bec-2512">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="96bec-2513">Für die Reflektion sind die Eigenschaften und Ereignisse nach Name und Signatur ausblenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-2513">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="96bec-2514">Wenn Sie eine Eigenschaft mit dem ein Get und Set-Accessor in der Basisklasse haben, aber die abgeleitete Klasse nur einen Get-Accessor hat, die Eigenschaft der abgeleiteten Klasse blendet die Basisklasseneigenschaft aus, und nicht werden auf den Setter in der Basisklasse zugreifen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2514">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="96bec-2515">Benutzerdefinierte Attribute sind nicht Teil des allgemeinen Typsystems.</span><span class="sxs-lookup"><span data-stu-id="96bec-2515">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="96bec-2516">Arrays oder COM-Typen werden nicht für durchsucht, es sei denn, sie bereits in der Tabelle der verfügbaren Klassen geladen wurden.</span><span class="sxs-lookup"><span data-stu-id="96bec-2516">Arrays or COM types are not searched for unless they have already been loaded into the table of available classes.</span></span>  
  
 <span data-ttu-id="96bec-2517">`typeName` Der Typname kann durch den Namespace oder eine Assembly qualifizierten Namen, der Angabe eines Assemblynamens enthält qualifiziert werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-2517">`typeName` can be the type name qualified by its namespace or an assembly-qualified name that includes an assembly name specification.</span></span> <span data-ttu-id="96bec-2518">Siehe <xref:System.Type.AssemblyQualifiedName%2A>.</span><span class="sxs-lookup"><span data-stu-id="96bec-2518">See <xref:System.Type.AssemblyQualifiedName%2A>.</span></span>  
  
 <span data-ttu-id="96bec-2519">Wenn `typeName` umfasst den Namespace, jedoch nicht den Assemblynamen eingeben, sucht diese Methode nur die Assembly des aufrufenden Objekts und die Datei "mscorlib.dll", in dieser Reihenfolge.</span><span class="sxs-lookup"><span data-stu-id="96bec-2519">If `typeName` includes the namespace but not the assembly name, this method searches only the calling object's assembly and Mscorlib.dll, in that order.</span></span> <span data-ttu-id="96bec-2520">Wenn TypeName vollqualifizierten mit dem Assemblynamen für teilweise oder vollständig ist, sucht diese Methode, in der angegebenen Assembly.</span><span class="sxs-lookup"><span data-stu-id="96bec-2520">If typeName is fully qualified with the partial or complete assembly name, this method searches in the specified assembly.</span></span> <span data-ttu-id="96bec-2521">Wenn die Assembly einen starken Namen aufweist, muss ein vollständigen Assemblynamen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2521">If the assembly has a strong name, a complete assembly name is required.</span></span>  
  
 <span data-ttu-id="96bec-2522">Die <xref:System.Type.AssemblyQualifiedName%2A> Eigenschaft gibt einen vollqualifizierten Typnamen einschließlich geschachtelte Typen, Assemblyname und Typargumente zurück.</span><span class="sxs-lookup"><span data-stu-id="96bec-2522">The <xref:System.Type.AssemblyQualifiedName%2A> property returns a fully qualified type name including nested types, the assembly name, and type arguments.</span></span> <span data-ttu-id="96bec-2523">Alle Compiler, die die common Language Runtime unterstützen, werden der einfache Name einer geschachtelten Klasse geben an, und Reflektion erstellt einen ergänzten Namen in Übereinstimmung mit den folgenden Konventionen abgefragt.</span><span class="sxs-lookup"><span data-stu-id="96bec-2523">All compilers that support the common language runtime will emit the simple name of a nested class, and reflection constructs a mangled name when queried, in accordance with the following conventions.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-2524">In .NET Framework, Version 2.0 Prozessorarchitektur Assemblyidentität hinzugefügt wird, und kann als Teil der Assembly-Zeichenfolgen angegeben werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-2524">In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings.</span></span> <span data-ttu-id="96bec-2525">Z. B. "ProcessorArchitecture = Msil".</span><span class="sxs-lookup"><span data-stu-id="96bec-2525">For example, "ProcessorArchitecture=msil".</span></span> <span data-ttu-id="96bec-2526">Es ist jedoch nicht enthalten in der Zeichenfolge, die vom der <xref:System.Type.AssemblyQualifiedName%2A> Eigenschaft aus Kompatibilitätsgründen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2526">However, it is not included in the string returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, for compatibility reasons.</span></span> <span data-ttu-id="96bec-2527">Außerdem können Sie Typen laden, indem Sie erstellen eine <xref:System.Reflection.AssemblyName> -Objekt und die Übergabe an eine entsprechende Überladung von der <xref:System.Reflection.Assembly.Load%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="96bec-2527">You can also load types by creating an <xref:System.Reflection.AssemblyName> object and passing it to an appropriate overload of the <xref:System.Reflection.Assembly.Load%2A> method.</span></span> <span data-ttu-id="96bec-2528">Anschließend können Sie die <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> -Methode zum Laden von Typen aus der Assembly.</span><span class="sxs-lookup"><span data-stu-id="96bec-2528">You can then use the <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> method to load types from the assembly.</span></span> <span data-ttu-id="96bec-2529">Siehe auch <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="96bec-2529">See also <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span></span>  
  
|<span data-ttu-id="96bec-2530">Trennzeichen</span><span class="sxs-lookup"><span data-stu-id="96bec-2530">Delimiter</span></span>|<span data-ttu-id="96bec-2531">Bedeutung</span><span class="sxs-lookup"><span data-stu-id="96bec-2531">Meaning</span></span>|  
|---------------|-------------|  
|<span data-ttu-id="96bec-2532">Umgekehrter Schrägstrich (\\)</span><span class="sxs-lookup"><span data-stu-id="96bec-2532">Backslash (\\)</span></span>|<span data-ttu-id="96bec-2533">Escape-Zeichen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2533">Escape character.</span></span>|  
|<span data-ttu-id="96bec-2534">Graviszeichen (')</span><span class="sxs-lookup"><span data-stu-id="96bec-2534">Backtick (\`)</span></span>|<span data-ttu-id="96bec-2535">Steht vor einer oder mehreren Ziffern, die die Anzahl von Typparametern, die am Ende des Namens eines generischen Typs darstellt.</span><span class="sxs-lookup"><span data-stu-id="96bec-2535">Precedes one or more digits representing the number of type parameters, located at the end of the name of a generic type.</span></span>|  
|<span data-ttu-id="96bec-2536">Eckige Klammern ([])</span><span class="sxs-lookup"><span data-stu-id="96bec-2536">Brackets ([])</span></span>|<span data-ttu-id="96bec-2537">Schließen Sie eine generischen Typargumentliste für einen konstruierten generischen Typ; Schließen Sie in einer Liste der Typargumente eine Assembly qualifizierten Typnamen ein.</span><span class="sxs-lookup"><span data-stu-id="96bec-2537">Enclose a generic type argument list, for a constructed generic type; within a type argument list, enclose an assembly-qualified type.</span></span>|  
|<span data-ttu-id="96bec-2538">Komma (,)</span><span class="sxs-lookup"><span data-stu-id="96bec-2538">Comma (,)</span></span>|<span data-ttu-id="96bec-2539">Der Name der Assembly wird vorangestellt.</span><span class="sxs-lookup"><span data-stu-id="96bec-2539">Precedes the Assembly name.</span></span>|  
|<span data-ttu-id="96bec-2540">Punkt (.)</span><span class="sxs-lookup"><span data-stu-id="96bec-2540">Period (.)</span></span>|<span data-ttu-id="96bec-2541">Bezeichnet die Namespacebezeichner.</span><span class="sxs-lookup"><span data-stu-id="96bec-2541">Denotes namespace identifiers.</span></span>|  
|<span data-ttu-id="96bec-2542">Pluszeichen (+)</span><span class="sxs-lookup"><span data-stu-id="96bec-2542">Plus sign (+)</span></span>|<span data-ttu-id="96bec-2543">Steht vor einer geschachtelten Klasse.</span><span class="sxs-lookup"><span data-stu-id="96bec-2543">Precedes a nested class.</span></span>|  
  
 <span data-ttu-id="96bec-2544">Der vollqualifizierte Name für eine Klasse kann beispielsweise wie folgt aussehen:</span><span class="sxs-lookup"><span data-stu-id="96bec-2544">For example, the fully qualified name for a class might look like this:</span></span>  
  
```  
TopNamespace.SubNameSpace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="96bec-2545">Wenn der Namespace z.B. TopNamespace.Sub, würde die Zeichenfolge auf das Pluszeichen (+), ein Escapezeichen vorangestellt haben (\\) zu verhindern, dass es als geschachteltes Trennzeichen interpretiert wird.</span><span class="sxs-lookup"><span data-stu-id="96bec-2545">If the namespace were TopNamespace.Sub+Namespace, then the string would have to precede the plus sign (+) with an escape character (\\) to prevent it from being interpreted as a nesting separator.</span></span> <span data-ttu-id="96bec-2546">Reflektion gibt diese Zeichenfolge wie folgt aus:</span><span class="sxs-lookup"><span data-stu-id="96bec-2546">Reflection emits this string as follows:</span></span>  
  
```  
TopNamespace.Sub\+Namespace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="96bec-2547">Ein "++" wird "\\+\\+", und ein "\\"wird"\\\\".</span><span class="sxs-lookup"><span data-stu-id="96bec-2547">A "++" becomes "\\+\\+", and a "\\" becomes "\\\\".</span></span>  
  
 <span data-ttu-id="96bec-2548">Dieser qualifizierte Name persistent gespeichert werden kann, und später verwendet, um das Laden der <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="96bec-2548">This qualified name can be persisted and later used to load the <xref:System.Type>.</span></span> <span data-ttu-id="96bec-2549">Suchen und Laden eine <xref:System.Type>, verwenden Sie <xref:System.Type.GetType%2A> entweder mit dem Typ oder einen Namen geben nur mit dem Namen der Assembly qualifizierten Typ.</span><span class="sxs-lookup"><span data-stu-id="96bec-2549">To search for and load a <xref:System.Type>, use <xref:System.Type.GetType%2A> either with the type name only or with the assembly qualified type name.</span></span> <span data-ttu-id="96bec-2550"><xref:System.Type.GetType%2A> mit dem Namen nur sucht die <xref:System.Type> in der Assembly des Aufrufers, und klicken Sie dann in der System-Assembly.</span><span class="sxs-lookup"><span data-stu-id="96bec-2550"><xref:System.Type.GetType%2A> with the type name only will look for the <xref:System.Type> in the caller's assembly and then in the System assembly.</span></span> <span data-ttu-id="96bec-2551"><xref:System.Type.GetType%2A> mit der Assembly qualifizierten Typnamen sucht die <xref:System.Type> in jeder Assembly.</span><span class="sxs-lookup"><span data-stu-id="96bec-2551"><xref:System.Type.GetType%2A> with the assembly qualified type name will look for the <xref:System.Type> in any assembly.</span></span>  
  
 <span data-ttu-id="96bec-2552">Namen können nachfolgende Zeichen enthalten, zusätzliche Informationen über den Typ, z. B., ob der Typ ein Verweistyp, ein Zeigertyp oder einen Arraytyp ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-2552">Type names may include trailing characters that denote additional information about the type, such as whether the type is a reference type, a pointer type or an array type.</span></span> <span data-ttu-id="96bec-2553">Verwenden Sie zum Abrufen der Typname ohne diese nachfolgenden Zeichen `t.GetElementType().ToString()`, wobei `t` ist der Typ.</span><span class="sxs-lookup"><span data-stu-id="96bec-2553">To retrieve the type name without these trailing characters, use `t.GetElementType().ToString()`, where `t` is the type.</span></span>  
  
 <span data-ttu-id="96bec-2554">Leerzeichen sind in allen Komponenten von Typnamen mit Ausnahme der Assemblyname relevant.</span><span class="sxs-lookup"><span data-stu-id="96bec-2554">Spaces are relevant in all type name components except the assembly name.</span></span> <span data-ttu-id="96bec-2555">Der Assemblyname Leerzeichen vor dem Trennzeichen ',' relevant, aber Leerzeichen nach dem Trennzeichen ',' werden ignoriert.</span><span class="sxs-lookup"><span data-stu-id="96bec-2555">In the assembly name, spaces before the ',' separator are relevant, but spaces after the ',' separator are ignored.</span></span>  
  
 <span data-ttu-id="96bec-2556">Der Name eines generischen Typs endet mit einem Graviszeichen (\`) gefolgt von Ziffern, die die Anzahl der Argumente des generischen Typs darstellt.</span><span class="sxs-lookup"><span data-stu-id="96bec-2556">The name of a generic type ends with a backtick (\`) followed by digits representing the number of generic type arguments.</span></span> <span data-ttu-id="96bec-2557">Dieser Name-mangling dient zum Zulassen von Compilern zur Unterstützung von generischer Typen mit demselben Namen aber mit einer unterschiedlichen Anzahl von Typparametern, im gleichen Gültigkeitsbereich auftritt.</span><span class="sxs-lookup"><span data-stu-id="96bec-2557">The purpose of this name mangling is to allow compilers to support generic types with the same name but with different numbers of type parameters, occurring in the same scope.</span></span> <span data-ttu-id="96bec-2558">Reflektion gibt z. B. die ergänzten Namen `Tuple`1` and `Tupel`2` die generischen Methoden `Tuple(Of T)` und `Tuple(Of T0, T1)` in Visual Basic oder `Tuple<T>` und Tupel`\<T0, T1>` in Visual c#.</span><span class="sxs-lookup"><span data-stu-id="96bec-2558">For example, reflection returns the mangled names `Tuple`1` and `Tuple`2` from the generic methods `Tuple(Of T)` and `Tuple(Of T0, T1)` in Visual Basic, or `Tuple<T>` and Tuple`\<T0, T1>` in Visual C#.</span></span>  
  
 <span data-ttu-id="96bec-2559">Bei generischen Typen wird die Typargumentliste in Klammern gesetzt, und die Typargumente durch Kommas getrennt.</span><span class="sxs-lookup"><span data-stu-id="96bec-2559">For generic types, the type argument list is enclosed in brackets, and the type arguments are separated by commas.</span></span> <span data-ttu-id="96bec-2560">Zum Beispiel eine generische <xref:System.Collections.Generic.Dictionary%602> verfügt über zwei Typparameter.</span><span class="sxs-lookup"><span data-stu-id="96bec-2560">For example, a generic <xref:System.Collections.Generic.Dictionary%602> has two type parameters.</span></span> <span data-ttu-id="96bec-2561">Ein <xref:System.Collections.Generic.Dictionary%602> von `MyType` mit Schlüsseln vom Typ <xref:System.String> kann wie folgt dargestellt werden:</span><span class="sxs-lookup"><span data-stu-id="96bec-2561">A <xref:System.Collections.Generic.Dictionary%602> of `MyType` with keys of type <xref:System.String> might be represented as follows:</span></span>  
  
```  
System.Collections.Generic.Dictionary`2[System.String,MyType]  
```  
  
 <span data-ttu-id="96bec-2562">Um eine Assembly qualifizierten Typnamen in einer Liste der Typargumente angeben, schließen Sie die Assembly qualifizierten Typnamen in eckige Klammern ein.</span><span class="sxs-lookup"><span data-stu-id="96bec-2562">To specify an assembly-qualified type within a type argument list, enclose the assembly-qualified type within brackets.</span></span> <span data-ttu-id="96bec-2563">Andernfalls werden die Kommas, die trennen die Teile der Assembly qualifizierten Namen, interpretiert, als Trennzeichen für zusätzliche Typargumente.</span><span class="sxs-lookup"><span data-stu-id="96bec-2563">Otherwise, the commas that separate the parts of the assembly-qualified name are interpreted as delimiting additional type arguments.</span></span> <span data-ttu-id="96bec-2564">Z. B. eine <xref:System.Collections.Generic.Dictionary%602> von `MyType` aus mit Schlüsseln vom Typ "MeineAssembly.dll" <xref:System.String>, könnte wie folgt angegeben werden:</span><span class="sxs-lookup"><span data-stu-id="96bec-2564">For example, a <xref:System.Collections.Generic.Dictionary%602> of `MyType` from MyAssembly.dll, with keys of type <xref:System.String>, might be specified as follows:</span></span>  
  
```  
Type.GetType("System.Collections.Generic.Dictionary`2[System.String,[MyType,MyAssembly]]")  
```  
  
> [!NOTE]
>  <span data-ttu-id="96bec-2565">Ein Typ mit assemblyqualifikation kann in Klammern eingeschlossen werden, nur, wenn er in einer Liste der Parameter angezeigt wird.</span><span class="sxs-lookup"><span data-stu-id="96bec-2565">An assembly-qualified type can be enclosed in brackets only when it appears within a type parameter list.</span></span> <span data-ttu-id="96bec-2566">Die Regeln für die Suche von Assemblys für qualifizierte und unvollständigen Typen in Typparameterlisten sind identisch mit den Regeln für den qualifizierten und nicht qualifizierte nicht generische Typen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2566">The rules for searching assemblies for qualified and unqualified types in type parameter lists are the same as the rules for qualified and unqualified nongeneric types.</span></span>  
  
 <span data-ttu-id="96bec-2567">Nullable-Typen sind ein besonderer Fall von generischen Typen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2567">Nullable types are a special case of generic types.</span></span> <span data-ttu-id="96bec-2568">Beispielsweise eine auf NULL festlegbare <xref:System.Int32> wird dargestellt, durch die Zeichenfolge "System.Nullable'1[System.Int32]".</span><span class="sxs-lookup"><span data-stu-id="96bec-2568">For example, a nullable <xref:System.Int32> is represented by the string "System.Nullable\`1[System.Int32]".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-2569">In c#, C++ und Visual Basic können Sie auch auf NULL festlegbare Typen, die mithilfe von Operatoren abrufen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2569">In C#, C++, and Visual Basic you can also get nullable types using type operators.</span></span> <span data-ttu-id="96bec-2570">Z. B. die NULL-Werte zulassen <xref:System.Boolean> Typ wird zurückgegeben, indem `typeof(Nullable<bool>)` in c# durch `Nullable<Boolean>::typeid` in C++, und durch `GetType(Nullable(Of Boolean))` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="96bec-2570">For example, the nullable <xref:System.Boolean> type is returned by `typeof(Nullable<bool>)` in C#, by `Nullable<Boolean>::typeid` in C++, and by `GetType(Nullable(Of Boolean))` in Visual Basic.</span></span>  
  
 <span data-ttu-id="96bec-2571">Die folgende Tabelle zeigt die Syntax, mit `GetType` für verschiedene Typen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2571">The following table shows the syntax you use with `GetType` for various types.</span></span>  
  
|<span data-ttu-id="96bec-2572">Zum Abrufen</span><span class="sxs-lookup"><span data-stu-id="96bec-2572">To Get</span></span>|<span data-ttu-id="96bec-2573">Mit</span><span class="sxs-lookup"><span data-stu-id="96bec-2573">Use</span></span>|  
|------------|---------|  
|<span data-ttu-id="96bec-2574">Ein NULL-Werte zulässt <xref:System.Int32></span><span class="sxs-lookup"><span data-stu-id="96bec-2574">A nullable <xref:System.Int32></span></span>|<span data-ttu-id="96bec-2575">`Type.GetType("System.Nullable`1[System.Int32]")\`</span><span class="sxs-lookup"><span data-stu-id="96bec-2575">`Type.GetType("System.Nullable`1[System.Int32]")\`</span></span>|  
|<span data-ttu-id="96bec-2576">Ein nicht verwalteter Zeiger auf `MyType`</span><span class="sxs-lookup"><span data-stu-id="96bec-2576">An unmanaged pointer to `MyType`</span></span>|`Type.GetType("MyType*")`|  
|<span data-ttu-id="96bec-2577">Ein nicht verwalteter Zeiger auf einen Zeiger auf `MyType`</span><span class="sxs-lookup"><span data-stu-id="96bec-2577">An unmanaged pointer to a pointer to `MyType`</span></span>|`Type.GetType("MyType**")`|  
|<span data-ttu-id="96bec-2578">Ein verwalteter Zeiger oder Verweis auf `MyType`</span><span class="sxs-lookup"><span data-stu-id="96bec-2578">A managed pointer or reference to `MyType`</span></span>|<span data-ttu-id="96bec-2579">`Type.GetType("MyType&")`</span><span class="sxs-lookup"><span data-stu-id="96bec-2579">`Type.GetType("MyType&")`.</span></span> <span data-ttu-id="96bec-2580">Beachten Sie, dass Verweise im Gegensatz zu Zeigern auf eine Ebene beschränkt sind.</span><span class="sxs-lookup"><span data-stu-id="96bec-2580">Note that unlike pointers, references are limited to one level.</span></span>|  
|<span data-ttu-id="96bec-2581">Eine übergeordnete Klasse und eine geschachtelte Klasse.</span><span class="sxs-lookup"><span data-stu-id="96bec-2581">A parent class and a nested class</span></span>|`Type.GetType("MyParentClass+MyNestedClass")`|  
|<span data-ttu-id="96bec-2582">Ein eindimensionales Array mit einer unteren Grenze von 0</span><span class="sxs-lookup"><span data-stu-id="96bec-2582">A one-dimensional array with a lower bound of 0</span></span>|`Type.GetType("MyArray[]")`|  
|<span data-ttu-id="96bec-2583">Ein eindimensionales Array mit einem Unbekannter unterer Grenze</span><span class="sxs-lookup"><span data-stu-id="96bec-2583">A one-dimensional array with an unknown lower bound</span></span>|`Type.GetType("MyArray[*]")`|  
|<span data-ttu-id="96bec-2584">Ein Array mit n-dimensionalen</span><span class="sxs-lookup"><span data-stu-id="96bec-2584">An n-dimensional array</span></span>|<span data-ttu-id="96bec-2585">Ein Komma (,) innerhalb der Klammern eine insgesamt n-1 Mal.</span><span class="sxs-lookup"><span data-stu-id="96bec-2585">A comma (,) inside the brackets a total of n-1 times.</span></span> <span data-ttu-id="96bec-2586">Z. B. `System.Object[,,]` stellt ein dreidimensionales `Object` Array.</span><span class="sxs-lookup"><span data-stu-id="96bec-2586">For example, `System.Object[,,]` represents a three-dimensional `Object` array.</span></span>|  
|<span data-ttu-id="96bec-2587">Ein zweidimensionales Array von Arrays</span><span class="sxs-lookup"><span data-stu-id="96bec-2587">A two-dimensional array's array</span></span>|`Type.GetType("MyArray[][]")`|  
|<span data-ttu-id="96bec-2588">Ein rechteckiges zweidimensionales Array mit Unbekannter unterer Grenze</span><span class="sxs-lookup"><span data-stu-id="96bec-2588">A rectangular two-dimensional array with unknown lower bounds</span></span>|`Type.GetType("MyArray[,]")`|  
|<span data-ttu-id="96bec-2589">Ein generischer Typ mit einem Typargument</span><span class="sxs-lookup"><span data-stu-id="96bec-2589">A generic type with one type argument</span></span>|<span data-ttu-id="96bec-2590">`Type.GetType("MyGenericType`1[MyType]")\`</span><span class="sxs-lookup"><span data-stu-id="96bec-2590">`Type.GetType("MyGenericType`1[MyType]")\`</span></span>|  
|<span data-ttu-id="96bec-2591">Ein generischer Typ mit zwei Typargumente</span><span class="sxs-lookup"><span data-stu-id="96bec-2591">A generic type with two type arguments</span></span>|<span data-ttu-id="96bec-2592">`Type.GetType("MyGenericType`2[MyType,AnotherType]")"</span><span class="sxs-lookup"><span data-stu-id="96bec-2592">`Type.GetType("MyGenericType`2[MyType,AnotherType]")\`</span></span>|  
|<span data-ttu-id="96bec-2593">Ein generischer Typ mit zwei Argumenten der Assembly qualifizierten Typnamen</span><span class="sxs-lookup"><span data-stu-id="96bec-2593">A generic type with two assembly-qualified type arguments</span></span>|<span data-ttu-id="96bec-2594">`Type.GetType("MyGenericType`2[[MyType,MyAssembly],[AnotherType,AnotherAssembly]]")"</span><span class="sxs-lookup"><span data-stu-id="96bec-2594">`Type.GetType("MyGenericType`2[[MyType,MyAssembly],[AnotherType,AnotherAssembly]]")\`</span></span>|  
|<span data-ttu-id="96bec-2595">Ein mit assemblyqualifikation, generischer Typ mit einem Argument für die Assembly qualifizierten Typnamen</span><span class="sxs-lookup"><span data-stu-id="96bec-2595">An assembly-qualified generic type with an assembly-qualified type argument</span></span>|<span data-ttu-id="96bec-2596">`Type.GetType("MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly")"</span><span class="sxs-lookup"><span data-stu-id="96bec-2596">`Type.GetType("MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly")\`</span></span>|  
|<span data-ttu-id="96bec-2597">Ein generischer Typ, dessen Typargument eines generischen Typs mit zwei Argumente des Typs ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-2597">A generic type whose type argument is a generic type with two type arguments</span></span>|<span data-ttu-id="96bec-2598">`Type.GetType("MyGenericType`1 [AnotherGenericType`2[MyType,AnotherType]]")`</span><span class="sxs-lookup"><span data-stu-id="96bec-2598">`Type.GetType("MyGenericType`1[AnotherGenericType`2[MyType,AnotherType]]")`</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96bec-2599">
            <paramref name="typeName" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2599">
              <paramref name="typeName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="96bec-2600">A class initializer is invoked and throws an exception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2600">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="96bec-2601">
            <paramref name="throwOnError" /> is <see langword="true" /> and the type is not found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2601">
              <paramref name="throwOnError" /> is <see langword="true" /> and the type is not found.</span>
          </span>
          <span data-ttu-id="96bec-2602">-or-  <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.  -or-  <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2602">-or-  <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.  -or-  <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.</span>
          </span>
          <span data-ttu-id="96bec-2603">-or-  <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2603">-or-  <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.</span>
          </span>
          <span data-ttu-id="96bec-2604">-or-  <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2604">-or-  <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="96bec-2605">
            <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2605">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax.</span>
          </span>
          <span data-ttu-id="96bec-2606">For example, "MyType[,\*,]".</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2606">For example, "MyType[,\*,]".</span>
          </span>
          <span data-ttu-id="96bec-2607">-or-  <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2607">-or-  <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span>
          </span>
          <span data-ttu-id="96bec-2608">-or-  <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2608">-or-  <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span>
          </span>
          <span data-ttu-id="96bec-2609">-or-  <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2609">-or-  <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="96bec-2610">
            <paramref name="throwOnError" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2610">
              <paramref name="throwOnError" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="96bec-2611">The assembly or one of its dependencies was found, but could not be loaded.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2611">The assembly or one of its dependencies was found, but could not be loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="96bec-2612">The assembly or one of its dependencies is not valid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2612">The assembly or one of its dependencies is not valid.</span>
          </span>
          <span data-ttu-id="96bec-2613">-or-  Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2613">-or-  Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</span>
          </span>
        </exception>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.TypeLoadException" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
        <altmember cref="M:System.Reflection.Assembly.GetAssembly(System.Type)" />
        <altmember cref="M:System.Reflection.Assembly.GetType(System.String)" />
        <altmember cref="T:System.Reflection.AssemblyName" />
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName, Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt; assemblyResolver, Func&lt;System.Reflection.Assembly,string,bool,Type&gt; typeResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName, class System.Func`2&lt;class System.Reflection.AssemblyName, class System.Reflection.Assembly&gt; assemblyResolver, class System.Func`4&lt;class System.Reflection.Assembly, string, bool, class System.Type&gt; typeResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String, assemblyResolver As Func(Of AssemblyName, Assembly), typeResolver As Func(Of Assembly, String, Boolean, Type)) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName, Func&lt;System::Reflection::AssemblyName ^, System::Reflection::Assembly ^&gt; ^ assemblyResolver, Func&lt;System::Reflection::Assembly ^, System::String ^, bool, Type ^&gt; ^ typeResolver);" />
      <MemberSignature Language="F#" Value="static member GetType : string * Func&lt;System.Reflection.AssemblyName, System.Reflection.Assembly&gt; * Func&lt;System.Reflection.Assembly, string, bool, Type&gt; -&gt; Type" Usage="System.Type.GetType (typeName, assemblyResolver, typeResolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="assemblyResolver" Type="System.Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt;" />
        <Parameter Name="typeResolver" Type="System.Func&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt;" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="96bec-2614">The name of the type to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2614">The name of the type to get.</span>
          </span>
          <span data-ttu-id="96bec-2615">If the <c>typeResolver</c> parameter is provided, the type name can be any string that <c>typeResolver</c> is capable of resolving.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2615">If the <c>typeResolver</c> parameter is provided, the type name can be any string that <c>typeResolver</c> is capable of resolving.</span>
          </span>
          <span data-ttu-id="96bec-2616">If the <c>assemblyResolver</c> parameter is provided or if standard type resolution is used, <c>typeName</c> must be an assembly-qualified name (see <see cref="P:System.Type.AssemblyQualifiedName" />), unless the type is in the currently executing assembly or in Mscorlib.dll, in which case it is sufficient to supply the type name qualified by its namespace.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2616">If the <c>assemblyResolver</c> parameter is provided or if standard type resolution is used, <c>typeName</c> must be an assembly-qualified name (see <see cref="P:System.Type.AssemblyQualifiedName" />), unless the type is in the currently executing assembly or in Mscorlib.dll, in which case it is sufficient to supply the type name qualified by its namespace.</span>
          </span>
        </param>
        <param name="assemblyResolver">
          <span data-ttu-id="96bec-2617">A method that locates and returns the assembly that is specified in <c>typeName</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2617">A method that locates and returns the assembly that is specified in <c>typeName</c>.</span>
          </span>
          <span data-ttu-id="96bec-2618">The assembly name is passed to <c>assemblyResolver</c> as an <see cref="T:System.Reflection.AssemblyName" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2618">The assembly name is passed to <c>assemblyResolver</c> as an <see cref="T:System.Reflection.AssemblyName" /> object.</span>
          </span>
          <span data-ttu-id="96bec-2619">If <c>typeName</c> does not contain the name of an assembly, <c>assemblyResolver</c> is not called.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2619">If <c>typeName</c> does not contain the name of an assembly, <c>assemblyResolver</c> is not called.</span>
          </span>
          <span data-ttu-id="96bec-2620">If <c>assemblyResolver</c> is not supplied, standard assembly resolution is performed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2620">If <c>assemblyResolver</c> is not supplied, standard assembly resolution is performed.</span>
          </span>
          <span data-ttu-id="96bec-2621">Caution   Do not pass methods from unknown or untrusted callers.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2621">Caution   Do not pass methods from unknown or untrusted callers.</span>
          </span>
          <span data-ttu-id="96bec-2622">Doing so could result in elevation of privilege for malicious code.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2622">Doing so could result in elevation of privilege for malicious code.</span>
          </span>
          <span data-ttu-id="96bec-2623">Use only methods that you provide or that you are familiar with.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2623">Use only methods that you provide or that you are familiar with.</span>
          </span>
        </param>
        <param name="typeResolver">
          <span data-ttu-id="96bec-2624">A method that locates and returns the type that is specified by <c>typeName</c> from the assembly that is returned by <c>assemblyResolver</c> or by standard assembly resolution.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2624">A method that locates and returns the type that is specified by <c>typeName</c> from the assembly that is returned by <c>assemblyResolver</c> or by standard assembly resolution.</span>
          </span>
          <span data-ttu-id="96bec-2625">If no assembly is provided, the <c>typeResolver</c> method can provide one.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2625">If no assembly is provided, the <c>typeResolver</c> method can provide one.</span>
          </span>
          <span data-ttu-id="96bec-2626">The method also takes a parameter that specifies whether to perform a case-insensitive search; <see langword="false" /> is passed to that parameter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2626">The method also takes a parameter that specifies whether to perform a case-insensitive search; <see langword="false" /> is passed to that parameter.</span>
          </span>
          <span data-ttu-id="96bec-2627">Caution   Do not pass methods from unknown or untrusted callers.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2627">Caution   Do not pass methods from unknown or untrusted callers.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-2628">Gets the type with the specified name, optionally providing custom methods to resolve the assembly and the type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2628">Gets the type with the specified name, optionally providing custom methods to resolve the assembly and the type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-2629">The type with the specified name, or <see langword="null" /> if the type is not found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2629">The type with the specified name, or <see langword="null" /> if the type is not found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-2630">Verwendungsszenarien für diese Methode und die Details zu den `assemblyResolver` und `typeResolver` Parameter finden Sie in der <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> methodenüberladung.</span><span class="sxs-lookup"><span data-stu-id="96bec-2630">Usage scenarios for this method and details about the `assemblyResolver` and `typeResolver` parameters can be found in the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> method overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-2631">Wenn `typeName` kann nicht gefunden werden, den Aufruf der <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%29> Methodenrückgabe `null`.</span><span class="sxs-lookup"><span data-stu-id="96bec-2631">If `typeName` cannot be found, the call to the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%29> method returns `null`.</span></span> <span data-ttu-id="96bec-2632">Es löst keine Ausnahme aus.</span><span class="sxs-lookup"><span data-stu-id="96bec-2632">It does not throw an exception.</span></span> <span data-ttu-id="96bec-2633">Um zu steuern, ob eine Ausnahme wird ausgelöst, rufen Sie eine Überladung von der <xref:System.Type.GetType%2A> Methode mit einem `throwOnError` Parameter.</span><span class="sxs-lookup"><span data-stu-id="96bec-2633">To control whether an exception is thrown, call an overload of the <xref:System.Type.GetType%2A> method that has a `throwOnError` parameter.</span></span>  
  
 <span data-ttu-id="96bec-2634">Aufrufen der Überladung dieser Methode entspricht dem Aufrufen der <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> -methodenüberladung, und geben `false` für die `throwOnError` und `ignoreCase` Parameter.</span><span class="sxs-lookup"><span data-stu-id="96bec-2634">Calling this method overload is the same as calling the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> method overload and specifying `false` for the `throwOnError` and `ignoreCase` parameters.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96bec-2635">
            <paramref name="typeName" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2635">
              <paramref name="typeName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="96bec-2636">A class initializer is invoked and throws an exception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2636">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="96bec-2637">An error occurs when <paramref name="typeName" /> is parsed into a type name and an assembly name (for example, when the simple type name includes an unescaped special character).</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2637">An error occurs when <paramref name="typeName" /> is parsed into a type name and an assembly name (for example, when the simple type name includes an unescaped special character).</span>
          </span>
          <span data-ttu-id="96bec-2638">-or-  <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2638">-or-  <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span>
          </span>
          <span data-ttu-id="96bec-2639">-or-  <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2639">-or-  <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span>
          </span>
          <span data-ttu-id="96bec-2640">-or-  <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2640">-or-  <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="96bec-2641">
            <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2641">
              <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="96bec-2642">The assembly or one of its dependencies was found, but could not be loaded.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2642">The assembly or one of its dependencies was found, but could not be loaded.</span>
          </span>
          <span data-ttu-id="96bec-2643">-or-  <paramref name="typeName" /> contains an invalid assembly name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2643">-or-  <paramref name="typeName" /> contains an invalid assembly name.</span>
          </span>
          <span data-ttu-id="96bec-2644">-or-  <paramref name="typeName" /> is a valid assembly name without a type name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2644">-or-  <paramref name="typeName" /> is a valid assembly name without a type name.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="96bec-2645">The assembly or one of its dependencies is not valid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2645">The assembly or one of its dependencies is not valid.</span>
          </span>
          <span data-ttu-id="96bec-2646">-or-  The assembly was compiled with a later version of the common language runtime than the version that is currently loaded.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2646">-or-  The assembly was compiled with a later version of the common language runtime than the version that is currently loaded.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName, Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt; assemblyResolver, Func&lt;System.Reflection.Assembly,string,bool,Type&gt; typeResolver, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName, class System.Func`2&lt;class System.Reflection.AssemblyName, class System.Reflection.Assembly&gt; assemblyResolver, class System.Func`4&lt;class System.Reflection.Assembly, string, bool, class System.Type&gt; typeResolver, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String, assemblyResolver As Func(Of AssemblyName, Assembly), typeResolver As Func(Of Assembly, String, Boolean, Type), throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName, Func&lt;System::Reflection::AssemblyName ^, System::Reflection::Assembly ^&gt; ^ assemblyResolver, Func&lt;System::Reflection::Assembly ^, System::String ^, bool, Type ^&gt; ^ typeResolver, bool throwOnError);" />
      <MemberSignature Language="F#" Value="static member GetType : string * Func&lt;System.Reflection.AssemblyName, System.Reflection.Assembly&gt; * Func&lt;System.Reflection.Assembly, string, bool, Type&gt; * bool -&gt; Type" Usage="System.Type.GetType (typeName, assemblyResolver, typeResolver, throwOnError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="assemblyResolver" Type="System.Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt;" />
        <Parameter Name="typeResolver" Type="System.Func&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt;" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="96bec-2647">The name of the type to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2647">The name of the type to get.</span>
          </span>
          <span data-ttu-id="96bec-2648">If the <c>typeResolver</c> parameter is provided, the type name can be any string that <c>typeResolver</c> is capable of resolving.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2648">If the <c>typeResolver</c> parameter is provided, the type name can be any string that <c>typeResolver</c> is capable of resolving.</span>
          </span>
          <span data-ttu-id="96bec-2649">If the <c>assemblyResolver</c> parameter is provided or if standard type resolution is used, <c>typeName</c> must be an assembly-qualified name (see <see cref="P:System.Type.AssemblyQualifiedName" />), unless the type is in the currently executing assembly or in Mscorlib.dll, in which case it is sufficient to supply the type name qualified by its namespace.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2649">If the <c>assemblyResolver</c> parameter is provided or if standard type resolution is used, <c>typeName</c> must be an assembly-qualified name (see <see cref="P:System.Type.AssemblyQualifiedName" />), unless the type is in the currently executing assembly or in Mscorlib.dll, in which case it is sufficient to supply the type name qualified by its namespace.</span>
          </span>
        </param>
        <param name="assemblyResolver">
          <span data-ttu-id="96bec-2650">A method that locates and returns the assembly that is specified in <c>typeName</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2650">A method that locates and returns the assembly that is specified in <c>typeName</c>.</span>
          </span>
          <span data-ttu-id="96bec-2651">The assembly name is passed to <c>assemblyResolver</c> as an <see cref="T:System.Reflection.AssemblyName" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2651">The assembly name is passed to <c>assemblyResolver</c> as an <see cref="T:System.Reflection.AssemblyName" /> object.</span>
          </span>
          <span data-ttu-id="96bec-2652">If <c>typeName</c> does not contain the name of an assembly, <c>assemblyResolver</c> is not called.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2652">If <c>typeName</c> does not contain the name of an assembly, <c>assemblyResolver</c> is not called.</span>
          </span>
          <span data-ttu-id="96bec-2653">If <c>assemblyResolver</c> is not supplied, standard assembly resolution is performed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2653">If <c>assemblyResolver</c> is not supplied, standard assembly resolution is performed.</span>
          </span>
          <span data-ttu-id="96bec-2654">Caution   Do not pass methods from unknown or untrusted callers.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2654">Caution   Do not pass methods from unknown or untrusted callers.</span>
          </span>
          <span data-ttu-id="96bec-2655">Doing so could result in elevation of privilege for malicious code.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2655">Doing so could result in elevation of privilege for malicious code.</span>
          </span>
          <span data-ttu-id="96bec-2656">Use only methods that you provide or that you are familiar with.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2656">Use only methods that you provide or that you are familiar with.</span>
          </span>
        </param>
        <param name="typeResolver">
          <span data-ttu-id="96bec-2657">A method that locates and returns the type that is specified by <c>typeName</c> from the assembly that is returned by <c>assemblyResolver</c> or by standard assembly resolution.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2657">A method that locates and returns the type that is specified by <c>typeName</c> from the assembly that is returned by <c>assemblyResolver</c> or by standard assembly resolution.</span>
          </span>
          <span data-ttu-id="96bec-2658">If no assembly is provided, the method can provide one.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2658">If no assembly is provided, the method can provide one.</span>
          </span>
          <span data-ttu-id="96bec-2659">The method also takes a parameter that specifies whether to perform a case-insensitive search; <see langword="false" /> is passed to that parameter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2659">The method also takes a parameter that specifies whether to perform a case-insensitive search; <see langword="false" /> is passed to that parameter.</span>
          </span>
          <span data-ttu-id="96bec-2660">Caution   Do not pass methods from unknown or untrusted callers.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2660">Caution   Do not pass methods from unknown or untrusted callers.</span>
          </span>
        </param>
        <param name="throwOnError">
          <span data-ttu-id="96bec-2661">
            <see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2661">
              <see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" />.</span>
          </span>
          <span data-ttu-id="96bec-2662">Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2662">Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them.</span>
          </span>
          <span data-ttu-id="96bec-2663">See the Exceptions section.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2663">See the Exceptions section.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-2664">Gets the type with the specified name, specifying whether to throw an exception if the type is not found, and optionally providing custom methods to resolve the assembly and the type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2664">Gets the type with the specified name, specifying whether to throw an exception if the type is not found, and optionally providing custom methods to resolve the assembly and the type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-2665">The type with the specified name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2665">The type with the specified name.</span>
          </span>
          <span data-ttu-id="96bec-2666">If the type is not found, the <paramref name="throwOnError" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2666">If the type is not found, the <paramref name="throwOnError" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown.</span>
          </span>
          <span data-ttu-id="96bec-2667">In some cases, an exception is thrown regardless of the value of <paramref name="throwOnError" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2667">In some cases, an exception is thrown regardless of the value of <paramref name="throwOnError" />.</span>
          </span>
          <span data-ttu-id="96bec-2668">See the Exceptions section.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2668">See the Exceptions section.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-2669">Verwendungsszenarien für diese Methode und die Details zu den `assemblyResolver` und `typeResolver` Parameter finden Sie in der <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> methodenüberladung.</span><span class="sxs-lookup"><span data-stu-id="96bec-2669">Usage scenarios for this method and details about the `assemblyResolver` and `typeResolver` parameters can be found in the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> method overload.</span></span>  
  
 <span data-ttu-id="96bec-2670">Aufrufen der Überladung dieser Methode entspricht dem Aufrufen der <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> -methodenüberladung, und geben `false` für die `ignoreCase` Parameter.</span><span class="sxs-lookup"><span data-stu-id="96bec-2670">Calling this method overload is the same as calling the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> method overload and specifying `false` for the `ignoreCase` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96bec-2671">
            <paramref name="typeName" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2671">
              <paramref name="typeName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="96bec-2672">A class initializer is invoked and throws an exception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2672">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="96bec-2673">
            <paramref name="throwOnError" /> is <see langword="true" /> and the type is not found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2673">
              <paramref name="throwOnError" /> is <see langword="true" /> and the type is not found.</span>
          </span>
          <span data-ttu-id="96bec-2674">-or-  <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.  -or-  <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2674">-or-  <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.  -or-  <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.</span>
          </span>
          <span data-ttu-id="96bec-2675">-or-  <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2675">-or-  <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.</span>
          </span>
          <span data-ttu-id="96bec-2676">-or-  <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2676">-or-  <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="96bec-2677">An error occurs when <paramref name="typeName" /> is parsed into a type name and an assembly name (for example, when the simple type name includes an unescaped special character).</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2677">An error occurs when <paramref name="typeName" /> is parsed into a type name and an assembly name (for example, when the simple type name includes an unescaped special character).</span>
          </span>
          <span data-ttu-id="96bec-2678">-or-  <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax (for example, "MyType[,\*,]").</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2678">-or-  <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax (for example, "MyType[,\*,]").</span>
          </span>
          <span data-ttu-id="96bec-2679">-or-  <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2679">-or-  <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span>
          </span>
          <span data-ttu-id="96bec-2680">-or-  <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2680">-or-  <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span>
          </span>
          <span data-ttu-id="96bec-2681">-or-  <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2681">-or-  <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="96bec-2682">
            <paramref name="throwOnError" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2682">
              <paramref name="throwOnError" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</span>
          </span>
          <span data-ttu-id="96bec-2683">-or-  <paramref name="typeName" /> contains an invalid assembly name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2683">-or-  <paramref name="typeName" /> contains an invalid assembly name.</span>
          </span>
          <span data-ttu-id="96bec-2684">-or-  <paramref name="typeName" /> is a valid assembly name without a type name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2684">-or-  <paramref name="typeName" /> is a valid assembly name without a type name.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="96bec-2685">The assembly or one of its dependencies was found, but could not be loaded.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2685">The assembly or one of its dependencies was found, but could not be loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="96bec-2686">The assembly or one of its dependencies is not valid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2686">The assembly or one of its dependencies is not valid.</span>
          </span>
          <span data-ttu-id="96bec-2687">-or-  The assembly was compiled with a later version of the common language runtime than the version that is currently loaded.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2687">-or-  The assembly was compiled with a later version of the common language runtime than the version that is currently loaded.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName, Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt; assemblyResolver, Func&lt;System.Reflection.Assembly,string,bool,Type&gt; typeResolver, bool throwOnError, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName, class System.Func`2&lt;class System.Reflection.AssemblyName, class System.Reflection.Assembly&gt; assemblyResolver, class System.Func`4&lt;class System.Reflection.Assembly, string, bool, class System.Type&gt; typeResolver, bool throwOnError, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String, assemblyResolver As Func(Of AssemblyName, Assembly), typeResolver As Func(Of Assembly, String, Boolean, Type), throwOnError As Boolean, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName, Func&lt;System::Reflection::AssemblyName ^, System::Reflection::Assembly ^&gt; ^ assemblyResolver, Func&lt;System::Reflection::Assembly ^, System::String ^, bool, Type ^&gt; ^ typeResolver, bool throwOnError, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member GetType : string * Func&lt;System.Reflection.AssemblyName, System.Reflection.Assembly&gt; * Func&lt;System.Reflection.Assembly, string, bool, Type&gt; * bool * bool -&gt; Type" Usage="System.Type.GetType (typeName, assemblyResolver, typeResolver, throwOnError, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="assemblyResolver" Type="System.Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt;" />
        <Parameter Name="typeResolver" Type="System.Func&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt;" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="96bec-2688">The name of the type to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2688">The name of the type to get.</span>
          </span>
          <span data-ttu-id="96bec-2689">If the <c>typeResolver</c> parameter is provided, the type name can be any string that <c>typeResolver</c> is capable of resolving.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2689">If the <c>typeResolver</c> parameter is provided, the type name can be any string that <c>typeResolver</c> is capable of resolving.</span>
          </span>
          <span data-ttu-id="96bec-2690">If the <c>assemblyResolver</c> parameter is provided or if standard type resolution is used, <c>typeName</c> must be an assembly-qualified name (see <see cref="P:System.Type.AssemblyQualifiedName" />), unless the type is in the currently executing assembly or in Mscorlib.dll, in which case it is sufficient to supply the type name qualified by its namespace.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2690">If the <c>assemblyResolver</c> parameter is provided or if standard type resolution is used, <c>typeName</c> must be an assembly-qualified name (see <see cref="P:System.Type.AssemblyQualifiedName" />), unless the type is in the currently executing assembly or in Mscorlib.dll, in which case it is sufficient to supply the type name qualified by its namespace.</span>
          </span>
        </param>
        <param name="assemblyResolver">
          <span data-ttu-id="96bec-2691">A method that locates and returns the assembly that is specified in <c>typeName</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2691">A method that locates and returns the assembly that is specified in <c>typeName</c>.</span>
          </span>
          <span data-ttu-id="96bec-2692">The assembly name is passed to <c>assemblyResolver</c> as an <see cref="T:System.Reflection.AssemblyName" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2692">The assembly name is passed to <c>assemblyResolver</c> as an <see cref="T:System.Reflection.AssemblyName" /> object.</span>
          </span>
          <span data-ttu-id="96bec-2693">If <c>typeName</c> does not contain the name of an assembly, <c>assemblyResolver</c> is not called.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2693">If <c>typeName</c> does not contain the name of an assembly, <c>assemblyResolver</c> is not called.</span>
          </span>
          <span data-ttu-id="96bec-2694">If <c>assemblyResolver</c> is not supplied, standard assembly resolution is performed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2694">If <c>assemblyResolver</c> is not supplied, standard assembly resolution is performed.</span>
          </span>
          <span data-ttu-id="96bec-2695">Caution   Do not pass methods from unknown or untrusted callers.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2695">Caution   Do not pass methods from unknown or untrusted callers.</span>
          </span>
          <span data-ttu-id="96bec-2696">Doing so could result in elevation of privilege for malicious code.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2696">Doing so could result in elevation of privilege for malicious code.</span>
          </span>
          <span data-ttu-id="96bec-2697">Use only methods that you provide or that you are familiar with.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2697">Use only methods that you provide or that you are familiar with.</span>
          </span>
        </param>
        <param name="typeResolver">
          <span data-ttu-id="96bec-2698">A method that locates and returns the type that is specified by <c>typeName</c> from the assembly that is returned by <c>assemblyResolver</c> or by standard assembly resolution.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2698">A method that locates and returns the type that is specified by <c>typeName</c> from the assembly that is returned by <c>assemblyResolver</c> or by standard assembly resolution.</span>
          </span>
          <span data-ttu-id="96bec-2699">If no assembly is provided, the method can provide one.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2699">If no assembly is provided, the method can provide one.</span>
          </span>
          <span data-ttu-id="96bec-2700">The method also takes a parameter that specifies whether to perform a case-insensitive search; the value of <c>ignoreCase</c> is passed to that parameter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2700">The method also takes a parameter that specifies whether to perform a case-insensitive search; the value of <c>ignoreCase</c> is passed to that parameter.</span>
          </span>
          <span data-ttu-id="96bec-2701">Caution   Do not pass methods from unknown or untrusted callers.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2701">Caution   Do not pass methods from unknown or untrusted callers.</span>
          </span>
        </param>
        <param name="throwOnError">
          <span data-ttu-id="96bec-2702">
            <see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2702">
              <see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" />.</span>
          </span>
          <span data-ttu-id="96bec-2703">Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2703">Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them.</span>
          </span>
          <span data-ttu-id="96bec-2704">See the Exceptions section.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2704">See the Exceptions section.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="96bec-2705">
            <see langword="true" /> to perform a case-insensitive search for <c>typeName</c>, <see langword="false" /> to perform a case-sensitive search for <c>typeName</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2705">
              <see langword="true" /> to perform a case-insensitive search for <c>typeName</c>, <see langword="false" /> to perform a case-sensitive search for <c>typeName</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-2706">Gets the type with the specified name, specifying whether to perform a case-sensitive search and whether to throw an exception if the type is not found, and optionally providing custom methods to resolve the assembly and the type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2706">Gets the type with the specified name, specifying whether to perform a case-sensitive search and whether to throw an exception if the type is not found, and optionally providing custom methods to resolve the assembly and the type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-2707">The type with the specified name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2707">The type with the specified name.</span>
          </span>
          <span data-ttu-id="96bec-2708">If the type is not found, the <paramref name="throwOnError" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2708">If the type is not found, the <paramref name="throwOnError" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown.</span>
          </span>
          <span data-ttu-id="96bec-2709">In some cases, an exception is thrown regardless of the value of <paramref name="throwOnError" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2709">In some cases, an exception is thrown regardless of the value of <paramref name="throwOnError" />.</span>
          </span>
          <span data-ttu-id="96bec-2710">See the Exceptions section.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2710">See the Exceptions section.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-2711">Verwenden Sie diese methodenüberladung und ihre zugehörigen Überladungen (<xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%29> und <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%29>), ersetzen die standardmäßige Implementierung von der <xref:System.Type.GetType%2A> -Methode mit flexibler Implementierungen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2711">Use this method overload and its associated overloads (<xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%29> and <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%29>) to replace the default implementation of the <xref:System.Type.GetType%2A> method with more flexible implementations.</span></span> <span data-ttu-id="96bec-2712">Durch Ihre eigenen Methoden, die aufgelöst werden, geben Sie die Namen und die Namen der Assemblys, die sie enthalten, können Sie Folgendes tun:</span><span class="sxs-lookup"><span data-stu-id="96bec-2712">By providing your own methods that resolve type names and the names of the assemblies that contain them, you can do the following:</span></span>  
  
-   <span data-ttu-id="96bec-2713">Steuern Sie, welche Version einer Assembly aus ein Typs geladen wird.</span><span class="sxs-lookup"><span data-stu-id="96bec-2713">Control which version of an assembly a type is loaded from.</span></span>  
  
-   <span data-ttu-id="96bec-2714">Geben Sie eine andere Stelle, für einen Typnamen zu suchen, das nicht der Namen einer Assembly enthalten ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-2714">Provide another place to look for a type name that does not include an assembly name.</span></span>  
  
-   <span data-ttu-id="96bec-2715">Laden von Assemblys mit partiellen Assemblynamen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2715">Load assemblies using partial assembly names.</span></span>  
  
-   <span data-ttu-id="96bec-2716">Zurückgeben von Unterklassen von <xref:System.Type?displayProperty=nameWithType> , die nicht von der common Language Runtime (CLR) erstellt werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-2716">Return subclasses of <xref:System.Type?displayProperty=nameWithType> that are not created by the common language runtime (CLR).</span></span>  
  
 <span data-ttu-id="96bec-2717">Beispielsweise kann in versionstolerante Serialisierung dieser Methode Sie mithilfe eines unvollständigen Namens nach einer "best fit"-Assembly zu suchen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2717">For example, in version-tolerant serialization this method enables you to search for a "best fit" assembly by using a partial name.</span></span> <span data-ttu-id="96bec-2718">Andere Überladungen der <xref:System.Type.GetType%2A> Methode erforderlich sind, eine Assembly qualifizierter Typname, der die Versionsnummer enthält.</span><span class="sxs-lookup"><span data-stu-id="96bec-2718">Other overloads of the <xref:System.Type.GetType%2A> method require an assembly-qualified type name, which includes the version number.</span></span>  
  
 <span data-ttu-id="96bec-2719">Alternative Implementierungen des Typsystems möglicherweise Unterklassen der zurückzugebenden <xref:System.Type?displayProperty=nameWithType> , die nicht von der CLR erstellt; alle Typen, die durch andere Überladungen zurückgegeben werden die <xref:System.Type.GetType%2A> Methode werden die Runtime-Typen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2719">Alternate implementations of the type system may need to return subclasses of <xref:System.Type?displayProperty=nameWithType> that are not created by the CLR; all types that are returned by other overloads of the <xref:System.Type.GetType%2A> method are runtime types.</span></span>  
  
<a name="usage_notes"></a>   
## <a name="usage-notes"></a><span data-ttu-id="96bec-2720">Hinweise zur Verwendung</span><span class="sxs-lookup"><span data-stu-id="96bec-2720">Usage Notes</span></span>  
 <span data-ttu-id="96bec-2721">Analysieren der Überladung dieser Methode und ihre zugehörigen Überladungen `typeName` in den Namen eines Typs und den Namen einer Assembly, und klicken Sie dann die Namen auflösen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2721">This method overload and its associated overloads parse `typeName` into the name of a type and the name of an assembly, and then resolve the names.</span></span> <span data-ttu-id="96bec-2722">Auflösung des Namens der Assembly tritt auf, vor der Auflösung des Typnamens, da Sie ein Namen im Kontext einer Assembly aufgelöst werden muss.</span><span class="sxs-lookup"><span data-stu-id="96bec-2722">Resolution of the assembly name occurs before resolution of the type name, because a type name must be resolved in the context of an assembly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-2723">Wenn Sie mit dem Konzept der Assembly qualifizierten Typnamen nicht vertraut sind, finden Sie unter den <xref:System.Type.AssemblyQualifiedName%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="96bec-2723">If you are unfamiliar with the concept of assembly-qualified type names, see the <xref:System.Type.AssemblyQualifiedName%2A> property.</span></span>  
  
 <span data-ttu-id="96bec-2724">Wenn `typeName` ist kein Name mit assemblyqualifikation, Assembly-Auflösung wird übersprungen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2724">If `typeName` is not an assembly-qualified name, assembly resolution is skipped.</span></span> <span data-ttu-id="96bec-2725">Nicht qualifizierte Typennamen im Kontext von "mscorlib.dll" oder der aktuell ausgeführten Assembly aufgelöst werden können, oder optional können Sie angeben, eine Assembly in den `typeResolver` Parameter.</span><span class="sxs-lookup"><span data-stu-id="96bec-2725">Unqualified type names can be resolved in the context of Mscorlib.dll or the currently executing assembly, or you can optionally provide an assembly in the `typeResolver` parameter.</span></span> <span data-ttu-id="96bec-2726">Die Auswirkungen der ein- oder den Assemblynamen auslassen, für verschiedene Arten der namensauflösung in als Tabelle angezeigt, die [gemischten namensauflösung](#mixed_name_resolution) Abschnitt.</span><span class="sxs-lookup"><span data-stu-id="96bec-2726">The effects of including or omitting the assembly name for different kinds of name resolution are displayed as a table in the [Mixed Name Resolution](#mixed_name_resolution) section.</span></span>  
  
 <span data-ttu-id="96bec-2727">Hinweise zur allgemeinen Verwendung:</span><span class="sxs-lookup"><span data-stu-id="96bec-2727">General usage notes:</span></span>  
  
-   <span data-ttu-id="96bec-2728">Übergeben Sie keine Methoden zum `assemblyResolver` oder `typeResolver` , wenn sie von unbekannten oder nicht vertrauenswürdigen Aufrufern stammen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2728">Do not pass methods to `assemblyResolver` or `typeResolver` if they come from unknown or untrusted callers.</span></span> <span data-ttu-id="96bec-2729">Verwenden Sie nur Methoden, die Sie bereitstellen oder mit denen Sie vertraut sind.</span><span class="sxs-lookup"><span data-stu-id="96bec-2729">Use only methods that you provide or that you are familiar with.</span></span>  
  
    > [!CAUTION]
    >  <span data-ttu-id="96bec-2730">Mit Methoden von unbekannten oder nicht vertrauenswürdigen Aufrufern kann Erhöhung von Berechtigungen für bösartigen Code führen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2730">Using methods from unknown or untrusted callers could result in elevation of privilege for malicious code.</span></span>  
  
-   <span data-ttu-id="96bec-2731">Wenn Sie weglassen der `assemblyResolver` und/oder `typeResolver` Parameter wird der Wert des der `throwOnError` Parameter übergeben wird, um die Methoden, die standardauflösung ausführen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2731">If you omit the `assemblyResolver` and/or `typeResolver` parameters, the value of the `throwOnError` parameter is passed to the methods that perform the default resolution.</span></span>  
  
-   <span data-ttu-id="96bec-2732">Wenn `throwOnError` ist `true`, löst diese Methode eine <xref:System.TypeLoadException> beim `typeResolver` gibt `null`, und ein <xref:System.IO.FileNotFoundException> beim `assemblyResolver` gibt `null`.</span><span class="sxs-lookup"><span data-stu-id="96bec-2732">If `throwOnError` is `true`, this method throws a <xref:System.TypeLoadException> when `typeResolver` returns `null`, and a <xref:System.IO.FileNotFoundException> when `assemblyResolver` returns `null`.</span></span>  
  
-   <span data-ttu-id="96bec-2733">Diese Methode fängt keine Ausnahmen von `assemblyResolver` und `typeResolver`.</span><span class="sxs-lookup"><span data-stu-id="96bec-2733">This method does not catch exceptions thrown by `assemblyResolver` and `typeResolver`.</span></span> <span data-ttu-id="96bec-2734">Sie sind verantwortlich für alle Ausnahmen, die von den Resolvermethoden ausgelöst werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-2734">You are responsible for any exceptions that are thrown by the resolver methods.</span></span>  
  
<a name="resolving_assemblies"></a>   
### <a name="resolving-assemblies"></a><span data-ttu-id="96bec-2735">Auflösen von Assemblys</span><span class="sxs-lookup"><span data-stu-id="96bec-2735">Resolving Assemblies</span></span>  
 <span data-ttu-id="96bec-2736">Die `assemblyResolver` -Methode empfängt ein <xref:System.Reflection.AssemblyName> -Objekt, das erstellt wird, durch Analysieren der Zeichenfolge-Assemblyname, der Bestandteil `typeName`.</span><span class="sxs-lookup"><span data-stu-id="96bec-2736">The `assemblyResolver` method receives an <xref:System.Reflection.AssemblyName> object, which is produced by parsing the string assembly name that is included in `typeName`.</span></span> <span data-ttu-id="96bec-2737">Wenn `typeName` enthält nicht den Namen einer Assembly `assemblyResolver` wird nicht aufgerufen und `null` übergeben wird, um `typeResolver`.</span><span class="sxs-lookup"><span data-stu-id="96bec-2737">If `typeName` does not contain an assembly name, `assemblyResolver` is not called and `null` is passed to `typeResolver`.</span></span>  
  
 <span data-ttu-id="96bec-2738">Wenn `assemblyResolver` ist nicht angegeben wird, Überprüfung wird verwendet, um die Assembly zu suchen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2738">If `assemblyResolver` is not supplied, standard assembly probing is used to locate the assembly.</span></span> <span data-ttu-id="96bec-2739">Wenn `assemblyResolver` bereitgestellt wird, wird die <xref:System.Type.GetType%2A> Methode führt keine Standardsuche; in diesem Fall müssen Sie sicherstellen, dass Ihre `assemblyResolver` verarbeiten alle Assemblys, die Sie an sie übergeben werden kann.</span><span class="sxs-lookup"><span data-stu-id="96bec-2739">If `assemblyResolver` is provided, the <xref:System.Type.GetType%2A> method does not do standard probing; in that case you must ensure that your `assemblyResolver` can handle all the assemblies you pass to it.</span></span>  
  
 <span data-ttu-id="96bec-2740">Die `assemblyResolver` Methode zurückgeben soll `null` , wenn die Assembly nicht aufgelöst werden kann.</span><span class="sxs-lookup"><span data-stu-id="96bec-2740">The `assemblyResolver` method should return `null` if the assembly cannot be resolved.</span></span> <span data-ttu-id="96bec-2741">Wenn `assemblyResolver` gibt `null`, `typeResolver` nicht aufgerufen wird und keine weitere Verarbeitung erfolgt; darüber hinaus Wenn `throwOnError` ist `true`, <xref:System.IO.FileNotFoundException> ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="96bec-2741">If `assemblyResolver` returns `null`, `typeResolver` is not called and no further processing occurs; additionally, if `throwOnError` is `true`, a <xref:System.IO.FileNotFoundException> is thrown.</span></span>  
  
 <span data-ttu-id="96bec-2742">Wenn die <xref:System.Reflection.AssemblyName> übergebene `assemblyResolver` ist eine partielle Name, eine oder mehrere Teile sind `null`.</span><span class="sxs-lookup"><span data-stu-id="96bec-2742">If the <xref:System.Reflection.AssemblyName> that is passed to `assemblyResolver` is a partial name, one or more of its parts are `null`.</span></span> <span data-ttu-id="96bec-2743">Wenn keine Version, beispielsweise die <xref:System.Reflection.AssemblyName.Version%2A> Eigenschaft `null`.</span><span class="sxs-lookup"><span data-stu-id="96bec-2743">For example, if it has no version, the <xref:System.Reflection.AssemblyName.Version%2A> property is `null`.</span></span> <span data-ttu-id="96bec-2744">Wenn die <xref:System.Reflection.AssemblyName.Version%2A> -Eigenschaft, die <xref:System.Reflection.AssemblyName.CultureInfo%2A> -Eigenschaft, und die <xref:System.Reflection.AssemblyName.GetPublicKeyToken%2A> Methode geben `null`, und klicken Sie dann nur der einfache Namen der Assembly angegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="96bec-2744">If the <xref:System.Reflection.AssemblyName.Version%2A> property, the <xref:System.Reflection.AssemblyName.CultureInfo%2A> property, and the <xref:System.Reflection.AssemblyName.GetPublicKeyToken%2A> method all return `null`, then only the simple name of the assembly was supplied.</span></span> <span data-ttu-id="96bec-2745">Die `assemblyResolver` Methode verwenden kann, oder ignorieren Sie alle Teile des Namens der Assembly.</span><span class="sxs-lookup"><span data-stu-id="96bec-2745">The `assemblyResolver` method can use or ignore all parts of the assembly name.</span></span>  
  
 <span data-ttu-id="96bec-2746">Die Auswirkungen der Optionen für die namensauflösung von anderen Assembly werden angezeigt, wie eine Tabelle in der [gemischten namensauflösung](#mixed_name_resolution) Abschnitt für einfache und die Assembly qualifizierten Typnamen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2746">The effects of different assembly resolution options are displayed as a table in the [Mixed Name Resolution](#mixed_name_resolution) section, for simple and assembly-qualified type names.</span></span>  
  
<a name="resolving_types"></a>   
### <a name="resolving-types"></a><span data-ttu-id="96bec-2747">Auflösen von Typen</span><span class="sxs-lookup"><span data-stu-id="96bec-2747">Resolving Types</span></span>  
 <span data-ttu-id="96bec-2748">Wenn `typeName` gibt keinen Namen einer Assembly, `typeResolver` wird immer aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2748">If `typeName` does not specify an assembly name, `typeResolver` is always called.</span></span> <span data-ttu-id="96bec-2749">Wenn `typeName` gibt den Namen einer Assembly `typeResolver` wird nur aufgerufen, wenn der Name der Assembly erfolgreich aufgelöst wird.</span><span class="sxs-lookup"><span data-stu-id="96bec-2749">If `typeName` specifies an assembly name, `typeResolver` is called only when the assembly name is successfully resolved.</span></span> <span data-ttu-id="96bec-2750">Wenn `assemblyResolver` oder Standardassembly gibt `null`, `typeResolver` wird nicht aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2750">If `assemblyResolver` or standard assembly probing returns `null`, `typeResolver` is not called.</span></span>  
  
 <span data-ttu-id="96bec-2751">Die `typeResolver` erhält die Methode drei Argumente:</span><span class="sxs-lookup"><span data-stu-id="96bec-2751">The `typeResolver` method receives three arguments:</span></span>  
  
-   <span data-ttu-id="96bec-2752">Die Assembly zu suchen oder `null` Wenn `typeName` enthält keinen Namen einer Assembly.</span><span class="sxs-lookup"><span data-stu-id="96bec-2752">The assembly to search or `null` if `typeName` does not contain an assembly name.</span></span>  
  
-   <span data-ttu-id="96bec-2753">Der einfache Name des Typs.</span><span class="sxs-lookup"><span data-stu-id="96bec-2753">The simple name of the type.</span></span> <span data-ttu-id="96bec-2754">Im Falle eines geschachtelten Typs ist ist dies die äußersten enthaltenden Typ.</span><span class="sxs-lookup"><span data-stu-id="96bec-2754">In the case of a nested type, this is the outermost containing type.</span></span> <span data-ttu-id="96bec-2755">Im Fall von einem generischen Typ ist dies der einfache Name des generischen Typs.</span><span class="sxs-lookup"><span data-stu-id="96bec-2755">In the case of a generic type, this is the simple name of the generic type.</span></span>  
  
-   <span data-ttu-id="96bec-2756">Ein boolescher Wert, der `true` Wenn Namen die Groß-/Kleinschreibung ignoriert werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-2756">A Boolean value that is `true` if the case of type names is to be ignored.</span></span>  
  
 <span data-ttu-id="96bec-2757">Die Implementierung bestimmt die Möglichkeit, die diese Argumente verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-2757">The implementation determines the way these arguments are used.</span></span> <span data-ttu-id="96bec-2758">Die `typeResolver` Methode zurückgeben soll `null` , wenn er nicht auflösen kann.</span><span class="sxs-lookup"><span data-stu-id="96bec-2758">The `typeResolver` method should return `null` if it cannot resolve the type.</span></span> <span data-ttu-id="96bec-2759">Wenn `typeResolver` gibt `null` und `throwOnError` ist `true`, diese Überladung der <xref:System.Type.GetType%2A> löst eine <xref:System.TypeLoadException>.</span><span class="sxs-lookup"><span data-stu-id="96bec-2759">If `typeResolver` returns `null` and `throwOnError` is `true`, this overload of <xref:System.Type.GetType%2A> throws a <xref:System.TypeLoadException>.</span></span>  
  
 <span data-ttu-id="96bec-2760">Die Auswirkungen der Optionen für die namensauflösung von anderen Typs werden angezeigt, wie eine Tabelle in der [gemischten namensauflösung](#mixed_name_resolution) Abschnitt für einfache und die Assembly qualifizierten Typnamen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2760">The effects of different type resolution options are displayed as a table in the [Mixed Name Resolution](#mixed_name_resolution) section, for simple and assembly-qualified type names.</span></span>  
  
#### <a name="resolving-nested-types"></a><span data-ttu-id="96bec-2761">Auflösen von geschachtelten Typen</span><span class="sxs-lookup"><span data-stu-id="96bec-2761">Resolving Nested Types</span></span>  
 <span data-ttu-id="96bec-2762">Wenn `typeName` ist ein geschachtelter Typ, der nur den Namen des äußersten enthaltenden Typ übergeben wird, um `typeResolver`.</span><span class="sxs-lookup"><span data-stu-id="96bec-2762">If `typeName` is a nested type, only the name of the outermost containing type is passed to `typeResolver`.</span></span> <span data-ttu-id="96bec-2763">Wenn `typeResolver` diesen Typ zurückgibt, die <xref:System.Type.GetNestedType%2A> Methode rekursiv aufgerufen wird, bis der innerste geschachtelte Typ behoben wurde.</span><span class="sxs-lookup"><span data-stu-id="96bec-2763">When `typeResolver` returns this type, the <xref:System.Type.GetNestedType%2A> method is called recursively until the innermost nested type has been resolved.</span></span>  
  
#### <a name="resolving-generic-types"></a><span data-ttu-id="96bec-2764">Auflösen von generischen Typen</span><span class="sxs-lookup"><span data-stu-id="96bec-2764">Resolving Generic Types</span></span>  
 <span data-ttu-id="96bec-2765">Die <xref:System.Type.GetType%2A> rekursiv aufgerufen, um generische Typen aufzulösen: zuerst, um den generischen Typ selbst zu beheben und dann seiner Typargumente aufgelöst.</span><span class="sxs-lookup"><span data-stu-id="96bec-2765">The <xref:System.Type.GetType%2A> is called recursively to resolve generic types: First to resolve the generic type itself, and then to resolve its type arguments.</span></span> <span data-ttu-id="96bec-2766">Wenn ein Argument vom Typ generisch ist, wird <xref:System.Type.GetType%2A> rekursiv aufgerufen, um seiner Typargumente lösen und so weiter.</span><span class="sxs-lookup"><span data-stu-id="96bec-2766">If a type argument is generic, <xref:System.Type.GetType%2A> is called recursively to resolve its type arguments, and so on.</span></span>  
  
 <span data-ttu-id="96bec-2767">Die Kombination von `assemblyResolver` und `typeResolver` zum Auflösen von allen Ebenen der diese Rekursion in der Lage sein, dass Sie müssen bereitstellen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2767">The combination of `assemblyResolver` and `typeResolver` that you provide must be capable of resolving all levels of this recursion.</span></span> <span data-ttu-id="96bec-2768">Nehmen wir beispielsweise an, die Sie angeben, ein `assemblyResolver` , steuert das Laden von `MyAssembly`.</span><span class="sxs-lookup"><span data-stu-id="96bec-2768">For example, suppose you supply an `assemblyResolver` that controls the loading of `MyAssembly`.</span></span> <span data-ttu-id="96bec-2769">Angenommen, Sie möchten den generischen Typ aufgelöst `Dictionary<string, MyType>` (`Dictionary(Of String, MyType)` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="96bec-2769">Suppose you want to resolve the generic type `Dictionary<string, MyType>` (`Dictionary(Of String, MyType)` in Visual Basic).</span></span> <span data-ttu-id="96bec-2770">Sie können den folgenden Namen für den generischen Typ übergeben:</span><span class="sxs-lookup"><span data-stu-id="96bec-2770">You might pass the following generic type name:</span></span>  
  
```  
"System.Collections.Generic.Dictionary`2[System.String,[MyNamespace.MyType, MyAssembly]]"  
```  
  
 <span data-ttu-id="96bec-2771">Beachten Sie, dass `MyType` ist das Argument nur auf die Assembly qualifizierten Typnamen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2771">Notice that `MyType` is the only assembly-qualified type argument.</span></span> <span data-ttu-id="96bec-2772">Die Namen der <xref:System.Collections.Generic.Dictionary%602> und <xref:System.String> Klassen sind nicht für die Assembly qualifizierten.</span><span class="sxs-lookup"><span data-stu-id="96bec-2772">The names of the <xref:System.Collections.Generic.Dictionary%602> and <xref:System.String> classes are not assembly-qualified.</span></span> <span data-ttu-id="96bec-2773">Ihre `typeResolver` muss entweder eine Assembly können Handle sein oder `null`, da er erhält `null` für <xref:System.Collections.Generic.Dictionary%602> und <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="96bec-2773">Your `typeResolver` must be able handle either an assembly or `null`, because it will receive `null` for <xref:System.Collections.Generic.Dictionary%602> and <xref:System.String>.</span></span> <span data-ttu-id="96bec-2774">Es kann für diesen Fall behandeln, indem Sie eine Überladung aufrufen der <xref:System.Type.GetType%2A> -Methode, die eine Zeichenfolge akzeptiert, da beide mit dem nicht qualifizierten Typnamen in "mscorlib.dll" sind:</span><span class="sxs-lookup"><span data-stu-id="96bec-2774">It can handle that case by calling an overload of the <xref:System.Type.GetType%2A> method that takes a string, because both of the unqualified type names are in Mscorlib.dll:</span></span>  
  
 [!code-csharp[GetTypeOnSteroids#1](~/samples/snippets/csharp/VS_Snippets_CLR/gettypeonsteroids/cs/source.cs#1)]  
  
 <span data-ttu-id="96bec-2775">Die `assemblyResolver` Methode wird für den Wörterbuchtyp und den String-Datentyp nicht aufgerufen, da diese Namen nicht mit assemblyqualifikation sind.</span><span class="sxs-lookup"><span data-stu-id="96bec-2775">The `assemblyResolver` method is not called for the dictionary type and the string type, because those type names are not assembly-qualified.</span></span>  
  
 <span data-ttu-id="96bec-2776">Nehmen wir nun an, die anstelle von `System.String`, ist der erste generische Argumenttyp `YourType`, von `YourAssembly`:</span><span class="sxs-lookup"><span data-stu-id="96bec-2776">Now suppose that instead of `System.String`, the first generic argument type is `YourType`, from `YourAssembly`:</span></span>  
  
```  
"System.Collections.Generic.Dictionary`2[[YourNamespace.YourType, YourAssembly, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null], [MyNamespace.MyType, MyAssembly]]"  
```  
  
 <span data-ttu-id="96bec-2777">Da diese Assembly weder "mscorlib.dll" als auch der aktuell ausgeführten Assembly ist, können Sie nicht auflösen `YourType` ohne einen Namen mit assemblyqualifikation.</span><span class="sxs-lookup"><span data-stu-id="96bec-2777">Because this assembly is neither Mscorlib.dll nor the currently executing assembly, you cannot resolve `YourType` without an assembly-qualified name.</span></span> <span data-ttu-id="96bec-2778">Da Ihre `assemblyResolve` werden rekursiv aufgerufen werden, es muss in diesem Fall können.</span><span class="sxs-lookup"><span data-stu-id="96bec-2778">Because your `assemblyResolve` will be called recursively, it must be able to handle this case.</span></span> <span data-ttu-id="96bec-2779">Anstatt `null` für andere Assemblys als `MyAssembly`, führt es jetzt Laden einer Assembly, die mit dem angegebenen <xref:System.Reflection.AssemblyName> Objekt.</span><span class="sxs-lookup"><span data-stu-id="96bec-2779">Instead of returning `null` for assemblies other than `MyAssembly`, it now performs an assembly load using the supplied <xref:System.Reflection.AssemblyName> object.</span></span>  
  
 [!code-csharp[GetTypeOnSteroids#2](~/samples/snippets/csharp/VS_Snippets_CLR/gettypeonsteroids/cs/source.cs#2)]  
  
 <span data-ttu-id="96bec-2780">Zurück zum [Hinweise zur Verwendung](#usage_notes).</span><span class="sxs-lookup"><span data-stu-id="96bec-2780">Back to [Usage Notes](#usage_notes).</span></span>  
  
#### <a name="resolving-type-names-with-special-characters"></a><span data-ttu-id="96bec-2781">Auflösen von Namen mit Sonderzeichen</span><span class="sxs-lookup"><span data-stu-id="96bec-2781">Resolving Type Names with Special Characters</span></span>  
 <span data-ttu-id="96bec-2782">Bestimmte Zeichen haben eine besondere Bedeutung in der Assembly qualifizierten Namen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2782">Certain characters have special meanings in assembly-qualified names.</span></span> <span data-ttu-id="96bec-2783">Wenn ein einfacher Typname diese Zeichen enthält, führen die Zeichen Analysefehler auf, wenn es sich bei der einfache Namen einer Assembly qualifizierten Namen gehört.</span><span class="sxs-lookup"><span data-stu-id="96bec-2783">If a simple type name contains these characters, the characters cause parsing errors when the simple name is part of an assembly-qualified name.</span></span> <span data-ttu-id="96bec-2784">Um die Analysefehler zu vermeiden, Sie müssen mit Escapezeichen versehen die Sonderzeichen mit einem umgekehrten Schrägstrich, bevor Sie die Assembly qualifizierten Namen zu übergeben, können die <xref:System.Type.GetType%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="96bec-2784">To avoid the parsing errors, you must escape the special characters with a backslash before you can pass the assembly-qualified name to the <xref:System.Type.GetType%2A> method.</span></span> <span data-ttu-id="96bec-2785">Wenn ein Typ mit dem Namen wird z. B. `Strange]Type`, das Escape-Zeichen muss vorab die eckige Klammer wie folgt hinzugefügt werden: `Strange\]Type`.</span><span class="sxs-lookup"><span data-stu-id="96bec-2785">For example, if a type is named `Strange]Type`, the escape character must be added ahead of the square bracket as follows: `Strange\]Type`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-2786">Namen mit solchen Sonderzeichen können nicht in Visual Basic oder c# erstellt werden, aber Sie können mithilfe von Microsoft intermediate Language (MSIL) oder durch Ausgeben von dynamischen Assemblys erstellt werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-2786">Names with such special characters cannot be created in Visual Basic or C#, but can be created by using Microsoft intermediate language (MSIL) or by emitting dynamic assemblies.</span></span>  
  
 <span data-ttu-id="96bec-2787">Die folgende Tabelle zeigt die Sonderzeichen für Typnamen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2787">The following table shows the special characters for type names.</span></span>  
  
|<span data-ttu-id="96bec-2788">Zeichen</span><span class="sxs-lookup"><span data-stu-id="96bec-2788">Character</span></span>|<span data-ttu-id="96bec-2789">Bedeutung</span><span class="sxs-lookup"><span data-stu-id="96bec-2789">Meaning</span></span>|  
|---------------|-------------|  
|<span data-ttu-id="96bec-2790">`,` (Komma)</span><span class="sxs-lookup"><span data-stu-id="96bec-2790">`,` (comma)</span></span>|<span data-ttu-id="96bec-2791">Trennzeichen für die Assembly qualifizierten Namen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2791">Delimiter for assembly-qualified names.</span></span>|  
|<span data-ttu-id="96bec-2792">`[]` (eckige Klammern)</span><span class="sxs-lookup"><span data-stu-id="96bec-2792">`[]` (square brackets)</span></span>|<span data-ttu-id="96bec-2793">Gibt Sie als Suffixpaar einen Arraytyp an; als Trennzeichenpaar einschließt generischen Argument-Listen und die Assembly qualifizierten Namen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2793">As a suffix pair, indicates an array type; as a delimiter pair, encloses generic argument lists and assembly-qualified names.</span></span>|  
|<span data-ttu-id="96bec-2794">`&` (kaufmännisches und-Zeichen)</span><span class="sxs-lookup"><span data-stu-id="96bec-2794">`&` (ampersand)</span></span>|<span data-ttu-id="96bec-2795">Gibt an, dass ein Typ ein Verweistyp ist, als Suffix.</span><span class="sxs-lookup"><span data-stu-id="96bec-2795">As a suffix, indicates that a type is a reference type.</span></span>|  
|<span data-ttu-id="96bec-2796">`*` (Sternchen)</span><span class="sxs-lookup"><span data-stu-id="96bec-2796">`*` (asterisk)</span></span>|<span data-ttu-id="96bec-2797">Gibt an, dass ein Typ ein Zeigertyp ist, als Suffix.</span><span class="sxs-lookup"><span data-stu-id="96bec-2797">As a suffix, indicates that a type is a pointer type.</span></span>|  
|<span data-ttu-id="96bec-2798">`+` (Plus)</span><span class="sxs-lookup"><span data-stu-id="96bec-2798">`+` (plus)</span></span>|<span data-ttu-id="96bec-2799">Trennzeichen für geschachtelte Typen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2799">Delimiter for nested types.</span></span>|  
|<span data-ttu-id="96bec-2800">`\` (umgekehrter Schrägstrich)</span><span class="sxs-lookup"><span data-stu-id="96bec-2800">`\` (backslash)</span></span>|<span data-ttu-id="96bec-2801">Escape-Zeichen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2801">Escape character.</span></span>|  
  
 <span data-ttu-id="96bec-2802">Eigenschaften, z. B. <xref:System.Type.AssemblyQualifiedName%2A> Rückgabe Zeichenfolgen korrekt in Escapezeichen eingeschlossen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2802">Properties such as <xref:System.Type.AssemblyQualifiedName%2A> return correctly escaped strings.</span></span> <span data-ttu-id="96bec-2803">Müssen Sie ordnungsgemäß mit Escapezeichen versehene Zeichenfolgen zum Übergeben der <xref:System.Type.GetType%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="96bec-2803">You must pass correctly escaped strings to the <xref:System.Type.GetType%2A> method.</span></span> <span data-ttu-id="96bec-2804">Im Gegenzug die <xref:System.Type.GetType%2A> Methode übergibt ordnungsgemäß mit Escapezeichen versehene Namen `typeResolver` und die Standardmethoden für Typ Auflösung.</span><span class="sxs-lookup"><span data-stu-id="96bec-2804">In turn, the <xref:System.Type.GetType%2A> method passes correctly escaped names to `typeResolver` and to the default type resolution methods.</span></span> <span data-ttu-id="96bec-2805">Wenn Sie einen Namen, einem Namen ohne Escapezeichen in Vergleichen `typeResolver`, müssen Sie die Escape-Zeichen entfernen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2805">If you need to compare a name to an unescaped name in `typeResolver`, you must remove the escape characters.</span></span>  
  
 <span data-ttu-id="96bec-2806">Zurück zum [Hinweise zur Verwendung](#usage_notes).</span><span class="sxs-lookup"><span data-stu-id="96bec-2806">Back to [Usage Notes](#usage_notes).</span></span>  
  
<a name="mixed_name_resolution"></a>   
## <a name="mixed-name-resolution"></a><span data-ttu-id="96bec-2807">Gemischte namensauflösung</span><span class="sxs-lookup"><span data-stu-id="96bec-2807">Mixed Name Resolution</span></span>  
 <span data-ttu-id="96bec-2808">Die folgende Tabelle enthält die Interaktionen zwischen `assemblyResolver`, `typeResolver`, und die standardnamensauflösung für alle Kombinationen der Typname und Assemblyname in `typeName`:</span><span class="sxs-lookup"><span data-stu-id="96bec-2808">The following table summarizes the interactions between `assemblyResolver`, `typeResolver`, and default name resolution, for all combinations of type name and assembly name in `typeName`:</span></span>  
  
|<span data-ttu-id="96bec-2809">Inhalt des Typnamens</span><span class="sxs-lookup"><span data-stu-id="96bec-2809">Contents of type name</span></span>|<span data-ttu-id="96bec-2810">Assembly-Resolver-Methode</span><span class="sxs-lookup"><span data-stu-id="96bec-2810">Assembly resolver method</span></span>|<span data-ttu-id="96bec-2811">Typ-Resolver-Methode</span><span class="sxs-lookup"><span data-stu-id="96bec-2811">Type resolver method</span></span>|<span data-ttu-id="96bec-2812">Ergebnis</span><span class="sxs-lookup"><span data-stu-id="96bec-2812">Result</span></span>|  
|---------------------------|------------------------------|--------------------------|------------|  
|<span data-ttu-id="96bec-2813">Typ ","-assembly</span><span class="sxs-lookup"><span data-stu-id="96bec-2813">type, assembly</span></span>|<span data-ttu-id="96bec-2814">NULL</span><span class="sxs-lookup"><span data-stu-id="96bec-2814">null</span></span>|<span data-ttu-id="96bec-2815">NULL</span><span class="sxs-lookup"><span data-stu-id="96bec-2815">null</span></span>|<span data-ttu-id="96bec-2816">Entspricht dem Aufrufen der <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> -methodenüberladung.</span><span class="sxs-lookup"><span data-stu-id="96bec-2816">Equivalent to calling the <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> method overload.</span></span>|  
|<span data-ttu-id="96bec-2817">Typ ","-assembly</span><span class="sxs-lookup"><span data-stu-id="96bec-2817">type, assembly</span></span>|<span data-ttu-id="96bec-2818">bereitgestellt</span><span class="sxs-lookup"><span data-stu-id="96bec-2818">provided</span></span>|<span data-ttu-id="96bec-2819">NULL</span><span class="sxs-lookup"><span data-stu-id="96bec-2819">null</span></span>|<span data-ttu-id="96bec-2820">`assemblyResolver` Gibt die Assembly zurück oder `null` Falls die Assembly aufgelöst werden kann.</span><span class="sxs-lookup"><span data-stu-id="96bec-2820">`assemblyResolver` returns the assembly or returns `null` if it cannot resolve the assembly.</span></span> <span data-ttu-id="96bec-2821">Wenn die Assembly aufgelöst wird, wird die <xref:System.Reflection.Assembly.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> Überladung wird verwendet, um den Typ aus der Assembly zu laden; andernfalls ist es nicht versucht, den Typ aufzulösen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2821">If the assembly is resolved, the <xref:System.Reflection.Assembly.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> method overload is used to load the type from the assembly; otherwise, there is no attempt to resolve the type.</span></span>|  
|<span data-ttu-id="96bec-2822">Typ ","-assembly</span><span class="sxs-lookup"><span data-stu-id="96bec-2822">type, assembly</span></span>|<span data-ttu-id="96bec-2823">NULL</span><span class="sxs-lookup"><span data-stu-id="96bec-2823">null</span></span>|<span data-ttu-id="96bec-2824">bereitgestellt</span><span class="sxs-lookup"><span data-stu-id="96bec-2824">provided</span></span>|<span data-ttu-id="96bec-2825">Konvertieren den Namen der Assembly entspricht einer <xref:System.Reflection.AssemblyName> -Objekt ab, und rufen die <xref:System.Reflection.Assembly.Load%28System.Reflection.AssemblyName%29?displayProperty=nameWithType> -methodenüberladung, um die Assembly zu erhalten.</span><span class="sxs-lookup"><span data-stu-id="96bec-2825">Equivalent to converting the assembly name to an <xref:System.Reflection.AssemblyName> object and calling the <xref:System.Reflection.Assembly.Load%28System.Reflection.AssemblyName%29?displayProperty=nameWithType> method overload to get the assembly.</span></span> <span data-ttu-id="96bec-2826">Wenn die Assembly aufgelöst wird, erfolgt eine Übergabe an `typeResolver`ist, andernfalls `typeResolver` wird nicht aufgerufen, und es gibt keinen weiteren Versuch, den Typ aufzulösen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2826">If the assembly is resolved, it is passed to `typeResolver`; otherwise, `typeResolver` is not called and there is no further attempt to resolve the type.</span></span>|  
|<span data-ttu-id="96bec-2827">Typ ","-assembly</span><span class="sxs-lookup"><span data-stu-id="96bec-2827">type, assembly</span></span>|<span data-ttu-id="96bec-2828">bereitgestellt</span><span class="sxs-lookup"><span data-stu-id="96bec-2828">provided</span></span>|<span data-ttu-id="96bec-2829">bereitgestellt</span><span class="sxs-lookup"><span data-stu-id="96bec-2829">provided</span></span>|<span data-ttu-id="96bec-2830">`assemblyResolver` Gibt die Assembly zurück oder `null` Falls die Assembly aufgelöst werden kann.</span><span class="sxs-lookup"><span data-stu-id="96bec-2830">`assemblyResolver` returns the assembly or returns `null` if it cannot resolve the assembly.</span></span> <span data-ttu-id="96bec-2831">Wenn die Assembly aufgelöst wird, erfolgt eine Übergabe an `typeResolver`ist, andernfalls `typeResolver` wird nicht aufgerufen, und es gibt keinen weiteren Versuch, den Typ aufzulösen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2831">If the assembly is resolved, it is passed to `typeResolver`; otherwise, `typeResolver` is not called and there is no further attempt to resolve the type.</span></span>|  
|<span data-ttu-id="96bec-2832">Typ</span><span class="sxs-lookup"><span data-stu-id="96bec-2832">type</span></span>|<span data-ttu-id="96bec-2833">NULL, der bereitgestellt wird</span><span class="sxs-lookup"><span data-stu-id="96bec-2833">null, provided</span></span>|<span data-ttu-id="96bec-2834">NULL</span><span class="sxs-lookup"><span data-stu-id="96bec-2834">null</span></span>|<span data-ttu-id="96bec-2835">Entspricht dem Aufrufen der <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> -methodenüberladung.</span><span class="sxs-lookup"><span data-stu-id="96bec-2835">Equivalent to calling the <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> method overload.</span></span> <span data-ttu-id="96bec-2836">Da der Name der Assembly nicht angegeben ist, werden nur "mscorlib.dll" und die derzeit ausgeführte Assembly durchsucht.</span><span class="sxs-lookup"><span data-stu-id="96bec-2836">Because the assembly name is not provided, only Mscorlib.dll and the currently executing assembly are searched.</span></span> <span data-ttu-id="96bec-2837">Wenn `assemblyResolver` bereitgestellt wird, werden diese ignoriert wird.</span><span class="sxs-lookup"><span data-stu-id="96bec-2837">If `assemblyResolver` is provided, it is ignored.</span></span>|  
|<span data-ttu-id="96bec-2838">Typ</span><span class="sxs-lookup"><span data-stu-id="96bec-2838">type</span></span>|<span data-ttu-id="96bec-2839">NULL, der bereitgestellt wird</span><span class="sxs-lookup"><span data-stu-id="96bec-2839">null, provided</span></span>|<span data-ttu-id="96bec-2840">bereitgestellt</span><span class="sxs-lookup"><span data-stu-id="96bec-2840">provided</span></span>|<span data-ttu-id="96bec-2841">`typeResolver` wird aufgerufen, und `null` für die Assembly übergeben wird.</span><span class="sxs-lookup"><span data-stu-id="96bec-2841">`typeResolver` is called, and `null` is passed for the assembly.</span></span> <span data-ttu-id="96bec-2842">`typeResolver` bieten einen Typ von einer Assembly aus, einschließlich der Assemblys, die sie für den Zweck lädt ab.</span><span class="sxs-lookup"><span data-stu-id="96bec-2842">`typeResolver` can provide a type from any assembly, including assemblies it loads for the purpose.</span></span> <span data-ttu-id="96bec-2843">Wenn `assemblyResolver` bereitgestellt wird, werden diese ignoriert wird.</span><span class="sxs-lookup"><span data-stu-id="96bec-2843">If `assemblyResolver` is provided, it is ignored.</span></span>|  
|<span data-ttu-id="96bec-2844">Assembly</span><span class="sxs-lookup"><span data-stu-id="96bec-2844">assembly</span></span>|<span data-ttu-id="96bec-2845">NULL, der bereitgestellt wird</span><span class="sxs-lookup"><span data-stu-id="96bec-2845">null, provided</span></span>|<span data-ttu-id="96bec-2846">NULL, der bereitgestellt wird</span><span class="sxs-lookup"><span data-stu-id="96bec-2846">null, provided</span></span>|<span data-ttu-id="96bec-2847">Ein <xref:System.IO.FileLoadException> ausgelöst wird, da der Name der Assembly als handele es sich um eine Assembly qualifizierter Typname analysiert wird.</span><span class="sxs-lookup"><span data-stu-id="96bec-2847">A <xref:System.IO.FileLoadException> is thrown, because the assembly name is parsed as if it were an assembly-qualified type name.</span></span> <span data-ttu-id="96bec-2848">Dies führt zu einem ungültigen Assemblynamen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2848">This results in an invalid assembly name.</span></span>|  
  
 <span data-ttu-id="96bec-2849">An: [Hinweise zur Verwendung](#usage_notes), [Auflösen von Assemblys](#resolving_assemblies), [Auflösen von Typen](#resolving_types).</span><span class="sxs-lookup"><span data-stu-id="96bec-2849">Back to: [Usage Notes](#usage_notes), [Resolving Assemblies](#resolving_assemblies), [Resolving Types](#resolving_types).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96bec-2850">
            <paramref name="typeName" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2850">
              <paramref name="typeName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="96bec-2851">A class initializer is invoked and throws an exception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2851">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="96bec-2852">
            <paramref name="throwOnError" /> is <see langword="true" /> and the type is not found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2852">
              <paramref name="throwOnError" /> is <see langword="true" /> and the type is not found.</span>
          </span>
          <span data-ttu-id="96bec-2853">-or-  <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.  -or-  <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2853">-or-  <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.  -or-  <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.</span>
          </span>
          <span data-ttu-id="96bec-2854">-or-  <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2854">-or-  <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.</span>
          </span>
          <span data-ttu-id="96bec-2855">-or-  <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2855">-or-  <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="96bec-2856">An error occurs when <paramref name="typeName" /> is parsed into a type name and an assembly name (for example, when the simple type name includes an unescaped special character).</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2856">An error occurs when <paramref name="typeName" /> is parsed into a type name and an assembly name (for example, when the simple type name includes an unescaped special character).</span>
          </span>
          <span data-ttu-id="96bec-2857">-or-  <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax (for example, "MyType[,\*,]").</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2857">-or-  <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax (for example, "MyType[,\*,]").</span>
          </span>
          <span data-ttu-id="96bec-2858">-or-  <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2858">-or-  <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span>
          </span>
          <span data-ttu-id="96bec-2859">-or-  <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2859">-or-  <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span>
          </span>
          <span data-ttu-id="96bec-2860">-or-  <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2860">-or-  <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="96bec-2861">
            <paramref name="throwOnError" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2861">
              <paramref name="throwOnError" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="96bec-2862">The assembly or one of its dependencies was found, but could not be loaded.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2862">The assembly or one of its dependencies was found, but could not be loaded.</span>
          </span>
          <span data-ttu-id="96bec-2863">-or-  <paramref name="typeName" /> contains an invalid assembly name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2863">-or-  <paramref name="typeName" /> contains an invalid assembly name.</span>
          </span>
          <span data-ttu-id="96bec-2864">-or-  <paramref name="typeName" /> is a valid assembly name without a type name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2864">-or-  <paramref name="typeName" /> is a valid assembly name without a type name.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="96bec-2865">The assembly or one of its dependencies is not valid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2865">The assembly or one of its dependencies is not valid.</span>
          </span>
          <span data-ttu-id="96bec-2866">-or-  The assembly was compiled with a later version of the common language runtime than the version that is currently loaded.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2866">-or-  The assembly was compiled with a later version of the common language runtime than the version that is currently loaded.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypeArray">
      <MemberSignature Language="C#" Value="public static Type[] GetTypeArray (object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type[] GetTypeArray(object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeArray(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeArray (args As Object()) As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;Type ^&gt; ^ GetTypeArray(cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="static member GetTypeArray : obj[] -&gt; Type[]" Usage="System.Type.GetTypeArray args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="args">
          <span data-ttu-id="96bec-2867">An array of objects whose types to determine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2867">An array of objects whose types to determine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-2868">Gets the types of the objects in the specified array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2868">Gets the types of the objects in the specified array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-2869">An array of <see cref="T:System.Type" /> objects representing the types of the corresponding elements in <paramref name="args" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2869">An array of <see cref="T:System.Type" /> objects representing the types of the corresponding elements in <paramref name="args" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="96bec-2870">Im folgenden Codebeispiel wird veranschaulicht, wie Sie mit der <xref:System.Type.GetTypeArray%2A> Methode, um die Liste der Typen der Elemente eines Arrays.</span><span class="sxs-lookup"><span data-stu-id="96bec-2870">The following code example demonstrates how to use the <xref:System.Type.GetTypeArray%2A> method to list the types of the elements of an array.</span></span>  
  
 [!code-cpp[Type_GetTypeCode#3](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeCode/CPP/type_gettypecode.cpp#3)]
 [!code-csharp[Type_GetTypeCode#3](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeCode/CS/type_gettypecode.cs#3)]
 [!code-vb[Type_GetTypeCode#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeCode/VB/type_gettypecode.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96bec-2871">
            <paramref name="args" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2871">
              <paramref name="args" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="96bec-2872">-or-  One or more of the elements in <paramref name="args" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2872">-or-  One or more of the elements in <paramref name="args" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="96bec-2873">The class initializers are invoked and at least one throws an exception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2873">The class initializers are invoked and at least one throws an exception.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public static TypeCode GetTypeCode (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TypeCode GetTypeCode(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeCode(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TypeCode GetTypeCode(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member GetTypeCode : Type -&gt; TypeCode" Usage="System.Type.GetTypeCode type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="96bec-2874">The type whose underlying type code to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2874">The type whose underlying type code to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-2875">Gets the underlying type code of the specified <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2875">Gets the underlying type code of the specified <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-2876">The code of the underlying type, or <see cref="F:System.TypeCode.Empty" /> if <paramref name="type" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2876">The code of the underlying type, or <see cref="F:System.TypeCode.Empty" /> if <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-2877">Beim Erben von <xref:System.Type>, Sie können das Verhalten dieser Methode ändern, durch Überschreiben der <xref:System.Type.GetTypeCodeImpl%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="96bec-2877">When you inherit from <xref:System.Type>, you can change the behavior of this method by overriding the <xref:System.Type.GetTypeCodeImpl%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-2878">Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.TypeCode> -Enumeration können verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-2878">The following code example demonstrates how the <xref:System.TypeCode> enumeration can be used.</span></span> <span data-ttu-id="96bec-2879">In einen Entscheidungsblock in die `WriteObjectInfo` -Methode, die <xref:System.TypeCode> von einer <xref:System.Object> Parameter überprüft und eine entsprechende Meldung in die Konsole geschrieben wird.</span><span class="sxs-lookup"><span data-stu-id="96bec-2879">In a decision block inside the `WriteObjectInfo` method, the <xref:System.TypeCode> of an <xref:System.Object> parameter is examined, and an appropriate message is written to the console.</span></span>  
  
 [!code-cpp[System.TypeCode#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TypeCode/CPP/iconvertible.cpp#2)]
 [!code-csharp[System.TypeCode#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TypeCode/CS/iconvertible.cs#2)]
 [!code-vb[System.TypeCode#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TypeCode/VB/iconvertible.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TypeCode" />
        <altmember cref="M:System.Type.GetTypeCodeImpl" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeCodeImpl">
      <MemberSignature Language="C#" Value="protected virtual TypeCode GetTypeCodeImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.TypeCode GetTypeCodeImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeCodeImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetTypeCodeImpl () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual TypeCode GetTypeCodeImpl();" />
      <MemberSignature Language="F#" Value="abstract member GetTypeCodeImpl : unit -&gt; TypeCode&#xA;override this.GetTypeCodeImpl : unit -&gt; TypeCode" Usage="type.GetTypeCodeImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="96bec-2880">Returns the underlying type code of this <see cref="T:System.Type" /> instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2880">Returns the underlying type code of this <see cref="T:System.Type" /> instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-2881">The type code of the underlying type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2881">The type code of the underlying type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-2882">Diese Methode stellt die Implementierung für die `static` (in c#) oder `Shared` (in Visual Basic) <xref:System.Type.GetTypeCode%28System.Type%29> Methode.</span><span class="sxs-lookup"><span data-stu-id="96bec-2882">This method provides the implementation for the `static` (in C#) or `Shared` (in Visual Basic) <xref:System.Type.GetTypeCode%28System.Type%29> method.</span></span> <span data-ttu-id="96bec-2883">Beim Erben von <xref:System.Type>, Sie können angeben, überschreiben diese Methode, um eine eigene Implementierung bereitstellen <xref:System.Type.GetTypeCode%2A>.</span><span class="sxs-lookup"><span data-stu-id="96bec-2883">When you inherit from <xref:System.Type>, you can override this method to provide your own implementation of <xref:System.Type.GetTypeCode%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TypeCode" />
        <altmember cref="M:System.Type.GetTypeCode(System.Type)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetTypeFromCLSID">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-2884">Gets the type associated with the specified class identifier (CLSID).</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2884">Gets the type associated with the specified class identifier (CLSID).</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetTypeFromCLSID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromCLSID (Guid clsid);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromCLSID(valuetype System.Guid clsid) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromCLSID(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromCLSID (clsid As Guid) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromCLSID(Guid clsid);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromCLSID : Guid -&gt; Type" Usage="System.Type.GetTypeFromCLSID clsid" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clsid" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="clsid">
          <span data-ttu-id="96bec-2885">The CLSID of the type to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2885">The CLSID of the type to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-2886">Gets the type associated with the specified class identifier (CLSID).</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2886">Gets the type associated with the specified class identifier (CLSID).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-2887">
            <see langword="System.__ComObject" /> regardless of whether the CLSID is valid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2887">
              <see langword="System.__ComObject" /> regardless of whether the CLSID is valid.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-2888">Die <xref:System.Type.GetTypeFromCLSID%2A> Methode unterstützt spät gebundener Zugriff auf nicht verwaltete COM-Objekte aus .NET Framework-apps, wenn Sie wissen, dass der Klassenbezeichner (CLSID) des COM-Objekts.</span><span class="sxs-lookup"><span data-stu-id="96bec-2888">The <xref:System.Type.GetTypeFromCLSID%2A> method supports late-bound access to unmanaged COM objects from .NET Framework apps when you know the COM object's class identifier (CLSID).</span></span>  <span data-ttu-id="96bec-2889">Die Klassen-ID für COM-Klassen ist in den Schlüssel HKEY_CLASSES_ROOT\CLSID der Registrierung definiert.</span><span class="sxs-lookup"><span data-stu-id="96bec-2889">The class identifier for COM classes is defined in the HKEY_CLASSES_ROOT\CLSID key of the registry.</span></span> <span data-ttu-id="96bec-2890">Sie können den Wert der Abrufen der <xref:System.Type.IsCOMObject%2A> Eigenschaft, um zu bestimmen, ob der von dieser Methode zurückgegebene Typ ein COM-Objekt.</span><span class="sxs-lookup"><span data-stu-id="96bec-2890">You can retrieve the value of the <xref:System.Type.IsCOMObject%2A> property to determine whether the type returned by this method is a COM object.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="96bec-2891">Rufen Sie die <xref:System.Type.GetTypeFromProgID%2A> -Methode für den Zugriff mit spätem Binden für COM-Objekte, deren Programmbezeichner (ProgID), der für die Sie kennen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2891">You can call the <xref:System.Type.GetTypeFromProgID%2A> method for late-bound access to COM objects whose programmatic identifier (ProgID) you know.</span></span>  
  
 <span data-ttu-id="96bec-2892">Instanziieren ein nicht verwaltetes COM-Objekt aus der CLSID ist ein zweistufiger Prozess:</span><span class="sxs-lookup"><span data-stu-id="96bec-2892">Instantiating an unmanaged COM object from its CLSID is a two-step process:</span></span>  
  
1.  <span data-ttu-id="96bec-2893">Abrufen einer <xref:System.Type> Objekt, das darstellt der`__ComObject` , entspricht die CLSID durch Aufrufen der <xref:System.Type.GetTypeFromCLSID%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="96bec-2893">Get a <xref:System.Type> object that represents the`__ComObject` that corresponds to the CLSID by calling the <xref:System.Type.GetTypeFromCLSID%2A> method.</span></span>  
  
2.  <span data-ttu-id="96bec-2894">Rufen Sie die <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> Methode, um das COM-Objekt zu instanziieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-2894">Call the <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> method to instantiate the COM object.</span></span>  
  
 <span data-ttu-id="96bec-2895">Siehe das Beispiel zur Veranschaulichung.</span><span class="sxs-lookup"><span data-stu-id="96bec-2895">See the example for an illustration.</span></span>  
  
 <span data-ttu-id="96bec-2896">Die <xref:System.Type.GetTypeFromCLSID%28System.Guid%29> Überladung ignoriert alle Ausnahmen, die auftreten können, bei der Instanziierung einer <xref:System.Type> Objekt auf Grundlage der `clsid` Argument.</span><span class="sxs-lookup"><span data-stu-id="96bec-2896">The <xref:System.Type.GetTypeFromCLSID%28System.Guid%29> overload ignores any exception that may occur when instantiating a <xref:System.Type> object based on the `clsid` argument.</span></span> <span data-ttu-id="96bec-2897">Beachten Sie, die keine Ausnahme ausgelöst wird, wenn `clsid` wurde in der Registrierung nicht gefunden.</span><span class="sxs-lookup"><span data-stu-id="96bec-2897">Note that no exception is thrown if `clsid` is not found in the registry.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-2898">Im folgenden Beispiel wird die CLSID des Microsoft Word [Anwendungsobjekt](http://msdn.microsoft.com/library/office/ff838565.aspx) einen COM-Typ abrufen, die die Microsoft Word-Anwendung darstellt.</span><span class="sxs-lookup"><span data-stu-id="96bec-2898">The following example uses the CLSID of the Microsoft Word [Application object](http://msdn.microsoft.com/library/office/ff838565.aspx) to retrieve a COM type that represents the Microsoft Word application.</span></span> <span data-ttu-id="96bec-2899">Dann instanziiert den Typ durch Aufrufen der <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> -Methode und schließt ihn durch Aufrufen der [Application.Quit](http://msdn.microsoft.com/library/office/ff844895.aspx) Methode.</span><span class="sxs-lookup"><span data-stu-id="96bec-2899">It then instantiates the type by calling the <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> method, and closes it by calling the [Application.Quit](http://msdn.microsoft.com/library/office/ff844895.aspx) method.</span></span>  
  
 [!code-csharp[System.Type.GetTypeFromCLSID#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid1.cs#1)]
 [!code-vb[System.Type.GetTypeFromCLSID#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <span data-ttu-id="96bec-2900">
            <para>Diese Methode ist für die Verwendung vorgesehen, bei der Arbeit mit COM-Objekte nicht mit .NET Framework-Objekten. Alle verwalteten Objekte, einschließlich derjenigen, die für COM sichtbar sind (d. h. ihre <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> -Attribut ist <see langword="true" />) haben Sie eine GUID, die von zurückgegeben wird das <see cref="P:System.Type.GUID" /> Eigenschaft. Obwohl die Methode zurückgibt, eine <see cref="T:System.Type" /> -Objekt, auf die GUID entspricht, für .NET Framework-Objekten, Sie können nicht verwenden, die <see cref="T:System.Type" /> Objekt zum Erstellen einer Typinstanz durch Aufrufen der <see cref="M:System.Activator.CreateInstance(System.Type)" /> Methode, wie im folgenden Beispiel gezeigt.  [! code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [! code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]  Stattdessen die <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> sollte nur verwendet werden, zum Abrufen der GUID der nicht verwaltete COM-Objekte und die resultierende <see cref="T:System.Type" /> -Objekt, das an die <see cref="M:System.Activator.CreateInstance(System.Type)" /> Methode muss ein nicht verwaltete COM-Objekt darstellen.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2900">
              <para>This method is intended for use when working with COM objects, not with .NET Framework objects. All managed objects, including those that are visible to COM (that is, their <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> attribute is <see langword="true" />) have a GUID that is returned by the <see cref="P:System.Type.GUID" /> property. Although the method returns a <see cref="T:System.Type" /> object that corresponds to the GUID for .NET Framework objects, you can't use that <see cref="T:System.Type" /> object to create a type instance by calling the  <see cref="M:System.Activator.CreateInstance(System.Type)" /> method, as the following example shows.  [!code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [!code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]  Instead, the <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> should only be used to retrieve the GUID of an unmanaged COM object, and the resulting <see cref="T:System.Type" /> object that is passed to the <see cref="M:System.Activator.CreateInstance(System.Type)" /> method must represent an unmanaged COM object.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromCLSID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromCLSID (Guid clsid, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromCLSID(valuetype System.Guid clsid, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromCLSID(System.Guid,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromCLSID (clsid As Guid, throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromCLSID(Guid clsid, bool throwOnError);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromCLSID : Guid * bool -&gt; Type" Usage="System.Type.GetTypeFromCLSID (clsid, throwOnError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clsid" Type="System.Guid" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="clsid">
          <span data-ttu-id="96bec-2901">The CLSID of the type to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2901">The CLSID of the type to get.</span>
          </span>
        </param>
        <param name="throwOnError">
          <span data-ttu-id="96bec-2902">
            <see langword="true" /> to throw any exception that occurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2902">
              <see langword="true" /> to throw any exception that occurs.</span>
          </span>
          <span data-ttu-id="96bec-2903">-or-  <see langword="false" /> to ignore any exception that occurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2903">-or-  <see langword="false" /> to ignore any exception that occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-2904">Gets the type associated with the specified class identifier (CLSID), specifying whether to throw an exception if an error occurs while loading the type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2904">Gets the type associated with the specified class identifier (CLSID), specifying whether to throw an exception if an error occurs while loading the type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-2905">
            <see langword="System.__ComObject" /> regardless of whether the CLSID is valid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2905">
              <see langword="System.__ComObject" /> regardless of whether the CLSID is valid.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-2906">Die <xref:System.Type.GetTypeFromCLSID%2A> Methode unterstützt spät gebundener Zugriff auf nicht verwaltete COM-Objekte aus .NET Framework-apps, wenn Sie wissen, dass der Klassenbezeichner (CLSID) des COM-Objekts.</span><span class="sxs-lookup"><span data-stu-id="96bec-2906">The <xref:System.Type.GetTypeFromCLSID%2A> method supports late-bound access to unmanaged COM objects from .NET Framework apps when you know the COM object's class identifier (CLSID).</span></span>  <span data-ttu-id="96bec-2907">Die Klassen-ID für COM-Klassen ist in den Schlüssel HKEY_CLASSES_ROOT\CLSID der Registrierung definiert.</span><span class="sxs-lookup"><span data-stu-id="96bec-2907">The class identifier for COM classes is defined in the HKEY_CLASSES_ROOT\CLSID key of the registry.</span></span> <span data-ttu-id="96bec-2908">Sie können den Wert der Abrufen der <xref:System.Type.IsCOMObject%2A> Eigenschaft, um zu bestimmen, ob der von dieser Methode zurückgegebene Typ ein COM-Objekt.</span><span class="sxs-lookup"><span data-stu-id="96bec-2908">You can retrieve the value of the <xref:System.Type.IsCOMObject%2A> property to determine whether the type returned by this method is a COM object.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="96bec-2909">Rufen Sie die <xref:System.Type.GetTypeFromProgID%2A> -Methode für den Zugriff mit spätem Binden für COM-Objekte, deren Programmbezeichner (ProgID), der für die Sie kennen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2909">You can call the <xref:System.Type.GetTypeFromProgID%2A> method for late-bound access to COM objects whose programmatic identifier (ProgID) you know.</span></span>  
  
 <span data-ttu-id="96bec-2910">Instanziieren ein nicht verwaltetes COM-Objekt aus der CLSID ist ein zweistufiger Prozess:</span><span class="sxs-lookup"><span data-stu-id="96bec-2910">Instantiating an unmanaged COM object from its CLSID is a two-step process:</span></span>  
  
1.  <span data-ttu-id="96bec-2911">Abrufen einer <xref:System.Type> Objekt, das darstellt der `__ComObject` , entspricht die CLSID durch Aufrufen der <xref:System.Type.GetTypeFromCLSID%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="96bec-2911">Get a <xref:System.Type> object that represents the `__ComObject` that corresponds to the CLSID by calling the <xref:System.Type.GetTypeFromCLSID%2A> method.</span></span>  
  
2.  <span data-ttu-id="96bec-2912">Rufen Sie die <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> Methode, um das COM-Objekt zu instanziieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-2912">Call the <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> method to instantiate the COM object.</span></span>  
  
 <span data-ttu-id="96bec-2913">Siehe das Beispiel zur Veranschaulichung.</span><span class="sxs-lookup"><span data-stu-id="96bec-2913">See the example for an illustration.</span></span>  
  
 <span data-ttu-id="96bec-2914">Ausnahmen, z. B. <xref:System.OutOfMemoryException> wird ausgelöst, wenn die Angabe `true` für `throwOnError`, jedoch wird nicht für nicht registrierte CLSIDs fehlerhaft sein.</span><span class="sxs-lookup"><span data-stu-id="96bec-2914">Exceptions such as <xref:System.OutOfMemoryException> will be thrown when specifying `true` for `throwOnError`, but it will not fail for unregistered CLSIDs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-2915">Im folgenden Beispiel wird die CLSID des Microsoft Word [Anwendungsobjekt](http://msdn.microsoft.com/library/office/ff838565.aspx) einen COM-Typ abrufen, die die Microsoft Word-Anwendung darstellt.</span><span class="sxs-lookup"><span data-stu-id="96bec-2915">The following example uses the CLSID of the Microsoft Word [Application object](http://msdn.microsoft.com/library/office/ff838565.aspx) to retrieve a COM type that represents the Microsoft Word application.</span></span> <span data-ttu-id="96bec-2916">Dann instanziiert den Typ durch Aufrufen der <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> -Methode und schließt ihn durch Aufrufen der [Application.Quit](http://msdn.microsoft.com/library/office/ff844895.aspx) Methode.</span><span class="sxs-lookup"><span data-stu-id="96bec-2916">It then instantiates the type by calling the <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> method, and closes it by calling the [Application.Quit](http://msdn.microsoft.com/library/office/ff844895.aspx) method.</span></span> <span data-ttu-id="96bec-2917">Wenn beim Laden des Typs ein Fehler auftritt, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="96bec-2917">An exception is thrown if an error occurs while loading the type.</span></span>  
  
 [!code-csharp[System.Type.GetTypeFromCLSID#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid_ex2.cs#2)]
 [!code-vb[System.Type.GetTypeFromCLSID#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid_ex2.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <span data-ttu-id="96bec-2918">
            <para>Diese Methode ist für die Verwendung vorgesehen, bei der Arbeit mit COM-Objekte nicht mit .NET Framework-Objekten. Alle verwalteten Objekte, einschließlich derjenigen, die für COM sichtbar sind (d. h. ihre <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> -Attribut ist <see langword="true" />) haben Sie eine GUID, die von zurückgegeben wird das <see cref="P:System.Type.GUID" /> Eigenschaft. Obwohl die Methode zurückgibt, eine <see cref="T:System.Type" /> -Objekt, auf die GUID entspricht, für .NET Framework-Objekten, Sie können nicht verwenden, die <see cref="T:System.Type" /> Objekt zum Erstellen einer Typinstanz durch Aufrufen der <see cref="M:System.Activator.CreateInstance(System.Type)" /> Methode, wie im folgenden Beispiel gezeigt.  [! code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [! code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]  Stattdessen die <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> sollte nur verwendet werden, zum Abrufen der GUID der nicht verwaltete COM-Objekte und die resultierende <see cref="T:System.Type" /> -Objekt, das an die <see cref="M:System.Activator.CreateInstance(System.Type)" /> Methode muss ein nicht verwaltete COM-Objekt darstellen.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2918">
              <para>This method is intended for use when working with COM objects, not with .NET Framework objects. All managed objects, including those that are visible to COM (that is, their <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> attribute is <see langword="true" />) have a GUID that is returned by the <see cref="P:System.Type.GUID" /> property. Although the method returns a <see cref="T:System.Type" /> object that corresponds to the GUID for .NET Framework objects, you can't use that <see cref="T:System.Type" /> object to create a type instance by calling the  <see cref="M:System.Activator.CreateInstance(System.Type)" /> method, as the following example shows.  [!code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [!code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]  Instead, the <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> should only be used to retrieve the GUID of an unmanaged COM object, and the resulting <see cref="T:System.Type" /> object that is passed to the <see cref="M:System.Activator.CreateInstance(System.Type)" /> method must represent an unmanaged COM object.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromCLSID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromCLSID (Guid clsid, string server);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromCLSID(valuetype System.Guid clsid, string server) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromCLSID(System.Guid,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromCLSID (clsid As Guid, server As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromCLSID(Guid clsid, System::String ^ server);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromCLSID : Guid * string -&gt; Type" Usage="System.Type.GetTypeFromCLSID (clsid, server)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clsid" Type="System.Guid" />
        <Parameter Name="server" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="clsid">
          <span data-ttu-id="96bec-2919">The CLSID of the type to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2919">The CLSID of the type to get.</span>
          </span>
        </param>
        <param name="server">
          <span data-ttu-id="96bec-2920">The server from which to load the type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2920">The server from which to load the type.</span>
          </span>
          <span data-ttu-id="96bec-2921">If the server name is <see langword="null" />, this method automatically reverts to the local machine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2921">If the server name is <see langword="null" />, this method automatically reverts to the local machine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-2922">Gets the type associated with the specified class identifier (CLSID) from the specified server.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2922">Gets the type associated with the specified class identifier (CLSID) from the specified server.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-2923">
            <see langword="System.__ComObject" /> regardless of whether the CLSID is valid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2923">
              <see langword="System.__ComObject" /> regardless of whether the CLSID is valid.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-2924">Die <xref:System.Type.GetTypeFromCLSID%2A> Methode unterstützt spät gebundener Zugriff auf nicht verwaltete COM-Objekte aus .NET Framework-apps, wenn Sie wissen, dass der Klassenbezeichner (CLSID) des COM-Objekts.</span><span class="sxs-lookup"><span data-stu-id="96bec-2924">The <xref:System.Type.GetTypeFromCLSID%2A> method supports late-bound access to unmanaged COM objects from .NET Framework apps when you know the COM object's class identifier (CLSID).</span></span>  <span data-ttu-id="96bec-2925">Die Klassen-ID für COM-Klassen ist in den Schlüssel HKEY_CLASSES_ROOT\CLSID der Registrierung definiert.</span><span class="sxs-lookup"><span data-stu-id="96bec-2925">The class identifier for COM classes is defined in the HKEY_CLASSES_ROOT\CLSID key of the registry.</span></span> <span data-ttu-id="96bec-2926">Sie können den Wert der Abrufen der <xref:System.Type.IsCOMObject%2A> Eigenschaft, um zu bestimmen, ob der von dieser Methode zurückgegebene Typ ein COM-Objekt.</span><span class="sxs-lookup"><span data-stu-id="96bec-2926">You can retrieve the value of the <xref:System.Type.IsCOMObject%2A> property to determine whether the type returned by this method is a COM object.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="96bec-2927">Rufen Sie die <xref:System.Type.GetTypeFromProgID%2A> -Methode für den Zugriff mit spätem Binden für COM-Objekte, deren Programmbezeichner (ProgID), der für die Sie kennen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2927">You can call the <xref:System.Type.GetTypeFromProgID%2A> method for late-bound access to COM objects whose programmatic identifier (ProgID) you know.</span></span>  
  
 <span data-ttu-id="96bec-2928">Instanziieren ein nicht verwaltetes COM-Objekt aus der CLSID ist ein zweistufiger Prozess:</span><span class="sxs-lookup"><span data-stu-id="96bec-2928">Instantiating an unmanaged COM object from its CLSID is a two-step process:</span></span>  
  
1.  <span data-ttu-id="96bec-2929">Abrufen einer <xref:System.Type> Objekt, das darstellt der `__ComObject` , entspricht die CLSID durch Aufrufen der <xref:System.Type.GetTypeFromCLSID%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="96bec-2929">Get a <xref:System.Type> object that represents the `__ComObject` that corresponds to the CLSID by calling the <xref:System.Type.GetTypeFromCLSID%2A> method.</span></span>  
  
2.  <span data-ttu-id="96bec-2930">Rufen Sie die <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> Methode, um das COM-Objekt zu instanziieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-2930">Call the <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> method to instantiate the COM object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-2931">Im folgenden Beispiel wird die CLSID des Microsoft Word [Anwendungsobjekt](http://msdn.microsoft.com/library/office/ff838565.aspx) einen COM-Typ abrufen, die die Microsoft Word-Anwendung von einem pullserver namens computer17.central.contoso.com darstellt.</span><span class="sxs-lookup"><span data-stu-id="96bec-2931">The following example uses the CLSID of the Microsoft Word [Application object](http://msdn.microsoft.com/library/office/ff838565.aspx) to retrieve a COM type that represents the Microsoft Word application from a server named computer17.central.contoso.com.</span></span> <span data-ttu-id="96bec-2932">Dann instanziiert den Typ durch Aufrufen der <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> -Methode und schließt ihn durch Aufrufen der [Application.Quit](http://msdn.microsoft.com/library/office/ff844895.aspx) Methode.</span><span class="sxs-lookup"><span data-stu-id="96bec-2932">It then instantiates the type by calling the <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> method, and closes it by calling the [Application.Quit](http://msdn.microsoft.com/library/office/ff844895.aspx) method.</span></span>  
  
 [!code-csharp[System.Type.GetTypeFromCLSID#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid_ex3.cs#3)]
 [!code-vb[System.Type.GetTypeFromCLSID#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid_ex3.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <span data-ttu-id="96bec-2933">
            <para>Diese Methode ist für die Verwendung vorgesehen, bei der Arbeit mit COM-Objekte nicht mit .NET Framework-Objekten. Alle verwalteten Objekte, einschließlich derjenigen, die für COM sichtbar sind (d. h. ihre <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> -Attribut ist <see langword="true" />) haben Sie eine GUID, die von zurückgegeben wird das <see cref="P:System.Type.GUID" /> Eigenschaft. Obwohl die Methode zurückgibt, eine <see cref="T:System.Type" /> -Objekt, auf die GUID entspricht, für .NET Framework-Objekten, Sie können nicht verwenden, die <see cref="T:System.Type" /> Objekt zum Erstellen einer Typinstanz durch Aufrufen der <see cref="M:System.Activator.CreateInstance(System.Type)" /> Methode, wie im folgenden Beispiel gezeigt.  [! code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [! code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]  Stattdessen die <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> sollte nur verwendet werden, zum Abrufen der GUID der nicht verwaltete COM-Objekte und die resultierende <see cref="T:System.Type" /> -Objekt, das an die <see cref="M:System.Activator.CreateInstance(System.Type)" /> Methode muss ein nicht verwaltete COM-Objekt darstellen.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2933">
              <para>This method is intended for use when working with COM objects, not with .NET Framework objects. All managed objects, including those that are visible to COM (that is, their <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> attribute is <see langword="true" />) have a GUID that is returned by the <see cref="P:System.Type.GUID" /> property. Although the method returns a <see cref="T:System.Type" /> object that corresponds to the GUID for .NET Framework objects, you can't use that <see cref="T:System.Type" /> object to create a type instance by calling the  <see cref="M:System.Activator.CreateInstance(System.Type)" /> method, as the following example shows.  [!code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [!code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]  Instead, the <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> should only be used to retrieve the GUID of an unmanaged COM object, and the resulting <see cref="T:System.Type" /> object that is passed to the <see cref="M:System.Activator.CreateInstance(System.Type)" /> method must represent an unmanaged COM object.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromCLSID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromCLSID (Guid clsid, string server, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromCLSID(valuetype System.Guid clsid, string server, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromCLSID (clsid As Guid, server As String, throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromCLSID(Guid clsid, System::String ^ server, bool throwOnError);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromCLSID : Guid * string * bool -&gt; Type" Usage="System.Type.GetTypeFromCLSID (clsid, server, throwOnError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clsid" Type="System.Guid" />
        <Parameter Name="server" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="clsid">
          <span data-ttu-id="96bec-2934">The CLSID of the type to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2934">The CLSID of the type to get.</span>
          </span>
        </param>
        <param name="server">
          <span data-ttu-id="96bec-2935">The server from which to load the type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2935">The server from which to load the type.</span>
          </span>
          <span data-ttu-id="96bec-2936">If the server name is <see langword="null" />, this method automatically reverts to the local machine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2936">If the server name is <see langword="null" />, this method automatically reverts to the local machine.</span>
          </span>
        </param>
        <param name="throwOnError">
          <span data-ttu-id="96bec-2937">
            <see langword="true" /> to throw any exception that occurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2937">
              <see langword="true" /> to throw any exception that occurs.</span>
          </span>
          <span data-ttu-id="96bec-2938">-or-  <see langword="false" /> to ignore any exception that occurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2938">-or-  <see langword="false" /> to ignore any exception that occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-2939">Gets the type associated with the specified class identifier (CLSID) from the specified server, specifying whether to throw an exception if an error occurs while loading the type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2939">Gets the type associated with the specified class identifier (CLSID) from the specified server, specifying whether to throw an exception if an error occurs while loading the type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-2940">
            <see langword="System.__ComObject" /> regardless of whether the CLSID is valid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2940">
              <see langword="System.__ComObject" /> regardless of whether the CLSID is valid.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-2941">Die <xref:System.Type.GetTypeFromCLSID%2A> Methode unterstützt spät gebundener Zugriff auf nicht verwaltete COM-Objekte aus .NET Framework-apps, wenn Sie wissen, dass der Klassenbezeichner (CLSID) des COM-Objekts.</span><span class="sxs-lookup"><span data-stu-id="96bec-2941">The <xref:System.Type.GetTypeFromCLSID%2A> method supports late-bound access to unmanaged COM objects from .NET Framework apps when you know the COM object's class identifier (CLSID).</span></span>  <span data-ttu-id="96bec-2942">Die Klassen-ID für COM-Klassen ist in den Schlüssel HKEY_CLASSES_ROOT\CLSID der Registrierung definiert.</span><span class="sxs-lookup"><span data-stu-id="96bec-2942">The class identifier for COM classes is defined in the HKEY_CLASSES_ROOT\CLSID key of the registry.</span></span> <span data-ttu-id="96bec-2943">Sie können den Wert der Abrufen der <xref:System.Type.IsCOMObject%2A> Eigenschaft, um zu bestimmen, ob der von dieser Methode zurückgegebene Typ ein COM-Objekt.</span><span class="sxs-lookup"><span data-stu-id="96bec-2943">You can retrieve the value of the <xref:System.Type.IsCOMObject%2A> property to determine whether the type returned by this method is a COM object.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="96bec-2944">Rufen Sie die <xref:System.Type.GetTypeFromProgID%2A> -Methode für den Zugriff mit spätem Binden für COM-Objekte, deren Programmbezeichner (ProgID), der für die Sie kennen.</span><span class="sxs-lookup"><span data-stu-id="96bec-2944">You can call the <xref:System.Type.GetTypeFromProgID%2A> method for late-bound access to COM objects whose programmatic identifier (ProgID) you know.</span></span>  
  
 <span data-ttu-id="96bec-2945">Instanziieren ein nicht verwaltetes COM-Objekt aus der CLSID ist ein zweistufiger Prozess:</span><span class="sxs-lookup"><span data-stu-id="96bec-2945">Instantiating an unmanaged COM object from its CLSID is a two-step process:</span></span>  
  
1.  <span data-ttu-id="96bec-2946">Abrufen einer <xref:System.Type> Objekt, das darstellt der `__ComObject` , entspricht die CLSID durch Aufrufen der <xref:System.Type.GetTypeFromCLSID%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="96bec-2946">Get a <xref:System.Type> object that represents the `__ComObject` that corresponds to the CLSID by calling the <xref:System.Type.GetTypeFromCLSID%2A> method.</span></span>  
  
2.  <span data-ttu-id="96bec-2947">Rufen Sie die <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> Methode, um das COM-Objekt zu instanziieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-2947">Call the <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> method to instantiate the COM object.</span></span>  
  
 <span data-ttu-id="96bec-2948">Ausnahmen, z. B. <xref:System.OutOfMemoryException> wird ausgelöst, wenn die Angabe `true` für `throwOnError`, jedoch wird nicht für nicht registrierte CLSIDs fehlerhaft sein.</span><span class="sxs-lookup"><span data-stu-id="96bec-2948">Exceptions such as <xref:System.OutOfMemoryException> will be thrown when specifying `true` for `throwOnError`, but it will not fail for unregistered CLSIDs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-2949">Im folgenden Beispiel wird die CLSID des Microsoft Word [Anwendungsobjekt](http://msdn.microsoft.com/library/office/ff838565.aspx) einen COM-Typ abrufen, die die Microsoft Word-Anwendung von einem pullserver namens computer17.central.contoso.com darstellt.</span><span class="sxs-lookup"><span data-stu-id="96bec-2949">The following example uses the CLSID of the Microsoft Word [Application object](http://msdn.microsoft.com/library/office/ff838565.aspx) to retrieve a COM type that represents the Microsoft Word application from a server named computer17.central.contoso.com.</span></span> <span data-ttu-id="96bec-2950">Dann instanziiert den Typ durch Aufrufen der <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> -Methode und schließt ihn durch Aufrufen der [Application.Quit](http://msdn.microsoft.com/library/office/ff844895.aspx) Methode.</span><span class="sxs-lookup"><span data-stu-id="96bec-2950">It then instantiates the type by calling the <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> method, and closes it by calling the [Application.Quit](http://msdn.microsoft.com/library/office/ff844895.aspx) method.</span></span> <span data-ttu-id="96bec-2951">Wenn beim Laden des Typs ein Fehler auftritt, wird eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="96bec-2951">An exception is thrown if an error occurs while loading the type.</span></span>  
  
 [!code-csharp[System.Type.GetTypeFromCLSID#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid_ex4.cs#4)]
 [!code-vb[System.Type.GetTypeFromCLSID#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid_ex4.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <span data-ttu-id="96bec-2952">
            <para>Diese Methode ist für die Verwendung vorgesehen, bei der Arbeit mit COM-Objekte nicht mit .NET Framework-Objekten. Alle verwalteten Objekte, einschließlich derjenigen, die für COM sichtbar sind (d. h. ihre <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> -Attribut ist <see langword="true" />) haben Sie eine GUID, die von zurückgegeben wird das <see cref="P:System.Type.GUID" /> Eigenschaft. Obwohl die <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> Methode gibt eine <see cref="T:System.Type" /> Objekt, das die GUID für einen bestimmten verwalteten Objekt entspricht, kann nicht verwendet <see cref="T:System.Type" /> Objekt zum Erstellen einer Typinstanz durch Aufrufen der <see cref="M:System.Activator.CreateInstance(System.Type)" /> Methode, wie im folgenden Beispiel zeigt.  [! code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [! code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]  Stattdessen die <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> sollte nur verwendet werden, zum Abrufen der GUID der nicht verwaltete COM-Objekte und die resultierende <see cref="T:System.Type" /> -Objekt, das an die <see cref="M:System.Activator.CreateInstance(System.Type)" /> Methode muss ein nicht verwaltete COM-Objekt darstellen.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2952">
              <para>This method is intended for use when working with COM objects, not with .NET Framework objects. All managed objects, including those that are visible to COM (that is, their <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> attribute is <see langword="true" />) have a GUID that is returned by the <see cref="P:System.Type.GUID" /> property. Although the <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> method returns a <see cref="T:System.Type" /> object that corresponds to the GUID for a particular managed object, you can't use that <see cref="T:System.Type" /> object to create a type instance by calling the  <see cref="M:System.Activator.CreateInstance(System.Type)" /> method, as the following example shows.  [!code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [!code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]  Instead, the <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> should only be used to retrieve the GUID of an unmanaged COM object, and the resulting <see cref="T:System.Type" /> object that is passed to the <see cref="M:System.Activator.CreateInstance(System.Type)" /> method must represent an unmanaged COM object.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromHandle">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromHandle (RuntimeTypeHandle handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromHandle(valuetype System.RuntimeTypeHandle handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromHandle (handle As RuntimeTypeHandle) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromHandle(RuntimeTypeHandle handle);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromHandle : RuntimeTypeHandle -&gt; Type" Usage="System.Type.GetTypeFromHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.RuntimeTypeHandle" />
      </Parameters>
      <Docs>
        <param name="handle">
          <span data-ttu-id="96bec-2953">The object that refers to the type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2953">The object that refers to the type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-2954">Gets the type referenced by the specified type handle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2954">Gets the type referenced by the specified type handle.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-2955">The type referenced by the specified <see cref="T:System.RuntimeTypeHandle" />, or <see langword="null" /> if the <see cref="P:System.RuntimeTypeHandle.Value" /> property of <paramref name="handle" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2955">The type referenced by the specified <see cref="T:System.RuntimeTypeHandle" />, or <see langword="null" /> if the <see cref="P:System.RuntimeTypeHandle.Value" /> property of <paramref name="handle" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-2956">Die Handles gelten nur in der Anwendungsdomäne, in der sie abgerufen wurden.</span><span class="sxs-lookup"><span data-stu-id="96bec-2956">The handles are valid only in the application domain in which they were obtained.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-2957">Im folgenden Beispiel wird die <xref:System.Type.GetTypeFromHandle%2A> -Methode zum Abrufen einer <xref:System.Type> -Objekt aus einer <xref:System.RuntimeTypeHandle> gebotenen die <xref:System.Type.GetTypeHandle%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="96bec-2957">The following example uses the <xref:System.Type.GetTypeFromHandle%2A> method to get a <xref:System.Type> object from a <xref:System.RuntimeTypeHandle> provided by the <xref:System.Type.GetTypeHandle%2A> method.</span></span>  
  
 [!code-cpp[Type_GetTypeFromHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeFromHandle/CPP/type_gettypefromhandle.cpp#1)]
 [!code-csharp[Type_GetTypeFromHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeFromHandle/CS/type_gettypefromhandle.cs#1)]
 [!code-vb[Type_GetTypeFromHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeFromHandle/VB/type_gettypefromhandle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="96bec-2958">A class initializer is invoked and throws an exception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2958">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <altmember cref="T:System.RuntimeTypeHandle" />
        <altmember cref="P:System.Type.TypeHandle" />
        <altmember cref="M:System.Type.GetTypeHandle(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetTypeFromProgID">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-2959">Gets the type associated with the specified program identifier (ProgID).</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2959">Gets the type associated with the specified program identifier (ProgID).</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetTypeFromProgID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromProgID (string progID);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromProgID(string progID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromProgID(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromProgID (progID As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromProgID(System::String ^ progID);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromProgID : string -&gt; Type" Usage="System.Type.GetTypeFromProgID progID" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="progID">
          <span data-ttu-id="96bec-2960">The ProgID of the type to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2960">The ProgID of the type to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-2961">Gets the type associated with the specified program identifier (ProgID), returning null if an error is encountered while loading the <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2961">Gets the type associated with the specified program identifier (ProgID), returning null if an error is encountered while loading the <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-2962">The type associated with the specified ProgID, if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2962">The type associated with the specified ProgID, if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-2963">Diese Methode wird bereitgestellt für COM-Unterstützung.</span><span class="sxs-lookup"><span data-stu-id="96bec-2963">This method is provided for COM support.</span></span> <span data-ttu-id="96bec-2964">Versionsabhängige Programm-IDs werden nicht in Microsoft .NET Framework verwendet, da diese durch das Konzept des Namespace ersetzt wurden.</span><span class="sxs-lookup"><span data-stu-id="96bec-2964">ProgIDs are not used in the Microsoft .NET Framework because they have been superseded by the concept of namespace.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="96bec-2965">
            <paramref name="progID" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2965">
              <paramref name="progID" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="96bec-2966">Erfordert volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2966">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="96bec-2967">Dieser Member kann nicht von teilweise vertrauenswürdigem oder transparentem Code verwendet werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2967">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Runtime.InteropServices.RegistrationServices.GetProgIdForType(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromProgID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromProgID (string progID, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromProgID(string progID, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromProgID(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromProgID (progID As String, throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromProgID(System::String ^ progID, bool throwOnError);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromProgID : string * bool -&gt; Type" Usage="System.Type.GetTypeFromProgID (progID, throwOnError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="progID">
          <span data-ttu-id="96bec-2968">The ProgID of the type to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2968">The ProgID of the type to get.</span>
          </span>
        </param>
        <param name="throwOnError">
          <span data-ttu-id="96bec-2969">
            <see langword="true" /> to throw any exception that occurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2969">
              <see langword="true" /> to throw any exception that occurs.</span>
          </span>
          <span data-ttu-id="96bec-2970">-or-  <see langword="false" /> to ignore any exception that occurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2970">-or-  <see langword="false" /> to ignore any exception that occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-2971">Gets the type associated with the specified program identifier (ProgID), specifying whether to throw an exception if an error occurs while loading the type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2971">Gets the type associated with the specified program identifier (ProgID), specifying whether to throw an exception if an error occurs while loading the type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-2972">The type associated with the specified program identifier (ProgID), if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2972">The type associated with the specified program identifier (ProgID), if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-2973">Diese Methode wird bereitgestellt für COM-Unterstützung.</span><span class="sxs-lookup"><span data-stu-id="96bec-2973">This method is provided for COM support.</span></span> <span data-ttu-id="96bec-2974">Programm-IDs werden nicht in Microsoft .NET Framework verwendet, da diese durch das Konzept des Namespace ersetzt wurden.</span><span class="sxs-lookup"><span data-stu-id="96bec-2974">Program IDs are not used in Microsoft .NET Framework because they have been superseded by the concept of namespace.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-2975">Im folgende Beispiel ruft einen Typ ab, durch Übergeben einer ProgID, die angibt, ob eine Ausnahme ausgelöst, wenn die Programm-ID ungültig ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-2975">The following example retrieves a type by passing a ProgID, specifying whether to throw an exception if the ProgID is invalid.</span></span> <span data-ttu-id="96bec-2976">Das Beispiel zeigt anschließend die ClassID im Zusammenhang mit der Programm-ID sowie alle entsprechenden Ausnahmemeldung.</span><span class="sxs-lookup"><span data-stu-id="96bec-2976">The example then displays the ClassID related to the ProgID, along with any applicable exception message.</span></span>  
  
 [!code-cpp[Type_GetTypeFromProgID2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeFromProgID2/CPP/type_gettypefromprogid2.cpp#1)]
 [!code-csharp[Type_GetTypeFromProgID2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeFromProgID2/CS/type_gettypefromprogid2.cs#1)]
 [!code-vb[Type_GetTypeFromProgID2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeFromProgID2/VB/type_gettypefromprogid2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="96bec-2977">
            <paramref name="progID" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2977">
              <paramref name="progID" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Runtime.InteropServices.COMException">
          <span data-ttu-id="96bec-2978">The specified ProgID is not registered.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2978">The specified ProgID is not registered.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="96bec-2979">Erfordert volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2979">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="96bec-2980">Dieser Member kann nicht von teilweise vertrauenswürdigem oder transparentem Code verwendet werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2980">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Runtime.InteropServices.RegistrationServices.GetProgIdForType(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromProgID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromProgID (string progID, string server);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromProgID(string progID, string server) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromProgID(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromProgID (progID As String, server As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromProgID(System::String ^ progID, System::String ^ server);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromProgID : string * string -&gt; Type" Usage="System.Type.GetTypeFromProgID (progID, server)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.String" />
        <Parameter Name="server" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="progID">
          <span data-ttu-id="96bec-2981">The progID of the type to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2981">The progID of the type to get.</span>
          </span>
        </param>
        <param name="server">
          <span data-ttu-id="96bec-2982">The server from which to load the type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2982">The server from which to load the type.</span>
          </span>
          <span data-ttu-id="96bec-2983">If the server name is <see langword="null" />, this method automatically reverts to the local machine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2983">If the server name is <see langword="null" />, this method automatically reverts to the local machine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-2984">Gets the type associated with the specified program identifier (progID) from the specified server, returning null if an error is encountered while loading the type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2984">Gets the type associated with the specified program identifier (progID) from the specified server, returning null if an error is encountered while loading the type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-2985">The type associated with the specified program identifier (progID), if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2985">The type associated with the specified program identifier (progID), if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-2986">Diese Methode wird bereitgestellt für COM-Unterstützung.</span><span class="sxs-lookup"><span data-stu-id="96bec-2986">This method is provided for COM support.</span></span> <span data-ttu-id="96bec-2987">Programm-IDs werden nicht in Microsoft .NET Framework verwendet, da diese durch das Konzept des Namespace ersetzt wurden.</span><span class="sxs-lookup"><span data-stu-id="96bec-2987">Program IDs are not used in Microsoft .NET Framework because they have been superseded by the concept of namespace.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-2988">Im folgende Beispiel ruft einen Typ ab, durch die Übergabe einer ProgID und die Server-Namens.</span><span class="sxs-lookup"><span data-stu-id="96bec-2988">The following example retrieves a type by passing a ProgID and server name.</span></span> <span data-ttu-id="96bec-2989">Klicken Sie dann die ClassID angezeigt, die ProgID, oder löst eine Ausnahme aus, wenn die ProgID oder den Namen des Servers ungültig ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-2989">The example then displays the ClassID related to the ProgID, or throws an exception if the ProgID or the server name is invalid.</span></span>  
  
 [!code-cpp[Type_GetTypeFromProgID3#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeFromProgID3/CPP/Type_GetTypeFromProgID3.cpp#1)]
 [!code-csharp[Type_GetTypeFromProgID3#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeFromProgID3/CS/type_gettypefromprogid3.cs#1)]
 [!code-vb[Type_GetTypeFromProgID3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeFromProgID3/VB/type_gettypefromprogid3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="96bec-2990">
            <paramref name="prodID" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2990">
              <paramref name="prodID" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="96bec-2991">Erfordert volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2991">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="96bec-2992">Dieser Member kann nicht von teilweise vertrauenswürdigem oder transparentem Code verwendet werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2992">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Runtime.InteropServices.RegistrationServices.GetProgIdForType(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromProgID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromProgID (string progID, string server, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromProgID(string progID, string server, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromProgID(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromProgID (progID As String, server As String, throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromProgID(System::String ^ progID, System::String ^ server, bool throwOnError);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromProgID : string * string * bool -&gt; Type" Usage="System.Type.GetTypeFromProgID (progID, server, throwOnError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.String" />
        <Parameter Name="server" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="progID">
          <span data-ttu-id="96bec-2993">The progID of the <see cref="T:System.Type" /> to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2993">The progID of the <see cref="T:System.Type" /> to get.</span>
          </span>
        </param>
        <param name="server">
          <span data-ttu-id="96bec-2994">The server from which to load the type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2994">The server from which to load the type.</span>
          </span>
          <span data-ttu-id="96bec-2995">If the server name is <see langword="null" />, this method automatically reverts to the local machine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2995">If the server name is <see langword="null" />, this method automatically reverts to the local machine.</span>
          </span>
        </param>
        <param name="throwOnError">
          <span data-ttu-id="96bec-2996">
            <see langword="true" /> to throw any exception that occurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2996">
              <see langword="true" /> to throw any exception that occurs.</span>
          </span>
          <span data-ttu-id="96bec-2997">-or-  <see langword="false" /> to ignore any exception that occurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2997">-or-  <see langword="false" /> to ignore any exception that occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-2998">Gets the type associated with the specified program identifier (progID) from the specified server, specifying whether to throw an exception if an error occurs while loading the type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2998">Gets the type associated with the specified program identifier (progID) from the specified server, specifying whether to throw an exception if an error occurs while loading the type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-2999">The type associated with the specified program identifier (progID), if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-2999">The type associated with the specified program identifier (progID), if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3000">Diese Methode wird bereitgestellt für COM-Unterstützung.</span><span class="sxs-lookup"><span data-stu-id="96bec-3000">This method is provided for COM support.</span></span> <span data-ttu-id="96bec-3001">Programm-IDs werden nicht in Microsoft .NET Framework verwendet, da diese durch das Konzept des Namespace ersetzt wurden.</span><span class="sxs-lookup"><span data-stu-id="96bec-3001">Program IDs are not used in Microsoft .NET Framework because they have been superseded by the concept of namespace.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-3002">Im folgende Beispiel ruft einen Typ ab, durch die Übergabe einer ProgID und die Server-Namens.</span><span class="sxs-lookup"><span data-stu-id="96bec-3002">The following example retrieves a type by passing a ProgID and server name.</span></span> <span data-ttu-id="96bec-3003">Das Beispiel zeigt anschließend die ClassID im Zusammenhang mit der Programm-ID angibt, ob eine Ausnahme ausgelöst, wenn die ProgID oder den Namen des Servers ungültig ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-3003">The example then displays the ClassID related to the ProgID, specifying whether to throw an exception if the ProgID or the server name is invalid.</span></span>  
  
 [!code-cpp[Type_GetTypeFromProgID4#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeFromProgID4/CPP/Type_GetTypeFromProgID4.cpp#1)]
 [!code-csharp[Type_GetTypeFromProgID4#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeFromProgID4/CS/type_gettypefromprogid4.cs#1)]
 [!code-vb[Type_GetTypeFromProgID4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeFromProgID4/VB/type_gettypefromprogid4.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="96bec-3004">
            <paramref name="progID" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3004">
              <paramref name="progID" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Runtime.InteropServices.COMException">
          <span data-ttu-id="96bec-3005">The specified progID is not registered.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3005">The specified progID is not registered.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="96bec-3006">Erfordert volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3006">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="96bec-3007">Dieser Member kann nicht von teilweise vertrauenswürdigem oder transparentem Code verwendet werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3007">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Runtime.InteropServices.RegistrationServices.GetProgIdForType(System.Type)" />
        <altmember cref="T:System.TypeLoadException" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeHandle">
      <MemberSignature Language="C#" Value="public static RuntimeTypeHandle GetTypeHandle (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.RuntimeTypeHandle GetTypeHandle(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeHandle(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeHandle (o As Object) As RuntimeTypeHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static RuntimeTypeHandle GetTypeHandle(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="static member GetTypeHandle : obj -&gt; RuntimeTypeHandle" Usage="System.Type.GetTypeHandle o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeTypeHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">
          <span data-ttu-id="96bec-3008">The object for which to get the type handle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3008">The object for which to get the type handle.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-3009">Gets the handle for the <see cref="T:System.Type" /> of a specified object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3009">Gets the handle for the <see cref="T:System.Type" /> of a specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-3010">The handle for the <see cref="T:System.Type" /> of the specified <see cref="T:System.Object" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3010">The handle for the <see cref="T:System.Type" /> of the specified <see cref="T:System.Object" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3011">Die Handles gelten nur in der Anwendungsdomäne, in der sie abgerufen wurden.</span><span class="sxs-lookup"><span data-stu-id="96bec-3011">The handles are valid only in the application domain in which they were obtained.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-3012">Das folgende Beispiel definiert die Klasse `MyClass1`, ruft eine Instanz davon ab, und ruft das Runtime-Handle des Objekts ab.</span><span class="sxs-lookup"><span data-stu-id="96bec-3012">The following example defines the class `MyClass1`, gets an instance of it, and retrieves the runtime handle of the object.</span></span>  
  
 [!code-cpp[Type_GetTypeHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeHandle/CPP/Type_GetTypeHandle.cpp#1)]
 [!code-csharp[Type_GetTypeHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeHandle/CS/type_gettypehandle.cs#1)]
 [!code-vb[Type_GetTypeHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeHandle/VB/type_gettypehandle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96bec-3013">
            <paramref name="o" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3013">
              <paramref name="o" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.RuntimeTypeHandle" />
        <altmember cref="P:System.Type.TypeHandle" />
        <altmember cref="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)" />
      </Docs>
    </Member>
    <Member MemberName="GUID">
      <MemberSignature Language="C#" Value="public abstract Guid GUID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid GUID" />
      <MemberSignature Language="DocId" Value="P:System.Type.GUID" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property GUID As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Guid GUID { Guid get(); };" />
      <MemberSignature Language="F#" Value="member this.GUID : Guid" Usage="System.Type.GUID" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.GUID</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3014">Gets the GUID associated with the <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3014">Gets the GUID associated with the <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-3015">Die dem <see cref="T:System.Type" /> zugeordnete GUID.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3015">The GUID associated with the <see cref="T:System.Type" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3016">Eine GUID bezieht sich auf einen Typ mit dem <xref:System.Runtime.InteropServices.GuidAttribute> Attribut.</span><span class="sxs-lookup"><span data-stu-id="96bec-3016">A GUID is associated with a type using the <xref:System.Runtime.InteropServices.GuidAttribute> attribute.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-3017">Das folgende Beispiel erstellt die Klasse `MyClass1` erstellt mit einer öffentlichen Methode, eine `Type` -Objekt entsprechende `MyClass1`, und ruft die <xref:System.Guid> -Struktur unter Verwendung der `GUID` Eigenschaft der `Type` Klasse.</span><span class="sxs-lookup"><span data-stu-id="96bec-3017">The following example creates the class `MyClass1` with a public method, creates a `Type` object corresponding to `MyClass1`, and gets the <xref:System.Guid> structure using the `GUID` property of the `Type` class.</span></span>  
  
 [!code-cpp[Type_Guid#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_Guid/CPP/type_guid.cpp#1)]
 [!code-csharp[Type_Guid#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_Guid/CS/type_guid.cs#1)]
 [!code-vb[Type_Guid#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_Guid/VB/type_guid.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Guid" />
      </Docs>
    </Member>
    <Member MemberName="HasElementType">
      <MemberSignature Language="C#" Value="public bool HasElementType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasElementType" />
      <MemberSignature Language="DocId" Value="P:System.Type.HasElementType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasElementType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasElementType { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasElementType : bool" Usage="System.Type.HasElementType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.HasElementType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3018">Gets a value indicating whether the current <see cref="T:System.Type" /> encompasses or refers to another type; that is, whether the current <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3018">Gets a value indicating whether the current <see cref="T:System.Type" /> encompasses or refers to another type; that is, whether the current <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-3019">
            <see langword="true" />, wenn <see cref="T:System.Type" /> ein Array oder ein Zeiger ist oder als Verweis übergeben wird, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3019">
              <see langword="true" /> if the <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3020">Beispielsweise Type.GetType("Int32[]"). HasElementType gibt `true`, wohingegen Type.GetType("Int32"). HasElementType gibt `false`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3020">For example, Type.GetType("Int32[]").HasElementType returns `true`, but Type.GetType("Int32").HasElementType returns `false`.</span></span> <span data-ttu-id="96bec-3021">HasElementType gibt außerdem zurück `true` für "Int32 \*" und "Int32 &".</span><span class="sxs-lookup"><span data-stu-id="96bec-3021">HasElementType also returns `true` for "Int32\*" and "Int32&".</span></span>  
  
 <span data-ttu-id="96bec-3022">Wenn die aktuelle <xref:System.Type> stellt einen generischen Typ oder einen Typparameter in der Definition eines generischen Typs oder generische Methode muss diese Eigenschaft gibt immer `false`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3022">If the current <xref:System.Type> represents a generic type, or a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-3023">Im folgenden Beispiel zurückgegeben `true` oder `false` abhängig davon, ob das Objekt ein Array, ein Verweistyp oder ein Zeiger ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-3023">The following example returns `true` or `false` depending on whether or not the object is an array, a reference type, or a pointer.</span></span>  
  
 [!code-cpp[Type_HasElementType#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_HasElementType/CPP/type_haselementtype.cpp#1)]
 [!code-csharp[Type_HasElementType#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_HasElementType/CS/type_haselementtype.cs#1)]
 [!code-vb[Type_HasElementType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_HasElementType/VB/type_haselementtype.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.HasElementTypeImpl" />
        <altmember cref="P:System.Type.IsArray" />
        <altmember cref="P:System.Type.IsPointer" />
        <altmember cref="P:System.Type.IsByRef" />
        <altmember cref="M:System.Type.GetElementType" />
        <altmember cref="M:System.Type.GetType" />
      </Docs>
    </Member>
    <Member MemberName="HasElementTypeImpl">
      <MemberSignature Language="C#" Value="protected abstract bool HasElementTypeImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool HasElementTypeImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.HasElementTypeImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function HasElementTypeImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool HasElementTypeImpl();" />
      <MemberSignature Language="F#" Value="abstract member HasElementTypeImpl : unit -&gt; bool" Usage="type.HasElementTypeImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3024">When overridden in a derived class, implements the <see cref="P:System.Type.HasElementType" /> property and determines whether the current <see cref="T:System.Type" /> encompasses or refers to another type; that is, whether the current <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3024">When overridden in a derived class, implements the <see cref="P:System.Type.HasElementType" /> property and determines whether the current <see cref="T:System.Type" /> encompasses or refers to another type; that is, whether the current <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-3025">
            <see langword="true" /> if the <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3025">
              <see langword="true" /> if the <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3026">Beispielsweise Type.GetType("Int32[]"). HasElementTypeImpl gibt `true`, wohingegen Type.GetType("Int32"). HasElementTypeImpl gibt `false`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3026">For example, Type.GetType("Int32[]").HasElementTypeImpl returns `true`, but Type.GetType("Int32").HasElementTypeImpl returns `false`.</span></span> <span data-ttu-id="96bec-3027">HasElementTypeImpl gibt außerdem zurück `true` für "Int32 \*" und "Int32 &".</span><span class="sxs-lookup"><span data-stu-id="96bec-3027">HasElementTypeImpl also returns `true` for "Int32\*" and "Int32&".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-3028">Das folgende Beispiel definiert die Klasse `MyTypeDelegator`, welche Außerkraftsetzungen der `HasElementTypeImpl` Methode.</span><span class="sxs-lookup"><span data-stu-id="96bec-3028">The following example defines the class `MyTypeDelegator`, which overrides the `HasElementTypeImpl` method.</span></span> <span data-ttu-id="96bec-3029">Die Hauptklasse überprüft die `HasElementType` -Eigenschaft und zeigt das Element eingeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-3029">The main class checks for the `HasElementType` property and displays the element type.</span></span>  
  
 [!code-cpp[Type_HasElementTypeImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_HasElementTypeImpl/CPP/type_haselementtypeimpl.cpp#1)]
 [!code-csharp[Type_HasElementTypeImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_HasElementTypeImpl/CS/type_haselementtypeimpl.cs#1)]
 [!code-vb[Type_HasElementTypeImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_HasElementTypeImpl/VB/type_haselementtypeimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.HasElementType" />
        <altmember cref="P:System.Type.IsArray" />
        <altmember cref="P:System.Type.IsPointer" />
        <altmember cref="P:System.Type.IsByRef" />
        <altmember cref="M:System.Type.GetElementType" />
        <altmember cref="M:System.Type.GetType" />
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeMember">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3030">Invokes a specific member of the current <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3030">Invokes a specific member of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] -&gt; obj&#xA;override this.InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] -&gt; obj" Usage="type.InvokeMember (name, invokeAttr, binder, target, args)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="96bec-3031">The string containing the name of the constructor, method, property, or field member to invoke.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3031">The string containing the name of the constructor, method, property, or field member to invoke.</span>
          </span>
          <span data-ttu-id="96bec-3032">-or-  An empty string ("") to invoke the default member.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3032">-or-  An empty string ("") to invoke the default member.</span>
          </span>
          <span data-ttu-id="96bec-3033">-or-  For <see langword="IDispatch" /> members, a string representing the DispID, for example "[DispID=3]".</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3033">-or-  For <see langword="IDispatch" /> members, a string representing the DispID, for example "[DispID=3]".</span>
          </span>
        </param>
        <param name="invokeAttr">
          <span data-ttu-id="96bec-3034">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3034">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="96bec-3035">The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3035">The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on.</span>
          </span>
          <span data-ttu-id="96bec-3036">The type of lookup need not be specified.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3036">The type of lookup need not be specified.</span>
          </span>
          <span data-ttu-id="96bec-3037">If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" /> are used.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3037">If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" /> are used.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="96bec-3038">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3038">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="96bec-3039">-or-  A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3039">-or-  A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
          <span data-ttu-id="96bec-3040">Note that explicitly defining a <see cref="T:System.Reflection.Binder" /> object may be required for successfully invoking method overloads with variable arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3040">Note that explicitly defining a <see cref="T:System.Reflection.Binder" /> object may be required for successfully invoking method overloads with variable arguments.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="96bec-3041">The object on which to invoke the specified member.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3041">The object on which to invoke the specified member.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="96bec-3042">An array containing the arguments to pass to the member to invoke.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3042">An array containing the arguments to pass to the member to invoke.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-3043">Invokes the specified member, using the specified binding constraints and matching the specified argument list.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3043">Invokes the specified member, using the specified binding constraints and matching the specified argument list.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-3044">An object representing the return value of the invoked member.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3044">An object representing the return value of the invoked member.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="96bec-3045">Sie können keine <xref:System.Type.InvokeMember%2A> , eine generische Methode aufzurufen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3045">You cannot use <xref:System.Type.InvokeMember%2A> to invoke a generic method.</span></span>  
  
 <span data-ttu-id="96bec-3046">Die folgenden <xref:System.Reflection.BindingFlags> Filterflags können verwendet werden, auf welche Member in die Suche einbezogen werden:</span><span class="sxs-lookup"><span data-stu-id="96bec-3046">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="96bec-3047">Geben Sie `BindingFlags.Public` öffentliche Mitglieder in die Suche eingeschlossen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3047">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="96bec-3048">Geben Sie `BindingFlags.NonPublic` nicht öffentliche Mitglieder (d. h. private und geschützte Member) in die Suche eingeschlossen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3048">Specify `BindingFlags.NonPublic` to include non-public members (that is, private and protected members) in the search.</span></span>  
  
-   <span data-ttu-id="96bec-3049">Geben Sie `BindingFlags.FlattenHierarchy` auf statische Member der Hierarchie enthalten.</span><span class="sxs-lookup"><span data-stu-id="96bec-3049">Specify `BindingFlags.FlattenHierarchy` to include static members up the hierarchy.</span></span>  
  
 <span data-ttu-id="96bec-3050">Die folgenden <xref:System.Reflection.BindingFlags> Modifiziererflags können verwendet werden, um die Funktionsweise der Suche ändern:</span><span class="sxs-lookup"><span data-stu-id="96bec-3050">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="96bec-3051">`BindingFlags.IgnoreCase` um die Groß-/Kleinschreibung ignorieren `name`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3051">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="96bec-3052">`BindingFlags.DeclaredOnly` Suchen Sie nur die Member deklariert die <xref:System.Type>, nicht die Elemente, die nur geerbt wurden.</span><span class="sxs-lookup"><span data-stu-id="96bec-3052">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="96bec-3053">Die folgenden <xref:System.Reflection.BindingFlags> Aufrufflags können verwendet werden, um anzugeben, welche Aktion mit dem Element:</span><span class="sxs-lookup"><span data-stu-id="96bec-3053">The following <xref:System.Reflection.BindingFlags> invocation flags can be used to denote what action to take with the member:</span></span>  
  
-   <span data-ttu-id="96bec-3054">`CreateInstance` Um einen Konstruktor aufzurufen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3054">`CreateInstance` to invoke a constructor.</span></span> <span data-ttu-id="96bec-3055">`name` wird ignoriert.</span><span class="sxs-lookup"><span data-stu-id="96bec-3055">`name` is ignored.</span></span> <span data-ttu-id="96bec-3056">Mit anderen Aufrufflags nicht gültig.</span><span class="sxs-lookup"><span data-stu-id="96bec-3056">Not valid with other invocation flags.</span></span>  
  
-   <span data-ttu-id="96bec-3057">`InvokeMethod` Um eine Methode, jedoch nicht auf einen Konstruktor oder Typinitialisierer aufzurufen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3057">`InvokeMethod` to invoke a method, but not a constructor or a type initializer.</span></span> <span data-ttu-id="96bec-3058">Ungültig mit `SetField` oder `SetProperty`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3058">Not valid with `SetField` or `SetProperty`.</span></span> <span data-ttu-id="96bec-3059">Wenn `InvokeMethod` wird angegeben, indem selbst `BindingFlags.Public`, `BindingFlags.Instance`, und `BindingFlags.Static` werden automatisch mit eingeschlossen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3059">If `InvokeMethod` is specified by itself, `BindingFlags.Public`, `BindingFlags.Instance`, and `BindingFlags.Static` are automatically included.</span></span>  
  
-   <span data-ttu-id="96bec-3060">`GetField` um den Wert eines Felds zu erhalten.</span><span class="sxs-lookup"><span data-stu-id="96bec-3060">`GetField` to get the value of a field.</span></span> <span data-ttu-id="96bec-3061">Ungültig mit `SetField`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3061">Not valid with `SetField`.</span></span>  
  
-   <span data-ttu-id="96bec-3062">`SetField` um den Wert eines Felds festzulegen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3062">`SetField` to set the value of a field.</span></span> <span data-ttu-id="96bec-3063">Ungültig mit `GetField`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3063">Not valid with `GetField`.</span></span>  
  
-   <span data-ttu-id="96bec-3064">`GetProperty` Um eine Eigenschaft zu erhalten.</span><span class="sxs-lookup"><span data-stu-id="96bec-3064">`GetProperty` to get a property.</span></span> <span data-ttu-id="96bec-3065">Ungültig mit `SetProperty`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3065">Not valid with `SetProperty`.</span></span>  
  
-   <span data-ttu-id="96bec-3066">`SetProperty` Um eine Eigenschaft festzulegen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3066">`SetProperty` to set a property.</span></span> <span data-ttu-id="96bec-3067">Ungültig mit `GetProperty`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3067">Not valid with `GetProperty`.</span></span>  
  
 <span data-ttu-id="96bec-3068">Weitere Informationen finden Sie unter <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="96bec-3068">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="96bec-3069">Eine Methode wird aufgerufen werden, wenn beide der folgenden Bedingungen zutreffen:</span><span class="sxs-lookup"><span data-stu-id="96bec-3069">A method will be invoked if both of the following conditions are true:</span></span>  
  
-   <span data-ttu-id="96bec-3070">Die Anzahl von Parametern in der Deklaration der Methode entspricht der Anzahl der Argumente in der `args` Array (es sei denn, die Standardargumente für den Member definiert sind und `BindingFlags.OptionalParamBinding` angegeben ist).</span><span class="sxs-lookup"><span data-stu-id="96bec-3070">The number of parameters in the method declaration equals the number of arguments in the `args` array (unless default arguments are defined on the member and `BindingFlags.OptionalParamBinding` is specified).</span></span>  
  
-   <span data-ttu-id="96bec-3071">Der Typ jedes Arguments kann von der Binder in den Typ des Parameters konvertiert werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-3071">The type of each argument can be converted by the binder to the type of the parameter.</span></span>  
  
 <span data-ttu-id="96bec-3072">Der Binder findet alle übereinstimmenden Methoden.</span><span class="sxs-lookup"><span data-stu-id="96bec-3072">The binder will find all of the matching methods.</span></span> <span data-ttu-id="96bec-3073">Diese Methoden gefunden werden, basierend auf den Typ der Bindung, die angefordert (<xref:System.Reflection.BindingFlags> Werte `InvokeMethod`, `GetProperty`und so weiter).</span><span class="sxs-lookup"><span data-stu-id="96bec-3073">These methods are found based upon the type of binding requested (<xref:System.Reflection.BindingFlags> values `InvokeMethod`, `GetProperty`, and so on).</span></span> <span data-ttu-id="96bec-3074">Der Satz von Methoden wird durch den Namen, Anzahl von Argumenten und einen Satz von Suchabfragen, die in der Binder definiert gefiltert.</span><span class="sxs-lookup"><span data-stu-id="96bec-3074">The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder.</span></span>  
  
 <span data-ttu-id="96bec-3075">Nachdem die Methode ausgewählt ist, wird es aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3075">After the method is selected, it is invoked.</span></span> <span data-ttu-id="96bec-3076">Barrierefreiheit wird an diesem Punkt überprüft.</span><span class="sxs-lookup"><span data-stu-id="96bec-3076">Accessibility is checked at that point.</span></span> <span data-ttu-id="96bec-3077">Die Suche kann gesteuert werden durchsucht, welche Gruppe von Methoden auf Grundlage der Eingabehilfen-Attribut, das der Methode zugeordnet.</span><span class="sxs-lookup"><span data-stu-id="96bec-3077">The search may control which set of methods are searched based upon the accessibility attribute associated with the method.</span></span> <span data-ttu-id="96bec-3078">Die <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> Methode der <xref:System.Reflection.Binder> -Klasse ist verantwortlich für das Auswählen der Methode aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-3078">The <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> method of the <xref:System.Reflection.Binder> class is responsible for selecting the method to be invoked.</span></span> <span data-ttu-id="96bec-3079">Der Standardbinder wählt die spezifischste Übereinstimmung.</span><span class="sxs-lookup"><span data-stu-id="96bec-3079">The default binder selects the most specific match.</span></span>  
  
 <span data-ttu-id="96bec-3080">Zugriffseinschränkungen werden für voll vertrauenswürdigen Code ignoriert. d. h. private Konstruktoren, Methoden, Felder und Eigenschaften und werden können durch aufgerufen <xref:System.Reflection> jedes Mal, wenn der Code vollständig vertrauenswürdig ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-3080">Access restrictions are ignored for fully trusted code; that is, private constructors, methods, fields, and properties can be accessed and invoked through <xref:System.Reflection> whenever the code is fully trusted.</span></span>  
  
 <span data-ttu-id="96bec-3081">Sie können `Type.InvokeMember` für einen bestimmten Wert ein Felds festzulegen, durch Angabe <xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="96bec-3081">You can use `Type.InvokeMember` to set a field to a particular value by specifying <xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>.</span></span> <span data-ttu-id="96bec-3082">Beispielsweise sollten Sie eine öffentliche Feld namens ' F ' für Klasse C und F ist eine `String`, können Sie Code wie z.B.:</span><span class="sxs-lookup"><span data-stu-id="96bec-3082">For example, if you want to set a public instance field named F on class C, and F is a `String`, you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {"strings new value"});`  
  
 <span data-ttu-id="96bec-3083">Wenn F# ist eine `String[]`, können Sie Code wie z.B.:</span><span class="sxs-lookup"><span data-stu-id="96bec-3083">If F is a `String[]`, you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {new String[]{"a","z","c","d"}});`  
  
 <span data-ttu-id="96bec-3084">Das ist das Feld "F" für dieses neue Array initialisiert werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-3084">which will initialize the field F to this new array.</span></span> <span data-ttu-id="96bec-3085">Sie können auch `Type.InvokeMember` auf eine Position in einem Array festlegen, indem der Index des Werts, und klicken Sie dann den nächsten Wert mit Code wie den folgenden:</span><span class="sxs-lookup"><span data-stu-id="96bec-3085">You can also use `Type.InvokeMember` to set a position in an array by supplying the index of the value and then the next value by using code such as the following:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {1, "b"});`  
  
 <span data-ttu-id="96bec-3086">Dies ändert die Zeichenfolge "Z" in das Array, das F in der Zeichenfolge "b" enthält.</span><span class="sxs-lookup"><span data-stu-id="96bec-3086">This will change string "z" in the array that F holds to string "b".</span></span>  
  
 <span data-ttu-id="96bec-3087">Beim Aufruf einer `IDispatch` Member, Sie können angeben, die DispID statt den Namen des Members, verwenden das Format der Zeichenfolge "[DispID = ##]".</span><span class="sxs-lookup"><span data-stu-id="96bec-3087">When you invoke an `IDispatch` member, you can specify the DispID instead of the member name, using the string format "[DispID=##]".</span></span> <span data-ttu-id="96bec-3088">Z. B. wenn die DispID MyComMethod 3 ist, können Sie angeben die Zeichenfolge "[DispID = 3]" anstelle von "MyComMethod".</span><span class="sxs-lookup"><span data-stu-id="96bec-3088">For example, if the DispID of MyComMethod is 3, you can specify the string "[DispID=3]" instead of "MyComMethod".</span></span> <span data-ttu-id="96bec-3089">Das Aufrufen eines Members durch DispID ist schneller als die Suche nach dem Namen des Members.</span><span class="sxs-lookup"><span data-stu-id="96bec-3089">Invoking a member by DispID is faster than looking up the member by name.</span></span> <span data-ttu-id="96bec-3090">In eine komplexe aggregationsszenarien ist die DispID manchmal die einzige Möglichkeit, den gewünschten Member aufgerufen werden soll.</span><span class="sxs-lookup"><span data-stu-id="96bec-3090">In complex aggregation scenarios, the DispID is sometimes the only way to invoke the desired member.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-3091">Beginnend mit der [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], diese Methode kann verwendet werden, auf nicht öffentliche Member zuzugreifen, wenn der Aufrufer erteilt wurde <xref:System.Security.Permissions.ReflectionPermission> mit der <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> kennzeichnen und Menge oder eine Teilmenge der Berechtigungssatz die nicht öffentlichen Member an des Aufrufers des beschränkt ist zu gewähren davon.</span><span class="sxs-lookup"><span data-stu-id="96bec-3091">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="96bec-3092">(Finden Sie unter [Überlegungen zur Sicherheit für die Reflektion](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="96bec-3092">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="96bec-3093">Zur Verwendung dieser Funktionen sollte die Anwendung für [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] oder höher ausgelegt sein. </span><span class="sxs-lookup"><span data-stu-id="96bec-3093">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-3094">Im folgenden Beispiel wird `InvokeMember` den Zugriff auf Member eines Typs.</span><span class="sxs-lookup"><span data-stu-id="96bec-3094">The following example uses `InvokeMember` to access members of a type.</span></span>  
  
 [!code-cpp[InvokeMem#1](~/samples/snippets/cpp/VS_Snippets_CLR/InvokeMem/CPP/invokemem.cpp#1)]
 [!code-csharp[InvokeMem#1](~/samples/snippets/csharp/VS_Snippets_CLR/InvokeMem/CS/invokemem.cs#1)]
 [!code-vb[InvokeMem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/InvokeMem/VB/invokemem.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96bec-3095">
            <paramref name="invokeAttr" /> does not contain <see langword="CreateInstance" /> and <paramref name="name" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3095">
              <paramref name="invokeAttr" /> does not contain <see langword="CreateInstance" /> and <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="96bec-3096">
            <paramref name="invokeAttr" /> is not a valid <see cref="T:System.Reflection.BindingFlags" /> attribute.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3096">
              <paramref name="invokeAttr" /> is not a valid <see cref="T:System.Reflection.BindingFlags" /> attribute.</span>
          </span>
          <span data-ttu-id="96bec-3097">-or-  <paramref name="invokeAttr" /> does not contain one of the following binding flags: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3097">-or-  <paramref name="invokeAttr" /> does not contain one of the following binding flags: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="96bec-3098">-or-  <paramref name="invokeAttr" /> contains <see langword="CreateInstance" /> combined with <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3098">-or-  <paramref name="invokeAttr" /> contains <see langword="CreateInstance" /> combined with <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="96bec-3099">-or-  <paramref name="invokeAttr" /> contains both <see langword="GetField" /> and <see langword="SetField" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3099">-or-  <paramref name="invokeAttr" /> contains both <see langword="GetField" /> and <see langword="SetField" />.</span>
          </span>
          <span data-ttu-id="96bec-3100">-or-  <paramref name="invokeAttr" /> contains both <see langword="GetProperty" /> and <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3100">-or-  <paramref name="invokeAttr" /> contains both <see langword="GetProperty" /> and <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="96bec-3101">-or-  <paramref name="invokeAttr" /> contains <see langword="InvokeMethod" /> combined with <see langword="SetField" /> or <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3101">-or-  <paramref name="invokeAttr" /> contains <see langword="InvokeMethod" /> combined with <see langword="SetField" /> or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="96bec-3102">-or-  <paramref name="invokeAttr" /> contains <see langword="SetField" /> and <paramref name="args" /> has more than one element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3102">-or-  <paramref name="invokeAttr" /> contains <see langword="SetField" /> and <paramref name="args" /> has more than one element.</span>
          </span>
          <span data-ttu-id="96bec-3103">-or-  This method is called on a COM object and one of the following binding flags was not passed in: <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" />, or <see langword="BindingFlags.PutRefDispProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3103">-or-  This method is called on a COM object and one of the following binding flags was not passed in: <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" />, or <see langword="BindingFlags.PutRefDispProperty" />.</span>
          </span>
          <span data-ttu-id="96bec-3104">-or-  One of the named parameter arrays contains a string that is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3104">-or-  One of the named parameter arrays contains a string that is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="96bec-3105">The specified member is a class initializer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3105">The specified member is a class initializer.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingFieldException">
          <span data-ttu-id="96bec-3106">The field or property cannot be found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3106">The field or property cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="96bec-3107">No method can be found that matches the arguments in <paramref name="args" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3107">No method can be found that matches the arguments in <paramref name="args" />.</span>
          </span>
          <span data-ttu-id="96bec-3108">-or-  The current <see cref="T:System.Type" /> object represents a type that contains open type parameters, that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3108">-or-  The current <see cref="T:System.Type" /> object represents a type that contains open type parameters, that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetException">
          <span data-ttu-id="96bec-3109">The specified member cannot be invoked on <paramref name="target" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3109">The specified member cannot be invoked on <paramref name="target" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="96bec-3110">More than one method matches the binding criteria.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3110">More than one method matches the binding criteria.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="96bec-3111">The .NET Compact Framework does not currently support this method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3111">The .NET Compact Framework does not currently support this method.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="96bec-3112">The method represented by <paramref name="name" /> has one or more unspecified generic type parameters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3112">The method represented by <paramref name="name" /> has one or more unspecified generic type parameters.</span>
          </span>
          <span data-ttu-id="96bec-3113">That is, the method's <see cref="P:System.Reflection.MethodInfo.ContainsGenericParameters" /> property returns <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3113">That is, the method's <see cref="P:System.Reflection.MethodInfo.ContainsGenericParameters" /> property returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="96bec-3114">Legen Sie für den Zugriff auf nicht öffentliche Member unabhängig von deren Berechtigungssatz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3114">for accessing non-public members regardless of their grant set.</span>
          </span>
          <span data-ttu-id="96bec-3115">Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3115">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="96bec-3116">zum Aufrufen von nicht verwalteten Codes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3116">to call unmanaged code.</span>
          </span>
          <span data-ttu-id="96bec-3117">Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3117">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="T:System.Reflection.ParameterAttributes" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
      </Docs>
    </Member>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] * System.Globalization.CultureInfo -&gt; obj&#xA;override this.InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] * System.Globalization.CultureInfo -&gt; obj" Usage="type.InvokeMember (name, invokeAttr, binder, target, args, culture)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="96bec-3118">The string containing the name of the constructor, method, property, or field member to invoke.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3118">The string containing the name of the constructor, method, property, or field member to invoke.</span>
          </span>
          <span data-ttu-id="96bec-3119">-or-  An empty string ("") to invoke the default member.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3119">-or-  An empty string ("") to invoke the default member.</span>
          </span>
          <span data-ttu-id="96bec-3120">-or-  For <see langword="IDispatch" /> members, a string representing the DispID, for example "[DispID=3]".</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3120">-or-  For <see langword="IDispatch" /> members, a string representing the DispID, for example "[DispID=3]".</span>
          </span>
        </param>
        <param name="invokeAttr">
          <span data-ttu-id="96bec-3121">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3121">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="96bec-3122">The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3122">The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on.</span>
          </span>
          <span data-ttu-id="96bec-3123">The type of lookup need not be specified.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3123">The type of lookup need not be specified.</span>
          </span>
          <span data-ttu-id="96bec-3124">If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" /> are used.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3124">If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" /> are used.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="96bec-3125">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3125">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="96bec-3126">-or-  A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3126">-or-  A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
          <span data-ttu-id="96bec-3127">Note that explicitly defining a <see cref="T:System.Reflection.Binder" /> object may be required for successfully invoking method overloads with variable arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3127">Note that explicitly defining a <see cref="T:System.Reflection.Binder" /> object may be required for successfully invoking method overloads with variable arguments.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="96bec-3128">The object on which to invoke the specified member.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3128">The object on which to invoke the specified member.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="96bec-3129">An array containing the arguments to pass to the member to invoke.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3129">An array containing the arguments to pass to the member to invoke.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="96bec-3130">The object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric <see cref="T:System.String" /> to a <see cref="T:System.Double" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3130">The object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric <see cref="T:System.String" /> to a <see cref="T:System.Double" />.</span>
          </span>
          <span data-ttu-id="96bec-3131">-or-  A null reference (<see langword="Nothing" /> in Visual Basic) to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3131">-or-  A null reference (<see langword="Nothing" /> in Visual Basic) to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-3132">Invokes the specified member, using the specified binding constraints and matching the specified argument list and culture.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3132">Invokes the specified member, using the specified binding constraints and matching the specified argument list and culture.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-3133">An object representing the return value of the invoked member.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3133">An object representing the return value of the invoked member.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3134">Obwohl nicht der Standardbinder verarbeitet <xref:System.Globalization.CultureInfo> (die `culture` Parameter), können Sie die abstrakte <xref:System.Reflection.Binder?displayProperty=nameWithType> Klasse, um einen benutzerdefinierten Binder zu schreiben, der verarbeitet `culture`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3134">Although the default binder does not process <xref:System.Globalization.CultureInfo> (the `culture` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `culture`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-3135">Sie können keine <xref:System.Type.InvokeMember%2A> , eine generische Methode aufzurufen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3135">You cannot use <xref:System.Type.InvokeMember%2A> to invoke a generic method.</span></span>  
  
 <span data-ttu-id="96bec-3136">Die folgenden <xref:System.Reflection.BindingFlags> Filterflags können verwendet werden, auf welche Member in die Suche einbezogen werden:</span><span class="sxs-lookup"><span data-stu-id="96bec-3136">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="96bec-3137">Geben Sie `BindingFlags.Public` öffentliche Mitglieder in die Suche eingeschlossen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3137">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="96bec-3138">Geben Sie `BindingFlags.NonPublic` nicht öffentliche Mitglieder (d. h. private, interne und geschützte Member) in die Suche eingeschlossen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3138">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span>  
  
-   <span data-ttu-id="96bec-3139">Geben Sie `BindingFlags.FlattenHierarchy` auf statische Member der Hierarchie enthalten.</span><span class="sxs-lookup"><span data-stu-id="96bec-3139">Specify `BindingFlags.FlattenHierarchy` to include static members up the hierarchy.</span></span>  
  
 <span data-ttu-id="96bec-3140">Die folgenden <xref:System.Reflection.BindingFlags> Modifiziererflags können verwendet werden, um die Funktionsweise der Suche ändern:</span><span class="sxs-lookup"><span data-stu-id="96bec-3140">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="96bec-3141">`BindingFlags.IgnoreCase` um die Groß-/Kleinschreibung ignorieren `name`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3141">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="96bec-3142">`BindingFlags.DeclaredOnly` Suchen Sie nur die Member deklariert die <xref:System.Type>, nicht die Elemente, die nur geerbt wurden.</span><span class="sxs-lookup"><span data-stu-id="96bec-3142">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="96bec-3143">Die folgenden <xref:System.Reflection.BindingFlags> Aufrufflags können verwendet werden, um anzugeben, welche Aktion mit dem Element:</span><span class="sxs-lookup"><span data-stu-id="96bec-3143">The following <xref:System.Reflection.BindingFlags> invocation flags can be used to denote what action to take with the member:</span></span>  
  
-   <span data-ttu-id="96bec-3144">`CreateInstance` Um einen Konstruktor aufzurufen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3144">`CreateInstance` to invoke a constructor.</span></span> <span data-ttu-id="96bec-3145">`name` wird ignoriert.</span><span class="sxs-lookup"><span data-stu-id="96bec-3145">`name` is ignored.</span></span> <span data-ttu-id="96bec-3146">Mit anderen Aufrufflags nicht gültig.</span><span class="sxs-lookup"><span data-stu-id="96bec-3146">Not valid with other invocation flags.</span></span>  
  
-   <span data-ttu-id="96bec-3147">`InvokeMethod` Um eine Methode, jedoch nicht auf einen Konstruktor oder Typinitialisierer aufzurufen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3147">`InvokeMethod` to invoke a method, but not a constructor or a type initializer.</span></span> <span data-ttu-id="96bec-3148">Ungültig mit `SetField` oder `SetProperty`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3148">Not valid with `SetField` or `SetProperty`.</span></span> <span data-ttu-id="96bec-3149">Wenn `InvokeMethod` wird angegeben, indem selbst `BindingFlags.Public`, `BindingFlags.Instance`, und `BindingFlags.Static` werden automatisch mit eingeschlossen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3149">If `InvokeMethod` is specified by itself, `BindingFlags.Public`, `BindingFlags.Instance`, and `BindingFlags.Static` are automatically included.</span></span>  
  
-   <span data-ttu-id="96bec-3150">`GetField` um den Wert eines Felds zu erhalten.</span><span class="sxs-lookup"><span data-stu-id="96bec-3150">`GetField` to get the value of a field.</span></span> <span data-ttu-id="96bec-3151">Ungültig mit `SetField`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3151">Not valid with `SetField`.</span></span>  
  
-   <span data-ttu-id="96bec-3152">`SetField` um den Wert eines Felds festzulegen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3152">`SetField` to set the value of a field.</span></span> <span data-ttu-id="96bec-3153">Ungültig mit `GetField`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3153">Not valid with `GetField`.</span></span>  
  
-   <span data-ttu-id="96bec-3154">`GetProperty` Um eine Eigenschaft zu erhalten.</span><span class="sxs-lookup"><span data-stu-id="96bec-3154">`GetProperty` to get a property.</span></span> <span data-ttu-id="96bec-3155">Ungültig mit `SetProperty`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3155">Not valid with `SetProperty`.</span></span>  
  
-   <span data-ttu-id="96bec-3156">`SetProperty` Um eine Eigenschaft festzulegen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3156">`SetProperty` to set a property.</span></span> <span data-ttu-id="96bec-3157">Ungültig mit `GetProperty`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3157">Not valid with `GetProperty`.</span></span>  
  
 <span data-ttu-id="96bec-3158">Weitere Informationen finden Sie unter <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="96bec-3158">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="96bec-3159">Eine Methode wird aufgerufen werden, wenn beide der folgenden Bedingungen zutreffen:</span><span class="sxs-lookup"><span data-stu-id="96bec-3159">A method will be invoked if both of the following conditions are true:</span></span>  
  
-   <span data-ttu-id="96bec-3160">Die Anzahl von Parametern in der Deklaration der Methode entspricht der Anzahl der Argumente in der `args` Array (es sei denn, die Standardargumente für den Member definiert sind und `BindingFlags.OptionalParamBinding` angegeben ist).</span><span class="sxs-lookup"><span data-stu-id="96bec-3160">The number of parameters in the method declaration equals the number of arguments in the `args` array (unless default arguments are defined on the member and `BindingFlags.OptionalParamBinding` is specified).</span></span>  
  
-   <span data-ttu-id="96bec-3161">Der Typ jedes Arguments kann von der Binder in den Typ des Parameters konvertiert werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-3161">The type of each argument can be converted by the binder to the type of the parameter.</span></span>  
  
 <span data-ttu-id="96bec-3162">Der Binder findet alle übereinstimmenden Methoden.</span><span class="sxs-lookup"><span data-stu-id="96bec-3162">The binder will find all of the matching methods.</span></span> <span data-ttu-id="96bec-3163">Diese Methoden gefunden werden, basierend auf den Typ der Bindung, die angefordert (<xref:System.Reflection.BindingFlags> Werte `InvokeMethod`, `GetProperty`und so weiter).</span><span class="sxs-lookup"><span data-stu-id="96bec-3163">These methods are found based upon the type of binding requested (<xref:System.Reflection.BindingFlags> values `InvokeMethod`, `GetProperty`, and so on).</span></span> <span data-ttu-id="96bec-3164">Der Satz von Methoden wird durch den Namen, Anzahl von Argumenten und einen Satz von Suchabfragen, die in der Binder definiert gefiltert.</span><span class="sxs-lookup"><span data-stu-id="96bec-3164">The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder.</span></span>  
  
 <span data-ttu-id="96bec-3165">Nachdem die Methode ausgewählt ist, wird es aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3165">After the method is selected, it is invoked.</span></span> <span data-ttu-id="96bec-3166">Barrierefreiheit wird an diesem Punkt überprüft.</span><span class="sxs-lookup"><span data-stu-id="96bec-3166">Accessibility is checked at that point.</span></span> <span data-ttu-id="96bec-3167">Die Suche kann gesteuert werden durchsucht, welche Gruppe von Methoden auf Grundlage der Eingabehilfen-Attribut, das der Methode zugeordnet.</span><span class="sxs-lookup"><span data-stu-id="96bec-3167">The search may control which set of methods are searched based upon the accessibility attribute associated with the method.</span></span> <span data-ttu-id="96bec-3168">Die <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> Methode der <xref:System.Reflection.Binder> -Klasse ist verantwortlich für das Auswählen der Methode aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-3168">The <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> method of the <xref:System.Reflection.Binder> class is responsible for selecting the method to be invoked.</span></span> <span data-ttu-id="96bec-3169">Der Standardbinder wählt die spezifischste Übereinstimmung.</span><span class="sxs-lookup"><span data-stu-id="96bec-3169">The default binder selects the most specific match.</span></span>  
  
 <span data-ttu-id="96bec-3170">Zugriffseinschränkungen werden für voll vertrauenswürdigen Code ignoriert. d. h. können private Konstruktoren, Methoden, Felder und Eigenschaften werden zugegriffen und durch Reflektion aufgerufen werden, wenn der Code vollständig vertrauenswürdig ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-3170">Access restrictions are ignored for fully trusted code; that is, private constructors, methods, fields, and properties can be accessed and invoked through Reflection whenever the code is fully trusted.</span></span>  
  
 <span data-ttu-id="96bec-3171">Sie können `Type.InvokeMember` für einen bestimmten Wert ein Felds festzulegen, durch Angabe <xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="96bec-3171">You can use `Type.InvokeMember` to set a field to a particular value by specifying <xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>.</span></span> <span data-ttu-id="96bec-3172">Beispielsweise sollten Sie eine öffentliche Feld namens ' F ' für Klasse C und F ist eine `String` können Sie Code wie z.B.:</span><span class="sxs-lookup"><span data-stu-id="96bec-3172">For example, if you want to set a public instance field named F on class C, and F is a `String` you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {"strings new value"}, null);`  
  
 <span data-ttu-id="96bec-3173">Wenn F# ist eine `String[]`, können Sie Code wie z.B.:</span><span class="sxs-lookup"><span data-stu-id="96bec-3173">If F is a `String[]`, you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {new String[]{"a","z","c","d"}}, null);`  
  
 <span data-ttu-id="96bec-3174">Das ist das Feld "F" für dieses neue Array initialisiert werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-3174">which will initialize the field F to this new array.</span></span> <span data-ttu-id="96bec-3175">Sie können auch `Type.InvokeMember` auf eine Position in einem Array festlegen, indem der Index des Werts, und klicken Sie dann den nächsten Wert mit Code wie den folgenden:</span><span class="sxs-lookup"><span data-stu-id="96bec-3175">You can also use `Type.InvokeMember` to set a position in an array by supplying the index of the value and then the next value by using code such as the following:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {1, "b"}, null);`  
  
 <span data-ttu-id="96bec-3176">Dies ändert die Zeichenfolge "Z" in das Array, das F in der Zeichenfolge "b" enthält.</span><span class="sxs-lookup"><span data-stu-id="96bec-3176">This will change string "z" in the array that F holds to string "b".</span></span>  
  
 <span data-ttu-id="96bec-3177">Beim Aufruf einer `IDispatch` Member können Sie angeben, die DispID statt den Namen des Members, verwenden das Format der Zeichenfolge "[DispID = ##]".</span><span class="sxs-lookup"><span data-stu-id="96bec-3177">When you invoke an `IDispatch` member you can specify the DispID instead of the member name, using the string format "[DispID=##]".</span></span> <span data-ttu-id="96bec-3178">Z. B. wenn die DispID MyComMethod 3 ist, können Sie angeben die Zeichenfolge "[DispID = 3]" anstelle von "MyComMethod".</span><span class="sxs-lookup"><span data-stu-id="96bec-3178">For example, if the DispID of MyComMethod is 3, you can specify the string "[DispID=3]" instead of "MyComMethod".</span></span> <span data-ttu-id="96bec-3179">Das Aufrufen eines Members durch DispID ist schneller als die Suche nach dem Namen des Members.</span><span class="sxs-lookup"><span data-stu-id="96bec-3179">Invoking a member by DispID is faster than looking up the member by name.</span></span> <span data-ttu-id="96bec-3180">In eine komplexe aggregationsszenarien ist die DispID manchmal die einzige Möglichkeit, den gewünschten Member aufgerufen werden soll.</span><span class="sxs-lookup"><span data-stu-id="96bec-3180">In complex aggregation scenarios, the DispID is sometimes the only way to invoke the desired member.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-3181">Beginnend mit der [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], diese Methode kann verwendet werden, auf nicht öffentliche Member zuzugreifen, wenn der Aufrufer erteilt wurde <xref:System.Security.Permissions.ReflectionPermission> mit der <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> kennzeichnen und Menge oder eine Teilmenge der Berechtigungssatz die nicht öffentlichen Member an des Aufrufers des beschränkt ist zu gewähren davon.</span><span class="sxs-lookup"><span data-stu-id="96bec-3181">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="96bec-3182">(Finden Sie unter [Überlegungen zur Sicherheit für die Reflektion](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="96bec-3182">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="96bec-3183">Zur Verwendung dieser Funktionen sollte die Anwendung für [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] oder höher ausgelegt sein. </span><span class="sxs-lookup"><span data-stu-id="96bec-3183">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96bec-3184">
            <paramref name="invokeAttr" /> does not contain <see langword="CreateInstance" /> and <paramref name="name" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3184">
              <paramref name="invokeAttr" /> does not contain <see langword="CreateInstance" /> and <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="96bec-3185">
            <paramref name="invokeAttr" /> is not a valid <see cref="T:System.Reflection.BindingFlags" /> attribute.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3185">
              <paramref name="invokeAttr" /> is not a valid <see cref="T:System.Reflection.BindingFlags" /> attribute.</span>
          </span>
          <span data-ttu-id="96bec-3186">-or-  <paramref name="invokeAttr" /> does not contain one of the following binding flags: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3186">-or-  <paramref name="invokeAttr" /> does not contain one of the following binding flags: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="96bec-3187">-or-  <paramref name="invokeAttr" /> contains <see langword="CreateInstance" /> combined with <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3187">-or-  <paramref name="invokeAttr" /> contains <see langword="CreateInstance" /> combined with <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="96bec-3188">-or-  <paramref name="invokeAttr" /> contains both <see langword="GetField" /> and <see langword="SetField" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3188">-or-  <paramref name="invokeAttr" /> contains both <see langword="GetField" /> and <see langword="SetField" />.</span>
          </span>
          <span data-ttu-id="96bec-3189">-or-  <paramref name="invokeAttr" /> contains both <see langword="GetProperty" /> and <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3189">-or-  <paramref name="invokeAttr" /> contains both <see langword="GetProperty" /> and <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="96bec-3190">-or-  <paramref name="invokeAttr" /> contains <see langword="InvokeMethod" /> combined with <see langword="SetField" /> or <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3190">-or-  <paramref name="invokeAttr" /> contains <see langword="InvokeMethod" /> combined with <see langword="SetField" /> or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="96bec-3191">-or-  <paramref name="invokeAttr" /> contains <see langword="SetField" /> and <paramref name="args" /> has more than one element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3191">-or-  <paramref name="invokeAttr" /> contains <see langword="SetField" /> and <paramref name="args" /> has more than one element.</span>
          </span>
          <span data-ttu-id="96bec-3192">-or-  This method is called on a COM object and one of the following binding flags was not passed in: <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" />, or <see langword="BindingFlags.PutRefDispProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3192">-or-  This method is called on a COM object and one of the following binding flags was not passed in: <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" />, or <see langword="BindingFlags.PutRefDispProperty" />.</span>
          </span>
          <span data-ttu-id="96bec-3193">-or-  One of the named parameter arrays contains a string that is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3193">-or-  One of the named parameter arrays contains a string that is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="96bec-3194">The specified member is a class initializer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3194">The specified member is a class initializer.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingFieldException">
          <span data-ttu-id="96bec-3195">The field or property cannot be found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3195">The field or property cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="96bec-3196">No method can be found that matches the arguments in <paramref name="args" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3196">No method can be found that matches the arguments in <paramref name="args" />.</span>
          </span>
          <span data-ttu-id="96bec-3197">-or-  The current <see cref="T:System.Type" /> object represents a type that contains open type parameters, that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3197">-or-  The current <see cref="T:System.Type" /> object represents a type that contains open type parameters, that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetException">
          <span data-ttu-id="96bec-3198">The specified member cannot be invoked on <paramref name="target" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3198">The specified member cannot be invoked on <paramref name="target" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="96bec-3199">More than one method matches the binding criteria.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3199">More than one method matches the binding criteria.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="96bec-3200">The method represented by <paramref name="name" /> has one or more unspecified generic type parameters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3200">The method represented by <paramref name="name" /> has one or more unspecified generic type parameters.</span>
          </span>
          <span data-ttu-id="96bec-3201">That is, the method's <see cref="P:System.Reflection.MethodInfo.ContainsGenericParameters" /> property returns <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3201">That is, the method's <see cref="P:System.Reflection.MethodInfo.ContainsGenericParameters" /> property returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="96bec-3202">Legen Sie für den Zugriff auf nicht öffentliche Member unabhängig von deren Berechtigungssatz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3202">for accessing non-public members regardless of their grant set.</span>
          </span>
          <span data-ttu-id="96bec-3203">Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3203">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="96bec-3204">zum Aufrufen von nicht verwalteten Codes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3204">to call unmanaged code.</span>
          </span>
          <span data-ttu-id="96bec-3205">Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3205">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="T:System.Reflection.ParameterAttributes" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
      </Docs>
    </Member>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public abstract object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, valuetype System.Reflection.ParameterModifier[] modifiers, class System.Globalization.CultureInfo culture, string[] namedParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::String ^&gt; ^ namedParameters);" />
      <MemberSignature Language="F#" Value="abstract member InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] * System.Reflection.ParameterModifier[] * System.Globalization.CultureInfo * string[] -&gt; obj" Usage="type.InvokeMember (name, invokeAttr, binder, target, args, modifiers, culture, namedParameters)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="namedParameters" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="96bec-3206">The string containing the name of the constructor, method, property, or field member to invoke.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3206">The string containing the name of the constructor, method, property, or field member to invoke.</span>
          </span>
          <span data-ttu-id="96bec-3207">-or-  An empty string ("") to invoke the default member.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3207">-or-  An empty string ("") to invoke the default member.</span>
          </span>
          <span data-ttu-id="96bec-3208">-or-  For <see langword="IDispatch" /> members, a string representing the DispID, for example "[DispID=3]".</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3208">-or-  For <see langword="IDispatch" /> members, a string representing the DispID, for example "[DispID=3]".</span>
          </span>
        </param>
        <param name="invokeAttr">
          <span data-ttu-id="96bec-3209">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3209">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="96bec-3210">The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3210">The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on.</span>
          </span>
          <span data-ttu-id="96bec-3211">The type of lookup need not be specified.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3211">The type of lookup need not be specified.</span>
          </span>
          <span data-ttu-id="96bec-3212">If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" /> are used.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3212">If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" /> are used.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="96bec-3213">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3213">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="96bec-3214">-or-  A null reference (Nothing in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3214">-or-  A null reference (Nothing in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
          <span data-ttu-id="96bec-3215">Note that explicitly defining a <see cref="T:System.Reflection.Binder" /> object may be required for successfully invoking method overloads with variable arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3215">Note that explicitly defining a <see cref="T:System.Reflection.Binder" /> object may be required for successfully invoking method overloads with variable arguments.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="96bec-3216">The object on which to invoke the specified member.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3216">The object on which to invoke the specified member.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="96bec-3217">An array containing the arguments to pass to the member to invoke.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3217">An array containing the arguments to pass to the member to invoke.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="96bec-3218">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>args</c> array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3218">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>args</c> array.</span>
          </span>
          <span data-ttu-id="96bec-3219">A parameter's associated attributes are stored in the member's signature.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3219">A parameter's associated attributes are stored in the member's signature.</span>
          </span>
          <span data-ttu-id="96bec-3220">The default binder processes this parameter only when calling a COM component.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3220">The default binder processes this parameter only when calling a COM component.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="96bec-3221">The <see cref="T:System.Globalization.CultureInfo" /> object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric String to a Double.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3221">The <see cref="T:System.Globalization.CultureInfo" /> object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric String to a Double.</span>
          </span>
          <span data-ttu-id="96bec-3222">-or-  A null reference (<see langword="Nothing" /> in Visual Basic) to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3222">-or-  A null reference (<see langword="Nothing" /> in Visual Basic) to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.</span>
          </span>
        </param>
        <param name="namedParameters">
          <span data-ttu-id="96bec-3223">An array containing the names of the parameters to which the values in the <c>args</c> array are passed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3223">An array containing the names of the parameters to which the values in the <c>args</c> array are passed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-3224">When overridden in a derived class, invokes the specified member, using the specified binding constraints and matching the specified argument list, modifiers and culture.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3224">When overridden in a derived class, invokes the specified member, using the specified binding constraints and matching the specified argument list, modifiers and culture.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-3225">An object representing the return value of the invoked member.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3225">An object representing the return value of the invoked member.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3226">`InvokeMember` Ruft eine Konstruktor- oder einen Methodenmember, ruft ab oder legt ein Eigenschaftenelement, ruft ab oder legt einen Feld-Datenmember oder abgerufen oder festgelegt ein Element eines Arraymitglieds.</span><span class="sxs-lookup"><span data-stu-id="96bec-3226">`InvokeMember` calls a constructor member or a method member, gets or sets a property member, gets or sets a data field member, or gets or sets an element of an array member.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-3227">Sie können keine <xref:System.Type.InvokeMember%2A> , eine generische Methode aufzurufen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3227">You cannot use <xref:System.Type.InvokeMember%2A> to invoke a generic method.</span></span>  
  
 <span data-ttu-id="96bec-3228">Beim Aufruf einer `IDispatch` Member können Sie angeben, die DispID statt den Namen des Members, verwenden das Format der Zeichenfolge "[DispID = ##]".</span><span class="sxs-lookup"><span data-stu-id="96bec-3228">When you invoke an `IDispatch` member you can specify the DispID instead of the member name, using the string format "[DispID=##]".</span></span> <span data-ttu-id="96bec-3229">Z. B. wenn die DispID MyComMethod 3 ist, können Sie angeben die Zeichenfolge "[DispID = 3]" anstelle von "MyComMethod".</span><span class="sxs-lookup"><span data-stu-id="96bec-3229">For example, if the DispID of MyComMethod is 3, you can specify the string "[DispID=3]" instead of "MyComMethod".</span></span> <span data-ttu-id="96bec-3230">Das Aufrufen eines Members durch DispID ist schneller als die Suche nach dem Namen des Members.</span><span class="sxs-lookup"><span data-stu-id="96bec-3230">Invoking a member by DispID is faster than looking up the member by name.</span></span> <span data-ttu-id="96bec-3231">In eine komplexe aggregationsszenarien ist die DispID manchmal die einzige Möglichkeit, den gewünschten Member aufgerufen werden soll.</span><span class="sxs-lookup"><span data-stu-id="96bec-3231">In complex aggregation scenarios, the DispID is sometimes the only way to invoke the desired member.</span></span>  
  
 <span data-ttu-id="96bec-3232">Obwohl nicht der Standardbinder verarbeitet <xref:System.Reflection.ParameterModifier> oder <xref:System.Globalization.CultureInfo> (die `modifiers` und `culture` Parameter), können Sie die abstrakte <xref:System.Reflection.Binder?displayProperty=nameWithType> Klasse, um einen benutzerdefinierten Binder zu schreiben, der verarbeitet `modifiers` und `culture`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3232">Although the default binder does not process <xref:System.Reflection.ParameterModifier> or <xref:System.Globalization.CultureInfo> (the `modifiers` and `culture` parameters), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers` and `culture`.</span></span> <span data-ttu-id="96bec-3233">`ParameterModifier` wird nur verwendet werden, wenn der Aufruf über COM-Interop und behandelt nur die Parameter, die als Verweis übergeben werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-3233">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="96bec-3234">Alle Parameter in der `namedParameters` Array Ruft den Wert in das entsprechende Element in der `args` Array.</span><span class="sxs-lookup"><span data-stu-id="96bec-3234">Each parameter in the `namedParameters` array gets the value in the corresponding element in the `args` array.</span></span> <span data-ttu-id="96bec-3235">Wenn die Länge des `args` ist größer als die Länge des `namedParameters`, die restlichen Argumentwerte in der Reihenfolge übergeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-3235">If the length of `args` is greater than the length of `namedParameters`, the remaining argument values are passed in order.</span></span>  
  
 <span data-ttu-id="96bec-3236">Die `namedParameters` Array kann verwendet werden, um die Reihenfolge der Argumente in einem Eingabearray ändern.</span><span class="sxs-lookup"><span data-stu-id="96bec-3236">The `namedParameters` array can be used to change the order of arguments in an input array.</span></span> <span data-ttu-id="96bec-3237">Angenommen, die Methode `M(string a, int b)` (`M(ByVal a As String, ByVal b As Integer)` in Visual Basic) und das Eingabearray `{ 42, "x" }`, Eingabe-Array, kann unverändert in übergeben werden `args` Wenn das Array `{ "b", "a" }` für angegeben wird `namedParameters`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3237">For example, given the method `M(string a, int b)` (`M(ByVal a As String, ByVal b As Integer)` in Visual Basic) and the input array `{ 42, "x" }`, the input array can be passed unchanged to `args` if the array `{ "b", "a" }` is supplied for `namedParameters`.</span></span>  
  
 <span data-ttu-id="96bec-3238">Die folgenden <xref:System.Reflection.BindingFlags> Filterflags können verwendet werden, auf welche Member in die Suche einbezogen werden:</span><span class="sxs-lookup"><span data-stu-id="96bec-3238">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="96bec-3239">Geben Sie `BindingFlags.Public` öffentliche Mitglieder in die Suche eingeschlossen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3239">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="96bec-3240">Geben Sie `BindingFlags.NonPublic` nicht öffentliche Mitglieder (d. h. private, interne und geschützte Member) in die Suche eingeschlossen werden sollen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3240">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span>  
  
-   <span data-ttu-id="96bec-3241">Geben Sie `BindingFlags.FlattenHierarchy` auf statische Member der Hierarchie enthalten.</span><span class="sxs-lookup"><span data-stu-id="96bec-3241">Specify `BindingFlags.FlattenHierarchy` to include static members up the hierarchy.</span></span>  
  
 <span data-ttu-id="96bec-3242">Die folgenden <xref:System.Reflection.BindingFlags> Modifiziererflags können verwendet werden, um die Funktionsweise der Suche ändern:</span><span class="sxs-lookup"><span data-stu-id="96bec-3242">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="96bec-3243">`BindingFlags.IgnoreCase` um die Groß-/Kleinschreibung ignorieren `name`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3243">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="96bec-3244">`BindingFlags.DeclaredOnly` Suchen Sie nur die Member deklariert die <xref:System.Type>, nicht die Elemente, die nur geerbt wurden.</span><span class="sxs-lookup"><span data-stu-id="96bec-3244">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="96bec-3245">Die folgenden <xref:System.Reflection.BindingFlags> Aufrufflags können verwendet werden, um anzugeben, welche Aktion mit dem Element:</span><span class="sxs-lookup"><span data-stu-id="96bec-3245">The following <xref:System.Reflection.BindingFlags> invocation flags can be used to denote what action to take with the member:</span></span>  
  
-   <span data-ttu-id="96bec-3246">`CreateInstance` Um einen Konstruktor aufzurufen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3246">`CreateInstance` to invoke a constructor.</span></span> <span data-ttu-id="96bec-3247">`name` wird ignoriert.</span><span class="sxs-lookup"><span data-stu-id="96bec-3247">`name` is ignored.</span></span> <span data-ttu-id="96bec-3248">Mit anderen Aufrufflags nicht gültig.</span><span class="sxs-lookup"><span data-stu-id="96bec-3248">Not valid with other invocation flags.</span></span>  
  
-   <span data-ttu-id="96bec-3249">`InvokeMethod` Um eine Methode, jedoch nicht auf einen Konstruktor oder Typinitialisierer aufzurufen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3249">`InvokeMethod` to invoke a method, but not a constructor or a type initializer.</span></span> <span data-ttu-id="96bec-3250">Ungültig mit `SetField` oder `SetProperty`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3250">Not valid with `SetField` or `SetProperty`.</span></span> <span data-ttu-id="96bec-3251">Wenn `InvokeMethod` wird angegeben, indem selbst `BindingFlags.Public`, `BindingFlags.Instance`, und `BindingFlags.Static` werden automatisch mit eingeschlossen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3251">If `InvokeMethod` is specified by itself, `BindingFlags.Public`, `BindingFlags.Instance`, and `BindingFlags.Static` are automatically included.</span></span>  
  
-   <span data-ttu-id="96bec-3252">`GetField` um den Wert eines Felds zu erhalten.</span><span class="sxs-lookup"><span data-stu-id="96bec-3252">`GetField` to get the value of a field.</span></span> <span data-ttu-id="96bec-3253">Ungültig mit `SetField`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3253">Not valid with `SetField`.</span></span>  
  
-   <span data-ttu-id="96bec-3254">`SetField` um den Wert eines Felds festzulegen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3254">`SetField` to set the value of a field.</span></span> <span data-ttu-id="96bec-3255">Ungültig mit `GetField`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3255">Not valid with `GetField`.</span></span>  
  
-   <span data-ttu-id="96bec-3256">`GetProperty` Um eine Eigenschaft zu erhalten.</span><span class="sxs-lookup"><span data-stu-id="96bec-3256">`GetProperty` to get a property.</span></span> <span data-ttu-id="96bec-3257">Ungültig mit `SetProperty`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3257">Not valid with `SetProperty`.</span></span>  
  
-   <span data-ttu-id="96bec-3258">`SetProperty` Um eine Eigenschaft festzulegen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3258">`SetProperty` to set a property.</span></span> <span data-ttu-id="96bec-3259">Ungültig mit `GetProperty`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3259">Not valid with `GetProperty`.</span></span>  
  
 <span data-ttu-id="96bec-3260">Weitere Informationen finden Sie unter <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="96bec-3260">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="96bec-3261">Eine Methode wird aufgerufen werden, wenn beide der folgenden Bedingungen zutreffen:</span><span class="sxs-lookup"><span data-stu-id="96bec-3261">A method will be invoked if both of the following conditions are true:</span></span>  
  
-   <span data-ttu-id="96bec-3262">Die Anzahl von Parametern in der Deklaration der Methode entspricht der Anzahl der Argumente in der `args` Array (es sei denn, die Standardargumente für den Member definiert sind und `BindingFlags.OptionalParamBinding` angegeben ist).</span><span class="sxs-lookup"><span data-stu-id="96bec-3262">The number of parameters in the method declaration equals the number of arguments in the `args` array (unless default arguments are defined on the member and `BindingFlags.OptionalParamBinding` is specified).</span></span>  
  
-   <span data-ttu-id="96bec-3263">Der Typ jedes Arguments kann von der Binder in den Typ des Parameters konvertiert werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-3263">The type of each argument can be converted by the binder to the type of the parameter.</span></span>  
  
 <span data-ttu-id="96bec-3264">Der Binder findet alle übereinstimmenden Methoden.</span><span class="sxs-lookup"><span data-stu-id="96bec-3264">The binder will find all of the matching methods.</span></span> <span data-ttu-id="96bec-3265">Diese Methoden gefunden werden, basierend auf den Typ der Bindung, die angefordert (<xref:System.Reflection.BindingFlags> Werte `InvokeMethod`, `GetProperty`und so weiter).</span><span class="sxs-lookup"><span data-stu-id="96bec-3265">These methods are found based upon the type of binding requested (<xref:System.Reflection.BindingFlags> values `InvokeMethod`, `GetProperty`, and so on).</span></span> <span data-ttu-id="96bec-3266">Der Satz von Methoden wird durch den Namen, Anzahl von Argumenten und einen Satz von Suchabfragen, die in der Binder definiert gefiltert.</span><span class="sxs-lookup"><span data-stu-id="96bec-3266">The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder.</span></span>  
  
 <span data-ttu-id="96bec-3267">Nachdem die Methode ausgewählt ist, wird es aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3267">After the method is selected, it is invoked.</span></span> <span data-ttu-id="96bec-3268">Barrierefreiheit wird an diesem Punkt überprüft.</span><span class="sxs-lookup"><span data-stu-id="96bec-3268">Accessibility is checked at that point.</span></span> <span data-ttu-id="96bec-3269">Die Suche kann gesteuert werden durchsucht, welche Gruppe von Methoden auf Grundlage der Eingabehilfen-Attribut, das der Methode zugeordnet.</span><span class="sxs-lookup"><span data-stu-id="96bec-3269">The search may control which set of methods are searched based upon the accessibility attribute associated with the method.</span></span> <span data-ttu-id="96bec-3270">Die <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> Methode der <xref:System.Reflection.Binder> -Klasse ist verantwortlich für das Auswählen der Methode aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-3270">The <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> method of the <xref:System.Reflection.Binder> class is responsible for selecting the method to be invoked.</span></span> <span data-ttu-id="96bec-3271">Der Standardbinder wählt die spezifischste Übereinstimmung.</span><span class="sxs-lookup"><span data-stu-id="96bec-3271">The default binder selects the most specific match.</span></span>  
  
 <span data-ttu-id="96bec-3272">`InvokeMember` kann verwendet werden, zum Aufrufen von Methoden mit Parametern, die über Standardwerte verfügen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3272">`InvokeMember` can be used to invoke methods with parameters that have default values.</span></span> <span data-ttu-id="96bec-3273">Um auf diese Methoden zu binden, muss für die Reflektion <xref:System.Reflection.BindingFlags.OptionalParamBinding?displayProperty=nameWithType> angegeben werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-3273">To bind to these methods, Reflection requires <xref:System.Reflection.BindingFlags.OptionalParamBinding?displayProperty=nameWithType> to be specified.</span></span> <span data-ttu-id="96bec-3274">Für einen Parameter, die einen Standardwert verfügt, Sie können einen anderen Wert angeben, oder geben Sie <xref:System.Reflection.Missing.Value?displayProperty=nameWithType> auf den Standardwert verwenden.</span><span class="sxs-lookup"><span data-stu-id="96bec-3274">For a parameter that has a default value, you can either supply a different value, or supply <xref:System.Reflection.Missing.Value?displayProperty=nameWithType> to use the default value.</span></span>  
  
 <span data-ttu-id="96bec-3275">Betrachten Sie beispielsweise eine Methode z. B. MyMethod (Int x, "float" y = 2.0).</span><span class="sxs-lookup"><span data-stu-id="96bec-3275">For example, consider a method such as MyMethod(int x, float y = 2.0).</span></span> <span data-ttu-id="96bec-3276">Um diese Methode mit dem nur das erste Argument als MyMethod(4) aufzurufen, übergeben Sie einen der oben genannten Bindungsflags und zwei Argumente, d. h. 4 für das erste Argument übergeben und `Missing.Value` für das zweite Argument.</span><span class="sxs-lookup"><span data-stu-id="96bec-3276">To invoke this method with only the first argument as MyMethod(4), pass one of the above binding flags and pass two arguments, namely, 4 for the first argument and `Missing.Value` for the second argument.</span></span> <span data-ttu-id="96bec-3277">Es sei denn, Sie verwenden `Missing.Value`, dürfen nicht ausgelassen werden optionale Parameter mit dem `Invoke` Methode.</span><span class="sxs-lookup"><span data-stu-id="96bec-3277">Unless you use `Missing.Value`, you may not omit optional parameters with the `Invoke` method.</span></span> <span data-ttu-id="96bec-3278">Wenn Sie dies tun müssen, verwenden Sie `InvokeMember` stattdessen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3278">If you must do so, use `InvokeMember` instead.</span></span>  
  
 <span data-ttu-id="96bec-3279">Zugriffseinschränkungen werden für voll vertrauenswürdigen Code ignoriert. d. h. private Konstruktoren, Methoden, Felder und Eigenschaften und werden können durch aufgerufen <xref:System.Reflection> jedes Mal, wenn der Code vollständig vertrauenswürdig ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-3279">Access restrictions are ignored for fully trusted code; that is, private constructors, methods, fields, and properties can be accessed and invoked through <xref:System.Reflection> whenever the code is fully trusted.</span></span>  
  
 <span data-ttu-id="96bec-3280">Sie können `Type.InvokeMember` für einen bestimmten Wert ein Felds festzulegen, durch Angabe <xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="96bec-3280">You can use `Type.InvokeMember` to set a field to a particular value by specifying <xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>.</span></span> <span data-ttu-id="96bec-3281">Beispielsweise sollten Sie eine öffentliche Feld namens ' F ' für Klasse C und F ist eine `String`, können Sie Code wie z.B.:</span><span class="sxs-lookup"><span data-stu-id="96bec-3281">For example, if you want to set a public instance field named F on class C, and F is a `String`, you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {"strings new value"}, null, null, null);`  
  
 <span data-ttu-id="96bec-3282">Wenn F# ist eine `String[]`, können Sie Code wie z.B.:</span><span class="sxs-lookup"><span data-stu-id="96bec-3282">If F is a `String[]`, you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {new String[]{"a","z","c","d"}}, null, null, null);`  
  
 <span data-ttu-id="96bec-3283">Das ist das Feld "F" für dieses neue Array initialisiert werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-3283">which will initialize the field F to this new array.</span></span> <span data-ttu-id="96bec-3284">Sie können auch `Type.InvokeMember` auf eine Position in einem Array festlegen, indem der Index des Werts, und klicken Sie dann den nächsten Wert mit Code wie den folgenden:</span><span class="sxs-lookup"><span data-stu-id="96bec-3284">You can also use `Type.InvokeMember` to set a position in an array by supplying the index of the value and then the next value by using code such as the following:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {1, "b"}, null, null, null);`  
  
 <span data-ttu-id="96bec-3285">Dies ändert die Zeichenfolge "Z" in das Array, das F in der Zeichenfolge "b" enthält.</span><span class="sxs-lookup"><span data-stu-id="96bec-3285">This will change string "z" in the array that F holds to string "b".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-3286">Beginnend mit der [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], diese Methode kann verwendet werden, auf nicht öffentliche Member zuzugreifen, wenn der Aufrufer erteilt wurde <xref:System.Security.Permissions.ReflectionPermission> mit der <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> kennzeichnen und Menge oder eine Teilmenge der Berechtigungssatz die nicht öffentlichen Member an des Aufrufers des beschränkt ist zu gewähren davon.</span><span class="sxs-lookup"><span data-stu-id="96bec-3286">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="96bec-3287">(Finden Sie unter [Überlegungen zur Sicherheit für die Reflektion](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="96bec-3287">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="96bec-3288">Zur Verwendung dieser Funktionen sollte die Anwendung für [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] oder höher ausgelegt sein. </span><span class="sxs-lookup"><span data-stu-id="96bec-3288">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96bec-3289">
            <paramref name="invokeAttr" /> does not contain <see langword="CreateInstance" /> and <paramref name="name" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3289">
              <paramref name="invokeAttr" /> does not contain <see langword="CreateInstance" /> and <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="96bec-3290">
            <paramref name="args" /> and <paramref name="modifiers" /> do not have the same length.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3290">
              <paramref name="args" /> and <paramref name="modifiers" /> do not have the same length.</span>
          </span>
          <span data-ttu-id="96bec-3291">-or-  <paramref name="invokeAttr" /> is not a valid <see cref="T:System.Reflection.BindingFlags" /> attribute.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3291">-or-  <paramref name="invokeAttr" /> is not a valid <see cref="T:System.Reflection.BindingFlags" /> attribute.</span>
          </span>
          <span data-ttu-id="96bec-3292">-or-  <paramref name="invokeAttr" /> does not contain one of the following binding flags: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3292">-or-  <paramref name="invokeAttr" /> does not contain one of the following binding flags: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="96bec-3293">-or-  <paramref name="invokeAttr" /> contains <see langword="CreateInstance" /> combined with <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3293">-or-  <paramref name="invokeAttr" /> contains <see langword="CreateInstance" /> combined with <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="96bec-3294">-or-  <paramref name="invokeAttr" /> contains both <see langword="GetField" /> and <see langword="SetField" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3294">-or-  <paramref name="invokeAttr" /> contains both <see langword="GetField" /> and <see langword="SetField" />.</span>
          </span>
          <span data-ttu-id="96bec-3295">-or-  <paramref name="invokeAttr" /> contains both <see langword="GetProperty" /> and <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3295">-or-  <paramref name="invokeAttr" /> contains both <see langword="GetProperty" /> and <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="96bec-3296">-or-  <paramref name="invokeAttr" /> contains <see langword="InvokeMethod" /> combined with <see langword="SetField" /> or <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3296">-or-  <paramref name="invokeAttr" /> contains <see langword="InvokeMethod" /> combined with <see langword="SetField" /> or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="96bec-3297">-or-  <paramref name="invokeAttr" /> contains <see langword="SetField" /> and <paramref name="args" /> has more than one element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3297">-or-  <paramref name="invokeAttr" /> contains <see langword="SetField" /> and <paramref name="args" /> has more than one element.</span>
          </span>
          <span data-ttu-id="96bec-3298">-or-  The named parameter array is larger than the argument array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3298">-or-  The named parameter array is larger than the argument array.</span>
          </span>
          <span data-ttu-id="96bec-3299">-or-  This method is called on a COM object and one of the following binding flags was not passed in: <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" />, or <see langword="BindingFlags.PutRefDispProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3299">-or-  This method is called on a COM object and one of the following binding flags was not passed in: <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" />, or <see langword="BindingFlags.PutRefDispProperty" />.</span>
          </span>
          <span data-ttu-id="96bec-3300">-or-  One of the named parameter arrays contains a string that is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3300">-or-  One of the named parameter arrays contains a string that is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="96bec-3301">The specified member is a class initializer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3301">The specified member is a class initializer.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingFieldException">
          <span data-ttu-id="96bec-3302">The field or property cannot be found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3302">The field or property cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="96bec-3303">No method can be found that matches the arguments in <paramref name="args" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3303">No method can be found that matches the arguments in <paramref name="args" />.</span>
          </span>
          <span data-ttu-id="96bec-3304">-or-  No member can be found that has the argument names supplied in <paramref name="namedParameters" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3304">-or-  No member can be found that has the argument names supplied in <paramref name="namedParameters" />.</span>
          </span>
          <span data-ttu-id="96bec-3305">-or-  The current <see cref="T:System.Type" /> object represents a type that contains open type parameters, that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3305">-or-  The current <see cref="T:System.Type" /> object represents a type that contains open type parameters, that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetException">
          <span data-ttu-id="96bec-3306">The specified member cannot be invoked on <paramref name="target" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3306">The specified member cannot be invoked on <paramref name="target" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="96bec-3307">More than one method matches the binding criteria.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3307">More than one method matches the binding criteria.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="96bec-3308">The method represented by <paramref name="name" /> has one or more unspecified generic type parameters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3308">The method represented by <paramref name="name" /> has one or more unspecified generic type parameters.</span>
          </span>
          <span data-ttu-id="96bec-3309">That is, the method's <see cref="P:System.Reflection.MethodInfo.ContainsGenericParameters" /> property returns <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3309">That is, the method's <see cref="P:System.Reflection.MethodInfo.ContainsGenericParameters" /> property returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="96bec-3310">Legen Sie für den Zugriff auf nicht öffentliche Member unabhängig von deren Berechtigungssatz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3310">for accessing non-public members regardless of their grant set.</span>
          </span>
          <span data-ttu-id="96bec-3311">Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3311">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="96bec-3312">zum Aufrufen von nicht verwalteten Codes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3312">to call unmanaged code.</span>
          </span>
          <span data-ttu-id="96bec-3313">Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3313">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="T:System.Reflection.ParameterAttributes" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
      </Docs>
    </Member>
    <Member MemberName="IsAbstract">
      <MemberSignature Language="C#" Value="public bool IsAbstract { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAbstract" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsAbstract" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAbstract As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAbstract { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAbstract : bool" Usage="System.Type.IsAbstract" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsAbstract</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3314">Gets a value indicating whether the <see cref="T:System.Type" /> is abstract and must be overridden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3314">Gets a value indicating whether the <see cref="T:System.Type" /> is abstract and must be overridden.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-3315">
            <see langword="true" />, wenn <see cref="T:System.Type" /> abstrakt ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3315">
              <see langword="true" /> if the <see cref="T:System.Type" /> is abstract; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3316">Die <xref:System.Type.IsAbstract%2A> -Eigenschaft gibt `true` in den folgenden Fällen:</span><span class="sxs-lookup"><span data-stu-id="96bec-3316">The <xref:System.Type.IsAbstract%2A> property returns `true` in the following cases:</span></span>  
  
-   <span data-ttu-id="96bec-3317">Der aktuelle Typ ist abstrakt. d. h. es kann nicht instanziiert werden und dienen nur als Basisklasse für abgeleitete Klassen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3317">The current type is abstract; that is, it cannot be instantiated, but can only serve as the base class for derived classes.</span></span> <span data-ttu-id="96bec-3318">Abstrakte Klassen sind in c# mit markiert die [abstrakte](~/docs/csharp/language-reference/keywords/abstract.md) Schlüsselwort in Visual Basic markiert sind mit den [MustInherit](~/docs/visual-basic/language-reference/modifiers/mustinherit.md) Schlüsselwort.</span><span class="sxs-lookup"><span data-stu-id="96bec-3318">In C#, abstract classes are marked with the [abstract](~/docs/csharp/language-reference/keywords/abstract.md) keyword; in Visual Basic, they are marked with the [MustInherit](~/docs/visual-basic/language-reference/modifiers/mustinherit.md) keyword.</span></span>  
  
-   <span data-ttu-id="96bec-3319">Der aktuelle Typ ist eine Schnittstelle.</span><span class="sxs-lookup"><span data-stu-id="96bec-3319">The current type is an interface.</span></span>  
  
 <span data-ttu-id="96bec-3320">Wenn die aktuelle <xref:System.Type> einen Typparameter in der Definition eines generischen Typs oder generische Methode darstellt, auf diese Eigenschaft gibt immer `false`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3320">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-3321">Das folgende Beispiel erstellt ein Array von <xref:System.Type> Objekte, die die folgenden Typen darstellen: Typ gibt enthält `true` , wenn das angegebene Objekt `abstract`ist, andernfalls gibt `false`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3321">The following example creates an array of <xref:System.Type> objects that represent the following types:contains type returns `true` if the specified object is `abstract`; otherwise, it returns `false`.</span></span>  
  
-   <span data-ttu-id="96bec-3322">`AbstractClass`, eine abstrakte Klasse (eine Klasse als markiert `abstract` in C# geschrieben und `MustInherit` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="96bec-3322">`AbstractClass`, an abstract class (a class marked as `abstract` in C# and `MustInherit` in Visual Basic).</span></span>  
  
-   <span data-ttu-id="96bec-3323">`DerivedClass`, eine Klasse, die von erbt `AbstractClass`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3323">`DerivedClass`, a class that inherits from `AbstractClass`.</span></span>  
  
-   <span data-ttu-id="96bec-3324">`SingleClass`, einer nicht vererbbaren Klasse.</span><span class="sxs-lookup"><span data-stu-id="96bec-3324">`SingleClass`, a non-inheritable class.</span></span> <span data-ttu-id="96bec-3325">Es wird definiert als `sealed` in C# geschrieben und `NotInheritable` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="96bec-3325">It is defined as `sealed` in C# and `NotInheritable` in Visual Basic.</span></span>  
  
-   <span data-ttu-id="96bec-3326">`ITypeInfo`, eine Schnittstelle.</span><span class="sxs-lookup"><span data-stu-id="96bec-3326">`ITypeInfo`, an interface.</span></span>  
  
-   <span data-ttu-id="96bec-3327">`ImplementingClass`, eine Klasse, implementiert die `ITypeInfo` Schnittstelle.</span><span class="sxs-lookup"><span data-stu-id="96bec-3327">`ImplementingClass`, a class that implements the `ITypeInfo` interface.</span></span>  
  
 <span data-ttu-id="96bec-3328">Gibt die Methode zurück `true` nur für `AbstractClass`, die abstrakte Klasse, und `ITypeInfo`, die Schnittstelle.</span><span class="sxs-lookup"><span data-stu-id="96bec-3328">The method returns `true` only for `AbstractClass`, the abstract class, and `ITypeInfo`, the interface.</span></span>  
  
 [!code-csharp[System.Type.IsAbstract#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isabstract/cs/isabstract1.cs#1)]
 [!code-vb[System.Type.IsAbstract#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isabstract/vb/isabstract1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsAnsiClass">
      <MemberSignature Language="C#" Value="public bool IsAnsiClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAnsiClass" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsAnsiClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAnsiClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAnsiClass { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAnsiClass : bool" Usage="System.Type.IsAnsiClass" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsAnsiClass</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3329">Gets a value indicating whether the string format attribute <see langword="AnsiClass" /> is selected for the <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3329">Gets a value indicating whether the string format attribute <see langword="AnsiClass" /> is selected for the <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-3330">
            <see langword="true" />, wenn für <see langword="AnsiClass" /> das Zeichenfolgenformatattribut <see cref="T:System.Type" /> ausgewählt ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3330">
              <see langword="true" /> if the string format attribute <see langword="AnsiClass" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3331">Die <xref:System.Reflection.TypeAttributes.StringFormatMask> wählt die Zeichenfolgenformatattribute.</span><span class="sxs-lookup"><span data-stu-id="96bec-3331">The <xref:System.Reflection.TypeAttributes.StringFormatMask> selects the string format attributes.</span></span> <span data-ttu-id="96bec-3332">Die Zeichenfolge Formatattribute zur Verbesserung der Interoperabilität von definieren, wie Zeichenfolgen interpretiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="96bec-3332">The string format attributes enhance interoperability by defining how strings should be interpreted.</span></span>  
  
 <span data-ttu-id="96bec-3333">Wenn die aktuelle <xref:System.Type> stellt ein generischer Typ, der diese Eigenschaft bezieht sich auf die Definition des generischen Typs, von dem der Typ konstruiert wurde.</span><span class="sxs-lookup"><span data-stu-id="96bec-3333">If the current <xref:System.Type> represents a generic type, this property pertains to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="96bec-3334">Z. B. wenn die aktuelle <xref:System.Type> stellt `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), der Wert dieser Eigenschaft richtet sich nach `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3334">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="96bec-3335">Wenn die aktuelle <xref:System.Type> einen Typparameter eines generischen Typs darstellt, auf diese Eigenschaft gibt immer `false`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3335">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-3336">Im folgenden Beispiel ruft die Feldinformationen und überprüft, ob die `AnsiClass` Attribut.</span><span class="sxs-lookup"><span data-stu-id="96bec-3336">The following example gets the field information and checks for the `AnsiClass` attribute.</span></span>  
  
 [!code-cpp[Type_IsAnsiClass#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsAnsiClass/CPP/Type_IsAnsiClass.cpp#1)]
 [!code-csharp[Type_IsAnsiClass#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsAnsiClass/CS/type_isansiclass.cs#1)]
 [!code-vb[Type_IsAnsiClass#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsAnsiClass/VB/type_isansiclass.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsUnicodeClass" />
        <altmember cref="P:System.Type.IsAutoClass" />
      </Docs>
    </Member>
    <Member MemberName="IsArray">
      <MemberSignature Language="C#" Value="public bool IsArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsArray" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsArray" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsArray { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsArray : bool" Usage="System.Type.IsArray" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsArray</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3337">Gets a value that indicates whether the type is an array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3337">Gets a value that indicates whether the type is an array.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-3338">
            <see langword="true" />, wenn der aktuelle Typ ein Array ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3338">
              <see langword="true" /> if the current type is an array; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3339">Die <xref:System.Type.IsArray%2A> -Eigenschaft gibt `false` für die <xref:System.Array> Klasse.</span><span class="sxs-lookup"><span data-stu-id="96bec-3339">The <xref:System.Type.IsArray%2A> property returns `false` for the <xref:System.Array> class.</span></span> <span data-ttu-id="96bec-3340">Sie gibt überdies `false` , wenn die aktuelle Instanz ist eine <xref:System.Type> -Objekt, das einen Auflistungstyp oder eine Schnittstelle, die mit Auflistungen, z. B. funktionieren darstellt <xref:System.Collections.IEnumerable> oder <xref:System.Collections.Generic.IEnumerable%601>.</span><span class="sxs-lookup"><span data-stu-id="96bec-3340">It also returns `false` if the current instance is a <xref:System.Type> object that represents a collection type or an interface designed to work with collections, such as <xref:System.Collections.IEnumerable> or <xref:System.Collections.Generic.IEnumerable%601>.</span></span>  
  
 <span data-ttu-id="96bec-3341">Verwenden Sie z. B. Code, um für ein Array zu überprüfen:</span><span class="sxs-lookup"><span data-stu-id="96bec-3341">To check for an array, use code such as:</span></span>  
  
```csharp  
typeof(Array).IsAssignableFrom(type)  
```  
  
```vb  
GetType(Array).IsAssignableFrom(type)  
```  
  
 <span data-ttu-id="96bec-3342">Wenn der aktuelle Typ ein generischer Typ oder einen Typparameter in der Definition einer generischen Typ-oder Methodendefinition darstellt, gibt diese Eigenschaft immer `false`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3342">If the current type represents a generic type, or a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="96bec-3343">Diese Eigenschaft ist schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="96bec-3343">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-3344">Das folgende Beispiel veranschaulicht die Verwendung der <xref:System.Type.IsArray%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="96bec-3344">The following example demonstrates using the <xref:System.Type.IsArray%2A> property.</span></span>  
  
 [!code-csharp[System.Type.IsArray#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isarray/cs/isarray2.cs#1)]
 [!code-vb[System.Type.IsArray#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isarray/vb/isarray2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsArrayImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsArrayImpl">
      <MemberSignature Language="C#" Value="protected abstract bool IsArrayImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsArrayImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsArrayImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function IsArrayImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool IsArrayImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsArrayImpl : unit -&gt; bool" Usage="type.IsArrayImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3345">When overridden in a derived class, implements the <see cref="P:System.Type.IsArray" /> property and determines whether the <see cref="T:System.Type" /> is an array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3345">When overridden in a derived class, implements the <see cref="P:System.Type.IsArray" /> property and determines whether the <see cref="T:System.Type" /> is an array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-3346">
            <see langword="true" /> if the <see cref="T:System.Type" /> is an array; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3346">
              <see langword="true" /> if the <see cref="T:System.Type" /> is an array; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3347">Eine Instanz von der <xref:System.Array> Klasse zurückgeben muss `false` da es sich um ein Objekt, das nicht in ein Array handelt.</span><span class="sxs-lookup"><span data-stu-id="96bec-3347">An instance of the <xref:System.Array> class must return `false` because it is an object, not an array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-3348">Im folgende Beispiel überschreibt die `IsArrayImpl` -Methode in der die `MyTypeDelegator` -Klasse überprüft, ob eine Variable ein Array, und das Ergebnis wird angezeigt.</span><span class="sxs-lookup"><span data-stu-id="96bec-3348">The following example overrides the `IsArrayImpl` method in the `MyTypeDelegator` class, checks if a variable is an array, and displays the result.</span></span>  
  
 [!code-cpp[Type_IsArrayImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsArrayImpl/CPP/type_isarrayimpl.cpp#1)]
 [!code-csharp[Type_IsArrayImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsArrayImpl/CS/type_isarrayimpl.cs#1)]
 [!code-vb[Type_IsArrayImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsArrayImpl/VB/type_isarrayimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsArray" />
      </Docs>
    </Member>
    <Member MemberName="IsAssignableFrom">
      <MemberSignature Language="C#" Value="public virtual bool IsAssignableFrom (Type c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsAssignableFrom(class System.Type c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsAssignableFrom(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsAssignableFrom (c As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsAssignableFrom(Type ^ c);" />
      <MemberSignature Language="F#" Value="abstract member IsAssignableFrom : Type -&gt; bool&#xA;override this.IsAssignableFrom : Type -&gt; bool" Usage="type.IsAssignableFrom c" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.IsAssignableFrom(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="c">
          <span data-ttu-id="96bec-3349">The type to compare with the current type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3349">The type to compare with the current type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-3350">Determines whether an instance of a specified type can be assigned to an instance of the current type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3350">Determines whether an instance of a specified type can be assigned to an instance of the current type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-3351">
            <see langword="true" /> if any of the following conditions is true:  -   <paramref name="c" /> and the current instance represent the same type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3351">
              <see langword="true" /> if any of the following conditions is true:  -   <paramref name="c" /> and the current instance represent the same type.</span>
          </span>
          <span data-ttu-id="96bec-3352">  
  
-   <paramref name="c" /> is derived either directly or indirectly from the current instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3352">  
  
-   <paramref name="c" /> is derived either directly or indirectly from the current instance.</span>
          </span>
          <span data-ttu-id="96bec-3353">
            <paramref name="c" /> is derived directly from the current instance if it inherits from the current instance; <paramref name="c" /> is derived indirectly from the current instance if it inherits from a succession of one or more classes that inherit from the current instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3353">
              <paramref name="c" /> is derived directly from the current instance if it inherits from the current instance; <paramref name="c" /> is derived indirectly from the current instance if it inherits from a succession of one or more classes that inherit from the current instance.</span>
          </span>
          <span data-ttu-id="96bec-3354">-   The current instance is an interface that <paramref name="c" /> implements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3354">-   The current instance is an interface that <paramref name="c" /> implements.</span>
          </span>
          <span data-ttu-id="96bec-3355">  
  
-   <paramref name="c" /> is a generic type parameter, and the current instance represents one of the constraints of <paramref name="c" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3355">  
  
-   <paramref name="c" /> is a generic type parameter, and the current instance represents one of the constraints of <paramref name="c" />.</span>
          </span>
          <span data-ttu-id="96bec-3356">In the following example, the current instance is a <see cref="T:System.Type" /> object that represents the <see cref="T:System.IO.Stream" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3356">In the following example, the current instance is a <see cref="T:System.Type" /> object that represents the <see cref="T:System.IO.Stream" /> class.</span>
          </span>
          <span data-ttu-id="96bec-3357">
            <c>GenericWithConstraint</c> is a generic type whose generic type parameter must be of type    <see cref="T:System.IO.Stream" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3357">
              <c>GenericWithConstraint</c> is a generic type whose generic type parameter must be of type    <see cref="T:System.IO.Stream" />.</span>
          </span>
          <span data-ttu-id="96bec-3358">Passing its generic type parameter to the <see cref="M:System.Type.IsAssignableFrom(System.Type)" /> indicates that  an instance of the generic type parameter can be assigned to an <see cref="T:System.IO.Stream" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3358">Passing its generic type parameter to the <see cref="M:System.Type.IsAssignableFrom(System.Type)" /> indicates that  an instance of the generic type parameter can be assigned to an <see cref="T:System.IO.Stream" /> object.</span>
          </span>
          <span data-ttu-id="96bec-3359">[!code-csharp[System.Type.IsAssignableFrom#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isassignablefrom/cs/IsAssignableFrom2.cs#2)] [!code-vb[System.Type.IsAssignableFrom#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isassignablefrom/vb/IsAssignableFrom2.vb#2)]  -   <paramref name="c" /> represents a value type, and the current instance represents <c>Nullable&lt;c&gt;</c> (<c>Nullable(Of c)</c> in Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3359">[!code-csharp[System.Type.IsAssignableFrom#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isassignablefrom/cs/IsAssignableFrom2.cs#2)] [!code-vb[System.Type.IsAssignableFrom#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isassignablefrom/vb/IsAssignableFrom2.vb#2)]  -   <paramref name="c" /> represents a value type, and the current instance represents <c>Nullable&lt;c&gt;</c> (<c>Nullable(Of c)</c> in Visual Basic).</span>
          </span>
          <span data-ttu-id="96bec-3360">
            <see langword="false" /> if none of these conditions are true, or if <paramref name="c" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3360">
              <see langword="false" /> if none of these conditions are true, or if <paramref name="c" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3361">Die <xref:System.Type.IsAssignableFrom%2A> Methode kann verwendet werden, um zu bestimmen, ob eine Instanz von `c` zugewiesen werden zu einer Instanz des aktuellen Typs, die Methode ist besonders hilfreich, wenn Sie Objekte behandeln, deren Typen zur Entwurfszeit nicht bekannt sind, und ermöglicht für bedingte Zuweisung, wie im folgenden Beispiel gezeigt.</span><span class="sxs-lookup"><span data-stu-id="96bec-3361">The <xref:System.Type.IsAssignableFrom%2A> method can be used to determine whether an instance of `c` can be assigned to an instance of the current type, The method is most useful when you are handling objects whose types are not known at design time and allows for conditional assignment, as the following example shows.</span></span>  
  
 [!code-csharp[System.Type.IsAssignableFrom#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isassignablefrom/cs/IsAssignableFrom3.cs#3)]
 [!code-vb[System.Type.IsAssignableFrom#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isassignablefrom/vb/IsAssignableFrom3.vb#3)]  
  
 <span data-ttu-id="96bec-3362">Diese Methode so wird sichergestellt, dass eine einzige Zeile Code, wie die folgenden zur Laufzeit, ohne dass ausgeführt werden ein <xref:System.InvalidCastException> Ausnahme oder eine ähnliche Ausnahme:</span><span class="sxs-lookup"><span data-stu-id="96bec-3362">This method thus ensures that a line of code like the following will execute at runtime without throwing an <xref:System.InvalidCastException> exception or a similar exception:</span></span>  
  
 [!code-csharp[System.Type.IsAssignableFrom#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isassignablefrom/cs/IsAssignableFrom3.cs#4)]
 [!code-vb[System.Type.IsAssignableFrom#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isassignablefrom/vb/IsAssignableFrom3.vb#4)]  
  
 <span data-ttu-id="96bec-3363">Diese Methode kann von einer abgeleiteten Klasse überschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-3363">This method can be overridden by a derived class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-3364">Eine generische Typdefinition ist nicht von einem geschlossenen konstruierten Typ zugewiesen werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-3364">A generic type definition is not assignable from a closed constructed type.</span></span> <span data-ttu-id="96bec-3365">D. h. Sie können keine geschlossenen konstruierten Typs zuweisen `MyGenericList<int>` (`MyGenericList(Of Integer)` in Visual Basic), eine Variable vom Typ `MyGenericList<T>`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3365">That is, you cannot assign the closed constructed type `MyGenericList<int>` (`MyGenericList(Of Integer)` in Visual Basic) to a variable of type `MyGenericList<T>`.</span></span>  
  
 <span data-ttu-id="96bec-3366">Wenn die `c` Parameter ist vom Typ <xref:System.Reflection.Emit.TypeBuilder>, das Ergebnis basiert darauf, dass der Typ, der erstellt werden soll.</span><span class="sxs-lookup"><span data-stu-id="96bec-3366">If the `c` parameter is of type <xref:System.Reflection.Emit.TypeBuilder>, the result is based on the type that is to be built.</span></span> <span data-ttu-id="96bec-3367">Im folgenden Codebeispiel wird veranschaulicht, dies mithilfe eines integrierten Typs, der mit dem Namen `B`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3367">The following code example demonstrates this using a built type named `B`.</span></span>  
  
 [!code-csharp[System.Type.IsAssignableFrom#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isassignablefrom/cs/isassignablefrom_ex1.cs#1)]
 [!code-vb[System.Type.IsAssignableFrom#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isassignablefrom/vb/isassignablefrom_ex1.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="96bec-3368">Das folgende Beispiel zeigt die `IsAssignableFrom` Methode definiert Klassen, ganzzahlige Arrays und Generika.</span><span class="sxs-lookup"><span data-stu-id="96bec-3368">The following example demonstrates the `IsAssignableFrom` method using defined classes, integer arrays, and generics.</span></span>  
  
 [!code-cpp[TestIsAssignableFrom#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestIsAssignableFrom/cpp/testisassignablefrom.cpp#1)]
 [!code-csharp[TestIsAssignableFrom#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestIsAssignableFrom/CS/testisassignablefrom.cs#1)]
 [!code-vb[TestIsAssignableFrom#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestIsAssignableFrom/VB/testisassignablefrom.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAutoClass">
      <MemberSignature Language="C#" Value="public bool IsAutoClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAutoClass" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsAutoClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAutoClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAutoClass { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAutoClass : bool" Usage="System.Type.IsAutoClass" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsAutoClass</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3369">Gets a value indicating whether the string format attribute <see langword="AutoClass" /> is selected for the <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3369">Gets a value indicating whether the string format attribute <see langword="AutoClass" /> is selected for the <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-3370">
            <see langword="true" />, wenn für <see langword="AutoClass" /> das Zeichenfolgenformatattribut <see cref="T:System.Type" /> ausgewählt ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3370">
              <see langword="true" /> if the string format attribute <see langword="AutoClass" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3371">Die <xref:System.Reflection.TypeAttributes.StringFormatMask> wählt die Zeichenfolgenformatattribute.</span><span class="sxs-lookup"><span data-stu-id="96bec-3371">The <xref:System.Reflection.TypeAttributes.StringFormatMask> selects the string format attributes.</span></span> <span data-ttu-id="96bec-3372">Die Zeichenfolge Formatattribute zur Verbesserung der Interoperabilität von definieren, wie Zeichenfolgen interpretiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="96bec-3372">The string format attributes enhance interoperability by defining how strings should be interpreted.</span></span>  
  
 <span data-ttu-id="96bec-3373">Wenn die aktuelle <xref:System.Type> stellt ein konstruierter generischer Typ, diese Eigenschaft gilt, für die Definition des generischen Typs aus der der Typ konstruiert wurde.</span><span class="sxs-lookup"><span data-stu-id="96bec-3373">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="96bec-3374">Z. B. wenn die aktuelle <xref:System.Type> stellt `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), der Wert dieser Eigenschaft richtet sich nach `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3374">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="96bec-3375">Wenn die aktuelle <xref:System.Type> einen Typparameter eines generischen Typs darstellt, auf diese Eigenschaft gibt immer `false`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3375">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsAnsiClass" />
        <altmember cref="P:System.Type.IsUnicodeClass" />
      </Docs>
    </Member>
    <Member MemberName="IsAutoLayout">
      <MemberSignature Language="C#" Value="public bool IsAutoLayout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAutoLayout" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsAutoLayout" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAutoLayout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAutoLayout { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAutoLayout : bool" Usage="System.Type.IsAutoLayout" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsAutoLayout</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3376">Gets a value indicating whether the fields of the current type are laid out automatically by the common language runtime.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3376">Gets a value indicating whether the fields of the current type are laid out automatically by the common language runtime.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-3377">
            <see langword="true" />, wenn die <see cref="P:System.Type.Attributes" />-Eigenschaft des aktuellen Typs <see cref="F:System.Reflection.TypeAttributes.AutoLayout" /> umfasst; andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3377">
              <see langword="true" /> if the <see cref="P:System.Type.Attributes" /> property of the current type includes <see cref="F:System.Reflection.TypeAttributes.AutoLayout" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3378">Diese Eigenschaft ist zur Vereinfachung bereitgestellt.</span><span class="sxs-lookup"><span data-stu-id="96bec-3378">This property is provided as a convenience.</span></span> <span data-ttu-id="96bec-3379">Alternativ können Sie die <xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType> Enumerationswert, der die Attribute des Typs Layout und anschließend testen Sie, ob wählen <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType> festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-3379">Alternatively, you can use the <xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType> enumeration value to select the type layout attributes, and then test whether <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType> is set.</span></span> <span data-ttu-id="96bec-3380">Die <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>,<xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>, und <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> Enumerationswerte geben die Möglichkeit, die die Felder des Typs im Arbeitsspeicher angeordnet werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-3380">The <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>,<xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>, and <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> enumeration values indicate the way the fields of the type are laid out in memory.</span></span>  
  
 <span data-ttu-id="96bec-3381">Für dynamische Typen können Sie angeben <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType> beim Erstellen des Typs.</span><span class="sxs-lookup"><span data-stu-id="96bec-3381">For dynamic types, you can specify <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType> when you create the type.</span></span> <span data-ttu-id="96bec-3382">Im Code, gelten die <xref:System.Runtime.InteropServices.StructLayoutAttribute> -Attribut mit der <xref:System.Runtime.InteropServices.LayoutKind.Auto?displayProperty=nameWithType> Enumerationswert, der Typ, auf die Laufzeit die geeignete Methode zum Anordnen der Klasse bestimmen können.</span><span class="sxs-lookup"><span data-stu-id="96bec-3382">In code, apply the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute with the <xref:System.Runtime.InteropServices.LayoutKind.Auto?displayProperty=nameWithType> enumeration value to the type, to let the runtime determine the appropriate way to lay out the class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-3383">Können keine der <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> Methode, um zu bestimmen, ob die <xref:System.Runtime.InteropServices.StructLayoutAttribute> auf einen Typ angewendet wurde.</span><span class="sxs-lookup"><span data-stu-id="96bec-3383">You cannot use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method to determine whether the <xref:System.Runtime.InteropServices.StructLayoutAttribute> has been applied to a type.</span></span>  
  
 <span data-ttu-id="96bec-3384">Wenn die aktuelle <xref:System.Type> stellt ein konstruierter generischer Typ, diese Eigenschaft gilt, für die Definition des generischen Typs aus der der Typ konstruiert wurde.</span><span class="sxs-lookup"><span data-stu-id="96bec-3384">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="96bec-3385">Z. B. wenn die aktuelle <xref:System.Type> stellt `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), der Wert dieser Eigenschaft wird bestimmt durch `MyGenericType<T>.`</span><span class="sxs-lookup"><span data-stu-id="96bec-3385">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>.`</span></span>  
  
 <span data-ttu-id="96bec-3386">Wenn die aktuelle <xref:System.Type> einen Typparameter in der Definition eines generischen Typs oder generische Methode darstellt, auf diese Eigenschaft gibt immer `false`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3386">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-3387">Das folgende Beispiel erstellt eine Instanz des Typs und zeigt die <xref:System.Type.IsAutoLayout%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="96bec-3387">The following example creates an instance of the type and displays the <xref:System.Type.IsAutoLayout%2A> property.</span></span>  
  
 [!code-cpp[Type_IsAutoLayout#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsAutoLayout/CPP/type_isautolayout.cpp#1)]
 [!code-csharp[Type_IsAutoLayout#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsAutoLayout/CS/type_isautolayout.cs#1)]
 [!code-vb[Type_IsAutoLayout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsAutoLayout/VB/type_isautolayout.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsLayoutSequential" />
        <altmember cref="P:System.Type.IsExplicitLayout" />
      </Docs>
    </Member>
    <Member MemberName="IsByRef">
      <MemberSignature Language="C#" Value="public bool IsByRef { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsByRef" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsByRef" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsByRef As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsByRef { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsByRef : bool" Usage="System.Type.IsByRef" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsByRef</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3388">Gets a value indicating whether the <see cref="T:System.Type" /> is passed by reference.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3388">Gets a value indicating whether the <see cref="T:System.Type" /> is passed by reference.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-3389">
            <see langword="true" />, wenn <see cref="T:System.Type" /> als Verweis übergeben wird, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3389">
              <see langword="true" /> if the <see cref="T:System.Type" /> is passed by reference; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3390">Rufen Sie in den tatsächlichen Typ dereferenzieren den Typ, der als Verweis übergeben wurde, und rufen dann <xref:System.Type.GetElementType%2A> für diesen Typ.</span><span class="sxs-lookup"><span data-stu-id="96bec-3390">To get to the actual type, dereference the type that was passed by reference, and then call <xref:System.Type.GetElementType%2A> on that type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-3391">Das folgende Beispiel veranschaulicht die Verwendung des der `IsByRef` Eigenschaft zu überprüfen, ob es sich bei ein angegebenen Typ als Verweis übergeben wird.</span><span class="sxs-lookup"><span data-stu-id="96bec-3391">The following example demonstrates a use of the `IsByRef` property to check whether a specified type is passed by reference.</span></span> <span data-ttu-id="96bec-3392">Im Beispiel wird die Klasse `MyTypeDelegator`, welche Außerkraftsetzungen der `HasElementTypeImpl` Methode.</span><span class="sxs-lookup"><span data-stu-id="96bec-3392">The example defines the class `MyTypeDelegator`, which overrides the `HasElementTypeImpl` method.</span></span> <span data-ttu-id="96bec-3393">Die Hauptklasse überprüft die `HasElementType` -Eigenschaft und zeigt das Element eingeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-3393">The main class checks for the `HasElementType` property and displays the element type.</span></span>  
  
 [!code-cpp[Type_HasElementTypeImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_HasElementTypeImpl/CPP/type_haselementtypeimpl.cpp#1)]
 [!code-csharp[Type_HasElementTypeImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_HasElementTypeImpl/CS/type_haselementtypeimpl.cs#1)]
 [!code-vb[Type_HasElementTypeImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_HasElementTypeImpl/VB/type_haselementtypeimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsByRefImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsByRefImpl">
      <MemberSignature Language="C#" Value="protected abstract bool IsByRefImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsByRefImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsByRefImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function IsByRefImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool IsByRefImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsByRefImpl : unit -&gt; bool" Usage="type.IsByRefImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3394">When overridden in a derived class, implements the <see cref="P:System.Type.IsByRef" /> property and determines whether the <see cref="T:System.Type" /> is passed by reference.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3394">When overridden in a derived class, implements the <see cref="P:System.Type.IsByRef" /> property and determines whether the <see cref="T:System.Type" /> is passed by reference.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-3395">
            <see langword="true" /> if the <see cref="T:System.Type" /> is passed by reference; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3395">
              <see langword="true" /> if the <see cref="T:System.Type" /> is passed by reference; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Type.IsByRef" />
      </Docs>
    </Member>
    <Member MemberName="IsByRefLike">
      <MemberSignature Language="C#" Value="public virtual bool IsByRefLike { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsByRefLike" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsByRefLike" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsByRefLike As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsByRefLike { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsByRefLike : bool" Usage="System.Type.IsByRefLike" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsClass">
      <MemberSignature Language="C#" Value="public bool IsClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClass" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsClass { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsClass : bool" Usage="System.Type.IsClass" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsClass</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3396">Gets a value indicating whether the <see cref="T:System.Type" /> is a class or a delegate; that is, not a value type or interface.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3396">Gets a value indicating whether the <see cref="T:System.Type" /> is a class or a delegate; that is, not a value type or interface.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-3397">
            <see langword="true" />, wenn <see cref="T:System.Type" /> eine Klasse ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3397">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a class; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3398">Diese Eigenschaft gibt `true` für Klassen als auch für Delegaten.</span><span class="sxs-lookup"><span data-stu-id="96bec-3398">This property returns `true` for classes as well as delegates.</span></span> <span data-ttu-id="96bec-3399">Es gibt `false` für Werttypen (für Strukturen und Enumerationen) selbst wenn sie verschachtelt sind.</span><span class="sxs-lookup"><span data-stu-id="96bec-3399">It returns `false` for value types (for structures and enumerations) even if they are boxed.</span></span>  
  
 <span data-ttu-id="96bec-3400">Wenn die aktuelle <xref:System.Type> einen Typparameter in der Definition eines generischen Typs oder generische Methode darstellt, auf diese Eigenschaft gibt immer `true`. Wenn die aktuelle <xref:System.Type> einen konstruierten generischen Typ darstellt, gibt diese Eigenschaft `true` ist die generische Typdefinition der Definition einer Klasse; d. h. kein definiert eine Schnittstelle oder ein Werttyp.</span><span class="sxs-lookup"><span data-stu-id="96bec-3400">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `true`.If the current <xref:System.Type> represents a constructed generic type, this property returns `true` if the generic type definition is a class definition; that is, it does not define an interface or a value type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-3401">Diese Eigenschaft gibt `true` für `Type` Instanzen, die darstellen, die <xref:System.Enum> und <xref:System.ValueType> Klassen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3401">This property returns `true` for `Type` instances that represent the <xref:System.Enum> and <xref:System.ValueType> classes.</span></span> <span data-ttu-id="96bec-3402">Diese beiden Klassen sind die Basistypen für Enumerationen und Werttypen, aber sie sind nicht Enumerationen oder Werttypen selbst.</span><span class="sxs-lookup"><span data-stu-id="96bec-3402">These two classes are the base types for enumerations and value types, respectively, but they are not enumerations or value types themselves.</span></span> <span data-ttu-id="96bec-3403">Weitere Informationen finden Sie unter den <xref:System.Type.IsValueType%2A> und <xref:System.Type.IsEnum%2A> Eigenschaften.</span><span class="sxs-lookup"><span data-stu-id="96bec-3403">For more information, see the <xref:System.Type.IsValueType%2A> and <xref:System.Type.IsEnum%2A> properties.</span></span>  
  
 <span data-ttu-id="96bec-3404">Die <xref:System.Reflection.TypeAttributes.ClassSemanticsMask?displayProperty=nameWithType> Enumerationswert kennzeichnet eine Typdeklaration als Klasse oder Schnittstelle. Sowohl Klassen als auch Werttypen werden jedoch mit markiert die <xref:System.Reflection.TypeAttributes.Class?displayProperty=nameWithType> Attribut.</span><span class="sxs-lookup"><span data-stu-id="96bec-3404">The <xref:System.Reflection.TypeAttributes.ClassSemanticsMask?displayProperty=nameWithType> enumeration value  distinguishes a type declaration as class or interface.However, both classes and value types are marked with the <xref:System.Reflection.TypeAttributes.Class?displayProperty=nameWithType> attribute.</span></span> <span data-ttu-id="96bec-3405">Wenn Sie den Wert des Attributes-Eigenschaft und die Verwendung eines Typs Abrufen der <xref:System.Reflection.TypeAttributes.ClassSemanticsMask?displayProperty=nameWithType> um zu bestimmen, ob ein Typ eine Klasse anstelle eines Werttyps ist, müssen Sie auch Aufrufen der <xref:System.Type.IsValueType%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="96bec-3405">If you retrieve the value of a type's Attributes property and use the <xref:System.Reflection.TypeAttributes.ClassSemanticsMask?displayProperty=nameWithType> value to determine whether a type is a class instead of a value type, you must also call the <xref:System.Type.IsValueType%2A> property.</span></span> <span data-ttu-id="96bec-3406">Das Beispiel für die <xref:System.Reflection.TypeAttributes> Enumeration enthält zusätzliche Informationen als auch beispielsweise.</span><span class="sxs-lookup"><span data-stu-id="96bec-3406">The example for the <xref:System.Reflection.TypeAttributes> enumeration contains additional information as well as anexample.</span></span>  
  
 <span data-ttu-id="96bec-3407">Diese Eigenschaft ist schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="96bec-3407">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-3408">Das folgende Beispiel erstellt eine Instanz eines Typs und gibt an, ob der Typ eine Klasse ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-3408">The following example creates an instance of a type and indicates whether the type is a class.</span></span>  
  
 [!code-cpp[Type_IsClass#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsClass/CPP/type_isclass.cpp#1)]
 [!code-csharp[Type_IsClass#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsClass/CS/type_isclass.cs#1)]
 [!code-vb[Type_IsClass#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsClass/VB/type_isclass.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsInterface" />
        <altmember cref="P:System.Type.IsValueType" />
        <altmember cref="F:System.Reflection.TypeAttributes.ClassSemanticsMask" />
      </Docs>
    </Member>
    <Member MemberName="IsCOMObject">
      <MemberSignature Language="C#" Value="public bool IsCOMObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCOMObject" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsCOMObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCOMObject As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCOMObject { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCOMObject : bool" Usage="System.Type.IsCOMObject" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsCOMObject</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3409">Gets a value indicating whether the <see cref="T:System.Type" /> is a COM object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3409">Gets a value indicating whether the <see cref="T:System.Type" /> is a COM object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-3410">
            <see langword="true" />, wenn <see cref="T:System.Type" /> ein COM-Objekt ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3410">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a COM object; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3411">Diese Methode gibt `false` für COM-Schnittstellen, da diese keine Objekte sind.</span><span class="sxs-lookup"><span data-stu-id="96bec-3411">This method returns `false` for COM interfaces because they are not objects.</span></span> <span data-ttu-id="96bec-3412">COM-Schnittstellen können von Microsoft .NET Framework-Objekte implementiert werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-3412">COM interfaces can be implemented by Microsoft .NET Framework objects.</span></span>  
  
 <span data-ttu-id="96bec-3413">Sie können auch eine COM-Klasse zu laden und erhalten eine `Type` -Objekt für diese COM-Klasse unter Verwendung der [Tlbimp.exe (Type Library Importer-Tool)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) Tool.</span><span class="sxs-lookup"><span data-stu-id="96bec-3413">You can also load a COM class and get a `Type` object for that COM class by using the [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) tool.</span></span>  
  
 <span data-ttu-id="96bec-3414">Wenn die aktuelle <xref:System.Type> stellt ein konstruierter generischer Typ, diese Eigenschaft gilt, für die Definition des generischen Typs aus der der Typ konstruiert wurde.</span><span class="sxs-lookup"><span data-stu-id="96bec-3414">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="96bec-3415">Z. B. wenn die aktuelle <xref:System.Type> stellt `MyGenericType<int`> (`MyGenericType(Of Integer)` in Visual Basic), der Wert dieser Eigenschaft richtet sich nach `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3415">For example, if the current <xref:System.Type> represents `MyGenericType<int`> (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="96bec-3416">Wenn die aktuelle <xref:System.Type> einen Typparameter in der Definition eines generischen Typs oder generische Methode darstellt, auf diese Eigenschaft gibt immer `false`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3416">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsCOMObjectImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsCOMObjectImpl">
      <MemberSignature Language="C#" Value="protected abstract bool IsCOMObjectImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsCOMObjectImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsCOMObjectImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function IsCOMObjectImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool IsCOMObjectImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsCOMObjectImpl : unit -&gt; bool" Usage="type.IsCOMObjectImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3417">When overridden in a derived class, implements the <see cref="P:System.Type.IsCOMObject" /> property and determines whether the <see cref="T:System.Type" /> is a COM object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3417">When overridden in a derived class, implements the <see cref="P:System.Type.IsCOMObject" /> property and determines whether the <see cref="T:System.Type" /> is a COM object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-3418">
            <see langword="true" /> if the <see cref="T:System.Type" /> is a COM object; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3418">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a COM object; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3419">Diese Methode gibt `false` für COM-Schnittstellen, da diese keine Objekte sind.</span><span class="sxs-lookup"><span data-stu-id="96bec-3419">This method returns `false` for COM interfaces because they are not objects.</span></span> <span data-ttu-id="96bec-3420">COM-Schnittstellen können von Microsoft .NET Framework-Objekte implementiert werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-3420">COM interfaces can be implemented by Microsoft .NET Framework objects.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsCOMObject" />
      </Docs>
    </Member>
    <Member MemberName="IsConstructedGenericType">
      <MemberSignature Language="C#" Value="public virtual bool IsConstructedGenericType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConstructedGenericType" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsConstructedGenericType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsConstructedGenericType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsConstructedGenericType { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsConstructedGenericType : bool" Usage="System.Type.IsConstructedGenericType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3421">Gets a value that indicates whether this object represents a constructed generic type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3421">Gets a value that indicates whether this object represents a constructed generic type.</span>
          </span>
          <span data-ttu-id="96bec-3422">You can create instances of a constructed generic type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3422">You can create instances of a constructed generic type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-3423">
            <see langword="true" />, wenn dieses Objekt einen konstruierten generischen Typ darstellt, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3423">
              <see langword="true" /> if this object represents a constructed generic type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3424">Ein konstruierter generischer Typ wurde explizite Typen, die für alle generischen Typparameter angegeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-3424">A constructed generic type has had explicit types supplied for all of its generic type parameters.</span></span> <span data-ttu-id="96bec-3425">Es ist auch als einen geschlossenen generischen Typ bezeichnet.</span><span class="sxs-lookup"><span data-stu-id="96bec-3425">It is also referred to as a closed generic type.</span></span>  
  
 <span data-ttu-id="96bec-3426">Wenn diese Eigenschaft ist `true`, Sie können Instanzen des aktuellen Typs erstellen, wenn es sich um `false`, ist nicht möglich.</span><span class="sxs-lookup"><span data-stu-id="96bec-3426">When this property is `true`, you can create instances of the current type; when it is `false`, you can't.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsContextful">
      <MemberSignature Language="C#" Value="public bool IsContextful { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsContextful" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsContextful" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsContextful As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsContextful { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsContextful : bool" Usage="System.Type.IsContextful" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsContextful</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3427">Gets a value indicating whether the <see cref="T:System.Type" /> can be hosted in a context.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3427">Gets a value indicating whether the <see cref="T:System.Type" /> can be hosted in a context.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-3428">
            <see langword="true" />, wenn <see cref="T:System.Type" /> in einen Kontext aufgenommen werden kann, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3428">
              <see langword="true" /> if the <see cref="T:System.Type" /> can be hosted in a context; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3429">Ein Kontext fängt Aufrufe auf die Member ab, und erzwingt Richtlinien, die auf die Klasse, z. B. Synchronisierung angewendet werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-3429">A context intercepts calls to the class members and enforces policies that are applied to the class, such as synchronization.</span></span> <span data-ttu-id="96bec-3430">Ausführlichere Informationen über Remotekontext finden Sie unter <xref:System.Runtime.Remoting.Contexts.Context>.</span><span class="sxs-lookup"><span data-stu-id="96bec-3430">For more detailed information on remoting contexts, see <xref:System.Runtime.Remoting.Contexts.Context>.</span></span>  
  
 <span data-ttu-id="96bec-3431">Wenn die aktuelle <xref:System.Type> einen Typparameter in der Definition eines generischen Typs oder generische Methode darstellt, auf diese Eigenschaft gibt immer `false`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3431">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-3432">Das folgende Beispiel zeigt die `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, und <xref:System.Type.IsPrimitive%2A> Eigenschaften der <xref:System.Type> Klasse.</span><span class="sxs-lookup"><span data-stu-id="96bec-3432">The following example demonstrates the `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, and <xref:System.Type.IsPrimitive%2A> properties of the <xref:System.Type> class.</span></span> <span data-ttu-id="96bec-3433">Er überprüft, ob der angegebene Typ in den Kontext aufgenommen werden kann, ob es als Verweis gemarshallt werden kann und ob der Typ ein primitiver Datentyp ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-3433">It checks whether the given type can be hosted in the context, whether it can be marshaled by reference, and whether the type is a primitive data type.</span></span>  
  
 [!code-cpp[Type_IsContextful#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsContextful/CPP/type_iscontextful.cpp#1)]
 [!code-csharp[Type_IsContextful#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsContextful/CS/type_iscontextful.cs#1)]
 [!code-vb[Type_IsContextful#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsContextful/VB/type_iscontextful.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsContextfulImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsContextfulImpl">
      <MemberSignature Language="C#" Value="protected virtual bool IsContextfulImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsContextfulImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsContextfulImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsContextfulImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool IsContextfulImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsContextfulImpl : unit -&gt; bool&#xA;override this.IsContextfulImpl : unit -&gt; bool" Usage="type.IsContextfulImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3434">Implements the <see cref="P:System.Type.IsContextful" /> property and determines whether the <see cref="T:System.Type" /> can be hosted in a context.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3434">Implements the <see cref="P:System.Type.IsContextful" /> property and determines whether the <see cref="T:System.Type" /> can be hosted in a context.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-3435">
            <see langword="true" /> if the <see cref="T:System.Type" /> can be hosted in a context; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3435">
              <see langword="true" /> if the <see cref="T:System.Type" /> can be hosted in a context; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3436">Diese Methode kann von einer abgeleiteten Klasse überschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-3436">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="96bec-3437">Ein Kontext fängt Aufrufe auf die Member ab, und erzwingt Richtlinien, die auf die Klasse, z. B. Synchronisierung angewendet werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-3437">A context intercepts calls to the class members and enforce policies that are applied to the class, such as synchronization.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-3438">Das folgende Beispiel veranschaulicht die Verwendung des der `IsContextfulImpl` Methode.</span><span class="sxs-lookup"><span data-stu-id="96bec-3438">The following example demonstrates a use of the `IsContextfulImpl` method.</span></span>  
  
 [!code-cpp[Type_IsContextfulImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsContextfulImpl/CPP/type_iscontextfulimpl.cpp#1)]
 [!code-csharp[Type_IsContextfulImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsContextfulImpl/CS/type_iscontextfulimpl.cs#1)]
 [!code-vb[Type_IsContextfulImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsContextfulImpl/VB/type_iscontextfulimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsContextful" />
      </Docs>
    </Member>
    <Member MemberName="IsEnum">
      <MemberSignature Language="C#" Value="public virtual bool IsEnum { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnum" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsEnum" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsEnum As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsEnum { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEnum : bool" Usage="System.Type.IsEnum" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsEnum</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3439">Gets a value indicating whether the current <see cref="T:System.Type" /> represents an enumeration.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3439">Gets a value indicating whether the current <see cref="T:System.Type" /> represents an enumeration.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-3440">
            <see langword="true" />, wenn der aktuelle <see cref="T:System.Type" /> eine Enumeration darstellt, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3440">
              <see langword="true" /> if the current <see cref="T:System.Type" /> represents an enumeration; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3441">Diese Eigenschaft gibt `true` für eine Enumeration, aber nicht für die <xref:System.Enum> -Typ selbst.</span><span class="sxs-lookup"><span data-stu-id="96bec-3441">This property returns `true` for an enumeration, but not for the <xref:System.Enum> type itself.</span></span>  
  
 <span data-ttu-id="96bec-3442">Wenn die aktuelle <xref:System.Type> stellt ein konstruierter generischer Typ, diese Eigenschaft gilt, für die Definition des generischen Typs aus der der Typ konstruiert wurde.</span><span class="sxs-lookup"><span data-stu-id="96bec-3442">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="96bec-3443">Z. B. wenn die aktuelle <xref:System.Type> stellt `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), der Wert dieser Eigenschaft richtet sich nach `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3443">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="96bec-3444">Wenn die aktuelle <xref:System.Type> einen Typparameter in der Definition eines generischen Typs oder generische Methode darstellt, auf diese Eigenschaft gibt immer `false`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3444">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="96bec-3445">Diese Eigenschaft ist schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="96bec-3445">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-3446">Im folgenden Beispiel wird veranschaulicht, wie die `IsEnum` Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="96bec-3446">The following example demonstrates how to use the `IsEnum` property.</span></span>  
  
 [!code-cpp[TestIsEnum#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestIsEnum/CPP/TestIsEnum.cpp#1)]
 [!code-csharp[TestIsEnum#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestIsEnum/CS/testisenum.cs#1)]
 [!code-vb[TestIsEnum#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestIsEnum/VB/testisenum.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsEnumDefined">
      <MemberSignature Language="C#" Value="public virtual bool IsEnumDefined (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEnumDefined(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsEnumDefined(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsEnumDefined (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsEnumDefined(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member IsEnumDefined : obj -&gt; bool&#xA;override this.IsEnumDefined : obj -&gt; bool" Usage="type.IsEnumDefined value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="96bec-3447">The value to be tested.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3447">The value to be tested.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-3448">Returns a value that indicates whether the specified value exists in the current enumeration type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3448">Returns a value that indicates whether the specified value exists in the current enumeration type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-3449">
            <see langword="true" /> if the specified value is a member of the current enumeration type; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3449">
              <see langword="true" /> if the specified value is a member of the current enumeration type; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="96bec-3450">The current type is not an enumeration.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3450">The current type is not an enumeration.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96bec-3451">
            <paramref name="value" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3451">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="96bec-3452">
            <paramref name="value" /> is of a type that cannot be the underlying type of an enumeration.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3452">
              <paramref name="value" /> is of a type that cannot be the underlying type of an enumeration.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsEquivalentTo">
      <MemberSignature Language="C#" Value="public virtual bool IsEquivalentTo (Type other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEquivalentTo(class System.Type other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsEquivalentTo(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsEquivalentTo (other As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsEquivalentTo(Type ^ other);" />
      <MemberSignature Language="F#" Value="abstract member IsEquivalentTo : Type -&gt; bool&#xA;override this.IsEquivalentTo : Type -&gt; bool" Usage="type.IsEquivalentTo other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="96bec-3453">The COM type that is tested for equivalence with the current type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3453">The COM type that is tested for equivalence with the current type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-3454">Determines whether two COM types have the same identity and are eligible for type equivalence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3454">Determines whether two COM types have the same identity and are eligible for type equivalence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-3455">
            <see langword="true" /> if the COM types are equivalent; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3455">
              <see langword="true" /> if the COM types are equivalent; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="96bec-3456">This method also returns <see langword="false" /> if one type is in an assembly that is loaded for execution, and the other is in an assembly that is loaded into the reflection-only context.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3456">This method also returns <see langword="false" /> if one type is in an assembly that is loaded for execution, and the other is in an assembly that is loaded into the reflection-only context.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3457">Beginnend mit der [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], die common Language Runtime unterstützt das Einbetten von Typinformationen für COM-Typen direkt in verwaltete Assemblys, statt die verwalteten Assemblys, die Typinformationen für COM-Typen aus Interop abrufen Assemblys.</span><span class="sxs-lookup"><span data-stu-id="96bec-3457">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the common language runtime supports the embedding of type information for COM types directly into managed assemblies, instead of requiring the managed assemblies to obtain type information for COM types from interop assemblies.</span></span> <span data-ttu-id="96bec-3458">Da die eingebettete Typinformation nur die Typen und Member enthält, die tatsächlich von einer verwalteten Assembly verwendet werden, können zwei verwaltete Assemblys möglicherweise sehr unterschiedliche Ansichten desselben COM-Typs haben.</span><span class="sxs-lookup"><span data-stu-id="96bec-3458">Because the embedded type information includes only the types and members that are actually used by a managed assembly, two managed assemblies might have very different views of the same COM type.</span></span> <span data-ttu-id="96bec-3459">Jede verwaltete Assembly besitzt ein anderes <xref:System.Type>-Objekt, das eine Ansicht des COM-Typs darstellt.</span><span class="sxs-lookup"><span data-stu-id="96bec-3459">Each managed assembly has a different <xref:System.Type> object to represent its view of the COM type.</span></span> <span data-ttu-id="96bec-3460">Die Common Language Runtime unterstützt Typäquivalenz zwischen diesen unterschiedlichen Ansichten für Schnittstellen, Strukturen, Enumerationen und Delegaten.</span><span class="sxs-lookup"><span data-stu-id="96bec-3460">The common language runtime supports type equivalence between these different views for interfaces, structures, enumerations, and delegates.</span></span>  
  
 <span data-ttu-id="96bec-3461">Typäquivalenz bedeutet, dass ein COM-Objekt, das von einer verwalteten Assembly an eine andere übergeben wird, für den entsprechenden verwalteten Typ in der empfangenden Assembly bereitgestellt werden kann.</span><span class="sxs-lookup"><span data-stu-id="96bec-3461">Type equivalence means that a COM object that is passed from one managed assembly to another can be cast to the appropriate managed type in the receiving assembly.</span></span> <span data-ttu-id="96bec-3462">Die <xref:System.Type.IsEquivalentTo%2A> Methode ermöglicht es eine Assembly aus, um zu bestimmen, dass ein COM-Objekt, das von einer anderen Assembly erhalten die gleiche COM-Identität als eines der ersten eigenen eingebettete Interop-Assemblytyp ist und daher auf diesen Typ umgewandelt werden kann.</span><span class="sxs-lookup"><span data-stu-id="96bec-3462">The <xref:System.Type.IsEquivalentTo%2A> method enables an assembly to determine that a COM object obtained from another assembly has the same COM identity as one of the first assembly's own embedded interop types, and thus can be cast to that type.</span></span>  
  
 <span data-ttu-id="96bec-3463">Weitere Informationen finden Sie unter [Typäquivalenz und eingebettete Interop-Typen](~/docs/framework/interop/type-equivalence-and-embedded-interop-types.md).</span><span class="sxs-lookup"><span data-stu-id="96bec-3463">For more information, see [Type Equivalence and Embedded Interop Types](~/docs/framework/interop/type-equivalence-and-embedded-interop-types.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsExplicitLayout">
      <MemberSignature Language="C#" Value="public bool IsExplicitLayout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExplicitLayout" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsExplicitLayout" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExplicitLayout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExplicitLayout { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsExplicitLayout : bool" Usage="System.Type.IsExplicitLayout" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsExplicitLayout</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3464">Gets a value indicating whether the fields of the current type are laid out at explicitly specified offsets.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3464">Gets a value indicating whether the fields of the current type are laid out at explicitly specified offsets.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-3465">
            <see langword="true" />, wenn die <see cref="P:System.Type.Attributes" />-Eigenschaft des aktuellen Typs <see cref="F:System.Reflection.TypeAttributes.ExplicitLayout" /> umfasst; andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3465">
              <see langword="true" /> if the <see cref="P:System.Type.Attributes" /> property of the current type includes <see cref="F:System.Reflection.TypeAttributes.ExplicitLayout" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3466">Diese Eigenschaft ist zur Vereinfachung bereitgestellt.</span><span class="sxs-lookup"><span data-stu-id="96bec-3466">This property is provided as a convenience.</span></span> <span data-ttu-id="96bec-3467">Alternativ können Sie die <xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType> Enumerationswert, der die Attribute des Typs Layout und anschließend testen Sie, ob wählen <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType> festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-3467">Alternatively, you can use the <xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType> enumeration value to select the type layout attributes, and then test whether <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType> is set.</span></span> <span data-ttu-id="96bec-3468">Die <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>, <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>, und <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> Enumerationswerte geben die Möglichkeit, die die Felder des Typs im Arbeitsspeicher angeordnet werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-3468">The <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>, <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>, and <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> enumeration values indicate the way the fields of the type are laid out in memory.</span></span>  
  
 <span data-ttu-id="96bec-3469">Für dynamische Typen können Sie angeben <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType> beim Erstellen des Typs.</span><span class="sxs-lookup"><span data-stu-id="96bec-3469">For dynamic types, you can specify <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType> when you create the type.</span></span> <span data-ttu-id="96bec-3470">Im Code, gelten die <xref:System.Runtime.InteropServices.StructLayoutAttribute> -Attribut mit der <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> Enumerationswert, der Typ, um anzugeben, dass die Offsets, die an dem die Felder starten explizit angegeben werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-3470">In code, apply the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute with the <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> enumeration value to the type, to specify that the offsets at which the fields start are specified explicitly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-3471">Können keine der <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> Methode, um zu bestimmen, ob die <xref:System.Runtime.InteropServices.StructLayoutAttribute> auf einen Typ angewendet wurde.</span><span class="sxs-lookup"><span data-stu-id="96bec-3471">You cannot use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method to determine whether the <xref:System.Runtime.InteropServices.StructLayoutAttribute> has been applied to a type.</span></span>  
  
 <span data-ttu-id="96bec-3472">Wenn die aktuelle <xref:System.Type> stellt ein konstruierter generischer Typ, diese Eigenschaft gilt, für die Definition des generischen Typs aus der der Typ konstruiert wurde.</span><span class="sxs-lookup"><span data-stu-id="96bec-3472">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="96bec-3473">Z. B. wenn die aktuelle <xref:System.Type> stellt `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), der Wert dieser Eigenschaft richtet sich nach `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3473">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="96bec-3474">Wenn die aktuelle <xref:System.Type> einen Typparameter in der Definition eines generischen Typs oder generische Methode darstellt, auf diese Eigenschaft gibt immer `false`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3474">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-3475">Im folgenden Beispiel wird eine Instanz eines Typs erstellt und zeigt den Wert der <xref:System.Type.IsExplicitLayout%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="96bec-3475">The following example creates an instance of a type and displays the value of its <xref:System.Type.IsExplicitLayout%2A> property.</span></span> <span data-ttu-id="96bec-3476">Er verwendet den `MySystemTime` Klasse, die auch im Codebeispiel für <xref:System.Runtime.InteropServices.StructLayoutAttribute>.</span><span class="sxs-lookup"><span data-stu-id="96bec-3476">It uses the `MySystemTime` class, which is also in the code example for <xref:System.Runtime.InteropServices.StructLayoutAttribute>.</span></span>  
  
 [!code-csharp[Type_IsExplicitLayout#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsExplicitLayout/CS/type_isexplicitlayout.cs#1)]
 [!code-vb[Type_IsExplicitLayout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsExplicitLayout/VB/type_isexplicitlayout.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="T:System.Runtime.InteropServices.StructLayoutAttribute" />
        <altmember cref="P:System.Type.IsAutoLayout" />
        <altmember cref="P:System.Type.IsLayoutSequential" />
      </Docs>
    </Member>
    <Member MemberName="IsGenericMethodParameter">
      <MemberSignature Language="C#" Value="public virtual bool IsGenericMethodParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericMethodParameter" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsGenericMethodParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsGenericMethodParameter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericMethodParameter { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericMethodParameter : bool" Usage="System.Type.IsGenericMethodParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsGenericParameter">
      <MemberSignature Language="C#" Value="public virtual bool IsGenericParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericParameter" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsGenericParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsGenericParameter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericParameter { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericParameter : bool" Usage="System.Type.IsGenericParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3477">Gets a value indicating whether the current <see cref="T:System.Type" /> represents a type parameter in the definition of a generic type or method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3477">Gets a value indicating whether the current <see cref="T:System.Type" /> represents a type parameter in the definition of a generic type or method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-3478">
            <see langword="true" />, wenn das <see cref="T:System.Type" />-Objekt einen Typparameter einer generischen Typ- oder Methodendefinition darstellt, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3478">
              <see langword="true" /> if the <see cref="T:System.Type" /> object represents a type parameter of a generic type definition or generic method definition; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3479"><xref:System.Type> generische Typparameter darstellende – Objekte abgerufen werden können, durch den Aufruf der <xref:System.Type.GetGenericArguments%2A> -Methode der ein <xref:System.Type> -Objekt, das eine generische Typdefinition darstellt, oder die <xref:System.Reflection.MethodInfo.GetGenericArguments%2A> -Methode der ein <xref:System.Reflection.MethodInfo> -Objekt, das eine generische Methode darstellt die Definition.</span><span class="sxs-lookup"><span data-stu-id="96bec-3479"><xref:System.Type> objects that represent generic type parameters can be obtained by calling the <xref:System.Type.GetGenericArguments%2A> method of a <xref:System.Type> object that represents a generic type definition, or the <xref:System.Reflection.MethodInfo.GetGenericArguments%2A> method of a <xref:System.Reflection.MethodInfo> object that represents a generic method definition.</span></span>  
  
-   <span data-ttu-id="96bec-3480">Für eine generische Typ- oder Methodendefinition der <xref:System.Type.IsGenericParameter%2A> -Eigenschaft gibt `true` für jedes Element des resultierenden Arrays.</span><span class="sxs-lookup"><span data-stu-id="96bec-3480">For a generic type or method definition, the <xref:System.Type.IsGenericParameter%2A> property returns `true` for every element of the resulting array.</span></span>  
  
-   <span data-ttu-id="96bec-3481">Für einen geschlossenen konstruierten Typ oder Methode die <xref:System.Type.IsGenericParameter%2A> -Eigenschaft gibt `false` für jedes Element des Arrays, zurückgegeben von der <xref:System.Type.GetGenericArguments%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="96bec-3481">For a closed constructed type or method, the <xref:System.Type.IsGenericParameter%2A> property returns `false` for every element of the array returned by the <xref:System.Type.GetGenericArguments%2A> method.</span></span>  
  
-   <span data-ttu-id="96bec-3482">Bei einem offenen konstruierten Typ oder die Methode hat einige Elemente des Arrays handelt es sich möglicherweise um bestimmte Typen, und möglicherweise andere Parameter vom Typ.</span><span class="sxs-lookup"><span data-stu-id="96bec-3482">For an open constructed type or method, some elements of the array might be specific types and others might be type parameters.</span></span> <span data-ttu-id="96bec-3483"><xref:System.Type.IsGenericParameter%2A> Gibt `false` für die Typen und `true` für die Typparameter an.</span><span class="sxs-lookup"><span data-stu-id="96bec-3483"><xref:System.Type.IsGenericParameter%2A> returns `false` for the types and `true` for the type parameters.</span></span> <span data-ttu-id="96bec-3484">Im Codebeispiel für die <xref:System.Type.ContainsGenericParameters%2A> Eigenschaft wird mit einer Mischung aus Typen und die Typparameter eine generische Klasse veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="96bec-3484">The code example for the <xref:System.Type.ContainsGenericParameters%2A> property demonstrates a generic class with a mixture of types and type parameters.</span></span>  
  
 <span data-ttu-id="96bec-3485">Eine Liste der invarianten Bedingungen für Begriffe, für Begriffe, die für die Reflektion mit generischen Methoden verwendet werden, finden Sie in den Hinweisen zur Eigenschaft <xref:System.Type.IsGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="96bec-3485">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-3486">Im folgenden Beispiel wird die <xref:System.Type.IsGenericParameter%2A> Eigenschaft für generische Typparameter in einem generischen Typ zu testen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3486">The following example uses the <xref:System.Type.IsGenericParameter%2A> property to test for generic type parameters in a generic type.</span></span>  
  
 [!code-cpp[System.Type.IsGenericParameter#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsGenericParameter/CPP/source.cpp#2)]
 [!code-csharp[System.Type.IsGenericParameter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsGenericParameter/CS/source.cs#2)]
 [!code-vb[System.Type.IsGenericParameter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsGenericParameter/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.GenericParameterPosition" />
        <altmember cref="M:System.Type.GetGenericArguments" />
        <altmember cref="M:System.Type.GetGenericParameterConstraints" />
        <altmember cref="P:System.Type.GenericParameterAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsGenericType">
      <MemberSignature Language="C#" Value="public virtual bool IsGenericType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericType" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsGenericType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsGenericType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericType { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericType : bool" Usage="System.Type.IsGenericType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3487">Gets a value indicating whether the current type is a generic type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3487">Gets a value indicating whether the current type is a generic type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-3488">
            <see langword="true" /> Wenn der aktuelle Typ ein generischer Typ ist. andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3488">
              <see langword="true" /> if the current type is a generic type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3489">Verwenden der <xref:System.Type.IsGenericType%2A> Eigenschaft, um zu bestimmen, ob eine <xref:System.Type> -Objekt einen generischen Typ darstellt.</span><span class="sxs-lookup"><span data-stu-id="96bec-3489">Use the <xref:System.Type.IsGenericType%2A> property to determine whether a <xref:System.Type> object represents a generic type.</span></span> <span data-ttu-id="96bec-3490">Verwenden der <xref:System.Type.ContainsGenericParameters%2A> Eigenschaft, um zu bestimmen, ob eine <xref:System.Type> -Objekt ein offener Typ oder einen geschlossenen konstruierten Typ darstellt.</span><span class="sxs-lookup"><span data-stu-id="96bec-3490">Use the <xref:System.Type.ContainsGenericParameters%2A> property to determine whether a <xref:System.Type> object represents an open constructed type or a closed constructed type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-3491">Die <xref:System.Type.IsGenericType%2A> -Eigenschaft gibt `false` Wenn der unmittelbaren Typ nicht generisch ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-3491">The <xref:System.Type.IsGenericType%2A> property returns `false` if the immediate type is not generic.</span></span> <span data-ttu-id="96bec-3492">Z. B. ein Array, dessen Elemente vom Typ `A<int>` (`A(Of Integer)` in Visual Basic) ist nicht selbst ein generischer Typ.</span><span class="sxs-lookup"><span data-stu-id="96bec-3492">For example, an array whose elements are of type `A<int>` (`A(Of Integer)` in Visual Basic) is not itself a generic type.</span></span>  
  
 <span data-ttu-id="96bec-3493">Die folgende Tabelle enthält die Invarianten Bedingungen für Begriffe in Reflektion mit generischen Methoden verwendet.</span><span class="sxs-lookup"><span data-stu-id="96bec-3493">The following table summarizes the invariant conditions for common terms used in generic reflection.</span></span>  
  
|<span data-ttu-id="96bec-3494">Begriff</span><span class="sxs-lookup"><span data-stu-id="96bec-3494">Term</span></span>|<span data-ttu-id="96bec-3495">Invariante</span><span class="sxs-lookup"><span data-stu-id="96bec-3495">Invariant</span></span>|  
|----------|---------------|  
|<span data-ttu-id="96bec-3496">generische Typdefinition</span><span class="sxs-lookup"><span data-stu-id="96bec-3496">generic type definition</span></span>|<span data-ttu-id="96bec-3497">Die <xref:System.Type.IsGenericTypeDefinition%2A>-Eigenschaft ist `true`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3497">The <xref:System.Type.IsGenericTypeDefinition%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="96bec-3498">Definiert einen generischen Typ an.</span><span class="sxs-lookup"><span data-stu-id="96bec-3498">Defines a generic type.</span></span> <span data-ttu-id="96bec-3499">Ein konstruierter Typ erstellt durch Aufrufen der <xref:System.Type.MakeGenericType%2A> Methode für eine <xref:System.Type> Objekt, das eine generische Typdefinition darstellt, und ein Array der Argumente des Typs angeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-3499">A constructed type is created by calling the <xref:System.Type.MakeGenericType%2A> method on a <xref:System.Type> object that represents a generic type definition and specifying an array of type arguments.</span></span><br /><br /> <span data-ttu-id="96bec-3500"><xref:System.Type.MakeGenericType%2A> kann nur für generische Typdefinitionen aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-3500"><xref:System.Type.MakeGenericType%2A> can be called only on generic type definitions.</span></span><br /><br /> <span data-ttu-id="96bec-3501">Generische Typdefinition ist ein generischer Typ (der <xref:System.Type.IsGenericType%2A> Eigenschaft `true`), das Gegenteil trifft jedoch nicht.</span><span class="sxs-lookup"><span data-stu-id="96bec-3501">Any generic type definition is a generic type (the <xref:System.Type.IsGenericType%2A> property is `true`), but the converse is not true.</span></span>|  
|<span data-ttu-id="96bec-3502">generischer Typ</span><span class="sxs-lookup"><span data-stu-id="96bec-3502">generic type</span></span>|<span data-ttu-id="96bec-3503">Die <xref:System.Type.IsGenericType%2A>-Eigenschaft ist `true`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3503">The <xref:System.Type.IsGenericType%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="96bec-3504">Hierbei kann es sich um eine generische Typdefinition, einen offenen konstruierten Typ oder ein geschlossener konstruierter Typ sein.</span><span class="sxs-lookup"><span data-stu-id="96bec-3504">Can be a generic type definition, an open constructed type, or a closed constructed type.</span></span><br /><br /> <span data-ttu-id="96bec-3505">Beachten Sie, dass ein, dessen Elementtyp Arraytyp ist generisch ist selbst ein generischer Typ.</span><span class="sxs-lookup"><span data-stu-id="96bec-3505">Note that an array type whose element type is generic is not itself a generic type.</span></span> <span data-ttu-id="96bec-3506">Das gleiche gilt für eine <xref:System.Type> Objekt, das einen Zeiger auf einen generischen Typ darstellt.</span><span class="sxs-lookup"><span data-stu-id="96bec-3506">The same is true of a <xref:System.Type> object representing a pointer to a generic type.</span></span>|  
|<span data-ttu-id="96bec-3507">Öffnen Sie die konstruierten Typ</span><span class="sxs-lookup"><span data-stu-id="96bec-3507">open constructed type</span></span>|<span data-ttu-id="96bec-3508">Die <xref:System.Type.ContainsGenericParameters%2A>-Eigenschaft ist `true`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3508">The <xref:System.Type.ContainsGenericParameters%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="96bec-3509">Beispiele sind ein generischer Typ, der nicht zugewiesene Typparameter verfügt, ein Typ, der in der Definition eines generischen Typs oder ein offener Typ geschachtelt ist oder ein generischer Typ, der für die ein Typargument verfügt die <xref:System.Type.ContainsGenericParameters%2A> Eigenschaft `true`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3509">Examples are a generic type that has unassigned type parameters, a type that is nested in a generic type definition or in an open constructed type, or a generic type that has a type argument for which the <xref:System.Type.ContainsGenericParameters%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="96bec-3510">Es ist nicht möglich, eine Instanz eines offenen konstruierten Typs zu erstellen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3510">It is not possible to create an instance of an open constructed type.</span></span><br /><br /> <span data-ttu-id="96bec-3511">Beachten Sie, dass nicht alle offene konstruierte Typen generisch sind.</span><span class="sxs-lookup"><span data-stu-id="96bec-3511">Note that not all open constructed types are generic.</span></span> <span data-ttu-id="96bec-3512">Beispielsweise wird ein Array, dessen Elementtyp ist der Definition eines generischen Typs, ist nicht generisch, und ein Zeiger auf ein offener Typ ist nicht generisch.</span><span class="sxs-lookup"><span data-stu-id="96bec-3512">For example, an array whose element type is a generic type definition is not generic, and a pointer to an open constructed type is not generic.</span></span>|  
|<span data-ttu-id="96bec-3513">geschlossener konstruierter Typ</span><span class="sxs-lookup"><span data-stu-id="96bec-3513">closed constructed type</span></span>|<span data-ttu-id="96bec-3514">Die <xref:System.Type.ContainsGenericParameters%2A>-Eigenschaft ist `false`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3514">The <xref:System.Type.ContainsGenericParameters%2A> property is `false`.</span></span><br /><br /> <span data-ttu-id="96bec-3515">Bei einer untersuchten rekursiven der Typ weist nicht zugewiesene generische Parameter.</span><span class="sxs-lookup"><span data-stu-id="96bec-3515">When examined recursively, the type has no unassigned generic parameters.</span></span>|  
|<span data-ttu-id="96bec-3516">generischer Typparameter</span><span class="sxs-lookup"><span data-stu-id="96bec-3516">generic type parameter</span></span>|<span data-ttu-id="96bec-3517">Die <xref:System.Type.IsGenericParameter%2A>-Eigenschaft ist `true`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3517">The <xref:System.Type.IsGenericParameter%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="96bec-3518">Die <xref:System.Type.ContainsGenericParameters%2A>-Eigenschaft ist `true`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3518">The <xref:System.Type.ContainsGenericParameters%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="96bec-3519">In einer generischen Typdefinition ein Platzhalter für einen Typ, der später zugewiesen wird.</span><span class="sxs-lookup"><span data-stu-id="96bec-3519">In a generic type definition, a placeholder for a type that will be assigned later.</span></span>|  
|<span data-ttu-id="96bec-3520">generisches Typargument</span><span class="sxs-lookup"><span data-stu-id="96bec-3520">generic type argument</span></span>|<span data-ttu-id="96bec-3521">Kann beliebigen Typs, einschließlich der einen generischen Typparameter sein.</span><span class="sxs-lookup"><span data-stu-id="96bec-3521">Can be any type, including a generic type parameter.</span></span><br /><br /> <span data-ttu-id="96bec-3522">Typargumente angegeben werden, als ein Array von <xref:System.Type> Objekte übergeben, um die <xref:System.Type.MakeGenericType%2A> Methode, wenn Sie einen konstruierten generischen Typ erstellen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3522">Type arguments are specified as an array of <xref:System.Type> objects passed to the <xref:System.Type.MakeGenericType%2A> method when creating a constructed generic type.</span></span> <span data-ttu-id="96bec-3523">Wenn Instanzen des resultierenden Typs erstellt werden, sind die <xref:System.Type.ContainsGenericParameters%2A> -Eigenschaft muss sein `false` für alle Typargumente.</span><span class="sxs-lookup"><span data-stu-id="96bec-3523">If instances of the resulting type are to be created, the <xref:System.Type.ContainsGenericParameters%2A> property must be `false` for all the type arguments.</span></span>|  
  
 <span data-ttu-id="96bec-3524">Im folgenden Codebeispiel und Tabelle veranschaulichen einige dieser Bedingungen und Invarianten.</span><span class="sxs-lookup"><span data-stu-id="96bec-3524">The following code example and table illustrate some of these terms and invariants.</span></span> <span data-ttu-id="96bec-3525">Die `Derived` Klasse ist von besonderem Interesse, da ihr Basistyp einen konstruierten Typ ist, die eine Mischung von Typen und Parameter vom Typ in der Liste der Typargumente aufweist.</span><span class="sxs-lookup"><span data-stu-id="96bec-3525">The `Derived` class is of particular interest because its base type is a constructed type that has a mixture of types and type parameters in its type argument list.</span></span>  
  
 [!code-cpp[System.Type.IsGenericType#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsGenericType/cpp/remarks.cpp#2)]
 [!code-csharp[System.Type.IsGenericType#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsGenericType/cs/remarks.cs#2)]
 [!code-vb[System.Type.IsGenericType#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsGenericType/vb/remarks.vb#2)]  
  
 <span data-ttu-id="96bec-3526">Die folgende Tabelle zeigt Beispiele, die für die Klassen zu erstellen und verwenden `Base`, `Derived`, und `G`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3526">The following table shows examples that use and build on the classes `Base`, `Derived`, and `G`.</span></span> <span data-ttu-id="96bec-3527">Wenn die C++ und C#-Code identisch ist, wird nur ein Eintrag angezeigt.</span><span class="sxs-lookup"><span data-stu-id="96bec-3527">When the C++ and C# code is the same, only one entry is shown.</span></span>  
  
|<span data-ttu-id="96bec-3528">Beispiel</span><span class="sxs-lookup"><span data-stu-id="96bec-3528">Example</span></span>|<span data-ttu-id="96bec-3529">Invarianten</span><span class="sxs-lookup"><span data-stu-id="96bec-3529">Invariants</span></span>|  
|-------------|----------------|  
|`Derived(Of V)`<br /><br /> `Derived<V>`|<span data-ttu-id="96bec-3530">Für diesen Typ:</span><span class="sxs-lookup"><span data-stu-id="96bec-3530">For this type:</span></span><br /><br /> <span data-ttu-id="96bec-3531"><xref:System.Type.IsGenericType%2A> ist `true`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3531"><xref:System.Type.IsGenericType%2A> is `true`.</span></span><br /><br /> <span data-ttu-id="96bec-3532"><xref:System.Type.IsGenericTypeDefinition%2A> ist `true`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3532"><xref:System.Type.IsGenericTypeDefinition%2A> is `true`.</span></span><br /><br /> <span data-ttu-id="96bec-3533"><xref:System.Type.ContainsGenericParameters%2A> ist `true`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3533"><xref:System.Type.ContainsGenericParameters%2A> is `true`.</span></span>|  
|`Base(Of String, V)`<br /><br /> `Base<String,V>`<br /><br /> `Base<String^,V>`|<span data-ttu-id="96bec-3534">Für diesen Typ:</span><span class="sxs-lookup"><span data-stu-id="96bec-3534">For this type:</span></span><br /><br /> <span data-ttu-id="96bec-3535"><xref:System.Type.IsGenericType%2A> ist `true`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3535"><xref:System.Type.IsGenericType%2A> is `true`.</span></span><br /><br /> <span data-ttu-id="96bec-3536"><xref:System.Type.IsGenericTypeDefinition%2A> ist `false`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3536"><xref:System.Type.IsGenericTypeDefinition%2A> is `false`.</span></span><br /><br /> <span data-ttu-id="96bec-3537"><xref:System.Type.ContainsGenericParameters%2A> ist `true`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3537"><xref:System.Type.ContainsGenericParameters%2A> is `true`.</span></span>|  
|`Dim d() As Derived(Of Integer)`<br /><br /> `Derived<int>[] d;`<br /><br /> `array<Derived<int>^>^ d;`|<span data-ttu-id="96bec-3538">Für den Typ der Variable `d`:</span><span class="sxs-lookup"><span data-stu-id="96bec-3538">For the type of variable `d`:</span></span><br /><br /> <span data-ttu-id="96bec-3539"><xref:System.Type.IsGenericType%2A> ist `false` da `d` ist ein Array.</span><span class="sxs-lookup"><span data-stu-id="96bec-3539"><xref:System.Type.IsGenericType%2A> is `false` because `d` is an array.</span></span><br /><br /> <span data-ttu-id="96bec-3540"><xref:System.Type.IsGenericTypeDefinition%2A> ist `false`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3540"><xref:System.Type.IsGenericTypeDefinition%2A> is `false`.</span></span><br /><br /> <span data-ttu-id="96bec-3541"><xref:System.Type.ContainsGenericParameters%2A> ist `false`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3541"><xref:System.Type.ContainsGenericParameters%2A> is `false`.</span></span>|  
|<span data-ttu-id="96bec-3542">`T`, `U`, und `V` (bei allen Vorkommen)</span><span class="sxs-lookup"><span data-stu-id="96bec-3542">`T`, `U`, and `V` (everywhere they appear)</span></span>|<span data-ttu-id="96bec-3543"><xref:System.Type.IsGenericParameter%2A> ist `true`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3543"><xref:System.Type.IsGenericParameter%2A> is `true`.</span></span><br /><br /> <span data-ttu-id="96bec-3544"><xref:System.Type.IsGenericType%2A> ist `false` , da es keine Möglichkeit gibt, um einen Typparameter auf generische Typen zu beschränken.</span><span class="sxs-lookup"><span data-stu-id="96bec-3544"><xref:System.Type.IsGenericType%2A> is `false` because there is no way to constrain a type parameter to generic types.</span></span><br /><br /> <span data-ttu-id="96bec-3545"><xref:System.Type.IsGenericTypeDefinition%2A> ist `false`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3545"><xref:System.Type.IsGenericTypeDefinition%2A> is `false`.</span></span><br /><br /> <span data-ttu-id="96bec-3546"><xref:System.Type.ContainsGenericParameters%2A> ist `true` da `T`, `U`, und `V` sind selbst generische Typparameter.</span><span class="sxs-lookup"><span data-stu-id="96bec-3546"><xref:System.Type.ContainsGenericParameters%2A> is `true` because `T`, `U`, and `V` are themselves generic type parameters.</span></span> <span data-ttu-id="96bec-3547">Dies bedeutet alles über Typargumente nicht, die sie später zugewiesen sind.</span><span class="sxs-lookup"><span data-stu-id="96bec-3547">This does not imply anything about type arguments that are assigned to them later.</span></span>|  
|<span data-ttu-id="96bec-3548">Der Typ des Felds `F`</span><span class="sxs-lookup"><span data-stu-id="96bec-3548">The type of field `F`</span></span>|<span data-ttu-id="96bec-3549"><xref:System.Type.IsGenericType%2A> ist `true`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3549"><xref:System.Type.IsGenericType%2A> is `true`.</span></span><br /><br /> <span data-ttu-id="96bec-3550"><xref:System.Type.IsGenericTypeDefinition%2A> ist `false` , da der Typparameter, der ein Typ zugewiesen wurde `G`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3550"><xref:System.Type.IsGenericTypeDefinition%2A> is `false` because a type has been assigned to the type parameter of `G`.</span></span> <span data-ttu-id="96bec-3551">Beachten Sie, dass dies dem Aufruf der <xref:System.Type.MakeGenericType%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="96bec-3551">Note that this is equivalent to having called the <xref:System.Type.MakeGenericType%2A> method.</span></span><br /><br /> <span data-ttu-id="96bec-3552"><xref:System.Type.ContainsGenericParameters%2A> ist `true` da der Typ des Felds `F` verfügt über ein Typargument, das ein offener Typ ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-3552"><xref:System.Type.ContainsGenericParameters%2A> is `true` because the type of field `F` has a type argument that is an open constructed type.</span></span> <span data-ttu-id="96bec-3553">Der konstruierte Typ geöffnet ist da dessen Typargument (d. h. `Base`) ist eine generische Typdefinition.</span><span class="sxs-lookup"><span data-stu-id="96bec-3553">The constructed type is open because its type argument (that is, `Base`) is a generic type definition.</span></span> <span data-ttu-id="96bec-3554">Dies ist der rekursiven Natur der der <xref:System.Type.IsGenericType%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="96bec-3554">This illustrates the recursive nature of the <xref:System.Type.IsGenericType%2A> property.</span></span>|  
|<span data-ttu-id="96bec-3555">Die geschachtelte Klasse `Nested`</span><span class="sxs-lookup"><span data-stu-id="96bec-3555">The nested class `Nested`</span></span>|<span data-ttu-id="96bec-3556"><xref:System.Type.IsGenericType%2A> ist `true`, obwohl die `Nested` Klasse verfügt über keine generischen Typparameter selbst, aus, weil sie in einem generischen Typ geschachtelt ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-3556"><xref:System.Type.IsGenericType%2A> is `true`, even though the `Nested` class has no generic type parameters of its own, because it is nested in a generic type.</span></span><br /><br /> <span data-ttu-id="96bec-3557"><xref:System.Type.IsGenericTypeDefinition%2A> ist `true`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3557"><xref:System.Type.IsGenericTypeDefinition%2A> is `true`.</span></span> <span data-ttu-id="96bec-3558">D. h., rufen Sie die <xref:System.Type.MakeGenericType%2A> -Methode und Angeben der Typparameter des einschließenden Typs `Derived`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3558">That is, you can call the <xref:System.Type.MakeGenericType%2A> method and supply the type parameter of the enclosing type, `Derived`.</span></span><br /><br /> <span data-ttu-id="96bec-3559"><xref:System.Type.ContainsGenericParameters%2A> ist `true` , da der einschließende Typ, `Derived`, verfügt über generische Typparameter.</span><span class="sxs-lookup"><span data-stu-id="96bec-3559"><xref:System.Type.ContainsGenericParameters%2A> is `true` because the enclosing type, `Derived`, has generic type parameters.</span></span> <span data-ttu-id="96bec-3560">Dies ist der rekursiven Natur der der <xref:System.Type.ContainsGenericParameters%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="96bec-3560">This illustrates the recursive nature of the <xref:System.Type.ContainsGenericParameters%2A> property.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="96bec-3561">Das folgende Codebeispiel zeigt den Wert von der <xref:System.Type.IsGenericType%2A>, <xref:System.Type.IsGenericTypeDefinition%2A>, <xref:System.Type.IsGenericParameter%2A>, und <xref:System.Type.ContainsGenericParameters%2A> Eigenschaften für die Typen, die im Abschnitt "Hinweise" beschrieben.</span><span class="sxs-lookup"><span data-stu-id="96bec-3561">The following code example displays the value of the <xref:System.Type.IsGenericType%2A>, <xref:System.Type.IsGenericTypeDefinition%2A>, <xref:System.Type.IsGenericParameter%2A>, and <xref:System.Type.ContainsGenericParameters%2A> properties for the types described in the Remarks section.</span></span> <span data-ttu-id="96bec-3562">Beschreibungen der Eigenschaftswerte finden Sie unter der zugehörigen Tabelle unter "Hinweise".</span><span class="sxs-lookup"><span data-stu-id="96bec-3562">For explanations of the property values, see the accompanying table in Remarks.</span></span>  
  
 [!code-cpp[System.Type.IsGenericType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsGenericType/cpp/source.cpp#1)]
 [!code-csharp[System.Type.IsGenericType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsGenericType/cs/source.cs#1)]
 [!code-vb[System.Type.IsGenericType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsGenericType/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="P:System.Type.IsGenericTypeDefinition" />
      </Docs>
    </Member>
    <Member MemberName="IsGenericTypeDefinition">
      <MemberSignature Language="C#" Value="public virtual bool IsGenericTypeDefinition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericTypeDefinition" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsGenericTypeDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsGenericTypeDefinition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericTypeDefinition { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericTypeDefinition : bool" Usage="System.Type.IsGenericTypeDefinition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3563">Gets a value indicating whether the current <see cref="T:System.Type" /> represents a generic type definition, from which other generic types can be constructed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3563">Gets a value indicating whether the current <see cref="T:System.Type" /> represents a generic type definition, from which other generic types can be constructed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-3564">
            <see langword="true" />, wenn das <see cref="T:System.Type" />-Objekt eine generische Typdefinition darstellt, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3564">
              <see langword="true" /> if the <see cref="T:System.Type" /> object represents a generic type definition; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3565">Eine generische Typdefinition ist eine Vorlage aus der anderen Typen konstruiert werden können.</span><span class="sxs-lookup"><span data-stu-id="96bec-3565">A generic type definition is a template from which other types can be constructed.</span></span> <span data-ttu-id="96bec-3566">Z. B. von der generischen Typdefinition `G<T>` (ausgedrückt in C#-Syntax; `G(Of T)` in Visual Basic oder `generic <typename T> ref class G` in C++) können Sie zu erstellen und den Typ instanziieren `G<int>` (`G(Of Integer)` in Visual Basic), durch den Aufruf der <xref:System.Type.MakeGenericType%2A> -Methode mit einer Liste mit generischen Argument der <xref:System.Int32> Typ.</span><span class="sxs-lookup"><span data-stu-id="96bec-3566">For example, from the generic type definition `G<T>` (expressed in C# syntax; `G(Of T)` in Visual Basic or `generic <typename T> ref class G` in C++) you can construct and instantiate the type `G<int>` (`G(Of Integer)` in Visual Basic), by calling the <xref:System.Type.MakeGenericType%2A> method with a generic argument list containing the <xref:System.Int32> type.</span></span> <span data-ttu-id="96bec-3567">Erhält eine <xref:System.Type> Objekt, das diese darstellt konstruierter Typ, der <xref:System.Type.GetGenericTypeDefinition%2A> Methode ruft die generische Typdefinition zurück, erneut.</span><span class="sxs-lookup"><span data-stu-id="96bec-3567">Given a <xref:System.Type> object representing this constructed type, the <xref:System.Type.GetGenericTypeDefinition%2A> method gets the generic type definition back again.</span></span>  
  
 <span data-ttu-id="96bec-3568">Verwenden der <xref:System.Type.IsGenericTypeDefinition%2A> Eigenschaft, um zu bestimmen, ob Sie neue Typen aus dem aktuellen Typ erstellen können.</span><span class="sxs-lookup"><span data-stu-id="96bec-3568">Use the <xref:System.Type.IsGenericTypeDefinition%2A> property to determine whether you can create new types from the current type.</span></span> <span data-ttu-id="96bec-3569">Wenn die <xref:System.Type.IsGenericTypeDefinition%2A> -Eigenschaft gibt `true`, rufen Sie die <xref:System.Type.MakeGenericType%2A> Methode, um die neuen generischen Typen erstellen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3569">If the <xref:System.Type.IsGenericTypeDefinition%2A> property returns `true`, you can call the <xref:System.Type.MakeGenericType%2A> method to create new generic types.</span></span>  
  
 <span data-ttu-id="96bec-3570">Eine Liste der invarianten Bedingungen für Begriffe, für Begriffe, die für die Reflektion mit generischen Methoden verwendet werden, finden Sie in den Hinweisen zur Eigenschaft <xref:System.Type.IsGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="96bec-3570">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-3571">Das folgende Beispiel zeigt Informationen zu einem Typ, einschließlich, und zwar unabhängig davon, ob es sich um eine generische Typdefinition ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-3571">The following example displays information about a type, including whether or not it is a generic type definition.</span></span> <span data-ttu-id="96bec-3572">Informationen werden für einen konstruierten Typ, für die generische Typdefinition, und einem normalen Typ angezeigt.</span><span class="sxs-lookup"><span data-stu-id="96bec-3572">Information is displayed for a constructed type, for its generic type definition, and for an ordinary type.</span></span>  
  
 [!code-cpp[System.Type.IsGenericTypeDefinition#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/CPP/source.cpp#1)]
 [!code-csharp[System.Type.IsGenericTypeDefinition#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/CS/source.cs#1)]
 [!code-vb[System.Type.IsGenericTypeDefinition#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="M:System.Type.GetGenericTypeDefinition" />
      </Docs>
    </Member>
    <Member MemberName="IsGenericTypeParameter">
      <MemberSignature Language="C#" Value="public virtual bool IsGenericTypeParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericTypeParameter" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsGenericTypeParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsGenericTypeParameter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericTypeParameter { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericTypeParameter : bool" Usage="System.Type.IsGenericTypeParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsImport">
      <MemberSignature Language="C#" Value="public bool IsImport { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsImport" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsImport" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsImport As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsImport { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsImport : bool" Usage="System.Type.IsImport" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsImport</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3573">Gets a value indicating whether the <see cref="T:System.Type" /> has a <see cref="T:System.Runtime.InteropServices.ComImportAttribute" /> attribute applied, indicating that it was imported from a COM type library.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3573">Gets a value indicating whether the <see cref="T:System.Type" /> has a <see cref="T:System.Runtime.InteropServices.ComImportAttribute" /> attribute applied, indicating that it was imported from a COM type library.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-3574">
            <see langword="true" />, wenn der <see cref="T:System.Type" /> ein <see cref="T:System.Runtime.InteropServices.ComImportAttribute" /> hat, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3574">
              <see langword="true" /> if the <see cref="T:System.Type" /> has a <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3575">Wenn die aktuelle <xref:System.Type> stellt ein konstruierter generischer Typ, diese Eigenschaft gilt, für die Definition des generischen Typs aus der der Typ konstruiert wurde.</span><span class="sxs-lookup"><span data-stu-id="96bec-3575">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="96bec-3576">Z. B. wenn die aktuelle <xref:System.Type> stellt `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), der Wert dieser Eigenschaft wird bestimmt durch `MyGenericType<T>.`</span><span class="sxs-lookup"><span data-stu-id="96bec-3576">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>.`</span></span>  
  
 <span data-ttu-id="96bec-3577">Wenn die aktuelle <xref:System.Type> einen Typparameter in der Definition eines generischen Typs oder generische Methode darstellt, auf diese Eigenschaft gibt immer `false`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3577">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsInstanceOfType">
      <MemberSignature Language="C#" Value="public virtual bool IsInstanceOfType (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsInstanceOfType(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsInstanceOfType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsInstanceOfType (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsInstanceOfType(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="abstract member IsInstanceOfType : obj -&gt; bool&#xA;override this.IsInstanceOfType : obj -&gt; bool" Usage="type.IsInstanceOfType o" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.IsInstanceOfType(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">
          <span data-ttu-id="96bec-3578">The object to compare with the current type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3578">The object to compare with the current type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-3579">Determines whether the specified object is an instance of the current <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3579">Determines whether the specified object is an instance of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-3580">
            <see langword="true" /> if the current <see langword="Type" /> is in the inheritance hierarchy of the object represented by <paramref name="o" />, or if the current <see langword="Type" /> is an interface that <paramref name="o" /> implements.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3580">
              <see langword="true" /> if the current <see langword="Type" /> is in the inheritance hierarchy of the object represented by <paramref name="o" />, or if the current <see langword="Type" /> is an interface that <paramref name="o" /> implements.</span>
          </span>
          <span data-ttu-id="96bec-3581">
            <see langword="false" /> if neither of these conditions is the case, if <paramref name="o" /> is <see langword="null" />, or if the current <see langword="Type" /> is an open generic type (that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3581">
              <see langword="false" /> if neither of these conditions is the case, if <paramref name="o" /> is <see langword="null" />, or if the current <see langword="Type" /> is an open generic type (that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />).</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3582">Diese Methode kann von einer abgeleiteten Klasse überschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-3582">This method can be overridden by a derived class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-3583">Ein konstruierter Typ ist keine Instanz der generischen Typdefinition.</span><span class="sxs-lookup"><span data-stu-id="96bec-3583">A constructed type is not an instance of its generic type definition.</span></span> <span data-ttu-id="96bec-3584">D. h. `MyGenericList<int>` (`MyGenericList(Of Integer)` in Visual Basic) ist keine Instanz des `MyGenericList<T>` (`MyGenericList(Of T)` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="96bec-3584">That is, `MyGenericList<int>` (`MyGenericList(Of Integer)` in Visual Basic) is not an instance of `MyGenericList<T>` (`MyGenericList(Of T)` in Visual Basic).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-3585">Im folgenden Beispiel wird die Verwendung der `IsInstanceOfType`-Methode gezeigt.</span><span class="sxs-lookup"><span data-stu-id="96bec-3585">The following example demonstrates the use of the `IsInstanceOfType` method.</span></span>  
  
 [!code-cpp[TestIsInstanceOfType#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestIsInstanceOfType/CPP/testisinstanceoftype.cpp#1)]
 [!code-csharp[TestIsInstanceOfType#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestIsInstanceOfType/CS/testisinstanceoftype.cs#1)]
 [!code-vb[TestIsInstanceOfType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestIsInstanceOfType/VB/testisinstanceoftype.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInterface">
      <MemberSignature Language="C#" Value="public bool IsInterface { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInterface" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsInterface" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInterface As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInterface { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInterface : bool" Usage="System.Type.IsInterface" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsInterface</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3586">Gets a value indicating whether the <see cref="T:System.Type" /> is an interface; that is, not a class or a value type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3586">Gets a value indicating whether the <see cref="T:System.Type" /> is an interface; that is, not a class or a value type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-3587">
            <see langword="true" />, wenn <see cref="T:System.Type" /> eine Schnittstelle ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3587">
              <see langword="true" /> if the <see cref="T:System.Type" /> is an interface; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3588">Die <xref:System.Reflection.TypeAttributes.ClassSemanticsMask> kennzeichnet eine Typdeklaration als Klasse, Schnittstelle oder eines Werttyps.</span><span class="sxs-lookup"><span data-stu-id="96bec-3588">The <xref:System.Reflection.TypeAttributes.ClassSemanticsMask> distinguishes a type declaration as class, interface or value type.</span></span>  
  
 <span data-ttu-id="96bec-3589">Wenn die aktuelle <xref:System.Type> einen Typparameter in der Definition eines generischen Typs oder generische Methode darstellt, auf diese Eigenschaft gibt immer `false`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3589">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="96bec-3590">Diese Eigenschaft ist schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="96bec-3590">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-3591">Das folgende Beispiel erstellt eine Schnittstelle, überprüft, ob der Schnittstellentyp und gibt an, ob eine Klasse verfügt über die `IsInterface` Eigenschaftensatz.</span><span class="sxs-lookup"><span data-stu-id="96bec-3591">The following example creates an interface, checks for the interface type, and indicates whether a class has the `IsInterface` property set.</span></span>  
  
 [!code-cpp[Type_IsInterface#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsInterface/CPP/type_isinterface.cpp#1)]
 [!code-csharp[Type_IsInterface#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsInterface/CS/type_isinterface.cs#1)]
 [!code-vb[Type_IsInterface#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsInterface/VB/type_isinterface.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsClass" />
        <altmember cref="P:System.Type.IsValueType" />
      </Docs>
    </Member>
    <Member MemberName="IsLayoutSequential">
      <MemberSignature Language="C#" Value="public bool IsLayoutSequential { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLayoutSequential" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsLayoutSequential" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLayoutSequential As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLayoutSequential { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsLayoutSequential : bool" Usage="System.Type.IsLayoutSequential" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsLayoutSequential</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3592">Gets a value indicating whether the fields of the current type are laid out sequentially, in the order that they were defined or emitted to the metadata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3592">Gets a value indicating whether the fields of the current type are laid out sequentially, in the order that they were defined or emitted to the metadata.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-3593">
            <see langword="true" />, wenn die <see cref="P:System.Type.Attributes" />-Eigenschaft des aktuellen Typs <see cref="F:System.Reflection.TypeAttributes.SequentialLayout" /> umfasst; andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3593">
              <see langword="true" /> if the <see cref="P:System.Type.Attributes" /> property of the current type includes <see cref="F:System.Reflection.TypeAttributes.SequentialLayout" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3594">Diese Eigenschaft ist zur Vereinfachung bereitgestellt.</span><span class="sxs-lookup"><span data-stu-id="96bec-3594">This property is provided as a convenience.</span></span> <span data-ttu-id="96bec-3595">Alternativ können Sie die <xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType> Enumerationswert, der die Attribute des Typs Layout und anschließend testen Sie, ob wählen <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-3595">Alternatively, you can use the <xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType> enumeration value to select the type layout attributes, and then test whether <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> is set.</span></span> <span data-ttu-id="96bec-3596">Die <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>, <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>, und <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> Enumerationswerte geben die Möglichkeit, die die Felder des Typs im Arbeitsspeicher angeordnet werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-3596">The <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>, <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>, and <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> enumeration values indicate the way the fields of the type are laid out in memory.</span></span>  
  
 <span data-ttu-id="96bec-3597">Für dynamische Typen können Sie angeben <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> beim Erstellen des Typs.</span><span class="sxs-lookup"><span data-stu-id="96bec-3597">For dynamic types, you can specify <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> when you create the type.</span></span> <span data-ttu-id="96bec-3598">Im Code, gelten die <xref:System.Runtime.InteropServices.StructLayoutAttribute> -Attribut mit der <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> Enumerationswert, der Typ, um anzugeben, das Layout ist sequenziell.</span><span class="sxs-lookup"><span data-stu-id="96bec-3598">In code, apply the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute with the <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> enumeration value to the type, to specify that layout is sequential.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-3599">Können keine der <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> Methode, um zu bestimmen, ob die <xref:System.Runtime.InteropServices.StructLayoutAttribute> auf einen Typ angewendet wurde.</span><span class="sxs-lookup"><span data-stu-id="96bec-3599">You cannot use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method to determine whether the <xref:System.Runtime.InteropServices.StructLayoutAttribute> has been applied to a type.</span></span>  
  
 <span data-ttu-id="96bec-3600">Weitere Informationen finden Sie im Abschnitt 9.1.2 der Spezifikation für die Dokumentation der Common Language Infrastructure (CLI), "Partition II: Metadata Definition and Semantics".</span><span class="sxs-lookup"><span data-stu-id="96bec-3600">For more information, see section 9.1.2 of the specification for the Common Language Infrastructure (CLI) documentation, "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="96bec-3601">Die Dokumentation ist online verfügbar. Sie finden sie unter [ECMA C# and Common Language Infrastructure Standards (Standards von ECMA C# und Common Language Infrastructure)](http://go.microsoft.com/fwlink/?LinkID=99212) auf MSDN und [Standard ECMA-335 - Common Language Infrastructure (CLI) (Standard ECMA-335 – Common Language Infrastructure (CLI))](http://go.microsoft.com/fwlink/?LinkID=65552) auf der Ecma International-Website.</span><span class="sxs-lookup"><span data-stu-id="96bec-3601">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 <span data-ttu-id="96bec-3602">Wenn die aktuelle <xref:System.Type> stellt ein konstruierter generischer Typ, diese Eigenschaft gilt, für die Definition des generischen Typs aus der der Typ konstruiert wurde.</span><span class="sxs-lookup"><span data-stu-id="96bec-3602">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="96bec-3603">Z. B. wenn die aktuelle <xref:System.Type> stellt `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), der Wert dieser Eigenschaft richtet sich nach `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3603">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="96bec-3604">Wenn die aktuelle <xref:System.Type> einen Typparameter in der Definition eines generischen Typs oder generische Methode darstellt, auf diese Eigenschaft gibt immer `false`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3604">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-3605">Das folgende Beispiel erstellt eine Instanz einer Klasse für den die <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> Enumerationswert in der <xref:System.Runtime.InteropServices.StructLayoutAttribute> -Klasse festgelegt wurde, überprüft, ob die <xref:System.Type.IsLayoutSequential%2A> -Eigenschaft, und zeigt das Ergebnis.</span><span class="sxs-lookup"><span data-stu-id="96bec-3605">The following example creates an instance of a class for which the <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> enumeration value in the <xref:System.Runtime.InteropServices.StructLayoutAttribute> class has been set, checks for the <xref:System.Type.IsLayoutSequential%2A> property, and displays the result.</span></span>  
  
 [!code-cpp[Type_IsLayoutSequential#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsLayoutSequential/CPP/type_islayoutsequential.cpp#1)]
 [!code-csharp[Type_IsLayoutSequential#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsLayoutSequential/CS/type_islayoutsequential.cs#1)]
 [!code-vb[Type_IsLayoutSequential#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsLayoutSequential/VB/type_islayoutsequential.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsAutoLayout" />
        <altmember cref="P:System.Type.IsExplicitLayout" />
      </Docs>
    </Member>
    <Member MemberName="IsMarshalByRef">
      <MemberSignature Language="C#" Value="public bool IsMarshalByRef { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMarshalByRef" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsMarshalByRef" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMarshalByRef As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMarshalByRef { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMarshalByRef : bool" Usage="System.Type.IsMarshalByRef" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsMarshalByRef</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3606">Gets a value indicating whether the <see cref="T:System.Type" /> is marshaled by reference.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3606">Gets a value indicating whether the <see cref="T:System.Type" /> is marshaled by reference.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-3607">
            <see langword="true" />, wenn <see cref="T:System.Type" /> als Verweis gemarshallt wird, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3607">
              <see langword="true" /> if the <see cref="T:System.Type" /> is marshaled by reference; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="96bec-3608">Das folgende Beispiel zeigt die `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, und <xref:System.Type.IsPrimitive%2A> Eigenschaften der <xref:System.Type> Klasse.</span><span class="sxs-lookup"><span data-stu-id="96bec-3608">The following example demonstrates the `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, and <xref:System.Type.IsPrimitive%2A> properties of the <xref:System.Type> class.</span></span> <span data-ttu-id="96bec-3609">Er überprüft, ob der angegebene Typ in den Kontext aufgenommen werden kann, ob es als Verweis gemarshallt werden kann und ob der Typ ein primitiver Datentyp ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-3609">It checks whether the given type can be hosted in the context, whether it can be marshaled by reference, and whether the type is a primitive data type.</span></span>  
  
 [!code-cpp[Type_IsContextful#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsContextful/CPP/type_iscontextful.cpp#1)]
 [!code-csharp[Type_IsContextful#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsContextful/CS/type_iscontextful.cs#1)]
 [!code-vb[Type_IsContextful#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsContextful/VB/type_iscontextful.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsMarshalByRefImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsMarshalByRefImpl">
      <MemberSignature Language="C#" Value="protected virtual bool IsMarshalByRefImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsMarshalByRefImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsMarshalByRefImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsMarshalByRefImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool IsMarshalByRefImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsMarshalByRefImpl : unit -&gt; bool&#xA;override this.IsMarshalByRefImpl : unit -&gt; bool" Usage="type.IsMarshalByRefImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3610">Implements the <see cref="P:System.Type.IsMarshalByRef" /> property and determines whether the <see cref="T:System.Type" /> is marshaled by reference.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3610">Implements the <see cref="P:System.Type.IsMarshalByRef" /> property and determines whether the <see cref="T:System.Type" /> is marshaled by reference.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-3611">
            <see langword="true" /> if the <see cref="T:System.Type" /> is marshaled by reference; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3611">
              <see langword="true" /> if the <see cref="T:System.Type" /> is marshaled by reference; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3612">Diese Methode kann von einer abgeleiteten Klasse überschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-3612">This method can be overridden by a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-3613">Im folgenden Beispiel wird bestimmt, ob der angegebene Typ als Verweis gemarshallt wird und das Ergebnis wird angezeigt.</span><span class="sxs-lookup"><span data-stu-id="96bec-3613">The following example determines whether the given type is marshaled by reference and displays the result.</span></span>  
  
 [!code-cpp[Type_IsMarshalByRefImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsMarshalByRefImpl/CPP/type_ismarshalbyrefimpl.cpp#1)]
 [!code-csharp[Type_IsMarshalByRefImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsMarshalByRefImpl/CS/type_ismarshalbyrefimpl.cs#1)]
 [!code-vb[Type_IsMarshalByRefImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsMarshalByRefImpl/VB/type_ismarshalbyrefimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsMarshalByRef" />
      </Docs>
    </Member>
    <Member MemberName="IsNested">
      <MemberSignature Language="C#" Value="public bool IsNested { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNested" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNested" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNested As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNested { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNested : bool" Usage="System.Type.IsNested" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3614">Gets a value indicating whether the current <see cref="T:System.Type" /> object represents a type whose definition is nested inside the definition of another type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3614">Gets a value indicating whether the current <see cref="T:System.Type" /> object represents a type whose definition is nested inside the definition of another type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-3615">
            <see langword="true" />, wenn der <see cref="T:System.Type" /> in einem anderen Typ geschachtelt ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3615">
              <see langword="true" /> if the <see cref="T:System.Type" /> is nested inside another type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3616">Die <xref:System.Type.IsNested%2A> -Eigenschaft gibt `true` für alle geschachtelten Typen, unabhängig der Sichtbarkeit.</span><span class="sxs-lookup"><span data-stu-id="96bec-3616">The <xref:System.Type.IsNested%2A> property returns `true` for all nested types, regardless of visibility.</span></span> <span data-ttu-id="96bec-3617">Um zur gleichen Zeit für die Schachtelung und Sichtbarkeit zu testen, verwenden Sie die verwandten Eigenschaften <xref:System.Type.IsNestedAssembly%2A>, <xref:System.Type.IsNestedFamily%2A>, <xref:System.Type.IsNestedFamANDAssem%2A>, <xref:System.Type.IsNestedFamORAssem%2A>, <xref:System.Type.IsNestedPrivate%2A>, oder <xref:System.Type.IsNestedPublic%2A>.</span><span class="sxs-lookup"><span data-stu-id="96bec-3617">To test for nesting and visibility at the same time, use the related properties <xref:System.Type.IsNestedAssembly%2A>, <xref:System.Type.IsNestedFamily%2A>, <xref:System.Type.IsNestedFamANDAssem%2A>, <xref:System.Type.IsNestedFamORAssem%2A>, <xref:System.Type.IsNestedPrivate%2A>, or <xref:System.Type.IsNestedPublic%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-3618">Die <xref:System.Reflection.TypeAttributes.VisibilityMask> Enumerationsmember wählt die Visibility-Attribute für einen Typ.</span><span class="sxs-lookup"><span data-stu-id="96bec-3618">The <xref:System.Reflection.TypeAttributes.VisibilityMask> enumeration member selects the visibility attributes for a type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-3619">Das folgende Beispiel erstellt eine äußere Klasse mit einer Reihe von geschachtelten Klassen, die verschiedene Arten von Sichtbarkeit.</span><span class="sxs-lookup"><span data-stu-id="96bec-3619">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="96bec-3620">Klicken Sie dann den Wert einer Reihe von Sichtbarkeit im Zusammenhang abgerufen, <xref:System.Type> Eigenschaften für den übergeordneten Typ und jeder der geschachtelten Typen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3620">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsNestedAssembly" />
        <altmember cref="P:System.Type.IsNestedFamily" />
        <altmember cref="P:System.Type.IsNestedFamANDAssem" />
        <altmember cref="P:System.Type.IsNestedFamORAssem" />
        <altmember cref="P:System.Type.IsNestedPrivate" />
        <altmember cref="P:System.Type.IsNestedPublic" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedAssembly">
      <MemberSignature Language="C#" Value="public bool IsNestedAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedAssembly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedAssembly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedAssembly : bool" Usage="System.Type.IsNestedAssembly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedAssembly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3621">Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only within its own assembly.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3621">Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only within its own assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-3622">
            <see langword="true" />, wenn <see cref="T:System.Type" /> geschachtelt und nur innerhalb der eigenen Assembly sichtbar ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3622">
              <see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only within its own assembly; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3623">Wenn die aktuelle <xref:System.Type> einen Typparameter eines generischen Typs darstellt, auf diese Eigenschaft gibt immer `false`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3623">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="96bec-3624"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> Wählt die Visibility-Attribute.</span><span class="sxs-lookup"><span data-stu-id="96bec-3624"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-3625">Das folgende Beispiel erstellt eine äußere Klasse mit einer Reihe von geschachtelten Klassen, die verschiedene Arten von Sichtbarkeit.</span><span class="sxs-lookup"><span data-stu-id="96bec-3625">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="96bec-3626">Klicken Sie dann den Wert einer Reihe von Sichtbarkeit im Zusammenhang abgerufen, <xref:System.Type> Eigenschaften für den übergeordneten Typ und jeder der geschachtelten Typen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3626">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedFamANDAssem">
      <MemberSignature Language="C#" Value="public bool IsNestedFamANDAssem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedFamANDAssem" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedFamANDAssem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedFamANDAssem As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedFamANDAssem { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedFamANDAssem : bool" Usage="System.Type.IsNestedFamANDAssem" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedFamANDAssem</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3627">Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only to classes that belong to both its own family and its own assembly.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3627">Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only to classes that belong to both its own family and its own assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-3628">
            <see langword="true" />, wenn <see cref="T:System.Type" /> geschachtelt und ausschließlich für Klassen sichtbar ist, die sowohl zur eigenen Familie als auch zur eigenen Assembly gehören, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3628">
              <see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only to classes that belong to both its own family and its own assembly; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3629">Wenn die aktuelle <xref:System.Type> einen Typparameter eines generischen Typs darstellt, auf diese Eigenschaft gibt immer `false`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3629">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="96bec-3630"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> Wählt die Visibility-Attribute.</span><span class="sxs-lookup"><span data-stu-id="96bec-3630"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-3631">Die Sprachen c# und Visual Basic beinhalten keine Semantik, mit denen Sie einen geschachtelten Typ definieren, der nur für geschützte Typen in seiner eigenen Assembly sichtbar ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-3631">The C# and Visual Basic languages do not include semantics that allow you to define a nested type that is visible only to protected types in its own assembly.</span></span> <span data-ttu-id="96bec-3632">`protected internal` Einblick in C# geschrieben und `Protected Friend` Sichtbarkeit in Visual Basic definiert einen geschachtelten Typ, der sowohl für geschützte Typen und Typen in der gleichen Assembly sichtbar ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-3632">`protected internal` visibility in C# and `Protected Friend` visibility in Visual Basic define a nested type that is visible both to protected types and to types in the same assembly.</span></span>  
  
 <span data-ttu-id="96bec-3633">Ein <xref:System.Type> des Objekts-Familie wird definiert als alle Objekte des gleichen <xref:System.Type> und seiner Untertypen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3633">A <xref:System.Type> object's family is defined as all objects of the same <xref:System.Type> and of its subtypes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-3634">Das folgende Beispiel erstellt eine äußere Klasse mit einer Reihe von geschachtelten Klassen, die verschiedene Arten von Sichtbarkeit.</span><span class="sxs-lookup"><span data-stu-id="96bec-3634">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="96bec-3635">Klicken Sie dann den Wert einer Reihe von Sichtbarkeit im Zusammenhang abgerufen, <xref:System.Type> Eigenschaften für den übergeordneten Typ und jeder der geschachtelten Typen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3635">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedFamily">
      <MemberSignature Language="C#" Value="public bool IsNestedFamily { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedFamily" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedFamily" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedFamily As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedFamily { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedFamily : bool" Usage="System.Type.IsNestedFamily" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedFamily</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3636">Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only within its own family.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3636">Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only within its own family.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-3637">
            <see langword="true" />, wenn <see cref="T:System.Type" /> geschachtelt und nur innerhalb der eigenen Familie sichtbar ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3637">
              <see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only within its own family; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3638">Wenn die aktuelle <xref:System.Type> einen Typparameter eines generischen Typs darstellt, auf diese Eigenschaft gibt immer `false`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3638">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="96bec-3639"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> Wählt die Visibility-Attribute.</span><span class="sxs-lookup"><span data-stu-id="96bec-3639"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
 <span data-ttu-id="96bec-3640">Ein <xref:System.Type> des Objekts-Familie wird definiert als alle Objekte der genauen gleichen <xref:System.Type> und seiner Untertypen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3640">A <xref:System.Type> object's family is defined as all objects of the exact same <xref:System.Type> and of its subtypes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-3641">Das folgende Beispiel erstellt eine äußere Klasse mit einer Reihe von geschachtelten Klassen, die verschiedene Arten von Sichtbarkeit.</span><span class="sxs-lookup"><span data-stu-id="96bec-3641">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="96bec-3642">Klicken Sie dann den Wert einer Reihe von Sichtbarkeit im Zusammenhang abgerufen, <xref:System.Type> Eigenschaften für den übergeordneten Typ und jeder der geschachtelten Typen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3642">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedFamORAssem">
      <MemberSignature Language="C#" Value="public bool IsNestedFamORAssem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedFamORAssem" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedFamORAssem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedFamORAssem As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedFamORAssem { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedFamORAssem : bool" Usage="System.Type.IsNestedFamORAssem" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedFamORAssem</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3643">Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only to classes that belong to either its own family or to its own assembly.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3643">Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only to classes that belong to either its own family or to its own assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-3644">
            <see langword="true" />, wenn <see cref="T:System.Type" /> geschachtelt und ausschließlich für Klassen sichtbar ist, die zur eigenen Familie oder zur eigenen Assembly gehören, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3644">
              <see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only to classes that belong to its own family or to its own assembly; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3645">Wenn die Sichtbarkeit eines Typs ist `protected internal` in c# oder `Protected Friend` in Visual Basic die <xref:System.Type.IsNestedFamORAssem%2A> -Eigenschaft gibt `true`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3645">If the visibility of a type is `protected internal` in C# or `Protected Friend` in Visual Basic, the <xref:System.Type.IsNestedFamORAssem%2A> property returns `true`.</span></span>  
  
 <span data-ttu-id="96bec-3646">Wenn die aktuelle <xref:System.Type> einen Typparameter eines generischen Typs darstellt, auf diese Eigenschaft gibt immer `false`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3646">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="96bec-3647"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> Wählt die Visibility-Attribute.</span><span class="sxs-lookup"><span data-stu-id="96bec-3647"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
 <span data-ttu-id="96bec-3648">Ein <xref:System.Type> des Objekts-Familie wird definiert als alle Objekte der genauen gleichen <xref:System.Type> und seiner Untertypen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3648">A <xref:System.Type> object's family is defined as all objects of the exact same <xref:System.Type> and of its subtypes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-3649">Das folgende Beispiel erstellt eine äußere Klasse mit einer Reihe von geschachtelten Klassen, die verschiedene Arten von Sichtbarkeit.</span><span class="sxs-lookup"><span data-stu-id="96bec-3649">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="96bec-3650">Klicken Sie dann den Wert einer Reihe von Sichtbarkeit im Zusammenhang abgerufen, <xref:System.Type> Eigenschaften für den übergeordneten Typ und jeder der geschachtelten Typen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3650">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedPrivate">
      <MemberSignature Language="C#" Value="public bool IsNestedPrivate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedPrivate" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedPrivate" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedPrivate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedPrivate { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedPrivate : bool" Usage="System.Type.IsNestedPrivate" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedPrivate</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3651">Gets a value indicating whether the <see cref="T:System.Type" /> is nested and declared private.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3651">Gets a value indicating whether the <see cref="T:System.Type" /> is nested and declared private.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-3652">
            <see langword="true" />, wenn <see cref="T:System.Type" /> geschachtelt und als privat deklariert ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3652">
              <see langword="true" /> if the <see cref="T:System.Type" /> is nested and declared private; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3653">Wenn die aktuelle <xref:System.Type> einen Typparameter eines generischen Typs darstellt, auf diese Eigenschaft gibt immer `false`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3653">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="96bec-3654"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> Wählt die Visibility-Attribute.</span><span class="sxs-lookup"><span data-stu-id="96bec-3654"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-3655">Das folgende Beispiel erstellt eine äußere Klasse mit einer Reihe von geschachtelten Klassen, die verschiedene Arten von Sichtbarkeit.</span><span class="sxs-lookup"><span data-stu-id="96bec-3655">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="96bec-3656">Klicken Sie dann den Wert einer Reihe von Sichtbarkeit im Zusammenhang abgerufen, <xref:System.Type> Eigenschaften für den übergeordneten Typ und jeder der geschachtelten Typen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3656">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedPublic">
      <MemberSignature Language="C#" Value="public bool IsNestedPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedPublic" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedPublic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedPublic : bool" Usage="System.Type.IsNestedPublic" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedPublic</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3657">Gets a value indicating whether a class is nested and declared public.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3657">Gets a value indicating whether a class is nested and declared public.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-3658">
            <see langword="true" />, wenn die Klasse geschachtelt und als öffentlich deklariert ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3658">
              <see langword="true" /> if the class is nested and declared public; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3659">Wenn die aktuelle <xref:System.Type> einen Typparameter eines generischen Typs darstellt, auf diese Eigenschaft gibt immer `false`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3659">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="96bec-3660"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> Wählt die Visibility-Attribute.</span><span class="sxs-lookup"><span data-stu-id="96bec-3660"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-3661">Das folgende Beispiel erstellt eine äußere Klasse mit einer Reihe von geschachtelten Klassen, die verschiedene Arten von Sichtbarkeit.</span><span class="sxs-lookup"><span data-stu-id="96bec-3661">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="96bec-3662">Klicken Sie dann den Wert einer Reihe von Sichtbarkeit im Zusammenhang abgerufen, <xref:System.Type> Eigenschaften für den übergeordneten Typ und jeder der geschachtelten Typen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3662">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNotPublic">
      <MemberSignature Language="C#" Value="public bool IsNotPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNotPublic" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNotPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNotPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNotPublic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNotPublic : bool" Usage="System.Type.IsNotPublic" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNotPublic</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3663">Gets a value indicating whether the <see cref="T:System.Type" /> is not declared public.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3663">Gets a value indicating whether the <see cref="T:System.Type" /> is not declared public.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-3664">
            <see langword="true" />, wenn der <see cref="T:System.Type" /> nicht als öffentlich deklariert und kein geschachtelter Typ ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3664">
              <see langword="true" /> if the <see cref="T:System.Type" /> is not declared public and is not a nested type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3665">Verwenden Sie diese Eigenschaft nicht geschachtelten Typen. Verwenden Sie die <xref:System.Type.IsNestedPublic%2A> Eigenschaft stattdessen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3665">Do not use this property with nested types; use the <xref:System.Type.IsNestedPublic%2A> property instead.</span></span>  
  
 <span data-ttu-id="96bec-3666">Wenn die aktuelle <xref:System.Type> einen Typparameter eines generischen Typs darstellt, gibt diese Eigenschaft `false`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3666">If the current <xref:System.Type> represents a type parameter of a generic type, this property returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-3667">Dieses Beispiel verwendet die `IsNotPublic` Eigenschaft, um die Sichtbarkeit des Typs abzurufen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3667">This example usesthe `IsNotPublic` property to get the visibility of the type.</span></span>  
  
 [!code-cpp[Classic Type.IsNotPublic Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.IsNotPublic Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/CS/source.cs#1)]
 [!code-vb[Classic Type.IsNotPublic Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/VB/source.vb#1)]  
  
 <span data-ttu-id="96bec-3668">Im folgenden Codebeispiel wird veranschaulicht, warum Sie nicht verwenden können `IsPublic` und `IsNotPublic` für geschachtelte Klassen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3668">The following code example demonstrates why you cannot use `IsPublic` and `IsNotPublic` for nested classes.</span></span>  
  
 [!code-cpp[Classic Type.IsNotPublic Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/CPP/source.cpp#2)]
 [!code-csharp[Classic Type.IsNotPublic Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/CS/source.cs#2)]
 [!code-vb[Classic Type.IsNotPublic Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/VB/source.vb#2)]  
  
 <span data-ttu-id="96bec-3669">Ignorieren Sie für geschachtelte Klassen, die Ergebnisse der `IsPublic` und `IsNotPublic` und achten Sie nur auf die Ergebnisse der `IsNestedPublic` und `IsNestedPrivate`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3669">For nested classes, ignore the results of `IsPublic` and `IsNotPublic` and pay attention only to the results of `IsNestedPublic` and `IsNestedPrivate`.</span></span> <span data-ttu-id="96bec-3670">Die Ausgabe der Reflektion für dieses Codefragment würde wie folgt lauten:</span><span class="sxs-lookup"><span data-stu-id="96bec-3670">The reflection output for this code fragment would be as follows:</span></span>  
  
|<span data-ttu-id="96bec-3671">Klasse</span><span class="sxs-lookup"><span data-stu-id="96bec-3671">Class</span></span>|<span data-ttu-id="96bec-3672">IsNotPublic</span><span class="sxs-lookup"><span data-stu-id="96bec-3672">IsNotPublic</span></span>|<span data-ttu-id="96bec-3673">IsPublic</span><span class="sxs-lookup"><span data-stu-id="96bec-3673">IsPublic</span></span>|<span data-ttu-id="96bec-3674">IsNestedPublic</span><span class="sxs-lookup"><span data-stu-id="96bec-3674">IsNestedPublic</span></span>|<span data-ttu-id="96bec-3675">IsNestedPrivate</span><span class="sxs-lookup"><span data-stu-id="96bec-3675">IsNestedPrivate</span></span>|  
|-----------|-----------------|--------------|--------------------|---------------------|  
|<span data-ttu-id="96bec-3676">A</span><span class="sxs-lookup"><span data-stu-id="96bec-3676">A</span></span>|<span data-ttu-id="96bec-3677">false</span><span class="sxs-lookup"><span data-stu-id="96bec-3677">FALSE</span></span>|<span data-ttu-id="96bec-3678">true</span><span class="sxs-lookup"><span data-stu-id="96bec-3678">TRUE</span></span>|<span data-ttu-id="96bec-3679">false</span><span class="sxs-lookup"><span data-stu-id="96bec-3679">FALSE</span></span>|<span data-ttu-id="96bec-3680">false</span><span class="sxs-lookup"><span data-stu-id="96bec-3680">FALSE</span></span>|  
|<span data-ttu-id="96bec-3681">B</span><span class="sxs-lookup"><span data-stu-id="96bec-3681">B</span></span>|<span data-ttu-id="96bec-3682">false</span><span class="sxs-lookup"><span data-stu-id="96bec-3682">FALSE</span></span>|<span data-ttu-id="96bec-3683">false</span><span class="sxs-lookup"><span data-stu-id="96bec-3683">FALSE</span></span>|<span data-ttu-id="96bec-3684">true</span><span class="sxs-lookup"><span data-stu-id="96bec-3684">TRUE</span></span>|<span data-ttu-id="96bec-3685">false</span><span class="sxs-lookup"><span data-stu-id="96bec-3685">FALSE</span></span>|  
|<span data-ttu-id="96bec-3686">A</span><span class="sxs-lookup"><span data-stu-id="96bec-3686">C</span></span>|<span data-ttu-id="96bec-3687">false</span><span class="sxs-lookup"><span data-stu-id="96bec-3687">FALSE</span></span>|<span data-ttu-id="96bec-3688">FALSE</span><span class="sxs-lookup"><span data-stu-id="96bec-3688">FALSE</span></span>|<span data-ttu-id="96bec-3689">false</span><span class="sxs-lookup"><span data-stu-id="96bec-3689">FALSE</span></span>|<span data-ttu-id="96bec-3690">true</span><span class="sxs-lookup"><span data-stu-id="96bec-3690">TRUE</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsPointer">
      <MemberSignature Language="C#" Value="public bool IsPointer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPointer" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsPointer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPointer As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPointer { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPointer : bool" Usage="System.Type.IsPointer" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsPointer</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3691">Gets a value indicating whether the <see cref="T:System.Type" /> is a pointer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3691">Gets a value indicating whether the <see cref="T:System.Type" /> is a pointer.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-3692">
            <see langword="true" />, wenn <see cref="T:System.Type" /> ein Zeiger ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3692">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a pointer; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3693">Wenn die aktuelle <xref:System.Type> stellt einen generischen Typ oder einen Typparameter in der Definition eines generischen Typs oder generische Methode muss diese Eigenschaft gibt immer `false`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3693">If the current <xref:System.Type> represents a generic type, or a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="96bec-3694">Diese Eigenschaft ist schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="96bec-3694">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-3695">Das folgende Beispiel veranschaulicht die Verwendung von der `IsPointer` Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="96bec-3695">The following example shows a use of the `IsPointer` property.</span></span>  
  
 [!code-cpp[Type_HasElementTypeImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_HasElementTypeImpl/CPP/type_haselementtypeimpl.cpp#1)]
 [!code-csharp[Type_HasElementTypeImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_HasElementTypeImpl/CS/type_haselementtypeimpl.cs#1)]
 [!code-vb[Type_HasElementTypeImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_HasElementTypeImpl/VB/type_haselementtypeimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsPointerImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsPointerImpl">
      <MemberSignature Language="C#" Value="protected abstract bool IsPointerImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsPointerImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsPointerImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function IsPointerImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool IsPointerImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsPointerImpl : unit -&gt; bool" Usage="type.IsPointerImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3696">When overridden in a derived class, implements the <see cref="P:System.Type.IsPointer" /> property and determines whether the <see cref="T:System.Type" /> is a pointer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3696">When overridden in a derived class, implements the <see cref="P:System.Type.IsPointer" /> property and determines whether the <see cref="T:System.Type" /> is a pointer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-3697">
            <see langword="true" /> if the <see cref="T:System.Type" /> is a pointer; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3697">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a pointer; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Type.IsPointer" />
      </Docs>
    </Member>
    <Member MemberName="IsPrimitive">
      <MemberSignature Language="C#" Value="public bool IsPrimitive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPrimitive" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsPrimitive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPrimitive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPrimitive { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPrimitive : bool" Usage="System.Type.IsPrimitive" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsPrimitive</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3698">Gets a value indicating whether the <see cref="T:System.Type" /> is one of the primitive types.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3698">Gets a value indicating whether the <see cref="T:System.Type" /> is one of the primitive types.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-3699">
            <see langword="true" />, wenn <see cref="T:System.Type" /> zu den primitiven Typen gehört, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3699">
              <see langword="true" /> if the <see cref="T:System.Type" /> is one of the primitive types; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3700">Die primitiven Typen sind <xref:System.Boolean>, <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, <xref:System.IntPtr>, <xref:System.UIntPtr>, <xref:System.Char>, <xref:System.Double>, und <xref:System.Single>.</span><span class="sxs-lookup"><span data-stu-id="96bec-3700">The primitive types are <xref:System.Boolean>, <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, <xref:System.IntPtr>, <xref:System.UIntPtr>, <xref:System.Char>, <xref:System.Double>, and <xref:System.Single>.</span></span>  
  
 <span data-ttu-id="96bec-3701">Wenn die aktuelle <xref:System.Type> stellt einen generischen Typ oder einen Typparameter in der Definition eines generischen Typs oder generische Methode muss diese Eigenschaft gibt immer `false`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3701">If the current <xref:System.Type> represents a generic type, or a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-3702">Das folgende Beispiel zeigt die `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, und <xref:System.Type.IsPrimitive%2A> Eigenschaften der <xref:System.Type> Klasse.</span><span class="sxs-lookup"><span data-stu-id="96bec-3702">The following example demonstrates the `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, and <xref:System.Type.IsPrimitive%2A> properties of the <xref:System.Type> class.</span></span> <span data-ttu-id="96bec-3703">Er überprüft, ob der angegebene Typ in den Kontext aufgenommen werden kann, ob es als Verweis gemarshallt werden kann und ob der Typ ein primitiver Datentyp ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-3703">It checks whether the given type can be hosted in the context, whether it can be marshaled by reference, and whether the type is a primitive data type.</span></span>  
  
 [!code-cpp[Type_IsContextful#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsContextful/CPP/type_iscontextful.cpp#1)]
 [!code-csharp[Type_IsContextful#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsContextful/CS/type_iscontextful.cs#1)]
 [!code-vb[Type_IsContextful#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsContextful/VB/type_iscontextful.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.Byte" />
        <altmember cref="T:System.SByte" />
        <altmember cref="T:System.Int16" />
        <altmember cref="T:System.UInt16" />
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.UInt32" />
        <altmember cref="T:System.Int64" />
        <altmember cref="T:System.UInt64" />
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Double" />
        <altmember cref="T:System.Single" />
        <altmember cref="M:System.Type.IsPrimitiveImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsPrimitiveImpl">
      <MemberSignature Language="C#" Value="protected abstract bool IsPrimitiveImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsPrimitiveImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsPrimitiveImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function IsPrimitiveImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool IsPrimitiveImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsPrimitiveImpl : unit -&gt; bool" Usage="type.IsPrimitiveImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3704">When overridden in a derived class, implements the <see cref="P:System.Type.IsPrimitive" /> property and determines whether the <see cref="T:System.Type" /> is one of the primitive types.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3704">When overridden in a derived class, implements the <see cref="P:System.Type.IsPrimitive" /> property and determines whether the <see cref="T:System.Type" /> is one of the primitive types.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-3705">
            <see langword="true" /> if the <see cref="T:System.Type" /> is one of the primitive types; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3705">
              <see langword="true" /> if the <see cref="T:System.Type" /> is one of the primitive types; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3706">Die primitiven Typen sind <xref:System.Boolean>, <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, <xref:System.Char>, <xref:System.Double>, und <xref:System.Single>.</span><span class="sxs-lookup"><span data-stu-id="96bec-3706">The primitive types are <xref:System.Boolean>, <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, <xref:System.Char>, <xref:System.Double>, and <xref:System.Single>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-3707">Im folgenden Beispiel wird bestimmt, ob der angegebene Typ ein primitiver Typ ist, und das Ergebnis wird angezeigt.</span><span class="sxs-lookup"><span data-stu-id="96bec-3707">The following example determines whether the given type is a primitive type and displays the result.</span></span>  
  
 [!code-cpp[Type_IsPrimitiveImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsPrimitiveImpl/CPP/type_isprimitiveimpl.cpp#1)]
 [!code-csharp[Type_IsPrimitiveImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsPrimitiveImpl/CS/type_isprimitiveimpl.cs#1)]
 [!code-vb[Type_IsPrimitiveImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsPrimitiveImpl/VB/type_isprimitiveimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.Byte" />
        <altmember cref="T:System.SByte" />
        <altmember cref="T:System.Int16" />
        <altmember cref="T:System.UInt16" />
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.UInt32" />
        <altmember cref="T:System.Int64" />
        <altmember cref="T:System.UInt64" />
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Double" />
        <altmember cref="T:System.Single" />
        <altmember cref="P:System.Type.IsPrimitive" />
      </Docs>
    </Member>
    <Member MemberName="IsPublic">
      <MemberSignature Language="C#" Value="public bool IsPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPublic" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPublic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPublic : bool" Usage="System.Type.IsPublic" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsPublic</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3708">Gets a value indicating whether the <see cref="T:System.Type" /> is declared public.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3708">Gets a value indicating whether the <see cref="T:System.Type" /> is declared public.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-3709">
            <see langword="true" />, wenn der <see cref="T:System.Type" /> als öffentlich deklariert und kein geschachtelter Typ ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3709">
              <see langword="true" /> if the <see cref="T:System.Type" /> is declared public and is not a nested type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3710">Verwenden Sie keine geschachtelten Typen. Verwenden Sie <xref:System.Type.IsNestedPublic%2A> stattdessen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3710">Do not use with nested types; use <xref:System.Type.IsNestedPublic%2A> instead.</span></span>  
  
 <span data-ttu-id="96bec-3711">Wenn die aktuelle <xref:System.Type> einen Typparameter eines generischen Typs darstellt, gibt diese Eigenschaft `true`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3711">If the current <xref:System.Type> represents a type parameter of a generic type, this property returns `true`.</span></span>  
  
 <span data-ttu-id="96bec-3712"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> Wählt die Visibility-Attribute.</span><span class="sxs-lookup"><span data-stu-id="96bec-3712"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-3713">Das folgende Beispiel erstellt eine Instanz von `MyTestClass`, überprüft, ob die `IsPublic` -Eigenschaft, und das Ergebnis wird angezeigt.</span><span class="sxs-lookup"><span data-stu-id="96bec-3713">The following example creates an instance of `MyTestClass`, checks for the `IsPublic` property, and displays the result.</span></span>  
  
 [!code-cpp[Type.IsPublic#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type.IsPublic/CPP/type_ispublic.cpp#1)]
 [!code-csharp[Type.IsPublic#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type.IsPublic/CS/type_ispublic.cs#1)]
 [!code-vb[Type.IsPublic#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type.IsPublic/VB/type_ispublic.vb#1)]  
  
 <span data-ttu-id="96bec-3714">Ignorieren Sie für geschachtelte Klassen, die Ergebnisse der `IsPublic` und `IsNotPublic` und achten Sie nur auf die Ergebnisse der <xref:System.Type.IsNestedPublic%2A> und <xref:System.Type.IsNestedPrivate%2A>.</span><span class="sxs-lookup"><span data-stu-id="96bec-3714">For nested classes, ignore the results of `IsPublic` and `IsNotPublic` and pay attention only to the results of <xref:System.Type.IsNestedPublic%2A> and <xref:System.Type.IsNestedPrivate%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsSealed">
      <MemberSignature Language="C#" Value="public bool IsSealed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSealed" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSealed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSealed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSealed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSealed : bool" Usage="System.Type.IsSealed" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsSealed</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3715">Gets a value indicating whether the <see cref="T:System.Type" /> is declared sealed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3715">Gets a value indicating whether the <see cref="T:System.Type" /> is declared sealed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-3716">
            <see langword="true" />, wenn <see cref="T:System.Type" /> als versiegelt deklariert ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3716">
              <see langword="true" /> if the <see cref="T:System.Type" /> is declared sealed; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3717">Wenn die aktuelle <xref:System.Type> einen Typparameter eines generischen Typs darstellt, auf diese Eigenschaft gibt immer `true`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3717">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-3718">Das folgende Beispiel erstellt eine Instanz von einem `sealed` Klasse, sucht die `IsSealed` -Eigenschaft, und zeigt das Ergebnis.</span><span class="sxs-lookup"><span data-stu-id="96bec-3718">The following example creates an instance of a `sealed` class, checks for the `IsSealed` property, and displays the result.</span></span>  
  
 [!code-cpp[Type_IsSealed#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsSealed/CPP/type_issealed.cpp#1)]
 [!code-csharp[Type_IsSealed#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsSealed/CS/type_issealed.cs#1)]
 [!code-vb[Type_IsSealed#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsSealed/VB/type_issealed.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsSecurityCritical">
      <MemberSignature Language="C#" Value="public virtual bool IsSecurityCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityCritical" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSecurityCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSecurityCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityCritical { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecurityCritical : bool" Usage="System.Type.IsSecurityCritical" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3719">Gets a value that indicates whether the current type is security-critical or security-safe-critical at the current trust level, and therefore can perform critical operations.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3719">Gets a value that indicates whether the current type is security-critical or security-safe-critical at the current trust level, and therefore can perform critical operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-3720">
            <see langword="true" />, wenn der aktuelle Typ auf der aktuellen Vertrauensebene sicherheitsrelevant ist, <see langword="false" />, wenn er sicherheitstransparent ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3720">
              <see langword="true" /> if the current type is security-critical or security-safe-critical at the current trust level; <see langword="false" /> if it is transparent.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3721">Die <xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, und <xref:System.Type.IsSecurityTransparent%2A> Eigenschaften melden die Transparenzebene eines Typs mit der aktuellen Vertrauensebene an, wie durch die common Language Runtime (CLR) festgelegt.</span><span class="sxs-lookup"><span data-stu-id="96bec-3721">The <xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, and <xref:System.Type.IsSecurityTransparent%2A> properties report the transparency level of the type at its current trust level, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="96bec-3722">Die Kombinationen dieser Eigenschaften werden in der folgenden Tabelle dargestellt:</span><span class="sxs-lookup"><span data-stu-id="96bec-3722">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="96bec-3723">Sicherheitsstufe</span><span class="sxs-lookup"><span data-stu-id="96bec-3723">Security level</span></span>|<span data-ttu-id="96bec-3724">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="96bec-3724">IsSecurityCritical</span></span>|<span data-ttu-id="96bec-3725">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="96bec-3725">IsSecuritySafeCritical</span></span>|<span data-ttu-id="96bec-3726">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="96bec-3726">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="96bec-3727">Kritisch</span><span class="sxs-lookup"><span data-stu-id="96bec-3727">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="96bec-3728">Safe ist kritisch</span><span class="sxs-lookup"><span data-stu-id="96bec-3728">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="96bec-3729">Transparent</span><span class="sxs-lookup"><span data-stu-id="96bec-3729">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="96bec-3730">Ein Verwenden dieser Eigenschaften ist deutlich einfacher als das Untersuchen der Sicherheitsanmerkungen einer Assembly und der zugehörigen Typen, das Überprüfen der aktuellen Vertrauensebene und das Versuchen, die Laufzeitregeln zu duplizieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-3730">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="96bec-3731">Für teilweise vertrauenswürdigen Assemblys ist der Wert dieser Eigenschaft hängt von der aktuellen Vertrauensebene der Assembly.</span><span class="sxs-lookup"><span data-stu-id="96bec-3731">For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</span></span> <span data-ttu-id="96bec-3732">Wenn die Assembly in einer teilweise vertrauenswürdigen Anwendungsdomäne (z. B. in einer Sandkastenanwendungsdomäne) geladen wird, ignoriert die Laufzeit die sicherheitsanmerkungen der Assembly.</span><span class="sxs-lookup"><span data-stu-id="96bec-3732">If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="96bec-3733">Die Assembly und alle seine Typen werden als transparent behandelt.</span><span class="sxs-lookup"><span data-stu-id="96bec-3733">The assembly and all its types are treated as transparent.</span></span> <span data-ttu-id="96bec-3734">Die Runtime achtet auf den der sicherheitsanmerkungen einer teilweise vertrauenswürdigen Assembly an, nur, wenn die Assembly in eine voll vertrauenswürdige Anwendungsdomäne (z. B. in der Standardanwendungsdomäne einer Desktopanwendung) geladen ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-3734">The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="96bec-3735">Im Gegensatz dazu ist eine vertrauenswürdige Assembly (d. h. eine Assembly mit starkem Namen, die im globalen Assemblycache installiert ist) immer mit voller Vertrauenswürdigkeit unabhängig von der Vertrauensebene der Anwendungsdomäne geladen, damit der aktuellen Vertrauensebene immer voll vertrauenswürdig ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-3735">By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</span></span> <span data-ttu-id="96bec-3736">Sie können die aktuellen Vertrauensebenen von Assemblys und Anwendungsdomänen bestimmen, mit der <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> und <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> Eigenschaften.</span><span class="sxs-lookup"><span data-stu-id="96bec-3736">You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> properties.</span></span>  
  
 <span data-ttu-id="96bec-3737">Weitere Informationen über Reflektion und Transparenz finden Sie unter [Überlegungen zur Sicherheit für die Reflektion](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span><span class="sxs-lookup"><span data-stu-id="96bec-3737">For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span></span> <span data-ttu-id="96bec-3738">Weitere Informationen zur Transparenz, finden Sie unter [Sicherheitsänderungen](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="96bec-3738">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsSecuritySafeCritical" />
        <altmember cref="P:System.Type.IsSecurityTransparent" />
      </Docs>
    </Member>
    <Member MemberName="IsSecuritySafeCritical">
      <MemberSignature Language="C#" Value="public virtual bool IsSecuritySafeCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecuritySafeCritical" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSecuritySafeCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSecuritySafeCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecuritySafeCritical { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecuritySafeCritical : bool" Usage="System.Type.IsSecuritySafeCritical" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3739">Gets a value that indicates whether the current type is security-safe-critical at the current trust level; that is, whether it can perform critical operations and can be accessed by transparent code.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3739">Gets a value that indicates whether the current type is security-safe-critical at the current trust level; that is, whether it can perform critical operations and can be accessed by transparent code.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-3740">
            <see langword="true" />, wenn der aktuelle Typ auf der aktuellen Vertrauensebene sicherheitsrelevant ist, <see langword="false" /> wenn er sicherheitstransparent oder sicherheitsrelevant ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3740">
              <see langword="true" /> if the current type is security-safe-critical at the current trust level; <see langword="false" /> if it is security-critical or transparent.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3741">Die <xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, und <xref:System.Type.IsSecurityTransparent%2A> Eigenschaften melden die Transparenzebene eines Typs mit der aktuellen Vertrauensebene an, wie durch die common Language Runtime (CLR) festgelegt.</span><span class="sxs-lookup"><span data-stu-id="96bec-3741">The <xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, and <xref:System.Type.IsSecurityTransparent%2A> properties report the transparency level of the type at its current trust level, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="96bec-3742">Die Kombinationen dieser Eigenschaften werden in der folgenden Tabelle dargestellt:</span><span class="sxs-lookup"><span data-stu-id="96bec-3742">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="96bec-3743">Sicherheitsstufe</span><span class="sxs-lookup"><span data-stu-id="96bec-3743">Security level</span></span>|<span data-ttu-id="96bec-3744">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="96bec-3744">IsSecurityCritical</span></span>|<span data-ttu-id="96bec-3745">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="96bec-3745">IsSecuritySafeCritical</span></span>|<span data-ttu-id="96bec-3746">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="96bec-3746">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="96bec-3747">Kritisch</span><span class="sxs-lookup"><span data-stu-id="96bec-3747">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="96bec-3748">Safe ist kritisch</span><span class="sxs-lookup"><span data-stu-id="96bec-3748">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="96bec-3749">Transparent</span><span class="sxs-lookup"><span data-stu-id="96bec-3749">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="96bec-3750">Ein Verwenden dieser Eigenschaften ist deutlich einfacher als das Untersuchen der Sicherheitsanmerkungen einer Assembly und der zugehörigen Typen, das Überprüfen der aktuellen Vertrauensebene und das Versuchen, die Laufzeitregeln zu duplizieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-3750">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="96bec-3751">Für teilweise vertrauenswürdigen Assemblys ist der Wert dieser Eigenschaft hängt von der aktuellen Vertrauensebene der Assembly.</span><span class="sxs-lookup"><span data-stu-id="96bec-3751">For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</span></span> <span data-ttu-id="96bec-3752">Wenn die Assembly in einer teilweise vertrauenswürdigen Anwendungsdomäne (z. B. in einer Sandkastenanwendungsdomäne) geladen wird, ignoriert die Laufzeit die sicherheitsanmerkungen der Assembly.</span><span class="sxs-lookup"><span data-stu-id="96bec-3752">If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="96bec-3753">Die Assembly und alle seine Typen werden als transparent behandelt.</span><span class="sxs-lookup"><span data-stu-id="96bec-3753">The assembly and all its types are treated as transparent.</span></span> <span data-ttu-id="96bec-3754">Die Runtime achtet auf den der sicherheitsanmerkungen einer teilweise vertrauenswürdigen Assembly an, nur, wenn die Assembly in eine voll vertrauenswürdige Anwendungsdomäne (z. B. in der Standardanwendungsdomäne einer Desktopanwendung) geladen ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-3754">The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="96bec-3755">Im Gegensatz dazu ist eine vertrauenswürdige Assembly (d. h. eine Assembly mit starkem Namen, die im globalen Assemblycache installiert ist) immer mit voller Vertrauenswürdigkeit unabhängig von der Vertrauensebene der Anwendungsdomäne geladen, damit der aktuellen Vertrauensebene immer voll vertrauenswürdig ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-3755">By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</span></span> <span data-ttu-id="96bec-3756">Sie können die aktuellen Vertrauensebenen von Assemblys und Anwendungsdomänen bestimmen, mit der <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> und <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> Eigenschaften.</span><span class="sxs-lookup"><span data-stu-id="96bec-3756">You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> properties.</span></span>  
  
 <span data-ttu-id="96bec-3757">Weitere Informationen über Reflektion und Transparenz finden Sie unter [Überlegungen zur Sicherheit für die Reflektion](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span><span class="sxs-lookup"><span data-stu-id="96bec-3757">For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span></span> <span data-ttu-id="96bec-3758">Weitere Informationen zur Transparenz, finden Sie unter [Sicherheitsänderungen](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="96bec-3758">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsSecurityCritical" />
        <altmember cref="P:System.Type.IsSecurityTransparent" />
      </Docs>
    </Member>
    <Member MemberName="IsSecurityTransparent">
      <MemberSignature Language="C#" Value="public virtual bool IsSecurityTransparent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityTransparent" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSecurityTransparent" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSecurityTransparent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityTransparent { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecurityTransparent : bool" Usage="System.Type.IsSecurityTransparent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3759">Gets a value that indicates whether the current type is transparent at the current trust level, and therefore cannot perform critical operations.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3759">Gets a value that indicates whether the current type is transparent at the current trust level, and therefore cannot perform critical operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-3760">
            <see langword="true" />, wenn der Typ auf der aktuellen Vertrauensebene sicherheitstransparent ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3760">
              <see langword="true" /> if the type is security-transparent at the current trust level; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3761">Wenn diese Eigenschaft gibt `true`, <xref:System.Type.IsSecurityCritical%2A> und <xref:System.Type.IsSecuritySafeCritical%2A> Eigenschaften zurückgeben `false`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3761">If this property returns `true`, the <xref:System.Type.IsSecurityCritical%2A> and <xref:System.Type.IsSecuritySafeCritical%2A> properties return `false`.</span></span>  
  
 <span data-ttu-id="96bec-3762">Die <xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, und <xref:System.Type.IsSecurityTransparent%2A> Eigenschaften melden die Transparenzebene eines Typs mit der aktuellen Vertrauensebene an, wie durch die common Language Runtime (CLR) festgelegt.</span><span class="sxs-lookup"><span data-stu-id="96bec-3762">The <xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, and <xref:System.Type.IsSecurityTransparent%2A> properties report the transparency level of the type at its current trust level, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="96bec-3763">Ein Verwenden dieser Eigenschaften ist deutlich einfacher als das Untersuchen der Sicherheitsanmerkungen einer Assembly und der zugehörigen Typen, das Überprüfen der aktuellen Vertrauensebene und das Versuchen, die Laufzeitregeln zu duplizieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-3763">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="96bec-3764">Für teilweise vertrauenswürdigen Assemblys ist der Wert dieser Eigenschaft hängt von der aktuellen Vertrauensebene der Assembly.</span><span class="sxs-lookup"><span data-stu-id="96bec-3764">For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</span></span> <span data-ttu-id="96bec-3765">Wenn die Assembly in einer teilweise vertrauenswürdigen Anwendungsdomäne (z. B. in einer Sandkastenanwendungsdomäne) geladen wird, ignoriert die Laufzeit die sicherheitsanmerkungen der Assembly.</span><span class="sxs-lookup"><span data-stu-id="96bec-3765">If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="96bec-3766">Die Assembly und alle seine Typen werden als transparent behandelt.</span><span class="sxs-lookup"><span data-stu-id="96bec-3766">The assembly and all its types are treated as transparent.</span></span> <span data-ttu-id="96bec-3767">Die Runtime achtet auf den der sicherheitsanmerkungen einer teilweise vertrauenswürdigen Assembly an, nur, wenn die Assembly in eine voll vertrauenswürdige Anwendungsdomäne (z. B. in der Standardanwendungsdomäne einer Desktopanwendung) geladen ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-3767">The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="96bec-3768">Im Gegensatz dazu ist eine vertrauenswürdige Assembly (d. h. eine Assembly mit starkem Namen, die im globalen Assemblycache installiert ist) immer mit voller Vertrauenswürdigkeit unabhängig von der Vertrauensebene der Anwendungsdomäne geladen, damit der aktuellen Vertrauensebene immer voll vertrauenswürdig ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-3768">By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</span></span> <span data-ttu-id="96bec-3769">Sie können die aktuellen Vertrauensebenen von Assemblys und Anwendungsdomänen bestimmen, mit der <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> und <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> Eigenschaften.</span><span class="sxs-lookup"><span data-stu-id="96bec-3769">You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> properties.</span></span>  
  
 <span data-ttu-id="96bec-3770">Weitere Informationen über Reflektion und Transparenz finden Sie unter [Überlegungen zur Sicherheit für die Reflektion](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span><span class="sxs-lookup"><span data-stu-id="96bec-3770">For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span></span> <span data-ttu-id="96bec-3771">Weitere Informationen zur Transparenz, finden Sie unter [Sicherheitsänderungen](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="96bec-3771">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsSecurityCritical" />
        <altmember cref="P:System.Type.IsSecuritySafeCritical" />
      </Docs>
    </Member>
    <Member MemberName="IsSerializable">
      <MemberSignature Language="C#" Value="public virtual bool IsSerializable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSerializable" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSerializable" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSerializable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSerializable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSerializable : bool" Usage="System.Type.IsSerializable" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsSerializable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3772">Gets a value indicating whether the <see cref="T:System.Type" /> is serializable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3772">Gets a value indicating whether the <see cref="T:System.Type" /> is serializable.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-3773">
            <see langword="true" />, wenn <see cref="T:System.Type" /> serialisierbar ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3773">
              <see langword="true" /> if the <see cref="T:System.Type" /> is serializable; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 
<span data-ttu-id="96bec-3774">Typen, die in .NET Standard definiert sind nicht gekennzeichnet sind, mit <xref:System.SerializableAttribute>.</span><span class="sxs-lookup"><span data-stu-id="96bec-3774">Types that are defined in the .NET Standard are not marked with <xref:System.SerializableAttribute>.</span></span> <span data-ttu-id="96bec-3775">Stattdessen bestimmt jeder .NET Implementierung, ob ein Typ serialisierbar ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-3775">Instead, each .NET implementation determines whether a type is serializable.</span></span> <span data-ttu-id="96bec-3776">Zur Laufzeit können Sie die <xref:System.Type.IsSerializable%2A> Eigenschaft, um zu bestimmen, ob diese Implementierung unterstützt die Serialisierung einer Instanz des Typs.</span><span class="sxs-lookup"><span data-stu-id="96bec-3776">At run time, you can use the <xref:System.Type.IsSerializable%2A> property to determine whether that implementation supports serialization of an instance of the type.</span></span> <span data-ttu-id="96bec-3777">Weitere Informationen und ein Beispiel finden Sie unter [so bestimmen, ob ein .NET Standard-Objekt serialisierbar ist](~/docs/standard/serialization/how-to-determine-if-netstandard-object-is-serializable.md).</span><span class="sxs-lookup"><span data-stu-id="96bec-3777">For more information and an example, see [How to determine if a .NET Standard object is serializable](~/docs/standard/serialization/how-to-determine-if-netstandard-object-is-serializable.md).</span></span>
  
 <span data-ttu-id="96bec-3778">Wenn die aktuelle <xref:System.Type> stellt ein konstruierter generischer Typ, diese Eigenschaft gilt, für die Definition des generischen Typs aus der der Typ konstruiert wurde.</span><span class="sxs-lookup"><span data-stu-id="96bec-3778">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="96bec-3779">Z. B. wenn die aktuelle <xref:System.Type> stellt `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), der Wert dieser Eigenschaft richtet sich nach `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3779">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="96bec-3780">Wenn die aktuelle <xref:System.Type> einen Typparameter in der Definition eines generischen Typs oder generische Methode darstellt, auf diese Eigenschaft gibt immer `false`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3780">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-3781">Das folgende Beispiel erstellt eine Instanz von `MyTestClass` -Klasse, die [Serializable]-Attribut festgelegt, und überprüft die `IsSerializable` -Eigenschaft für `true` oder `false`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3781">The following example creates an instance of `MyTestClass` class, sets the [Serializable] attribute, and checks the `IsSerializable` property for `true` or `false`.</span></span>  
  
 [!code-cpp[Type_IsSerializable#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsSerializable/CPP/type_isserializable.cpp#1)]
 [!code-csharp[Type_IsSerializable#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsSerializable/CS/type_isserializable.cs#1)]
 [!code-vb[Type_IsSerializable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsSerializable/VB/type_isserializable.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="T:System.Runtime.Serialization.ISerializable" />
      </Docs>
    </Member>
    <Member MemberName="IsSignatureType">
      <MemberSignature Language="C#" Value="public virtual bool IsSignatureType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSignatureType" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSignatureType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSignatureType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSignatureType { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSignatureType : bool" Usage="System.Type.IsSignatureType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSpecialName">
      <MemberSignature Language="C#" Value="public bool IsSpecialName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSpecialName" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSpecialName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSpecialName As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSpecialName { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSpecialName : bool" Usage="System.Type.IsSpecialName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsSpecialName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3782">Gets a value indicating whether the type has a name that requires special handling.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3782">Gets a value indicating whether the type has a name that requires special handling.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-3783">
            <see langword="true" />, wenn der Typ einen Namen besitzt, der eine Sonderbehandlung erfordert, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3783">
              <see langword="true" /> if the type has a name that requires special handling; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3784">Namen, die mit beginnen oder einen Unterstrich (_), Eigenschaftenaccessoren und Überladen von Methoden enthalten, sind Beispiele für Typen, die von einigen Compilern möglicherweise eine besondere Behandlung erfordern.</span><span class="sxs-lookup"><span data-stu-id="96bec-3784">Names that begin with or contain an underscore character (_), property accessors, and operator overloading methods are examples of types that might require special treatment by some compilers.</span></span>  
  
 <span data-ttu-id="96bec-3785">Wenn die aktuelle <xref:System.Type> stellt ein konstruierter generischer Typ, diese Eigenschaft gilt, für die Definition des generischen Typs aus der der Typ konstruiert wurde.</span><span class="sxs-lookup"><span data-stu-id="96bec-3785">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="96bec-3786">Z. B. wenn die aktuelle <xref:System.Type> stellt `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), der Wert dieser Eigenschaft richtet sich nach `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3786">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="96bec-3787">Wenn die aktuelle <xref:System.Type> einen Typparameter in der Definition eines generischen Typs oder generische Methode darstellt, auf diese Eigenschaft gibt immer `false`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3787">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsSubclassOf">
      <MemberSignature Language="C#" Value="public virtual bool IsSubclassOf (Type c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSubclassOf(class System.Type c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsSubclassOf(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsSubclassOf (c As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSubclassOf(Type ^ c);" />
      <MemberSignature Language="F#" Value="abstract member IsSubclassOf : Type -&gt; bool&#xA;override this.IsSubclassOf : Type -&gt; bool" Usage="type.IsSubclassOf c" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.IsSubclassOf(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="c">
          <span data-ttu-id="96bec-3788">The type to compare with the current type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3788">The type to compare with the current type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-3789">Determines whether the current <see cref="T:System.Type" /> derives from the specified <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3789">Determines whether the current <see cref="T:System.Type" /> derives from the specified <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-3790">
            <see langword="true" /> if the current <see langword="Type" /> derives from <paramref name="c" />; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3790">
              <see langword="true" /> if the current <see langword="Type" /> derives from <paramref name="c" />; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="96bec-3791">This method also returns <see langword="false" /> if <paramref name="c" /> and the current <see langword="Type" /> are equal.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3791">This method also returns <see langword="false" /> if <paramref name="c" /> and the current <see langword="Type" /> are equal.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3792">Rufen Sie die <xref:System.Type.IsSubclassOf%2A> Methode, um eine der folgenden festzulegen:</span><span class="sxs-lookup"><span data-stu-id="96bec-3792">You can call the <xref:System.Type.IsSubclassOf%2A> method to determine any of the following:</span></span>  
  
-   <span data-ttu-id="96bec-3793">Gibt an, ob eine Klasse von einem anderen abgeleitet ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-3793">Whether one class derives from another.</span></span>  
  
-   <span data-ttu-id="96bec-3794">Ob ein Typ abgeleitet <xref:System.ValueType>.</span><span class="sxs-lookup"><span data-stu-id="96bec-3794">Whether a type derives from <xref:System.ValueType>.</span></span> <span data-ttu-id="96bec-3795">Allerdings die <xref:System.Type.IsValueType%2A> ist eine effizientere Möglichkeit zu bestimmen, ob ein Typ ein Werttyp ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-3795">However, the <xref:System.Type.IsValueType%2A> is a more efficient way to determine whether a type is a value type.</span></span>  
  
-   <span data-ttu-id="96bec-3796">Ob ein Typ abgeleitet <xref:System.Enum>.</span><span class="sxs-lookup"><span data-stu-id="96bec-3796">Whether a type derives from <xref:System.Enum>.</span></span> <span data-ttu-id="96bec-3797">Allerdings die <xref:System.Type.IsEnum%2A> Methode ist eine effizientere Möglichkeit zu bestimmen, ob ein Typ eine Enumeration ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-3797">However, the <xref:System.Type.IsEnum%2A> method is a more efficient way to determine whether a type is an enumeration.</span></span>  
  
-   <span data-ttu-id="96bec-3798">Gibt an, ob ein Typ einen Delegaten, also ist, ob es entweder abgeleitet <xref:System.Delegate> oder <xref:System.MulticastDelegate>.</span><span class="sxs-lookup"><span data-stu-id="96bec-3798">Whether a type is a delegate, that is, whether it derives from either <xref:System.Delegate> or <xref:System.MulticastDelegate>.</span></span>  
  
 <span data-ttu-id="96bec-3799">Die <xref:System.Type.IsSubclassOf%2A> Methode kann nicht verwendet werden, um zu bestimmen, ob eine Schnittstelle von einer anderen Schnittstelle abgeleitet wird, oder gibt an, ob eine Klasse eine Schnittstelle implementiert.</span><span class="sxs-lookup"><span data-stu-id="96bec-3799">The <xref:System.Type.IsSubclassOf%2A> method cannot be used to determine whether an interface derives from another interface, or whether a class implements an interface.</span></span> <span data-ttu-id="96bec-3800">Verwenden der <xref:System.Type.IsAssignableFrom%2A> -Methode für diesen Zweck, wie im folgenden Beispiel gezeigt.</span><span class="sxs-lookup"><span data-stu-id="96bec-3800">Use the <xref:System.Type.IsAssignableFrom%2A> method for that purpose, as the following example shows.</span></span>  
  
 [!code-csharp[System.Type.IsSubclassOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.issubclassof/cs/issubclassof_interface1.cs#1)]
 [!code-vb[System.Type.IsSubclassOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.issubclassof/vb/issubclassof_interface1.vb#1)]  
  
 <span data-ttu-id="96bec-3801">Wenn die aktuelle <xref:System.Type> einen Typparameter darstellt in der Definition einer generischen Typ-oder Methodendefinition, abgeleitet aus der Class-Einschränkung oder <xref:System.Object?displayProperty=nameWithType> keine klasseneinschränkung verfügt.</span><span class="sxs-lookup"><span data-stu-id="96bec-3801">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, it derives from its class constraint or from <xref:System.Object?displayProperty=nameWithType> if it has no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-3802">Außer in Verbindung mit Schnittstellen, <xref:System.Type.IsSubclassOf%2A> ist die Umkehrung von <xref:System.Type.IsAssignableFrom%2A>.</span><span class="sxs-lookup"><span data-stu-id="96bec-3802">Except when used with interfaces, <xref:System.Type.IsSubclassOf%2A> is the converse of <xref:System.Type.IsAssignableFrom%2A>.</span></span> <span data-ttu-id="96bec-3803">D. h. wenn `t1.IsSubclassOf(t2)` ist `true`, klicken Sie dann `t2.IsAssignableFrom(t1)` auch `true`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3803">That is, if `t1.IsSubclassOf(t2)` is `true`, then `t2.IsAssignableFrom(t1)` is also `true`.</span></span>  
  
 <span data-ttu-id="96bec-3804">Diese Methode kann von einer abgeleiteten Klasse überschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-3804">This method can be overridden by a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-3805">Das folgende Beispiel erstellt eine Klasse namens `Class1` und eine abgeleitete Klasse, die mit dem Namen `DerivedC1`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3805">The following example creates a class named `Class1` and a derived class named `DerivedC1`.</span></span> <span data-ttu-id="96bec-3806">Ruft die <xref:System.Type.IsSubclassOf%2A> Methode, um anzugeben, dass `DerivedC1` ist eine Unterklasse von `Class1`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3806">It calls the <xref:System.Type.IsSubclassOf%2A> method to show that `DerivedC1` is a subclass of `Class1`.</span></span>  
  
 [!code-csharp[TestIsSubclassOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestIsSubclassOf/CS/testissubclassof.cs#1)]
 [!code-vb[TestIsSubclassOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestIsSubclassOf/VB/testissubclassof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96bec-3807">
            <paramref name="c" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3807">
              <paramref name="c" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="P:System.Type.BaseType" />
      </Docs>
    </Member>
    <Member MemberName="IsSZArray">
      <MemberSignature Language="C#" Value="public virtual bool IsSZArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSZArray" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSZArray" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSZArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSZArray { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSZArray : bool" Usage="System.Type.IsSZArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTypeDefinition">
      <MemberSignature Language="C#" Value="public virtual bool IsTypeDefinition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTypeDefinition" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsTypeDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsTypeDefinition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsTypeDefinition { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsTypeDefinition : bool" Usage="System.Type.IsTypeDefinition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnicodeClass">
      <MemberSignature Language="C#" Value="public bool IsUnicodeClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUnicodeClass" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsUnicodeClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsUnicodeClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUnicodeClass { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsUnicodeClass : bool" Usage="System.Type.IsUnicodeClass" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsUnicodeClass</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3808">Gets a value indicating whether the string format attribute <see langword="UnicodeClass" /> is selected for the <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3808">Gets a value indicating whether the string format attribute <see langword="UnicodeClass" /> is selected for the <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-3809">
            <see langword="true" />, wenn für <see langword="UnicodeClass" /> das Zeichenfolgenformatattribut <see cref="T:System.Type" /> ausgewählt ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3809">
              <see langword="true" /> if the string format attribute <see langword="UnicodeClass" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3810">Die <xref:System.Reflection.TypeAttributes.StringFormatMask> wird verwendet, um die Attribute der Zeichenfolge-Format auszuwählen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3810">The <xref:System.Reflection.TypeAttributes.StringFormatMask> is used to select the string format attributes.</span></span> <span data-ttu-id="96bec-3811">Die Zeichenfolge Formatattribute zur Verbesserung der Interoperabilität von definieren, wie Zeichenfolgen interpretiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="96bec-3811">The string format attributes enhance interoperability by defining how strings should be interpreted.</span></span>  
  
 <span data-ttu-id="96bec-3812">Wenn die aktuelle <xref:System.Type> stellt ein konstruierter generischer Typ, diese Eigenschaft gilt, für die Definition des generischen Typs aus der der Typ konstruiert wurde.</span><span class="sxs-lookup"><span data-stu-id="96bec-3812">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="96bec-3813">Z. B. wenn die aktuelle <xref:System.Type> stellt `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), der Wert dieser Eigenschaft richtet sich nach `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3813">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="96bec-3814">Wenn die aktuelle <xref:System.Type> einen Typparameter in der Definition eines generischen Typs oder generische Methode darstellt, auf diese Eigenschaft gibt immer `false`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3814">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsAnsiClass" />
        <altmember cref="P:System.Type.IsAutoClass" />
      </Docs>
    </Member>
    <Member MemberName="IsValueType">
      <MemberSignature Language="C#" Value="public bool IsValueType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValueType" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsValueType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsValueType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValueType { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValueType : bool" Usage="System.Type.IsValueType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsValueType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3815">Gets a value indicating whether the <see cref="T:System.Type" /> is a value type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3815">Gets a value indicating whether the <see cref="T:System.Type" /> is a value type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-3816">
            <see langword="true" />, wenn <see cref="T:System.Type" /> ein Werttyp ist, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3816">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a value type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3817">Werttypen sind Datentypen, die als Sequenzen von Bits dargestellt werden. Werttypen sind keine Klassen oder Schnittstellen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3817">Value types are types that are represented as sequences of bits; value types are not classes or interfaces.</span></span> <span data-ttu-id="96bec-3818">Werttypen werden als "struct" in einigen Programmiersprachen bezeichnet.</span><span class="sxs-lookup"><span data-stu-id="96bec-3818">Value types are referred to as "structs" in some programming languages.</span></span> <span data-ttu-id="96bec-3819">Enumerationen sind ein Sonderfall von Werttypen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3819">Enums are a special case of value types.</span></span>  
  
 <span data-ttu-id="96bec-3820">Diese Eigenschaft gibt `false` für die <xref:System.ValueType> Klasse, da <xref:System.ValueType> ist kein Werttyp selbst.</span><span class="sxs-lookup"><span data-stu-id="96bec-3820">This property returns `false` for the <xref:System.ValueType> class, because <xref:System.ValueType> is not a value type itself.</span></span> <span data-ttu-id="96bec-3821">Es ist die Basisklasse für alle Typen mit Werten aus, und daher kann jeder Werttyp zugewiesen werden, damit.</span><span class="sxs-lookup"><span data-stu-id="96bec-3821">It is the base class for all value types, and therefore any value type can be assigned to it.</span></span> <span data-ttu-id="96bec-3822">Dies wäre nicht möglich, wenn <xref:System.ValueType> selbst wurde ein Werttyp.</span><span class="sxs-lookup"><span data-stu-id="96bec-3822">This would not be possible if <xref:System.ValueType> itself was a value type.</span></span> <span data-ttu-id="96bec-3823">Werttypen sind geschachtelt, wenn sie ein Feld des Typs zugewiesen werden <xref:System.ValueType>.</span><span class="sxs-lookup"><span data-stu-id="96bec-3823">Value types are boxed when they are assigned to a field of type <xref:System.ValueType>.</span></span>  
  
 <span data-ttu-id="96bec-3824">Diese Eigenschaft gibt `true` für Enumerationen, aber nicht für die <xref:System.Enum> -Typ selbst.</span><span class="sxs-lookup"><span data-stu-id="96bec-3824">This property returns `true` for enumerations, but not for the <xref:System.Enum> type itself.</span></span> <span data-ttu-id="96bec-3825">Ein Beispiel zur Veranschaulichung dieses Verhaltens finden Sie unter <xref:System.Type.IsEnum%2A>.</span><span class="sxs-lookup"><span data-stu-id="96bec-3825">For an example that demonstrates this behavior, see <xref:System.Type.IsEnum%2A>.</span></span>  
  
 <span data-ttu-id="96bec-3826">Diese Eigenschaft ist schreibgeschützt.</span><span class="sxs-lookup"><span data-stu-id="96bec-3826">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-3827">Das folgende Beispiel erstellt eine Variable vom Typ `MyEnum`, überprüft, ob die `IsValueType` -Eigenschaft, und das Ergebnis wird angezeigt.</span><span class="sxs-lookup"><span data-stu-id="96bec-3827">The following example creates a variable of type `MyEnum`, checks for the `IsValueType` property, and displays the result.</span></span>  
  
 [!code-cpp[Type_IsValueType#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsValueType/CPP/type_isvaluetype.cpp#1)]
 [!code-csharp[Type_IsValueType#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsValueType/CS/type_isvaluetype.cs#1)]
 [!code-vb[Type_IsValueType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsValueType/VB/type_isvaluetype.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsClass" />
        <altmember cref="P:System.Type.IsInterface" />
        <altmember cref="T:System.ValueType" />
        <altmember cref="M:System.Type.IsValueTypeImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsValueTypeImpl">
      <MemberSignature Language="C#" Value="protected virtual bool IsValueTypeImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsValueTypeImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsValueTypeImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsValueTypeImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool IsValueTypeImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsValueTypeImpl : unit -&gt; bool&#xA;override this.IsValueTypeImpl : unit -&gt; bool" Usage="type.IsValueTypeImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3828">Implements the <see cref="P:System.Type.IsValueType" /> property and determines whether the <see cref="T:System.Type" /> is a value type; that is, not a class or an interface.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3828">Implements the <see cref="P:System.Type.IsValueType" /> property and determines whether the <see cref="T:System.Type" /> is a value type; that is, not a class or an interface.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-3829">
            <see langword="true" /> if the <see cref="T:System.Type" /> is a value type; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3829">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a value type; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3830">Diese Methode wird bereitgestellt, um die Implementierung von anderen Systemen zu aktivieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-3830">This method is provided to enable the implementation of alternate type systems.</span></span> <span data-ttu-id="96bec-3831">Es wird nicht in der Regel im Anwendungscode verwendet.</span><span class="sxs-lookup"><span data-stu-id="96bec-3831">It is not generally used in application code.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsClass" />
        <altmember cref="P:System.Type.IsInterface" />
        <altmember cref="T:System.ValueType" />
        <altmember cref="P:System.Type.IsValueType" />
      </Docs>
    </Member>
    <Member MemberName="IsVariableBoundArray">
      <MemberSignature Language="C#" Value="public virtual bool IsVariableBoundArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVariableBoundArray" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsVariableBoundArray" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsVariableBoundArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsVariableBoundArray { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsVariableBoundArray : bool" Usage="System.Type.IsVariableBoundArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVisible" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsVisible" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsVisible { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsVisible : bool" Usage="System.Type.IsVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3832">Gets a value indicating whether the <see cref="T:System.Type" /> can be accessed by code outside the assembly.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3832">Gets a value indicating whether the <see cref="T:System.Type" /> can be accessed by code outside the assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-3833">
            <see langword="true" />, wenn der aktuelle <see cref="T:System.Type" /> ein öffentlicher Typ oder ein öffentlicher geschachtelter Typ ist, sodass alle einschließenden Typen öffentlich sind, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3833">
              <see langword="true" /> if the current <see cref="T:System.Type" /> is a public type or a public nested type such that all the enclosing types are public; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3834">Verwenden Sie diese Eigenschaft, um zu bestimmen, ob ein Teil der öffentlichen Schnittstelle einer Komponente-Assembly ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-3834">Use this property to determine whether a type is part of the public interface of a component assembly.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-3835">Im folgenden Codebeispiel wird überprüft, zwei Klassen, von denen nur, die eine außerhalb der Assembly sichtbar ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-3835">The following code example tests two classes, only one of which is visible outside the assembly.</span></span>  
  
 [!code-cpp[System.Type.IsVisible#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsVisible/CPP/source.cpp#1)]
 [!code-csharp[System.Type.IsVisible#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsVisible/CS/source.cs#1)]
 [!code-vb[System.Type.IsVisible#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsVisible/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MakeArrayType">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3836">Returns a <see cref="T:System.Type" /> object that represents an array of the current type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3836">Returns a <see cref="T:System.Type" /> object that represents an array of the current type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MakeArrayType">
      <MemberSignature Language="C#" Value="public virtual Type MakeArrayType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type MakeArrayType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakeArrayType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MakeArrayType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ MakeArrayType();" />
      <MemberSignature Language="F#" Value="abstract member MakeArrayType : unit -&gt; Type&#xA;override this.MakeArrayType : unit -&gt; Type" Usage="type.MakeArrayType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3837">Returns a <see cref="T:System.Type" /> object representing a one-dimensional array of the current type, with a lower bound of zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3837">Returns a <see cref="T:System.Type" /> object representing a one-dimensional array of the current type, with a lower bound of zero.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-3838">A <see cref="T:System.Type" /> object representing a one-dimensional array of the current type, with a lower bound of zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3838">A <see cref="T:System.Type" /> object representing a one-dimensional array of the current type, with a lower bound of zero.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3839">Die <xref:System.Type.MakeArrayType%2A> Methode bietet eine Möglichkeit zum Generieren von Arraytypen, deren Elementtypen werden zur Laufzeit berechnet.</span><span class="sxs-lookup"><span data-stu-id="96bec-3839">The <xref:System.Type.MakeArrayType%2A> method provides a way to generate array types whose element types are computed at run time.</span></span>  
  
 <span data-ttu-id="96bec-3840">**Beachten Sie** die common Language Runtime wird unterschieden zwischen Vektoren (d. h. eindimensionale Arrays, die immer nullbasiert sind) und mehrdimensionale Arrays.</span><span class="sxs-lookup"><span data-stu-id="96bec-3840">**Note** The common language runtime makes a distinction between vectors (that is, one-dimensional arrays that are always zero-based) and multidimensional arrays.</span></span> <span data-ttu-id="96bec-3841">Ein Vektor, der immer nur eine Dimension hat, ist nicht identisch mit der ein mehrdimensionales Array, das nur eine Dimension besitzt.</span><span class="sxs-lookup"><span data-stu-id="96bec-3841">A vector, which always has only one dimension, is not the same as a multidimensional array that happens to have only one dimension.</span></span> <span data-ttu-id="96bec-3842">Überladung dieser Methode kann nur zum Erstellen von vektortypen verwendet werden, und es ist die einzige Möglichkeit, einen Vector-Typ zu erstellen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3842">This method overload can only be used to create vector types, and it is the only way to create a vector type.</span></span> <span data-ttu-id="96bec-3843">Verwenden der <xref:System.Type.MakeArrayType%28System.Int32%29> -methodenüberladung, um mehrdimensionale von Arraytypen zu erstellen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3843">Use the <xref:System.Type.MakeArrayType%28System.Int32%29> method overload to create multidimensional array types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-3844">Das folgende Codebeispiel erstellt Array `ref` (`ByRef` in Visual Basic), und Zeigertypen für die `Test` Klasse.</span><span class="sxs-lookup"><span data-stu-id="96bec-3844">The following code example creates array, `ref` (`ByRef` in Visual Basic), and pointer types for the `Test` class.</span></span>  
  
 [!code-cpp[System.Type.MakeXxxType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CPP/source.cpp#1)]
 [!code-csharp[System.Type.MakeXxxType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CS/source.cs#1)]
 [!code-vb[System.Type.MakeXxxType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.MakeXxxType/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="96bec-3845">The invoked method is not supported in the base class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3845">The invoked method is not supported in the base class.</span>
          </span>
          <span data-ttu-id="96bec-3846">Derived classes must provide an implementation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3846">Derived classes must provide an implementation.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="96bec-3847">The current type is <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3847">The current type is <see cref="T:System.TypedReference" />.</span>
          </span>
          <span data-ttu-id="96bec-3848">-or-  The current type is a <see langword="ByRef" /> type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3848">-or-  The current type is a <see langword="ByRef" /> type.</span>
          </span>
          <span data-ttu-id="96bec-3849">That is, <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3849">That is, <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Type.MakeByRefType" />
        <altmember cref="M:System.Type.MakePointerType" />
      </Docs>
    </Member>
    <Member MemberName="MakeArrayType">
      <MemberSignature Language="C#" Value="public virtual Type MakeArrayType (int rank);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type MakeArrayType(int32 rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakeArrayType(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MakeArrayType (rank As Integer) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ MakeArrayType(int rank);" />
      <MemberSignature Language="F#" Value="abstract member MakeArrayType : int -&gt; Type&#xA;override this.MakeArrayType : int -&gt; Type" Usage="type.MakeArrayType rank" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rank">
          <span data-ttu-id="96bec-3850">The number of dimensions for the array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3850">The number of dimensions for the array.</span>
          </span>
          <span data-ttu-id="96bec-3851">This number must be less than or equal to 32.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3851">This number must be less than or equal to 32.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-3852">Returns a <see cref="T:System.Type" /> object representing an array of the current type, with the specified number of dimensions.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3852">Returns a <see cref="T:System.Type" /> object representing an array of the current type, with the specified number of dimensions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-3853">An object representing an array of the current type, with the specified number of dimensions.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3853">An object representing an array of the current type, with the specified number of dimensions.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3854">Die <xref:System.Type.MakeArrayType%2A> Methode bietet eine Möglichkeit zum Generieren von Arraytypen, deren Elementtypen werden zur Laufzeit berechnet.</span><span class="sxs-lookup"><span data-stu-id="96bec-3854">The <xref:System.Type.MakeArrayType%2A> method provides a way to generate array types whose element types are computed at run time.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-3855">Die common Language Runtime wird unterschieden zwischen Vektoren (d. h. eindimensionale Arrays, die immer nullbasiert sind) und mehrdimensionale Arrays.</span><span class="sxs-lookup"><span data-stu-id="96bec-3855">The common language runtime makes a distinction between vectors (that is, one-dimensional arrays that are always zero-based) and multidimensional arrays.</span></span> <span data-ttu-id="96bec-3856">Ein Vektor, der immer nur eine Dimension hat, ist nicht identisch mit der ein mehrdimensionales Array, das nur eine Dimension besitzt.</span><span class="sxs-lookup"><span data-stu-id="96bec-3856">A vector, which always has only one dimension, is not the same as a multidimensional array that happens to have only one dimension.</span></span> <span data-ttu-id="96bec-3857">Überladung dieser Methode können keine vektortyp erstellen; Wenn `rank` ist 1, Überladung dieser Methode gibt einen mehrdimensionales Array-Typ, der eine Dimension besitzt.</span><span class="sxs-lookup"><span data-stu-id="96bec-3857">You cannot use this method overload to create a vector type; if `rank` is 1, this method overload returns a multidimensional array type that happens to have one dimension.</span></span> <span data-ttu-id="96bec-3858">Verwenden der <xref:System.Type.MakeArrayType> -methodenüberladung, um die vektortypen zu erstellen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3858">Use the <xref:System.Type.MakeArrayType> method overload to create vector types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-3859">Das folgende Codebeispiel erstellt Array `ref` (`ByRef` in Visual Basic), und Zeigertypen für die `Test` Klasse.</span><span class="sxs-lookup"><span data-stu-id="96bec-3859">The following code example creates array, `ref` (`ByRef` in Visual Basic), and pointer types for the `Test` class.</span></span>  
  
 [!code-cpp[System.Type.MakeXxxType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CPP/source.cpp#1)]
 [!code-csharp[System.Type.MakeXxxType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CS/source.cs#1)]
 [!code-vb[System.Type.MakeXxxType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.MakeXxxType/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException">
          <span data-ttu-id="96bec-3860">
            <paramref name="rank" /> is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3860">
              <paramref name="rank" /> is invalid.</span>
          </span>
          <span data-ttu-id="96bec-3861">For example, 0 or negative.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3861">For example, 0 or negative.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="96bec-3862">The invoked method is not supported in the base class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3862">The invoked method is not supported in the base class.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="96bec-3863">The current type is <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3863">The current type is <see cref="T:System.TypedReference" />.</span>
          </span>
          <span data-ttu-id="96bec-3864">-or-  The current type is a <see langword="ByRef" /> type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3864">-or-  The current type is a <see langword="ByRef" /> type.</span>
          </span>
          <span data-ttu-id="96bec-3865">That is, <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3865">That is, <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
          <span data-ttu-id="96bec-3866">-or-  <paramref name="rank" /> is greater than 32.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3866">-or-  <paramref name="rank" /> is greater than 32.</span>
          </span>
        </exception>
        <altmember cref="M:System.Type.MakeByRefType" />
        <altmember cref="M:System.Type.MakePointerType" />
      </Docs>
    </Member>
    <Member MemberName="MakeByRefType">
      <MemberSignature Language="C#" Value="public virtual Type MakeByRefType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type MakeByRefType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakeByRefType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MakeByRefType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ MakeByRefType();" />
      <MemberSignature Language="F#" Value="abstract member MakeByRefType : unit -&gt; Type&#xA;override this.MakeByRefType : unit -&gt; Type" Usage="type.MakeByRefType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3867">Returns a <see cref="T:System.Type" /> object that represents the current type when passed as a <see langword="ref" /> parameter (<see langword="ByRef" /> parameter in Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3867">Returns a <see cref="T:System.Type" /> object that represents the current type when passed as a <see langword="ref" /> parameter (<see langword="ByRef" /> parameter in Visual Basic).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-3868">A <see cref="T:System.Type" /> object that represents the current type when passed as a <see langword="ref" /> parameter (<see langword="ByRef" /> parameter in Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3868">A <see cref="T:System.Type" /> object that represents the current type when passed as a <see langword="ref" /> parameter (<see langword="ByRef" /> parameter in Visual Basic).</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3869">Die <xref:System.Type.MakeByRefType%2A> Methode bietet eine Möglichkeit zum generieren `ref` Typen (`ByRef` in Visual Basic) für Parameter aufgeführt.</span><span class="sxs-lookup"><span data-stu-id="96bec-3869">The <xref:System.Type.MakeByRefType%2A> method provides a way to generate `ref` types (`ByRef` in Visual Basic) for parameter lists.</span></span>  
  
 <span data-ttu-id="96bec-3870">Verwenden die Syntax der Microsoft intermediate Language (MSIL), wenn die aktuelle <xref:System.Type> -Objekt stellt <xref:System.Int32>, diese Methode gibt eine <xref:System.Type> Objekt darstellt `Int32&`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3870">Using the syntax of Microsoft intermediate language (MSIL), if the current <xref:System.Type> object represents <xref:System.Int32>, this method returns a <xref:System.Type> object representing `Int32&`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-3871">Das folgende Codebeispiel erstellt Array `ref` (`ByRef` in Visual Basic), und Zeigertypen für die `Test` Klasse.</span><span class="sxs-lookup"><span data-stu-id="96bec-3871">The following code example creates array, `ref` (`ByRef` in Visual Basic), and pointer types for the `Test` class.</span></span>  
  
 [!code-cpp[System.Type.MakeXxxType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CPP/source.cpp#1)]
 [!code-csharp[System.Type.MakeXxxType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CS/source.cs#1)]
 [!code-vb[System.Type.MakeXxxType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.MakeXxxType/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="96bec-3872">The invoked method is not supported in the base class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3872">The invoked method is not supported in the base class.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="96bec-3873">The current type is <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3873">The current type is <see cref="T:System.TypedReference" />.</span>
          </span>
          <span data-ttu-id="96bec-3874">-or-  The current type is a <see langword="ByRef" /> type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3874">-or-  The current type is a <see langword="ByRef" /> type.</span>
          </span>
          <span data-ttu-id="96bec-3875">That is, <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3875">That is, <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Type.MakeArrayType" />
        <altmember cref="M:System.Type.MakePointerType" />
      </Docs>
    </Member>
    <Member MemberName="MakeGenericMethodParameter">
      <MemberSignature Language="C#" Value="public static Type MakeGenericMethodParameter (int position);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type MakeGenericMethodParameter(int32 position) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakeGenericMethodParameter(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeGenericMethodParameter (position As Integer) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ MakeGenericMethodParameter(int position);" />
      <MemberSignature Language="F#" Value="static member MakeGenericMethodParameter : int -&gt; Type" Usage="System.Type.MakeGenericMethodParameter position" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="position">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeGenericType">
      <MemberSignature Language="C#" Value="public virtual Type MakeGenericType (params Type[] typeArguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type MakeGenericType(class System.Type[] typeArguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakeGenericType(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MakeGenericType (ParamArray typeArguments As Type()) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ MakeGenericType(... cli::array &lt;Type ^&gt; ^ typeArguments);" />
      <MemberSignature Language="F#" Value="abstract member MakeGenericType : Type[] -&gt; Type&#xA;override this.MakeGenericType : Type[] -&gt; Type" Usage="type.MakeGenericType typeArguments" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArguments" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeArguments">
          <span data-ttu-id="96bec-3876">An array of types to be substituted for the type parameters of the current generic type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3876">An array of types to be substituted for the type parameters of the current generic type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-3877">Substitutes the elements of an array of types for the type parameters of the current generic type definition and returns a <see cref="T:System.Type" /> object representing the resulting constructed type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3877">Substitutes the elements of an array of types for the type parameters of the current generic type definition and returns a <see cref="T:System.Type" /> object representing the resulting constructed type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-3878">A <see cref="T:System.Type" /> representing the constructed type formed by substituting the elements of <paramref name="typeArguments" /> for the type parameters of the current generic type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3878">A <see cref="T:System.Type" /> representing the constructed type formed by substituting the elements of <paramref name="typeArguments" /> for the type parameters of the current generic type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3879">Die <xref:System.Type.MakeGenericType%2A> Methode können Sie Code schreiben, der spezifische Typen zugewiesen werden, um die Typparameter einer generischen Typdefinition, wodurch eine <xref:System.Type> -Objekt, das einen bestimmten konstruierten Typ darstellt.</span><span class="sxs-lookup"><span data-stu-id="96bec-3879">The <xref:System.Type.MakeGenericType%2A> method allows you to write code that assigns specific types to the type parameters of a generic type definition, thus creating a <xref:System.Type> object that represents a particular constructed type.</span></span> <span data-ttu-id="96bec-3880">Sie können dies verwenden <xref:System.Type> Objekt, das zur Laufzeit Instanzen des konstruierten Typs zu erstellen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3880">You can use this <xref:System.Type> object to create run-time instances of the constructed type.</span></span>  
  
 <span data-ttu-id="96bec-3881">Typen mit erstellt <xref:System.Type.MakeGenericType%2A> geöffnet sein können, das heißt, einige ihrer Typargumente Typparameter von einschließenden generischen Methoden und Typen sein kann.</span><span class="sxs-lookup"><span data-stu-id="96bec-3881">Types constructed with <xref:System.Type.MakeGenericType%2A> can be open, that is, some of their type arguments can be type parameters of enclosing generic methods or types.</span></span> <span data-ttu-id="96bec-3882">Sie können solche offenen konstruierten Typen verwenden, wenn Sie dynamische Assemblys ausgeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-3882">You might use such open constructed types when you emit dynamic assemblies.</span></span> <span data-ttu-id="96bec-3883">Betrachten Sie z. B. die Klassen `Base` und `Derived` in den folgenden Code.</span><span class="sxs-lookup"><span data-stu-id="96bec-3883">For example, consider the classes `Base` and `Derived` in the following code.</span></span>  
  
 [!code-cpp[System.Type.MakeGenericType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.type.makegenerictype/cpp/remarks.cpp#1)]
 [!code-csharp[System.Type.MakeGenericType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.makegenerictype/cs/remarks.cs#1)]
 [!code-vb[System.Type.MakeGenericType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.makegenerictype/vb/remarks.vb#1)]  
  
 <span data-ttu-id="96bec-3884">Zum generieren `Derived` in eine dynamische Assembly, ist es erforderlich, um den Basistyp zu erstellen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3884">To generate `Derived` in a dynamic assembly, it is necessary to construct its base type.</span></span> <span data-ttu-id="96bec-3885">Zu diesem Zweck rufen Sie die <xref:System.Type.MakeGenericType%2A> Methode für eine <xref:System.Type> Objekt, das die Klasse darstellt `Base`, verwenden die generischen Typargumente <xref:System.Int32> und der Typparameter `V` aus `Derived`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3885">To do this, call the <xref:System.Type.MakeGenericType%2A> method on a <xref:System.Type> object representing the class `Base`, using the generic type arguments <xref:System.Int32> and the type parameter `V` from `Derived`.</span></span> <span data-ttu-id="96bec-3886">Da beide Typen und generische Typparameter durch dargestellt werden <xref:System.Type> Objekte, die ein Array mit diesen beiden kann übergeben werden, um die <xref:System.Type.MakeGenericType%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="96bec-3886">Because types and generic type parameters are both represented by <xref:System.Type> objects, an array containing both can be passed to the <xref:System.Type.MakeGenericType%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-3887">Ein konstruierter Typ wie z. B. `Base<int, V>` ist nützlich, wenn Code ausgegeben, aber Sie können nicht aufgerufen werden die <xref:System.Type.MakeGenericType%2A> Methode für diesen Typ da es sich nicht um eine generische Typdefinition ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-3887">A constructed type such as `Base<int, V>` is useful when emitting code, but you cannot call the <xref:System.Type.MakeGenericType%2A> method on this type because it is not a generic type definition.</span></span> <span data-ttu-id="96bec-3888">Um einen geschlossenen konstruierten Typ zu erstellen, die instanziiert werden kann, rufen Sie zuerst die <xref:System.Type.GetGenericTypeDefinition%2A> -Methode zum Abrufen einer <xref:System.Type> Objekt, das die generische Typdefinition darstellt, und rufen Sie anschließend <xref:System.Type.MakeGenericType%2A> mit den gewünschten Typargumenten.</span><span class="sxs-lookup"><span data-stu-id="96bec-3888">To create a closed constructed type that can be instantiated, first call the <xref:System.Type.GetGenericTypeDefinition%2A> method to get a <xref:System.Type> object representing the generic type definition and then call <xref:System.Type.MakeGenericType%2A> with the desired type arguments.</span></span>  
  
 <span data-ttu-id="96bec-3889">Die <xref:System.Type> zurückgegebenes Objekt <xref:System.Type.MakeGenericType%2A> ist identisch mit der <xref:System.Type> durch den Aufruf der <xref:System.Object.GetType%2A> Methode den resultierenden konstruierten Typ, oder die <xref:System.Object.GetType%2A> -Methode einer jeglichen konstruierter Typ, der aus der gleichen generischen erstellt wurde Geben Sie die Definition, die mit den gleichen Argumenten des Typs.</span><span class="sxs-lookup"><span data-stu-id="96bec-3889">The <xref:System.Type> object returned by <xref:System.Type.MakeGenericType%2A> is the same as the <xref:System.Type> obtained by calling the <xref:System.Object.GetType%2A> method of the resulting constructed type, or the <xref:System.Object.GetType%2A> method of any constructed type that was created from the same generic type definition using the same type arguments.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="96bec-3890">Ein Array von generischen Typen ist selbst ein generischer Typ.</span><span class="sxs-lookup"><span data-stu-id="96bec-3890">An array of generic types is not itself a generic type.</span></span> <span data-ttu-id="96bec-3891">Sie können nicht aufrufen <xref:System.Type.MakeGenericType%2A> Geben Sie auf ein Array wie z. B. `C<T>[]` (`Dim ac() As C(Of T)` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="96bec-3891">You cannot call <xref:System.Type.MakeGenericType%2A> on an array type such as `C<T>[]` (`Dim ac() As C(Of T)` in Visual Basic).</span></span> <span data-ttu-id="96bec-3892">Erstellen Sie einen geschlossenen generischen Typ von `C<T>[]`, rufen Sie <xref:System.Type.GetElementType%2A> zum Abrufen der generischen Typdefinition `C<T>`; Aufrufen <xref:System.Type.MakeGenericType%2A> auf die Definition des generischen Typs auf den konstruierten Typ zu erstellen, und rufen Sie schließlich die <xref:System.Type.MakeArrayType%2A> Methode für Der konstruierte Typ zum Erstellen des Arraytyps.</span><span class="sxs-lookup"><span data-stu-id="96bec-3892">To construct a closed generic type from `C<T>[]`, call <xref:System.Type.GetElementType%2A> to obtain the generic type definition `C<T>`; call <xref:System.Type.MakeGenericType%2A> on the generic type definition to create the constructed type; and finally call the <xref:System.Type.MakeArrayType%2A> method on the constructed type to create the array type.</span></span> <span data-ttu-id="96bec-3893">Das gleiche gilt für Zeigertypen und `ref` Typen (`ByRef` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="96bec-3893">The same is true of pointer types and `ref` types (`ByRef` in Visual Basic).</span></span>  
  
 <span data-ttu-id="96bec-3894">Eine Liste der invarianten Bedingungen für Begriffe, für Begriffe, die für die Reflektion mit generischen Methoden verwendet werden, finden Sie in den Hinweisen zur Eigenschaft <xref:System.Type.IsGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="96bec-3894">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
## <a name="nested-types"></a><span data-ttu-id="96bec-3895">Geschachtelte Typen</span><span class="sxs-lookup"><span data-stu-id="96bec-3895">Nested Types</span></span>  
 <span data-ttu-id="96bec-3896">Wenn ein generischer Typ mit c#, C++ oder Visual Basic definiert ist, sind seine geschachtelten Typen alle generisch.</span><span class="sxs-lookup"><span data-stu-id="96bec-3896">If a generic type is defined using C#, C++, or Visual Basic, then its nested types are all generic.</span></span> <span data-ttu-id="96bec-3897">Dies gilt auch, wenn die geschachtelten Typen keine eigenen Typparameter verfügen, da alle drei Sprachen die Typparameter von einschließenden Typen in den Typparameterlisten von geschachtelten Typen enthalten.</span><span class="sxs-lookup"><span data-stu-id="96bec-3897">This is true even if the nested types have no type parameters of their own, because all three languages include the type parameters of enclosing types in the type parameter lists of nested types.</span></span> <span data-ttu-id="96bec-3898">Betrachten Sie die folgenden Klassen:</span><span class="sxs-lookup"><span data-stu-id="96bec-3898">Consider the following classes:</span></span>  
  
 [!code-cpp[System.Type.MakeGenericType#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.type.makegenerictype/cpp/remarks.cpp#2)]
 [!code-csharp[System.Type.MakeGenericType#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.makegenerictype/cs/remarks.cs#2)]
 [!code-vb[System.Type.MakeGenericType#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.makegenerictype/vb/remarks.vb#2)]  
  
 <span data-ttu-id="96bec-3899">Der Typparameterliste der geschachtelten Klasse `Inner` verfügt über zwei Typparameter, `T` und `U`, das erste Argument ist der Typparameter seiner einschließenden Klasse.</span><span class="sxs-lookup"><span data-stu-id="96bec-3899">The type parameter list of the nested class `Inner` has two type parameters, `T` and `U`, the first of which is the type parameter of its enclosing class.</span></span> <span data-ttu-id="96bec-3900">Auf ähnliche Weise der Typparameterliste der geschachtelten Klasse `Innermost1` verfügt über drei Typparameter, `T`, `U`, und `V`, mit `T` und `U` stammen aus den einschließenden Klassen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3900">Similarly, the type parameter list of the nested class `Innermost1` has three type parameters, `T`, `U`, and `V`, with `T` and `U` coming from its enclosing classes.</span></span> <span data-ttu-id="96bec-3901">Die geschachtelte Klasse `Innermost2` verfügt über zwei Typparameter, `T` und `U`, das den einschließenden Klassen stammen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3901">The nested class `Innermost2` has two type parameters, `T` and `U`, which come from its enclosing classes.</span></span>  
  
 <span data-ttu-id="96bec-3902">Wenn die Parameterliste des einschließenden Typs mehrere Typparameter aufweist, sind alle Typparameter in der Reihenfolge, in der Typparameterliste des geschachtelten Typs enthalten.</span><span class="sxs-lookup"><span data-stu-id="96bec-3902">If the parameter list of the enclosing type has more than one type parameter, all the type parameters in order are included in the type parameter list of the nested type.</span></span>  
  
 <span data-ttu-id="96bec-3903">Um einen generischen Typ aus der generischen Typdefinition für einen geschachtelten Typ zu konstruieren, rufen die <xref:System.Type.MakeGenericType%2A> Methode mit dem Array formatiert, durch die Verkettung von Arrays Argument Typ aller einschließenden Typen, ab der äußersten generische Typ, und bis hin zu den Geben Sie Argumentarray des geschachtelten Typs selbst, wenn es einen eigenen Typparameter aufweist.</span><span class="sxs-lookup"><span data-stu-id="96bec-3903">To construct a generic type from the generic type definition for a nested type, call the <xref:System.Type.MakeGenericType%2A> method with the array formed by concatenating the type argument arrays of all the enclosing types, beginning with the outermost generic type, and ending with the type argument array of the nested type itself, if it has type parameters of its own.</span></span> <span data-ttu-id="96bec-3904">Zum Erstellen einer Instanz von `Innermost1`, rufen Sie die <xref:System.Type.MakeGenericType%2A> -Methode mit einem Array von drei Typen, T, U und V zugewiesen werden soll. Zum Erstellen einer Instanz von `Innermost2`, rufen Sie die <xref:System.Type.MakeGenericType%2A> -Methode mit einem Array von Typen, T und u zugewiesen werden</span><span class="sxs-lookup"><span data-stu-id="96bec-3904">To create an instance of `Innermost1`, call the <xref:System.Type.MakeGenericType%2A> method with an array containing three types, to be assigned to T, U, and V. To create an instance of `Innermost2`, call the <xref:System.Type.MakeGenericType%2A> method with an array containing two types, to be assigned to T and U.</span></span>  
  
 <span data-ttu-id="96bec-3905">Die Sprachen weitergegeben werden, die Typparameter von einschließenden Typen auf diese Weise, sodass Sie die Typparameter eines einschließenden Typs verwenden können, um Felder von geschachtelten Typen zu definieren.</span><span class="sxs-lookup"><span data-stu-id="96bec-3905">The languages propagate the type parameters of enclosing types in this fashion so you can use the type parameters of an enclosing type to define fields of nested types.</span></span> <span data-ttu-id="96bec-3906">Andernfalls wäre die Typparameter nicht im Gültigkeitsbereich des Hauptteils der geschachtelten Typen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3906">Otherwise, the type parameters would not be in scope within the bodies of the nested types.</span></span> <span data-ttu-id="96bec-3907">Es ist möglich, geschachtelte Typen zu definieren, ohne die Weitergabe der Typparameter von einschließenden Typen, durch das Ausgeben von Code in dynamischen Assemblys oder mithilfe der [Ilasm.exe (IL-Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span><span class="sxs-lookup"><span data-stu-id="96bec-3907">It is possible to define nested types without propagating the type parameters of enclosing types, by emitting code in dynamic assemblies or by using the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span> <span data-ttu-id="96bec-3908">Betrachten Sie den folgenden Code aus, für die MSIL-Assembler:</span><span class="sxs-lookup"><span data-stu-id="96bec-3908">Consider the following code for the MSIL assembler:</span></span>  
  
```  
.class public Outer<T> {  
    .class nested public Inner<U> {  
        .class nested public Innermost {  
        }  
    }  
}  
```  
  
 <span data-ttu-id="96bec-3909">In diesem Beispiel ist es nicht möglich, definieren Sie ein Feld vom Typ `T` oder `U` in Klasse `Innermost`, da die Typparameter nicht im Gültigkeitsbereich befinden.</span><span class="sxs-lookup"><span data-stu-id="96bec-3909">In this example, it is not possible to define a field of type `T` or `U` in class `Innermost`, because those type parameters are not in scope.</span></span> <span data-ttu-id="96bec-3910">Der folgende Assemblercode definiert die geschachtelte Klassen, die das zu erreichen, die bei der in C++, Visual Basic und C#-Definition:</span><span class="sxs-lookup"><span data-stu-id="96bec-3910">The following assembler code defines nested classes that behave the way they would if defined in C++, Visual Basic, and C#:</span></span>  
  
```  
.class public Outer<T> {  
    .class nested public Inner<T, U> {  
        .class nested public Innermost<T, U, V> {  
        }  
    }  
}  
```  
  
 <span data-ttu-id="96bec-3911">Sie können die [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) geschachtelte Klassen, die in der allgemeinen Sprachen definiert und untersuchen durch dieses Benennungsschema.</span><span class="sxs-lookup"><span data-stu-id="96bec-3911">You can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine nested classes defined in the high-level languages and observe this naming scheme.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-3912">Im folgenden Beispiel wird die <xref:System.Type.MakeGenericType%2A> Methode zum Erstellen von eines konstruierten Typs aus der generischen Typdefinition für den <xref:System.Collections.Generic.Dictionary%602> Typ.</span><span class="sxs-lookup"><span data-stu-id="96bec-3912">The following example uses the <xref:System.Type.MakeGenericType%2A> method to create a constructed type from the generic type definition for the <xref:System.Collections.Generic.Dictionary%602> type.</span></span> <span data-ttu-id="96bec-3913">Den konstruierte Typ darstellt, ein <xref:System.Collections.Generic.Dictionary%602> von `Test` Objekte mit Zeichenfolgenschlüsseln.</span><span class="sxs-lookup"><span data-stu-id="96bec-3913">The constructed type represents a <xref:System.Collections.Generic.Dictionary%602> of `Test` objects with string keys.</span></span>  
  
 [!code-cpp[System.Type.BindGenericParameters#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.BindGenericParameters/CPP/source.cpp#1)]
 [!code-csharp[System.Type.BindGenericParameters#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.BindGenericParameters/CS/source.cs#1)]
 [!code-vb[System.Type.BindGenericParameters#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.BindGenericParameters/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="96bec-3914">The current type does not represent a generic type definition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3914">The current type does not represent a generic type definition.</span>
          </span>
          <span data-ttu-id="96bec-3915">That is, <see cref="P:System.Type.IsGenericTypeDefinition" /> returns <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3915">That is, <see cref="P:System.Type.IsGenericTypeDefinition" /> returns <see langword="false" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96bec-3916">
            <paramref name="typeArguments" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3916">
              <paramref name="typeArguments" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="96bec-3917">-or-  Any element of <paramref name="typeArguments" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3917">-or-  Any element of <paramref name="typeArguments" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="96bec-3918">The number of elements in <paramref name="typeArguments" /> is not the same as the number of type parameters in the current generic type definition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3918">The number of elements in <paramref name="typeArguments" /> is not the same as the number of type parameters in the current generic type definition.</span>
          </span>
          <span data-ttu-id="96bec-3919">-or-  Any element of <paramref name="typeArguments" /> does not satisfy the constraints specified for the corresponding type parameter of the current generic type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3919">-or-  Any element of <paramref name="typeArguments" /> does not satisfy the constraints specified for the corresponding type parameter of the current generic type.</span>
          </span>
          <span data-ttu-id="96bec-3920">-or-  <paramref name="typeArguments" /> contains an element that is a pointer type (<see cref="P:System.Type.IsPointer" /> returns <see langword="true" />), a by-ref type (<see cref="P:System.Type.IsByRef" /> returns <see langword="true" />), or <see cref="T:System.Void" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3920">-or-  <paramref name="typeArguments" /> contains an element that is a pointer type (<see cref="P:System.Type.IsPointer" /> returns <see langword="true" />), a by-ref type (<see cref="P:System.Type.IsByRef" /> returns <see langword="true" />), or <see cref="T:System.Void" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="96bec-3921">The invoked method is not supported in the base class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3921">The invoked method is not supported in the base class.</span>
          </span>
          <span data-ttu-id="96bec-3922">Derived classes must provide an implementation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3922">Derived classes must provide an implementation.</span>
          </span>
        </exception>
        <altmember cref="P:System.Type.IsGenericTypeDefinition" />
        <altmember cref="M:System.Type.GetGenericTypeDefinition" />
      </Docs>
    </Member>
    <Member MemberName="MakePointerType">
      <MemberSignature Language="C#" Value="public virtual Type MakePointerType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type MakePointerType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakePointerType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MakePointerType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ MakePointerType();" />
      <MemberSignature Language="F#" Value="abstract member MakePointerType : unit -&gt; Type&#xA;override this.MakePointerType : unit -&gt; Type" Usage="type.MakePointerType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3923">Returns a <see cref="T:System.Type" /> object that represents a pointer to the current type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3923">Returns a <see cref="T:System.Type" /> object that represents a pointer to the current type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-3924">A <see cref="T:System.Type" /> object that represents a pointer to the current type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3924">A <see cref="T:System.Type" /> object that represents a pointer to the current type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3925">Die <xref:System.Type.MakePointerType%2A> Methode bietet eine Möglichkeit zum Generieren von Zeigertypen für Parameterlisten.</span><span class="sxs-lookup"><span data-stu-id="96bec-3925">The <xref:System.Type.MakePointerType%2A> method provides a way to generate pointer types for parameter lists.</span></span>  
  
 <span data-ttu-id="96bec-3926">Verwenden die Syntax der Microsoft intermediate Language (MSIL), wenn die aktuelle <xref:System.Type> -Objekt stellt <xref:System.Int32>, diese Methode gibt eine <xref:System.Type> Objekt darstellt `Int32*`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3926">Using the syntax of Microsoft intermediate language (MSIL), if the current <xref:System.Type> object represents <xref:System.Int32>, this method returns a <xref:System.Type> object representing `Int32*`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-3927">Das folgende Codebeispiel erstellt Array `ref` (`ByRef` in Visual Basic), und Zeigertypen für die `Test` Klasse.</span><span class="sxs-lookup"><span data-stu-id="96bec-3927">The following code example creates array, `ref` (`ByRef` in Visual Basic), and pointer types for the `Test` class.</span></span>  
  
 [!code-cpp[System.Type.MakeXxxType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CPP/source.cpp#1)]
 [!code-csharp[System.Type.MakeXxxType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CS/source.cs#1)]
 [!code-vb[System.Type.MakeXxxType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.MakeXxxType/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="96bec-3928">The invoked method is not supported in the base class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3928">The invoked method is not supported in the base class.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="96bec-3929">The current type is <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3929">The current type is <see cref="T:System.TypedReference" />.</span>
          </span>
          <span data-ttu-id="96bec-3930">-or-  The current type is a <see langword="ByRef" /> type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3930">-or-  The current type is a <see langword="ByRef" /> type.</span>
          </span>
          <span data-ttu-id="96bec-3931">That is, <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3931">That is, <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Type.MakeByRefType" />
        <altmember cref="M:System.Type.MakeArrayType" />
      </Docs>
    </Member>
    <Member MemberName="MemberType">
      <MemberSignature Language="C#" Value="public override System.Reflection.MemberTypes MemberType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MemberTypes MemberType" />
      <MemberSignature Language="DocId" Value="P:System.Type.MemberType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MemberType As MemberTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MemberTypes MemberType { System::Reflection::MemberTypes get(); };" />
      <MemberSignature Language="F#" Value="member this.MemberType : System.Reflection.MemberTypes" Usage="System.Type.MemberType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.MemberType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3932">Gets a <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a type or a nested type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3932">Gets a <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a type or a nested type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-3933">Ein <see cref="T:System.Reflection.MemberTypes" />-Wert, der angibt, dass dieser Member ein Typ oder ein geschachtelter Typ ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3933">A <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a type or a nested type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3934">Diese Eigenschaft überschreibt <xref:System.Reflection.MemberInfo.MemberType%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="96bec-3934">This property overrides <xref:System.Reflection.MemberInfo.MemberType%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="96bec-3935">Wenn Sie daher eine Reihe von untersuchen <xref:System.Reflection.MemberInfo> Objekte, z. B. das von zurückgegebene Array <xref:System.Type.GetMembers%2A>– die <xref:System.Reflection.MemberInfo.MemberType%2A> -Eigenschaft gibt <xref:System.Reflection.MemberTypes.NestedType?displayProperty=nameWithType> Wenn ein angegebenes Element ein geschachtelter Typ ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-3935">Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects—for example, the array returned by <xref:System.Type.GetMembers%2A>—the <xref:System.Reflection.MemberInfo.MemberType%2A> property returns <xref:System.Reflection.MemberTypes.NestedType?displayProperty=nameWithType> when a given member is a nested type.</span></span>  
  
 <span data-ttu-id="96bec-3936">Wenn die aktuelle <xref:System.Type> stellt ein konstruierter generischer Typ, diese Eigenschaft gilt, für die Definition des generischen Typs aus der der Typ konstruiert wurde.</span><span class="sxs-lookup"><span data-stu-id="96bec-3936">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="96bec-3937">Z. B. wenn die aktuelle <xref:System.Type> stellt `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), der Wert dieser Eigenschaft richtet sich nach `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3937">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="96bec-3938">Wenn die aktuelle <xref:System.Type> einen Typparameter in der Definition eines generischen Typs oder generische Methode darstellt, auf diese Eigenschaft gibt immer <xref:System.Reflection.MemberTypes.TypeInfo?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="96bec-3938">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns <xref:System.Reflection.MemberTypes.TypeInfo?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-3939">Das folgende Codebeispiel zeigt die `MemberType` Feld als Parameter an die `GetMember` Methode:</span><span class="sxs-lookup"><span data-stu-id="96bec-3939">The following code example shows the `MemberType` field as a parameter to the `GetMember` method:</span></span>  
  
 [!code-cpp[Classic Type.MemberType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.MemberType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.MemberType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.MemberType Example/CS/source.cs#1)]
 [!code-vb[Classic Type.MemberType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.MemberType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberTypes" />
      </Docs>
    </Member>
    <Member MemberName="Missing">
      <MemberSignature Language="C#" Value="public static readonly object Missing;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly object Missing" />
      <MemberSignature Language="DocId" Value="F:System.Type.Missing" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Missing As Object " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Object ^ Missing;" />
      <MemberSignature Language="F#" Value=" staticval mutable Missing : obj" Usage="System.Type.Missing" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3940">Represents a missing value in the <see cref="T:System.Type" /> information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3940">Represents a missing value in the <see cref="T:System.Type" /> information.</span>
          </span>
          <span data-ttu-id="96bec-3941">This field is read-only.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3941">This field is read-only.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3942">Verwenden der `Missing` Feld in einem Aufruf über Reflektion, um den Standardwert eines Parameters zu erhalten.</span><span class="sxs-lookup"><span data-stu-id="96bec-3942">Use the `Missing` field for invocation through reflection to obtain the default value of a parameter.</span></span> <span data-ttu-id="96bec-3943">Wenn die `Missing` Feld für einen Parameterwert übergeben, und es gibt keinen Standardwert für diesen Parameter ein <xref:System.ArgumentException> ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="96bec-3943">If the `Missing` field is passed in for a parameter value and there is no default value for that parameter, an <xref:System.ArgumentException> is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-3944">Das folgende Codebeispiel zeigt die Verwendung der `Missing` Feld, eine Methode mit ihren Standardargumenten aufzurufen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3944">The following code example shows the use of the `Missing` field to invoke a method with its default arguments.</span></span>  
  
 [!code-cpp[Classic Type.Missing Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.Missing Example/cpp/source.cpp#1)]
 [!code-csharp[Classic Type.Missing Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.Missing Example/cs/source.cs#1)]
 [!code-vb[Classic Type.Missing Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.Missing Example/VB/source.vb#1)]  
  
 <span data-ttu-id="96bec-3945">Dieser Code erzeugt die folgende Ausgabe:</span><span class="sxs-lookup"><span data-stu-id="96bec-3945">This code produces the following output:</span></span>  
  
 <span data-ttu-id="96bec-3946">eine = 10 b = 55.3 c = 12</span><span class="sxs-lookup"><span data-stu-id="96bec-3946">a = 10 b = 55.3 c = 12</span></span>  
  
 <span data-ttu-id="96bec-3947">eine = 10 b = 1.3 c = 1</span><span class="sxs-lookup"><span data-stu-id="96bec-3947">a = 10 b = 1.3 c = 1</span></span>  
  
 <span data-ttu-id="96bec-3948">eine = 10 b 1.2 c = 1 =</span><span class="sxs-lookup"><span data-stu-id="96bec-3948">a = 10 b = 1.2 c = 1</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.Missing" />
      </Docs>
    </Member>
    <Member MemberName="Module">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.Module Module { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Module Module" />
      <MemberSignature Language="DocId" Value="P:System.Type.Module" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Module As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Reflection::Module ^ Module { System::Reflection::Module ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Module : System.Reflection.Module" Usage="System.Type.Module" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.Module</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3949">Gets the module (the DLL) in which the current <see cref="T:System.Type" /> is defined.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3949">Gets the module (the DLL) in which the current <see cref="T:System.Type" /> is defined.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-3950">Das Modul, in dem der aktuelle <see cref="T:System.Type" /> definiert ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3950">The module in which the current <see cref="T:System.Type" /> is defined.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3951">Wenn die aktuelle <xref:System.Type> stellt ein konstruierter generischer Typ, diese Eigenschaft gibt das Modul in der Definition des generischen Typs definiert wurde.</span><span class="sxs-lookup"><span data-stu-id="96bec-3951">If the current <xref:System.Type> represents a constructed generic type, this property returns the module in which the generic type definition was defined.</span></span> <span data-ttu-id="96bec-3952">Beispielsweise wird bei der Erstellung einer Instanz von `MyGenericStack<int>`, <xref:System.Type.Module%2A> -Eigenschaft für den konstruierten Typ gibt das Modul, in dem `MyGenericStack<T>` definiert ist.</span><span class="sxs-lookup"><span data-stu-id="96bec-3952">For example, if you create an instance of `MyGenericStack<int>`, the <xref:System.Type.Module%2A> property for the constructed type returns the module in which `MyGenericStack<T>` is defined.</span></span>  
  
 <span data-ttu-id="96bec-3953">Auf ähnliche Weise, wenn die aktuelle <xref:System.Type> stellt einen generischen Parameter `T`, diese Eigenschaft gibt die Assembly, die den generischen Typ enthält, die definiert `T`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3953">Similarly, if the current <xref:System.Type> represents a generic parameter `T`, this property returns the assembly that contains the generic type that defines `T`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-3954">Im folgenden Beispiel wird veranschaulicht, eine Verwendung von der <xref:System.Type.Namespace%2A> und `Module` Eigenschaften und die <xref:System.Type.ToString%2A> -Methode der <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="96bec-3954">This following example demonstrates a use of the <xref:System.Type.Namespace%2A> and `Module` properties and the <xref:System.Type.ToString%2A> method of <xref:System.Type>.</span></span>  
  
 [!code-cpp[Type_ToString#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_ToString/CPP/type_tostring.cpp#1)]
 [!code-csharp[Type_ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_ToString/CS/type_tostring.cs#1)]
 [!code-vb[Type_ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_ToString/VB/type_tostring.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.Module" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public abstract string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Type.Name" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Type.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public abstract string Namespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Type.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ Namespace { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string" Usage="System.Type.Namespace" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.Namespace</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3955">Gets the namespace of the <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3955">Gets the namespace of the <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-3956">Der Namespace des <see cref="T:System.Type" />; <see langword="null" />, wenn die aktuelle Instanz über keinen Namespace verfügt oder einen generischen Parameter darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3956">The namespace of the <see cref="T:System.Type" />; <see langword="null" /> if the current instance has no namespace or represents a generic parameter.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3957">Ein Namespace ist eine logische während der Entwurfszeit Benennung der Einfachheit halber, der hauptsächlich zum Definieren des Bereichs in einer Anwendung und Organisieren von Klassen und anderen Typen in einer hierarchischen Struktur.</span><span class="sxs-lookup"><span data-stu-id="96bec-3957">A namespace is a logical design-time naming convenience, used mainly to define scope in an application and organize classes and other types in a single hierarchical structure.</span></span> <span data-ttu-id="96bec-3958">Vom Standpunkt der Runtime gibt es keine Namespaces.</span><span class="sxs-lookup"><span data-stu-id="96bec-3958">From the viewpoint of the runtime, there are no namespaces.</span></span>  
  
 <span data-ttu-id="96bec-3959">Wenn die aktuelle <xref:System.Type> einen konstruierter generischen Typ darstellt, diese Eigenschaft gibt den Namespace, die generische Typdefinition enthält.</span><span class="sxs-lookup"><span data-stu-id="96bec-3959">If the current <xref:System.Type> represents a constructed generic type, this property returns the namespace that contains the generic type definition.</span></span> <span data-ttu-id="96bec-3960">Auf ähnliche Weise, wenn die aktuelle <xref:System.Type> stellt einen generischen Parameter `T`, diese Eigenschaft gibt den Namespace, die generische Typdefinition enthält, die definiert `T`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3960">Similarly, if the current <xref:System.Type> represents a generic parameter `T`, this property returns the namespace that contains the generic type definition that defines `T`.</span></span>  
  
 <span data-ttu-id="96bec-3961">Wenn die aktuelle <xref:System.Type> -Objekt einen generischen Parameter darstellt, gibt diese Eigenschaft `null`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3961">If the current <xref:System.Type> object represents a generic parameter, this property returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-3962">Im folgenden Beispiel wird veranschaulicht, eine Verwendung von der `Namespace` und <xref:System.Type.Module%2A> Eigenschaften und die <xref:System.Type.ToString%2A> -Methode der <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="96bec-3962">This following example demonstrates a use of the `Namespace` and <xref:System.Type.Module%2A> properties and the <xref:System.Type.ToString%2A> method of <xref:System.Type>.</span></span>  
  
 [!code-cpp[Type_ToString#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_ToString/CPP/type_tostring.cpp#1)]
 [!code-csharp[Type_ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_ToString/CS/type_tostring.cs#1)]
 [!code-vb[Type_ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_ToString/VB/type_tostring.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.FullName" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (Type left, Type right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Type left, class System.Type right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.op_Equality(System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As Type, right As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(Type ^ left, Type ^ right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : Type * Type -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Type" />
        <Parameter Name="right" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="96bec-3963">The first object to compare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3963">The first object to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="96bec-3964">The second object to compare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3964">The second object to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-3965">Indicates whether two <see cref="T:System.Type" /> objects are equal.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3965">Indicates whether two <see cref="T:System.Type" /> objects are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-3966">
            <see langword="true" /> if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3966">
              <see langword="true" /> if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (Type left, Type right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Type left, class System.Type right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.op_Inequality(System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As Type, right As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(Type ^ left, Type ^ right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : Type * Type -&gt; bool" Usage="System.Type.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Type" />
        <Parameter Name="right" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="96bec-3967">The first object to compare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3967">The first object to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="96bec-3968">The second object to compare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3968">The second object to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-3969">Indicates whether two <see cref="T:System.Type" /> objects are not equal.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3969">Indicates whether two <see cref="T:System.Type" /> objects are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-3970">
            <see langword="true" /> if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3970">
              <see langword="true" /> if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReflectedType">
      <MemberSignature Language="C#" Value="public override Type ReflectedType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReflectedType" />
      <MemberSignature Language="DocId" Value="P:System.Type.ReflectedType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReflectedType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ReflectedType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReflectedType : Type" Usage="System.Type.ReflectedType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.ReflectedType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-3971">Gets the class object that was used to obtain this member.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3971">Gets the class object that was used to obtain this member.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-3972">Das <see langword="Type" />-Objekt, über das dieses <see cref="T:System.Type" />-Objekt abgerufen wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3972">The <see langword="Type" /> object through which this <see cref="T:System.Type" /> object was obtained.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3973">Für <xref:System.Type> Objekte, die der Wert dieser Eigenschaft ist immer identisch mit dem Wert, der die <xref:System.Type.DeclaringType%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="96bec-3973">For <xref:System.Type> objects, the value of this property is always the same as the value of the <xref:System.Type.DeclaringType%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-3974">Dieses Beispiel zeigt den reflektierten Typ einer geschachtelten Klasse.</span><span class="sxs-lookup"><span data-stu-id="96bec-3974">This example displays the reflected type of a nested class.</span></span>  
  
 [!code-cpp[Classic Type.ReflectedType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.ReflectedType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.ReflectedType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.ReflectedType Example/CS/source.cs#1)]
 [!code-vb[Classic Type.ReflectedType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.ReflectedType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="P:System.Type.DeclaringType" />
      </Docs>
    </Member>
    <Member MemberName="ReflectionOnlyGetType">
      <MemberSignature Language="C#" Value="public static Type ReflectionOnlyGetType (string typeName, bool throwIfNotFound, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type ReflectionOnlyGetType(string typeName, bool throwIfNotFound, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReflectionOnlyGetType (typeName As String, throwIfNotFound As Boolean, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ ReflectionOnlyGetType(System::String ^ typeName, bool throwIfNotFound, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member ReflectionOnlyGetType : string * bool * bool -&gt; Type" Usage="System.Type.ReflectionOnlyGetType (typeName, throwIfNotFound, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="throwIfNotFound" Type="System.Boolean" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="96bec-3975">The assembly-qualified name of the <see cref="T:System.Type" /> to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3975">The assembly-qualified name of the <see cref="T:System.Type" /> to get.</span>
          </span>
        </param>
        <param name="throwIfNotFound">
          <span data-ttu-id="96bec-3976">
            <see langword="true" /> to throw a <see cref="T:System.TypeLoadException" /> if the type cannot be found; <see langword="false" /> to return <see langword="null" /> if the type cannot be found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3976">
              <see langword="true" /> to throw a <see cref="T:System.TypeLoadException" /> if the type cannot be found; <see langword="false" /> to return <see langword="null" /> if the type cannot be found.</span>
          </span>
          <span data-ttu-id="96bec-3977">Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3977">Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them.</span>
          </span>
          <span data-ttu-id="96bec-3978">See the Exceptions section.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3978">See the Exceptions section.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="96bec-3979">
            <see langword="true" /> to perform a case-insensitive search for <c>typeName</c>; <see langword="false" /> to perform a case-sensitive search for <c>typeName</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3979">
              <see langword="true" /> to perform a case-insensitive search for <c>typeName</c>; <see langword="false" /> to perform a case-sensitive search for <c>typeName</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-3980">Gets the <see cref="T:System.Type" /> with the specified name, specifying whether to perform a case-sensitive search and whether to throw an exception if the type is not found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3980">Gets the <see cref="T:System.Type" /> with the specified name, specifying whether to perform a case-sensitive search and whether to throw an exception if the type is not found.</span>
          </span>
          <span data-ttu-id="96bec-3981">The type is loaded for reflection only, not for execution.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3981">The type is loaded for reflection only, not for execution.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-3982">The type with the specified name, if found; otherwise, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3982">The type with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
          <span data-ttu-id="96bec-3983">If the type is not found, the <paramref name="throwIfNotFound" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3983">If the type is not found, the <paramref name="throwIfNotFound" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown.</span>
          </span>
          <span data-ttu-id="96bec-3984">In some cases, an exception is thrown regardless of the value of <paramref name="throwIfNotFound" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3984">In some cases, an exception is thrown regardless of the value of <paramref name="throwIfNotFound" />.</span>
          </span>
          <span data-ttu-id="96bec-3985">See the Exceptions section.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3985">See the Exceptions section.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-3986">Wenn die Assembly, die den Typ nicht in den ReflectionOnly-Kontext geladen ist, verwenden die <xref:System.Type.ReflectionOnlyGetType%2A> Methode ist gleichbedeutend mit dem ersten Laden der Assembly für die Reflektion, mit der <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> -Methode, und Laden Sie dann durch Aufrufen des Typs der der Assembly <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> Methode.</span><span class="sxs-lookup"><span data-stu-id="96bec-3986">If the assembly containing the type is not already loaded into the reflection-only context, using the <xref:System.Type.ReflectionOnlyGetType%2A> method is equivalent to first loading the assembly for reflection only, using the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> method, and then loading the type by calling the assembly's <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="96bec-3987">Weitere Informationen zu Namen mit assemblyqualifikation finden Sie unter den <xref:System.Type.AssemblyQualifiedName%2A?displayProperty=nameWithType> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="96bec-3987">For information about assembly-qualified names, see the <xref:System.Type.AssemblyQualifiedName%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="96bec-3988">Weitere Informationen zum Angeben der Typnamen finden Sie unter den <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29> -methodenüberladung.</span><span class="sxs-lookup"><span data-stu-id="96bec-3988">For additional details on specifying type names, see the <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload.</span></span>  
  
 <span data-ttu-id="96bec-3989">Wenn die Assembly bereits für die Ausführung geladen ist, wird eine weitere Kopie in den ReflectionOnly Kontext geladen.</span><span class="sxs-lookup"><span data-stu-id="96bec-3989">If the assembly is already loaded for execution, another copy is loaded into the reflection-only context.</span></span>  
  
 <span data-ttu-id="96bec-3990">Die `throwIfNotFound` Parameter gibt an, was geschieht, wenn der Typ wurde nicht gefunden, und auch bestimmte andere Ausnahmebedingungen unterdrückt, wie im Abschnitt für Ausnahmen beschrieben.</span><span class="sxs-lookup"><span data-stu-id="96bec-3990">The `throwIfNotFound` parameter specifies what happens when the type is not found, and also suppresses certain other exception conditions, as described in the Exceptions section.</span></span> <span data-ttu-id="96bec-3991">Einige Ausnahmen werden ausgelöst, unabhängig vom Wert der `throwIfNotFound`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3991">Some exceptions are thrown regardless of the value of `throwIfNotFound`.</span></span> <span data-ttu-id="96bec-3992">Wenn die Assembly nicht gültig ist, z. B. eine <xref:System.BadImageFormatException> wird ausgelöst, selbst wenn `throwIfNotFound` ist `false`.</span><span class="sxs-lookup"><span data-stu-id="96bec-3992">For example, if the assembly is not valid, a <xref:System.BadImageFormatException> is thrown even if `throwIfNotFound` is `false`.</span></span>  
  
 <span data-ttu-id="96bec-3993">Weitere Informationen zu den ReflectionOnly Kontext verwenden, finden Sie unter [wie: Laden von Assemblys in den reflektionsbezogenen Kontext](~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md).</span><span class="sxs-lookup"><span data-stu-id="96bec-3993">For more information about using the reflection-only context, see [How to: Load Assemblies into the Reflection-Only Context](~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="96bec-3994">
            <paramref name="typeName" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3994">
              <paramref name="typeName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="96bec-3995">A class initializer is invoked and throws an exception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3995">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="96bec-3996">
            <paramref name="throwIfNotFound" /> is <see langword="true" /> and the type is not found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3996">
              <paramref name="throwIfNotFound" /> is <see langword="true" /> and the type is not found.</span>
          </span>
          <span data-ttu-id="96bec-3997">-or-  <paramref name="throwIfNotFound" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.  -or-  <paramref name="throwIfNotFound" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3997">-or-  <paramref name="throwIfNotFound" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.  -or-  <paramref name="throwIfNotFound" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.</span>
          </span>
          <span data-ttu-id="96bec-3998">-or-  <paramref name="throwIfNotFound" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3998">-or-  <paramref name="throwIfNotFound" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.</span>
          </span>
          <span data-ttu-id="96bec-3999">-or-  <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" /> objects.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-3999">-or-  <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" /> objects.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="96bec-4000">
            <paramref name="typeName" /> does not include the assembly name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-4000">
              <paramref name="typeName" /> does not include the assembly name.</span>
          </span>
          <span data-ttu-id="96bec-4001">-or-  <paramref name="throwIfNotFound" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax; for example, "MyType[,\*,]".</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-4001">-or-  <paramref name="throwIfNotFound" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax; for example, "MyType[,\*,]".</span>
          </span>
          <span data-ttu-id="96bec-4002">-or-  <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-4002">-or-  <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span>
          </span>
          <span data-ttu-id="96bec-4003">-or-  <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-4003">-or-  <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span>
          </span>
          <span data-ttu-id="96bec-4004">-or-  <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-4004">-or-  <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="96bec-4005">
            <paramref name="throwIfNotFound" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-4005">
              <paramref name="throwIfNotFound" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="96bec-4006">The assembly or one of its dependencies was found, but could not be loaded.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-4006">The assembly or one of its dependencies was found, but could not be loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="96bec-4007">The assembly or one of its dependencies is not valid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-4007">The assembly or one of its dependencies is not valid.</span>
          </span>
          <span data-ttu-id="96bec-4008">-or-  The assembly was compiled with a later version of the common language runtime than the version that is currently loaded.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-4008">-or-  The assembly was compiled with a later version of the common language runtime than the version that is currently loaded.</span>
          </span>
        </exception>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.TypeLoadException" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
        <altmember cref="M:System.Reflection.Assembly.GetAssembly(System.Type)" />
        <altmember cref="M:System.Reflection.Assembly.GetType(System.String)" />
        <altmember cref="T:System.Reflection.AssemblyName" />
      </Docs>
    </Member>
    <Member MemberName="StructLayoutAttribute">
      <MemberSignature Language="C#" Value="public virtual System.Runtime.InteropServices.StructLayoutAttribute StructLayoutAttribute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.InteropServices.StructLayoutAttribute StructLayoutAttribute" />
      <MemberSignature Language="DocId" Value="P:System.Type.StructLayoutAttribute" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property StructLayoutAttribute As StructLayoutAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Runtime::InteropServices::StructLayoutAttribute ^ StructLayoutAttribute { System::Runtime::InteropServices::StructLayoutAttribute ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StructLayoutAttribute : System.Runtime.InteropServices.StructLayoutAttribute" Usage="System.Type.StructLayoutAttribute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.StructLayoutAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-4009">Gets a <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> that describes the layout of the current type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-4009">Gets a <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> that describes the layout of the current type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-4010">Ruft ein <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> ab, das den allgemeinen Layoutaufbau des aktuellen Typs beschreibt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-4010">Gets a <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> that describes the gross layout features of the current type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-4011"><xref:System.Runtime.InteropServices.StructLayoutAttribute> wird nicht zurückgegeben werden, indem die <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="96bec-4011"><xref:System.Runtime.InteropServices.StructLayoutAttribute> is not returned by the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method.</span></span> <span data-ttu-id="96bec-4012">Verwenden Sie stattdessen diese Eigenschaft, um sie zu erhalten.</span><span class="sxs-lookup"><span data-stu-id="96bec-4012">Instead, use this property to get it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-4013">Das folgende Codebeispiel definiert zunächst eine Klasse, einer Struktur und eine Struktur mit speziellen Layoutattribute (Strukturen innerhalb der Klasse geschachtelt sind).</span><span class="sxs-lookup"><span data-stu-id="96bec-4013">The following code example first defines a class, a structure, and a structure with special layout attributes (the structures are nested within the class).</span></span> <span data-ttu-id="96bec-4014">Anschließend wird die <xref:System.Type.StructLayoutAttribute%2A> -Eigenschaft zum Abrufen einer <xref:System.Runtime.InteropServices.StructLayoutAttribute> für jeden Typ, und zeigt die Eigenschaften der Attribute.</span><span class="sxs-lookup"><span data-stu-id="96bec-4014">The example then uses the <xref:System.Type.StructLayoutAttribute%2A> property to obtain a <xref:System.Runtime.InteropServices.StructLayoutAttribute> for each type, and displays the properties of the attributes.</span></span>  
  
 [!code-cpp[Type.StructLayoutAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type.StructLayoutAttribute/CPP/Type.StructLayoutAttribute.cpp#1)]
 [!code-csharp[Type.StructLayoutAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type.StructLayoutAttribute/CS/source.cs#1)]
 [!code-vb[Type.StructLayoutAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type.StructLayoutAttribute/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="96bec-4015">The invoked method is not supported in the base class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-4015">The invoked method is not supported in the base class.</span>
          </span>
        </exception>
        <altmember cref="T:System.Runtime.InteropServices.StructLayoutAttribute" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Type.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _Type.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Type.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.System#Runtime#InteropServices#_Type#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _Type.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Type.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_Type::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid">
          <span data-ttu-id="96bec-4016">Reserved for future use.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-4016">Reserved for future use.</span>
          </span>
          <span data-ttu-id="96bec-4017">Must be IID_NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-4017">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="rgszNames">
          <span data-ttu-id="96bec-4018">Passed-in array of names to be mapped.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-4018">Passed-in array of names to be mapped.</span>
          </span>
        </param>
        <param name="cNames">
          <span data-ttu-id="96bec-4019">Count of the names to be mapped.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-4019">Count of the names to be mapped.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="96bec-4020">The locale context in which to interpret the names.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-4020">The locale context in which to interpret the names.</span>
          </span>
        </param>
        <param name="rgDispId">
          <span data-ttu-id="96bec-4021">Caller-allocated array which receives the IDs corresponding to the names.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-4021">Caller-allocated array which receives the IDs corresponding to the names.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-4022">Maps a set of names to a corresponding set of dispatch identifiers.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-4022">Maps a set of names to a corresponding set of dispatch identifiers.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-4023">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-4023">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="96bec-4024">Weitere Informationen zu `IDispatch::GetIDsOfNames`, finden Sie unter der MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="96bec-4024">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="96bec-4025">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-4025">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Type.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _Type.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Type.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.System#Runtime#InteropServices#_Type#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _Type.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Type.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_Type::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo">
          <span data-ttu-id="96bec-4026">The type information to return.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-4026">The type information to return.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="96bec-4027">The locale identifier for the type information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-4027">The locale identifier for the type information.</span>
          </span>
        </param>
        <param name="ppTInfo">
          <span data-ttu-id="96bec-4028">A pointer to the requested type information object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-4028">A pointer to the requested type information object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-4029">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-4029">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-4030">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-4030">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="96bec-4031">Weitere Informationen zu `IDispatch::GetTypeInfo`, finden Sie unter der MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="96bec-4031">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="96bec-4032">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-4032">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Type.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _Type.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Type.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.System#Runtime#InteropServices#_Type#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _Type.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Type.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_Type::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo">
          <span data-ttu-id="96bec-4033">Points to a location that receives the number of type information interfaces provided by the object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-4033">Points to a location that receives the number of type information interfaces provided by the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-4034">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-4034">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-4035">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-4035">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="96bec-4036">Weitere Informationen zu `IDispatch::GetTypeInfoCount`, finden Sie unter der MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="96bec-4036">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="96bec-4037">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-4037">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Type.Invoke">
      <MemberSignature Language="C#" Value="void _Type.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Type.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.System#Runtime#InteropServices#_Type#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _Type.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Type.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_Type::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember">
          <span data-ttu-id="96bec-4038">Identifies the member.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-4038">Identifies the member.</span>
          </span>
        </param>
        <param name="riid">
          <span data-ttu-id="96bec-4039">Reserved for future use.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-4039">Reserved for future use.</span>
          </span>
          <span data-ttu-id="96bec-4040">Must be IID_NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-4040">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="96bec-4041">The locale context in which to interpret arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-4041">The locale context in which to interpret arguments.</span>
          </span>
        </param>
        <param name="wFlags">
          <span data-ttu-id="96bec-4042">Flags describing the context of the call.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-4042">Flags describing the context of the call.</span>
          </span>
        </param>
        <param name="pDispParams">
          <span data-ttu-id="96bec-4043">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-4043">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span>
          </span>
        </param>
        <param name="pVarResult">
          <span data-ttu-id="96bec-4044">Pointer to the location where the result is to be stored.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-4044">Pointer to the location where the result is to be stored.</span>
          </span>
        </param>
        <param name="pExcepInfo">
          <span data-ttu-id="96bec-4045">Pointer to a structure that contains exception information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-4045">Pointer to a structure that contains exception information.</span>
          </span>
        </param>
        <param name="puArgErr">
          <span data-ttu-id="96bec-4046">The index of the first argument that has an error.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-4046">The index of the first argument that has an error.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="96bec-4047">Provides access to properties and methods exposed by an object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-4047">Provides access to properties and methods exposed by an object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-4048">Diese Methode ist für den Zugriff auf verwaltete Klassen von nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden.</span><span class="sxs-lookup"><span data-stu-id="96bec-4048">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="96bec-4049">Weitere Informationen zu `IDispatch::Invoke`, finden Sie unter der MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="96bec-4049">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="96bec-4050">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-4050">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="type.ToString " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.ToString</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="96bec-4051">Returns a <see langword="String" /> representing the name of the current <see langword="Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-4051">Returns a <see langword="String" /> representing the name of the current <see langword="Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="96bec-4052">A <see cref="T:System.String" /> representing the name of the current <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-4052">A <see cref="T:System.String" /> representing the name of the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-4053">Diese Methode gibt den vollqualifizierten Namespace der common Language Runtime und den Namen für alle primitiven Typen.</span><span class="sxs-lookup"><span data-stu-id="96bec-4053">This method returns the fully qualified common language runtime namespace and name for all primitive types.</span></span> <span data-ttu-id="96bec-4054">Z. B. die C#-Anweisung, `(long)0.Type().ToString()` "System. Int64" anstelle von "Int64" zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="96bec-4054">For example, the C# instruction, `(long)0.Type().ToString()` returns "System.Int64" instead of merely "Int64".</span></span>  
  
 <span data-ttu-id="96bec-4055">Wenn die aktuelle <xref:System.Type> stellt einen generischen Typ, der den Typ und seiner Typargumente durch Namespace und durch den geschachtelten Typ, aber nicht von der Assembly gekennzeichnet sind.</span><span class="sxs-lookup"><span data-stu-id="96bec-4055">If the current <xref:System.Type> represents a generic type, the type and its type arguments are qualified by namespace and by nested type, but not by assembly.</span></span> <span data-ttu-id="96bec-4056">Wenn die aktuelle <xref:System.Type> stellt ein Typparameter in der Definition eines generischen Typs oder generische Methode, diese Methode gibt den nicht qualifizierten Namen des Typparameters zurück.</span><span class="sxs-lookup"><span data-stu-id="96bec-4056">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method returns the unqualified name of the type parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-4057">Im folgenden Beispiel wird veranschaulicht, eine Verwendung von der <xref:System.Type.Namespace%2A> und <xref:System.Type.Module%2A> Eigenschaften und die `ToString` -Methode der <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="96bec-4057">This following example demonstrates a use of the <xref:System.Type.Namespace%2A> and <xref:System.Type.Module%2A> properties and the `ToString` method of <xref:System.Type>.</span></span>  
  
 [!code-cpp[Type_ToString#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_ToString/CPP/type_tostring.cpp#1)]
 [!code-csharp[Type_ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_ToString/CS/type_tostring.cs#1)]
 [!code-vb[Type_ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_ToString/VB/type_tostring.vb#1)]  
  
 <span data-ttu-id="96bec-4058">Im folgenden Beispiel wird die Zeichenfolgen, die zurückgegeben werden, indem die <xref:System.Type.ToString%2A> Methode und die `Name`, <xref:System.Type.FullName%2A>, und <xref:System.Type.AssemblyQualifiedName%2A> Eigenschaften.</span><span class="sxs-lookup"><span data-stu-id="96bec-4058">The following example compares the strings returned by the <xref:System.Type.ToString%2A> method and the `Name`, <xref:System.Type.FullName%2A>, and <xref:System.Type.AssemblyQualifiedName%2A> properties.</span></span>  
  
 [!code-csharp[System.Type.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.tostring/cs/fullname1.cs#1)]
 [!code-vb[System.Type.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.tostring/vb/fullname1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="TypeHandle">
      <MemberSignature Language="C#" Value="public virtual RuntimeTypeHandle TypeHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.RuntimeTypeHandle TypeHandle" />
      <MemberSignature Language="DocId" Value="P:System.Type.TypeHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property TypeHandle As RuntimeTypeHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property RuntimeTypeHandle TypeHandle { RuntimeTypeHandle get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeHandle : RuntimeTypeHandle" Usage="System.Type.TypeHandle" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.TypeHandle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeTypeHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-4059">Gets the handle for the current <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-4059">Gets the handle for the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-4060">Das Handle für den aktuellen <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-4060">The handle for the current <see cref="T:System.Type" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-4061">`TypeHandle` Kapselt einen Zeiger auf eine interne Datenstruktur, die den Typ darstellt.</span><span class="sxs-lookup"><span data-stu-id="96bec-4061">`TypeHandle` encapsulates a pointer to an internal data structure that represents the type.</span></span> <span data-ttu-id="96bec-4062">Dieses Handle ist während der Prozesslebensdauer eindeutig.</span><span class="sxs-lookup"><span data-stu-id="96bec-4062">This handle is unique during the process lifetime.</span></span> <span data-ttu-id="96bec-4063">Das Handle ist gültig, nur in der Anwendungsdomäne, in der sie abgerufen wurden.</span><span class="sxs-lookup"><span data-stu-id="96bec-4063">The handle is valid only in the application domain in which it was obtained.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96bec-4064">Im folgenden Beispiel gibt das Handle des entsprechenden Typs zurück, und übergibt das Handle für eine Methode, die den Typ aus dem Handle abgerufen und angezeigt.</span><span class="sxs-lookup"><span data-stu-id="96bec-4064">The following example returns the handle of the corresponding type and passes the handle to a method that gets the type from the handle and displays it.</span></span>  
  
 [!code-cpp[Type_TypeHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_TypeHandle/CPP/type_typehandle.cpp#1)]
 [!code-csharp[Type_TypeHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_TypeHandle/CS/type_typehandle.cs#1)]
 [!code-vb[Type_TypeHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_TypeHandle/VB/type_typehandle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="96bec-4065">The .NET Compact Framework does not currently support this property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-4065">The .NET Compact Framework does not currently support this property.</span>
          </span>
        </exception>
        <altmember cref="T:System.RuntimeTypeHandle" />
        <altmember cref="M:System.Type.GetTypeHandle(System.Object)" />
        <altmember cref="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)" />
      </Docs>
    </Member>
    <Member MemberName="TypeInitializer">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo TypeInitializer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ConstructorInfo TypeInitializer" />
      <MemberSignature Language="DocId" Value="P:System.Type.TypeInitializer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeInitializer As ConstructorInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::ConstructorInfo ^ TypeInitializer { System::Reflection::ConstructorInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeInitializer : System.Reflection.ConstructorInfo" Usage="System.Type.TypeInitializer" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.TypeInitializer</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-4066">Gets the initializer for the type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-4066">Gets the initializer for the type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-4067">Ein Objekt, das den Namen des Klassenkonstruktors von <see cref="T:System.Type" /> enthält.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-4067">An object that contains the name of the class constructor for the <see cref="T:System.Type" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96bec-4068">Klasseninitialisierer stehen auch über die <xref:System.Type.FindMembers%2A> -Methode, oder durch Überladungen der <xref:System.Type.GetMember%2A>, <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetConstructor%2A>, und <xref:System.Type.GetConstructors%2A> Methoden, die <xref:System.Reflection.BindingFlags> als Parameter.</span><span class="sxs-lookup"><span data-stu-id="96bec-4068">Class initializers are also available through the <xref:System.Type.FindMembers%2A> method, or through overloads of the <xref:System.Type.GetMember%2A>, <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetConstructor%2A>, and <xref:System.Type.GetConstructors%2A> methods that take <xref:System.Reflection.BindingFlags> as a parameter.</span></span>  
  
 <span data-ttu-id="96bec-4069">Wenn die aktuelle <xref:System.Type> einen Typparameter in der Definition eines generischen Typs oder generische Methode darstellt, gibt diese Eigenschaft `null`.</span><span class="sxs-lookup"><span data-stu-id="96bec-4069">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
      </Docs>
    </Member>
    <Member MemberName="UnderlyingSystemType">
      <MemberSignature Language="C#" Value="public abstract Type UnderlyingSystemType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type UnderlyingSystemType" />
      <MemberSignature Language="DocId" Value="P:System.Type.UnderlyingSystemType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property UnderlyingSystemType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Type ^ UnderlyingSystemType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UnderlyingSystemType : Type" Usage="System.Type.UnderlyingSystemType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.UnderlyingSystemType</InterfaceMember>
        <InterfaceMember>P:System.Reflection.IReflect.UnderlyingSystemType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="96bec-4070">Indicates the type provided by the common language runtime that represents this type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-4070">Indicates the type provided by the common language runtime that represents this type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="96bec-4071">Der Systemtyp, der <see cref="T:System.Type" />zugrunde liegt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="96bec-4071">The underlying system type for the <see cref="T:System.Type" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Type.BaseType" />
      </Docs>
    </Member>
  </Members>
</Type>
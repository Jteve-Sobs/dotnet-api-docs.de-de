<Type Name="EnvironmentVariableTarget" FullName="System.EnvironmentVariableTarget">
  <Metadata><Meta Name="ms.openlocfilehash" Value="47c108ec243dabdaccd48212832911a11d7454d6" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75042686" /></Metadata><TypeSignature Language="C#" Value="public enum EnvironmentVariableTarget" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed EnvironmentVariableTarget extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.EnvironmentVariableTarget" />
  <TypeSignature Language="VB.NET" Value="Public Enum EnvironmentVariableTarget" />
  <TypeSignature Language="C++ CLI" Value="public enum class EnvironmentVariableTarget" />
  <TypeSignature Language="F#" Value="type EnvironmentVariableTarget = " />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Gibt den Speicherort an, an dem eine Umgebungsvariable in einer Set- oder Get-Operation gespeichert bzw. abgerufen wird.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks

Die <xref:System.EnvironmentVariableTarget>-Enumeration wird von bestimmten über Ladungen der Methoden <xref:System.Environment.SetEnvironmentVariable%2A?displayProperty=nameWithType>, <xref:System.Environment.GetEnvironmentVariable%2A?displayProperty=nameWithType>und <xref:System.Environment.GetEnvironmentVariables%2A?displayProperty=nameWithType> verwendet, um den Speicherort bzw. das Ziel anzugeben, in dem der Name und der Wert einer Umgebungsvariablen gespeichert oder abgerufen werden.  
  
Bei dem Ziel kann es sich um einen von dreispeicher Orten handeln: 
 
- Der Umgebungsblock, der dem aktuellen Prozess (`EnvironmentVariableTarget.Process`) zugeordnet ist.

  Der Benutzer erstellt die Umgebungsvariable in einem Set-Vorgang. Wenn der Prozess beendet wird, zerstört das Betriebssystem die Umgebungsvariable in diesem Prozess.

- Der Registrierungsschlüssel des Windows-Betriebssystems, der für die dem aktuellen Benutzer zugeordneten Umgebungsvariablen reserviert ist (`EnvironmentVariableTarget.User`).
 
  Wenn der Benutzer auf Windows-Systemen die Umgebungsvariable in einem Set-Vorgang erstellt, speichert das Betriebssystem die Umgebungsvariable in der Systemregistrierung, jedoch nicht im aktuellen Prozess. Wenn der Benutzer einen neuen Prozess startet, kopiert das Betriebssystem die Umgebungsvariable aus der Registrierung in diesen Prozess. Wenn der Prozess beendet wird, zerstört das Betriebssystem die Umgebungsvariable in diesem Prozess. Die Umgebungsvariable in der Registrierung bleibt jedoch erhalten, bis Sie vom Benutzerprogramm gesteuert oder mithilfe eines Betriebssystem Tools entfernt wird.  

  Bei UNIX-basierten Systemen hat der Versuch, eine Umgebungsvariable mit `EnvironmentVariable.User` zu erstellen, keine Auswirkung, und der Versuch, eine Umgebungsvariable mithilfe von `EnvironmentVariable.User` abzurufen, gibt `null` (in C#) oder `Nothing` (in Visual Basic) zurück.

- Der Registrierungsschlüssel, der für Umgebungsvariablen reserviert ist, die allen Benutzern auf dem lokalen Computer zugeordnet sind (`EnvironmentVariableTarget.Machine`). 

  Wenn ein Benutzer die Umgebungsvariable in einem Set-Vorgang erstellt, speichert das Betriebssystem die Umgebungsvariable in der Systemregistrierung, jedoch nicht im aktuellen Prozess. Wenn ein Benutzer auf dem lokalen Computer einen neuen Prozess startet, kopiert das Betriebssystem die Umgebungsvariable aus der Registrierung in diesen Prozess. Wenn der Prozess beendet wird, zerstört das Betriebssystem die Umgebungsvariable in diesem Prozess. Die Umgebungsvariable in der Registrierung bleibt jedoch erhalten, bis Sie von einem Benutzerprogramm gesteuert oder mithilfe eines Betriebssystem Tools entfernt wird.

  Bei UNIX-basierten Systemen hat der Versuch, eine Umgebungsvariable mit `EnvironmentVariable.Machine` zu erstellen, keine Auswirkung, und der Versuch, eine Umgebungsvariable mithilfe von `EnvironmentVariable.Machine` abzurufen, gibt `null` (in C#) oder `Nothing` (in Visual Basic) zurück.

## Examples  

Im folgenden Beispiel wird die <xref:System.EnvironmentVariableTarget>-Enumeration in Methoden verwendet, die Umgebungsvariablen erstellen, abrufen und löschen. Die Ausgabe des Beispiels zeigt, dass Environment mnent-Variablen, die ohne Angabe eines `EnvironmentVariableTarget` Werts gespeichert und abgerufen werden, im Umgebungsblock gespeichert werden, der dem aktuellen Prozess zugeordnet ist (`EnvironmentVariableTarget.Process`). Die Beispielausgabe von UNIX-basierten Systemen zeigt auch, dass Versuche, eine Umgebungsvariable mit einem anderen Wert als `EnvironmentVariableTarget.Process` zu definieren, ignoriert werden.    
  
[!code-csharp[environment.getsetenvar#1](~/samples/snippets/csharp/VS_Snippets_CLR/environment.getsetenvar/CS/gsev.cs)]
[!code-vb[environment.getsetenvar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/environment.getsetenvar/VB/gsev.vb)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Machine">
      <MemberSignature Language="C#" Value="Machine" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.EnvironmentVariableTarget Machine = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.EnvironmentVariableTarget.Machine" />
      <MemberSignature Language="VB.NET" Value="Machine" />
      <MemberSignature Language="C++ CLI" Value="Machine" />
      <MemberSignature Language="F#" Value="Machine = 2" Usage="System.EnvironmentVariableTarget.Machine" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EnvironmentVariableTarget</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Die Umgebungsvariable wird im <see langword="HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\Environment" />-Schlüssel in der Registrierung des Windows-Betriebssystems gespeichert bzw. daraus abgerufen. Dieser Wert sollte nur in .NET-Implementierungen verwendet werden, die auf Windows-Systemen ausgeführt werden.</summary>
      </Docs>
    </Member>
    <Member MemberName="Process">
      <MemberSignature Language="C#" Value="Process" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.EnvironmentVariableTarget Process = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.EnvironmentVariableTarget.Process" />
      <MemberSignature Language="VB.NET" Value="Process" />
      <MemberSignature Language="C++ CLI" Value="Process" />
      <MemberSignature Language="F#" Value="Process = 0" Usage="System.EnvironmentVariableTarget.Process" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EnvironmentVariableTarget</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Die Umgebungsvariable wird in dem Umgebungsblock gespeichert, der dem aktuellen Prozess zugeordnet ist, bzw. daraus abgerufen.</summary>
      </Docs>
    </Member>
    <Member MemberName="User">
      <MemberSignature Language="C#" Value="User" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.EnvironmentVariableTarget User = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.EnvironmentVariableTarget.User" />
      <MemberSignature Language="VB.NET" Value="User" />
      <MemberSignature Language="C++ CLI" Value="User" />
      <MemberSignature Language="F#" Value="User = 1" Usage="System.EnvironmentVariableTarget.User" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EnvironmentVariableTarget</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Die Umgebungsvariable wird im <see langword="HKEY_CURRENT_USER\Environment" />-Schlüssel in der Registrierung des Windows-Betriebssystems gespeichert bzw. daraus abgerufen. Dieser Wert sollte nur in .NET-Implementierungen verwendet werden, die auf Windows-Systemen ausgeführt werden.</summary>
      </Docs>
    </Member>
  </Members>
</Type>

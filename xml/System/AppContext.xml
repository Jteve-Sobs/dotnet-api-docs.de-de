<Type Name="AppContext" FullName="System.AppContext">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="22baeef40fafd807844df877ee179199629f82f1" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39909629" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class AppContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AppContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.AppContext" />
  <TypeSignature Language="VB.NET" Value="Public Class AppContext" />
  <TypeSignature Language="C++ CLI" Value="public ref class AppContext abstract sealed" />
  <TypeSignature Language="F#" Value="type AppContext = class" />
  <AssemblyInfo>
    <AssemblyName>System.AppContext</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt Member zum Festlegen und Abrufen von Daten für einen Anwendungskontext bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.AppContext> Klasse ermöglicht Autoren von Bibliotheken, die ihren Benutzern einen einheitlichen abwahlmechanismus für neue Funktionalitäten bereitzustellen. Sie richtet einen lose gekoppelten Vertrag zwischen den Komponenten ein, um eine Anforderung zur Abwahl zu übermitteln. Diese Möglichkeit ist in der Regel wichtig, wenn vorhandene Funktionalitäten verändert werden. Im Gegensatz dazu existiert bereits eine implizite Auswahloption für neue Funktionalitäten.  
  
## <a name="appcontext-for-library-developers"></a>AppContext für Entwickler von Bibliotheken  
 Verwenden von Bibliotheken die <xref:System.AppContext> Klasse definieren und Bereitstellen von Anwendungskompatibilitäts-wechselt, während der Benutzer diese Optionen beeinflussen das Verhalten der Bibliothek festlegen können. Standardmäßig stellen Bibliotheken die neue Funktionalität bereit. Nur wenn die Option festgelegt ist, stellen sie die vorherige Funktionalität bereit.  Dadurch können Bibliotheken, um das neues Verhalten für eine vorhandene API bereitstellen, während Sie weiterhin Aufrufer zu unterstützen, die dem bisherigen Verhalten abhängen.  
  
### <a name="defining-the-switch-name"></a>Definieren den Namen des Switches  
 Die gängigste Methode zum Consumer Ihrer Bibliothek zum Deaktivieren einer Änderung des Verhaltens ermöglichen ist zum Definieren eines angegebenen Schalters.  Die `value` Element ist ein Name/Wert-Paar, das den Namen einer Option besteht und die zugehörige <xref:System.Boolean> Wert.  Standardmäßig die Option ist immer implizit `false`, bietet das neue Verhalten (und macht das neue Verhalten sich in der Standardeinstellung). Festlegen der Option auf `true` ermöglicht, die das Legacyverhalten bereitstellt. Explizites Festlegen der Option zum `false` bietet auch das neue Verhalten.  
  
 Jetzt ist es vorteilhaft, die ein konsistentes Format für die Switch-Namen verwenden, da sie eine formellen Vertrag, der von einer Bibliothek verfügbar gemacht werden können. Das folgende Beispiel zeigt zwei offensichtliche Formate.  
  
-   *Switch*.*namespace*.*switchname*  
  
-   *Switch*.*library*.*switchname*  
  
 Nach dem definieren und Dokumentieren Sie den Schalter können Aufrufer können sie mithilfe der Registrierungs durch Hinzufügen einer [ \<AppContextSwitchOverrides >](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md) Element der Konfigurationsdatei ihrer Anwendung oder durch Aufrufen der <xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> -Methode programmgesteuert. Finden Sie unter den [AppContext für Bibliotheksconsumer](#ForConsumers) Abschnitt, um weitere Informationen darüber, wie Aufrufer verwenden, und legen Sie den Wert der <xref:System.AppContext> Konfigurationsschalter.  
  
 Wenn die common Language Runtime eine Anwendung ausgeführt wird, wird automatisch der Registrierungs kompatibilitätseinstellungen liest und lädt die Anwendungskonfigurationsdatei zum Auffüllen der Anwendung <xref:System.AppContext> Instanz. Da die <xref:System.AppContext> Instanz wird entweder programmgesteuert vom Aufrufer oder von der Laufzeit aufgefüllt, Sie müssen keine keinen Aktionen wie ein Aufruf der <xref:System.AppContext.SetSwitch%2A> Methode, die zum Konfigurieren der <xref:System.AppContext> Instanz.  
  
### <a name="checking-the-setting"></a>Überprüfen die Einstellung  
 Sie können Sie überprüfen, ob ein Consumer den Wert des Switches und Act, die entsprechend durch den Aufruf deklariert hat die <xref:System.AppContext.TryGetSwitch%2A?displayProperty=nameWithType> Methode. Gibt die Methode zurück `true` Wenn die `switchName` Argument gefunden wird und wenn die Methode zurückgegeben, dessen `isEnabled` Argument gibt den Wert des Schalters.  Andernfalls gibt diese Methode `false` zurück.  
  
### <a name="an-example"></a>Ein Beispiel für  
 Das folgende Beispiel veranschaulicht die Verwendung der <xref:System.AppContext> Klasse, um den Kunden an, wählen Sie das ursprüngliche Verhalten einer Methode für die Bibliothek zu ermöglichen.   Folgendes ist Version 1.0 von einer Bibliothek namens `StringLibrary`. Definiert eine `SubstringStartsAt` Methode, die einen Ordinalvergleich, um zu bestimmen, die ab Index einer Teilzeichenfolge innerhalb einer größeren Zeichenfolge ausführt.  
  
 [!code-csharp[System.AppContext.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example4.cs#4)]
 [!code-vb[System.AppContext.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example4.vb#4)]  
  
 Im folgenden Beispiel wird dann die Bibliothek den Anfangsindex der Teilzeichenfolge "Archæ" in "Archaeologist" zu finden. Da die Methode einen Ordinalvergleich ausführt, nicht die Teilzeichenfolge nicht gefunden werden.  
  
 [!code-csharp[System.AppContext.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example4.cs#5)]
 [!code-vb[System.AppContext.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example4.vb#5)]  
  
 Version 2 der Bibliothek, ändert sich jedoch die `SubstringStartsAt` zu kulturabhängigen Vergleich zu verwendende Methode.  
  
 [!code-csharp[System.AppContext.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example6.cs#6)]
 [!code-vb[System.AppContext.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example6.vb#6)]  
  
 Wenn die app erneut kompiliert wird, für die neue Version der Bibliothek ausgeführt wird, meldet es jetzt, der die Teilzeichenfolge "Archæ" Index "4" in "Archaeologist" gefunden wird.  
  
 [!code-csharp[System.AppContext.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example6.cs#7)]
 [!code-vb[System.AppContext.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example6.vb#7)]  
  
 Diese Änderung kann verhindert werden, von den Anwendungen, die auf das ursprüngliche Verhalten abhängig, durch die Definition sind einer [ \<AppContextSwitchOverrides >](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md) wechseln. In diesem Fall heißt der Switch `StringLibrary.DoNotUseCultureSensitiveComparison`. Der Standardwert `false`, gibt an, dass die Bibliothek der Version 2.0 kulturabhängigen Vergleich durchführen soll. `true` Gibt an, dass die Bibliothek der Version 1.0 Ordinalvergleich ausführen soll.  Eine kleine Änderung des obigen Codes ermöglicht es Bibliothek, legen Sie die Umstellung auf die Art des Vergleichs zu bestimmen, die die Methode ausführt.  
  
 [!code-csharp[System.AppContext.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example8.cs#8)]
 [!code-vb[System.AppContext.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example8.vb#8)]  
  
 Wenn eine Anwendung kann die folgende Konfigurationsdatei verwenden, um das Versionsverhalten 1.0 wiederherzustellen.  
  
```xml  
  
<configuration>  
   <runtime>  
      <AppContextSwitchOverrides value="StringLibrary.DoNotUseCultureSensitiveComparison=true" />   
   </runtime>  
</configuration>  
  
```  
  
 Wenn die Anwendung mit der Konfigurationsdatei vorhanden ausgeführt wird, erzeugt es die folgende Ausgabe:  
  
```  
'archæ' not found in 'The archaeologist'  
```  
  
<a name="ForConsumers"></a>   
## <a name="appcontext-for-library-consumers"></a>AppContext für Consumer  
 Wenn Sie mit der Consumer einer Bibliothek, sind die <xref:System.AppContext> Klasse können Sie eine Bibliothek oder Bibliotheksmethode des abwahlmechanismus für neue Funktionen nutzen.   Bestimmte Schalter, die aktivieren oder deaktivieren ein neues Verhalten definieren, einzelne Methoden der Klassenbibliothek, die Sie aufrufen. Der Wert des Schalters ist ein boolescher Wert. Ist dies `false`, die normalerweise der Standardwert ist, wird das neue Verhalten aktiviert ist; wenn es sich handelt `true`, die das neue Verhalten ist deaktiviert und das Element verhält sich wie zuvor.  
  
 Sie können den Wert eines Schalters auf drei Arten festlegen:  
  
-   Durch Aufrufen der <xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> Methode im Code.  Die `switchName` Argument definiert den Namen des Switches, und die `isEnabled` Eigenschaft definiert den Wert des Schalters. Da <xref:System.AppContext> ist eine statische Klasse, ist es auf einer Basis pro Anwendungsdomäne verfügbar.  
  
     Aufrufen der <xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> hat Anwendungsbereich; d.h., sie wirkt sich auf nur die Anwendung.  
  
-   Durch das Hinzufügen einer `<AppContextSwitchOverrides>` Element der [ \<Runtime >](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) -Abschnitt Ihrer Datei "App.config". Der Switch verfügt über ein einzelnes Attribut, `value`, deren Wert ist eine Zeichenfolge, die ein Schlüssel/Wert-Paar, das mit den Namen des Switches und den Wert darstellt.  
  
     Um mehrere Switches zu definieren, trennen Sie jeden Schalter des Schlüssel-Wert-Paar in der [ \<AppContextSwitchOverrides >](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md) des Elements `value` Attribut mit einem Semikolon. In diesem Fall die `<AppContextSwitchOverrides>` Element weist das folgende Format:  
  
    ```xml  
    <AppContextSwitchOverrides value="switchName1=value1;switchName2=value2" />  
    ```  
  
     Mithilfe der `<AppContextSwitchOverrides>` -Element zum Definieren einer Konfigurationseinstellung ist Anwendungsbereich; d.h., sie wirkt sich auf nur die Anwendung.  

    > [!NOTE]    
    > Informationen auf den Switches, die von .NET Framework definiert werden, finden Sie unter den [ \<AppContextSwitchOverrides >-Element](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md).

-   Durch das Hinzufügen eines String-Wert, dessen Name der Name des Schalters ist, der `HKLM\SOFTWARE\Microsoft\.NETFramework\AppContext` -Schlüssel in der Registrierung. Muss sein Wert die Zeichenfolgendarstellung einer <xref:System.Boolean> , die analysiert werden kann, indem die <xref:System.Boolean.Parse%2A?displayProperty=nameWithType> -Methode, d. h., es muss "True", "true", "False" oder "false". Wenn die Runtime einen anderen Wert auftritt, wird den Schalter ignoriert.  
  
     Verwenden die Registrierung zum Definieren einer <xref:System.AppContext> Switch verfügt über die Computerebene, d. h., sie wirkt sich auf jede Anwendung, die auf dem Computer ausgeführt.  
  
 Wenn Sie den gleichen Switch auf mehrere Weise festlegen, ist die Reihenfolge zu bestimmen, welche Einstellung die anderen überschreibt:  
  
1.  Die programmgesteuerte Einstellung.  
  
2.  Die Einstellung in der Datei "App.config".  
  
3.  Die registrierungseinstellung.  
  
 Im folgenden finden Sie eine einfache Anwendung, die einen Datei-URI übergeben, die <xref:System.IO.Path.GetDirectoryName%2A?displayProperty=nameWithType> Methode.  Wenn unter .NET Framework 4.6 ausgeführt werden, sie löst eine <xref:System.ArgumentException> da `file://` ist nicht mehr ein gültiger Teil einen Dateipfad.  
  
 [!code-csharp[System.AppContext.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/ForConsumers1.cs#10)]
 [!code-vb[System.AppContext.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/ForConsumers1.vb#10)]  
  
 Um der Methode, vorherige Verhalten wiederherstellen, und die Ausnahme zu verhindern, können Sie Hinzufügen der `Switch.System.IO.UseLegacyPathHandling` wechseln Sie zur Konfigurationsdatei Anwendung für das Beispiel:  
  
```xml  
<configuration>  
    <runtime>  
        <AppContextSwitchOverrides value="Switch.System.IO.UseLegacyPathHandling=true" />    
    </runtime>  
</configuration>  
```  
## <a name="see-also"></a>Siehe auch
[AppContext-Schalter](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BaseDirectory">
      <MemberSignature Language="C#" Value="public static string BaseDirectory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string BaseDirectory" />
      <MemberSignature Language="DocId" Value="P:System.AppContext.BaseDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property BaseDirectory As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ BaseDirectory { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseDirectory : string" Usage="System.AppContext.BaseDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Pfadnamen des Basisverzeichnisses ab, das der Assemblyresolver für die Suche nach Assemblys verwendet.</summary>
        <value>Der Pfadname des Basisverzeichnisses, das der Assemblyresolver für die Suche nach Assemblys verwendet.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dies ist eine pro Anwendungsdomäneneigenschaft. Der Wert entspricht der <xref:System.AppDomain.BaseDirectory%2A?displayProperty=nameWithType> Eigenschaft des die aktuelle Anwendungsdomäne.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public static object GetData (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetData(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppContext.GetData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetData (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ GetData(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member GetData : string -&gt; obj" Usage="System.AppContext.GetData name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Der Name des Datenelements.</param>
        <summary>Gibt den Wert des benannten Datenelements zurück, das der aktuellen Anwendungsdomäne zugewiesen ist.</summary>
        <returns>Der Wert von <paramref name="name" />, wenn <paramref name="name" /> einen benannten Wert bezeichnet, andernfalls <see langword="null" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSwitch">
      <MemberSignature Language="C#" Value="public static void SetSwitch (string switchName, bool isEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetSwitch(string switchName, bool isEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppContext.SetSwitch(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetSwitch (switchName As String, isEnabled As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetSwitch(System::String ^ switchName, bool isEnabled);" />
      <MemberSignature Language="F#" Value="static member SetSwitch : string * bool -&gt; unit" Usage="System.AppContext.SetSwitch (switchName, isEnabled)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchName" Type="System.String" />
        <Parameter Name="isEnabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="switchName">Der Name des Schalters.</param>
        <param name="isEnabled">Der Wert des Schalters.</param>
        <summary>Legt den Wert eines Schalters fest.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.AppContext> Klasse ermöglicht Autoren von Bibliotheken, die ihren Benutzern einen einheitlichen abwahlmechanismus für neue Funktionalitäten bereitzustellen. Sie richtet einen lose gekoppelten Vertrag zwischen den Komponenten ein, um eine Anforderung zur Abwahl zu übermitteln. Diese Möglichkeit ist in der Regel wichtig, wenn vorhandene Funktionalitäten verändert werden. Im Gegensatz dazu existiert bereits eine implizite Auswahloption für neue Funktionalitäten.  
  
 Die <xref:System.AppContext.SetSwitch%2A> Methode wird aufgerufen, indem Sie eine Anwendung (oder eine Bibliothek), um den Wert einer Option deklarieren (Dies ist immer eine <xref:System.Boolean> Wert), die von einer abhängige Bibliothek definiert. Die Option ist immer implizit `false`, die das neue Verhalten bietet. Festlegen der Option auf `true` ermöglicht, die das Legacyverhalten bereitstellt. Explizites Festlegen der Option zum `false` bietet auch das neue Verhalten. Abhängige Bibliothek kann dann überprüfen Sie den Wert des Schalters durch Aufrufen der <xref:System.AppContext.TryGetSwitch%2A> Methode.  
  
> [!NOTE]
>  Jetzt ist es vorteilhaft, die ein konsistentes Format für die Switch-Namen verwenden, da sie eine formellen Vertrag, der von einer Bibliothek verfügbar gemacht werden können. Das folgende Beispiel zeigt zwei offensichtliche Formate.  
>   
>  -   *Switch*.*namespace*.*switchname*  
> -   *Switch*.*library*.*switchname*  
  
 Für Anwendungen auf .NET Framework, zusätzlich zu den Wert eines Schalters programmgesteuert festlegen können sie auch festgelegt werden:  
  
-   Durch Hinzufügen der Switch-Name und Wert, der die [ \<AppContextSwitchOverrides >](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md) Element in der [ \<Runtime >](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) Abschnitt der Konfigurationsdatei einer Anwendung. Folgendes definiert z. B. einen Switch namens `Libraries.FPLibrary.UseExactFloatingPointComparison` , dessen Wert `False`.  
  
    ```xml  
  
    <configuration>  
       <runtime>  
          <AppContextSwitchOverrides value="Libraries.FPLibrary.UseExactFloatingPointComparison=false" />   
       </runtime>  
    </configuration>  
  
    ```  
  
-   Durch das Hinzufügen eines String-Wert, dessen Name der Name des Schalters ist, der `HKLM\SOFTWARE\Microsoft\.NETFramework\AppContext` -Schlüssel in der Registrierung. Muss sein Wert die Zeichenfolgendarstellung einer <xref:System.Boolean> , die analysiert werden kann, indem die <xref:System.Boolean.Parse%2A?displayProperty=nameWithType> -Methode, d. h., es muss "True", "true", "False" oder "false".  
  
 Wenn `switchName` bereits vorhanden ist, wird der Wert von überschrieben, die `isEnabled` Argument.  D. h., der den letzten Aufruf der <xref:System.AppContext.SetSwitch%2A> Methode überschreibt den Wert, der definiert, in der Registrierung in einer app-Konfigurationsdatei oder durch frühere Aufrufe der <xref:System.AppContext.SetSwitch%2A> Methode.  
 
 ### <a name="appcontextsetswitch-and-net-core"></a>AppContext.SetSwitch und .NET Core

.NET Core unterstützt die programmgesteuerte Aufrufe mit dem <xref:System.AppContext.SetSwitch%2A> nur Methode. Die folgenden Schalter werden unterstützt:

|Schalter|Werte|Beschreibung |
|--|--|--|
|`System.Net.Http.useSocketsHttpHandler` |`true`|`false`|Bestimmt, ob allgemeine Netzwerk-APIs wie z. B. <xref:System.Net.Http.HttpClient> verwenden <xref:System.Net.Http.SocketsHttpHandler?displayProperty=nameWithType> (`true`) oder <xref:System.Net.Http.HttpClientHandler?displayProperty=nameWithType> (`false`).|   
  
## Examples  
 Die folgende Codezeile legt einen Switch mit dem Namen `Switch.AmazingLib.ThrowOnException` zu `true`, wodurch ein legacy-Verhalten. Die Bibliothek kann dann überprüfen Sie, ob ein Consumer Bibliothek den Wert des Schalters durch den Aufruf festgelegt hat die <xref:System.AppContext.TryGetSwitch%2A> Methode.  
  
 [!code-csharp[System.AppContext.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/TestValue1.cs#1)]
 [!code-vb[System.AppContext.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/TestValue1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="switchName" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="switchName" /> ist <see cref="F:System.String.Empty" />.</exception>
        <altmember cref="M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)" />
      </Docs>
    </Member>
    <Member MemberName="TargetFrameworkName">
      <MemberSignature Language="C#" Value="public static string TargetFrameworkName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string TargetFrameworkName" />
      <MemberSignature Language="DocId" Value="P:System.AppContext.TargetFrameworkName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property TargetFrameworkName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ TargetFrameworkName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TargetFrameworkName : string" Usage="System.AppContext.TargetFrameworkName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen der Frameworkversion ab, auf die die aktuelle Anwendung abzielt.</summary>
        <value>Der Name der Frameworkversion, auf die die aktuelle Anwendung abzielt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Name des Framework-Zielversion entspricht dem Wert, der die <xref:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName%2A?displayProperty=nameWithType> Eigenschaft. Eine Liste der Framework-Zielnamen für .NET Framework, finden Sie unter den [ &lt;SupportedRuntime&gt; Element](~/docs/framework/configure-apps/file-schema/startup/supportedruntime-element.md) Element.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Versioning.TargetFrameworkAttribute" />
        <altmember cref="P:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName" />
      </Docs>
    </Member>
    <Member MemberName="TryGetSwitch">
      <MemberSignature Language="C#" Value="public static bool TryGetSwitch (string switchName, out bool isEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetSwitch(string switchName, [out] bool&amp; isEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetSwitch (switchName As String, ByRef isEnabled As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryGetSwitch(System::String ^ switchName, [Runtime::InteropServices::Out] bool % isEnabled);" />
      <MemberSignature Language="F#" Value="static member TryGetSwitch : string *  -&gt; bool" Usage="System.AppContext.TryGetSwitch (switchName, isEnabled)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchName" Type="System.String" />
        <Parameter Name="isEnabled" Type="System.Boolean" RefType="out" />
      </Parameters>
      <Docs>
        <param name="switchName">Der Name des Schalters.</param>
        <param name="isEnabled">Wenn diese Methode zurückgibt, enthält sie den Wert von <c>switchName</c>, falls <c>switchName</c> gefunden wurde, oder <see langword="false" />, wenn <c>switchName</c> nicht gefunden wurde. Dieser Parameter wird nicht initialisiert übergeben.</param>
        <summary>Versucht, den Wert eines Schalters abzurufen.</summary>
        <returns>
          <see langword="true" />, wenn <paramref name="switchName" /> festgelegt wurde und das <paramref name="isEnabled" />-Argument den Wert des Schalters enthält, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.AppContext> Klasse ermöglicht Autoren von Bibliotheken, die ihren Benutzern einen einheitlichen abwahlmechanismus für neue Funktionalitäten bereitzustellen. Sie richtet einen lose gekoppelten Vertrag zwischen den Komponenten ein, um eine Anforderung zur Abwahl zu übermitteln. Diese Möglichkeit ist in der Regel wichtig, wenn vorhandene Funktionalitäten verändert werden. Im Gegensatz dazu existiert bereits eine implizite Auswahloption für neue Funktionalitäten.  
  
 Die common Language Runtime füllt automatisch die Switches zugewiesen ein <xref:System.AppContext> -Instanz durch Lesen der Registrierung und die Anwendungskonfigurationsdatei. Der Wert dieser Schalter kann dann überschrieben werden, und Switches der neuen hinzugefügt, durch den Aufruf der <xref:System.AppContext.SetSwitch%2A> Methode.  
  
 Eine Bibliothek Ruft die <xref:System.AppContext.TryGetSwitch%2A> Methode, um zu überprüfen, ob seine Verbrauchern den Wert des Schalters deklariert haben, und klicken Sie dann entsprechend darauf reagieren.  Wenn der Schalter nicht definiert ist, wird standardmäßig die neue Funktionen aktiviert... Wenn der Schalter definiert ist, und sein Wert ist `false`, die neue Funktionen ist ebenfalls aktiviert. Wenn der Wert `true`, das Legacyverhalten aktiviert ist.  
  
   
  
## Examples  
 Im folgenden Beispiel wird bestimmt, ob ein Consumer Bibliothek einen Switch mit dem Namen festgelegt wurde `Switch.AmazingLib.ThrowOnException`.  
  
 [!code-csharp[System.AppContext.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/TestValue1.cs#2)]
 [!code-vb[System.AppContext.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/TestValue1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="switchName" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="switchName" /> ist <see cref="F:System.String.Empty" />.</exception>
        <altmember cref="M:System.AppContext.SetSwitch(System.String,System.Boolean)" />
      </Docs>
    </Member>
  </Members>
</Type>
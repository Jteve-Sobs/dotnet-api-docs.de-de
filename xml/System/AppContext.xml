<Type Name="AppContext" FullName="System.AppContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0d4f5f0d6b502740f83a0e15db5389ba1660d94c" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86688872" /></Metadata><TypeSignature Language="C#" Value="public static class AppContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AppContext extends System.Object" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="DocId" Value="T:System.AppContext" />
  <TypeSignature Language="VB.NET" Value="Public Class AppContext" />
  <TypeSignature Language="C++ CLI" Value="public ref class AppContext abstract sealed" />
  <TypeSignature Language="F#" Value="type AppContext = class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed AppContext extends System.Object" FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2" />
  <AssemblyInfo>
    <AssemblyName>System.AppContext</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.AppContext" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.AppContext" FromVersion="4.2.0.0" To="System.Runtime" ToVersion="4.2.0.0" FrameworkAlternate="netcore-2.0" />
    <TypeForwarding From="System.AppContext" FromVersion="4.2.1.0" To="System.Runtime" ToVersion="4.2.1.0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
    <TypeForwarding From="System.AppContext" FromVersion="4.2.2.0" To="System.Runtime" ToVersion="4.2.2.0" FrameworkAlternate="netcore-3.1" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt Member zum Festlegen und Abrufen von Daten für einen Anwendungskontext bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks
 Mit der- <xref:System.AppContext> Klasse können Bibliotheks Schreiber einen einheitlichen Opt-Out-Mechanismus für neue Funktionen für Ihre Benutzer bereitstellen. Sie richtet einen lose gekoppelten Vertrag zwischen den Komponenten ein, um eine Anforderung zur Abwahl zu übermitteln. Diese Möglichkeit ist in der Regel wichtig, wenn vorhandene Funktionalitäten verändert werden. Im Gegensatz dazu existiert bereits eine implizite Auswahloption für neue Funktionalitäten.

## <a name="appcontext-for-library-developers"></a>AppContext für Bibliotheks Entwickler
 Bibliotheken verwenden die <xref:System.AppContext> -Klasse, um Kompatibilitäts Switches zu definieren und verfügbar zu machen, während Bibliotheks Benutzer diese Switches festlegen können, um das Verhalten der Bibliothek zu beeinflussen. Standardmäßig stellen Bibliotheken die neue Funktionalität bereit. Nur wenn die Option festgelegt ist, stellen sie die vorherige Funktionalität bereit.  Dadurch können Bibliotheken neues Verhalten für eine vorhandene API bereitstellen und gleichzeitig Aufrufer weiterhin unterstützen, die vom vorherigen Verhalten abhängen.

### <a name="defining-the-switch-name"></a>Definieren des switchnamens
 Die gängigste Methode, mit der Consumer Ihrer Bibliothek eine Änderung des Verhaltens ablehnen können, besteht darin, einen benannten Switch zu definieren.  Das zugehörige- `value` Element ist ein Name-Wert-Paar, das aus dem Namen eines Schalters und seinem <xref:System.Boolean> Wert besteht.  Standardmäßig ist der Switch immer implizit `false` , der das neue Verhalten bereitstellt (und das neue Verhalten standardmäßig aktiviert). Wenn Sie den Schalter auf festlegen `true` , wird dieser aktiviert, was das Legacy Verhalten bereitstellt. Wenn Sie den Schalter explizit auf festlegen, wird `false` auch das neue Verhalten bereitstellt.

 Die Verwendung eines konsistenten Formats für Switchnamen ist von Vorteil, da Sie ein formaler Vertrag sind, der von einer Bibliothek verfügbar gemacht wird. Das folgende Beispiel zeigt zwei offensichtliche Formate.

-   *Switch*.*namespace*.*switchname*

-   *Switch*.*library*.*switchname*

 Nachdem Sie den Switch definiert und dokumentiert haben, können Aufrufer ihn mithilfe der Registrierung, durch Hinzufügen eines  [\<AppContextSwitchOverrides>](/dotnet/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element) Elements zur Anwendungs Konfigurationsdatei oder durch Programm gesteuertes Aufrufen der-  <xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> Methode verwenden. Weitere Informationen zur Verwendung von Aufrufern und zum Festlegen des Werts von Konfigurations Schaltern finden Sie im Abschnitt [appContext for Library Consumers](#ForConsumers) <xref:System.AppContext> .

 Wenn das Common Language Runtime eine Anwendung ausführt, liest es automatisch die Kompatibilitäts Einstellungen der Registrierung und lädt die Anwendungs Konfigurationsdatei, um die Instanz der Anwendung aufzufüllen <xref:System.AppContext> . Da die <xref:System.AppContext> Instanz entweder Programm gesteuert vom Aufrufer oder von der Laufzeit aufgefüllt wird, müssen Sie keine Aktion ausführen, wie z. b. das Aufrufen der- <xref:System.AppContext.SetSwitch%2A> Methode, um die Instanz zu konfigurieren <xref:System.AppContext> .

### <a name="checking-the-setting"></a>Überprüfen der Einstellung
 Sie können dann überprüfen, ob ein Consumer den Wert des Schalters deklariert hat und ordnungsgemäß reagieren, indem Sie die- <xref:System.AppContext.TryGetSwitch%2A?displayProperty=nameWithType> Methode aufrufen. Die-Methode gibt zurück `true` , wenn das `switchName` -Argument gefunden wird, und wenn die-Methode zurückgibt, gibt das- `isEnabled` Argument den Wert des Schalters an.  Andernfalls gibt diese Methode `false` zurück.

### <a name="an-example"></a>Beispiel
 Im folgenden Beispiel wird die Verwendung der- <xref:System.AppContext> Klasse veranschaulicht, um dem Kunden zu ermöglichen, das ursprüngliche Verhalten einer Bibliotheks Methode auszuwählen.   Im folgenden finden Sie die Version 1,0 einer Bibliothek mit dem Namen `StringLibrary` . Es definiert eine `SubstringStartsAt` Methode, die einen Ordinalvergleich durchführt, um den Start Index einer Teil Zeichenfolge innerhalb einer größeren Zeichenfolge zu bestimmen.

 [!code-csharp[System.AppContext.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example4.cs#4)]
 [!code-vb[System.AppContext.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example4.vb#4)]

 Im folgenden Beispiel wird dann die Bibliothek verwendet, um den Start Index der Teil Zeichenfolge "archæ" in "The Archäologin" zu suchen. Da die Methode einen Ordinalvergleich durchführt, kann die Teil Zeichenfolge nicht gefunden werden.

 [!code-csharp[System.AppContext.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example4.cs#5)]
 [!code-vb[System.AppContext.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example4.vb#5)]

 In Version 2 der Bibliothek wird jedoch die-Methode so geändert, dass `SubstringStartsAt` Kultur abhängige Vergleiche verwendet werden.

 [!code-csharp[System.AppContext.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example6.cs#6)]
 [!code-vb[System.AppContext.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example6.vb#6)]

 Wenn die APP für die Ausführung mit der neuen Version der Bibliothek neu kompiliert wird, meldet Sie nun, dass sich die Teil Zeichenfolge "archæ" Unterindex 4 in "The Archäologin" befindet.

 [!code-csharp[System.AppContext.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example6.cs#7)]
 [!code-vb[System.AppContext.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example6.vb#7)]

 Diese Änderung kann verhindert werden, wenn die Anwendungen, die vom ursprünglichen Verhalten abhängen, durch Definieren eines [\<AppContextSwitchOverrides>](/dotnet/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element) Schalters unterbrochen werden. In diesem Fall wird der Schalter benannt `StringLibrary.DoNotUseCultureSensitiveComparison` . Der Standardwert, `false` , gibt an, dass die Bibliothek den Kultur abhängigen Vergleich der Version 2,0 durchführen soll. `true` Gibt an, dass die Bibliothek den Ordinalvergleich der Version 1,0 durchführen soll.  Eine geringfügige Änderung des vorangehenden Codes ermöglicht es dem Bibliotheksconsumer, den Schalter festzulegen, um die Art des Vergleichs zu bestimmen, den die Methode ausführt.

 [!code-csharp[System.AppContext.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example8.cs#8)]
 [!code-vb[System.AppContext.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example8.vb#8)]

 Wenn die Anwendung die folgende Konfigurationsdatei verwenden kann, um das Verhalten der Version 1,0 wiederherzustellen.

```xml

<configuration>
   <runtime>
      <AppContextSwitchOverrides value="StringLibrary.DoNotUseCultureSensitiveComparison=true" />
   </runtime>
</configuration>

```

 Wenn die Anwendung mit der Konfigurationsdatei ausgeführt wird, wird die folgende Ausgabe erzeugt:

```
'archæ' not found in 'The archaeologist'
```

<a name="ForConsumers"></a>
## <a name="appcontext-for-library-consumers"></a>AppContext für Bibliotheksconsumer
 Wenn Sie der Consumer einer Bibliothek sind, <xref:System.AppContext> können Sie mit der-Klasse den Opt-Out-Mechanismus einer Bibliothek oder Bibliothek Methode für neue Funktionen nutzen.   Einzelne Methoden der Klassenbibliothek, die Sie aufrufen, definieren bestimmte Switches, die ein neues Verhalten aktivieren oder deaktivieren. Der Wert des Schalters ist ein boolescher Wert. Wenn dies der Fall ist `false` , was in der Regel der Standardwert ist, wird das neue Verhalten aktiviert. ist dies der Fall `true` , wird das neue Verhalten deaktiviert, und der Member verhält sich wie zuvor.

 Sie können den Wert eines Schalters auf eine von vier weisen festlegen:

-   Durch Aufrufen der- <xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> Methode in Ihrem Code.  Das `switchName` -Argument definiert den Switchnamen, und die- `isEnabled` Eigenschaft definiert den Wert des Schalters. Da <xref:System.AppContext> eine statische Klasse ist, ist Sie pro Anwendungsdomäne verfügbar.

     Der Aufruf von weist den Anwendungsbereich auf, d <xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> . h. er wirkt sich nur auf die Anwendung aus.

-   Durch Hinzufügen eines `<AppContextSwitchOverrides>` Elements zum- [\<runtime>](/dotnet/framework/configure-apps/file-schema/runtime/runtime-element) Abschnitt Ihrer app.config Datei. Der Switch verfügt über ein einzelnes Attribut, `value` , dessen Wert eine Zeichenfolge ist, die ein Schlüssel-Wert-Paar darstellt, das sowohl den Namen des Schalters als auch seinen Wert enthält.

     Zum Definieren mehrerer Switches trennen Sie das Schlüssel-Wert-Paar jedes Switchs im [\<AppContextSwitchOverrides>](/dotnet/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element) Attribut des Elements `value` durch ein Semikolon. In diesem Fall hat das- `<AppContextSwitchOverrides>` Element das folgende Format:

    ```xml
    <AppContextSwitchOverrides value="switchName1=value1;switchName2=value2" />
    ```

     Die Verwendung des- `<AppContextSwitchOverrides>` Elements zum Definieren einer Konfigurationseinstellung hat einen Anwendungsbereich, d. h., Sie wirkt sich nur auf die Anwendung aus.

    > [!NOTE]
    > Informationen zu den von der .NET Framework definierten Switches finden Sie im- [ \<AppContextSwitchOverrides> Element](/dotnet/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element).

-   Durch Hinzufügen eines Zeichen folgen Werts, dessen Name der Name des Schalters zum `HKLM\SOFTWARE\Microsoft\.NETFramework\AppContext` Schlüssel in der Registrierung ist. Der Wert muss die Zeichen folgen Darstellung eines-Werts sein <xref:System.Boolean> , der von der-Methode analysiert werden kann, d <xref:System.Boolean.Parse%2A?displayProperty=nameWithType> . h., er muss "true", "true", "false" oder "false" sein. Wenn die Laufzeit einen anderen Wert erkennt, wird der Schalter ignoriert.

     Die Verwendung der Registrierung zum Definieren eines <xref:System.AppContext> Schalters weist einen Computerbereich auf, d. h., er wirkt sich auf jede auf dem Computer laufende Anwendung aus.

- Für ASP.NET-Anwendungen fügen Sie [\<Add>](/dotnet/framework/configure-apps/file-schema/appsettings/add-element-for-appsettings) dem- [\<appSettings>](/dotnet/framework/configure-apps/file-schema/appsettings/) Abschnitt der web.config Datei ein-Element hinzu. Zum Beispiel:

   ```xml
   <appSettings>
      <add key="AppContext.SetSwitch:switchName1" value="switchValue1" />
      <add key="AppContext.SetSwitch:switchName2" value="switchValue2" />
   </appSettings>
   ```

 Wenn Sie denselben Switch auf mehr als eine Art und Weise festlegen, ist die Rangfolge, die festlegt, welche Einstellung die anderen Einstellungen überschreibt, wie folgt:

1.  Die programmgesteuerte Einstellung.

2.  Die Einstellung in der APP-Konfigurationsdatei oder in der web.config Datei.

3.  Die Registrierungs Einstellung.

 Im folgenden finden Sie eine einfache Anwendung, die einen Datei-URI an die- <xref:System.IO.Path.GetDirectoryName%2A?displayProperty=nameWithType> Methode übergibt.  Wenn Sie unter dem .NET Framework 4,6 ausgeführt wird, wird eine ausgelöst, <xref:System.ArgumentException> da `file://` kein gültiger Teil eines Dateipfads mehr ist.

 [!code-csharp[System.AppContext.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/ForConsumers1.cs#10)]
 [!code-vb[System.AppContext.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/ForConsumers1.vb#10)]

 Um das vorherige Verhalten der Methode wiederherzustellen und die Ausnahme zu verhindern, können Sie den `Switch.System.IO.UseLegacyPathHandling` Schalter der Anwendungs Konfigurationsdatei für das Beispiel hinzufügen:

```xml
<configuration>
    <runtime>
        <AppContextSwitchOverrides value="Switch.System.IO.UseLegacyPathHandling=true" />
    </runtime>
</configuration>
```
## <a name="see-also"></a>Siehe auch
[AppContext-Schalter](/dotnet/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element)

 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/framework/configure-apps/file-schema/runtime/runtime-element">&lt;Runtime- &gt; Element</related>
    <related type="Article" href="/dotnet/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element">&lt;Appcontex\witchoverrides- &gt; Element</related>
  </Docs>
  <Members>
    <Member MemberName="BaseDirectory">
      <MemberSignature Language="C#" Value="public static string BaseDirectory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string BaseDirectory" />
      <MemberSignature Language="DocId" Value="P:System.AppContext.BaseDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property BaseDirectory As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ BaseDirectory { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseDirectory : string" Usage="System.AppContext.BaseDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Pfadnamen des Basisverzeichnisses ab, das der Assemblyresolver für die Suche nach Assemblys verwendet.</summary>
        <value>Der Pfadname des Basisverzeichnisses, das der Assemblyresolver für die Suche nach Assemblys verwendet.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Dies ist eine pro Anwendungs Domänen Eigenschaft. Der zugehörige Wert entspricht der- <xref:System.AppDomain.BaseDirectory%2A?displayProperty=nameWithType> Eigenschaft der aktuellen Anwendungsdomäne.

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public static object? GetData (string name);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetData(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppContext.GetData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetData (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ GetData(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member GetData : string -&gt; obj" Usage="System.AppContext.GetData name" />
      <MemberSignature Language="C#" Value="public static object GetData (string name);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="name">Der Name des Datenelements.</param>
        <summary>Gibt den Wert des benannten Datenelements zurück, das der aktuellen Anwendungsdomäne zugewiesen ist.</summary>
        <returns>Der Wert von <paramref name="name" />, wenn <paramref name="name" /> einen benannten Wert bezeichnet, andernfalls <see langword="null" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSwitch">
      <MemberSignature Language="C#" Value="public static void SetSwitch (string switchName, bool isEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetSwitch(string switchName, bool isEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppContext.SetSwitch(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetSwitch (switchName As String, isEnabled As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetSwitch(System::String ^ switchName, bool isEnabled);" />
      <MemberSignature Language="F#" Value="static member SetSwitch : string * bool -&gt; unit" Usage="System.AppContext.SetSwitch (switchName, isEnabled)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchName" Type="System.String" />
        <Parameter Name="isEnabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="switchName">Der Name des Schalters.</param>
        <param name="isEnabled">Der Wert des Schalters.</param>
        <summary>Legt den Wert eines Schalters fest.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Mit der- <xref:System.AppContext> Klasse können Bibliotheks Schreiber einen einheitlichen Opt-Out-Mechanismus für neue Funktionen für Ihre Benutzer bereitstellen. Sie richtet einen lose gekoppelten Vertrag zwischen den Komponenten ein, um eine Anforderung zur Abwahl zu übermitteln. Diese Möglichkeit ist in der Regel wichtig, wenn vorhandene Funktionalitäten verändert werden. Im Gegensatz dazu existiert bereits eine implizite Auswahloption für neue Funktionalitäten.

 Die- <xref:System.AppContext.SetSwitch%2A> Methode wird von einer Anwendung (oder einer Bibliothek) aufgerufen, um den Wert eines Schalters (der immer ein Wert ist) zu deklarieren <xref:System.Boolean> , den eine abhängige Bibliothek definiert. Der Switch ist immer implizit `false` , was das neue Verhalten bereitstellt. Wenn Sie den Schalter auf festlegen `true` , wird dieser aktiviert, was das Legacy Verhalten bereitstellt. Wenn Sie den Schalter explizit auf festlegen, wird `false` auch das neue Verhalten bereitstellt. Die abhängige Bibliothek kann dann den Wert des Schalters überprüfen, indem Sie die- <xref:System.AppContext.TryGetSwitch%2A> Methode aufrufen.

> [!NOTE]
> Die Verwendung eines konsistenten Formats für Switchnamen ist von Vorteil, da Sie ein formaler Vertrag sind, der von einer Bibliothek verfügbar gemacht wird. Das folgende Beispiel zeigt zwei offensichtliche Formate.
>
> -   *Switch*.*namespace*.*switchname*
> -   *Switch*.*library*.*switchname*

 Für Anwendungen, die auf dem .NET Framework ausgeführt werden, kann zusätzlich zum programmgesteuerten Festlegen des Werts eines Schalters auch festgelegt werden:

-   Durch Hinzufügen des switchnamens und des Werts zum- [\<AppContextSwitchOverrides>](/dotnet/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element) Element im- [\<runtime>](/dotnet/framework/configure-apps/file-schema/runtime/runtime-element) Abschnitt einer Anwendungs Konfigurationsdatei. Im folgenden Beispiel wird ein Switch mit dem Namen definiert, `Libraries.FPLibrary.UseExactFloatingPointComparison` dessen Wert ist `False` .

    ```xml

    <configuration>
       <runtime>
          <AppContextSwitchOverrides value="Libraries.FPLibrary.UseExactFloatingPointComparison=false" />
       </runtime>
    </configuration>

    ```

-   Durch Hinzufügen eines Zeichen folgen Werts, dessen Name der Name des Schalters zum `HKLM\SOFTWARE\Microsoft\.NETFramework\AppContext` Schlüssel in der Registrierung ist. Der Wert muss die Zeichen folgen Darstellung eines-Werts sein <xref:System.Boolean> , der von der-Methode analysiert werden kann, d <xref:System.Boolean.Parse%2A?displayProperty=nameWithType> . h., er muss "true", "true", "false" oder "false" sein.

 Wenn `switchName` bereits vorhanden ist, wird der Wert durch das-Argument überschrieben `isEnabled` .  Das heißt, der letzte Aufruf der- <xref:System.AppContext.SetSwitch%2A> Methode überschreibt den in der Registrierung definierten Wert, in einer APP-Konfigurationsdatei oder in vorherigen Aufrufen der- <xref:System.AppContext.SetSwitch%2A> Methode.

 ### <a name="appcontextsetswitch-and-net-core"></a>AppContext. *-Witch und .net Core

.Net Core unterstützt programmgesteuerte Aufrufe nur mit der- <xref:System.AppContext.SetSwitch%2A> Methode. Folgende Switches werden unterstützt:

|Schalter|Werte|Beschreibung|
|--|--|--|
|`System.Net.Http.SocketsHttpHandler.Http2Support`|`true` oder `false`|Gibt an, ob die Unterstützung für das http/2-Protokoll aktiviert ( `true` ) oder deaktiviert ( `false` ) ist. Der Standardwert ist deaktiviert. Der Switch muss vor der ersten Verwendung von festgelegt werden <xref:System.Net.Http.HttpClient> . Verfügbar ab .net Core 3,0 Preview 4.|
|`System.Net.Http.UseSocketsHttpHandler` |`true` oder `false`|Bestimmt, ob Netzwerk-APIs auf allgemeiner Ebene, wie z <xref:System.Net.Http.HttpClient> <xref:System.Net.Http.SocketsHttpHandler?displayProperty=nameWithType> . b `true` . () oder <xref:System.Net.Http.HttpClientHandler?displayProperty=nameWithType> () verwenden `false` .|

## Examples
 Mit der folgenden Codezeile wird ein Switch namens `Switch.AmazingLib.ThrowOnException` auf festgelegt `true` , der ein Legacy Verhalten ermöglicht. Die Bibliothek kann dann überprüfen, ob ein bibliothekconsumer den Wert des Schalters durch Aufrufen der-Methode festgelegt hat <xref:System.AppContext.TryGetSwitch%2A> .

 [!code-csharp[System.AppContext.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/TestValue1.cs#1)]
 [!code-vb[System.AppContext.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/TestValue1.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="switchName" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="switchName" /> ist <see cref="F:System.String.Empty" />.</exception>
        <altmember cref="M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)" />
      </Docs>
    </Member>
    <Member MemberName="TargetFrameworkName">
      <MemberSignature Language="C#" Value="public static string? TargetFrameworkName { get; }" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".property string TargetFrameworkName" />
      <MemberSignature Language="DocId" Value="P:System.AppContext.TargetFrameworkName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property TargetFrameworkName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ TargetFrameworkName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TargetFrameworkName : string" Usage="System.AppContext.TargetFrameworkName" />
      <MemberSignature Language="C#" Value="public static string TargetFrameworkName { get; }" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen der Frameworkversion ab, auf die die aktuelle Anwendung abzielt.</summary>
        <value>Der Name der Frameworkversion, auf die die aktuelle Anwendung abzielt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Der Name der Ziel Framework-Version entspricht dem Wert der- <xref:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName%2A?displayProperty=nameWithType> Eigenschaft. Eine Liste der Ziel Framework-Namen für die .NET Framework finden Sie unter [ &lt; supportedRuntime- &gt; Element](/dotnet/framework/configure-apps/file-schema/startup/supportedruntime-element) Element.

 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Versioning.TargetFrameworkAttribute" />
        <altmember cref="P:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName" />
      </Docs>
    </Member>
    <Member MemberName="TryGetSwitch">
      <MemberSignature Language="C#" Value="public static bool TryGetSwitch (string switchName, out bool isEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetSwitch(string switchName, [out] bool&amp; isEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetSwitch (switchName As String, ByRef isEnabled As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryGetSwitch(System::String ^ switchName, [Runtime::InteropServices::Out] bool % isEnabled);" />
      <MemberSignature Language="F#" Value="static member TryGetSwitch : string * bool -&gt; bool" Usage="System.AppContext.TryGetSwitch (switchName, isEnabled)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchName" Type="System.String" />
        <Parameter Name="isEnabled" Type="System.Boolean" RefType="out" />
      </Parameters>
      <Docs>
        <param name="switchName">Der Name des Schalters.</param>
        <param name="isEnabled">Wenn diese Methode zurückkehrt, enthält sie den Wert <paramref name="switchName" />, wenn <paramref name="switchName" /> gefunden wurde, oder <see langword="false" />, wenn <paramref name="switchName" /> nicht gefunden wurde. Dieser Parameter wird nicht initialisiert übergeben.</param>
        <summary>Versucht, den Wert eines Schalters abzurufen.</summary>
        <returns><see langword="true" />, wenn <paramref name="switchName" /> festgelegt wurde und das <paramref name="isEnabled" />-Argument den Wert des Schalters enthält, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Mit der- <xref:System.AppContext> Klasse können Bibliotheks Schreiber einen einheitlichen Opt-Out-Mechanismus für neue Funktionen für Ihre Benutzer bereitstellen. Sie richtet einen lose gekoppelten Vertrag zwischen den Komponenten ein, um eine Anforderung zur Abwahl zu übermitteln. Diese Möglichkeit ist in der Regel wichtig, wenn vorhandene Funktionalitäten verändert werden. Im Gegensatz dazu existiert bereits eine implizite Auswahloption für neue Funktionalitäten.

 Der Common Language Runtime füllt die einer-Instanz zugewiesenen Switches automatisch auf, <xref:System.AppContext> indem die Registrierung und die Konfigurationsdatei der Anwendung gelesen werden. Der Wert dieser Switches kann dann überschrieben werden, und neue Switches werden durch Aufrufen der-Methode hinzugefügt <xref:System.AppContext.SetSwitch%2A> .

 Eine Bibliothek ruft die- <xref:System.AppContext.TryGetSwitch%2A> Methode auf, um zu überprüfen, ob Ihre Consumer den Wert des-Schalters deklariert haben, und anschließend entsprechend zu agieren.  Wenn der Schalter nicht definiert ist, ist die neue Funktionalität standardmäßig aktiviert. Wenn der Schalter definiert ist und sein Wert ist `false` , wird die neue Funktionalität ebenfalls aktiviert. Wenn der Wert ist `true` , ist das Legacy Verhalten aktiviert.



## Examples
 Im folgenden Beispiel wird bestimmt, ob ein bibliothekconsumer einen Switch mit dem Namen festgelegt hat `Switch.AmazingLib.ThrowOnException` .

 [!code-csharp[System.AppContext.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/TestValue1.cs#2)]
 [!code-vb[System.AppContext.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/TestValue1.vb#2)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="switchName" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="switchName" /> ist <see cref="F:System.String.Empty" />.</exception>
        <altmember cref="M:System.AppContext.SetSwitch(System.String,System.Boolean)" />
      </Docs>
    </Member>
  </Members>
</Type>

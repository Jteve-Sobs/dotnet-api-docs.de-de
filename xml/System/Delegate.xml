<Type Name="Delegate" FullName="System.Delegate">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e35be2982c9170daa6b375909f5309bb3c1d4b5e" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83942211" /></Metadata><TypeSignature Language="C#" Value="public abstract class Delegate" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Delegate extends System.Object" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="DocId" Value="T:System.Delegate" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Delegate" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="C++ CLI" Value="public ref class Delegate abstract" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="F#" Value="type Delegate = class" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="C#" Value="public abstract class Delegate : ICloneable, System.Runtime.Serialization.ISerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Delegate extends System.Object implements class System.ICloneable, class System.Runtime.Serialization.ISerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Delegate&#xA;Implements ICloneable, ISerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class Delegate abstract : ICloneable, System::Runtime::Serialization::ISerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type Delegate = class&#xA;    interface ICloneable&#xA;    interface ISerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Delegate extends System.Object implements class System.ICloneable, class System.Runtime.Serialization.ISerializable" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi abstract serializable beforefieldinit Delegate extends System.Object implements class System.ICloneable, class System.Runtime.Serialization.ISerializable" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDual)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="e90b4-101">Stellt einen Delegaten dar, der eine Datenstruktur ist, die auf eine statische Methode oder eine Klasseninstanz und eine Instanzmethode dieser Klasse verweist.</span><span class="sxs-lookup"><span data-stu-id="e90b4-101">Represents a delegate, which is a data structure that refers to a static method or to a class instance and an instance method of that class.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e90b4-102">Die <xref:System.Delegate>-Klasse ist die Basisklasse für Delegattypen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-102">The <xref:System.Delegate> class is the base class for delegate types.</span></span> <span data-ttu-id="e90b4-103">Allerdings können nur das System und die Compiler explizit von der <xref:System.Delegate> Klasse oder von der <xref:System.MulticastDelegate> Klasse abgeleitet werden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-103">However, only the system and compilers can derive explicitly from the <xref:System.Delegate> class or from the <xref:System.MulticastDelegate> class.</span></span> <span data-ttu-id="e90b4-104">Es ist auch nicht zulässig, einen neuen Typ von einem Delegattyp abzuleiten.</span><span class="sxs-lookup"><span data-stu-id="e90b4-104">It is also not permissible to derive a new type from a delegate type.</span></span> <span data-ttu-id="e90b4-105">Die <xref:System.Delegate> Klasse wird nicht als Delegattyp betrachtet. Es handelt sich um eine Klasse, mit der Delegattypen abgeleitet werden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-105">The <xref:System.Delegate> class is not considered a delegate type; it is a class used to derive delegate types.</span></span>  
  
 <span data-ttu-id="e90b4-106">In den meisten Sprachen wird ein `delegate`-Schlüsselwort implementiert, und Compiler für diese Sprachen können von der <xref:System.MulticastDelegate>-Klasse abgeleitet werden. Daher sollten Benutzer das `delegate`-Schlüsselwort verwenden, das von der Sprache bereitgestellt wird.</span><span class="sxs-lookup"><span data-stu-id="e90b4-106">Most languages implement a `delegate` keyword, and compilers for those languages are able to derive from the <xref:System.MulticastDelegate> class; therefore, users should use the `delegate` keyword provided by the language.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e90b4-107">Der Common Language Runtime stellt eine `Invoke` Methode für jeden Delegattyp mit der gleichen Signatur wie der Delegat bereit.</span><span class="sxs-lookup"><span data-stu-id="e90b4-107">The common language runtime provides an `Invoke` method for each delegate type, with the same signature as the delegate.</span></span> <span data-ttu-id="e90b4-108">Sie müssen diese Methode nicht explizit aus, Visual Basic oder C#Visual C++aufzurufen, da Sie von den Compilern automatisch aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="e90b4-108">You do not have to call this method explicitly from C#, Visual Basic, or Visual C++, because the compilers call it automatically.</span></span> <span data-ttu-id="e90b4-109">Die `Invoke`-Methode ist hilfreich bei der [Reflektion](/dotnet/framework/reflection-and-codedom/reflection) , wenn Sie die Signatur des Delegattyps suchen möchten.</span><span class="sxs-lookup"><span data-stu-id="e90b4-109">The `Invoke` method is useful in [reflection](/dotnet/framework/reflection-and-codedom/reflection) when you want to find the signature of the delegate type.</span></span>  
  
 <span data-ttu-id="e90b4-110">Der Common Language Runtime stellt jeden Delegattyp mit `BeginInvoke` und `EndInvoke` Methoden bereit, um den asynchronen Aufruf des Delegaten zu aktivieren.</span><span class="sxs-lookup"><span data-stu-id="e90b4-110">The common language runtime provides each delegate type with `BeginInvoke` and `EndInvoke` methods, to enable asynchronous invocation of the delegate.</span></span> <span data-ttu-id="e90b4-111">Weitere Informationen zu diesen Methoden finden Sie unter [Asynchrones Aufrufen synchroner Methoden](/dotnet/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously).</span><span class="sxs-lookup"><span data-stu-id="e90b4-111">For more information about these methods, see [Calling Synchronous Methods Asynchronously](/dotnet/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously).</span></span>  
  
 <span data-ttu-id="e90b4-112">Durch die Deklaration eines Delegattyps wird ein Vertrag festgelegt, der die Signatur von mindestens einer Methode angibt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-112">The declaration of a delegate type establishes a contract that specifies the signature of one or more methods.</span></span> <span data-ttu-id="e90b4-113">Ein Delegat ist eine Instanz eines Delegattyps, der über Verweise auf verfügt:</span><span class="sxs-lookup"><span data-stu-id="e90b4-113">A delegate is an instance of a delegate type that has references to:</span></span>  
  
-   <span data-ttu-id="e90b4-114">Eine Instanzmethode eines Typs und ein Zielobjekt, das diesem Typ zugeordnet werden kann.</span><span class="sxs-lookup"><span data-stu-id="e90b4-114">An instance method of a type and a target object assignable to that type.</span></span>  
  
-   <span data-ttu-id="e90b4-115">Eine Instanzmethode eines Typs, wobei der ausgeblendete `this`-Parameter in der Liste formaler Parameter verfügbar gemacht wird.</span><span class="sxs-lookup"><span data-stu-id="e90b4-115">An instance method of a type, with the hidden `this` parameter exposed in the formal parameter list.</span></span> <span data-ttu-id="e90b4-116">Der Delegat wird als Open instance-Delegat bezeichnet.</span><span class="sxs-lookup"><span data-stu-id="e90b4-116">The delegate is said to be an open instance delegate.</span></span>  
  
-   <span data-ttu-id="e90b4-117">Eine statische Methode.</span><span class="sxs-lookup"><span data-stu-id="e90b4-117">A static method.</span></span>  
  
-   <span data-ttu-id="e90b4-118">Eine statische Methode und ein Zielobjekt, die dem ersten Parameter der Methode zugewiesen werden können.</span><span class="sxs-lookup"><span data-stu-id="e90b4-118">A static method and a target object assignable to the first parameter of the method.</span></span> <span data-ttu-id="e90b4-119">Der Delegat wird als erstes Argument geschlossen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-119">The delegate is said to be closed over its first argument.</span></span>  
  
 <span data-ttu-id="e90b4-120">Weitere Informationen zur Bindung von Delegaten finden Sie in der <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29>-Methoden Überladung.</span><span class="sxs-lookup"><span data-stu-id="e90b4-120">For more information on delegate binding, see the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e90b4-121">In den .NET Framework Versionen 1,0 und 1,1 kann ein Delegat nur dann eine Methode darstellen, wenn die Signatur der Methode exakt mit der Signatur übereinstimmt, die durch den Delegattyp angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="e90b4-121">In the .NET Framework versions 1.0 and 1.1, a delegate can represent a method only if the signature of the method exactly matches the signature specified by the delegate type.</span></span> <span data-ttu-id="e90b4-122">Folglich werden nur das erste und dritte Zeichen in der vorangehenden Liste unterstützt, und das erste Aufzählungs Zeichen erfordert eine genaue Typübereinstimmung.</span><span class="sxs-lookup"><span data-stu-id="e90b4-122">Thus, only the first and third bullets in the preceding list are supported, and the first bullet requires an exact type match.</span></span>  
  
 <span data-ttu-id="e90b4-123">Wenn ein Delegat eine Instanzmethode darstellt, die über seinem ersten Argument geschlossen wurde (der häufigste Fall), speichert der Delegat einen Verweis auf den Einstiegspunkt der Methode und einen Verweis auf ein Objekt, das als Ziel bezeichnet wird. es handelt sich um einen Typ, der dem Typ zugewiesen werden kann, der die Methode definiert hat.</span><span class="sxs-lookup"><span data-stu-id="e90b4-123">When a delegate represents an instance method closed over its first argument (the most common case), the delegate stores a reference to the method's entry point and a reference to an object, called the target, which is of a type assignable to the type that defined the method.</span></span> <span data-ttu-id="e90b4-124">Wenn ein Delegat eine Open instance-Methode darstellt, wird ein Verweis auf den Einstiegspunkt der Methode gespeichert.</span><span class="sxs-lookup"><span data-stu-id="e90b4-124">When a delegate represents an open instance method, it stores a reference to the method's entry point.</span></span> <span data-ttu-id="e90b4-125">Die Delegatsignatur muss den ausgeblendeten `this`-Parameter in der formalen Parameterliste enthalten. in diesem Fall hat der Delegat keinen Verweis auf ein Zielobjekt, und ein Zielobjekt muss bereitgestellt werden, wenn der Delegat aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="e90b4-125">The delegate signature must include the hidden `this` parameter in its formal parameter list; in this case, the delegate does not have a reference to a target object, and a target object must be supplied when the delegate is invoked.</span></span>  
  
 <span data-ttu-id="e90b4-126">Wenn ein Delegat eine statische Methode darstellt, speichert der Delegat einen Verweis auf den Einstiegspunkt der Methode.</span><span class="sxs-lookup"><span data-stu-id="e90b4-126">When a delegate represents a static method, the delegate stores a reference to the method's entry point.</span></span> <span data-ttu-id="e90b4-127">Wenn ein Delegat eine statische Methode darstellt, die über seinem ersten Argument geschlossen wurde, speichert der Delegat einen Verweis auf den Einstiegspunkt der Methode und einen Verweis auf ein Zielobjekt, das dem Typ des ersten Arguments der Methode zugewiesen werden kann.</span><span class="sxs-lookup"><span data-stu-id="e90b4-127">When a delegate represents a static method closed over its first argument, the delegate stores a reference to the method's entry point and a reference to a target object assignable to the type of the method's first argument.</span></span> <span data-ttu-id="e90b4-128">Wenn der Delegat aufgerufen wird, empfängt das erste Argument der statischen Methode das Zielobjekt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-128">When the delegate is invoked, the first argument of the static method receives the target object.</span></span>  
  
 <span data-ttu-id="e90b4-129">Die Aufruf Liste eines Delegaten ist eine geordnete Gruppe von Delegaten, in der jedes Element der Liste genau eine der Methoden aufruft, die durch den Delegaten dargestellt werden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-129">The invocation list of a delegate is an ordered set of delegates in which each element of the list invokes exactly one of the methods represented by the delegate.</span></span> <span data-ttu-id="e90b4-130">Eine Aufruf Liste kann doppelte Methoden enthalten.</span><span class="sxs-lookup"><span data-stu-id="e90b4-130">An invocation list can contain duplicate methods.</span></span> <span data-ttu-id="e90b4-131">Bei einem Aufruf werden Methoden in der Reihenfolge aufgerufen, in der Sie in der Aufruf Liste angezeigt werden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-131">During an invocation, methods are invoked in the order in which they appear in the invocation list.</span></span> <span data-ttu-id="e90b4-132">Ein Delegat versucht, jede Methode in der Aufruf Liste aufzurufen. Duplikate werden einmal für jedes Mal aufgerufen, wenn Sie in der Aufruf Liste angezeigt werden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-132">A delegate attempts to invoke every method in its invocation list; duplicates are invoked once for each time they appear in the invocation list.</span></span> <span data-ttu-id="e90b4-133">Delegaten sind unveränderlich. nach der Erstellung wird die Aufruf Liste eines Delegaten nicht geändert.</span><span class="sxs-lookup"><span data-stu-id="e90b4-133">Delegates are immutable; once created, the invocation list of a delegate does not change.</span></span>  
  
 <span data-ttu-id="e90b4-134">Delegaten werden als Multicast oder kombinierbar bezeichnet, da ein Delegat eine oder mehrere Methoden aufrufen kann und in Kombination von Vorgängen verwendet werden kann.</span><span class="sxs-lookup"><span data-stu-id="e90b4-134">Delegates are referred to as multicast, or combinable, because a delegate can invoke one or more methods and can be used in combining operations.</span></span>  
  
 <span data-ttu-id="e90b4-135">Beim Kombinieren von Vorgängen, z. b. <xref:System.Delegate.Combine%2A> und <xref:System.Delegate.Remove%2A>, werden vorhandene Delegaten nicht geändert.</span><span class="sxs-lookup"><span data-stu-id="e90b4-135">Combining operations, such as <xref:System.Delegate.Combine%2A> and <xref:System.Delegate.Remove%2A>, do not alter existing delegates.</span></span> <span data-ttu-id="e90b4-136">Stattdessen gibt ein solcher Vorgang einen neuen Delegaten zurück, der die Ergebnisse des Vorgangs, einen unveränderten Delegaten oder `null`enthält.</span><span class="sxs-lookup"><span data-stu-id="e90b4-136">Instead, such an operation returns a new delegate that contains the results of the operation, an unchanged delegate, or `null`.</span></span> <span data-ttu-id="e90b4-137">Ein Kombinations Vorgang gibt `null` zurück, wenn das Ergebnis des Vorgangs ein Delegat ist, der nicht auf mindestens eine Methode verweist.</span><span class="sxs-lookup"><span data-stu-id="e90b4-137">A combining operation returns `null` when the result of the operation is a delegate that does not reference at least one method.</span></span> <span data-ttu-id="e90b4-138">Ein kombinierter Vorgang gibt einen unveränderten Delegaten zurück, wenn der angeforderte Vorgang keine Auswirkung hat.</span><span class="sxs-lookup"><span data-stu-id="e90b4-138">A combining operation returns an unchanged delegate when the requested operation has no effect.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e90b4-139">Verwaltete Sprachen verwenden die Methoden <xref:System.Delegate.Combine%2A> und <xref:System.Delegate.Remove%2A>, um delegatvorgänge zu implementieren.</span><span class="sxs-lookup"><span data-stu-id="e90b4-139">Managed languages use the <xref:System.Delegate.Combine%2A> and <xref:System.Delegate.Remove%2A> methods to implement delegate operations.</span></span> <span data-ttu-id="e90b4-140">Beispiele hierfür sind die Anweisungen `AddHandler` und `RemoveHandler` in Visual Basic und die Operatoren + = und-= für Delegattypen in C#.</span><span class="sxs-lookup"><span data-stu-id="e90b4-140">Examples include the `AddHandler` and `RemoveHandler` statements in Visual Basic and the += and -= operators on delegate types in C#.</span></span>  
  
 <span data-ttu-id="e90b4-141">Beginnend mit dem [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]können generische Delegattypen über Variante Typparameter verfügen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-141">Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], generic delegate types can have variant type parameters.</span></span> <span data-ttu-id="e90b4-142">Kontra Variante Typparameter können als Parametertypen des Delegaten verwendet werden, und ein kovariant-Typparameter kann als Rückgabetyp verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-142">Contravariant type parameters can be used as parameter types of the delegate, and a covariant type parameter can be used as the return type.</span></span> <span data-ttu-id="e90b4-143">Diese Funktion ermöglicht es, dass generische Delegattypen, die aus der gleichen generischen Typdefinition erstellt werden, Zuweisungs kompatibel sind, wenn ihre Typargumente Verweis Typen mit einer Vererbungs Beziehung sind, wie in [Kovarianz und Kontra Varianz](/dotnet/standard/generics/covariance-and-contravariance)erläutert.</span><span class="sxs-lookup"><span data-stu-id="e90b4-143">This feature allows generic delegate types that are constructed from the same generic type definition to be assignment-compatible if their type arguments are reference types with an inheritance relationship, as explained in [Covariance and Contravariance](/dotnet/standard/generics/covariance-and-contravariance).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e90b4-144">Generische Delegaten, die aufgrund von Varianz Zuweisungs kompatibel sind, sind nicht notwendigerweise kombinierbar.</span><span class="sxs-lookup"><span data-stu-id="e90b4-144">Generic delegates that are assignment-compatible because of variance are not necessarily combinable.</span></span> <span data-ttu-id="e90b4-145">Damit die Typen kombinierbar sind, müssen Sie exakt übereinstimmen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-145">To be combinable, the types must match exactly.</span></span> <span data-ttu-id="e90b4-146">Nehmen wir beispielsweise an, dass eine Klasse mit dem Namen `Derived` von einer Klasse mit dem Namen `Base`abgeleitet ist.</span><span class="sxs-lookup"><span data-stu-id="e90b4-146">For example, suppose that a class named `Derived` is derived from a class named `Base`.</span></span> <span data-ttu-id="e90b4-147">Ein Delegat vom Typ `Action<Base>` (`Action(Of Base)` in Visual Basic) kann einer Variablen vom Typ `Action<Derived>`zugewiesen werden, die beiden Delegaten können jedoch nicht kombiniert werden, da die Typen nicht exakt übereinstimmen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-147">A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, but the two delegates cannot be combined because the types do not match exactly.</span></span>  
  
 <span data-ttu-id="e90b4-148">Wenn eine aufgerufene Methode eine Ausnahme auslöst, wird die Ausführung der Methode beendet, die Ausnahme wird an den Aufrufer des Delegaten zurückgegeben, und die verbleibenden Methoden in der Aufruf Liste werden nicht aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-148">If an invoked method throws an exception, the method stops executing, the exception is passed back to the caller of the delegate, and remaining methods in the invocation list are not invoked.</span></span> <span data-ttu-id="e90b4-149">Das Abfangen der Ausnahme im Aufrufer ändert dieses Verhalten nicht.</span><span class="sxs-lookup"><span data-stu-id="e90b4-149">Catching the exception in the caller does not alter this behavior.</span></span>  
  
 <span data-ttu-id="e90b4-150">Wenn die Signatur der von einem Delegaten aufgerufenen Methoden einen Rückgabewert enthält, gibt der Delegat den Rückgabewert des letzten Elements in der Aufruf Liste zurück.</span><span class="sxs-lookup"><span data-stu-id="e90b4-150">When the signature of the methods invoked by a delegate includes a return value, the delegate returns the return value of the last element in the invocation list.</span></span> <span data-ttu-id="e90b4-151">Wenn die Signatur einen Parameter enthält, der als Verweis übergeben wird, ist der endgültige Wert des Parameters das Ergebnis jeder Methode in der Aufruf Liste, die sequenziell ausgeführt wird und den Wert des Parameters aktualisiert.</span><span class="sxs-lookup"><span data-stu-id="e90b4-151">When the signature includes a parameter that is passed by reference, the final value of the parameter is the result of every method in the invocation list executing sequentially and updating the parameter's value.</span></span>  
  
 <span data-ttu-id="e90b4-152">Die nächstliegende Entsprechung eines Delegaten in C ist ein Funktionszeiger.</span><span class="sxs-lookup"><span data-stu-id="e90b4-152">The closest equivalent of a delegate in C is a function pointer.</span></span> <span data-ttu-id="e90b4-153">Ein Delegat kann eine statische Methode oder eine Instanzmethode darstellen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-153">A delegate can represent a static method or an instance method.</span></span> <span data-ttu-id="e90b4-154">Wenn der Delegat eine Instanzmethode darstellt, speichert der Delegat nicht nur einen Verweis auf den Einstiegspunkt der Methode, sondern auch einen Verweis auf die Klasseninstanz.</span><span class="sxs-lookup"><span data-stu-id="e90b4-154">When the delegate represents an instance method, the delegate stores not only a reference to the method's entry point, but also a reference to the class instance.</span></span> <span data-ttu-id="e90b4-155">Im Gegensatz zu Funktions Zeigern sind Delegaten objektorientiert und typsicher.</span><span class="sxs-lookup"><span data-stu-id="e90b4-155">Unlike function pointers, delegates are object oriented and type safe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e90b4-156">Im folgenden Beispiel wird gezeigt, wie Sie einen Delegaten mit dem Namen `myMethodDelegate`definieren.</span><span class="sxs-lookup"><span data-stu-id="e90b4-156">The following example shows how to define a delegate named `myMethodDelegate`.</span></span> <span data-ttu-id="e90b4-157">Instanzen dieses Delegaten werden für eine Instanzmethode und eine statische Methode der `mySampleClass` Klasse für das-Objekt erstellt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-157">Instances of this delegate are created for an instance method and a static method of the nested `mySampleClass` class.</span></span> <span data-ttu-id="e90b4-158">Der Delegat für die Instanzmethode erfordert eine Instanz von `mySampleClass`.</span><span class="sxs-lookup"><span data-stu-id="e90b4-158">The delegate for the instance method requires an instance of `mySampleClass`.</span></span> <span data-ttu-id="e90b4-159">Die `mySampleClass` Instanz wird in einer Variablen mit dem Namen `mySC`gespeichert.</span><span class="sxs-lookup"><span data-stu-id="e90b4-159">The `mySampleClass` instance is saved in a variable named `mySC`.</span></span>  
  
 [!code-cpp[Classic Delegate Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Delegate Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Delegate Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Delegate Example/CS/source.cs#1)]
 [!code-vb[Classic Delegate Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Delegate Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.MulticastDelegate" />
    <related type="Article" href="https://msdn.microsoft.com/library/41972034-92ed-450a-9664-ab93fcc6f1fb"><span data-ttu-id="e90b4-160">Asynchrones Aufrufen von synchronen Methoden</span><span class="sxs-lookup"><span data-stu-id="e90b4-160">Calling Synchronous Methods Asynchronously</span></span></related>
    <related type="Article" href="/dotnet/csharp/programming-guide/delegates/"><span data-ttu-id="e90b4-161">Delegaten (C#-Programmierhandbuch)</span><span class="sxs-lookup"><span data-stu-id="e90b4-161">Delegates (C# Programming Guide)</span></span></related>
    <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/delegates/"><span data-ttu-id="e90b4-162">Delegaten (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="e90b4-162">Delegates (Visual Basic)</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/1cdf3420-89c1-47c0-b796-aa984020e0f8"><span data-ttu-id="e90b4-163">Gewusst wie: Definieren und Verwenden von Delegaten (C++/CLI)</span><span class="sxs-lookup"><span data-stu-id="e90b4-163">How to: Define and Use Delegates (C++/CLI)</span></span></related>
    <related type="Article" href="/dotnet/standard/events/"><span data-ttu-id="e90b4-164">Behandeln und Auslösen von Ereignissen</span><span class="sxs-lookup"><span data-stu-id="e90b4-164">Handling and Raising Events</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e90b4-165">Initialisiert einen neuen Delegaten.</span><span class="sxs-lookup"><span data-stu-id="e90b4-165">Initializes a new delegate.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Delegate (object target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(object target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.#ctor(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (target As Object, method As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Delegate(System::Object ^ target, System::String ^ method);" />
      <MemberSignature Language="F#" Value="new Delegate : obj * string -&gt; Delegate" Usage="new System.Delegate (target, method)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="target" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="method" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="e90b4-166">Die Klasseninstanz, für die der Delegat <paramref name="method" /> aufruft.</span><span class="sxs-lookup"><span data-stu-id="e90b4-166">The class instance on which the delegate invokes <paramref name="method" />.</span></span></param>
        <param name="method"><span data-ttu-id="e90b4-167">Der Name der Instanzenmethode, die durch den Delegaten dargestellt wird.</span><span class="sxs-lookup"><span data-stu-id="e90b4-167">The name of the instance method that the delegate represents.</span></span></param>
        <summary><span data-ttu-id="e90b4-168">Initialisiert einen Delegaten, der die angegebene Instanzenmethode für die angegebene Klasseninstanz aufruft.</span><span class="sxs-lookup"><span data-stu-id="e90b4-168">Initializes a delegate that invokes the specified instance method on the specified class instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e90b4-169">Dieser Konstruktor kann nicht im Anwendungscode verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-169">This constructor cannot be used in application code.</span></span> <span data-ttu-id="e90b4-170">Um einen Delegaten durch Angabe des Namens einer Instanzmethode zu erstellen, verwenden Sie eine Überladung der <xref:System.Delegate.CreateDelegate%2A>-Methode, die einen Methodennamen und ein Zielobjekt angibt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-170">To create a delegate by specifying the name of an instance method, use an overload of the <xref:System.Delegate.CreateDelegate%2A> method that specifies a method name and a target object.</span></span> <span data-ttu-id="e90b4-171">Beispielsweise erstellt die <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%29>-Methoden Überladung einen Delegaten für eine Instanzmethode mit einem angegebenen Namen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-171">For example, the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%29> method overload creates a delegate for an instance method with a specified name.</span></span>  
  
 <span data-ttu-id="e90b4-172">Dieser Konstruktor erstellt nur Delegaten für Instanzmethoden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-172">This constructor creates delegates for instance methods only.</span></span> <span data-ttu-id="e90b4-173">Eine Instanzmethode ist eine Methode, die einer Instanz einer-Klasse zugeordnet ist. eine statische Methode ist eine Methode, die der Klasse selbst zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="e90b4-173">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e90b4-174"><paramref name="target" /> ist <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="e90b4-174"><paramref name="target" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e90b4-175">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-175">-or-</span></span> 
 <span data-ttu-id="e90b4-176"><paramref name="method" /> ist <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="e90b4-176"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e90b4-177">Beim Binden an die Zielmethode ist ein Fehler aufgetreten.</span><span class="sxs-lookup"><span data-stu-id="e90b4-177">There was an error binding to the target method.</span></span></exception>
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Delegate (Type target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Type target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.#ctor(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (target As Type, method As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Delegate(Type ^ target, System::String ^ method);" />
      <MemberSignature Language="F#" Value="new Delegate : Type * string -&gt; Delegate" Usage="new System.Delegate (target, method)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="target" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="method" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="e90b4-178">Der <see cref="T:System.Type" />, der die Klasse darstellt, die <paramref name="method" /> definiert.</span><span class="sxs-lookup"><span data-stu-id="e90b4-178">The <see cref="T:System.Type" /> representing the class that defines <paramref name="method" />.</span></span></param>
        <param name="method"><span data-ttu-id="e90b4-179">Der Name der statischen Methode, die durch den Delegaten dargestellt wird.</span><span class="sxs-lookup"><span data-stu-id="e90b4-179">The name of the static method that the delegate represents.</span></span></param>
        <summary><span data-ttu-id="e90b4-180">Initialisiert einen Delegaten, der die angegebene statische Methode der angegebenen Klasse aufruft.</span><span class="sxs-lookup"><span data-stu-id="e90b4-180">Initializes a delegate that invokes the specified static method from the specified class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e90b4-181">Dieser Konstruktor kann nicht im Anwendungscode verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-181">This constructor cannot be used in application code.</span></span> <span data-ttu-id="e90b4-182">Um einen Delegaten zu erstellen, indem Sie den Namen einer statischen Methode angeben, verwenden Sie eine Überladung der <xref:System.Delegate.CreateDelegate%2A>-Methode, die einen Methodennamen angibt, aber kein Zielobjekt angibt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-182">To create a delegate by specifying the name of a static method, use an overload of the <xref:System.Delegate.CreateDelegate%2A> method that specifies a method name but does not specify a target object.</span></span> <span data-ttu-id="e90b4-183">Beispielsweise erstellt die <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%29>-Methoden Überladung einen statischen Delegaten für eine Methode mit einem angegebenen Namen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-183">For example, the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%29> method overload creates a static delegate for a method with a specified name.</span></span>  
  
 <span data-ttu-id="e90b4-184">Dieser Konstruktor erstellt Delegaten nur für statische Methoden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-184">This constructor creates delegates for static methods only.</span></span> <span data-ttu-id="e90b4-185">Eine Instanzmethode ist eine Methode, die einer Instanz einer-Klasse zugeordnet ist. eine statische Methode ist eine Methode, die der Klasse selbst zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="e90b4-185">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e90b4-186"><paramref name="target" /> ist <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="e90b4-186"><paramref name="target" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e90b4-187">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-187">-or-</span></span> 
 <span data-ttu-id="e90b4-188"><paramref name="method" /> ist <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="e90b4-188"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e90b4-189"><paramref name="target" /> ist keine <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-189"><paramref name="target" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="e90b4-190">Siehe [Laufzeittypen in Reflektion](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="e90b4-190">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="e90b4-191">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-191">-or-</span></span> 
 <span data-ttu-id="e90b4-192"><paramref name="target" /> entspricht einem offenen generischen Typ.</span><span class="sxs-lookup"><span data-stu-id="e90b4-192"><paramref name="target" /> represents an open generic type.</span></span></exception>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="delegate.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e90b4-193">Erstellt eine flache Kopie des Delegaten.</span><span class="sxs-lookup"><span data-stu-id="e90b4-193">Creates a shallow copy of the delegate.</span></span></summary>
        <returns><span data-ttu-id="e90b4-194">Eine flache Kopie des Delegaten.</span><span class="sxs-lookup"><span data-stu-id="e90b4-194">A shallow copy of the delegate.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e90b4-195">Der Klon hat denselben <xref:System.Type>, dasselbe Ziel, dieselbe Methode und dieselbe Aufruf Liste wie der ursprüngliche Delegat.</span><span class="sxs-lookup"><span data-stu-id="e90b4-195">The clone has the same <xref:System.Type>, target, method, and invocation list as the original delegate.</span></span>  
  
 <span data-ttu-id="e90b4-196">Eine flache Kopie erstellt eine neue Instanz desselben Typs wie das ursprüngliche Objekt und kopiert dann die nicht statischen Felder des ursprünglichen Objekts.</span><span class="sxs-lookup"><span data-stu-id="e90b4-196">A shallow copy creates a new instance of the same type as the original object, and then copies the nonstatic fields of the original object.</span></span> <span data-ttu-id="e90b4-197">Wenn das Feld ein Werttyp ist, wird eine Bit-für-Bit-Kopie des Felds ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-197">If the field is a value type, a bit-by-bit copy of the field is performed.</span></span> <span data-ttu-id="e90b4-198">Wenn das Feld ein Referenztyp ist, wird der Verweis kopiert, aber das referenzierte Objekt ist nicht. Daher zeigen der Verweis im ursprünglichen Objekt und der Verweis im Klon auf dasselbe Objekt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-198">If the field is a reference type, the reference is copied but the referred object is not; therefore, the reference in the original object and the reference in the clone point to the same object.</span></span> <span data-ttu-id="e90b4-199">Im Gegensatz dazu dupliziert eine tiefe Kopie eines Objekts alle Elemente, die direkt oder indirekt durch die Felder im-Objekt referenziert werden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-199">In contrast, a deep copy of an object duplicates everything directly or indirectly referenced by the fields in the object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Combine">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e90b4-200">Verkettet die Aufruflisten der angegebenen Multicastdelegaten.</span><span class="sxs-lookup"><span data-stu-id="e90b4-200">Concatenates the invocation lists of the specified multicast (combinable) delegates.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static Delegate Combine (params Delegate[] delegates);" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate Combine(class System.Delegate[] delegates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Combine(System.Delegate[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Combine (ParamArray delegates As Delegate()) As Delegate" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ Combine(... cli::array &lt;Delegate ^&gt; ^ delegates);" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="static member Combine : Delegate[] -&gt; Delegate" Usage="System.Delegate.Combine delegates" />
      <MemberSignature Language="C#" Value="public static Delegate Combine (Delegate[] delegates);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Combine (delegates As Delegate()) As Delegate" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ Combine(cli::array &lt;Delegate ^&gt; ^ delegates);" FrameworkAlternate="netframework-1.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegates" Type="System.Delegate[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delegates"><span data-ttu-id="e90b4-201">Das zu kombinierende Array von Delegaten.</span><span class="sxs-lookup"><span data-stu-id="e90b4-201">The array of delegates to combine.</span></span></param>
        <summary><span data-ttu-id="e90b4-202">Verkettet die Aufruflisten eines Arrays von Delegaten.</span><span class="sxs-lookup"><span data-stu-id="e90b4-202">Concatenates the invocation lists of an array of delegates.</span></span></summary>
        <returns><span data-ttu-id="e90b4-203">Ein neuer Delegat mit einer Aufrufliste, die aus der Verkettung der Aufruflisten der Delegaten im <paramref name="delegates" />-Array besteht.</span><span class="sxs-lookup"><span data-stu-id="e90b4-203">A new delegate with an invocation list that concatenates the invocation lists of the delegates in the <paramref name="delegates" /> array.</span></span> <span data-ttu-id="e90b4-204">Gibt <see langword="null" /> zurück, wenn <paramref name="delegates" /><see langword="null" /> ist, <paramref name="delegates" /> 0 Elemente enthält oder jeder Eintrag in <paramref name="delegates" /><see langword="null" /> ist.</span><span class="sxs-lookup"><span data-stu-id="e90b4-204">Returns <see langword="null" /> if <paramref name="delegates" /> is <see langword="null" />, if <paramref name="delegates" /> contains zero elements, or if every entry in <paramref name="delegates" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e90b4-205">Wenn das `delegates` Array Einträge enthält, die `null`sind, werden diese Einträge ignoriert.</span><span class="sxs-lookup"><span data-stu-id="e90b4-205">If the `delegates` array contains entries that are `null`, those entries are ignored.</span></span>  
  
 <span data-ttu-id="e90b4-206">Die Aufruf Liste kann doppelte Einträge enthalten. Das heißt, Einträge, die auf dieselbe Methode für dasselbe Objekt verweisen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-206">The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e90b4-207">Generische Delegaten, die aufgrund von Varianz Zuweisungs kompatibel sind, sind nicht notwendigerweise kombinierbar.</span><span class="sxs-lookup"><span data-stu-id="e90b4-207">Generic delegates that are assignment-compatible because of variance are not necessarily combinable.</span></span> <span data-ttu-id="e90b4-208">Damit die Typen kombinierbar sind, müssen Sie exakt übereinstimmen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-208">To be combinable, the types must match exactly.</span></span> <span data-ttu-id="e90b4-209">Nehmen wir beispielsweise an, dass eine Klasse mit dem Namen `Derived` von einer Klasse mit dem Namen `Base`abgeleitet ist.</span><span class="sxs-lookup"><span data-stu-id="e90b4-209">For example, suppose that a class named `Derived` is derived from a class named `Base`.</span></span> <span data-ttu-id="e90b4-210">Ein Delegat vom Typ `Action<Base>` (`Action(Of Base)` in Visual Basic) kann einer Variablen vom Typ `Action<Derived>`zugewiesen werden, wie in [Kovarianz und Kontra Varianz](/dotnet/standard/generics/covariance-and-contravariance)erläutert, aber die beiden Delegaten können nicht kombiniert werden, da die Typen nicht exakt übereinstimmen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-210">A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, as explained in [Covariance and Contravariance](/dotnet/standard/generics/covariance-and-contravariance), but the two delegates cannot be combined because the types do not match exactly.</span></span>  
  
 <span data-ttu-id="e90b4-211"><xref:System.Delegate.Combine%2A> ist nützlich zum Erstellen von Ereignis Handlern, die bei jedem Auftreten eines Ereignisses mehrere Methoden aufzurufen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-211"><xref:System.Delegate.Combine%2A> is useful for creating event handlers that call multiple methods each time an event occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e90b4-212">Nicht alle Einträge ungleich null in <paramref name="delegates" /> sind Instanzen des gleichen Delegattyps.</span><span class="sxs-lookup"><span data-stu-id="e90b4-212">Not all the non-null entries in <paramref name="delegates" /> are instances of the same delegate type.</span></span></exception>
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="M:System.Delegate.CombineImpl(System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static Delegate Combine (Delegate a, Delegate b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate Combine(class System.Delegate a, class System.Delegate b) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Combine(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Combine (a As Delegate, b As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ Combine(Delegate ^ a, Delegate ^ b);" />
      <MemberSignature Language="F#" Value="static member Combine : Delegate * Delegate -&gt; Delegate" Usage="System.Delegate.Combine (a, b)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Delegate" />
        <Parameter Name="b" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="e90b4-213">Der Delegat, dessen Aufrufliste die erste Liste ist.</span><span class="sxs-lookup"><span data-stu-id="e90b4-213">The delegate whose invocation list comes first.</span></span></param>
        <param name="b"><span data-ttu-id="e90b4-214">Der Delegat, dessen Aufrufliste die letzte Liste ist.</span><span class="sxs-lookup"><span data-stu-id="e90b4-214">The delegate whose invocation list comes last.</span></span></param>
        <summary><span data-ttu-id="e90b4-215">Verkettet die Aufruflisten zweier Delegaten.</span><span class="sxs-lookup"><span data-stu-id="e90b4-215">Concatenates the invocation lists of two delegates.</span></span></summary>
        <returns><span data-ttu-id="e90b4-216">Eine neuer Delegat mit einer Aufrufliste, die aus der Verkettung der Aufruflisten von <paramref name="a" /> und <paramref name="b" /> in dieser Reihenfolge besteht.</span><span class="sxs-lookup"><span data-stu-id="e90b4-216">A new delegate with an invocation list that concatenates the invocation lists of <paramref name="a" /> and <paramref name="b" /> in that order.</span></span> <span data-ttu-id="e90b4-217">Gibt <paramref name="a" /> zurück, wenn <paramref name="b" /> gleich <see langword="null" /> ist, gibt <paramref name="b" /> zurück, wenn <paramref name="a" /> ein NULL-Verweis ist, und gibt einen NULL-Verweis zurück, wenn <paramref name="a" /> und <paramref name="b" /> NULL-Verweise sind.</span><span class="sxs-lookup"><span data-stu-id="e90b4-217">Returns <paramref name="a" /> if <paramref name="b" /> is <see langword="null" />, returns <paramref name="b" /> if <paramref name="a" /> is a null reference, and returns a null reference if both <paramref name="a" /> and <paramref name="b" /> are null references.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e90b4-218">Die Aufruf Liste kann doppelte Einträge enthalten. Das heißt, Einträge, die auf dieselbe Methode für dasselbe Objekt verweisen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-218">The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e90b4-219">Generische Delegaten, die aufgrund von Varianz Zuweisungs kompatibel sind, sind nicht notwendigerweise kombinierbar.</span><span class="sxs-lookup"><span data-stu-id="e90b4-219">Generic delegates that are assignment-compatible because of variance are not necessarily combinable.</span></span> <span data-ttu-id="e90b4-220">Damit die Typen kombinierbar sind, müssen Sie exakt übereinstimmen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-220">To be combinable, the types must match exactly.</span></span> <span data-ttu-id="e90b4-221">Nehmen wir beispielsweise an, dass eine Klasse mit dem Namen `Derived` von einer Klasse mit dem Namen `Base`abgeleitet ist.</span><span class="sxs-lookup"><span data-stu-id="e90b4-221">For example, suppose that a class named `Derived` is derived from a class named `Base`.</span></span> <span data-ttu-id="e90b4-222">Ein Delegat vom Typ `Action<Base>` (`Action(Of Base)` in Visual Basic) kann einer Variablen vom Typ `Action<Derived>`zugewiesen werden, wie in [Kovarianz und Kontra Varianz](/dotnet/standard/generics/covariance-and-contravariance)erläutert, aber die beiden Delegaten können nicht kombiniert werden, da die Typen nicht exakt übereinstimmen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-222">A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, as explained in [Covariance and Contravariance](/dotnet/standard/generics/covariance-and-contravariance), but the two delegates cannot be combined because the types do not match exactly.</span></span>  
  
 <span data-ttu-id="e90b4-223"><xref:System.Delegate.Combine%2A> ist nützlich zum Erstellen von Ereignis Handlern, die bei jedem Auftreten eines Ereignisses mehrere Methoden aufzurufen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-223"><xref:System.Delegate.Combine%2A> is useful for creating event handlers that call multiple methods each time an event occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e90b4-224">Sowohl <paramref name="a" /> als auch <paramref name="b" /> sind nicht gleich <see langword="null" />, und <paramref name="a" /> und <paramref name="b" /> sind keine Instanzen desselben Delegatentyps.</span><span class="sxs-lookup"><span data-stu-id="e90b4-224">Both <paramref name="a" /> and <paramref name="b" /> are not <see langword="null" />, and <paramref name="a" /> and <paramref name="b" /> are not instances of the same delegate type.</span></span></exception>
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="M:System.Delegate.CombineImpl(System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="CombineImpl">
      <MemberSignature Language="C#" Value="protected virtual Delegate CombineImpl (Delegate d);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Delegate CombineImpl(class System.Delegate d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CombineImpl(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CombineImpl (d As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual Delegate ^ CombineImpl(Delegate ^ d);" />
      <MemberSignature Language="F#" Value="abstract member CombineImpl : Delegate -&gt; Delegate&#xA;override this.CombineImpl : Delegate -&gt; Delegate" Usage="delegate.CombineImpl d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Delegate" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="e90b4-225">Der Multicastdelegat, dessen Aufrufliste an das Ende der Aufrufliste des aktuellen Multicastdelegaten angefügt werden soll.</span><span class="sxs-lookup"><span data-stu-id="e90b4-225">The multicast (combinable) delegate whose invocation list to append to the end of the invocation list of the current multicast (combinable) delegate.</span></span></param>
        <summary><span data-ttu-id="e90b4-226">Verkettet die Aufruflisten des angegebenen und des aktuellen Multicastdelegaten.</span><span class="sxs-lookup"><span data-stu-id="e90b4-226">Concatenates the invocation lists of the specified multicast (combinable) delegate and the current multicast (combinable) delegate.</span></span></summary>
        <returns><span data-ttu-id="e90b4-227">Eine neuer Multicastdelegat, dessen Aufrufliste aus der Verkettung der Aufrufliste des aktuellen Multicastdelegaten mit der Aufrufliste von <paramref name="d" /> besteht, oder der aktuelle Multicastdelegat, wenn <paramref name="d" /><see langword="null" /> ist.</span><span class="sxs-lookup"><span data-stu-id="e90b4-227">A new multicast (combinable) delegate with an invocation list that concatenates the invocation list of the current multicast (combinable) delegate and the invocation list of <paramref name="d" />, or the current multicast (combinable) delegate if <paramref name="d" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e90b4-228">Diese Methode gilt nur, wenn der aktuelle Delegat Multicast (combinable) ist.</span><span class="sxs-lookup"><span data-stu-id="e90b4-228">This method applies only if the current delegate is multicast (combinable).</span></span>  
  
 <span data-ttu-id="e90b4-229">Die aktuelle Implementierung löst einfach eine <xref:System.MulticastNotSupportedException>aus.</span><span class="sxs-lookup"><span data-stu-id="e90b4-229">The current implementation simply throws a <xref:System.MulticastNotSupportedException>.</span></span>  
  
 <span data-ttu-id="e90b4-230">Die Aufruf Liste kann doppelte Einträge enthalten. Das heißt, Einträge, die auf dieselbe Methode für dasselbe Objekt verweisen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-230">The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MulticastNotSupportedException"><span data-ttu-id="e90b4-231">Wird immer ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="e90b4-231">Always thrown.</span></span></exception>
        <altmember cref="M:System.Delegate.Combine(System.Delegate,System.Delegate)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateDelegate">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e90b4-232">Erstellt einen Delegaten vom angegebenen Typs.</span><span class="sxs-lookup"><span data-stu-id="e90b4-232">Creates a delegate of the specified type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateDelegate (type As Type, method As MethodInfo) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * System.Reflection.MethodInfo -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="e90b4-233">Der <see cref="T:System.Type" /> des zu erstellenden Delegaten.</span><span class="sxs-lookup"><span data-stu-id="e90b4-233">The <see cref="T:System.Type" /> of delegate to create.</span></span></param>
        <param name="method"><span data-ttu-id="e90b4-234">Die <see cref="T:System.Reflection.MethodInfo" />, die die statische Methode oder Instanzmethode beschreibt, die der Delegat darstellen soll.</span><span class="sxs-lookup"><span data-stu-id="e90b4-234">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span></span> <span data-ttu-id="e90b4-235">In .NET Framework, Version 1.0 und 1.1, werden nur statische Methoden unterstützt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-235">Only static methods are supported in the .NET Framework version 1.0 and 1.1.</span></span></param>
        <summary><span data-ttu-id="e90b4-236">Erstellt einen Delegaten vom angegebenen Typ, der die angegebene statische Methode darstellen soll.</span><span class="sxs-lookup"><span data-stu-id="e90b4-236">Creates a delegate of the specified type to represent the specified static method.</span></span></summary>
        <returns><span data-ttu-id="e90b4-237">Ein Delegat vom angegebenen Typ, der die angegebene statische Methode darstellen soll.</span><span class="sxs-lookup"><span data-stu-id="e90b4-237">A delegate of the specified type to represent the specified static method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e90b4-238">In den .NET Framework, Version 1,0 und 1,1, erstellt diese Methoden Überladung Delegaten nur für statische Methoden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-238">In the .NET Framework version 1.0 and 1.1, this method overload creates delegates for static methods only.</span></span> <span data-ttu-id="e90b4-239">In der .NET Framework Version 2,0 kann diese Methoden Überladung auch Open instance-Methoden Delegaten erstellen. Das heißt, Delegaten, die explizit das ausgeblendete erste Argument der Instanzmethoden bereitstellen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-239">In the .NET Framework version 2.0, this method overload also can create open instance method delegates; that is, delegates that explicitly supply the hidden first argument of instance methods.</span></span> <span data-ttu-id="e90b4-240">Eine ausführliche Erläuterung finden Sie in der allgemeineren <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29>-Methoden Überladung, die es Ihnen ermöglicht, alle Kombinationen offener oder geschlossener Delegaten für Instanzen oder statische Methoden zu erstellen und optional ein erstes Argument anzugeben.</span><span class="sxs-lookup"><span data-stu-id="e90b4-240">For a detailed explanation, see the more general <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> method overload, which allows you to create all combinations of open or closed delegates for instance or static methods, and optionally to specify a first argument.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e90b4-241">Diese Methoden Überladung sollte verwendet werden, wenn der Delegat nicht über das erste Argument geschlossen wird, da er in diesem Fall etwas schneller ist.</span><span class="sxs-lookup"><span data-stu-id="e90b4-241">This method overload should be used when the delegate is not closed over its first argument, because it is somewhat faster in that case.</span></span>  
  
 <span data-ttu-id="e90b4-242">Diese Methoden Überladung entspricht dem Aufrufen der <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29>-Methoden Überladung und der Angabe von `true` für `throwOnBindFailure`.</span><span class="sxs-lookup"><span data-stu-id="e90b4-242">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload and specifying `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e90b4-243">Beginnend mit dem [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]kann diese Methode verwendet werden, um auf nicht öffentliche Methoden zuzugreifen, wenn dem Aufrufer <xref:System.Security.Permissions.ReflectionPermission> mit dem <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>-Flag erteilt wurde, und wenn der Berechtigungs Satz der nicht öffentlichen Methoden auf den Berechtigungs Satz des Aufrufers oder eine Teilmenge des Aufrufers beschränkt ist.</span><span class="sxs-lookup"><span data-stu-id="e90b4-243">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="e90b4-244">(Siehe [Sicherheitsüberlegungen für die Reflektion](/dotnet/framework/reflection-and-codedom/security-considerations-for-reflection).)</span><span class="sxs-lookup"><span data-stu-id="e90b4-244">(See [Security Considerations for Reflection](/dotnet/framework/reflection-and-codedom/security-considerations-for-reflection).)</span></span>  
>   
>  <span data-ttu-id="e90b4-245">Zur Verwendung dieser Funktionen sollte die Anwendung für [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] oder höher ausgelegt sein.</span><span class="sxs-lookup"><span data-stu-id="e90b4-245">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
## <a name="compatible-parameter-types-and-return-type"></a><span data-ttu-id="e90b4-246">Kompatible Parameter Typen und Rückgabetyp</span><span class="sxs-lookup"><span data-stu-id="e90b4-246">Compatible Parameter Types and Return Type</span></span>  
 <span data-ttu-id="e90b4-247">In der .NET Framework Version 2,0 müssen die Parametertypen und der Rückgabetyp eines Delegaten, der mit dieser Methoden Überladung erstellt wurde, mit den Parametertypen und dem Rückgabetyp der Methode kompatibel sein, die der Delegat darstellt. die Typen müssen nicht exakt übereinstimmen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-247">In the .NET Framework version 2.0, the parameter types and return type of a delegate created using this method overload must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.</span></span> <span data-ttu-id="e90b4-248">Dies stellt eine Lockerung des Bindungs Verhaltens in den .NET Framework Version 1,0 und 1,1 dar, bei denen die Typen genau übereinstimmen müssen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-248">This represents a relaxation of the binding behavior in the .NET Framework version 1.0 and 1.1, where the types must match exactly.</span></span>  
  
 <span data-ttu-id="e90b4-249">Ein Parameter eines Delegaten ist mit dem entsprechenden Parameter einer Methode kompatibel, wenn der Typ des Delegatenparameters restriktiver ist als der Methodenparameter, da so gewährleistet ist, dass ein an den Delegaten übergebenes Argument problemlos an die Methode weitergeleitet werden kann.</span><span class="sxs-lookup"><span data-stu-id="e90b4-249">A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.</span></span>  
  
 <span data-ttu-id="e90b4-250">Ebenso ist der Rückgabetyp eines Delegaten kompatibel mit dem Rückgabetyp einer Methode, wenn der Rückgabetyp der Methode restriktiver ist als der Rückgabetyp des Delegaten, da so gewährleistet ist, dass der Rückgabewert der Methode problemlos in den Rückgabetyp des Delegaten umgewandelt werden kann.</span><span class="sxs-lookup"><span data-stu-id="e90b4-250">Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="e90b4-251">Ein Delegat mit einem Parameter vom Typ <xref:System.Collections.Hashtable> und der Rückgabetyp <xref:System.Object> können z. b. eine Methode mit einem Parameter vom Typ <xref:System.Object> und einen Rückgabewert vom Typ <xref:System.Collections.Hashtable>darstellen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-251">For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e90b4-252">Dieser Abschnitt enthält zwei Codebeispiele.</span><span class="sxs-lookup"><span data-stu-id="e90b4-252">This section contains two code examples.</span></span> <span data-ttu-id="e90b4-253">Im ersten Beispiel werden die beiden Arten von Delegaten veranschaulicht, die mit dieser Methoden Überladung erstellt werden können: offen über eine Instanzmethode und öffnen über eine statische Methode.</span><span class="sxs-lookup"><span data-stu-id="e90b4-253">The first example demonstrates the two kinds of delegates that can be created with this method overload: open over an instance method and open over a static method.</span></span>  
  
 <span data-ttu-id="e90b4-254">Im zweiten Codebeispiel werden kompatible Parametertypen und Rückgabe Typen veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="e90b4-254">The second code example demonstrates compatible parameter types and return types.</span></span>  
  
 <span data-ttu-id="e90b4-255">**Beispiel 1**</span><span class="sxs-lookup"><span data-stu-id="e90b4-255">**Example 1**</span></span>  
  
 <span data-ttu-id="e90b4-256">Im folgenden Codebeispiel werden die zwei Möglichkeiten veranschaulicht, wie ein Delegat mit dieser Überladung der <xref:System.Delegate.CreateDelegate%2A>-Methode erstellt werden kann.</span><span class="sxs-lookup"><span data-stu-id="e90b4-256">The following code example demonstrates the two ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e90b4-257">Es gibt zwei über Ladungen der <xref:System.Delegate.CreateDelegate%2A>-Methode, die eine <xref:System.Reflection.MethodInfo> angeben, jedoch kein erstes Argument. die Funktionalität ist identisch, mit der Ausnahme, dass Sie angeben können, ob bei Bindungs Fehlern eine Ausnahme ausgelöst werden soll, die andere immer auslöst.</span><span class="sxs-lookup"><span data-stu-id="e90b4-257">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify a <xref:System.Reflection.MethodInfo> but not a first argument; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="e90b4-258">In diesem Codebeispiel werden beide über Ladungen verwendet.</span><span class="sxs-lookup"><span data-stu-id="e90b4-258">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="e90b4-259">Im Beispiel wird eine Klasse `C` mit einer statischen Methode `M2` und einer Instanzmethode `M1`und zwei Delegattypen deklariert: `D1` nimmt eine Instanz von `C` und eine Zeichenfolge an, und `D2` nimmt eine Zeichenfolge an.</span><span class="sxs-lookup"><span data-stu-id="e90b4-259">The example declares a class `C` with a static method `M2` and an instance method `M1`, and two delegate types: `D1` takes an instance of `C` and a string, and `D2` takes a string.</span></span>  
  
 <span data-ttu-id="e90b4-260">Eine zweite Klasse mit dem Namen `Example` enthält den Code, mit dem die Delegaten erstellt werden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-260">A second class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="e90b4-261">Für die Instanzmethode `M1`wird ein Delegat vom Typ `D1`erstellt, der eine Open instance-Methode darstellt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-261">A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`.</span></span> <span data-ttu-id="e90b4-262">Wenn der Delegat aufgerufen wird, muss eine-Instanz übermittelt werden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-262">An instance must be passed when the delegate is invoked.</span></span>  
  
-   <span data-ttu-id="e90b4-263">Ein Delegat vom Typ `D2`, der eine offene statische Methode darstellt, wird für die statische Methode `M2`erstellt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-263">A delegate of type `D2`, representing an open static method, is created for the static method `M2`.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  
  
 <span data-ttu-id="e90b4-264">**Beispiel 2**</span><span class="sxs-lookup"><span data-stu-id="e90b4-264">**Example 2**</span></span>  
  
 <span data-ttu-id="e90b4-265">Im folgenden Codebeispiel wird die Kompatibilität von Parametertypen und Rückgabe Typen veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="e90b4-265">The following code example demonstrates compatibility of parameter types and return types.</span></span>  
  
 <span data-ttu-id="e90b4-266">Im Codebeispiel wird eine Basisklasse mit dem Namen `Base` und eine Klasse mit dem Namen `Derived` definiert, die von `Base`abgeleitet ist.</span><span class="sxs-lookup"><span data-stu-id="e90b4-266">The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`.</span></span> <span data-ttu-id="e90b4-267">Die abgeleitete Klasse verfügt über eine `static` (`Shared` in Visual Basic)-Methode mit dem Namen `MyMethod` mit einem Parameter vom Typ `Base` und dem Rückgabetyp `Derived`.</span><span class="sxs-lookup"><span data-stu-id="e90b4-267">The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`.</span></span> <span data-ttu-id="e90b4-268">Das Codebeispiel definiert auch einen Delegaten mit dem Namen `Example`, der einen Parameter vom Typ `Derived` und den Rückgabetyp `Base`hat.</span><span class="sxs-lookup"><span data-stu-id="e90b4-268">The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.</span></span>  
  
 <span data-ttu-id="e90b4-269">Das Codebeispiel veranschaulicht, dass der Delegat mit dem Namen `Example` verwendet werden kann, um die Methode `MyMethod`darzustellen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-269">The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`.</span></span> <span data-ttu-id="e90b4-270">Die-Methode kann aus folgenden Gründen an den-Delegaten gebunden werden:</span><span class="sxs-lookup"><span data-stu-id="e90b4-270">The method can be bound to the delegate because:</span></span>  
  
-   <span data-ttu-id="e90b4-271">Der Parametertyp des Delegaten (`Derived`) ist restriktiver als der Parametertyp `MyMethod` (`Base`), sodass es immer sicher ist, das Argument des Delegaten an `MyMethod`zu übergeben.</span><span class="sxs-lookup"><span data-stu-id="e90b4-271">The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.</span></span>  
  
-   <span data-ttu-id="e90b4-272">Der Rückgabetyp `MyMethod` (`Derived`) ist restriktiver als der Parametertyp des Delegaten (`Base`), sodass es immer sicher ist, den Rückgabetyp der Methode in den Rückgabetyp des Delegaten umzuwandeln.</span><span class="sxs-lookup"><span data-stu-id="e90b4-272">The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="e90b4-273">Das Codebeispiel erzeugt keine Ausgabe.</span><span class="sxs-lookup"><span data-stu-id="e90b4-273">The code example produces no output.</span></span>  
  
 [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]
 [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e90b4-274"><paramref name="type" /> ist <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="e90b4-274"><paramref name="type" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e90b4-275">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-275">-or-</span></span> 
 <span data-ttu-id="e90b4-276"><paramref name="method" /> ist <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="e90b4-276"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e90b4-277"><paramref name="type" /> erbt nicht <see cref="T:System.MulticastDelegate" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-277"><paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span></span>  
  
<span data-ttu-id="e90b4-278">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-278">-or-</span></span> 
 <span data-ttu-id="e90b4-279"><paramref name="type" /> ist keine <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-279"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="e90b4-280">Siehe [Laufzeittypen in Reflektion](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="e90b4-280">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="e90b4-281">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-281">-or-</span></span> 
 <span data-ttu-id="e90b4-282"><paramref name="method" /> ist keine statische Methode und die .NET Framework-Version ist 1.0 oder 1.1.</span><span class="sxs-lookup"><span data-stu-id="e90b4-282"><paramref name="method" /> is not a static method, and the .NET Framework version is 1.0 or 1.1.</span></span>  
  
<span data-ttu-id="e90b4-283">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-283">-or-</span></span> 
 <span data-ttu-id="e90b4-284"><paramref name="method" /> kann nicht gebunden werden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-284"><paramref name="method" /> cannot be bound.</span></span>  
  
<span data-ttu-id="e90b4-285">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-285">-or-</span></span> 
 <span data-ttu-id="e90b4-286"><paramref name="method" /> ist keine <see langword="RuntimeMethodInfo" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-286"><paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span></span> <span data-ttu-id="e90b4-287">Siehe [Laufzeittypen in Reflektion](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="e90b4-287">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="e90b4-288">Die <see langword="Invoke" />-Methode von <paramref name="type" /> wurde nicht gefunden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-288">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="e90b4-289">Der Aufrufer verfügt nicht über die erforderlichen Berechtigungen für den Zugriff auf <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-289">The caller does not have the permissions necessary to access <paramref name="method" />.</span></span></exception>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object firstArgument, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object firstArgument, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateDelegate (type As Type, firstArgument As Object, method As MethodInfo) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ firstArgument, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * System.Reflection.MethodInfo -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, firstArgument, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="firstArgument" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="e90b4-290">Der <see cref="T:System.Type" /> des zu erstellenden Delegaten.</span><span class="sxs-lookup"><span data-stu-id="e90b4-290">The <see cref="T:System.Type" /> of delegate to create.</span></span></param>
        <param name="firstArgument"><span data-ttu-id="e90b4-291">Das Objekt, an das der Delegat gebunden ist, oder <see langword="null" />, um <paramref name="method" /> als <see langword="static" /> (<see langword="Shared" /> in Visual Basic) zu behandeln.</span><span class="sxs-lookup"><span data-stu-id="e90b4-291">The object to which the delegate is bound, or <see langword="null" /> to treat <paramref name="method" /> as <see langword="static" /> (<see langword="Shared" /> in Visual Basic).</span></span></param>
        <param name="method"><span data-ttu-id="e90b4-292">Die <see cref="T:System.Reflection.MethodInfo" />, die die statische Methode oder Instanzmethode beschreibt, die der Delegat darstellen soll.</span><span class="sxs-lookup"><span data-stu-id="e90b4-292">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span></span></param>
        <summary><span data-ttu-id="e90b4-293">Erstellt einen Delegaten vom angegebenen Typ, der die angegebene statische Methode oder Instanzmethode mit dem angegebenen ersten Argument darstellt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-293">Creates a delegate of the specified type that represents the specified static or instance method, with the specified first argument.</span></span></summary>
        <returns><span data-ttu-id="e90b4-294">Ein Delegat vom angegebenen Typ, der die angegebene statische Methode oder Instanzmethode darstellt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-294">A delegate of the specified type that represents the specified static or instance method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e90b4-295">Das Aufrufen dieser Methoden Überladung entspricht dem Aufrufen der <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29>-Methoden Überladung und der Angabe von `true` für `throwOnBindFailure`.</span><span class="sxs-lookup"><span data-stu-id="e90b4-295">Calling this method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload and specifying `true` for `throwOnBindFailure`.</span></span> <span data-ttu-id="e90b4-296">Diese beiden über Ladungen stellen die flexibelste Möglichkeit zum Erstellen von Delegaten dar.</span><span class="sxs-lookup"><span data-stu-id="e90b4-296">These two overloads provide the most flexible way to create delegates.</span></span> <span data-ttu-id="e90b4-297">Sie können Sie verwenden, um Delegaten für statische Methoden oder Instanzmethoden zu erstellen und optional das erste Argument anzugeben.</span><span class="sxs-lookup"><span data-stu-id="e90b4-297">You can use them to create delegates for either static or instance methods, and optionally to specify the first argument.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e90b4-298">Wenn Sie kein erstes Argument angeben, verwenden Sie die <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29>-Methoden Überladung, um die Leistung zu verbessern.</span><span class="sxs-lookup"><span data-stu-id="e90b4-298">If you do not supply a first argument, use the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload for better performance.</span></span>  
  
 <span data-ttu-id="e90b4-299">Der Delegattyp und die Methode müssen über kompatible Rückgabe Typen verfügen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-299">The delegate type and the method must have compatible return types.</span></span> <span data-ttu-id="e90b4-300">Das heißt, der Rückgabetyp von `method` muss dem Rückgabetyp `type`zugewiesen werden können.</span><span class="sxs-lookup"><span data-stu-id="e90b4-300">That is, the return type of `method` must be assignable to the return type of `type`.</span></span>  
  
 <span data-ttu-id="e90b4-301">Wenn `firstArgument` bereitgestellt wird, wird Sie jedes Mal an `method` übergeben, wenn der Delegat aufgerufen wird. `firstArgument` wird als an den Delegaten gebunden bezeichnet, und der Delegat wird als das erste Argument geschlossen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-301">If `firstArgument` is supplied, it is passed to `method` every time the delegate is invoked; `firstArgument` is said to be bound to the delegate, and the delegate is said to be closed over its first argument.</span></span> <span data-ttu-id="e90b4-302">Wenn `method` `static` (`Shared` in Visual Basic) ist, enthält die Argumentliste, die beim Aufrufen des Delegaten angegeben wird, alle Parameter Außer dem ersten; Wenn `method` eine Instanzmethode ist, wird `firstArgument` an den ausgeblendeten Instanzparameter übergeben ( C#dargestellt durch `this` in oder durch `Me` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="e90b4-302">If `method` is `static` (`Shared` in Visual Basic), the argument list supplied when invoking the delegate includes all parameters except the first; if `method` is an instance method, then `firstArgument` is passed to the hidden instance parameter (represented by `this` in C#, or by `Me` in Visual Basic).</span></span>  
  
 <span data-ttu-id="e90b4-303">Wenn `firstArgument` angegeben wird, muss der erste Parameter von `method` ein Referenztyp sein, und `firstArgument` muss mit diesem Typ kompatibel sein.</span><span class="sxs-lookup"><span data-stu-id="e90b4-303">If `firstArgument` is supplied, the first parameter of `method` must be a reference type, and `firstArgument` must be compatible with that type.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e90b4-304">Wenn `method` `static` (`Shared` in Visual Basic) und der erste Parameter vom Typ <xref:System.Object> oder <xref:System.ValueType>ist, kann `firstArgument` ein Werttyp sein.</span><span class="sxs-lookup"><span data-stu-id="e90b4-304">If `method` is `static` (`Shared` in Visual Basic) and its first parameter is of type <xref:System.Object> or <xref:System.ValueType>, then `firstArgument` can be a value type.</span></span> <span data-ttu-id="e90b4-305">In diesem Fall wird `firstArgument` automatisch in einen Kasten konvertiert.</span><span class="sxs-lookup"><span data-stu-id="e90b4-305">In this case `firstArgument` is automatically boxed.</span></span> <span data-ttu-id="e90b4-306">Das automatische Boxing erfolgt nicht für andere Argumente, wie dies bei einem C# -oder-Visual Basic Funktions Aufrufes der Fall wäre.</span><span class="sxs-lookup"><span data-stu-id="e90b4-306">Automatic boxing does not occur for any other arguments, as it would in a C# or Visual Basic function call.</span></span>  
  
 <span data-ttu-id="e90b4-307">Wenn `firstArgument` ein NULL-Verweis ist und `method` eine Instanzmethode ist, hängt das Ergebnis von den Signaturen des Delegattyps `type` und von `method`ab:</span><span class="sxs-lookup"><span data-stu-id="e90b4-307">If `firstArgument` is a null reference and `method` is an instance method, the result depends on the signatures of the delegate type `type` and of `method`:</span></span>  
  
-   <span data-ttu-id="e90b4-308">Wenn die Signatur von `type` explizit den ausgeblendeten ersten Parameter `method`enthält, wird der Delegat als eine Open instance-Methode bezeichnet.</span><span class="sxs-lookup"><span data-stu-id="e90b4-308">If the signature of `type` explicitly includes the hidden first parameter of `method`, the delegate is said to represent an open instance method.</span></span> <span data-ttu-id="e90b4-309">Wenn der Delegat aufgerufen wird, wird das erste Argument in der Argumentliste an den ausgeblendeten Instanzparameter `method`übergeben.</span><span class="sxs-lookup"><span data-stu-id="e90b4-309">When the delegate is invoked, the first argument in the argument list is passed to the hidden instance parameter of `method`.</span></span>  
  
-   <span data-ttu-id="e90b4-310">Wenn die Signaturen von `method` und `type` entsprechen (d. h. alle Parametertypen sind kompatibel), wird der Delegat als NULL-Verweis geschlossen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-310">If the signatures of `method` and `type` match (that is, all parameter types are compatible), then the delegate is said to be closed over a null reference.</span></span> <span data-ttu-id="e90b4-311">Das Aufrufen des Delegaten ähnelt dem Aufrufen einer Instanzmethode für eine NULL-Instanz, was nicht besonders nützlich ist.</span><span class="sxs-lookup"><span data-stu-id="e90b4-311">Invoking the delegate is like calling an instance method on a null instance, which is not a particularly useful thing to do.</span></span>  
  
 <span data-ttu-id="e90b4-312">Wenn `firstArgument` ein NULL-Verweis ist und `method` statisch ist, hängt das Ergebnis von den Signaturen des Delegattyps `type` und von `method`ab:</span><span class="sxs-lookup"><span data-stu-id="e90b4-312">If `firstArgument` is a null reference and `method` is static, the result depends on the signatures of the delegate type `type` and of `method`:</span></span>  
  
-   <span data-ttu-id="e90b4-313">Wenn die Signatur von `method` und `type` abgleichen ist (d. h. alle Parametertypen sind kompatibel), wird der Delegat als eine offene statische Methode bezeichnet.</span><span class="sxs-lookup"><span data-stu-id="e90b4-313">If the signature of `method` and `type` match (that is, all parameter types are compatible), the delegate is said to represent an open static method.</span></span> <span data-ttu-id="e90b4-314">Dies ist der häufigste Fall bei statischen Methoden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-314">This is the most common case for static methods.</span></span> <span data-ttu-id="e90b4-315">In diesem Fall können Sie eine etwas bessere Leistung erzielen, indem Sie die <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29>-Methoden Überladung verwenden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-315">In this case, you can get slightly better performance by using the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.</span></span>  
  
-   <span data-ttu-id="e90b4-316">Wenn die Signatur von `type` mit dem zweiten Parameter von `method` beginnt und die restlichen Parametertypen kompatibel sind, wird der Delegat als ein NULL-Verweis geschlossen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-316">If the signature of `type` begins with the second parameter of `method` and the rest of the parameter types are compatible, then the delegate is said to be closed over a null reference.</span></span> <span data-ttu-id="e90b4-317">Wenn der Delegat aufgerufen wird, wird ein NULL-Verweis an den ersten Parameter `method`übergeben.</span><span class="sxs-lookup"><span data-stu-id="e90b4-317">When the delegate is invoked, a null reference is passed to the first parameter of `method`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e90b4-318">Beginnend mit dem [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]kann diese Methode verwendet werden, um auf nicht öffentliche Methoden zuzugreifen, wenn dem Aufrufer <xref:System.Security.Permissions.ReflectionPermission> mit dem <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>-Flag erteilt wurde, und wenn der Berechtigungs Satz der nicht öffentlichen Methoden auf den Berechtigungs Satz des Aufrufers oder eine Teilmenge des Aufrufers beschränkt ist.</span><span class="sxs-lookup"><span data-stu-id="e90b4-318">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="e90b4-319">(Siehe [Sicherheitsüberlegungen für die Reflektion](/dotnet/framework/reflection-and-codedom/security-considerations-for-reflection).)</span><span class="sxs-lookup"><span data-stu-id="e90b4-319">(See [Security Considerations for Reflection](/dotnet/framework/reflection-and-codedom/security-considerations-for-reflection).)</span></span>  
>   
>  <span data-ttu-id="e90b4-320">Zur Verwendung dieser Funktionen sollte die Anwendung für [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] oder höher ausgelegt sein.</span><span class="sxs-lookup"><span data-stu-id="e90b4-320">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
## <a name="compatible-parameter-types-and-return-type"></a><span data-ttu-id="e90b4-321">Kompatible Parameter Typen und Rückgabetyp</span><span class="sxs-lookup"><span data-stu-id="e90b4-321">Compatible Parameter Types and Return Type</span></span>  
 <span data-ttu-id="e90b4-322">Die Parametertypen und der Rückgabetyp eines Delegaten müssen mit den Parametertypen und dem Rückgabetyp der Methode kompatibel sein, die der Delegat darstellt. die Typen müssen nicht exakt übereinstimmen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-322">The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e90b4-323">In den .NET Framework Version 1,0 und 1,1 müssen die Typen exakt übereinstimmen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-323">In the .NET Framework version 1.0 and 1.1, the types must match exactly.</span></span>  
  
 <span data-ttu-id="e90b4-324">Ein Parameter eines Delegaten ist mit dem entsprechenden Parameter einer Methode kompatibel, wenn der Typ des Delegatenparameters restriktiver ist als der Methodenparameter, da so gewährleistet ist, dass ein an den Delegaten übergebenes Argument problemlos an die Methode weitergeleitet werden kann.</span><span class="sxs-lookup"><span data-stu-id="e90b4-324">A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.</span></span>  
  
 <span data-ttu-id="e90b4-325">Ebenso ist der Rückgabetyp eines Delegaten kompatibel mit dem Rückgabetyp einer Methode, wenn der Rückgabetyp der Methode restriktiver ist als der Rückgabetyp des Delegaten, da so gewährleistet ist, dass der Rückgabewert der Methode problemlos in den Rückgabetyp des Delegaten umgewandelt werden kann.</span><span class="sxs-lookup"><span data-stu-id="e90b4-325">Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="e90b4-326">Ein Delegat mit einem Parameter vom Typ <xref:System.Collections.Hashtable> und der Rückgabetyp <xref:System.Object> können z. b. eine Methode mit einem Parameter vom Typ <xref:System.Object> und einen Rückgabewert vom Typ <xref:System.Collections.Hashtable>darstellen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-326">For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.</span></span>  
  
## <a name="determining-the-methods-a-delegate-can-represent"></a><span data-ttu-id="e90b4-327">Bestimmen der Methoden, die ein Delegat darstellen kann</span><span class="sxs-lookup"><span data-stu-id="e90b4-327">Determining the Methods a Delegate Can Represent</span></span>  
 <span data-ttu-id="e90b4-328">Eine weitere nützliche Methode, um die von dieser Überladung von <xref:System.Delegate.CreateDelegate%2A> bereitgestellte Flexibilität zu berücksichtigen, besteht darin, dass jeder angegebene Delegat vier verschiedene Kombinationen von Methoden Signatur und Methodenart (statisch und Instanz) darstellen kann.</span><span class="sxs-lookup"><span data-stu-id="e90b4-328">Another useful way to think of the flexibility provided by this overload of <xref:System.Delegate.CreateDelegate%2A> is that any given delegate can represent four different combinations of method signature and method kind (static versus instance).</span></span> <span data-ttu-id="e90b4-329">Angenommen, ein Delegattyp `D` mit einem Argument vom Typ `C`.</span><span class="sxs-lookup"><span data-stu-id="e90b4-329">Consider a delegate type `D` with one argument of type `C`.</span></span> <span data-ttu-id="e90b4-330">Im folgenden werden die Methoden beschrieben, die `D` darstellen können. der Rückgabetyp wird ignoriert, da er in allen Fällen abgeglichen werden muss</span><span class="sxs-lookup"><span data-stu-id="e90b4-330">The following describes the methods `D` can represent, ignoring the return type since it must match in all cases:</span></span>  
  
-   <span data-ttu-id="e90b4-331">`D` können jede Instanzmethode darstellen, die genau ein Argument vom Typ `C`hat, unabhängig davon, zu welchem Typ die Instanzmethode gehört.</span><span class="sxs-lookup"><span data-stu-id="e90b4-331">`D` can represent any instance method that has exactly one argument of type `C`, regardless of what type the instance method belongs to.</span></span> <span data-ttu-id="e90b4-332">Wenn <xref:System.Delegate.CreateDelegate%2A> aufgerufen wird, ist `firstArgument` eine Instanz des Typs, zu dem `method` gehört, und der resultierende Delegat wird als für diese Instanz geschlossen bezeichnet.</span><span class="sxs-lookup"><span data-stu-id="e90b4-332">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of the type `method` belongs to, and the resulting delegate is said to be closed over that instance.</span></span> <span data-ttu-id="e90b4-333">(Triviale `D` können auch über einen NULL-Verweis geschlossen werden, wenn `firstArgument` ein NULL-Verweis ist.)</span><span class="sxs-lookup"><span data-stu-id="e90b4-333">(Trivially, `D` can also be closed over a null reference if `firstArgument` is a null reference.)</span></span>  
  
-   <span data-ttu-id="e90b4-334">`D` kann eine Instanzmethode `C` darstellen, die keine Argumente aufweist.</span><span class="sxs-lookup"><span data-stu-id="e90b4-334">`D` can represent an instance method of `C` that has no arguments.</span></span> <span data-ttu-id="e90b4-335">Wenn <xref:System.Delegate.CreateDelegate%2A> aufgerufen wird, ist `firstArgument` ein NULL-Verweis.</span><span class="sxs-lookup"><span data-stu-id="e90b4-335">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference.</span></span> <span data-ttu-id="e90b4-336">Der resultierende Delegat stellt eine Open instance-Methode dar, und eine Instanz von `C` muss jedes Mal, wenn Sie aufgerufen wird, bereitgestellt werden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-336">The resulting delegate represents an open instance method, and an instance of `C` must be supplied each time it is invoked.</span></span>  
  
-   <span data-ttu-id="e90b4-337">`D` kann eine statische Methode darstellen, die ein Argument vom Typ "`C`" annimmt, und diese Methode kann zu einem beliebigen Typ gehören.</span><span class="sxs-lookup"><span data-stu-id="e90b4-337">`D` can represent a static method that takes one argument of type `C`, and that method can belong to any type.</span></span> <span data-ttu-id="e90b4-338">Wenn <xref:System.Delegate.CreateDelegate%2A> aufgerufen wird, ist `firstArgument` ein NULL-Verweis.</span><span class="sxs-lookup"><span data-stu-id="e90b4-338">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference.</span></span> <span data-ttu-id="e90b4-339">Der resultierende Delegat stellt eine offene statische Methode dar, und eine Instanz von `C` muss jedes Mal, wenn Sie aufgerufen wird, bereitgestellt werden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-339">The resulting delegate represents an open static method, and an instance of `C` must be supplied each time it is invoked.</span></span>  
  
-   <span data-ttu-id="e90b4-340">`D` kann eine statische Methode darstellen, die dem Typ `F` angehört und über zwei Argumente vom Typ `F` und vom Typ `C`verfügt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-340">`D` can represent a static method that belongs to type `F` and has two arguments, of type `F` and type `C`.</span></span> <span data-ttu-id="e90b4-341">Wenn <xref:System.Delegate.CreateDelegate%2A> aufgerufen wird, ist `firstArgument` eine Instanz von `F`.</span><span class="sxs-lookup"><span data-stu-id="e90b4-341">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of `F`.</span></span> <span data-ttu-id="e90b4-342">Der resultierende Delegat stellt eine statische Methode dar, die über diese Instanz von `F`geschlossen wird.</span><span class="sxs-lookup"><span data-stu-id="e90b4-342">The resulting delegate represents a static method that is closed over that instance of `F`.</span></span> <span data-ttu-id="e90b4-343">Beachten Sie, dass die statische Methode in dem Fall, in dem `F` und `C` denselben Typ haben, über zwei Argumente dieses Typs verfügt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-343">Note that in the case where `F` and `C` are the same type, the static method has two arguments of that type.</span></span> <span data-ttu-id="e90b4-344">(In diesem Fall wird `D` über einen NULL-Verweis geschlossen, wenn `firstArgument` ein NULL-Verweis ist.)</span><span class="sxs-lookup"><span data-stu-id="e90b4-344">(In this case, `D` is closed over a null reference if `firstArgument` is a null reference.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e90b4-345">Dieser Abschnitt enthält drei Codebeispiele.</span><span class="sxs-lookup"><span data-stu-id="e90b4-345">This section contains three code examples.</span></span> <span data-ttu-id="e90b4-346">Im ersten Beispiel werden die vier Arten von Delegaten veranschaulicht, die erstellt werden können: geschlossen über eine Instanzmethode, öffnen über eine Instanzmethode, öffnen über eine statische Methode und schließen über eine statische Methode.</span><span class="sxs-lookup"><span data-stu-id="e90b4-346">The first example demonstrates the four kinds of delegates that can be created: closed over an instance method, open over an instance method, open over a static method, and closed over a static method.</span></span>  
  
 <span data-ttu-id="e90b4-347">Im zweiten Codebeispiel werden kompatible Parametertypen und Rückgabe Typen veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="e90b4-347">The second code example demonstrates compatible parameter types and return types.</span></span>  
  
 <span data-ttu-id="e90b4-348">Das dritte Codebeispiel definiert einen einzelnen Delegattyp und zeigt alle Methoden an, die der Delegattyp darstellen kann.</span><span class="sxs-lookup"><span data-stu-id="e90b4-348">The third code example defines a single delegate type, and shows all the methods that delegate type can represent.</span></span>  
  
 <span data-ttu-id="e90b4-349">**Beispiel 1**</span><span class="sxs-lookup"><span data-stu-id="e90b4-349">**Example 1**</span></span>  
  
 <span data-ttu-id="e90b4-350">Im folgenden Codebeispiel werden die vier Möglichkeiten veranschaulicht, wie ein Delegat mit dieser Überladung der <xref:System.Delegate.CreateDelegate%2A>-Methode erstellt werden kann.</span><span class="sxs-lookup"><span data-stu-id="e90b4-350">The following code example demonstrates the four ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e90b4-351">Es gibt zwei über Ladungen der <xref:System.Delegate.CreateDelegate%2A>-Methode, die `firstArgument` und eine <xref:System.Reflection.MethodInfo>angeben. die Funktionalität ist identisch, mit der Ausnahme, dass Sie angeben können, ob bei Bindungs Fehlern eine Ausnahme ausgelöst werden soll, die andere immer auslöst.</span><span class="sxs-lookup"><span data-stu-id="e90b4-351">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="e90b4-352">In diesem Codebeispiel werden beide über Ladungen verwendet.</span><span class="sxs-lookup"><span data-stu-id="e90b4-352">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="e90b4-353">Im Beispiel wird eine Klasse `C` mit einer statischen Methode `M2` und einer Instanzmethode `M1`und drei Delegattypen deklariert: `D1` eine Instanz von `C` und eine Zeichenfolge annimmt, `D2` eine Zeichenfolge annimmt und `D3` über keine Argumente verfügt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-353">The example declares a class `C` with a static method `M2` and an instance method `M1`, and three delegate types: `D1` takes an instance of `C` and a string, `D2` takes a string, and `D3` has no arguments.</span></span>  
  
 <span data-ttu-id="e90b4-354">Eine zweite Klasse mit dem Namen `Example` enthält den Code, mit dem die Delegaten erstellt werden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-354">A second class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="e90b4-355">Ein Delegat vom Typ `D2`, geschlossen über eine Instanz von `C`, wird für die Instanzmethode `M1`erstellt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-355">A delegate of type `D2`, closed over an instance of `C`, is created for the instance method `M1`.</span></span> <span data-ttu-id="e90b4-356">Sie wird mit anderen Zeichen folgen aufgerufen, um anzuzeigen, dass die gebundene Instanz von `C` immer verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="e90b4-356">It is invoked with different strings, to show that the bound instance of `C` is always used.</span></span>  
  
-   <span data-ttu-id="e90b4-357">Für die Instanzmethode `M1`wird ein Delegat vom Typ `D1`erstellt, der eine Open instance-Methode darstellt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-357">A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`.</span></span> <span data-ttu-id="e90b4-358">Wenn der Delegat aufgerufen wird, muss eine-Instanz übermittelt werden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-358">An instance must be passed when the delegate is invoked.</span></span>  
  
-   <span data-ttu-id="e90b4-359">Ein Delegat vom Typ `D2`, der eine offene statische Methode darstellt, wird für die statische Methode `M2`erstellt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-359">A delegate of type `D2`, representing an open static method, is created for the static method `M2`.</span></span>  
  
-   <span data-ttu-id="e90b4-360">Schließlich wird ein Delegat vom Typ `D3`, der über eine Zeichenfolge geschlossen wurde, für die statische Methode `M2`erstellt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-360">Finally, a delegate of type `D3`, closed over a string, is created for the static method `M2`.</span></span> <span data-ttu-id="e90b4-361">Die-Methode wird aufgerufen, um anzuzeigen, dass Sie die gebundene Zeichenfolge verwendet.</span><span class="sxs-lookup"><span data-stu-id="e90b4-361">The method is invoked to show that it uses the bound string.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  
  
 <span data-ttu-id="e90b4-362">**Beispiel 2**</span><span class="sxs-lookup"><span data-stu-id="e90b4-362">**Example 2**</span></span>  
  
 <span data-ttu-id="e90b4-363">Im folgenden Codebeispiel wird die Kompatibilität von Parametertypen und Rückgabe Typen veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="e90b4-363">The following code example demonstrates compatibility of parameter types and return types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e90b4-364">In diesem Codebeispiel wird die <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29>-Methoden Überladung verwendet.</span><span class="sxs-lookup"><span data-stu-id="e90b4-364">This code example uses the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.</span></span> <span data-ttu-id="e90b4-365">Die Verwendung anderer über Ladungen, die <xref:System.Reflection.MethodInfo> übernehmen, ist ähnlich.</span><span class="sxs-lookup"><span data-stu-id="e90b4-365">The use of other overloads that take <xref:System.Reflection.MethodInfo> is similar.</span></span>  
  
 <span data-ttu-id="e90b4-366">Im Codebeispiel wird eine Basisklasse mit dem Namen `Base` und eine Klasse mit dem Namen `Derived` definiert, die von `Base`abgeleitet ist.</span><span class="sxs-lookup"><span data-stu-id="e90b4-366">The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`.</span></span> <span data-ttu-id="e90b4-367">Die abgeleitete Klasse verfügt über eine `static` (`Shared` in Visual Basic)-Methode mit dem Namen `MyMethod` mit einem Parameter vom Typ `Base` und dem Rückgabetyp `Derived`.</span><span class="sxs-lookup"><span data-stu-id="e90b4-367">The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`.</span></span> <span data-ttu-id="e90b4-368">Das Codebeispiel definiert auch einen Delegaten mit dem Namen `Example`, der einen Parameter vom Typ `Derived` und den Rückgabetyp `Base`hat.</span><span class="sxs-lookup"><span data-stu-id="e90b4-368">The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.</span></span>  
  
 <span data-ttu-id="e90b4-369">Das Codebeispiel veranschaulicht, dass der Delegat mit dem Namen `Example` verwendet werden kann, um die Methode `MyMethod`darzustellen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-369">The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`.</span></span> <span data-ttu-id="e90b4-370">Die-Methode kann aus folgenden Gründen an den-Delegaten gebunden werden:</span><span class="sxs-lookup"><span data-stu-id="e90b4-370">The method can be bound to the delegate because:</span></span>  
  
-   <span data-ttu-id="e90b4-371">Der Parametertyp des Delegaten (`Derived`) ist restriktiver als der Parametertyp `MyMethod` (`Base`), sodass es immer sicher ist, das Argument des Delegaten an `MyMethod`zu übergeben.</span><span class="sxs-lookup"><span data-stu-id="e90b4-371">The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.</span></span>  
  
-   <span data-ttu-id="e90b4-372">Der Rückgabetyp `MyMethod` (`Derived`) ist restriktiver als der Parametertyp des Delegaten (`Base`), sodass es immer sicher ist, den Rückgabetyp der Methode in den Rückgabetyp des Delegaten umzuwandeln.</span><span class="sxs-lookup"><span data-stu-id="e90b4-372">The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="e90b4-373">Das Codebeispiel erzeugt keine Ausgabe.</span><span class="sxs-lookup"><span data-stu-id="e90b4-373">The code example produces no output.</span></span>  
  
 [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]
 [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  
  
 <span data-ttu-id="e90b4-374">**Beispiel 3**</span><span class="sxs-lookup"><span data-stu-id="e90b4-374">**Example 3**</span></span>  
  
 <span data-ttu-id="e90b4-375">Im folgenden Codebeispiel werden alle Methoden gezeigt, die ein einzelner Delegattyp darstellen kann. dabei wird die <xref:System.Delegate.CreateDelegate%2A>-Methode verwendet, um die Delegaten zu erstellen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-375">The following code example shows all the methods a single delegate type can represent, using the <xref:System.Delegate.CreateDelegate%2A> method to create the delegates.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e90b4-376">Es gibt zwei über Ladungen der <xref:System.Delegate.CreateDelegate%2A>-Methode, die `firstArgument` und eine <xref:System.Reflection.MethodInfo>angeben. die Funktionalität ist identisch, mit der Ausnahme, dass Sie angeben können, ob bei Bindungs Fehlern eine Ausnahme ausgelöst werden soll, die andere immer auslöst.</span><span class="sxs-lookup"><span data-stu-id="e90b4-376">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="e90b4-377">In diesem Codebeispiel werden beide über Ladungen verwendet.</span><span class="sxs-lookup"><span data-stu-id="e90b4-377">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="e90b4-378">Im Codebeispiel werden zwei Klassen definiert: `C` und `F`und ein Delegattyp, der mit einem Argument vom Typ `C``D` wird.</span><span class="sxs-lookup"><span data-stu-id="e90b4-378">The code example defines two classes, `C` and `F`, and a delegate type `D` with one argument of type `C`.</span></span> <span data-ttu-id="e90b4-379">Die Klassen verfügen über übereinstimmende statische und Instanzmethoden `M1`, `M3`und `M4`, und Class `C` verfügt auch über eine Instanzmethode `M2`, die keine Argumente aufweist.</span><span class="sxs-lookup"><span data-stu-id="e90b4-379">The classes have matching static and instance methods `M1`, `M3`, and `M4`, and class `C` also has an instance method `M2` that has no arguments.</span></span>  
  
 <span data-ttu-id="e90b4-380">Eine dritte Klasse mit dem Namen `Example` enthält den Code, mit dem die Delegaten erstellt werden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-380">A third class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="e90b4-381">Delegaten werden für Instanzmethoden`M1` vom Typ `C` und Type `F`; erstellt. Jede wird über eine Instanz des jeweiligen Typs geschlossen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-381">Delegates are created for instance method `M1` of type `C` and type `F`; each is closed over an instance of the respective type.</span></span> <span data-ttu-id="e90b4-382">Methoden `M1` vom Typ `C` in der die `ID` Eigenschaften der gebundenen Instanz und des Arguments angezeigt werden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-382">Method `M1` of type `C` displays the `ID` properties of the bound instance and of the argument.</span></span>  
  
-   <span data-ttu-id="e90b4-383">Ein Delegat wird für die-Methode `M2` vom Typ "`C`" erstellt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-383">A delegate is created for method `M2` of type `C`.</span></span> <span data-ttu-id="e90b4-384">Dies ist ein Open instance-Delegat, bei dem das-Argument des Delegaten das ausgeblendete erste Argument der Instanzmethode darstellt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-384">This is an open instance delegate, in which the argument of the delegate represents the hidden first argument on the instance method.</span></span> <span data-ttu-id="e90b4-385">Die Methode hat keine anderen Argumente.</span><span class="sxs-lookup"><span data-stu-id="e90b4-385">The method has no other arguments.</span></span> <span data-ttu-id="e90b4-386">Sie wird aufgerufen, als ob es sich um eine statische Methode handelt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-386">It is called as if it were a static method.</span></span>  
  
-   <span data-ttu-id="e90b4-387">Delegaten werden für statische Methoden `M3` vom Typ `C` und vom Typ `F`; erstellt. Dabei handelt es sich um offene statische Delegaten.</span><span class="sxs-lookup"><span data-stu-id="e90b4-387">Delegates are created for static method `M3` of type `C` and type `F`; these are open static delegates.</span></span>  
  
-   <span data-ttu-id="e90b4-388">Zum Schluss werden Delegaten für statische Methoden `M4` vom Typ "`C`" und "Type `F`;" erstellt. Jede Methode weist den deklarierenden Typ als erstes Argument auf, und es wird eine Instanz des Typs bereitgestellt, sodass die Delegaten über ihren ersten Argumenten geschlossen werden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-388">Finally, delegates are created for static method `M4` of type `C` and type `F`; each method has the declaring type as its first argument, and an instance of the type is supplied, so the delegates are closed over their first arguments.</span></span> <span data-ttu-id="e90b4-389">Methoden `M4` vom Typ `C` in der die `ID` Eigenschaften der gebundenen Instanz und des Arguments angezeigt werden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-389">Method `M4` of type `C` displays the `ID` properties of the bound instance and of the argument.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e90b4-390"><paramref name="type" /> ist <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="e90b4-390"><paramref name="type" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e90b4-391">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-391">-or-</span></span> 
 <span data-ttu-id="e90b4-392"><paramref name="method" /> ist <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="e90b4-392"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e90b4-393"><paramref name="type" /> erbt nicht <see cref="T:System.MulticastDelegate" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-393"><paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span></span>  
  
<span data-ttu-id="e90b4-394">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-394">-or-</span></span> 
 <span data-ttu-id="e90b4-395"><paramref name="type" /> ist keine <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-395"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="e90b4-396">Siehe [Laufzeittypen in Reflektion](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="e90b4-396">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="e90b4-397">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-397">-or-</span></span> 
 <span data-ttu-id="e90b4-398"><paramref name="method" /> kann nicht gebunden werden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-398"><paramref name="method" /> cannot be bound.</span></span>  
  
<span data-ttu-id="e90b4-399">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-399">-or-</span></span> 
 <span data-ttu-id="e90b4-400"><paramref name="method" /> ist keine <see langword="RuntimeMethodInfo" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-400"><paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span></span> <span data-ttu-id="e90b4-401">Siehe [Laufzeittypen in Reflektion](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="e90b4-401">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="e90b4-402">Die <see langword="Invoke" />-Methode von <paramref name="type" /> wurde nicht gefunden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-402">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="e90b4-403">Der Aufrufer verfügt nicht über die erforderlichen Berechtigungen für den Zugriff auf <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-403">The caller does not have the permissions necessary to access <paramref name="method" />.</span></span></exception>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateDelegate (type As Type, target As Object, method As String) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ target, System::String ^ method);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * string -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="target" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="method" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="e90b4-404">Der <see cref="T:System.Type" /> des zu erstellenden Delegaten.</span><span class="sxs-lookup"><span data-stu-id="e90b4-404">The <see cref="T:System.Type" /> of delegate to create.</span></span></param>
        <param name="target"><span data-ttu-id="e90b4-405">Die Klasseninstanz, für die <paramref name="method" /> aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="e90b4-405">The class instance on which <paramref name="method" /> is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="e90b4-406">Der Name der Instanzenmethode, die durch den Delegaten dargestellt werden soll.</span><span class="sxs-lookup"><span data-stu-id="e90b4-406">The name of the instance method that the delegate is to represent.</span></span></param>
        <summary><span data-ttu-id="e90b4-407">Erstellt einen Delegaten vom angegebenen Typ, der die angegebene Instanzenmethode darstellt, die für die angegebene Klasseninstanz aufgerufen werden soll.</span><span class="sxs-lookup"><span data-stu-id="e90b4-407">Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span></span></summary>
        <returns><span data-ttu-id="e90b4-408">Ein Delegat vom angegebenen Typ, der die angegebene Instanzenmethode darstellt, die für die angegebene Klasseninstanz aufgerufen werden soll.</span><span class="sxs-lookup"><span data-stu-id="e90b4-408">A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e90b4-409">Diese Methode erstellt nur Delegaten für Instanzmethoden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-409">This method creates delegates for instance methods only.</span></span> <span data-ttu-id="e90b4-410">Eine Instanzmethode ist eine Methode, die einer Instanz einer-Klasse zugeordnet ist. eine statische Methode ist eine Methode, die der Klasse selbst zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="e90b4-410">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="e90b4-411">Diese Methoden Überladung entspricht dem Aufrufen der <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29>-Methoden Überladung, wobei `false` für `ignoreCase` und `true` für `throwOnBindFailure`angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="e90b4-411">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `false` for `ignoreCase` and `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e90b4-412">Beginnend mit dem [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]kann diese Methode verwendet werden, um auf nicht öffentliche Methoden zuzugreifen, wenn dem Aufrufer <xref:System.Security.Permissions.ReflectionPermission> mit dem <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>-Flag erteilt wurde, und wenn der Berechtigungs Satz der nicht öffentlichen Methoden auf den Berechtigungs Satz des Aufrufers oder eine Teilmenge des Aufrufers beschränkt ist.</span><span class="sxs-lookup"><span data-stu-id="e90b4-412">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="e90b4-413">(Siehe [Sicherheitsüberlegungen für die Reflektion](/dotnet/framework/reflection-and-codedom/security-considerations-for-reflection).)</span><span class="sxs-lookup"><span data-stu-id="e90b4-413">(See [Security Considerations for Reflection](/dotnet/framework/reflection-and-codedom/security-considerations-for-reflection).)</span></span>  
>   
>  <span data-ttu-id="e90b4-414">Zur Verwendung dieser Funktionen sollte die Anwendung für [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] oder höher ausgelegt sein.</span><span class="sxs-lookup"><span data-stu-id="e90b4-414">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e90b4-415"><paramref name="type" /> ist <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="e90b4-415"><paramref name="type" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e90b4-416">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-416">-or-</span></span> 
 <span data-ttu-id="e90b4-417"><paramref name="target" /> ist <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="e90b4-417"><paramref name="target" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e90b4-418">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-418">-or-</span></span> 
 <span data-ttu-id="e90b4-419"><paramref name="method" /> ist <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="e90b4-419"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e90b4-420"><paramref name="type" /> erbt nicht <see cref="T:System.MulticastDelegate" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-420"><paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span></span>  
  
<span data-ttu-id="e90b4-421">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-421">-or-</span></span> 
 <span data-ttu-id="e90b4-422"><paramref name="type" /> ist keine <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-422"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="e90b4-423">Siehe [Laufzeittypen in Reflektion](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="e90b4-423">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="e90b4-424">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-424">-or-</span></span> 
 <span data-ttu-id="e90b4-425"><paramref name="method" /> ist keine Instanzenmethode.</span><span class="sxs-lookup"><span data-stu-id="e90b4-425"><paramref name="method" /> is not an instance method.</span></span>  
  
<span data-ttu-id="e90b4-426">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-426">-or-</span></span> 
 <span data-ttu-id="e90b4-427"><paramref name="method" /> kann nicht gebunden werden, z. B. weil sie nicht gefunden wurde.</span><span class="sxs-lookup"><span data-stu-id="e90b4-427"><paramref name="method" /> cannot be bound, for example because it cannot be found.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="e90b4-428">Die <see langword="Invoke" />-Methode von <paramref name="type" /> wurde nicht gefunden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-428">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="e90b4-429">Der Aufrufer verfügt nicht über die erforderlichen Berechtigungen für den Zugriff auf <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-429">The caller does not have the permissions necessary to access <paramref name="method" />.</span></span></exception>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, System.Reflection.MethodInfo method, bool throwOnBindFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Reflection.MethodInfo method, bool throwOnBindFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateDelegate (type As Type, method As MethodInfo, throwOnBindFailure As Boolean) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Reflection::MethodInfo ^ method, bool throwOnBindFailure);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * System.Reflection.MethodInfo * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, method, throwOnBindFailure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="throwOnBindFailure" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="e90b4-430">Der <see cref="T:System.Type" /> des zu erstellenden Delegaten.</span><span class="sxs-lookup"><span data-stu-id="e90b4-430">The <see cref="T:System.Type" /> of delegate to create.</span></span></param>
        <param name="method"><span data-ttu-id="e90b4-431">Die <see cref="T:System.Reflection.MethodInfo" />, die die statische Methode oder Instanzmethode beschreibt, die der Delegat darstellen soll.</span><span class="sxs-lookup"><span data-stu-id="e90b4-431">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span></span></param>
        <param name="throwOnBindFailure"><span data-ttu-id="e90b4-432"><see langword="true" />, um eine Ausnahme auszulösen, wenn <paramref name="method" /> nicht gebunden werden kann, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-432"><see langword="true" /> to throw an exception if <paramref name="method" /> cannot be bound; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="e90b4-433">Erstellt einen Delegaten vom angegeben Typ zum Darstellen der angegebenen statischen Methode mit dem angegebenen Verhalten bei Bindungsfehlern.</span><span class="sxs-lookup"><span data-stu-id="e90b4-433">Creates a delegate of the specified type to represent the specified static method, with the specified behavior on failure to bind.</span></span></summary>
        <returns><span data-ttu-id="e90b4-434">Ein Delegat vom angegebenen Typ, der die angegebene statische Methode darstellen soll.</span><span class="sxs-lookup"><span data-stu-id="e90b4-434">A delegate of the specified type to represent the specified static method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e90b4-435">Diese Methoden Überladung kann offene statische Methoden Delegaten und Open instance-Methoden Delegaten erstellen, d. h. Delegaten, die das verborgene erste Argument der Instanzmethoden verfügbar machen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-435">This method overload can create open static method delegates and open instance method delegates - that is, delegates that expose the hidden first argument of instance methods.</span></span> <span data-ttu-id="e90b4-436">Eine ausführliche Erläuterung finden Sie in der allgemeineren <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29>-Methoden Überladung, die es Ihnen ermöglicht, alle Kombinationen offener oder geschlossener Delegaten für Instanzen oder statische Methoden zu erstellen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-436">For a detailed explanation, see the more general <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload, which allows you to create all combinations of open or closed delegates for instance or static methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e90b4-437">Diese Methoden Überladung sollte verwendet werden, wenn der Delegat nicht über das erste Argument geschlossen wird, da er in diesem Fall etwas schneller ist.</span><span class="sxs-lookup"><span data-stu-id="e90b4-437">This method overload should be used when the delegate is not closed over its first argument, because it is somewhat faster in that case.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e90b4-438">Beginnend mit dem [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]kann diese Methode verwendet werden, um auf nicht öffentliche Methoden zuzugreifen, wenn dem Aufrufer <xref:System.Security.Permissions.ReflectionPermission> mit dem <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>-Flag erteilt wurde, und wenn der Berechtigungs Satz der nicht öffentlichen Methoden auf den Berechtigungs Satz des Aufrufers oder eine Teilmenge des Aufrufers beschränkt ist.</span><span class="sxs-lookup"><span data-stu-id="e90b4-438">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="e90b4-439">(Siehe [Sicherheitsüberlegungen für die Reflektion](/dotnet/framework/reflection-and-codedom/security-considerations-for-reflection).)</span><span class="sxs-lookup"><span data-stu-id="e90b4-439">(See [Security Considerations for Reflection](/dotnet/framework/reflection-and-codedom/security-considerations-for-reflection).)</span></span>  
>   
>  <span data-ttu-id="e90b4-440">Zur Verwendung dieser Funktionen sollte die Anwendung für [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] oder höher ausgelegt sein.</span><span class="sxs-lookup"><span data-stu-id="e90b4-440">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
## <a name="compatible-parameter-types-and-return-type"></a><span data-ttu-id="e90b4-441">Kompatible Parameter Typen und Rückgabetyp</span><span class="sxs-lookup"><span data-stu-id="e90b4-441">Compatible Parameter Types and Return Type</span></span>  
 <span data-ttu-id="e90b4-442">Die Parametertypen und der Rückgabetyp eines Delegaten müssen mit den Parametertypen und dem Rückgabetyp der Methode kompatibel sein, die der Delegat darstellt. die Typen müssen nicht exakt übereinstimmen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-442">The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e90b4-443">In den .NET Framework Version 1,0 und 1,1 müssen die Typen exakt übereinstimmen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-443">In the .NET Framework version 1.0 and 1.1, the types must match exactly.</span></span>  
  
 <span data-ttu-id="e90b4-444">Ein Parameter eines Delegaten ist mit dem entsprechenden Parameter einer Methode kompatibel, wenn der Typ des Delegatenparameters restriktiver ist als der Methodenparameter, da so gewährleistet ist, dass ein an den Delegaten übergebenes Argument problemlos an die Methode weitergeleitet werden kann.</span><span class="sxs-lookup"><span data-stu-id="e90b4-444">A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.</span></span>  
  
 <span data-ttu-id="e90b4-445">Ebenso ist der Rückgabetyp eines Delegaten kompatibel mit dem Rückgabetyp einer Methode, wenn der Rückgabetyp der Methode restriktiver ist als der Rückgabetyp des Delegaten, da so gewährleistet ist, dass der Rückgabewert der Methode problemlos in den Rückgabetyp des Delegaten umgewandelt werden kann.</span><span class="sxs-lookup"><span data-stu-id="e90b4-445">Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="e90b4-446">Ein Delegat mit einem Parameter vom Typ <xref:System.Collections.Hashtable> und der Rückgabetyp <xref:System.Object> können z. b. eine Methode mit einem Parameter vom Typ <xref:System.Object> und einen Rückgabewert vom Typ <xref:System.Collections.Hashtable>darstellen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-446">For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e90b4-447">Dieser Abschnitt enthält zwei Codebeispiele.</span><span class="sxs-lookup"><span data-stu-id="e90b4-447">This section contains two code examples.</span></span> <span data-ttu-id="e90b4-448">Im ersten Beispiel werden die beiden Arten von Delegaten veranschaulicht, die mit dieser Methoden Überladung erstellt werden können: offen über eine Instanzmethode und öffnen über eine statische Methode.</span><span class="sxs-lookup"><span data-stu-id="e90b4-448">The first example demonstrates the two kinds of delegates that can be created with this method overload: open over an instance method and open over a static method.</span></span>  
  
 <span data-ttu-id="e90b4-449">Im zweiten Codebeispiel werden kompatible Parametertypen und Rückgabe Typen veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="e90b4-449">The second code example demonstrates compatible parameter types and return types.</span></span>  
  
 <span data-ttu-id="e90b4-450">**Beispiel 1**</span><span class="sxs-lookup"><span data-stu-id="e90b4-450">**Example 1**</span></span>  
  
 <span data-ttu-id="e90b4-451">Im folgenden Codebeispiel werden die zwei Möglichkeiten veranschaulicht, wie ein Delegat mit dieser Überladung der <xref:System.Delegate.CreateDelegate%2A>-Methode erstellt werden kann.</span><span class="sxs-lookup"><span data-stu-id="e90b4-451">The following code example demonstrates the two ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e90b4-452">Es gibt zwei über Ladungen der <xref:System.Delegate.CreateDelegate%2A>-Methode, die eine <xref:System.Reflection.MethodInfo> angeben, jedoch kein erstes Argument. die Funktionalität ist identisch, mit der Ausnahme, dass Sie angeben können, ob bei Bindungs Fehlern eine Ausnahme ausgelöst werden soll, die andere immer auslöst.</span><span class="sxs-lookup"><span data-stu-id="e90b4-452">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify a <xref:System.Reflection.MethodInfo> but not a first argument; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="e90b4-453">In diesem Codebeispiel werden beide über Ladungen verwendet.</span><span class="sxs-lookup"><span data-stu-id="e90b4-453">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="e90b4-454">Im Beispiel wird eine Klasse `C` mit einer statischen Methode `M2` und einer Instanzmethode `M1`und zwei Delegattypen deklariert: `D1` nimmt eine Instanz von `C` und eine Zeichenfolge an, und `D2` nimmt eine Zeichenfolge an.</span><span class="sxs-lookup"><span data-stu-id="e90b4-454">The example declares a class `C` with a static method `M2` and an instance method `M1`, and two delegate types: `D1` takes an instance of `C` and a string, and `D2` takes a string.</span></span>  
  
 <span data-ttu-id="e90b4-455">Eine zweite Klasse mit dem Namen `Example` enthält den Code, mit dem die Delegaten erstellt werden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-455">A second class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="e90b4-456">Für die Instanzmethode `M1`wird ein Delegat vom Typ `D1`erstellt, der eine Open instance-Methode darstellt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-456">A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`.</span></span> <span data-ttu-id="e90b4-457">Wenn der Delegat aufgerufen wird, muss eine-Instanz übermittelt werden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-457">An instance must be passed when the delegate is invoked.</span></span>  
  
-   <span data-ttu-id="e90b4-458">Ein Delegat vom Typ `D2`, der eine offene statische Methode darstellt, wird für die statische Methode `M2`erstellt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-458">A delegate of type `D2`, representing an open static method, is created for the static method `M2`.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  
  
 <span data-ttu-id="e90b4-459">**Beispiel 2**</span><span class="sxs-lookup"><span data-stu-id="e90b4-459">**Example 2**</span></span>  
  
 <span data-ttu-id="e90b4-460">Im folgenden Codebeispiel wird die Kompatibilität von Parametertypen und Rückgabe Typen veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="e90b4-460">The following code example demonstrates compatibility of parameter types and return types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e90b4-461">In diesem Codebeispiel wird die <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29>-Methoden Überladung verwendet.</span><span class="sxs-lookup"><span data-stu-id="e90b4-461">This code example uses the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.</span></span> <span data-ttu-id="e90b4-462">Die Verwendung anderer über Ladungen, die <xref:System.Reflection.MethodInfo> übernehmen, ist ähnlich.</span><span class="sxs-lookup"><span data-stu-id="e90b4-462">The use of other overloads that take <xref:System.Reflection.MethodInfo> is similar.</span></span>  
  
 <span data-ttu-id="e90b4-463">Im Codebeispiel wird eine Basisklasse mit dem Namen `Base` und eine Klasse mit dem Namen `Derived` definiert, die von `Base`abgeleitet ist.</span><span class="sxs-lookup"><span data-stu-id="e90b4-463">The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`.</span></span> <span data-ttu-id="e90b4-464">Die abgeleitete Klasse verfügt über eine `static` (`Shared` in Visual Basic)-Methode mit dem Namen `MyMethod` mit einem Parameter vom Typ `Base` und dem Rückgabetyp `Derived`.</span><span class="sxs-lookup"><span data-stu-id="e90b4-464">The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`.</span></span> <span data-ttu-id="e90b4-465">Das Codebeispiel definiert auch einen Delegaten mit dem Namen `Example`, der einen Parameter vom Typ `Derived` und den Rückgabetyp `Base`hat.</span><span class="sxs-lookup"><span data-stu-id="e90b4-465">The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.</span></span>  
  
 <span data-ttu-id="e90b4-466">Das Codebeispiel veranschaulicht, dass der Delegat mit dem Namen `Example` verwendet werden kann, um die Methode `MyMethod`darzustellen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-466">The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`.</span></span> <span data-ttu-id="e90b4-467">Die-Methode kann aus folgenden Gründen an den-Delegaten gebunden werden:</span><span class="sxs-lookup"><span data-stu-id="e90b4-467">The method can be bound to the delegate because:</span></span>  
  
-   <span data-ttu-id="e90b4-468">Der Parametertyp des Delegaten (`Derived`) ist restriktiver als der Parametertyp `MyMethod` (`Base`), sodass es immer sicher ist, das Argument des Delegaten an `MyMethod`zu übergeben.</span><span class="sxs-lookup"><span data-stu-id="e90b4-468">The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.</span></span>  
  
-   <span data-ttu-id="e90b4-469">Der Rückgabetyp `MyMethod` (`Derived`) ist restriktiver als der Parametertyp des Delegaten (`Base`), sodass es immer sicher ist, den Rückgabetyp der Methode in den Rückgabetyp des Delegaten umzuwandeln.</span><span class="sxs-lookup"><span data-stu-id="e90b4-469">The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="e90b4-470">Das Codebeispiel erzeugt keine Ausgabe.</span><span class="sxs-lookup"><span data-stu-id="e90b4-470">The code example produces no output.</span></span>  
  
 [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]
 [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e90b4-471"><paramref name="type" /> ist <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="e90b4-471"><paramref name="type" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e90b4-472">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-472">-or-</span></span> 
 <span data-ttu-id="e90b4-473"><paramref name="method" /> ist <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="e90b4-473"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e90b4-474"><paramref name="type" /> erbt nicht <see cref="T:System.MulticastDelegate" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-474"><paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span></span>  
  
<span data-ttu-id="e90b4-475">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-475">-or-</span></span> 
 <span data-ttu-id="e90b4-476"><paramref name="type" /> ist keine <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-476"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="e90b4-477">Siehe [Laufzeittypen in Reflektion](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="e90b4-477">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="e90b4-478">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-478">-or-</span></span> 
 <span data-ttu-id="e90b4-479"><paramref name="method" /> kann nicht gebunden werden, und <paramref name="throwOnBindFailure" /> ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-479"><paramref name="method" /> cannot be bound, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span></span>  
  
<span data-ttu-id="e90b4-480">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-480">-or-</span></span> 
 <span data-ttu-id="e90b4-481"><paramref name="method" /> ist keine <see langword="RuntimeMethodInfo" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-481"><paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span></span> <span data-ttu-id="e90b4-482">Siehe [Laufzeittypen in Reflektion](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="e90b4-482">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="e90b4-483">Die <see langword="Invoke" />-Methode von <paramref name="type" /> wurde nicht gefunden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-483">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="e90b4-484">Der Aufrufer verfügt nicht über die erforderlichen Berechtigungen für den Zugriff auf <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-484">The caller does not have the permissions necessary to access <paramref name="method" />.</span></span></exception>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, Type target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Type target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateDelegate (type As Type, target As Type, method As String) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, Type ^ target, System::String ^ method);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * Type * string -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="target" Type="System.Type" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="method" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="e90b4-485">Der <see cref="T:System.Type" /> des zu erstellenden Delegaten.</span><span class="sxs-lookup"><span data-stu-id="e90b4-485">The <see cref="T:System.Type" /> of delegate to create.</span></span></param>
        <param name="target"><span data-ttu-id="e90b4-486">Der <see cref="T:System.Type" />, der die Klasse darstellt, die von <paramref name="method" /> implementiert wird.</span><span class="sxs-lookup"><span data-stu-id="e90b4-486">The <see cref="T:System.Type" /> representing the class that implements <paramref name="method" />.</span></span></param>
        <param name="method"><span data-ttu-id="e90b4-487">Der Name der statischen Methode, die durch den Delegaten dargestellt werden soll.</span><span class="sxs-lookup"><span data-stu-id="e90b4-487">The name of the static method that the delegate is to represent.</span></span></param>
        <summary><span data-ttu-id="e90b4-488">Erstellt einen Delegaten vom angegebenen Typ, der die angegebene statische Methode der angegebenen Klasse darstellt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-488">Creates a delegate of the specified type that represents the specified static method of the specified class.</span></span></summary>
        <returns><span data-ttu-id="e90b4-489">Ein Delegat vom angegebenen Typ, der die angegebene statische Methode der angegebenen Klasse darstellt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-489">A delegate of the specified type that represents the specified static method of the specified class.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e90b4-490">Diese Methode erstellt Delegaten nur für statische Methoden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-490">This method creates delegates for static methods only.</span></span> <span data-ttu-id="e90b4-491">Eine Instanzmethode ist eine Methode, die einer Instanz einer-Klasse zugeordnet ist. eine statische Methode ist eine Methode, die der Klasse selbst zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="e90b4-491">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="e90b4-492">Diese Methoden Überladung entspricht dem Aufrufen der <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29>-Methoden Überladung, wobei `false` für `ignoreCase` und `true` für `throwOnBindFailure`angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="e90b4-492">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `false` for `ignoreCase` and `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e90b4-493">Beginnend mit dem [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]kann diese Methode verwendet werden, um auf nicht öffentliche Methoden zuzugreifen, wenn dem Aufrufer <xref:System.Security.Permissions.ReflectionPermission> mit dem <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>-Flag erteilt wurde, und wenn der Berechtigungs Satz der nicht öffentlichen Methoden auf den Berechtigungs Satz des Aufrufers oder eine Teilmenge des Aufrufers beschränkt ist.</span><span class="sxs-lookup"><span data-stu-id="e90b4-493">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="e90b4-494">(Siehe [Sicherheitsüberlegungen für die Reflektion](/dotnet/framework/reflection-and-codedom/security-considerations-for-reflection).)</span><span class="sxs-lookup"><span data-stu-id="e90b4-494">(See [Security Considerations for Reflection](/dotnet/framework/reflection-and-codedom/security-considerations-for-reflection).)</span></span>  
>   
>  <span data-ttu-id="e90b4-495">Zur Verwendung dieser Funktionen sollte die Anwendung für [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] oder höher ausgelegt sein.</span><span class="sxs-lookup"><span data-stu-id="e90b4-495">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e90b4-496"><paramref name="type" /> ist <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="e90b4-496"><paramref name="type" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e90b4-497">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-497">-or-</span></span> 
 <span data-ttu-id="e90b4-498"><paramref name="target" /> ist <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="e90b4-498"><paramref name="target" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e90b4-499">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-499">-or-</span></span> 
 <span data-ttu-id="e90b4-500"><paramref name="method" /> ist <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="e90b4-500"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e90b4-501"><paramref name="type" /> erbt nicht <see cref="T:System.MulticastDelegate" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-501"><paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span></span>  
  
<span data-ttu-id="e90b4-502">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-502">-or-</span></span> 
 <span data-ttu-id="e90b4-503"><paramref name="type" /> ist keine <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-503"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="e90b4-504">Siehe [Laufzeittypen in Reflektion](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="e90b4-504">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="e90b4-505">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-505">-or-</span></span> 
 <span data-ttu-id="e90b4-506"><paramref name="target" /> ist keine <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-506"><paramref name="target" /> is not a <see langword="RuntimeType" />.</span></span>  
  
<span data-ttu-id="e90b4-507">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-507">-or-</span></span> 
 <span data-ttu-id="e90b4-508"><paramref name="target" /> ist ein offener generischer Typ.</span><span class="sxs-lookup"><span data-stu-id="e90b4-508"><paramref name="target" /> is an open generic type.</span></span> <span data-ttu-id="e90b4-509">Das bedeutet, die <see cref="P:System.Type.ContainsGenericParameters" />-Eigenschaft ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-509">That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is <see langword="true" />.</span></span>  
  
<span data-ttu-id="e90b4-510">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-510">-or-</span></span> 
 <span data-ttu-id="e90b4-511"><paramref name="method" /> ist keine <see langword="static" />-Methode (<see langword="Shared" />-Methode in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="e90b4-511"><paramref name="method" /> is not a <see langword="static" /> method (<see langword="Shared" /> method in Visual Basic).</span></span>  
  
<span data-ttu-id="e90b4-512">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-512">-or-</span></span> 
 <span data-ttu-id="e90b4-513"><paramref name="method" /> kann nicht gebunden werden, z. B. weil sie nicht gefunden wurde, und <paramref name="throwOnBindFailure" /> ist gleich <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-513"><paramref name="method" /> cannot be bound, for example because it cannot be found, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="e90b4-514">Die <see langword="Invoke" />-Methode von <paramref name="type" /> wurde nicht gefunden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-514">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="e90b4-515">Der Aufrufer verfügt nicht über die erforderlichen Berechtigungen für den Zugriff auf <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-515">The caller does not have the permissions necessary to access <paramref name="method" />.</span></span></exception>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object firstArgument, System.Reflection.MethodInfo method, bool throwOnBindFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object firstArgument, class System.Reflection.MethodInfo method, bool throwOnBindFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateDelegate (type As Type, firstArgument As Object, method As MethodInfo, throwOnBindFailure As Boolean) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ firstArgument, System::Reflection::MethodInfo ^ method, bool throwOnBindFailure);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * System.Reflection.MethodInfo * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, firstArgument, method, throwOnBindFailure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="firstArgument" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="throwOnBindFailure" Type="System.Boolean" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="e90b4-516">Ein <see cref="T:System.Type" />, der den Typ des zu erstellenden Delegaten darstellt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-516">A <see cref="T:System.Type" /> representing the type of delegate to create.</span></span></param>
        <param name="firstArgument"><span data-ttu-id="e90b4-517">Ein <see cref="T:System.Object" />, das das erste Argument der Methode ist, die der Delegat darstellt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-517">An <see cref="T:System.Object" /> that is the first argument of the method the delegate represents.</span></span> <span data-ttu-id="e90b4-518">Bei Instanzmethoden muss dieses mit dem Instanztyp kompatibel sein.</span><span class="sxs-lookup"><span data-stu-id="e90b4-518">For instance methods, it must be compatible with the instance type.</span></span></param>
        <param name="method"><span data-ttu-id="e90b4-519">Die <see cref="T:System.Reflection.MethodInfo" />, die die statische Methode oder Instanzmethode beschreibt, die der Delegat darstellen soll.</span><span class="sxs-lookup"><span data-stu-id="e90b4-519">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span></span></param>
        <param name="throwOnBindFailure"><span data-ttu-id="e90b4-520"><see langword="true" />, um eine Ausnahme auszulösen, wenn <paramref name="method" /> nicht gebunden werden kann, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-520"><see langword="true" /> to throw an exception if <paramref name="method" /> cannot be bound; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="e90b4-521">Erstellt einen Delegaten vom angegebenen Typ, der die angegebene statische Methode oder Instanzmethode mit dem angegebenen ersten Argument und dem angegebenen Verhalten bei Bindungsfehlern darstellt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-521">Creates a delegate of the specified type that represents the specified static or instance method, with the specified first argument and the specified behavior on failure to bind.</span></span></summary>
        <returns><span data-ttu-id="e90b4-522">Ein Delegat des angegebenen Typs, der die angegebene statische Methode oder Instanzmethode darstellt, oder <see langword="null" />, wenn <paramref name="throwOnBindFailure" /><see langword="false" /> ist und der Delegat nicht an <paramref name="method" /> gebunden werden kann.</span><span class="sxs-lookup"><span data-stu-id="e90b4-522">A delegate of the specified type that represents the specified static or instance method, or <see langword="null" /> if <paramref name="throwOnBindFailure" /> is <see langword="false" /> and the delegate cannot be bound to <paramref name="method" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e90b4-523">Diese Methoden Überladung und die <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29>-Methoden Überladung, die immer bei Bindungs Fehlern auslöst, stellen die flexibelste Möglichkeit dar, Delegaten zu erstellen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-523">This method overload and the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> method overload, which always throws on failure to bind, provide the most flexible way to create delegates.</span></span> <span data-ttu-id="e90b4-524">Sie können Sie zum Erstellen von Delegaten für statische Methoden oder Instanzmethoden mit oder ohne erstes Argument verwenden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-524">You can use them to create delegates for either static or instance methods, with or without a first argument.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e90b4-525">Wenn Sie kein erstes Argument angeben, verwenden Sie die <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29>-Methoden Überladung, um die Leistung zu verbessern.</span><span class="sxs-lookup"><span data-stu-id="e90b4-525">If you do not supply a first argument, use the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload for better performance.</span></span>  
  
 <span data-ttu-id="e90b4-526">Der Delegattyp und die Methode müssen über kompatible Rückgabe Typen verfügen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-526">The delegate type and the method must have compatible return types.</span></span> <span data-ttu-id="e90b4-527">Das heißt, der Rückgabetyp von `method` muss dem Rückgabetyp `type`zugewiesen werden können.</span><span class="sxs-lookup"><span data-stu-id="e90b4-527">That is, the return type of `method` must be assignable to the return type of `type`.</span></span>  
  
 <span data-ttu-id="e90b4-528">Wenn `firstArgument` bereitgestellt wird, wird Sie jedes Mal an `method` übergeben, wenn der Delegat aufgerufen wird. `firstArgument` wird als an den Delegaten gebunden bezeichnet, und der Delegat wird als das erste Argument geschlossen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-528">If `firstArgument` is supplied, it is passed to `method` every time the delegate is invoked; `firstArgument` is said to be bound to the delegate, and the delegate is said to be closed over its first argument.</span></span> <span data-ttu-id="e90b4-529">Wenn `method` `static` (`Shared` in Visual Basic) ist, enthält die Argumentliste, die beim Aufrufen des Delegaten angegeben wird, alle Parameter Außer dem ersten; Wenn `method` eine Instanzmethode ist, wird `firstArgument` an den ausgeblendeten Instanzparameter übergeben ( C#dargestellt durch `this` in oder durch `Me` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="e90b4-529">If `method` is `static` (`Shared` in Visual Basic), the argument list supplied when invoking the delegate includes all parameters except the first; if `method` is an instance method, then `firstArgument` is passed to the hidden instance parameter (represented by `this` in C#, or by `Me` in Visual Basic).</span></span>  
  
 <span data-ttu-id="e90b4-530">Wenn `firstArgument` angegeben wird, muss der erste Parameter von `method` ein Referenztyp sein, und `firstArgument` muss mit diesem Typ kompatibel sein.</span><span class="sxs-lookup"><span data-stu-id="e90b4-530">If `firstArgument` is supplied, the first parameter of `method` must be a reference type, and `firstArgument` must be compatible with that type.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e90b4-531">Wenn `method` `static` (`Shared` in Visual Basic) und der erste Parameter vom Typ <xref:System.Object> oder <xref:System.ValueType>ist, kann `firstArgument` ein Werttyp sein.</span><span class="sxs-lookup"><span data-stu-id="e90b4-531">If `method` is `static` (`Shared` in Visual Basic) and its first parameter is of type <xref:System.Object> or <xref:System.ValueType>, then `firstArgument` can be a value type.</span></span> <span data-ttu-id="e90b4-532">In diesem Fall wird `firstArgument` automatisch in einen Kasten konvertiert.</span><span class="sxs-lookup"><span data-stu-id="e90b4-532">In this case `firstArgument` is automatically boxed.</span></span> <span data-ttu-id="e90b4-533">Das automatische Boxing erfolgt nicht für andere Argumente, wie dies bei einem C# -oder-Visual Basic Funktions Aufrufes der Fall wäre.</span><span class="sxs-lookup"><span data-stu-id="e90b4-533">Automatic boxing does not occur for any other arguments, as it would in a C# or Visual Basic function call.</span></span>  
  
 <span data-ttu-id="e90b4-534">Wenn `firstArgument` ein NULL-Verweis ist und `method` eine Instanzmethode ist, hängt das Ergebnis von den Signaturen des Delegattyps `type` und von `method`ab:</span><span class="sxs-lookup"><span data-stu-id="e90b4-534">If `firstArgument` is a null reference and `method` is an instance method, the result depends on the signatures of the delegate type `type` and of `method`:</span></span>  
  
-   <span data-ttu-id="e90b4-535">Wenn die Signatur von `type` explizit den ausgeblendeten ersten Parameter `method`enthält, wird der Delegat als eine Open instance-Methode bezeichnet.</span><span class="sxs-lookup"><span data-stu-id="e90b4-535">If the signature of `type` explicitly includes the hidden first parameter of `method`, the delegate is said to represent an open instance method.</span></span> <span data-ttu-id="e90b4-536">Wenn der Delegat aufgerufen wird, wird das erste Argument in der Argumentliste an den ausgeblendeten Instanzparameter `method`übergeben.</span><span class="sxs-lookup"><span data-stu-id="e90b4-536">When the delegate is invoked, the first argument in the argument list is passed to the hidden instance parameter of `method`.</span></span>  
  
-   <span data-ttu-id="e90b4-537">Wenn die Signaturen von `method` und `type` entsprechen (d. h. alle Parametertypen sind kompatibel), wird der Delegat als NULL-Verweis geschlossen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-537">If the signatures of `method` and `type` match (that is, all parameter types are compatible), then the delegate is said to be closed over a null reference.</span></span> <span data-ttu-id="e90b4-538">Das Aufrufen des Delegaten ähnelt dem Aufrufen einer Instanzmethode für eine NULL-Instanz, was nicht besonders nützlich ist.</span><span class="sxs-lookup"><span data-stu-id="e90b4-538">Invoking the delegate is like calling an instance method on a null instance, which is not a particularly useful thing to do.</span></span>  
  
 <span data-ttu-id="e90b4-539">Wenn `firstArgument` ein NULL-Verweis ist und `method` statisch ist, hängt das Ergebnis von den Signaturen des Delegattyps `type` und von `method`ab:</span><span class="sxs-lookup"><span data-stu-id="e90b4-539">If `firstArgument` is a null reference and `method` is static, the result depends on the signatures of the delegate type `type` and of `method`:</span></span>  
  
-   <span data-ttu-id="e90b4-540">Wenn die Signatur von `method` und `type` abgleichen ist (d. h. alle Parametertypen sind kompatibel), wird der Delegat als eine offene statische Methode bezeichnet.</span><span class="sxs-lookup"><span data-stu-id="e90b4-540">If the signature of `method` and `type` match (that is, all parameter types are compatible), the delegate is said to represent an open static method.</span></span> <span data-ttu-id="e90b4-541">Dies ist der häufigste Fall bei statischen Methoden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-541">This is the most common case for static methods.</span></span> <span data-ttu-id="e90b4-542">In diesem Fall können Sie eine etwas bessere Leistung erzielen, indem Sie die <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29>-Methoden Überladung verwenden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-542">In this case, you can get slightly better performance by using the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload.</span></span>  
  
-   <span data-ttu-id="e90b4-543">Wenn die Signatur von `type` mit dem zweiten Parameter von `method` beginnt und die restlichen Parametertypen kompatibel sind, wird der Delegat als ein NULL-Verweis geschlossen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-543">If the signature of `type` begins with the second parameter of `method` and the rest of the parameter types are compatible, then the delegate is said to be closed over a null reference.</span></span> <span data-ttu-id="e90b4-544">Wenn der Delegat aufgerufen wird, wird ein NULL-Verweis an den ersten Parameter `method`übergeben.</span><span class="sxs-lookup"><span data-stu-id="e90b4-544">When the delegate is invoked, a null reference is passed to the first parameter of `method`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e90b4-545">Beginnend mit dem [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]kann diese Methode verwendet werden, um auf nicht öffentliche Methoden zuzugreifen, wenn dem Aufrufer <xref:System.Security.Permissions.ReflectionPermission> mit dem <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>-Flag erteilt wurde, und wenn der Berechtigungs Satz der nicht öffentlichen Methoden auf den Berechtigungs Satz des Aufrufers oder eine Teilmenge des Aufrufers beschränkt ist.</span><span class="sxs-lookup"><span data-stu-id="e90b4-545">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="e90b4-546">(Siehe [Sicherheitsüberlegungen für die Reflektion](/dotnet/framework/reflection-and-codedom/security-considerations-for-reflection).)</span><span class="sxs-lookup"><span data-stu-id="e90b4-546">(See [Security Considerations for Reflection](/dotnet/framework/reflection-and-codedom/security-considerations-for-reflection).)</span></span>  
>   
>  <span data-ttu-id="e90b4-547">Zur Verwendung dieser Funktionen sollte die Anwendung für [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] oder höher ausgelegt sein.</span><span class="sxs-lookup"><span data-stu-id="e90b4-547">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
## <a name="compatible-parameter-types-and-return-type"></a><span data-ttu-id="e90b4-548">Kompatible Parameter Typen und Rückgabetyp</span><span class="sxs-lookup"><span data-stu-id="e90b4-548">Compatible Parameter Types and Return Type</span></span>  
 <span data-ttu-id="e90b4-549">Die Parametertypen und der Rückgabetyp eines Delegaten müssen mit den Parametertypen und dem Rückgabetyp der Methode kompatibel sein, die der Delegat darstellt. die Typen müssen nicht exakt übereinstimmen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-549">The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e90b4-550">In den .NET Framework Version 1,0 und 1,1 müssen die Typen genau übereinstimmen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-550">In the .NET Framework version 1.0 and 1.1 the types must match exactly.</span></span>  
  
 <span data-ttu-id="e90b4-551">Ein Parameter eines Delegaten ist mit dem entsprechenden Parameter einer Methode kompatibel, wenn der Typ des Delegatenparameters restriktiver ist als der Methodenparameter, da so gewährleistet ist, dass ein an den Delegaten übergebenes Argument problemlos an die Methode weitergeleitet werden kann.</span><span class="sxs-lookup"><span data-stu-id="e90b4-551">A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.</span></span>  
  
 <span data-ttu-id="e90b4-552">Ebenso ist der Rückgabetyp eines Delegaten kompatibel mit dem Rückgabetyp einer Methode, wenn der Rückgabetyp der Methode restriktiver ist als der Rückgabetyp des Delegaten, da so gewährleistet ist, dass der Rückgabewert der Methode problemlos in den Rückgabetyp des Delegaten umgewandelt werden kann.</span><span class="sxs-lookup"><span data-stu-id="e90b4-552">Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="e90b4-553">Ein Delegat mit einem Parameter vom Typ <xref:System.Collections.Hashtable> und der Rückgabetyp <xref:System.Object> können z. b. eine Methode mit einem Parameter vom Typ <xref:System.Object> und einen Rückgabewert vom Typ <xref:System.Collections.Hashtable>darstellen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-553">For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.</span></span>  
  
## <a name="determining-the-methods-a-delegate-can-represent"></a><span data-ttu-id="e90b4-554">Bestimmen der Methoden, die ein Delegat darstellen kann</span><span class="sxs-lookup"><span data-stu-id="e90b4-554">Determining the Methods a Delegate Can Represent</span></span>  
 <span data-ttu-id="e90b4-555">Eine weitere nützliche Methode, um die von dieser Überladung von <xref:System.Delegate.CreateDelegate%2A> bereitgestellte Flexibilität zu berücksichtigen, besteht darin, dass jeder angegebene Delegat vier verschiedene Kombinationen von Methoden Signatur und Methodenart (statisch und Instanz) darstellen kann.</span><span class="sxs-lookup"><span data-stu-id="e90b4-555">Another useful way to think of the flexibility provided by this overload of <xref:System.Delegate.CreateDelegate%2A> is that any given delegate can represent four different combinations of method signature and method kind (static versus instance).</span></span> <span data-ttu-id="e90b4-556">Angenommen, ein Delegattyp `D` mit einem Argument vom Typ `C`.</span><span class="sxs-lookup"><span data-stu-id="e90b4-556">Consider a delegate type `D` with one argument of type `C`.</span></span> <span data-ttu-id="e90b4-557">Im folgenden werden die Methoden beschrieben, die `D` darstellen können. der Rückgabetyp wird ignoriert, da er in allen Fällen abgeglichen werden muss</span><span class="sxs-lookup"><span data-stu-id="e90b4-557">The following describes the methods `D` can represent, ignoring the return type since it must match in all cases:</span></span>  
  
-   <span data-ttu-id="e90b4-558">`D` können jede Instanzmethode darstellen, die genau ein Argument vom Typ `C`hat, unabhängig davon, zu welchem Typ die Instanzmethode gehört.</span><span class="sxs-lookup"><span data-stu-id="e90b4-558">`D` can represent any instance method that has exactly one argument of type `C`, regardless of what type the instance method belongs to.</span></span> <span data-ttu-id="e90b4-559">Wenn <xref:System.Delegate.CreateDelegate%2A> aufgerufen wird, ist `firstArgument` eine Instanz des Typs, zu dem `method` gehört, und der resultierende Delegat wird als für diese Instanz geschlossen bezeichnet.</span><span class="sxs-lookup"><span data-stu-id="e90b4-559">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of the type `method` belongs to, and the resulting delegate is said to be closed over that instance.</span></span> <span data-ttu-id="e90b4-560">(Triviale `D` können auch über einen NULL-Verweis geschlossen werden, wenn `firstArgument` `null`ist.)</span><span class="sxs-lookup"><span data-stu-id="e90b4-560">(Trivially, `D` can also be closed over a null reference if `firstArgument` is `null`.)</span></span>  
  
-   <span data-ttu-id="e90b4-561">`D` kann eine Instanzmethode `C` darstellen, die keine Argumente aufweist.</span><span class="sxs-lookup"><span data-stu-id="e90b4-561">`D` can represent an instance method of `C` that has no arguments.</span></span> <span data-ttu-id="e90b4-562">Wenn <xref:System.Delegate.CreateDelegate%2A> aufgerufen wird, ist `firstArgument` ein NULL-Verweis.</span><span class="sxs-lookup"><span data-stu-id="e90b4-562">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference.</span></span> <span data-ttu-id="e90b4-563">Der resultierende Delegat stellt eine Open instance-Methode dar, und eine Instanz von `C` muss jedes Mal, wenn Sie aufgerufen wird, bereitgestellt werden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-563">The resulting delegate represents an open instance method, and an instance of `C` must be supplied each time it is invoked.</span></span>  
  
-   <span data-ttu-id="e90b4-564">`D` kann eine statische Methode darstellen, die ein Argument vom Typ "`C`" annimmt, und diese Methode kann zu einem beliebigen Typ gehören.</span><span class="sxs-lookup"><span data-stu-id="e90b4-564">`D` can represent a static method that takes one argument of type `C`, and that method can belong to any type.</span></span> <span data-ttu-id="e90b4-565">Wenn <xref:System.Delegate.CreateDelegate%2A> aufgerufen wird, ist `firstArgument` ein NULL-Verweis.</span><span class="sxs-lookup"><span data-stu-id="e90b4-565">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference.</span></span> <span data-ttu-id="e90b4-566">Der resultierende Delegat stellt eine offene statische Methode dar, und eine Instanz von `C` muss jedes Mal, wenn Sie aufgerufen wird, bereitgestellt werden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-566">The resulting delegate represents an open static method, and an instance of `C` must be supplied each time it is invoked.</span></span>  
  
-   <span data-ttu-id="e90b4-567">`D` kann eine statische Methode darstellen, die dem Typ `F` angehört und über zwei Argumente vom Typ `F` und vom Typ `C`verfügt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-567">`D` can represent a static method that belongs to type `F` and has two arguments, of type `F` and type `C`.</span></span> <span data-ttu-id="e90b4-568">Wenn <xref:System.Delegate.CreateDelegate%2A> aufgerufen wird, ist `firstArgument` eine Instanz von `F`.</span><span class="sxs-lookup"><span data-stu-id="e90b4-568">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of `F`.</span></span> <span data-ttu-id="e90b4-569">Der resultierende Delegat stellt eine statische Methode dar, die über diese Instanz von `F`geschlossen wird.</span><span class="sxs-lookup"><span data-stu-id="e90b4-569">The resulting delegate represents a static method that is closed over that instance of `F`.</span></span> <span data-ttu-id="e90b4-570">Beachten Sie, dass die statische Methode in dem Fall, in dem `F` und `C` denselben Typ haben, über zwei Argumente dieses Typs verfügt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-570">Note that in the case where `F` and `C` are the same type, the static method has two arguments of that type.</span></span> <span data-ttu-id="e90b4-571">(In diesem Fall wird `D` über einen NULL-Verweis geschlossen, wenn `firstArgument` `null`ist.)</span><span class="sxs-lookup"><span data-stu-id="e90b4-571">(In this case, `D` is closed over a null reference if `firstArgument` is `null`.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e90b4-572">Dieser Abschnitt enthält drei Codebeispiele.</span><span class="sxs-lookup"><span data-stu-id="e90b4-572">This section contains three code examples.</span></span> <span data-ttu-id="e90b4-573">Im ersten Beispiel werden die vier Arten von Delegaten veranschaulicht, die erstellt werden können: geschlossen über eine Instanzmethode, öffnen über eine Instanzmethode, öffnen über eine statische Methode und schließen über eine statische Methode.</span><span class="sxs-lookup"><span data-stu-id="e90b4-573">The first example demonstrates the four kinds of delegates that can be created: closed over an instance method, open over an instance method, open over a static method, and closed over a static method.</span></span>  
  
 <span data-ttu-id="e90b4-574">Im zweiten Codebeispiel werden kompatible Parametertypen und Rückgabe Typen veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="e90b4-574">The second code example demonstrates compatible parameter types and return types.</span></span>  
  
 <span data-ttu-id="e90b4-575">Das dritte Codebeispiel definiert einen einzelnen Delegattyp und zeigt alle Methoden an, die der Delegattyp darstellen kann.</span><span class="sxs-lookup"><span data-stu-id="e90b4-575">The third code example defines a single delegate type, and shows all the methods that delegate type can represent.</span></span>  
  
 <span data-ttu-id="e90b4-576">**Beispiel 1**</span><span class="sxs-lookup"><span data-stu-id="e90b4-576">**Example 1**</span></span>  
  
 <span data-ttu-id="e90b4-577">Im folgenden Codebeispiel werden die vier Möglichkeiten veranschaulicht, wie ein Delegat mit dieser Überladung der <xref:System.Delegate.CreateDelegate%2A>-Methode erstellt werden kann.</span><span class="sxs-lookup"><span data-stu-id="e90b4-577">The following code example demonstrates the four ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e90b4-578">Es gibt zwei über Ladungen der <xref:System.Delegate.CreateDelegate%2A>-Methode, die `firstArgument` und eine <xref:System.Reflection.MethodInfo>angeben. die Funktionalität ist identisch, mit der Ausnahme, dass Sie angeben können, ob bei Bindungs Fehlern eine Ausnahme ausgelöst werden soll, die andere immer auslöst.</span><span class="sxs-lookup"><span data-stu-id="e90b4-578">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="e90b4-579">In diesem Codebeispiel werden beide über Ladungen verwendet.</span><span class="sxs-lookup"><span data-stu-id="e90b4-579">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="e90b4-580">Im Beispiel wird eine Klasse `C` mit einer statischen Methode `M2` und einer Instanzmethode `M1`und drei Delegattypen deklariert: `D1` eine Instanz von `C` und eine Zeichenfolge annimmt, `D2` eine Zeichenfolge annimmt und `D3` über keine Argumente verfügt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-580">The example declares a class `C` with a static method `M2` and an instance method `M1`, and three delegate types: `D1` takes an instance of `C` and a string, `D2` takes a string, and `D3` has no arguments.</span></span>  
  
 <span data-ttu-id="e90b4-581">Eine zweite Klasse mit dem Namen `Example` enthält den Code, mit dem die Delegaten erstellt werden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-581">A second class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="e90b4-582">Ein Delegat vom Typ `D2`, geschlossen über eine Instanz von `C`, wird für die Instanzmethode `M1`erstellt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-582">A delegate of type `D2`, closed over an instance of `C`, is created for the instance method `M1`.</span></span> <span data-ttu-id="e90b4-583">Sie wird mit anderen Zeichen folgen aufgerufen, um anzuzeigen, dass die gebundene Instanz von `C` immer verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="e90b4-583">It is invoked with different strings, to show that the bound instance of `C` is always used.</span></span>  
  
-   <span data-ttu-id="e90b4-584">Für die Instanzmethode `M1`wird ein Delegat vom Typ `D1`erstellt, der eine Open instance-Methode darstellt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-584">A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`.</span></span> <span data-ttu-id="e90b4-585">Wenn der Delegat aufgerufen wird, muss eine-Instanz übermittelt werden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-585">An instance must be passed when the delegate is invoked.</span></span>  
  
-   <span data-ttu-id="e90b4-586">Ein Delegat vom Typ `D2`, der eine offene statische Methode darstellt, wird für die statische Methode `M2`erstellt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-586">A delegate of type `D2`, representing an open static method, is created for the static method `M2`.</span></span>  
  
-   <span data-ttu-id="e90b4-587">Schließlich wird ein Delegat vom Typ `D3`, der über eine Zeichenfolge geschlossen wurde, für die statische Methode `M2`erstellt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-587">Finally, a delegate of type `D3`, closed over a string, is created for the static method `M2`.</span></span> <span data-ttu-id="e90b4-588">Die-Methode wird aufgerufen, um anzuzeigen, dass Sie die gebundene Zeichenfolge verwendet.</span><span class="sxs-lookup"><span data-stu-id="e90b4-588">The method is invoked to show that it uses the bound string.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  
  
 <span data-ttu-id="e90b4-589">**Beispiel 2**</span><span class="sxs-lookup"><span data-stu-id="e90b4-589">**Example 2**</span></span>  
  
 <span data-ttu-id="e90b4-590">Im folgenden Codebeispiel wird die Kompatibilität von Parametertypen und Rückgabe Typen veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="e90b4-590">The following code example demonstrates compatibility of parameter types and return types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e90b4-591">In diesem Codebeispiel wird die <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29>-Methoden Überladung verwendet.</span><span class="sxs-lookup"><span data-stu-id="e90b4-591">This code example uses the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.</span></span> <span data-ttu-id="e90b4-592">Die Verwendung anderer über Ladungen, die <xref:System.Reflection.MethodInfo> übernehmen, ist ähnlich.</span><span class="sxs-lookup"><span data-stu-id="e90b4-592">The use of other overloads that take <xref:System.Reflection.MethodInfo> is similar.</span></span>  
  
 <span data-ttu-id="e90b4-593">Im Codebeispiel wird eine Basisklasse mit dem Namen `Base` und eine Klasse mit dem Namen `Derived` definiert, die von `Base`abgeleitet ist.</span><span class="sxs-lookup"><span data-stu-id="e90b4-593">The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`.</span></span> <span data-ttu-id="e90b4-594">Die abgeleitete Klasse verfügt über eine `static` (`Shared` in Visual Basic)-Methode mit dem Namen `MyMethod` mit einem Parameter vom Typ `Base` und dem Rückgabetyp `Derived`.</span><span class="sxs-lookup"><span data-stu-id="e90b4-594">The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`.</span></span> <span data-ttu-id="e90b4-595">Das Codebeispiel definiert auch einen Delegaten mit dem Namen `Example`, der einen Parameter vom Typ `Derived` und den Rückgabetyp `Base`hat.</span><span class="sxs-lookup"><span data-stu-id="e90b4-595">The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.</span></span>  
  
 <span data-ttu-id="e90b4-596">Das Codebeispiel veranschaulicht, dass der Delegat mit dem Namen `Example` verwendet werden kann, um die Methode `MyMethod`darzustellen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-596">The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`.</span></span> <span data-ttu-id="e90b4-597">Die-Methode kann aus folgenden Gründen an den-Delegaten gebunden werden:</span><span class="sxs-lookup"><span data-stu-id="e90b4-597">The method can be bound to the delegate because:</span></span>  
  
-   <span data-ttu-id="e90b4-598">Der Parametertyp des Delegaten (`Derived`) ist restriktiver als der Parametertyp `MyMethod` (`Base`), sodass es immer sicher ist, das Argument des Delegaten an `MyMethod`zu übergeben.</span><span class="sxs-lookup"><span data-stu-id="e90b4-598">The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.</span></span>  
  
-   <span data-ttu-id="e90b4-599">Der Rückgabetyp `MyMethod` (`Derived`) ist restriktiver als der Parametertyp des Delegaten (`Base`), sodass es immer sicher ist, den Rückgabetyp der Methode in den Rückgabetyp des Delegaten umzuwandeln.</span><span class="sxs-lookup"><span data-stu-id="e90b4-599">The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="e90b4-600">Das Codebeispiel erzeugt keine Ausgabe.</span><span class="sxs-lookup"><span data-stu-id="e90b4-600">The code example produces no output.</span></span>  
  
 [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]
 [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  
  
 <span data-ttu-id="e90b4-601">**Beispiel 3**</span><span class="sxs-lookup"><span data-stu-id="e90b4-601">**Example 3**</span></span>  
  
 <span data-ttu-id="e90b4-602">Im folgenden Codebeispiel werden alle Methoden gezeigt, die ein einzelner Delegattyp darstellen kann.</span><span class="sxs-lookup"><span data-stu-id="e90b4-602">The following code example shows all the methods a single delegate type can represent.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e90b4-603">Es gibt zwei über Ladungen der <xref:System.Delegate.CreateDelegate%2A>-Methode, die `firstArgument` und eine <xref:System.Reflection.MethodInfo>angeben. die Funktionalität ist identisch, mit der Ausnahme, dass Sie angeben können, ob bei Bindungs Fehlern eine Ausnahme ausgelöst werden soll, die andere immer auslöst.</span><span class="sxs-lookup"><span data-stu-id="e90b4-603">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="e90b4-604">In diesem Codebeispiel werden beide über Ladungen verwendet.</span><span class="sxs-lookup"><span data-stu-id="e90b4-604">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="e90b4-605">Im Codebeispiel werden zwei Klassen definiert: `C` und `F`und ein Delegattyp, der mit einem Argument vom Typ `C``D` wird.</span><span class="sxs-lookup"><span data-stu-id="e90b4-605">The code example defines two classes, `C` and `F`, and a delegate type `D` with one argument of type `C`.</span></span> <span data-ttu-id="e90b4-606">Die Klassen verfügen über übereinstimmende statische und Instanzmethoden `M1`, `M3`und `M4`, und Class `C` verfügt auch über eine Instanzmethode `M2`, die keine Argumente aufweist.</span><span class="sxs-lookup"><span data-stu-id="e90b4-606">The classes have matching static and instance methods `M1`, `M3`, and `M4`, and class `C` also has an instance method `M2` that has no arguments.</span></span>  
  
 <span data-ttu-id="e90b4-607">Eine dritte Klasse mit dem Namen `Example` enthält den Code, mit dem die Delegaten erstellt werden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-607">A third class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="e90b4-608">Delegaten werden für Instanzmethoden`M1` vom Typ `C` und Type `F`; erstellt. Jede wird über eine Instanz des jeweiligen Typs geschlossen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-608">Delegates are created for instance method `M1` of type `C` and type `F`; each is closed over an instance of the respective type.</span></span> <span data-ttu-id="e90b4-609">Methoden `M1` vom Typ `C` in der die `ID` Eigenschaften der gebundenen Instanz und des Arguments angezeigt werden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-609">Method `M1` of type `C` displays the `ID` properties of the bound instance and of the argument.</span></span>  
  
-   <span data-ttu-id="e90b4-610">Ein Delegat wird für die-Methode `M2` vom Typ "`C`" erstellt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-610">A delegate is created for method `M2` of type `C`.</span></span> <span data-ttu-id="e90b4-611">Dies ist ein Open instance-Delegat, bei dem das-Argument des Delegaten das ausgeblendete erste Argument der Instanzmethode darstellt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-611">This is an open instance delegate, in which the argument of the delegate represents the hidden first argument on the instance method.</span></span> <span data-ttu-id="e90b4-612">Die Methode hat keine anderen Argumente.</span><span class="sxs-lookup"><span data-stu-id="e90b4-612">The method has no other arguments.</span></span>  
  
-   <span data-ttu-id="e90b4-613">Delegaten werden für statische Methoden `M3` vom Typ `C` und vom Typ `F`; erstellt. Dabei handelt es sich um offene statische Delegaten.</span><span class="sxs-lookup"><span data-stu-id="e90b4-613">Delegates are created for static method `M3` of type `C` and type `F`; these are open static delegates.</span></span>  
  
-   <span data-ttu-id="e90b4-614">Zum Schluss werden Delegaten für statische Methoden `M4` vom Typ "`C`" und "Type `F`;" erstellt. Jede Methode weist den deklarierenden Typ als erstes Argument auf, und es wird eine Instanz des Typs bereitgestellt, sodass die Delegaten über ihren ersten Argumenten geschlossen werden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-614">Finally, delegates are created for static method `M4` of type `C` and type `F`; each method has the declaring type as its first argument, and an instance of the type is supplied, so the delegates are closed over their first arguments.</span></span> <span data-ttu-id="e90b4-615">Methoden `M4` vom Typ `C` in der die `ID` Eigenschaften der gebundenen Instanz und des Arguments angezeigt werden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-615">Method `M4` of type `C` displays the `ID` properties of the bound instance and of the argument.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e90b4-616"><paramref name="type" /> ist <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="e90b4-616"><paramref name="type" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e90b4-617">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-617">-or-</span></span> 
 <span data-ttu-id="e90b4-618"><paramref name="method" /> ist <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="e90b4-618"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e90b4-619"><paramref name="type" /> erbt nicht <see cref="T:System.MulticastDelegate" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-619"><paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span></span>  
  
<span data-ttu-id="e90b4-620">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-620">-or-</span></span> 
 <span data-ttu-id="e90b4-621"><paramref name="type" /> ist keine <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-621"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="e90b4-622">Siehe [Laufzeittypen in Reflektion](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="e90b4-622">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="e90b4-623">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-623">-or-</span></span> 
 <span data-ttu-id="e90b4-624"><paramref name="method" /> kann nicht gebunden werden, und <paramref name="throwOnBindFailure" /> ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-624"><paramref name="method" /> cannot be bound, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span></span>  
  
<span data-ttu-id="e90b4-625">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-625">-or-</span></span> 
 <span data-ttu-id="e90b4-626"><paramref name="method" /> ist keine <see langword="RuntimeMethodInfo" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-626"><paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span></span> <span data-ttu-id="e90b4-627">Siehe [Laufzeittypen in Reflektion](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="e90b4-627">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="e90b4-628">Die <see langword="Invoke" />-Methode von <paramref name="type" /> wurde nicht gefunden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-628">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="e90b4-629">Der Aufrufer verfügt nicht über die erforderlichen Berechtigungen für den Zugriff auf <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-629">The caller does not have the permissions necessary to access <paramref name="method" />.</span></span></exception>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object target, string method, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object target, string method, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateDelegate (type As Type, target As Object, method As String, ignoreCase As Boolean) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ target, System::String ^ method, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * string * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="target" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="method" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="ignoreCase" Type="System.Boolean" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="e90b4-630">Der <see cref="T:System.Type" /> des zu erstellenden Delegaten.</span><span class="sxs-lookup"><span data-stu-id="e90b4-630">The <see cref="T:System.Type" /> of delegate to create.</span></span></param>
        <param name="target"><span data-ttu-id="e90b4-631">Die Klasseninstanz, für die <paramref name="method" /> aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="e90b4-631">The class instance on which <paramref name="method" /> is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="e90b4-632">Der Name der Instanzenmethode, die durch den Delegaten dargestellt werden soll.</span><span class="sxs-lookup"><span data-stu-id="e90b4-632">The name of the instance method that the delegate is to represent.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="e90b4-633">Ein boolescher Wert, der angibt, ob die Groß- und Kleinschreibung beim Vergleichen des Methodennamens berücksichtigt werden soll.</span><span class="sxs-lookup"><span data-stu-id="e90b4-633">A Boolean indicating whether to ignore the case when comparing the name of the method.</span></span></param>
        <summary><span data-ttu-id="e90b4-634">Erstellt einen Delegaten vom angegebenen Typ, der die angegebene Instanzenmethode darstellt, die für die angegebene Klasseninstanz aufgerufen werden soll, wobei die Groß- und Kleinschreibung den Angaben entsprechend berücksichtigt bzw. nicht berücksichtigt wird.</span><span class="sxs-lookup"><span data-stu-id="e90b4-634">Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance with the specified case-sensitivity.</span></span></summary>
        <returns><span data-ttu-id="e90b4-635">Ein Delegat vom angegebenen Typ, der die angegebene Instanzenmethode darstellt, die für die angegebene Klasseninstanz aufgerufen werden soll.</span><span class="sxs-lookup"><span data-stu-id="e90b4-635">A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e90b4-636">Diese Methode erstellt nur Delegaten für Instanzmethoden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-636">This method creates delegates for instance methods only.</span></span> <span data-ttu-id="e90b4-637">Eine Instanzmethode ist eine Methode, die einer Instanz einer-Klasse zugeordnet ist. eine statische Methode ist eine Methode, die der Klasse selbst zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="e90b4-637">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="e90b4-638">Diese Methoden Überladung entspricht dem Aufrufen der <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29>-Methoden Überladung, die `true` für `throwOnBindFailure`angibt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-638">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e90b4-639">Beginnend mit dem [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]kann diese Methode verwendet werden, um auf nicht öffentliche Methoden zuzugreifen, wenn dem Aufrufer <xref:System.Security.Permissions.ReflectionPermission> mit dem <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>-Flag erteilt wurde, und wenn der Berechtigungs Satz der nicht öffentlichen Methoden auf den Berechtigungs Satz des Aufrufers oder eine Teilmenge des Aufrufers beschränkt ist.</span><span class="sxs-lookup"><span data-stu-id="e90b4-639">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="e90b4-640">(Siehe [Sicherheitsüberlegungen für die Reflektion](/dotnet/framework/reflection-and-codedom/security-considerations-for-reflection).)</span><span class="sxs-lookup"><span data-stu-id="e90b4-640">(See [Security Considerations for Reflection](/dotnet/framework/reflection-and-codedom/security-considerations-for-reflection).)</span></span>  
>   
>  <span data-ttu-id="e90b4-641">Zur Verwendung dieser Funktionen sollte die Anwendung für [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] oder höher ausgelegt sein.</span><span class="sxs-lookup"><span data-stu-id="e90b4-641">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e90b4-642"><paramref name="type" /> ist <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="e90b4-642"><paramref name="type" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e90b4-643">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-643">-or-</span></span> 
 <span data-ttu-id="e90b4-644"><paramref name="target" /> ist <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="e90b4-644"><paramref name="target" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e90b4-645">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-645">-or-</span></span> 
 <span data-ttu-id="e90b4-646"><paramref name="method" /> ist <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="e90b4-646"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e90b4-647"><paramref name="type" /> erbt nicht <see cref="T:System.MulticastDelegate" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-647"><paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span></span>  
  
<span data-ttu-id="e90b4-648">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-648">-or-</span></span> 
 <span data-ttu-id="e90b4-649"><paramref name="type" /> ist keine <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-649"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="e90b4-650">Siehe [Laufzeittypen in Reflektion](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="e90b4-650">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="e90b4-651">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-651">-or-</span></span> 
 <span data-ttu-id="e90b4-652"><paramref name="method" /> ist keine Instanzenmethode.</span><span class="sxs-lookup"><span data-stu-id="e90b4-652"><paramref name="method" /> is not an instance method.</span></span>  
  
<span data-ttu-id="e90b4-653">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-653">-or-</span></span> 
 <span data-ttu-id="e90b4-654"><paramref name="method" /> kann nicht gebunden werden, z. B. weil sie nicht gefunden wurde.</span><span class="sxs-lookup"><span data-stu-id="e90b4-654"><paramref name="method" /> cannot be bound, for example because it cannot be found.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="e90b4-655">Die <see langword="Invoke" />-Methode von <paramref name="type" /> wurde nicht gefunden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-655">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="e90b4-656">Der Aufrufer verfügt nicht über die erforderlichen Berechtigungen für den Zugriff auf <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-656">The caller does not have the permissions necessary to access <paramref name="method" />.</span></span></exception>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, Type target, string method, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Type target, string method, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateDelegate (type As Type, target As Type, method As String, ignoreCase As Boolean) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, Type ^ target, System::String ^ method, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * Type * string * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="target" Type="System.Type" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="method" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="ignoreCase" Type="System.Boolean" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="e90b4-657">Der <see cref="T:System.Type" /> des zu erstellenden Delegaten.</span><span class="sxs-lookup"><span data-stu-id="e90b4-657">The <see cref="T:System.Type" /> of delegate to create.</span></span></param>
        <param name="target"><span data-ttu-id="e90b4-658">Der <see cref="T:System.Type" />, der die Klasse darstellt, die von <paramref name="method" /> implementiert wird.</span><span class="sxs-lookup"><span data-stu-id="e90b4-658">The <see cref="T:System.Type" /> representing the class that implements <paramref name="method" />.</span></span></param>
        <param name="method"><span data-ttu-id="e90b4-659">Der Name der statischen Methode, die durch den Delegaten dargestellt werden soll.</span><span class="sxs-lookup"><span data-stu-id="e90b4-659">The name of the static method that the delegate is to represent.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="e90b4-660">Ein boolescher Wert, der angibt, ob die Groß- und Kleinschreibung beim Vergleichen des Methodennamens berücksichtigt werden soll.</span><span class="sxs-lookup"><span data-stu-id="e90b4-660">A Boolean indicating whether to ignore the case when comparing the name of the method.</span></span></param>
        <summary><span data-ttu-id="e90b4-661">Erstellt einen Delegaten vom angegebenen Typ, der die angegebene statische Methode der angegebenen Klasse mit der angegebenen Berücksichtigung von Groß- und Kleinschreibung darstellt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-661">Creates a delegate of the specified type that represents the specified static method of the specified class, with the specified case-sensitivity.</span></span></summary>
        <returns><span data-ttu-id="e90b4-662">Ein Delegat vom angegebenen Typ, der die angegebene statische Methode der angegebenen Klasse darstellt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-662">A delegate of the specified type that represents the specified static method of the specified class.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e90b4-663">Diese Methode erstellt Delegaten nur für statische Methoden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-663">This method creates delegates for static methods only.</span></span> <span data-ttu-id="e90b4-664">Eine Instanzmethode ist eine Methode, die einer Instanz einer-Klasse zugeordnet ist. eine statische Methode ist eine Methode, die der Klasse selbst zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="e90b4-664">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="e90b4-665">Diese Methoden Überladung entspricht dem Aufrufen der <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29>-Methoden Überladung, die `true` für `throwOnBindFailure`angibt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-665">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e90b4-666">Beginnend mit dem [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]kann diese Methode verwendet werden, um auf nicht öffentliche Methoden zuzugreifen, wenn dem Aufrufer <xref:System.Security.Permissions.ReflectionPermission> mit dem <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>-Flag erteilt wurde, und wenn der Berechtigungs Satz der nicht öffentlichen Methoden auf den Berechtigungs Satz des Aufrufers oder eine Teilmenge des Aufrufers beschränkt ist.</span><span class="sxs-lookup"><span data-stu-id="e90b4-666">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="e90b4-667">(Siehe [Sicherheitsüberlegungen für die Reflektion](/dotnet/framework/reflection-and-codedom/security-considerations-for-reflection).)</span><span class="sxs-lookup"><span data-stu-id="e90b4-667">(See [Security Considerations for Reflection](/dotnet/framework/reflection-and-codedom/security-considerations-for-reflection).)</span></span>  
>   
>  <span data-ttu-id="e90b4-668">Zur Verwendung dieser Funktionen sollte die Anwendung für [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] oder höher ausgelegt sein.</span><span class="sxs-lookup"><span data-stu-id="e90b4-668">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e90b4-669"><paramref name="type" /> ist <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="e90b4-669"><paramref name="type" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e90b4-670">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-670">-or-</span></span> 
 <span data-ttu-id="e90b4-671"><paramref name="target" /> ist <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="e90b4-671"><paramref name="target" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e90b4-672">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-672">-or-</span></span> 
 <span data-ttu-id="e90b4-673"><paramref name="method" /> ist <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="e90b4-673"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e90b4-674"><paramref name="type" /> erbt nicht <see cref="T:System.MulticastDelegate" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-674"><paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span></span>  
  
<span data-ttu-id="e90b4-675">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-675">-or-</span></span> 
 <span data-ttu-id="e90b4-676"><paramref name="type" /> ist keine <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-676"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="e90b4-677">Siehe [Laufzeittypen in Reflektion](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="e90b4-677">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="e90b4-678">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-678">-or-</span></span> 
 <span data-ttu-id="e90b4-679"><paramref name="target" /> ist keine <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-679"><paramref name="target" /> is not a <see langword="RuntimeType" />.</span></span>  
  
<span data-ttu-id="e90b4-680">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-680">-or-</span></span> 
 <span data-ttu-id="e90b4-681"><paramref name="target" /> ist ein offener generischer Typ.</span><span class="sxs-lookup"><span data-stu-id="e90b4-681"><paramref name="target" /> is an open generic type.</span></span> <span data-ttu-id="e90b4-682">Das bedeutet, die <see cref="P:System.Type.ContainsGenericParameters" />-Eigenschaft ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-682">That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is <see langword="true" />.</span></span>  
  
<span data-ttu-id="e90b4-683">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-683">-or-</span></span> 
 <span data-ttu-id="e90b4-684"><paramref name="method" /> ist keine <see langword="static" />-Methode (<see langword="Shared" />-Methode in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="e90b4-684"><paramref name="method" /> is not a <see langword="static" /> method (<see langword="Shared" /> method in Visual Basic).</span></span>  
  
<span data-ttu-id="e90b4-685">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-685">-or-</span></span> 
 <span data-ttu-id="e90b4-686"><paramref name="method" /> kann nicht gebunden werden, z. B. weil sie nicht gefunden wurde.</span><span class="sxs-lookup"><span data-stu-id="e90b4-686"><paramref name="method" /> cannot be bound, for example because it cannot be found.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="e90b4-687">Die <see langword="Invoke" />-Methode von <paramref name="type" /> wurde nicht gefunden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-687">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="e90b4-688">Der Aufrufer verfügt nicht über die erforderlichen Berechtigungen für den Zugriff auf <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-688">The caller does not have the permissions necessary to access <paramref name="method" />.</span></span></exception>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object target, string method, bool ignoreCase, bool throwOnBindFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object target, string method, bool ignoreCase, bool throwOnBindFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateDelegate (type As Type, target As Object, method As String, ignoreCase As Boolean, throwOnBindFailure As Boolean) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ target, System::String ^ method, bool ignoreCase, bool throwOnBindFailure);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * string * bool * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method, ignoreCase, throwOnBindFailure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="target" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="method" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="ignoreCase" Type="System.Boolean" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="throwOnBindFailure" Type="System.Boolean" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="e90b4-689">Der <see cref="T:System.Type" /> des zu erstellenden Delegaten.</span><span class="sxs-lookup"><span data-stu-id="e90b4-689">The <see cref="T:System.Type" /> of delegate to create.</span></span></param>
        <param name="target"><span data-ttu-id="e90b4-690">Die Klasseninstanz, für die <paramref name="method" /> aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="e90b4-690">The class instance on which <paramref name="method" /> is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="e90b4-691">Der Name der Instanzenmethode, die durch den Delegaten dargestellt werden soll.</span><span class="sxs-lookup"><span data-stu-id="e90b4-691">The name of the instance method that the delegate is to represent.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="e90b4-692">Ein boolescher Wert, der angibt, ob die Groß- und Kleinschreibung beim Vergleichen des Methodennamens berücksichtigt werden soll.</span><span class="sxs-lookup"><span data-stu-id="e90b4-692">A Boolean indicating whether to ignore the case when comparing the name of the method.</span></span></param>
        <param name="throwOnBindFailure"><span data-ttu-id="e90b4-693"><see langword="true" />, um eine Ausnahme auszulösen, wenn <paramref name="method" /> nicht gebunden werden kann, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-693"><see langword="true" /> to throw an exception if <paramref name="method" /> cannot be bound; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="e90b4-694">Erstellt einen Delegaten vom angegebenen Typ, der die angegebene Instanzenmethode darstellt, die für die angegebene Klasseninstanz aufgerufen werden soll, wobei die Groß- und Kleinschreibung und das Verhalten bei Bindungsfehlern den Angaben entsprechend berücksichtigt bzw. nicht berücksichtigt wird.</span><span class="sxs-lookup"><span data-stu-id="e90b4-694">Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance, with the specified case-sensitivity and the specified behavior on failure to bind.</span></span></summary>
        <returns><span data-ttu-id="e90b4-695">Ein Delegat vom angegebenen Typ, der die angegebene Instanzenmethode darstellt, die für die angegebene Klasseninstanz aufgerufen werden soll.</span><span class="sxs-lookup"><span data-stu-id="e90b4-695">A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e90b4-696">Diese Methode erstellt nur Delegaten für Instanzmethoden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-696">This method creates delegates for instance methods only.</span></span> <span data-ttu-id="e90b4-697">Eine Instanzmethode ist eine Methode, die einer Instanz einer-Klasse zugeordnet ist. eine statische Methode ist eine Methode, die der Klasse selbst zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="e90b4-697">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e90b4-698">Beginnend mit dem [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]kann diese Methode verwendet werden, um auf nicht öffentliche Methoden zuzugreifen, wenn dem Aufrufer <xref:System.Security.Permissions.ReflectionPermission> mit dem <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>-Flag erteilt wurde, und wenn der Berechtigungs Satz der nicht öffentlichen Methoden auf den Berechtigungs Satz des Aufrufers oder eine Teilmenge des Aufrufers beschränkt ist.</span><span class="sxs-lookup"><span data-stu-id="e90b4-698">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="e90b4-699">(Siehe [Sicherheitsüberlegungen für die Reflektion](/dotnet/framework/reflection-and-codedom/security-considerations-for-reflection).)</span><span class="sxs-lookup"><span data-stu-id="e90b4-699">(See [Security Considerations for Reflection](/dotnet/framework/reflection-and-codedom/security-considerations-for-reflection).)</span></span>  
>   
>  <span data-ttu-id="e90b4-700">Zur Verwendung dieser Funktionen sollte die Anwendung für [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] oder höher ausgelegt sein.</span><span class="sxs-lookup"><span data-stu-id="e90b4-700">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e90b4-701"><paramref name="type" /> ist <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="e90b4-701"><paramref name="type" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e90b4-702">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-702">-or-</span></span> 
 <span data-ttu-id="e90b4-703"><paramref name="target" /> ist <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="e90b4-703"><paramref name="target" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e90b4-704">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-704">-or-</span></span> 
 <span data-ttu-id="e90b4-705"><paramref name="method" /> ist <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="e90b4-705"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e90b4-706"><paramref name="type" /> erbt nicht <see cref="T:System.MulticastDelegate" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-706"><paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span></span>  
  
<span data-ttu-id="e90b4-707">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-707">-or-</span></span> 
 <span data-ttu-id="e90b4-708"><paramref name="type" /> ist keine <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-708"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="e90b4-709">Siehe [Laufzeittypen in Reflektion](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="e90b4-709">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="e90b4-710">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-710">-or-</span></span> 
 <span data-ttu-id="e90b4-711"><paramref name="method" /> ist keine Instanzenmethode.</span><span class="sxs-lookup"><span data-stu-id="e90b4-711"><paramref name="method" /> is not an instance method.</span></span>  
  
<span data-ttu-id="e90b4-712">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-712">-or-</span></span> 
 <span data-ttu-id="e90b4-713"><paramref name="method" /> kann nicht gebunden werden, z. B. weil sie nicht gefunden wurde, und <paramref name="throwOnBindFailure" /> ist gleich <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-713"><paramref name="method" /> cannot be bound, for example because it cannot be found, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="e90b4-714">Die <see langword="Invoke" />-Methode von <paramref name="type" /> wurde nicht gefunden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-714">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="e90b4-715">Der Aufrufer verfügt nicht über die erforderlichen Berechtigungen für den Zugriff auf <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-715">The caller does not have the permissions necessary to access <paramref name="method" />.</span></span></exception>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, Type target, string method, bool ignoreCase, bool throwOnBindFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Type target, string method, bool ignoreCase, bool throwOnBindFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateDelegate (type As Type, target As Type, method As String, ignoreCase As Boolean, throwOnBindFailure As Boolean) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, Type ^ target, System::String ^ method, bool ignoreCase, bool throwOnBindFailure);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * Type * string * bool * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method, ignoreCase, throwOnBindFailure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="target" Type="System.Type" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="method" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="ignoreCase" Type="System.Boolean" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="throwOnBindFailure" Type="System.Boolean" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="e90b4-716">Der <see cref="T:System.Type" /> des zu erstellenden Delegaten.</span><span class="sxs-lookup"><span data-stu-id="e90b4-716">The <see cref="T:System.Type" /> of delegate to create.</span></span></param>
        <param name="target"><span data-ttu-id="e90b4-717">Der <see cref="T:System.Type" />, der die Klasse darstellt, die von <paramref name="method" /> implementiert wird.</span><span class="sxs-lookup"><span data-stu-id="e90b4-717">The <see cref="T:System.Type" /> representing the class that implements <paramref name="method" />.</span></span></param>
        <param name="method"><span data-ttu-id="e90b4-718">Der Name der statischen Methode, die durch den Delegaten dargestellt werden soll.</span><span class="sxs-lookup"><span data-stu-id="e90b4-718">The name of the static method that the delegate is to represent.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="e90b4-719">Ein boolescher Wert, der angibt, ob die Groß- und Kleinschreibung beim Vergleichen des Methodennamens berücksichtigt werden soll.</span><span class="sxs-lookup"><span data-stu-id="e90b4-719">A Boolean indicating whether to ignore the case when comparing the name of the method.</span></span></param>
        <param name="throwOnBindFailure"><span data-ttu-id="e90b4-720"><see langword="true" />, um eine Ausnahme auszulösen, wenn <paramref name="method" /> nicht gebunden werden kann, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-720"><see langword="true" /> to throw an exception if <paramref name="method" /> cannot be bound; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="e90b4-721">Erstellt einen Delegaten vom angegebenen Typ, der die angegebene statische Methode der angegebenen Klasse darstellt, wobei die Groß- und Kleinschreibung und das Verhalten bei Bindungsfehlern den Angaben entsprechend berücksichtigt bzw. nicht berücksichtigt wird.</span><span class="sxs-lookup"><span data-stu-id="e90b4-721">Creates a delegate of the specified type that represents the specified static method of the specified class, with the specified case-sensitivity and the specified behavior on failure to bind.</span></span></summary>
        <returns><span data-ttu-id="e90b4-722">Ein Delegat vom angegebenen Typ, der die angegebene statische Methode der angegebenen Klasse darstellt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-722">A delegate of the specified type that represents the specified static method of the specified class.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e90b4-723">Diese Methode erstellt Delegaten nur für statische Methoden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-723">This method creates delegates for static methods only.</span></span> <span data-ttu-id="e90b4-724">Eine Instanzmethode ist eine Methode, die einer Instanz einer-Klasse zugeordnet ist. eine statische Methode ist eine Methode, die der Klasse selbst zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="e90b4-724">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e90b4-725">Beginnend mit dem [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]kann diese Methode verwendet werden, um auf nicht öffentliche Methoden zuzugreifen, wenn dem Aufrufer <xref:System.Security.Permissions.ReflectionPermission> mit dem <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>-Flag erteilt wurde, und wenn der Berechtigungs Satz der nicht öffentlichen Methoden auf den Berechtigungs Satz des Aufrufers oder eine Teilmenge des Aufrufers beschränkt ist.</span><span class="sxs-lookup"><span data-stu-id="e90b4-725">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="e90b4-726">(Siehe [Sicherheitsüberlegungen für die Reflektion](/dotnet/framework/reflection-and-codedom/security-considerations-for-reflection).)</span><span class="sxs-lookup"><span data-stu-id="e90b4-726">(See [Security Considerations for Reflection](/dotnet/framework/reflection-and-codedom/security-considerations-for-reflection).)</span></span>  
>   
>  <span data-ttu-id="e90b4-727">Zur Verwendung dieser Funktionen sollte die Anwendung für [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] oder höher ausgelegt sein.</span><span class="sxs-lookup"><span data-stu-id="e90b4-727">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e90b4-728"><paramref name="type" /> ist <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="e90b4-728"><paramref name="type" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e90b4-729">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-729">-or-</span></span> 
 <span data-ttu-id="e90b4-730"><paramref name="target" /> ist <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="e90b4-730"><paramref name="target" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e90b4-731">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-731">-or-</span></span> 
 <span data-ttu-id="e90b4-732"><paramref name="method" /> ist <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="e90b4-732"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e90b4-733"><paramref name="type" /> erbt nicht <see cref="T:System.MulticastDelegate" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-733"><paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span></span>  
  
<span data-ttu-id="e90b4-734">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-734">-or-</span></span> 
 <span data-ttu-id="e90b4-735"><paramref name="type" /> ist keine <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-735"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="e90b4-736">Siehe [Laufzeittypen in Reflektion](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="e90b4-736">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="e90b4-737">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-737">-or-</span></span> 
 <span data-ttu-id="e90b4-738"><paramref name="target" /> ist keine <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-738"><paramref name="target" /> is not a <see langword="RuntimeType" />.</span></span>  
  
<span data-ttu-id="e90b4-739">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-739">-or-</span></span> 
 <span data-ttu-id="e90b4-740"><paramref name="target" /> ist ein offener generischer Typ.</span><span class="sxs-lookup"><span data-stu-id="e90b4-740"><paramref name="target" /> is an open generic type.</span></span> <span data-ttu-id="e90b4-741">Das bedeutet, die <see cref="P:System.Type.ContainsGenericParameters" />-Eigenschaft ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-741">That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is <see langword="true" />.</span></span>  
  
<span data-ttu-id="e90b4-742">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-742">-or-</span></span> 
 <span data-ttu-id="e90b4-743"><paramref name="method" /> ist keine <see langword="static" />-Methode (<see langword="Shared" />-Methode in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="e90b4-743"><paramref name="method" /> is not a <see langword="static" /> method (<see langword="Shared" /> method in Visual Basic).</span></span>  
  
<span data-ttu-id="e90b4-744">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-744">-or-</span></span> 
 <span data-ttu-id="e90b4-745"><paramref name="method" /> kann nicht gebunden werden, z. B. weil sie nicht gefunden wurde, und <paramref name="throwOnBindFailure" /> ist gleich <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-745"><paramref name="method" /> cannot be bound, for example because it cannot be found, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="e90b4-746">Die <see langword="Invoke" />-Methode von <paramref name="type" /> wurde nicht gefunden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-746">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="e90b4-747">Der Aufrufer verfügt nicht über die erforderlichen Berechtigungen für den Zugriff auf <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-747">The caller does not have the permissions necessary to access <paramref name="method" />.</span></span></exception>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="DynamicInvoke">
      <MemberSignature Language="C#" Value="public object DynamicInvoke (params object[] args);" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object DynamicInvoke(object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.DynamicInvoke(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function DynamicInvoke (ParamArray args As Object()) As Object" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ DynamicInvoke(... cli::array &lt;System::Object ^&gt; ^ args);" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.DynamicInvoke : obj[] -&gt; obj" Usage="delegate.DynamicInvoke args" />
      <MemberSignature Language="C#" Value="public object DynamicInvoke (object[] args);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="VB.NET" Value="Public Function DynamicInvoke (args As Object()) As Object" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ DynamicInvoke(cli::array &lt;System::Object ^&gt; ^ args);" FrameworkAlternate="netframework-1.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="args"><span data-ttu-id="e90b4-748">Ein Array von Objekten, das die Argumente darstellt, die der durch den aktuellen Delegaten dargestellten Methode übergeben werden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-748">An array of objects that are the arguments to pass to the method represented by the current delegate.</span></span>  
  
<span data-ttu-id="e90b4-749">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-749">-or-</span></span> 
 <span data-ttu-id="e90b4-750"><see langword="null" />, wenn die durch den aktuellen Delegaten dargestellte Methode keine Argumente erfordert.</span><span class="sxs-lookup"><span data-stu-id="e90b4-750"><see langword="null" />, if the method represented by the current delegate does not require arguments.</span></span></param>
        <summary><span data-ttu-id="e90b4-751">Ruft die durch den aktuellen Delegaten dargestellte Methode dynamisch (mit später Bindung) auf.</span><span class="sxs-lookup"><span data-stu-id="e90b4-751">Dynamically invokes (late-bound) the method represented by the current delegate.</span></span></summary>
        <returns><span data-ttu-id="e90b4-752">Das Objekt, das von der durch den Delegaten dargestellten Methode zurückgegeben wird.</span><span class="sxs-lookup"><span data-stu-id="e90b4-752">The object returned by the method represented by the delegate.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e90b4-753">Diese Methode ruft die <xref:System.Delegate.DynamicInvokeImpl%2A>-Methode auf.</span><span class="sxs-lookup"><span data-stu-id="e90b4-753">This method calls the <xref:System.Delegate.DynamicInvokeImpl%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="e90b4-754">Der Aufrufer verfügt nicht über Zugriff auf die Methode, die durch den Delegaten dargestellt wird (wenn die Methode z.B. privat ist).</span><span class="sxs-lookup"><span data-stu-id="e90b4-754">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span></span>  
  
<span data-ttu-id="e90b4-755">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-755">-or-</span></span> 
<span data-ttu-id="e90b4-756">Anzahl, Reihenfolge oder Typ der in <paramref name="args" /> aufgeführten Parameter ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="e90b4-756">The number, order, or type of parameters listed in <paramref name="args" /> is invalid.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e90b4-757">Die durch den Delegaten dargestellte Methode wird für ein Objekt oder eine Klasse aufgerufen, die die Methode nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-757">The method represented by the delegate is invoked on an object or a class that does not support it.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="e90b4-758">Die durch den Delegaten dargestellte Methode ist eine Instanzenmethode, und das Zielobjekt ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-758">The method represented by the delegate is an instance method and the target object is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e90b4-759">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-759">-or-</span></span> 
<span data-ttu-id="e90b4-760">Eine der gekapselten Methoden löst eine Ausnahme aus.</span><span class="sxs-lookup"><span data-stu-id="e90b4-760">One of the encapsulated methods throws an exception.</span></span></exception>
        <altmember cref="M:System.Delegate.DynamicInvokeImpl(System.Object[])" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="DynamicInvokeImpl">
      <MemberSignature Language="C#" Value="protected virtual object DynamicInvokeImpl (object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object DynamicInvokeImpl(object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.DynamicInvokeImpl(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function DynamicInvokeImpl (args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Object ^ DynamicInvokeImpl(cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member DynamicInvokeImpl : obj[] -&gt; obj&#xA;override this.DynamicInvokeImpl : obj[] -&gt; obj" Usage="delegate.DynamicInvokeImpl args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="args"><span data-ttu-id="e90b4-761">Ein Array von Objekten, das die Argumente darstellt, die der durch den aktuellen Delegaten dargestellten Methode übergeben werden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-761">An array of objects that are the arguments to pass to the method represented by the current delegate.</span></span>  
  
<span data-ttu-id="e90b4-762">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-762">-or-</span></span> 
 <span data-ttu-id="e90b4-763"><see langword="null" />, wenn die durch den aktuellen Delegaten dargestellte Methode keine Argumente erfordert.</span><span class="sxs-lookup"><span data-stu-id="e90b4-763"><see langword="null" />, if the method represented by the current delegate does not require arguments.</span></span></param>
        <summary><span data-ttu-id="e90b4-764">Ruft die durch den aktuellen Delegaten dargestellte Methode dynamisch (mit später Bindung) auf.</span><span class="sxs-lookup"><span data-stu-id="e90b4-764">Dynamically invokes (late-bound) the method represented by the current delegate.</span></span></summary>
        <returns><span data-ttu-id="e90b4-765">Das Objekt, das von der durch den Delegaten dargestellten Methode zurückgegeben wird.</span><span class="sxs-lookup"><span data-stu-id="e90b4-765">The object returned by the method represented by the delegate.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e90b4-766">Diese Methode implementiert die Methode <xref:System.Delegate.DynamicInvoke%2A> .</span><span class="sxs-lookup"><span data-stu-id="e90b4-766">This method implements the <xref:System.Delegate.DynamicInvoke%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="e90b4-767">Der Aufrufer verfügt nicht über Zugriff auf die Methode, die durch den Delegaten dargestellt wird (wenn die Methode z.B. privat ist).</span><span class="sxs-lookup"><span data-stu-id="e90b4-767">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span></span>  
  
<span data-ttu-id="e90b4-768">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-768">-or-</span></span> 
<span data-ttu-id="e90b4-769">Anzahl, Reihenfolge oder Typ der in <paramref name="args" /> aufgeführten Parameter ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="e90b4-769">The number, order, or type of parameters listed in <paramref name="args" /> is invalid.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e90b4-770">Die durch den Delegaten dargestellte Methode wird für ein Objekt oder eine Klasse aufgerufen, die die Methode nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-770">The method represented by the delegate is invoked on an object or a class that does not support it.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="e90b4-771">Die durch den Delegaten dargestellte Methode ist eine Instanzenmethode, und das Zielobjekt ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-771">The method represented by the delegate is an instance method and the target object is <see langword="null" />.</span></span>  
  
<span data-ttu-id="e90b4-772">Oder</span><span class="sxs-lookup"><span data-stu-id="e90b4-772">-or-</span></span> 
<span data-ttu-id="e90b4-773">Eine der gekapselten Methoden löst eine Ausnahme aus.</span><span class="sxs-lookup"><span data-stu-id="e90b4-773">One of the encapsulated methods throws an exception.</span></span></exception>
        <altmember cref="M:System.Delegate.DynamicInvoke(System.Object[])" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="delegate.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="e90b4-774">Das Objekt, das mit dem aktuellen Delegaten verglichen werden soll.</span><span class="sxs-lookup"><span data-stu-id="e90b4-774">The object to compare with the current delegate.</span></span></param>
        <summary><span data-ttu-id="e90b4-775">Bestimmt, ob das angegebene Objekt und der aktuelle Delegat vom gleichen Typ sind und die gleichen Ziele, Methoden und Aufruflisten besitzen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-775">Determines whether the specified object and the current delegate are of the same type and share the same targets, methods, and invocation list.</span></span></summary>
        <returns><span data-ttu-id="e90b4-776"><see langword="true" />, wenn <paramref name="obj" /> und der aktuelle Delegat die gleichen Ziele, Methoden und Aufruflisten aufweisen; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-776"><see langword="true" /> if <paramref name="obj" /> and the current delegate have the same targets, methods, and invocation list; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e90b4-777">Wenn die beiden Delegaten nicht denselben Typ haben, werden Sie nicht als gleich betrachtet.</span><span class="sxs-lookup"><span data-stu-id="e90b4-777">If the two delegates are not of the same type, they are not considered equal.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e90b4-778">In den .NET Framework, Version 1,0 und 1,1, wurden zwei Delegaten als gleich betrachtet, wenn Ihre Ziele, Methoden und Aufruf Listen gleich waren, auch wenn die Delegaten von unterschiedlichen Typen waren.</span><span class="sxs-lookup"><span data-stu-id="e90b4-778">In the .NET Framework version 1.0 and 1.1, two delegates were considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.</span></span>  
  
 <span data-ttu-id="e90b4-779">Die Methoden und Ziele werden wie folgt auf Gleichheit verglichen:</span><span class="sxs-lookup"><span data-stu-id="e90b4-779">The methods and targets are compared for equality as follows:</span></span>  
  
-   <span data-ttu-id="e90b4-780">Wenn die beiden verglichenen Methoden statisch sind und dieselbe Methode in derselben Klasse sind, werden die Methoden als gleich betrachtet, und die Ziele werden ebenfalls als gleich betrachtet.</span><span class="sxs-lookup"><span data-stu-id="e90b4-780">If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="e90b4-781">Wenn die beiden verglichenen Methoden Instanzmethoden sind und dieselbe Methode für dasselbe Objekt sind, werden die Methoden als gleich betrachtet, und die Ziele werden ebenfalls als gleich betrachtet.</span><span class="sxs-lookup"><span data-stu-id="e90b4-781">If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="e90b4-782">Andernfalls werden die Methoden nicht als gleich betrachtet, und die Ziele werden ebenfalls nicht als gleich betrachtet.</span><span class="sxs-lookup"><span data-stu-id="e90b4-782">Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.</span></span>  
  
 <span data-ttu-id="e90b4-783">Zwei Aufruf Listen werden nur dann als identisch betrachtet, wenn Sie dieselbe Reihenfolge aufweisen und die entsprechenden Elemente aus den beiden Listen dieselbe Methode und dasselbe Ziel darstellen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-783">Two invocation lists are considered identical only if they have the same order and the corresponding elements from the two lists represent the same method and target.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="e90b4-784">Der Aufrufer verfügt nicht über Zugriff auf die Methode, die durch den Delegaten dargestellt wird (wenn die Methode z.B. privat ist).</span><span class="sxs-lookup"><span data-stu-id="e90b4-784">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span></span></exception>
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="delegate.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e90b4-785">Gibt einen Hashcode für den Delegaten zurück.</span><span class="sxs-lookup"><span data-stu-id="e90b4-785">Returns a hash code for the delegate.</span></span></summary>
        <returns><span data-ttu-id="e90b4-786">Ein Hashcode für den Delegaten.</span><span class="sxs-lookup"><span data-stu-id="e90b4-786">A hash code for the delegate.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e90b4-787">Der Rückgabewert dieser Methode darf aus zwei Gründen nicht beibehalten werden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-787">The return value of this method must not be persisted for two reasons.</span></span> <span data-ttu-id="e90b4-788">Zuerst kann die Hash Funktion einer Klasse geändert werden, um eine bessere Verteilung zu generieren, wobei alle Werte aus der alten Hash Funktion nutzlos werden.</span><span class="sxs-lookup"><span data-stu-id="e90b4-788">First, the hash function of a class might be altered to generate a better distribution, rendering any values from the old hash function useless.</span></span> <span data-ttu-id="e90b4-789">Zweitens stellt die Standard Implementierung dieser Klasse nicht sicher, dass der gleiche Wert von unterschiedlichen Instanzen zurückgegeben wird.</span><span class="sxs-lookup"><span data-stu-id="e90b4-789">Second, the default implementation of this class does not guarantee that the same value will be returned by different instances.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="GetInvocationList">
      <MemberSignature Language="C#" Value="public virtual Delegate[] GetInvocationList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Delegate[] GetInvocationList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.GetInvocationList" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetInvocationList () As Delegate()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Delegate ^&gt; ^ GetInvocationList();" />
      <MemberSignature Language="F#" Value="abstract member GetInvocationList : unit -&gt; Delegate[]&#xA;override this.GetInvocationList : unit -&gt; Delegate[]" Usage="delegate.GetInvocationList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e90b4-790">Gibt die Aufrufliste des Delegaten zurück.</span><span class="sxs-lookup"><span data-stu-id="e90b4-790">Returns the invocation list of the delegate.</span></span></summary>
        <returns><span data-ttu-id="e90b4-791">Ein Array von Delegaten, das die Aufrufliste des aktuellen Delegaten darstellt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-791">An array of delegates representing the invocation list of the current delegate.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e90b4-792">Jeder Delegat im Array stellt genau eine Methode dar.</span><span class="sxs-lookup"><span data-stu-id="e90b4-792">Each delegate in the array represents exactly one method.</span></span>  
  
 <span data-ttu-id="e90b4-793">Die Reihenfolge der Delegaten im-Array entspricht der Reihenfolge, in der der aktuelle Delegat die Methoden aufruft, die diese Delegaten darstellen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-793">The order of the delegates in the array is the same order in which the current delegate invokes the methods that those delegates represent.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e90b4-794">Im folgenden Beispiel werden einem Delegaten drei Methoden zugewiesen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-794">The following example assigns three methods to a delegate.</span></span> <span data-ttu-id="e90b4-795">Anschließend wird die <xref:System.Delegate.GetInvocationList%2A>-Methode aufgerufen, um die Gesamtzahl der dem Delegaten zugewiesenen Methoden zu erhalten, die Delegaten in umgekehrter Reihenfolge auszuführen und die Methoden auszuführen, deren Name nicht die Teil Zeichenfolge "file" enthält.</span><span class="sxs-lookup"><span data-stu-id="e90b4-795">It then calls the  <xref:System.Delegate.GetInvocationList%2A> method to get a total count of the methods assigned to the delegate, to execute the delegates in reverse order, and to execute the methods whose name do not include the substring "File".</span></span>  
  
 [!code-csharp[System.Delegate.GetInvocationList#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Delegate.GetInvocationList/cs/GetInvocationList1.cs#1)]
 [!code-vb[System.Delegate.GetInvocationList#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Delegate.GetInvocationList/vb/GetInvocationList1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethodImpl">
      <MemberSignature Language="C#" Value="protected virtual System.Reflection.MethodInfo GetMethodImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethodImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.GetMethodImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetMethodImpl () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Reflection::MethodInfo ^ GetMethodImpl();" />
      <MemberSignature Language="F#" Value="abstract member GetMethodImpl : unit -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethodImpl : unit -&gt; System.Reflection.MethodInfo" Usage="delegate.GetMethodImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e90b4-796">Ruft die statische Methode ab, die durch den aktuellen Delegaten dargestellt wird.</span><span class="sxs-lookup"><span data-stu-id="e90b4-796">Gets the static method represented by the current delegate.</span></span></summary>
        <returns><span data-ttu-id="e90b4-797">Eine <see cref="T:System.Reflection.MethodInfo" />, die die durch den aktuellen Delegaten dargestellte statische Methode beschreibt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-797">A <see cref="T:System.Reflection.MethodInfo" /> describing the static method represented by the current delegate.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e90b4-798">Diese Methode gilt nur, wenn der aktuelle Delegat eine statische Methode darstellt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-798">This method applies only if the current delegate represents a static method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="e90b4-799">Der Aufrufer verfügt nicht über Zugriff auf die Methode, die durch den Delegaten dargestellt wird (wenn die Methode z.B. privat ist).</span><span class="sxs-lookup"><span data-stu-id="e90b4-799">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span></span></exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="P:System.Delegate.Method" />
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit&#xA;override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="delegate.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="e90b4-800">Wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-800">Not supported.</span></span></param>
        <param name="context"><span data-ttu-id="e90b4-801">Wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-801">Not supported.</span></span></param>
        <summary><span data-ttu-id="e90b4-802">Wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-802">Not supported.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="e90b4-803">Diese Methode wird nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-803">This method is not supported.</span></span></exception>
        <altmember cref="T:System.Runtime.Serialization.ISerializable" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
      </Docs>
    </Member>
    <Member MemberName="Method">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo Method { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo Method" />
      <MemberSignature Language="DocId" Value="P:System.Delegate.Method" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Method As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::MethodInfo ^ Method { System::Reflection::MethodInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Method : System.Reflection.MethodInfo" Usage="System.Delegate.Method" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e90b4-804">Ruft die Methode ab, die durch den Delegaten dargestellt wird.</span><span class="sxs-lookup"><span data-stu-id="e90b4-804">Gets the method represented by the delegate.</span></span></summary>
        <value><span data-ttu-id="e90b4-805">Eine <see cref="T:System.Reflection.MethodInfo" />, die die durch den Delegaten dargestellte Methode beschreibt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-805">A <see cref="T:System.Reflection.MethodInfo" /> describing the method represented by the delegate.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="e90b4-806">Der Aufrufer verfügt nicht über Zugriff auf die Methode, die durch den Delegaten dargestellt wird (wenn die Methode z.B. privat ist).</span><span class="sxs-lookup"><span data-stu-id="e90b4-806">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span></span></exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="M:System.Delegate.GetMethodImpl" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (Delegate d1, Delegate d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Delegate d1, class System.Delegate d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.op_Equality(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (d1 As Delegate, d2 As Delegate) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(Delegate ^ d1, Delegate ^ d2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : Delegate * Delegate -&gt; bool" Usage="d1 = d2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.Delegate" />
        <Parameter Name="d2" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="d1"><span data-ttu-id="e90b4-807">Der erste der zu vergleichenden Delegaten.</span><span class="sxs-lookup"><span data-stu-id="e90b4-807">The first delegate to compare.</span></span></param>
        <param name="d2"><span data-ttu-id="e90b4-808">Der zweite der zu vergleichenden Delegaten.</span><span class="sxs-lookup"><span data-stu-id="e90b4-808">The second delegate to compare.</span></span></param>
        <summary><span data-ttu-id="e90b4-809">Bestimmt, ob die angegebenen Delegaten gleich sind.</span><span class="sxs-lookup"><span data-stu-id="e90b4-809">Determines whether the specified delegates are equal.</span></span></summary>
        <returns><span data-ttu-id="e90b4-810"><see langword="true" />, wenn <paramref name="d1" /> und <paramref name="d2" /> gleich sind, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-810"><see langword="true" /> if <paramref name="d1" /> is equal to <paramref name="d2" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e90b4-811">Zwei Delegaten desselben Typs mit denselben Zielen, Methoden und Aufruf Listen werden als gleich betrachtet.</span><span class="sxs-lookup"><span data-stu-id="e90b4-811">Two delegates of the same type with the same targets, methods, and invocation lists are considered equal.</span></span>  
  
 <span data-ttu-id="e90b4-812">Wenn die beiden Delegaten nicht denselben Typ haben, werden Sie nicht als gleich betrachtet.</span><span class="sxs-lookup"><span data-stu-id="e90b4-812">If the two delegates are not of the same type, they are not considered equal.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e90b4-813">In den .NET Framework, Version 1,0 und 1,1, wurden zwei Delegaten als gleich betrachtet, wenn Ihre Ziele, Methoden und Aufruf Listen gleich waren, auch wenn die Delegaten von unterschiedlichen Typen waren.</span><span class="sxs-lookup"><span data-stu-id="e90b4-813">In the .NET Framework version 1.0 and 1.1, two delegates were considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.</span></span>  
  
 <span data-ttu-id="e90b4-814">Die Methoden und Ziele werden wie folgt auf Gleichheit verglichen:</span><span class="sxs-lookup"><span data-stu-id="e90b4-814">The methods and targets are compared for equality as follows:</span></span>  
  
-   <span data-ttu-id="e90b4-815">Wenn die beiden verglichenen Methoden statisch sind und dieselbe Methode in derselben Klasse sind, werden die Methoden als gleich betrachtet, und die Ziele werden ebenfalls als gleich betrachtet.</span><span class="sxs-lookup"><span data-stu-id="e90b4-815">If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="e90b4-816">Wenn die beiden verglichenen Methoden Instanzmethoden sind und dieselbe Methode für dasselbe Objekt sind, werden die Methoden als gleich betrachtet, und die Ziele werden ebenfalls als gleich betrachtet.</span><span class="sxs-lookup"><span data-stu-id="e90b4-816">If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="e90b4-817">Andernfalls werden die Methoden nicht als gleich betrachtet, und die Ziele werden ebenfalls nicht als gleich betrachtet.</span><span class="sxs-lookup"><span data-stu-id="e90b4-817">Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.</span></span>  
  
 <span data-ttu-id="e90b4-818">Zwei Aufruf Listen werden als identisch betrachtet, wenn Sie dieselbe Reihenfolge aufweisen und die entsprechenden Elemente aus den beiden Listen dieselbe Methode und dasselbe Ziel darstellen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-818">Two invocation lists are considered identical if they have the same order and the corresponding elements from the two lists represent the same method and target.</span></span>  
  
 <span data-ttu-id="e90b4-819">Die entsprechende Methode für diesen Operator ist <xref:System.Delegate.Equals%28System.Object%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="e90b4-819">The equivalent method for this operator is <xref:System.Delegate.Equals%28System.Object%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (Delegate d1, Delegate d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Delegate d1, class System.Delegate d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.op_Inequality(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (d1 As Delegate, d2 As Delegate) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(Delegate ^ d1, Delegate ^ d2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : Delegate * Delegate -&gt; bool" Usage="System.Delegate.op_Inequality (d1, d2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.Delegate" />
        <Parameter Name="d2" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="d1"><span data-ttu-id="e90b4-820">Der erste der zu vergleichenden Delegaten.</span><span class="sxs-lookup"><span data-stu-id="e90b4-820">The first delegate to compare.</span></span></param>
        <param name="d2"><span data-ttu-id="e90b4-821">Der zweite der zu vergleichenden Delegaten.</span><span class="sxs-lookup"><span data-stu-id="e90b4-821">The second delegate to compare.</span></span></param>
        <summary><span data-ttu-id="e90b4-822">Bestimmt, ob die angegebenen Delegaten ungleich sind.</span><span class="sxs-lookup"><span data-stu-id="e90b4-822">Determines whether the specified delegates are not equal.</span></span></summary>
        <returns><span data-ttu-id="e90b4-823"><see langword="true" />, wenn <paramref name="d1" /> und <paramref name="d2" /> ungleich sind, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="e90b4-823"><see langword="true" /> if <paramref name="d1" /> is not equal to <paramref name="d2" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e90b4-824">Zwei Delegaten werden als ungleich betrachtet, wenn Sie unterschiedliche Typen aufweisen oder über unterschiedliche Methoden, andere Ziele oder andere Aufruf Listen verfügen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-824">Two delegates are considered not equal if they are of different types, or have different methods, different targets, or different invocation lists.</span></span>  
  
 <span data-ttu-id="e90b4-825">Wenn die beiden Delegaten nicht denselben Typ haben, werden Sie nicht als gleich betrachtet.</span><span class="sxs-lookup"><span data-stu-id="e90b4-825">If the two delegates are not of the same type, they are not considered equal.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e90b4-826">In den .NET Framework, Version 1,0 und 1,1, werden zwei Delegaten als gleich betrachtet, wenn Ihre Ziele, Methoden und Aufruf Listen gleich sind, auch wenn die Delegaten von unterschiedlichen Typen waren.</span><span class="sxs-lookup"><span data-stu-id="e90b4-826">In the .NET Framework version 1.0 and 1.1, two delegates are considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.</span></span>  
  
 <span data-ttu-id="e90b4-827">Die Methoden und Ziele werden wie folgt auf Gleichheit verglichen:</span><span class="sxs-lookup"><span data-stu-id="e90b4-827">The methods and targets are compared for equality as follows:</span></span>  
  
-   <span data-ttu-id="e90b4-828">Wenn die beiden verglichenen Methoden statisch sind und dieselbe Methode in derselben Klasse sind, werden die Methoden als gleich betrachtet, und die Ziele werden ebenfalls als gleich betrachtet.</span><span class="sxs-lookup"><span data-stu-id="e90b4-828">If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="e90b4-829">Wenn die beiden verglichenen Methoden Instanzmethoden sind und dieselbe Methode für dasselbe Objekt sind, werden die Methoden als gleich betrachtet, und die Ziele werden ebenfalls als gleich betrachtet.</span><span class="sxs-lookup"><span data-stu-id="e90b4-829">If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="e90b4-830">Andernfalls werden die Methoden nicht als gleich betrachtet, und die Ziele werden ebenfalls nicht als gleich betrachtet.</span><span class="sxs-lookup"><span data-stu-id="e90b4-830">Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.</span></span>  
  
 <span data-ttu-id="e90b4-831">Zwei Aufruf Listen sind nicht gleich, wenn Sie unterschiedliche Größen haben, wenn Sie anders angeordnet sind, oder wenn mindestens ein Element aus einer Liste eine Methode oder ein Ziel darstellt, das sich von dem entsprechenden Element in der anderen Liste unterscheidet.</span><span class="sxs-lookup"><span data-stu-id="e90b4-831">Two invocation lists are not equal if they have different sizes, if they are ordered differently, or if at least one element from one list represents a method or target that is different from that represented by its corresponding element in the other list.</span></span>  
  
 <span data-ttu-id="e90b4-832">Die entsprechende Methode für diesen Operator ist <xref:System.Delegate.Equals%28System.Object%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="e90b4-832">The equivalent method for this operator is <xref:System.Delegate.Equals%28System.Object%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public static Delegate Remove (Delegate source, Delegate value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate Remove(class System.Delegate source, class System.Delegate value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Remove(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Remove (source As Delegate, value As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ Remove(Delegate ^ source, Delegate ^ value);" />
      <MemberSignature Language="F#" Value="static member Remove : Delegate * Delegate -&gt; Delegate" Usage="System.Delegate.Remove (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Delegate" />
        <Parameter Name="value" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="e90b4-833">Der Delegat, aus dem die Aufrufliste von <paramref name="value" /> entfernt werden soll.</span><span class="sxs-lookup"><span data-stu-id="e90b4-833">The delegate from which to remove the invocation list of <paramref name="value" />.</span></span></param>
        <param name="value"><span data-ttu-id="e90b4-834">Der Delegat, von dem die Aufrufliste stammt, die aus der Aufrufliste von <paramref name="source" /> entfernt werden soll.</span><span class="sxs-lookup"><span data-stu-id="e90b4-834">The delegate that supplies the invocation list to remove from the invocation list of <paramref name="source" />.</span></span></param>
        <summary><span data-ttu-id="e90b4-835">Entfernt das letzte Vorkommen der Aufrufliste eines Delegaten aus der Aufrufliste eines anderen Delegaten.</span><span class="sxs-lookup"><span data-stu-id="e90b4-835">Removes the last occurrence of the invocation list of a delegate from the invocation list of another delegate.</span></span></summary>
        <returns><span data-ttu-id="e90b4-836">Ein neuer Delegat mit einer Aufrufliste, die aus der Aufrufliste von <paramref name="source" /> besteht, aus der das letzte Vorkommen der Aufrufliste von <paramref name="value" /> entfernt wurde, falls sich die Aufrufliste von <paramref name="value" /> in der Aufrufliste von <paramref name="source" /> befand.</span><span class="sxs-lookup"><span data-stu-id="e90b4-836">A new delegate with an invocation list formed by taking the invocation list of <paramref name="source" /> and removing the last occurrence of the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the invocation list of <paramref name="source" />.</span></span> <span data-ttu-id="e90b4-837">Gibt <paramref name="source" /> zurück, wenn <paramref name="value" /><see langword="null" /> ist oder die Aufrufliste von <paramref name="value" /> sich nicht innerhalb der Aufrufliste von <paramref name="source" /> befand.</span><span class="sxs-lookup"><span data-stu-id="e90b4-837">Returns <paramref name="source" /> if <paramref name="value" /> is <see langword="null" /> or if the invocation list of <paramref name="value" /> is not found within the invocation list of <paramref name="source" />.</span></span> <span data-ttu-id="e90b4-838">Gibt einen NULL-Verweis zurück, wenn die Aufrufliste von <paramref name="value" /> gleich der Aufrufliste von <paramref name="source" /> ist oder <paramref name="source" /> ein NULL-Verweis ist.</span><span class="sxs-lookup"><span data-stu-id="e90b4-838">Returns a null reference if the invocation list of <paramref name="value" /> is equal to the invocation list of <paramref name="source" /> or if <paramref name="source" /> is a null reference.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e90b4-839">Wenn die Aufruf Liste von `value` mit einem zusammenhängenden Satz von Elementen in der Aufruf Liste `source`übereinstimmt, wird die Aufruf Liste von `value` in der Aufruf Liste von `source`vorkommen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-839">If the invocation list of `value` matches a contiguous set of elements in the invocation list of `source`, then the invocation list of `value` is said to occur within the invocation list of `source`.</span></span> <span data-ttu-id="e90b4-840">Wenn die Aufruf Liste von `value` mehr als einmal in der Aufruf Liste `source`auftritt, wird das letzte Vorkommen entfernt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-840">If the invocation list of `value` occurs more than once in the invocation list of `source`, the last occurrence is removed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="e90b4-841">Der Aufrufer verfügt nicht über Zugriff auf die Methode, die durch den Delegaten dargestellt wird (wenn die Methode z.B. privat ist).</span><span class="sxs-lookup"><span data-stu-id="e90b4-841">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e90b4-842">Die Delegattypen stimmen nicht überein.</span><span class="sxs-lookup"><span data-stu-id="e90b4-842">The delegate types do not match.</span></span></exception>
        <altmember cref="M:System.Delegate.RemoveAll(System.Delegate,System.Delegate)" />
        <altmember cref="M:System.Delegate.RemoveImpl(System.Delegate)" />
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public static Delegate RemoveAll (Delegate source, Delegate value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate RemoveAll(class System.Delegate source, class System.Delegate value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.RemoveAll(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RemoveAll (source As Delegate, value As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ RemoveAll(Delegate ^ source, Delegate ^ value);" />
      <MemberSignature Language="F#" Value="static member RemoveAll : Delegate * Delegate -&gt; Delegate" Usage="System.Delegate.RemoveAll (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Delegate" />
        <Parameter Name="value" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="e90b4-843">Der Delegat, aus dem die Aufrufliste von <paramref name="value" /> entfernt werden soll.</span><span class="sxs-lookup"><span data-stu-id="e90b4-843">The delegate from which to remove the invocation list of <paramref name="value" />.</span></span></param>
        <param name="value"><span data-ttu-id="e90b4-844">Der Delegat, von dem die Aufrufliste stammt, die aus der Aufrufliste von <paramref name="source" /> entfernt werden soll.</span><span class="sxs-lookup"><span data-stu-id="e90b4-844">The delegate that supplies the invocation list to remove from the invocation list of <paramref name="source" />.</span></span></param>
        <summary><span data-ttu-id="e90b4-845">Entfernt alle Vorkommen der Aufrufliste eines Delegaten aus der Aufrufliste eines anderen Delegaten.</span><span class="sxs-lookup"><span data-stu-id="e90b4-845">Removes all occurrences of the invocation list of a delegate from the invocation list of another delegate.</span></span></summary>
        <returns><span data-ttu-id="e90b4-846">Ein neuer Delegat mit einer Aufrufliste, die aus der Aufrufliste von <paramref name="source" /> besteht, aus der alle Vorkommen der Aufrufliste von <paramref name="value" /> entfernt wurden, falls sich die Aufrufliste von <paramref name="value" /> in der Aufrufliste von <paramref name="source" /> befand.</span><span class="sxs-lookup"><span data-stu-id="e90b4-846">A new delegate with an invocation list formed by taking the invocation list of <paramref name="source" /> and removing all occurrences of the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the invocation list of <paramref name="source" />.</span></span> <span data-ttu-id="e90b4-847">Gibt <paramref name="source" /> zurück, wenn <paramref name="value" /><see langword="null" /> ist oder die Aufrufliste von <paramref name="value" /> sich nicht innerhalb der Aufrufliste von <paramref name="source" /> befand.</span><span class="sxs-lookup"><span data-stu-id="e90b4-847">Returns <paramref name="source" /> if <paramref name="value" /> is <see langword="null" /> or if the invocation list of <paramref name="value" /> is not found within the invocation list of <paramref name="source" />.</span></span> <span data-ttu-id="e90b4-848">Gibt einen NULL-Verweis zurück, wenn die Aufrufliste von <paramref name="value" /> gleich der Aufrufliste von <paramref name="source" /> ist, wenn <paramref name="source" /> nur eine Reihe von Aufruflisten enthält, die gleich der Aufrufliste von <paramref name="value" /> sind, oder <paramref name="source" /> ein NULL-Verweis ist.</span><span class="sxs-lookup"><span data-stu-id="e90b4-848">Returns a null reference if the invocation list of <paramref name="value" /> is equal to the invocation list of <paramref name="source" />, if <paramref name="source" /> contains only a series of invocation lists that are equal to the invocation list of <paramref name="value" />, or if <paramref name="source" /> is a null reference.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e90b4-849">Wenn die Aufruf Liste von `value` mit einem zusammenhängenden Satz von Elementen in der Aufruf Liste `source`übereinstimmt, wird die Aufruf Liste von `value` in der Aufruf Liste von `source`vorkommen.</span><span class="sxs-lookup"><span data-stu-id="e90b4-849">If the invocation list of `value` matches a contiguous set of elements in the invocation list of `source`, then the invocation list of `value` is said to occur within the invocation list of `source`.</span></span> <span data-ttu-id="e90b4-850">Wenn die Aufruf Liste von `value` mehr als einmal in der Aufruf Liste `source`vorkommt, werden alle Vorkommen entfernt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-850">If the invocation list of `value` occurs more than once in the invocation list of `source`, all occurrences are removed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="e90b4-851">Der Aufrufer verfügt nicht über Zugriff auf die Methode, die durch den Delegaten dargestellt wird (wenn die Methode z.B. privat ist).</span><span class="sxs-lookup"><span data-stu-id="e90b4-851">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e90b4-852">Die Delegattypen stimmen nicht überein.</span><span class="sxs-lookup"><span data-stu-id="e90b4-852">The delegate types do not match.</span></span></exception>
        <altmember cref="M:System.Delegate.Remove(System.Delegate,System.Delegate)" />
        <altmember cref="M:System.Delegate.RemoveImpl(System.Delegate)" />
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveImpl">
      <MemberSignature Language="C#" Value="protected virtual Delegate RemoveImpl (Delegate d);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Delegate RemoveImpl(class System.Delegate d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.RemoveImpl(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RemoveImpl (d As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual Delegate ^ RemoveImpl(Delegate ^ d);" />
      <MemberSignature Language="F#" Value="abstract member RemoveImpl : Delegate -&gt; Delegate&#xA;override this.RemoveImpl : Delegate -&gt; Delegate" Usage="delegate.RemoveImpl d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Delegate" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="e90b4-853">Der Delegat, von dem die Aufrufliste stammt, die aus der Aufrufliste des aktuellen Delegaten entfernt werden soll.</span><span class="sxs-lookup"><span data-stu-id="e90b4-853">The delegate that supplies the invocation list to remove from the invocation list of the current delegate.</span></span></param>
        <summary><span data-ttu-id="e90b4-854">Entfernt die Aufrufliste eines Delegaten aus der Aufrufliste eines anderen Delegaten.</span><span class="sxs-lookup"><span data-stu-id="e90b4-854">Removes the invocation list of a delegate from the invocation list of another delegate.</span></span></summary>
        <returns><span data-ttu-id="e90b4-855">Ein neuer Delegat mit einer Aufrufliste, die aus der Aufrufliste des aktuellen Delegaten besteht, aus der die Aufrufliste von <paramref name="value" /> entfernt wurde, falls sich die Aufrufliste von <paramref name="value" /> in der Aufrufliste des aktuellen Delegaten befand.</span><span class="sxs-lookup"><span data-stu-id="e90b4-855">A new delegate with an invocation list formed by taking the invocation list of the current delegate and removing the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the current delegate's invocation list.</span></span> <span data-ttu-id="e90b4-856">Gibt den aktuellen Delegaten zurück, wenn <paramref name="value" /><see langword="null" /> ist oder wenn die Aufrufliste von <paramref name="value" /> nicht innerhalb der Aufrufliste des aktuellen Delegaten gefunden wurde.</span><span class="sxs-lookup"><span data-stu-id="e90b4-856">Returns the current delegate if <paramref name="value" /> is <see langword="null" /> or if the invocation list of <paramref name="value" /> is not found within the current delegate's invocation list.</span></span> <span data-ttu-id="e90b4-857">Gibt <see langword="null" /> zurück, wenn die Aufrufliste von <paramref name="value" /> gleich der Aufrufliste des aktuellen Delegaten ist.</span><span class="sxs-lookup"><span data-stu-id="e90b4-857">Returns <see langword="null" /> if the invocation list of <paramref name="value" /> is equal to the current delegate's invocation list.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e90b4-858">Wenn die Aufruf Liste von `value` mit einem zusammenhängenden Satz von Elementen in der Aufruf Liste des aktuellen Delegaten übereinstimmt, wird die Aufruf Liste `value` als in der Aufruf Liste des aktuellen Delegaten angezeigt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-858">If the invocation list of `value` matches a contiguous set of elements in the current delegate's invocation list, then the invocation list of `value` is said to occur within the current delegate's invocation list.</span></span> <span data-ttu-id="e90b4-859">Wenn die Aufruf Liste von `value` mehr als einmal in der Aufruf Liste des aktuellen Delegaten vorkommt, wird das letzte Vorkommen entfernt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-859">If the invocation list of `value` occurs more than once in the current delegate's invocation list, the last occurrence is removed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="e90b4-860">Der Aufrufer verfügt nicht über Zugriff auf die Methode, die durch den Delegaten dargestellt wird (wenn die Methode z.B. privat ist).</span><span class="sxs-lookup"><span data-stu-id="e90b4-860">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span></span></exception>
        <altmember cref="M:System.Delegate.Remove(System.Delegate,System.Delegate)" />
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Target">
      <MemberSignature Language="C#" Value="public object Target { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Target" />
      <MemberSignature Language="DocId" Value="P:System.Delegate.Target" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Target As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Target { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Target : obj" Usage="System.Delegate.Target" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e90b4-861">Ruft die Klasseninstanz ab, für die der aktuelle Delegat die Instanzenmethode aufruft.</span><span class="sxs-lookup"><span data-stu-id="e90b4-861">Gets the class instance on which the current delegate invokes the instance method.</span></span></summary>
        <value><span data-ttu-id="e90b4-862">Das Objekt, für das der aktuelle Delegat die Instanzmethode aufruft, wenn der Delegat eine Instanzmethode darstellt, <see langword="null" />, wenn der Delegat eine statische Methode darstellt.</span><span class="sxs-lookup"><span data-stu-id="e90b4-862">The object on which the current delegate invokes the instance method, if the delegate represents an instance method; <see langword="null" /> if the delegate represents a static method.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e90b4-863">Eine Instanzmethode ist eine Methode, die einer Instanz einer-Klasse zugeordnet ist. eine statische Methode ist eine Methode, die der Klasse selbst zugeordnet ist.</span><span class="sxs-lookup"><span data-stu-id="e90b4-863">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="e90b4-864">Wenn der Delegat eine oder mehrere Instanzmethoden aufruft, gibt diese Eigenschaft das Ziel der letzten Instanzmethode in der Aufruf Liste zurück.</span><span class="sxs-lookup"><span data-stu-id="e90b4-864">If the delegate invokes one or more instance methods, this property returns the target of the last instance method in the invocation list.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="Action&lt;T1,T2,T3&gt;" FullName="System.Action&lt;T1,T2,T3&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="36d4fcf318fb44ecc0422ce215027fb8c19a005c" /><Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="09/22/2018" /><Meta Name="ms.locfileid" Value="46694641" /></Metadata><TypeSignature Language="C#" Value="public delegate void Action&lt;in T1,in T2,in T3&gt;(T1 arg1, T2 arg2, T3 arg3);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Action`3&lt;- T1, - T2, - T3&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Action`3" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub Action(Of In T1, In T2, In T3)(arg1 As T1, arg2 As T2, arg3 As T3)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3&gt;&#xA;public delegate void Action(T1 arg1, T2 arg2, T3 arg3);" />
  <TypeSignature Language="F#" Value="type Action&lt;'T1, 'T2, 'T3&gt; = delegate of 'T1 * 'T2 * 'T3 -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T2">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T3">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="arg1" Type="T1" />
    <Parameter Name="arg2" Type="T2" />
    <Parameter Name="arg3" Type="T3" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T1"><span data-ttu-id="fe93e-101">Der Typ des ersten Parameters der Methode, die dieser Delegat kapselt.</span><span class="sxs-lookup"><span data-stu-id="fe93e-101">The type of the first parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <typeparam name="T2"><span data-ttu-id="fe93e-102">Der Typ des zweiten Parameters der Methode, die dieser Delegat kapselt.</span><span class="sxs-lookup"><span data-stu-id="fe93e-102">The type of the second parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <typeparam name="T3"><span data-ttu-id="fe93e-103">Der Typ des dritten Parameters der Methode, die dieser Delegat kapselt.</span><span class="sxs-lookup"><span data-stu-id="fe93e-103">The type of the third parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <param name="arg1"><span data-ttu-id="fe93e-104">Der erste Parameter der Methode, die dieser Delegat kapselt.</span><span class="sxs-lookup"><span data-stu-id="fe93e-104">The first parameter of the method that this delegate encapsulates.</span></span></param>
    <param name="arg2"><span data-ttu-id="fe93e-105">Der zweite Parameter der Methode, die dieser Delegat kapselt.</span><span class="sxs-lookup"><span data-stu-id="fe93e-105">The second parameter of the method that this delegate encapsulates.</span></span></param>
    <param name="arg3"><span data-ttu-id="fe93e-106">Der dritte Parameter der Methode, die dieser Delegat kapselt.</span><span class="sxs-lookup"><span data-stu-id="fe93e-106">The third parameter of the method that this delegate encapsulates.</span></span></param>
    <summary><span data-ttu-id="fe93e-107">Kapselt eine Methode, die über drei Parameter verfügt und keinen Wert zurückgibt.</span><span class="sxs-lookup"><span data-stu-id="fe93e-107">Encapsulates a method that has three parameters and does not return a value.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fe93e-108">Sie können die <xref:System.Action%603> Delegat, der eine Methode als Parameter übergeben werden, ohne explizit einen benutzerdefinierten Delegaten zu deklarieren.</span><span class="sxs-lookup"><span data-stu-id="fe93e-108">You can use the <xref:System.Action%603> delegate to pass a method as a parameter without explicitly declaring a custom delegate.</span></span> <span data-ttu-id="fe93e-109">Die der gekapselte Methode muss die Signatur der Methode entsprechen, die von diesem Delegaten definiert ist.</span><span class="sxs-lookup"><span data-stu-id="fe93e-109">The encapsulated method must correspond to the method signature that is defined by this delegate.</span></span> <span data-ttu-id="fe93e-110">Dies bedeutet, dass die gekapselte Methode zunächst drei Parameter, die alle an ihn als Wert übergeben werden, müssen sie keinen Wert zurück.</span><span class="sxs-lookup"><span data-stu-id="fe93e-110">This means that the encapsulated method must have three parameters that are all passed to it by value, and it must not return a value.</span></span> <span data-ttu-id="fe93e-111">(In c# muss die Methode zurückgeben `void`.</span><span class="sxs-lookup"><span data-stu-id="fe93e-111">(In C#, the method must return `void`.</span></span> <span data-ttu-id="fe93e-112">In Visual Basic muss es vom definiert werden die `Sub`...`End Sub`</span><span class="sxs-lookup"><span data-stu-id="fe93e-112">In Visual Basic, it must be defined by the `Sub`…`End Sub`</span></span> <span data-ttu-id="fe93e-113">erstellen.</span><span class="sxs-lookup"><span data-stu-id="fe93e-113">construct.</span></span> <span data-ttu-id="fe93e-114">Sie können auch eine Methode, die einen Wert zurückgibt, der ignoriert wird sein.) In der Regel wird eine solche Methode zum Ausführen eines Vorgangs verwendet.</span><span class="sxs-lookup"><span data-stu-id="fe93e-114">It can also be a method that returns a value that is ignored.) Typically, such a method is used to perform an operation.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fe93e-115">Um eine Methode zu verweisen, die über drei Parameter verfügt und einen Wert zurückgibt, verwenden Sie den generischen <xref:System.Func%604> stattdessen delegieren.</span><span class="sxs-lookup"><span data-stu-id="fe93e-115">To reference a method that has three parameters and returns a value, use the generic <xref:System.Func%604> delegate instead.</span></span>  
  
 <span data-ttu-id="fe93e-116">Bei Verwendung der <xref:System.Action%603> Delegaten, Sie müssen nicht explizit einen Delegaten definieren, die eine Methode mit drei Parametern kapselt.</span><span class="sxs-lookup"><span data-stu-id="fe93e-116">When you use the <xref:System.Action%603> delegate, you do not have to explicitly define a delegate that encapsulates a method with three parameters.</span></span> <span data-ttu-id="fe93e-117">Der folgende Code deklariert beispielsweise explizit einen Delegaten, der mit dem Namen `StringCopy` und weist einen Verweis auf die `CopyStrings` Methode, um eine Delegatinstanz.</span><span class="sxs-lookup"><span data-stu-id="fe93e-117">For example, the following code explicitly declares a delegate named `StringCopy` and assigns a reference to the `CopyStrings` method to its delegate instance.</span></span>  
  
 [!code-csharp[System.Action~3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~3/cs/Delegate.cs#1)]
 [!code-vb[System.Action~3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~3/vb/Delegate.vb#1)]  
  
 <span data-ttu-id="fe93e-118">Im folgende Beispiel wird dieser Code vereinfacht, durch die Instanziierung der <xref:System.Action%603> Delegaten aufrufen, anstatt explizit definieren einen neuen Delegaten und eine benannte Methode zugewiesen wird.</span><span class="sxs-lookup"><span data-stu-id="fe93e-118">The following example simplifies this code by instantiating the <xref:System.Action%603> delegate instead of explicitly defining a new delegate and assigning a named method to it.</span></span>  
  
 [!code-csharp[System.Action~3#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~3/cs/Action3.cs#2)]
 [!code-vb[System.Action~3#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~3/vb/Action3.vb#2)]  
  
 <span data-ttu-id="fe93e-119">Sie können auch die <xref:System.Action%603> delegieren mit anonymen Methoden in C# geschrieben, wie im folgende Beispiel veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="fe93e-119">You can also use the <xref:System.Action%603> delegate with anonymous methods in C#, as the following example illustrates.</span></span> <span data-ttu-id="fe93e-120">(Eine Einführung in anonyme Methoden, finden Sie unter [anonyme Methoden](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span><span class="sxs-lookup"><span data-stu-id="fe93e-120">(For an introduction to anonymous methods, see [Anonymous Methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span></span>  
  
 [!code-csharp[System.Action~3#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~3/cs/Anon.cs#3)]  
  
 <span data-ttu-id="fe93e-121">Sie können auch einen Lambda-Ausdruck zuweisen einer <xref:System.Action%603> Instanz delegieren, wie im folgende Beispiel veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="fe93e-121">You can also assign a lambda expression to an <xref:System.Action%603> delegate instance, as the following example illustrates.</span></span> <span data-ttu-id="fe93e-122">(Eine Einführung in Lambda-Ausdrücke, finden Sie unter [Lambda-Ausdrücke](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span><span class="sxs-lookup"><span data-stu-id="fe93e-122">(For an introduction to lambda expressions, see [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span></span>  
  
 [!code-csharp[System.Action~3#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~3/cs/Lambda.cs#4)]
 [!code-vb[System.Action~3#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~3/vb/lambda.vb#4)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Func`4" />
  </Docs>
</Type>
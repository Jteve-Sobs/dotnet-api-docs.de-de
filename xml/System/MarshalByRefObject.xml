<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="MarshalByRefObject.xml" source-language="en-US" target-language="de-DE">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac583acfa54440d5b5ba0c4eb247332f63cbe45d467.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">83acfa54440d5b5ba0c4eb247332f63cbe45d467</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.MarshalByRefObject">
          <source>Enables access to objects across application domain boundaries in applications that support remoting.</source>
          <target state="translated">Ermöglicht den Zugriff auf Objekte über Anwendungsdomänen hinweg in Anwendungen, die Remoting unterstützen.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>An application domain is a partition in an operating system process where one or more applications reside.</source>
          <target state="translated">Eine Anwendungsdomäne ist eine Partition in einem Betriebssystemprozess, auf dem eine oder mehrere Anwendungen befinden.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>Objects in the same application domain communicate directly.</source>
          <target state="translated">Objekte in der gleichen Anwendungsdomäne direkt miteinander kommunizieren.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>Objects in different application domains communicate either by transporting copies of objects across application domain boundaries, or by using a proxy to exchange messages.</source>
          <target state="translated">Objekte in unterschiedlichen Anwendungsdomänen kommunizieren durch das Transportieren von Kopien von Objekten über Anwendungsdomänen hinweg oder mit einem Proxy für den Austausch von Nachrichten.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source><ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> is the base class for objects that communicate across application domain boundaries by exchanging messages using a proxy.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> die Basisklasse für Objekte, die über Anwendungsdomänengrenzen hinweg zu kommunizieren, indem Nachrichten ausgetauscht werden, die einen Proxy verwenden.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>Objects that do not inherit from <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> are implicitly marshal by value.</source>
          <target state="translated">Objekte, die nicht von erben <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> implizit als Wert gemarshallt werden.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>When a remote application references a marshal by value object, a copy of the object is passed across application domain boundaries.</source>
          <target state="translated">Wenn eine Remoteanwendung eine Marshallen von Wertobjekt verwiesen wird, wird eine Kopie des Objekts über Anwendungsdomänengrenzen hinweg übergeben.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source><ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> objects are accessed directly within the boundaries of the local application domain.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> Objekte direkt innerhalb der Grenzen der lokalen Anwendungsdomäne zugegriffen.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>The first time an application in a remote application domain accesses a <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph>, a proxy is passed to the remote application.</source>
          <target state="translated">Zum ersten Mal eine Anwendung in einer Anwendungsdomäne greift ein <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph>, ein Proxy an die Anwendung übergeben wird.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>Subsequent calls on the proxy are marshaled back to the object residing in the local application domain.</source>
          <target state="translated">Nachfolgende Aufrufe auf dem Proxy werden zurück an das Objekt im lokalen Anwendungsdomäne gespeicherten gemarshallt.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>Types must inherit from <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> when the type is used across application domain boundaries, and the state of the object must not be copied because the members of the object are not usable outside the application domain where they were created.</source>
          <target state="translated">Typen müssen von erben <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> Wenn der Typ über Anwendungsdomänengrenzen hinweg verwendet wird, und der Zustand des Objekts muss nicht kopiert werden, da die Member des Objekts nicht außerhalb der Anwendungsdomäne verwendet werden, in dem sie erstellt wurden.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>When you derive an object from <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> for use across application domain boundaries, you should not override any of its members, nor should you call its methods directly.</source>
          <target state="translated">Beim Ableiten eines Objekts aus <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> für die Verwendung über Anwendungsdomänengrenzen hinweg, Sie sollte nicht außer Kraft setzen eines seiner Member noch sollten Sie seine Methoden direkt aufrufen.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>The runtime recognizes that classes derived from  <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> should be marshaled across app domain boundaries.</source>
          <target state="translated">Die Common Language Runtime erkennt, dass Klassen abgeleitete <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> über app-Domänengrenzen hinweg gemarshallt werden sollen.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>This section contains two code examples.</source>
          <target state="translated">Dieser Abschnitt enthält zwei Codebeispiele.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>The first code example shows how to create an instance of a class in another application domain.</source>
          <target state="translated">Im ersten Codebeispiel wird veranschaulicht, wie eine Instanz einer Klasse in einer anderen Anwendungsdomäne zu erstellen.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>The second code example shows a simple class that can be used for remoting.</source>
          <target state="translated">Das zweite Codebeispiel zeigt eine einfache Klasse, die für das Remoting verwendet werden kann.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source><bpt id="p1">**</bpt>Example 1<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Beispiel 1<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>The following code example shows the simplest way to execute code in another application domain.</source>
          <target state="translated">Das folgende Codebeispiel zeigt die einfachste Möglichkeit zum Ausführen von Code in einer anderen Anwendungsdomäne.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>The example defines a class named <ph id="ph1">`Worker`</ph> that inherits <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph>, with a method that displays the name of the application domain in which it is executing.</source>
          <target state="translated">Im Beispiel definiert eine Klasse namens <ph id="ph1">`Worker`</ph> erbt <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph>, mit einer Methode, die den Namen der Anwendungsdomäne anzeigt, in der er ausgeführt wird.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>The example creates instances of <ph id="ph1">`Worker`</ph> in the default application domain and in a new application domain.</source>
          <target state="translated">Das Beispiel erstellt Instanzen von <ph id="ph1">`Worker`</ph> in der Standardanwendungsdomäne und in eine neue Anwendungsdomäne.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>The assembly that contains <ph id="ph1">`Worker`</ph> must be loaded into both application domains, but it could load other assemblies that would exist only in the new application domain.</source>
          <target state="translated">Die Assembly mit <ph id="ph1">`Worker`</ph> muss in beide Anwendungsdomänen geladen werden, aber andere Assemblys, die nur in der neuen Anwendungsdomäne vorhanden wäre geladen werden konnte.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source><bpt id="p1">**</bpt>Example 2<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Beispiel 2<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>The following example demonstrates a class derived from <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> that is used later in remoting.</source>
          <target state="translated">Das folgende Beispiel veranschaulicht eine Klasse abgeleitet <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> also verwendete weiter unten in Remoting.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph> class.</source>
          <target state="translated">Initialisiert eine neue Instanz der <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph>-Klasse.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> of the object that the new <ph id="ph2">&lt;see cref="T:System.Runtime.Remoting.ObjRef" /&gt;</ph> will reference.</source>
          <target state="translated">Der <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> des Objekts, auf das der neue <ph id="ph2">&lt;see cref="T:System.Runtime.Remoting.ObjRef" /&gt;</ph> verweist.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
          <source>Creates an object that contains all the relevant information required to generate a proxy used to communicate with a remote object.</source>
          <target state="translated">Erstellt ein Objekt mit allen relevanten Informationen, die zum Generieren eines Proxys für die Kommunikation mit einem Remoteobjekt erforderlich sind.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
          <source>Information required to generate a proxy.</source>
          <target state="translated">Zum Generieren eines Proxys erforderliche Informationen.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
          <source>The <ph id="ph1">&lt;xref:System.MarshalByRefObject.CreateObjRef%2A&gt;</ph> method is called by remote object creation methods such as <ph id="ph2">&lt;xref:System.AppDomain.CreateInstance%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.MarshalByRefObject.CreateObjRef%2A&gt;</ph> Methode wird von Methoden zur knotenerstellung Remoteobjekt aufgerufen, wie z. B. <ph id="ph2">&lt;xref:System.AppDomain.CreateInstance%2A?displayProperty=nameWithType&gt;</ph> und <ph id="ph3">&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
          <source>In most cases, there is no need to override this method.</source>
          <target state="translated">In den meisten Fällen ist gibt es nicht erforderlich, diese Methode überschreiben.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
          <source>This instance is not a valid remoting object.</source>
          <target state="translated">Diese Instanz ist kein gültiges Remoteobjekt.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
          <source>The immediate caller does not have infrastructure permission.</source>
          <target state="translated">Der direkte Aufrufer verfügt nicht über die Berechtigung für die Infrastruktur.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">erfordert volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Dieser Member kann nicht von teilweise vertrauenswürdigem oder transparentem Code verwendet werden.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.GetLifetimeService">
          <source>Retrieves the current lifetime service object that controls the lifetime policy for this instance.</source>
          <target state="translated">Ruft das aktuelle Lebensdauerdienstobjekt ab, das die Lebensdauerrichtlinien für diese Instanz steuert.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.GetLifetimeService">
          <source>An object of type <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Lifetime.ILease" /&gt;</ph> used to control the lifetime policy for this instance.</source>
          <target state="translated">Ein Objekt vom Typ <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Lifetime.ILease" /&gt;</ph>, das zur Steuerung der Lebensdauerrichtlinien für diese Instanz verwendet wird.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.GetLifetimeService">
          <source>For more information about lifetime services, see the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Lifetime.LifetimeServices&gt;</ph> class.</source>
          <target state="translated">Weitere Informationen über Lebensdauerdienste finden Sie unter der <ph id="ph1">&lt;xref:System.Runtime.Remoting.Lifetime.LifetimeServices&gt;</ph> Klasse.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.GetLifetimeService">
          <source>The immediate caller does not have infrastructure permission.</source>
          <target state="translated">Der direkte Aufrufer verfügt nicht über die Berechtigung für die Infrastruktur.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.GetLifetimeService">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">erfordert volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.GetLifetimeService">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Dieser Member kann nicht von teilweise vertrauenswürdigem oder transparentem Code verwendet werden.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.InitializeLifetimeService">
          <source>Obtains a lifetime service object to control the lifetime policy for this instance.</source>
          <target state="translated">Ruft ein Lebensdauerdienstobjekt zur Steuerung der Lebensdauerrichtlinie für diese Instanz ab.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.InitializeLifetimeService">
          <source>An object of type <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Lifetime.ILease" /&gt;</ph> used to control the lifetime policy for this instance.</source>
          <target state="translated">Ein Objekt vom Typ <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Lifetime.ILease" /&gt;</ph>, das zur Steuerung der Lebensdauerrichtlinien für diese Instanz verwendet wird.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.InitializeLifetimeService">
          <source>This is the current lifetime service object for this instance if one exists; otherwise, a new lifetime service object initialized to the value of the <ph id="ph1">&lt;see cref="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime" /&gt;</ph> property.</source>
          <target state="translated">Dies ist das aktuelle Lebensdauerdienstobjekt für diese Instanz, sofern vorhanden, bzw. ein neues Lebensdauerdienstobjekt, das mit dem Wert der <ph id="ph1">&lt;see cref="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime" /&gt;</ph>-Eigenschaft initialisiert wurde.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.InitializeLifetimeService">
          <source>For more information about lifetime services, see the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Lifetime.LifetimeServices&gt;</ph> class.</source>
          <target state="translated">Weitere Informationen über Lebensdauerdienste finden Sie unter der <ph id="ph1">&lt;xref:System.Runtime.Remoting.Lifetime.LifetimeServices&gt;</ph> Klasse.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.InitializeLifetimeService">
          <source>The following code example demonstrates creating a lease.</source>
          <target state="translated">Das folgende Codebeispiel veranschaulicht das Erstellen einer Leases.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.InitializeLifetimeService">
          <source>The immediate caller does not have infrastructure permission.</source>
          <target state="translated">Der direkte Aufrufer verfügt nicht über die Berechtigung für die Infrastruktur.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.InitializeLifetimeService">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">erfordert volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.InitializeLifetimeService">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Dieser Member kann nicht von teilweise vertrauenswürdigem oder transparentem Code verwendet werden.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="T:System.MarshalByRefObject">
          <source>Creates a shallow copy of the current object.</source>
          <target state="translated">Erstellt eine flache Kopie des aktuellen Objekts.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="false" /&gt;</ph> to delete the current <ph id="ph2">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph> object's identity, which will cause the object to be assigned a new identity when it is marshaled across a remoting boundary.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="false" /&gt;</ph> zum Löschen der Identität des aktuellen <ph id="ph2">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph>-Objekts. Dies führt dazu, dass dem Objekt eine neue Identität zugewiesen wird, wenn es über eine Remotegrenze gemarshallt wird.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>A value of <ph id="ph1">&lt;see langword="false" /&gt;</ph> is usually appropriate.</source>
          <target state="translated">Der Wert <ph id="ph1">&lt;see langword="false" /&gt;</ph> ist in der Regel geeignet.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to copy the current <ph id="ph2">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph> object's identity to its clone, which will cause remoting client calls to be routed to the remote server object.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn die Identität des aktuellen <ph id="ph2">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph> in dessen Klon kopiert werden soll. Das führt dazu, dass Remoteclient-Aufrufe an das Remoteserverobjekt weitergeleitet werden.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>Creates a shallow copy of the current <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph> object.</source>
          <target state="translated">Erstellt eine flache Kopie des aktuellen <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph>-Objekts.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>A shallow copy of the current <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph> object.</source>
          <target state="translated">Eine flache Kopie des aktuellen <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph>-Objekts.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.MarshalByRefObject.MemberwiseClone%28System.Boolean%29&gt;</ph> method creates a shallow copy by creating a new <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph> object, and then copying the nonstatic fields of the current <ph id="ph3">&lt;xref:System.MarshalByRefObject&gt;</ph> object to the new object.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.MarshalByRefObject.MemberwiseClone%28System.Boolean%29&gt;</ph> Methode erstellt eine flache Kopie durch Erstellen eines neuen <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph> -Objekt, und kopieren Sie die nicht statischen Felder des aktuellen <ph id="ph3">&lt;xref:System.MarshalByRefObject&gt;</ph> -Objekt, das neue Objekt.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>If a field is a value type, a bit-by-bit copy of the field is performed.</source>
          <target state="translated">Wenn ein Feld ein Werttyp ist, erfolgt eine Bit für Bit-Kopie des Felds.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>If a field is a reference type, the reference is copied but the referred object is not; therefore, the original object and its clone refer to the same object.</source>
          <target state="translated">Wenn ein Feld ein Verweistyp ist, wird der Verweis kopiert, aber das referenzierte Objekt ist nicht; das ursprüngliche Objekt und dessen Klon sich daher auf das gleiche Objekt beziehen.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>For example, consider a <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> object called X that references objects A and B. Object B, in turn, references object C. A shallow copy of X creates new object X2 that also references objects A and B. In contrast, a deep copy of X creates a new object X2 that references the new objects A2 and B2, which are copies of A and B. B2, in turn, references the new object C2, which is a copy C. Use a class that implements the <ph id="ph2">&lt;xref:System.ICloneable&gt;</ph> interface to perform a deep or shallow copy of an object.</source>
          <target state="translated">Betrachten Sie beispielsweise eine <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> x, Objekte A und B, verweist, das Objekt verweist wiederum auf Objekt C. Eine flache Kopie von X erstellt neue Objekt X2, das auch Objekte A und b verweist Im Gegensatz dazu eine tiefe Kopie von X erstellt ein neues Objekt X2, die verweist auf die neuen Objekte A2 und B2, die Kopien von A und b B2 verweist wiederum auf das neue Objekt C2, der eine Kopie C. Verwenden einer Klasse implementiert die <ph id="ph2">&lt;xref:System.ICloneable&gt;</ph> Schnittstelle, um eine tief oder flach c ausführen Kopieren eines Objekts.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>The identity of a <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> object is defined as the remote server object that is the target of a remoting client call.</source>
          <target state="translated">Die Identität des ein <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> Objekt ist als der Remoteserver-Objekt, das das Ziel eines Aufrufs der Remoting-Client ist definiert.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>By default, the memberwise clone of a <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> object has the same identity as the original object, which is typically not the correct behavior for clones of server-side objects that are marshaled across a remoting boundary to the client side.</source>
          <target state="translated">Wird standardmäßig die memberspezifische Kopie einer <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> Objekt hat die gleiche Identität wie das ursprüngliche Objekt, die in der Regel nicht das richtige Verhalten nach Klonen dieses serverseitige Objekte, die über eine Remotegrenze mit dem clientseitigen gemarshallt werden.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>Specify <ph id="ph1">`false`</ph>, which is usually appropriate, to delete the identity of the clone and cause a new identity to be assigned when the clone is marshaled across a remoting boundary, or <ph id="ph2">`true`</ph> to cause the clone to retain the identity of the original <ph id="ph3">&lt;xref:System.MarshalByRefObject&gt;</ph> object.</source>
          <target state="translated">Geben Sie <ph id="ph1">`false`</ph>, also normalerweise sinnvoll, die Identität des Klons zu löschen und eine neue Identität zugewiesen werden, wenn der Klon über eine Remotegrenze gemarshallt wird oder <ph id="ph2">`true`</ph> , dazu führen, dass den Klon die Identität des ursprünglichen beibehaltenwerdensollen.<ph id="ph3">&lt;xref:System.MarshalByRefObject&gt;</ph> Objekt.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.MarshalByRefObject.MemberwiseClone%28System.Boolean%29&gt;</ph> method is intended to be used by developers implementing remote server objects.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.MarshalByRefObject.MemberwiseClone%28System.Boolean%29&gt;</ph> Methode von Entwicklern zum Implementieren von remote-Server-Objekte verwendet werden soll.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>
<Type Name="Tuple&lt;T1,T2,T3,T4,T5,T6&gt;" FullName="System.Tuple&lt;T1,T2,T3,T4,T5,T6&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1086b6148570cf7862fdada5a080c05c90a2ac0e" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30730684" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Tuple&lt;T1,T2,T3,T4,T5,T6&gt; : IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Tuple`6&lt;T1, T2, T3, T4, T5, T6&gt; extends System.Object implements class System.Collections.IStructuralComparable, class System.Collections.IStructuralEquatable, class System.IComparable" />
  <TypeSignature Language="DocId" Value="T:System.Tuple`6" />
  <TypeSignature Language="VB.NET" Value="Public Class Tuple(Of T1, T2, T3, T4, T5, T6)&#xA;Implements IComparable, IStructuralComparable, IStructuralEquatable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6&gt;&#xA;public ref class Tuple : IComparable, System::Collections::IStructuralComparable, System::Collections::IStructuralEquatable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1" />
    <TypeParameter Name="T2" />
    <TypeParameter Name="T3" />
    <TypeParameter Name="T4" />
    <TypeParameter Name="T5" />
    <TypeParameter Name="T6" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IStructuralComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IStructuralEquatable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T1">Der Typ der ersten Komponente des Tupels.</typeparam>
    <typeparam name="T2">Der Typ der zweiten Komponente des Tupels.</typeparam>
    <typeparam name="T3">Der Typ der dritten Komponente des Tupels.</typeparam>
    <typeparam name="T4">Der Typ der vierten Komponente des Tupels.</typeparam>
    <typeparam name="T5">Der Typ der fünften Komponente des Tupels.</typeparam>
    <typeparam name="T6">Der Typ der sechsten Komponente des Tupels.</typeparam>
    <summary>Stellt ein 6-Tupel (Sextupel) dar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein Tupel ist eine Datenstruktur, die eine bestimmte Anzahl und die Sequenz von Werten aufweist. Die <xref:System.Tuple%606> -Klasse stellt ein 6-Tupel bzw. Sextupel, ist, die über sechs Komponenten verfügt.  
  
 Instanziieren Sie ein <xref:System.Tuple%606> durch den Aufruf eines Objekts die <xref:System.Tuple%606.%23ctor%2A> oder die statische <xref:System.Tuple.Create%60%606%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%2C%60%605%29?displayProperty=nameWithType> Methode. Sie können den Wert der Komponenten des Tupels abrufen, indem Sie mithilfe der schreibgeschützten <xref:System.Tuple%606.Item1%2A>, <xref:System.Tuple%606.Item2%2A>, <xref:System.Tuple%606.Item3%2A>, <xref:System.Tuple%606.Item4%2A>, <xref:System.Tuple%606.Item5%2A>, und <xref:System.Tuple%606.Item6%2A> Instanzeigenschaften.  
  
 Tupel werden häufig in vier verschiedene Arten verwendet:  
  
-   Um einen einzelnen Satz von Daten darzustellen. Beispielsweise ein Tupel kann ein Datenbankeintrag darstellen, und seine Komponenten können einzelne Felder des Datensatzes darstellen.  
  
-   Einfacher Zugriff auf und Bearbeitung von einem DataSet bereitzustellen. Das folgende Beispiel definiert eine <xref:System.Tuple%606> -Objekt, das Daten der Auffüllung für New York City für jede Volkszählung von 1960 bis 2000 enthält. Das Sextupel wird zum Übergeben der `ComputePopulationChange` -Methode, die die jährliche Änderungsrate zwischen Volkszählungen berechnet, sowie die jährliche Änderungsrate für den gesamten 50 Jahren berechnet.  
  
     [!code-csharp[System.Tuple\`6.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.class/cs/example1.cs#1)]
     [!code-vb[System.Tuple\`6.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.class/vb/example1.vb#1)]  
  
-   Mehrere Werte zurückgeben, von einer Methode ohne Verwendung eines `out` Parameter (in c#) oder `ByRef` Parameter (in Visual Basic). Das vorherige Beispiel gibt z. B. seine berechnete Statistik, zusammen mit dem Namen der Stadt, in einem <xref:System.Tuple%606> Objekt.  
  
-   Mehrere Werte an eine Methode über einen einzelnen Parameter übergeben. Z. B. die <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> Methode verfügt über einen einzelnen Parameter, mit dem Sie einen Wert für die Methode angeben, die beim Start der Thread ausgeführt wird. Wenn Sie angeben, ein <xref:System.Tuple%606> -Objekt als Methodenargument können Sie die Startroutine mit sechs Datenelemente angeben.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Tuple" />
    <altmember cref="T:System.Tuple`1" />
    <altmember cref="T:System.Tuple`2" />
    <altmember cref="T:System.Tuple`3" />
    <altmember cref="T:System.Tuple`4" />
    <altmember cref="T:System.Tuple`5" />
    <altmember cref="T:System.Tuple`7" />
    <altmember cref="T:System.Tuple`8" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Tuple (T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T1 item1, !T2 item2, !T3 item3, !T4 item4, !T5 item5, !T6 item6) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`6.#ctor(`0,`1,`2,`3,`4,`5)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (item1 As T1, item2 As T2, item3 As T3, item4 As T4, item5 As T5, item6 As T6)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Tuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="item1" Type="T1" />
        <Parameter Name="item2" Type="T2" />
        <Parameter Name="item3" Type="T3" />
        <Parameter Name="item4" Type="T4" />
        <Parameter Name="item5" Type="T5" />
        <Parameter Name="item6" Type="T6" />
      </Parameters>
      <Docs>
        <param name="item1">Der Wert der ersten Komponente des Tupels.</param>
        <param name="item2">Der Wert der zweiten Komponente des Tupels.</param>
        <param name="item3">Der Wert der dritten Komponente des Tupels.</param>
        <param name="item4">Der Wert der vierten Komponente des Tupels.</param>
        <param name="item5">Der Wert der fünften Komponente des Tupels.</param>
        <param name="item6">Der Wert der sechsten Komponente des Tupels.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Tuple`6" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können auch mithilfe der statischen <xref:System.Tuple.Create%60%606%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%2C%60%605%29?displayProperty=nameWithType> Methode, um ein 6-Tupel-Objekt zu instanziieren, ohne die Typen seiner Komponenten explizit angeben zu müssen. Im folgenden Beispiel wird die <xref:System.Tuple.Create%60%606%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%2C%60%605%29?displayProperty=nameWithType> Methode, um ein 6-Tupel, dessen erste Komponente vom Typ ist <xref:System.String> und dessen verbleibenden Komponenten des Typs <xref:System.Int32>.  
  
 [!code-csharp[System.Tuple.Create#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/create1.cs#11)]
 [!code-vb[System.Tuple.Create#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/create1.vb#11)]  
  
 Dies ist gleichbedeutend mit dem folgenden Aufruf der <xref:System.Tuple%606.%23ctor%2A> Klassenkonstruktor.  
  
 [!code-csharp[System.Tuple.Create#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/create1.cs#12)]
 [!code-vb[System.Tuple.Create#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/create1.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`6.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Das Objekt, das mit dieser Instanz verglichen werden soll.</param>
        <summary>Gibt einen Wert zurück, der angibt, ob das aktuelle <see cref="T:System.Tuple`6" />-Objekt gleich einem angegebenen Objekt ist.</summary>
        <returns>
          <see langword="true" />, wenn die aktuelle Instanz gleich dem angegebenen Objekt ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `obj` Parameter wird als gleich der aktuellen Instanz in den folgenden Situationen:  
  
-   Es ist ein <xref:System.Tuple%606> Objekt.  
  
-   Seine sechs Komponenten weisen dieselben Typen wie die aktuelle Instanz auf.  
  
-   Seine sechs Komponenten sind, die denen der aktuellen Instanz entsprechen. Die Gleichheit wird vom standardmäßigen Objektgleichheitsvergleich für die einzelnen Komponenten festgelegt.  
  
   
  
## Examples  
 Das folgende Beispiel definiert ein Array von Sextupeln, die Auffüllung Daten für Los Angeles "und" New York von 1960 auf 2000 enthalten. Die erste Komponente der einzelnen Sextupel identifiziert den Ort an. Die erste, dritte und vierte Sextupel enthält Daten für New York. Das erste Sextupel ist ein Duplikat des vierten Sextupel. Das dritte Sextupel identifiziert den Ort als "New York City" anstelle von "New York". Wie das Beispiel zeigt, ist nur das vierte Sextupel gleich dem ersten Sextupel.  
  
 [!code-csharp[System.Tuple\`6.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.equals/cs/equals1.cs#1)]
 [!code-vb[System.Tuple\`6.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.equals/vb/equals1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`6.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt den Hashcode für das aktuelle <see cref="T:System.Tuple`6" />-Objekt zurück.</summary>
        <returns>Ein 32-Bit-Hashcode als ganze Zahl mit Vorzeichen.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item1">
      <MemberSignature Language="C#" Value="public T1 Item1 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T1 Item1" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`6.Item1" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item1 As T1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T1 Item1 { T1 get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T1</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Wert der ersten Komponente des aktuellen <see cref="T:System.Tuple`6" />-Objekts ab.</summary>
        <value>Der Wert der ersten Komponente des aktuellen <see cref="T:System.Tuple`6" />-Objekts.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können den Typ des dynamisch bestimmen die <xref:System.Tuple%606.Item1%2A> -Komponente in zwei Arten:  
  
-   Durch Aufrufen der `GetType` Methode auf dem Wert, der von zurückgegeben wird die <xref:System.Tuple%606.Item1%2A> Eigenschaft.  
  
-   Durch Abrufen der <xref:System.Type> Objekt, das darstellt der <xref:System.Tuple%606> -Objekt und das Abrufen des ersten Elements aus dem Array, das von zurückgegebene seine <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> Methode.  
  
   
  
## Examples  
 Das folgende Beispiel definiert ein Array von <xref:System.Tuple%606> Objekte, dessen Komponenten Auffüllung Daten für drei US-Orte (New York, Chicago und Los Angeles) von 1960 bis 2000 enthalten. Anschließend wird eine Tabelle mit den Daten angezeigt. Um den Stadtnamen anzuzeigen, er ruft den Wert ab, der <xref:System.Tuple%606.Item1%2A> Eigenschaft für die einzelnen <xref:System.Tuple%606> Objekt.  
  
 [!code-csharp[System.Tuple\`6.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`6.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item2">
      <MemberSignature Language="C#" Value="public T2 Item2 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T2 Item2" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`6.Item2" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item2 As T2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T2 Item2 { T2 get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T2</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Wert der zweiten Komponente des aktuellen <see cref="T:System.Tuple`6" />-Objekts ab.</summary>
        <value>Der Wert der zweiten Komponente des aktuellen <see cref="T:System.Tuple`6" />-Objekts.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können den Typ des dynamisch bestimmen die <xref:System.Tuple%606.Item2%2A> -Komponente in zwei Arten:  
  
-   Durch Aufrufen der `GetType` Methode auf dem Wert, der von zurückgegeben wird die <xref:System.Tuple%606.Item2%2A> Eigenschaft.  
  
-   Durch Abrufen der <xref:System.Type> Objekt, das darstellt der <xref:System.Tuple%606> -Objekt und das Abrufen des ersten Elements aus dem Array, das von zurückgegebene seine <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> Methode.  
  
   
  
## Examples  
 Das folgende Beispiel definiert ein Array von <xref:System.Tuple%606> Objekte, dessen Komponenten Auffüllung Daten für drei US-Orte (New York, Chicago und Los Angeles) von 1960 bis 2000 enthalten. Anschließend wird eine Tabelle mit den Daten angezeigt. Um die Auffüllung in 1960 anzuzeigen, er ruft den Wert ab, der <xref:System.Tuple%606.Item2%2A> Eigenschaft für die einzelnen <xref:System.Tuple%606> Objekt.  
  
 [!code-csharp[System.Tuple\`6.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`6.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item3">
      <MemberSignature Language="C#" Value="public T3 Item3 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T3 Item3" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`6.Item3" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item3 As T3" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T3 Item3 { T3 get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T3</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Wert der dritten Komponente des aktuellen <see cref="T:System.Tuple`6" />-Objekts ab.</summary>
        <value>Der Wert der dritten Komponente des aktuellen <see cref="T:System.Tuple`6" />-Objekts.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können den Typ des dynamisch bestimmen die <xref:System.Tuple%606.Item3%2A> -Komponente in zwei Arten:  
  
-   Durch Aufrufen der `GetType` Methode auf dem Wert, der von zurückgegeben wird die <xref:System.Tuple%606.Item3%2A> Eigenschaft.  
  
-   Durch Abrufen der <xref:System.Type> Objekt, das darstellt der <xref:System.Tuple%606> -Objekt und das Abrufen des ersten Elements aus dem Array, das von zurückgegebene seine <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> Methode.  
  
   
  
## Examples  
 Das folgende Beispiel definiert ein Array von <xref:System.Tuple%606> Objekte, dessen Komponenten Auffüllung Daten für drei US-Orte (New York, Chicago und Los Angeles) von 1960 bis 2000 enthalten. Anschließend wird eine Tabelle mit den Daten angezeigt. Um die Auffüllung in 1970 anzuzeigen, er ruft den Wert ab, der <xref:System.Tuple%606.Item3%2A> Eigenschaft für die einzelnen <xref:System.Tuple%606> Objekt.  
  
 [!code-csharp[System.Tuple\`6.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`6.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item4">
      <MemberSignature Language="C#" Value="public T4 Item4 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T4 Item4" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`6.Item4" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item4 As T4" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T4 Item4 { T4 get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T4</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Wert der vierten Komponente des aktuellen <see cref="T:System.Tuple`6" />-Objekts ab.</summary>
        <value>Der Wert der vierten Komponente des aktuellen <see cref="T:System.Tuple`6" />-Objekts.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können den Typ des dynamisch bestimmen die <xref:System.Tuple%606.Item4%2A> -Komponente in zwei Arten:  
  
-   Durch Aufrufen der `GetType` Methode auf dem Wert, der von zurückgegeben wird die <xref:System.Tuple%606.Item4%2A> Eigenschaft.  
  
-   Durch Abrufen der <xref:System.Type> Objekt, das darstellt der <xref:System.Tuple%606> -Objekt und das Abrufen des ersten Elements aus dem Array, das von zurückgegebene seine <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> Methode.  
  
   
  
## Examples  
 Das folgende Beispiel definiert ein Array von <xref:System.Tuple%606> Objekte, dessen Komponenten Auffüllung Daten für drei US-Orte (New York, Chicago und Los Angeles) von 1960 bis 2000 enthalten. Anschließend wird eine Tabelle mit den Daten angezeigt. Um die Auffüllung 1980 anzuzeigen, er ruft den Wert ab, der <xref:System.Tuple%606.Item4%2A> Eigenschaft für die einzelnen <xref:System.Tuple%606> Objekt.  
  
 [!code-csharp[System.Tuple\`6.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`6.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item5">
      <MemberSignature Language="C#" Value="public T5 Item5 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T5 Item5" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`6.Item5" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item5 As T5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T5 Item5 { T5 get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T5</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Wert der fünften Komponente des aktuellen <see cref="T:System.Tuple`6" />-Objekts ab.</summary>
        <value>Der Wert des aktuellen <see cref="T:System.Tuple`6" /> fünften Komponente des Objekts.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können den Typ des dynamisch bestimmen die <xref:System.Tuple%606.Item5%2A> -Komponente in zwei Arten:  
  
-   Durch Aufrufen der `GetType` Methode auf dem Wert, der von zurückgegeben wird die <xref:System.Tuple%606.Item5%2A> Eigenschaft.  
  
-   Durch Abrufen der <xref:System.Type> Objekt, das darstellt der <xref:System.Tuple%606> -Objekt und das Abrufen des ersten Elements aus dem Array, das von zurückgegebene seine <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> Methode.  
  
   
  
## Examples  
 Das folgende Beispiel definiert ein Array von <xref:System.Tuple%606> Objekte, dessen Komponenten Auffüllung Daten für drei US-Orte (New York, Chicago und Los Angeles) von 1960 bis 2000 enthalten. Anschließend wird eine Tabelle mit den Daten angezeigt. Um die Auffüllung 1990 anzuzeigen, er ruft den Wert ab, der <xref:System.Tuple%606.Item5%2A> Eigenschaft für die einzelnen <xref:System.Tuple%606> Objekt.  
  
 [!code-csharp[System.Tuple\`6.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`6.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item6">
      <MemberSignature Language="C#" Value="public T6 Item6 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T6 Item6" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`6.Item6" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item6 As T6" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T6 Item6 { T6 get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T6</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Wert der sechsten Komponente des aktuellen <see cref="T:System.Tuple`6" />-Objekts ab.</summary>
        <value>Der Wert der sechsten Komponente des aktuellen <see cref="T:System.Tuple`6" />-Objekts.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können den Typ des dynamisch bestimmen die <xref:System.Tuple%606.Item6%2A> -Komponente in zwei Arten:  
  
-   Durch Aufrufen der `GetType` Methode auf dem Wert, der von zurückgegeben wird die <xref:System.Tuple%606.Item6%2A> Eigenschaft.  
  
-   Durch Abrufen der <xref:System.Type> Objekt, das darstellt der <xref:System.Tuple%606> -Objekt und das Abrufen des ersten Elements aus dem Array, das von zurückgegebene seine <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> Methode.  
  
   
  
## Examples  
 Das folgende Beispiel definiert ein Array von <xref:System.Tuple%606> Objekte, dessen Komponenten Auffüllung Daten für drei US-Orte (New York, Chicago und Los Angeles) von 1960 bis 2000 enthalten. Anschließend wird eine Tabelle mit den Daten angezeigt. Um die Auffüllung in 2000 anzuzeigen, er ruft den Wert ab, der <xref:System.Tuple%606.Item6%2A> Eigenschaft für die einzelnen <xref:System.Tuple%606> Objekt.  
  
 [!code-csharp[System.Tuple\`6.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`6.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IStructuralComparable.CompareTo (object other, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IStructuralComparable.CompareTo(object other, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (other As Object, comparer As IComparer) As Integer Implements IStructuralComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IStructuralComparable.CompareTo(System::Object ^ other, System::Collections::IComparer ^ comparer) = System::Collections::IStructuralComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="other">Ein Objekt, das mit der aktuellen Instanz verglichen werden soll.</param>
        <param name="comparer">Ein Objekt, das benutzerdefinierte Regeln für Vergleiche bereitstellt.</param>
        <summary>Vergleicht das aktuelle <see cref="T:System.Tuple`6" />-Objekt anhand eines angegebenen Vergleichs mit einem angegebenen Objekt und gibt eine ganze Zahl zurück, die angibt, ob sich das aktuelle Element in der Sortierreihenfolge vor dem angegebenen Element, dahinter oder an derselben Position befindet.</summary>
        <returns>Eine ganze Zahl mit Vorzeichen, die die relative Position dieser Instanz und von <paramref name="other" /> in der Sortierreihenfolge angibt, wie in der folgenden Tabelle veranschaulicht.  
  
 <list type="table"><listheader><term> Wert  
  
 </term><description> Beschreibung  
  
 </description></listheader><item><term> Eine negative ganze Zahl  
  
 </term><description> Diese Instanz geht <paramref name="other" /> voran.  
  
 </description></item><item><term> 0 (null)  
  
 </term><description> Diese Instanz und <paramref name="other" /> befinden sich in der Sortierreihenfolge an der gleichen Position.  
  
 </description></item><item><term> Eine positive ganze Zahl  
  
 </term><description> Diese Instanz folgt <paramref name="other" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung. Er kann nur verwendet werden, wenn die <xref:System.Tuple%606>-Instanz in eine <xref:System.Collections.IStructuralComparable>-Schnittstelle umgewandelt wird.  
  
 Mit dieser Methode können Sie benutzerdefinierte Vergleiche von definieren <xref:System.Tuple%606> Objekte. Beispielsweise können Sie diese Methode, um die Reihenfolge <xref:System.Tuple%606> Objekte basierend auf den Wert einer bestimmten Komponente.  
  
 Obwohl diese Methode direkt aufgerufen werden kann, ist es meist bezeichnet Auflistung sortieren Methoden wie <xref:System.Collections.IComparer> Parameter zum Anordnen der Elemente einer Auflistung. Wird z. B. von aufgerufen der <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType> Methode und die <xref:System.Collections.SortedList.Add%2A> Methode von einer <xref:System.Collections.SortedList> -Objekt, das mit instanziiert wird der <xref:System.Collections.SortedList.%23ctor%28System.Collections.IComparer%29?displayProperty=nameWithType> Konstruktor.  
  
> [!CAUTION]
>  Die <xref:System.Tuple%606.System%23Collections%23IStructuralComparable%23CompareTo%2A> Methode ist für die Verwendung in Sortiervorgängen vorgesehen. Es sollte nicht verwendet werden, wenn der primäre Zweck eines Vergleichs ist, um zu bestimmen, ob zwei Objekte gleich sind. Um zu bestimmen, ob zwei Objekte gleich sind, rufen Sie die <xref:System.Tuple%606.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29> Methode.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt ein Array von <xref:System.Tuple%606> Objekte, die Auffüllung Daten für drei US-Orte von 1960 bis 2000 enthält. Erste das Sextupel-Komponente ist der Name des Orts. Die verbleibenden fünf Komponenten stellen die Auffüllung in Intervallen von 10 Jahre von 1960 auf 2000 dar.  
  
 Die `PopulationComparer` -Klasse bietet eine <xref:System.Collections.IComparer> Implementierung, mit das Array von Sextupeln durch eine der zugehörigen Komponenten sortiert werden können. Zwei Werte werden bereitgestellt, um die `PopulationComparer` Klasse in ihrem Konstruktor: die Position der Komponente, die die Sortierreihenfolge festlegt und ein <xref:System.Boolean> Wert, der angibt, ob die Tupelobjekte in aufsteigender oder absteigender Reihenfolge sortiert werden sollen.  
  
 Im Beispiel werden dann die Elemente im Array in unsortierter Reihenfolge angezeigt, sortiert sie nach der dritten Komponente (die Auffüllung in 1970) und angezeigt, und klicken Sie dann sortiert sie nach der sechsten Komponente (die Auffüllung in 2000) und angezeigt.  
  
 [!code-csharp[System.Tuple\`6.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.compareto/cs/compareto2.cs#2)]
 [!code-vb[System.Tuple\`6.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.compareto/vb/compareto2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="other" /> ist kein <see cref="T:System.Tuple`6" />-Objekt.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralEquatable.Equals">
      <MemberSignature Language="C#" Value="bool IStructuralEquatable.Equals (object other, System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IStructuralEquatable.Equals(object other, class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`6.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Function Equals (other As Object, comparer As IEqualityComparer) As Boolean Implements IStructuralEquatable.Equals" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IStructuralEquatable.Equals(System::Object ^ other, System::Collections::IEqualityComparer ^ comparer) = System::Collections::IStructuralEquatable::Equals;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="other">Das Objekt, das mit dieser Instanz verglichen werden soll.</param>
        <param name="comparer">Ein Objekt, das die Methode definiert, mit der ermittelt wird, ob die beiden Objekte gleich sind.</param>
        <summary>Gibt einen Wert zurück, der auf Grundlage einer angegebenen Vergleichsmethode angibt, ob das aktuelle <see cref="T:System.Tuple`6" />-Objekt gleich einem angegebenen Objekt ist.</summary>
        <returns>
          <see langword="true" />, wenn die aktuelle Instanz gleich dem angegebenen Objekt ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung. Er kann nur verwendet werden, wenn die <xref:System.Tuple%606>-Instanz in eine <xref:System.Collections.IStructuralEquatable>-Schnittstelle umgewandelt wird.  
  
 Die <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType> Implementierung wird nur aufgerufen, wenn `other` nicht `null`, und ob es erfolgreich sein kann (in c#) umgewandelt oder konvertiert (in Visual Basic) einer <xref:System.Tuple%606> Objekt, dessen Komponenten dieselben Typen wie die aktuelle Instanz sind. Die <xref:System.Tuple%606.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29> -Methode übergibt zuerst die <xref:System.Tuple%606.Item1%2A> Werte von der <xref:System.Tuple%606> zu zu vergleichenden Objekte die <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType> Implementierung. Wenn dieser Methodenaufruf zurückgegeben `true`, die-Methode erneut aufgerufen und an die <xref:System.Tuple%606.Item2%2A> Werte der beiden <xref:System.Tuple%606> Objekte. Dieser Vorgang wird fortgesetzt, bis der Methodenaufruf zurückgegeben `false` Wenn vergleicht ein bestimmtes Tabellenpaar `Item` Werte oder die beiden <xref:System.Tuple%606.Item6%2A> Werte werden an die Methode übergeben.  
  
   
  
## Examples  
 Das folgende Beispiel definiert eine `RateComparer` -Klasse, die einen benutzerdefinierten Test auf Gleichheit ausführt. Wenn die Werte, die übergeben werden, seine <xref:System.Collections.IStructuralEquatable.Equals%2A?displayProperty=nameWithType> Methode sind vom Typ <xref:System.Single> oder <xref:System.Double>, die Methode testet auf Gleichheit mit nur bis zu drei Dezimalstellen sind. Ruft andernfalls einfach die `x` des Parameters `Equals` Methode. Im Beispiel wird dies <xref:System.Collections.IEqualityComparer> Implementierung zu bestimmen, ob vier <xref:System.Tuple%606> Objekte, die Daten auf die Änderungsrate Auffüllung zwischen 1960 und 2000 enthalten gleich sind.  
  
 [!code-csharp[System.Tuple\`6.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.equals/cs/equals2.cs#2)]
 [!code-vb[System.Tuple\`6.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.equals/vb/equals2.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralEquatable.GetHashCode">
      <MemberSignature Language="C#" Value="int IStructuralEquatable.GetHashCode (System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IStructuralEquatable.GetHashCode(class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`6.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Function GetHashCode (comparer As IEqualityComparer) As Integer Implements IStructuralEquatable.GetHashCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IStructuralEquatable.GetHashCode(System::Collections::IEqualityComparer ^ comparer) = System::Collections::IStructuralEquatable::GetHashCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="comparer">Ein Objekt, dessen <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" />-Methode den Hashcode des aktuellen <see cref="T:System.Tuple`6" />-Objekts berechnet</param>
        <summary>Berechnet mit einer angegebenen Berechnungsmethode den Hash für das aktuelle <see cref="T:System.Tuple`6" />-Objekt.</summary>
        <returns>Ein 32-Bit-Hashcode als ganze Zahl mit Vorzeichen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung. Er kann nur verwendet werden, wenn die <xref:System.Tuple%606>-Instanz in eine <xref:System.Collections.IStructuralEquatable>-Schnittstelle umgewandelt wird.  
  
 Die Methode einfach einen Aufruf umschließt die `comparer` des Objekts <xref:System.Collections.IEqualityComparer.GetHashCode%2A?displayProperty=nameWithType> Implementierung.  
  
 Der Algorithmus verwendet, um den Hash berechnen sollte den gleichen Hashcode zurückgeben, für zwei <xref:System.Tuple%606> Objekte, die als gleich betrachtet werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (obj As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ obj) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Ein Objekt, das mit der aktuellen Instanz verglichen werden soll.</param>
        <summary>Vergleicht das aktuelle <see cref="T:System.Tuple`6" />-Objekt mit einem angegebenen Objekt und gibt eine Ganzzahl zurück, die darauf hinweist, ob sich das aktuelle Objekt in der Sortierreihenfolge vor oder hinter dem angegebenen Objekt oder an der gleichen Position befindet.</summary>
        <returns>Eine ganze Zahl mit Vorzeichen, die die relative Position dieser Instanz und von <paramref name="obj" /> in der Sortierreihenfolge angibt, wie in der folgenden Tabelle veranschaulicht.  
  
 <list type="table"><listheader><term> Wert  
  
 </term><description> Beschreibung  
  
 </description></listheader><item><term> Eine negative ganze Zahl  
  
 </term><description> Diese Instanz geht <paramref name="obj" /> voran.  
  
 </description></item><item><term> 0 (null)  
  
 </term><description> Diese Instanz und <paramref name="obj" /> befinden sich in der Sortierreihenfolge an der gleichen Position.  
  
 </description></item><item><term> Eine positive ganze Zahl  
  
 </term><description> Diese Instanz folgt <paramref name="obj" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung. Er kann nur verwendet werden, wenn die <xref:System.Tuple%606>-Instanz in eine <xref:System.IComparable>-Schnittstelle umgewandelt wird.  
  
 Diese Methode stellt der <xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType> Implementierung für die <xref:System.Tuple%606> Klasse. Obwohl die Methode direkt aufgerufen werden kann, wird es am häufigsten aufgerufen durch die standardüberladungen Auflistung sortieren Methoden, wie z. B. <xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType> und <xref:System.Collections.SortedList.Add%2A?displayProperty=nameWithType>, um die Elemente einer Auflistung zu bestellen.  
  
> [!CAUTION]
>  Die <xref:System.Tuple%606.System%23IComparable%23CompareTo%2A> Methode ist für die Verwendung in Sortiervorgängen vorgesehen. Es sollte nicht verwendet werden, wenn der primäre Zweck eines Vergleichs ist, um zu bestimmen, ob zwei Objekte gleich sind. Um zu bestimmen, ob zwei Objekte gleich sind, rufen Sie die <xref:System.Tuple%606.Equals%28System.Object%29?displayProperty=nameWithType> Methode.  
  
 Die <xref:System.Tuple%606.System%23IComparable%23CompareTo%28System.Object%29> Methode verwendet den Standardvergleich für das Objekt, jede Komponente verglichen werden soll.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt ein Array von <xref:System.Tuple%606> Objekte, die Auffüllung von Daten für drei Städte in den Vereinigten Staaten von 1960 auf 2000 enthalten. Die sechs Komponenten bestehen aus den Stadtnamen gefolgt von der Einwohnerzahl 10 Jahre zwischen 1960 und 2000. Das Beispiel zeigt die Komponenten der einzelnen Tupel im Array in unsortierter Reihenfolge sortiert das Array und ruft dann die <xref:System.Tuple%606.ToString%2A> -Methode zum Anzeigen jedes Tupel in sortierter Reihenfolge. Die Ausgabe zeigt, dass das Array nach Name sortiert wurde, die erste Komponente wird. Beachten Sie, die im Beispiel nicht direkt aufgerufen wird die <xref:System.Tuple%606.System%23IComparable%23CompareTo%28System.Object%29> Methode. Diese Methode aufgerufen wird, implizit von der <xref:System.Array.Sort%28System.Array%29> Methode für jedes Element im Array.  
  
 [!code-csharp[System.Tuple\`6.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.compareto/cs/compareto1.cs#1)]
 [!code-vb[System.Tuple\`6.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.compareto/vb/compareto1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="obj" /> ist kein <see cref="T:System.Tuple`6" />-Objekt.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.CompilerServices.ITuple.Item">
      <MemberSignature Language="C#" Value="object System.Runtime.CompilerServices.ITuple.Item[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Runtime.CompilerServices.ITuple.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`6.System#Runtime#CompilerServices#ITuple#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Item(index As Integer) As Object Implements ITuple.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Runtime.CompilerServices.ITuple.Item[int] { System::Object ^ get(int index); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.CompilerServices.ITuple.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Der Index des angegebenen Elements <see langword="Tuple" />. <c>index</c> kann zwischen 0 und 5 liegen.</param>
        <summary>Ruft den Wert des angegebenen Elements <see langword="Tuple" /> ab.</summary>
        <value>Der Wert des <see langword="Tuple" />-Elements an der angegebenen Position.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Tuple%606.System%23Runtime%23CompilerServices%23ITuple%23Item%2A?displayProperty=nameWithType> Eigenschaft ist eine explizite schnittstellenimplementierung. Um sie aufzurufen, müssen Sie umgewandelt oder konvertiert die <xref:System.Tuple%606> -Objekt an eine <xref:System.Runtime.CompilerServices.ITuple> -Schnittstellenobjekt.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException">
          <paramref name="index" /> ist kleiner als 0 (null) oder größer als 5.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.CompilerServices.ITuple.Length">
      <MemberSignature Language="C#" Value="int System.Runtime.CompilerServices.ITuple.Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Runtime.CompilerServices.ITuple.Length" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`6.System#Runtime#CompilerServices#ITuple#Length" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Length As Integer Implements ITuple.Length" />
      <MemberSignature Language="C++ CLI" Value="property int System.Runtime.CompilerServices.ITuple.Length { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.CompilerServices.ITuple.Length</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Anzahl der Elemente im <see langword="Tuple" /> ab.</summary>
        <value>6, die Anzahl von Elementen in einem <see cref="T:System.Tuple`6" />-Objekt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Tuple%606.System%23Runtime%23CompilerServices%23ITuple%23Length%2A> Eigenschaft ist eine explizite schnittstellenimplementierung. Um sie aufzurufen, müssen Sie umgewandelt oder konvertiert die <xref:System.Tuple%606> -Objekt an eine <xref:System.Runtime.CompilerServices.ITuple> -Schnittstellenobjekt.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`6.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt eine Zeichenfolge zurück, die den Wert dieser <see cref="T:System.Tuple`6" />-Instanz darstellt.</summary>
        <returns>Die Zeichenfolgendarstellung dieses <see cref="T:System.Tuple`6" />-Objekts.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die von dieser Methode zurückgegebene Zeichenfolge hat das Format (*Item1*, *Item2*, *Item3*, *Item4*, `Item5, Item6`), wobei *Item1*, *Item2*, *Item3*, *Item4*, *Item5*, und *Item6*stellen die Werte von der <xref:System.Tuple%606.Item1%2A>, <xref:System.Tuple%606.Item2%2A>, <xref:System.Tuple%606.Item3%2A>, <xref:System.Tuple%606.Item4%2A>, <xref:System.Tuple%606.Item5%2A>, und <xref:System.Tuple%606.Item6%2A> Eigenschaften bzw. Wenn einer der Eigenschaftswerte `null`, liegt als <xref:System.String.Empty?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Das folgende Beispiel definiert eine <xref:System.Tuple%606> -Objekt, das Daten der Auffüllung für New York City für jede Volkszählung von 1960 bis 2000 enthält. Anschließend werden die Bestandteile der Sextupel angezeigt durch einen Aufruf der <xref:System.Tuple%606.ToString%2A> Methode.  
  
 [!code-csharp[System.Tuple\`6.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.tostring/cs/tostring1.cs#1)]
 [!code-vb[System.Tuple\`6.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.tostring/vb/tostring1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
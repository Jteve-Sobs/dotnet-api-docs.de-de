<Type Name="Lazy&lt;T&gt;" FullName="System.Lazy&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cd89ea4439dc0d0d2a6fc31e82c465a7ae6ecff6" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58742319" /></Metadata><TypeSignature Language="C#" Value="public class Lazy&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Lazy`1&lt;T&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Lazy`1" />
  <TypeSignature Language="VB.NET" Value="Public Class Lazy(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Lazy" />
  <TypeSignature Language="F#" Value="type Lazy&lt;'T&gt; = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Diagnostics.DebuggerDisplay("ThreadSafetyMode={Mode}, IsValueCreated={IsValueCreated}, IsValueFaulted={IsValueFaulted}, Value={ValueForDebugDisplay}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.System_LazyDebugView`1))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T"><span data-ttu-id="519e5-101">Der Objekttyp, der verzögert initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="519e5-101">The type of object that is being lazily initialized.</span></span></typeparam>
    <summary><span data-ttu-id="519e5-102">Unterstützt die verzögerte Initialisierung.</span><span class="sxs-lookup"><span data-stu-id="519e5-102">Provides support for lazy initialization.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="519e5-103">Verwenden Sie verzögerten Initialisierung, um die Erstellung einer großen oder ressourcenintensiven-Objekts, oder die Ausführung einer Aufgabe mit großem Ressourcenaufwand verzögern, insbesondere dann, wenn eine solche erstellen oder die Ausführung nicht während der Lebensdauer des Programms auftreten kann.</span><span class="sxs-lookup"><span data-stu-id="519e5-103">Use lazy initialization to defer the creation of a large or resource-intensive object, or the execution of a resource-intensive task, particularly when such creation or execution might not occur during the lifetime of the program.</span></span>  
  
 <span data-ttu-id="519e5-104">Zur Vorbereitung der verzögerten Initialisierung, die Sie erstellen eine Instanz des <xref:System.Lazy%601>.</span><span class="sxs-lookup"><span data-stu-id="519e5-104">To prepare for lazy initialization, you create an instance of <xref:System.Lazy%601>.</span></span> <span data-ttu-id="519e5-105">Das Typargument, der die <xref:System.Lazy%601> -Objekt, das Sie erstellen, gibt den Typ des Objekts, das verzögert initialisiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="519e5-105">The type argument of the <xref:System.Lazy%601> object that you create specifies the type of the object that you want to initialize lazily.</span></span> <span data-ttu-id="519e5-106">Der Konstruktor, mit denen Sie erstellen die <xref:System.Lazy%601> Objekts bestimmen die Eigenschaften der Initialisierung.</span><span class="sxs-lookup"><span data-stu-id="519e5-106">The constructor that you use to create the <xref:System.Lazy%601> object determines the characteristics of the initialization.</span></span> <span data-ttu-id="519e5-107">Die verzögerte Initialisierung tritt beim ersten Zugriff auf die <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType>-Eigenschaft auf.</span><span class="sxs-lookup"><span data-stu-id="519e5-107">Lazy initialization occurs the first time the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property is accessed.</span></span>  
  
 <span data-ttu-id="519e5-108">In den meisten Fällen hängt die Antworten auf zwei Fragen einen Konstruktor auswählen:</span><span class="sxs-lookup"><span data-stu-id="519e5-108">In most cases, choosing a constructor depends on your answers to two questions:</span></span>  
  
-   <span data-ttu-id="519e5-109">Wird die verzögert initialisierte Objekt von mehreren Threads werden zugegriffen?</span><span class="sxs-lookup"><span data-stu-id="519e5-109">Will the lazily initialized object be accessed from more than one thread?</span></span> <span data-ttu-id="519e5-110">Wenn dies der Fall ist, die <xref:System.Lazy%601> Objekt können sie auf einem beliebigen Thread erstellen.</span><span class="sxs-lookup"><span data-stu-id="519e5-110">If so, the <xref:System.Lazy%601> object might create it on any thread.</span></span> <span data-ttu-id="519e5-111">Können Sie eines einfachen Konstruktors, deren Standardverhalten ist, erstellen Sie eine threadsichere <xref:System.Lazy%601> Objekt, so dass nur eine Instanz des verzögert instanziierten Objekts erstellt wird, unabhängig davon, wie viele Threads versuchen, darauf zuzugreifen.</span><span class="sxs-lookup"><span data-stu-id="519e5-111">You can use one of the simple constructors whose default behavior is to create a thread-safe <xref:System.Lazy%601> object, so that only one instance of the lazily instantiated object is created no matter how many threads try to access it.</span></span> <span data-ttu-id="519e5-112">Zum Erstellen einer <xref:System.Lazy%601> Objekt, das nicht threadsicher ist, müssen Sie einen Konstruktor, der Ihnen ermöglicht, geben Sie keine Threadsicherheit verwenden.</span><span class="sxs-lookup"><span data-stu-id="519e5-112">To create a <xref:System.Lazy%601> object that is not thread safe, you must use a constructor that enables you to specify no thread safety.</span></span>  
  
    > [!CAUTION]
    >  <span data-ttu-id="519e5-113">Wodurch die <xref:System.Lazy%601> Objekt threadsicher bietet keinen Schutz für die verzögert initialisierte Objekt.</span><span class="sxs-lookup"><span data-stu-id="519e5-113">Making the <xref:System.Lazy%601> object thread safe does not protect the lazily initialized object.</span></span> <span data-ttu-id="519e5-114">Wenn mehrere Threads, die verzögert initialisierte Objekt zugreifen können, müssen Sie die Eigenschaften und Methoden für Speicherzugriffs in Multithreadanwendungen.</span><span class="sxs-lookup"><span data-stu-id="519e5-114">If multiple threads can access the lazily initialized object, you must make its properties and methods safe for multithreaded access.</span></span>  
  
-   <span data-ttu-id="519e5-115">Erfordert verzögerter Initialisierung viel Code, oder verfügt das verzögert initialisierte Objekt über einen Standardkonstruktor, die alles, was Sie benötigen, und löst keine Ausnahmen aus?</span><span class="sxs-lookup"><span data-stu-id="519e5-115">Does lazy initialization require a lot of code, or does the lazily initialized object have a default constructor that does everything you need and doesn't throw exceptions?</span></span> <span data-ttu-id="519e5-116">Verwenden Sie Wenn Sie Code zum Initialisieren der schreiben müssen oder Ausnahmen behandelt werden müssen, einen der Konstruktoren, die eine Factorymethode verwendet.</span><span class="sxs-lookup"><span data-stu-id="519e5-116">If you need to write initialization code or if exceptions need to be handled, use one of the constructors that takes a factory method.</span></span> <span data-ttu-id="519e5-117">Schreiben Sie den Initialisierungscode in der Factorymethode.</span><span class="sxs-lookup"><span data-stu-id="519e5-117">Write your initialization code in the factory method.</span></span>  
  
 <span data-ttu-id="519e5-118">Die folgende Tabelle zeigt die Konstruktor auf, basierend auf diesen zwei Faktoren:</span><span class="sxs-lookup"><span data-stu-id="519e5-118">The following table shows which constructor to choose, based on these two factors:</span></span>  
  
|<span data-ttu-id="519e5-119">Objekt wird vom zugegriffen werden</span><span class="sxs-lookup"><span data-stu-id="519e5-119">Object will be accessed by</span></span>|<span data-ttu-id="519e5-120">Wenn kein Code für die Initialisierung erforderlich ist (Standard-Konstruktor) verwenden</span><span class="sxs-lookup"><span data-stu-id="519e5-120">If no initialization code is required (default constructor), use</span></span>|<span data-ttu-id="519e5-121">Wenn der Code für die Initialisierung erforderlich ist, verwenden</span><span class="sxs-lookup"><span data-stu-id="519e5-121">If initialization code is required, use</span></span>|  
|--------------------------------|------------------------------------------------------------------------|---------------------------------------------|  
|<span data-ttu-id="519e5-122">Mehrere threads</span><span class="sxs-lookup"><span data-stu-id="519e5-122">Multiple threads</span></span>|<xref:System.Lazy%601.%23ctor>|<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>|  
|<span data-ttu-id="519e5-123">Ein thread</span><span class="sxs-lookup"><span data-stu-id="519e5-123">One thread</span></span>|<span data-ttu-id="519e5-124"><xref:System.Lazy%601.%23ctor%28System.Boolean%29> mit `isThreadSafe` festgelegt `false`.</span><span class="sxs-lookup"><span data-stu-id="519e5-124"><xref:System.Lazy%601.%23ctor%28System.Boolean%29> with `isThreadSafe` set to `false`.</span></span>|<span data-ttu-id="519e5-125"><xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> mit `isThreadSafe` festgelegt `false`.</span><span class="sxs-lookup"><span data-stu-id="519e5-125"><xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> with `isThreadSafe` set to `false`.</span></span>|  
  
 <span data-ttu-id="519e5-126">Sie können einen Lambda-Ausdruck verwenden, an die Factorymethode.</span><span class="sxs-lookup"><span data-stu-id="519e5-126">You can use a lambda expression to specify the factory method.</span></span> <span data-ttu-id="519e5-127">Auf diese Weise die gesamte Initialisierungscode in einem zentralen Ort.</span><span class="sxs-lookup"><span data-stu-id="519e5-127">This keeps all the initialization code in one place.</span></span> <span data-ttu-id="519e5-128">Der Lambda-Ausdruck erfasst den Kontext, einschließlich von Argumenten, die Sie an den verzögert initialisierten Konstruktor des Objekts übergeben.</span><span class="sxs-lookup"><span data-stu-id="519e5-128">The lambda expression captures the context, including any arguments you pass to the lazily initialized object's constructor.</span></span>  
  
 <span data-ttu-id="519e5-129">**Zwischenspeichern von Ausnahmen** bei Verwendung von Factorymethoden Ausnahmen werden zwischengespeichert.</span><span class="sxs-lookup"><span data-stu-id="519e5-129">**Exception caching** When you use factory methods, exceptions are cached.</span></span> <span data-ttu-id="519e5-130">D.h., wenn die Factory-Methode löst eine Ausnahme beim ersten Mal aus, ein Thread versucht, Zugriff auf die <xref:System.Lazy%601.Value%2A> Eigenschaft der <xref:System.Lazy%601> Objekt ist, wird die gleiche Ausnahme wird bei jedem nachfolgenden Versuch ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="519e5-130">That is, if the factory method throws an exception the first time a thread tries to access the <xref:System.Lazy%601.Value%2A> property of the <xref:System.Lazy%601> object, the same exception is thrown on every subsequent attempt.</span></span> <span data-ttu-id="519e5-131">Dadurch wird sichergestellt, dass für jeden Aufruf der <xref:System.Lazy%601.Value%2A> Eigenschaft führt zum gleichen Ergebnis, und vermeidet Fehler auftreten, die auftreten können, wenn unterschiedliche Threads verschiedene Ergebnisse zu erhalten.</span><span class="sxs-lookup"><span data-stu-id="519e5-131">This ensures that every call to the <xref:System.Lazy%601.Value%2A> property produces the same result and avoids subtle errors that might arise if different threads get different results.</span></span> <span data-ttu-id="519e5-132">Die <xref:System.Lazy%601> stellvertretend für eine tatsächliche `T` , andernfalls würde initialisiert wurden zu einem früheren Zeitpunkt, in der Regel während des Starts.</span><span class="sxs-lookup"><span data-stu-id="519e5-132">The <xref:System.Lazy%601> stands in for an actual `T` that otherwise would have been initialized at some earlier point, usually during startup.</span></span> <span data-ttu-id="519e5-133">An diesem Punkt früheren ist in der Regel Schwerwiegender.</span><span class="sxs-lookup"><span data-stu-id="519e5-133">A failure at that earlier point is usually fatal.</span></span> <span data-ttu-id="519e5-134">Wenn es besteht die Gefahr für eine wiederherstellbare Fehler, empfehlen wir, dass Sie die Wiederholungslogik in der Initialisierungsroutine (in diesem Fall die Factorymethode), integrieren, wie wenn Sie die verzögerten Initialisierung verwenden würden.</span><span class="sxs-lookup"><span data-stu-id="519e5-134">If there is a potential for a recoverable failure, we recommend that you build the retry logic into the initialization routine (in this case, the factory method), just as you would if you weren't using lazy initialization.</span></span>  
  
 <span data-ttu-id="519e5-135">**Alternative zum Sperren** In bestimmten Situationen möchten Sie möglicherweise den Mehraufwand zu vermeiden der <xref:System.Lazy%601> des Objekts Standard Sperrverhaltens.</span><span class="sxs-lookup"><span data-stu-id="519e5-135">**Alternative to locking** In certain situations, you might want to avoid the overhead of the <xref:System.Lazy%601> object's default locking behavior.</span></span> <span data-ttu-id="519e5-136">In seltenen Fällen liegt möglicherweise ein Potenzial für Deadlocks.</span><span class="sxs-lookup"><span data-stu-id="519e5-136">In rare situations, there might be a potential for deadlocks.</span></span> <span data-ttu-id="519e5-137">In solchen Fällen können Sie die <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> oder <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> -Konstruktor, und geben Sie <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="519e5-137">In such cases, you can use the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor, and specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span></span> <span data-ttu-id="519e5-138">Dies ermöglicht die <xref:System.Lazy%601> Objekt, das eine Kopie des Objekts verzögert initialisierte auf jedem von mehreren Threads zu erstellen, wenn die Threads rufen die <xref:System.Lazy%601.Value%2A> Eigenschaft gleichzeitig.</span><span class="sxs-lookup"><span data-stu-id="519e5-138">This enables the <xref:System.Lazy%601> object to create a copy of the lazily initialized object on each of several threads if the threads call the <xref:System.Lazy%601.Value%2A> property simultaneously.</span></span> <span data-ttu-id="519e5-139">Die <xref:System.Lazy%601> Objekt wird sichergestellt, dass alle Threads dieselbe Instanz des Objekts verzögert initialisierte und verwirft die Instanzen, die nicht verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="519e5-139">The <xref:System.Lazy%601> object ensures that all threads use the same instance of the lazily initialized object and discards the instances that are not used.</span></span> <span data-ttu-id="519e5-140">Daher ist die Kosten der Aufwand für Sperren zu reduzieren, dass das Programm möglicherweise manchmal erstellen und zusätzliche Kopien ein teures Objekt zu verwerfen.</span><span class="sxs-lookup"><span data-stu-id="519e5-140">Thus, the cost of reducing the locking overhead is that your program might sometimes create and discard extra copies of an expensive object.</span></span> <span data-ttu-id="519e5-141">In den meisten Fällen ist dies wahrscheinlich nicht.</span><span class="sxs-lookup"><span data-stu-id="519e5-141">In most cases, this is unlikely.</span></span> <span data-ttu-id="519e5-142">Die Beispiele für die <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> und <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> Konstruktoren wird dieses Verhalten demonstriert.</span><span class="sxs-lookup"><span data-stu-id="519e5-142">The examples for the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> and <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructors demonstrate this behavior.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="519e5-143">Beim Angeben von <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, Ausnahmen werden nie zwischengespeichert, selbst wenn Sie eine Factorymethode angeben.</span><span class="sxs-lookup"><span data-stu-id="519e5-143">When you specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, exceptions are never cached, even if you specify a factory method.</span></span>  
  
 <span data-ttu-id="519e5-144">**Entsprechende Konstruktoren** zusätzlich zum Aktivieren der Verwendung von <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> und <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> Konstruktoren können die Funktionalität von den anderen Konstruktoren duplizieren.</span><span class="sxs-lookup"><span data-stu-id="519e5-144">**Equivalent constructors** In addition to enabling the use of <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> and <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructors can duplicate the functionality of the other constructors.</span></span> <span data-ttu-id="519e5-145">Die folgende Tabelle zeigt die Werte der Parameter, die entsprechende Verhalten zu erzeugen.</span><span class="sxs-lookup"><span data-stu-id="519e5-145">The following table shows the parameter values that produce equivalent behavior.</span></span>  
  
|<span data-ttu-id="519e5-146">Zum Erstellen einer <xref:System.Lazy%601> -Standardobjekt ab</span><span class="sxs-lookup"><span data-stu-id="519e5-146">To create a <xref:System.Lazy%601> object that is</span></span>|<span data-ttu-id="519e5-147">Für Konstruktoren, die eine `LazyThreadSafetyMode` `mode` Parametersatz, `mode` auf</span><span class="sxs-lookup"><span data-stu-id="519e5-147">For constructors that have a `LazyThreadSafetyMode` `mode` parameter, set `mode` to</span></span>|<span data-ttu-id="519e5-148">Für Konstruktoren, die einen booleschen Wert haben `isThreadSafe` Parametersatz, `isThreadSafe` auf</span><span class="sxs-lookup"><span data-stu-id="519e5-148">For constructors that have a Boolean `isThreadSafe` parameter, set `isThreadSafe` to</span></span>|<span data-ttu-id="519e5-149">Für Konstruktoren mit keine Threadsicherheitsparameter</span><span class="sxs-lookup"><span data-stu-id="519e5-149">For constructors with no thread safety parameters</span></span>|  
|-------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------|-------------------------------------------------------|  
|<span data-ttu-id="519e5-150">Vollständig threadsicher; verwendet sperren, um sicherzustellen, dass nur ein Thread auf den Wert initialisiert.</span><span class="sxs-lookup"><span data-stu-id="519e5-150">Fully thread safe; uses locking to ensure that only one thread initializes the value.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication>|`true`|<span data-ttu-id="519e5-151">Alle diese Konstruktoren sind vollständig threadsicher.</span><span class="sxs-lookup"><span data-stu-id="519e5-151">All such constructors are fully thread safe.</span></span>|  
|<span data-ttu-id="519e5-152">Nicht threadsicher.</span><span class="sxs-lookup"><span data-stu-id="519e5-152">Not thread safe.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.None>|`false`|<span data-ttu-id="519e5-153">Nicht zutreffend.</span><span class="sxs-lookup"><span data-stu-id="519e5-153">Not applicable.</span></span>|  
|<span data-ttu-id="519e5-154">Vollständig threadsicher; Threads Rennen um den Wert zu initialisieren.</span><span class="sxs-lookup"><span data-stu-id="519e5-154">Fully thread safe; threads race to initialize the value.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly>|<span data-ttu-id="519e5-155">Nicht zutreffend.</span><span class="sxs-lookup"><span data-stu-id="519e5-155">Not applicable.</span></span>|<span data-ttu-id="519e5-156">Nicht zutreffend.</span><span class="sxs-lookup"><span data-stu-id="519e5-156">Not applicable.</span></span>|  
  
 <span data-ttu-id="519e5-157">**Andere Funktionen** Informationen zur Verwendung von <xref:System.Lazy%601> mit threadstatische Felder oder als Sicherungsspeicher für Eigenschaften, finden Sie unter [verzögerte Initialisierung](~/docs/framework/performance/lazy-initialization.md).</span><span class="sxs-lookup"><span data-stu-id="519e5-157">**Other capabilities** For information about the use of <xref:System.Lazy%601> with thread-static fields, or as the backing store for properties, see [Lazy Initialization](~/docs/framework/performance/lazy-initialization.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="519e5-158">Das folgende Beispiel zeigt die Verwendung der <xref:System.Lazy%601> Klasse, um verzögerte Initialisierung, beim Zugriff von mehreren Threads bereitzustellen.</span><span class="sxs-lookup"><span data-stu-id="519e5-158">The following example demonstrates the use of the <xref:System.Lazy%601> class to provide lazy initialization with access from multiple threads.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="519e5-159">Im Beispiel wird die <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="519e5-159">The example uses the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span> <span data-ttu-id="519e5-160">Es zeigt auch die Verwendung von der <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> Konstruktor (Angeben von `true` für `isThreadSafe`) und die <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> Konstruktor (angeben <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> für `mode`).</span><span class="sxs-lookup"><span data-stu-id="519e5-160">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="519e5-161">Um in einen anderen Konstruktor wechseln, ändern Sie einfach die Konstruktoren auskommentiert werden.</span><span class="sxs-lookup"><span data-stu-id="519e5-161">To switch to a different constructor, just change which constructors are commented out.</span></span>  
>   
>  <span data-ttu-id="519e5-162">Ein Beispiel für die Ausnahme mithilfe der gleichen Konstruktoren, finden Sie unter den <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="519e5-162">For an example that demonstrates exception caching using the same constructors, see the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span>  
  
 <span data-ttu-id="519e5-163">Im Beispiel wird eine `LargeObject`-Klasse definiert, die durch einen von mehreren Threads verzögert initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="519e5-163">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="519e5-164">Die vier wichtigsten Abschnitte des Codes veranschaulichen die Erstellung der Initialisierer, die Factorymethode, die eigentliche Initialisierung und den Konstruktor der `LargeObject` -Klasse, die eine Meldung angezeigt, wenn das Objekt erstellt wird.</span><span class="sxs-lookup"><span data-stu-id="519e5-164">The four key sections of code illustrate the creation of the initializer, the factory method, the actual initialization, and the constructor of the `LargeObject` class, which displays a message when the object is created.</span></span> <span data-ttu-id="519e5-165">Zu Anfang der `Main`-Methode wird in diesem Beispiel ein threadsicherer verzögerter Initialisierer für `LargeObject` erstellt:</span><span class="sxs-lookup"><span data-stu-id="519e5-165">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="519e5-166">Die Factorymethode zeigt die Erstellung des Objekts, mit einem Platzhalter für die weitere Initialisierung:</span><span class="sxs-lookup"><span data-stu-id="519e5-166">The factory method shows the creation of the object, with a placeholder for further initialization:</span></span>  
  
 [!code-csharp[System.Lazy\`1#FactoryFunc](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#factoryfunc)]
 [!code-vb[System.Lazy\`1#FactoryFunc](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#factoryfunc)]  
  
 <span data-ttu-id="519e5-167">Beachten Sie, dass die ersten beiden Codeabschnitten mithilfe einer Lambdafunktion kombiniert werden können, wie hier gezeigt:</span><span class="sxs-lookup"><span data-stu-id="519e5-167">Note that the first two code sections could be combined by using a lambda function, as shown here:</span></span>  
  
 [!code-csharp[System.Lazy\`1#InitWithLambda](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/lambda.cs#initwithlambda)]
 [!code-vb[System.Lazy\`1#InitWithLambda](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/lambda.vb#initwithlambda)]  
  
 <span data-ttu-id="519e5-168">Im Beispiel wird angehalten, um anzugeben, dass für ein unbestimmter Zeitraum abläuft, bevor die verzögerte Initialisierung auftritt.</span><span class="sxs-lookup"><span data-stu-id="519e5-168">The example pauses, to indicate that an indeterminate period may elapse before lazy initialization occurs.</span></span> <span data-ttu-id="519e5-169">Beim Drücken der **EINGABETASTE** Schlüssel, das Beispiel erstellt und startet drei Threads.</span><span class="sxs-lookup"><span data-stu-id="519e5-169">When you press the **Enter** key, the example creates and starts three threads.</span></span> <span data-ttu-id="519e5-170">Die `ThreadProc` -Methode, die durch Aufrufe für alle drei Threads verwendet, wird die <xref:System.Lazy%601.Value%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="519e5-170">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property.</span></span> <span data-ttu-id="519e5-171">Beim ersten in diesem Fall die `LargeObject` Instanz erstellt wird:</span><span class="sxs-lookup"><span data-stu-id="519e5-171">The first time this happens, the `LargeObject` instance is created:</span></span>  
  
 [!code-csharp[System.Lazy\`1#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="519e5-172">Der Konstruktor, der die `LargeObject` -Klasse, die wichtigsten letzten Abschnitt des Codes enthält, wird eine Meldung angezeigt, und zeichnet die Identität des Threads wird initialisiert.</span><span class="sxs-lookup"><span data-stu-id="519e5-172">The constructor of the `LargeObject` class, which includes the last key section of code, displays a message and records the identity of the initializing thread.</span></span> <span data-ttu-id="519e5-173">Am Ende das vollständige Codebeispiel wird die Ausgabe des Programms angezeigt.</span><span class="sxs-lookup"><span data-stu-id="519e5-173">The output from the program appears at the end of the full code listing.</span></span>  
  
 [!code-csharp[System.Lazy\`1#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#largector)]  
  
> [!NOTE]
>  <span data-ttu-id="519e5-174">Der Einfachheit halber wird in diesem Beispiel eine globale Instanz von <xref:System.Lazy%601> verwendet, und alle Methoden sind `static` (`Shared` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="519e5-174">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="519e5-175">Dies sind keine Anforderungen für die Verwendung der verzögerten Initialisierung.</span><span class="sxs-lookup"><span data-stu-id="519e5-175">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#all)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="519e5-176">Standardmäßig werden alle öffentlichen und geschützten Member, der die <see cref="T:System.Lazy`1" /> Klasse sind threadsicher und können von mehreren Threads gleichzeitig verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="519e5-176">By default, all public and protected members of the <see cref="T:System.Lazy`1" /> class are thread safe and may be used concurrently from multiple threads.</span></span> <span data-ttu-id="519e5-177">Diese Garantien für Threadsicherheit können optional und pro Instanz, die mit Parametern für den Konstruktoren des Typs entfernt werden.</span><span class="sxs-lookup"><span data-stu-id="519e5-177">These thread-safety guarantees may be removed optionally and per instance, using parameters to the type's constructors.</span></span></threadsafe>
    <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
    <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="519e5-178">Verzögerte Initialisierung</span><span class="sxs-lookup"><span data-stu-id="519e5-178">Lazy Initialization</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="519e5-179">Initialisiert eine neue Instanz der <see cref="T:System.Lazy`1" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="519e5-179">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="519e5-180">Initialisiert eine neue Instanz der <see cref="T:System.Lazy`1" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="519e5-180">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span> <span data-ttu-id="519e5-181">Wenn eine verzögerte Initialisierung auftritt, wird der Standardkonstruktor des Zieltyps verwendet.</span><span class="sxs-lookup"><span data-stu-id="519e5-181">When lazy initialization occurs, the default constructor of the target type is used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="519e5-182">Eine Instanz, die mit diesem Konstruktor erstellt wird, kann von mehreren Threads gleichzeitig verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="519e5-182">An instance that is created with this constructor may be used concurrently from multiple threads.</span></span>  
  
 <span data-ttu-id="519e5-183">Der Threadsicherheitsmodus eine <xref:System.Lazy%601> Instanz, die mit diesem Konstruktor initialisiert wird, ist <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="519e5-183">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span></span> <span data-ttu-id="519e5-184">Der Threadsicherheitsmodus beschreibt das Verhalten, wenn mehrere Threads, zum Initialisieren versuchen der <xref:System.Lazy%601> Instanz.</span><span class="sxs-lookup"><span data-stu-id="519e5-184">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="519e5-185">Ein <xref:System.Lazy%601> -Instanz, die mit diesem Konstruktor erstellt wird werden die Ausnahmen nicht zwischengespeichert.</span><span class="sxs-lookup"><span data-stu-id="519e5-185">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="519e5-186">Weitere Informationen finden Sie unter der <xref:System.Lazy%601>-Klasse oder unter der <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType>-Enumeration.</span><span class="sxs-lookup"><span data-stu-id="519e5-186">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="519e5-187">Im folgende Beispiel wird die Verwendung dieses Konstruktors veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="519e5-187">The following example demonstrates the use of this constructor.</span></span> <span data-ttu-id="519e5-188">Es veranschaulicht auch die Verwendung von der <xref:System.Lazy%601.%23ctor%28System.Boolean%29> Konstruktor (Angeben von `true` für `isThreadSafe`) und die <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> Konstruktor (angeben <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> für `mode`).</span><span class="sxs-lookup"><span data-stu-id="519e5-188">It also illustrates the use of the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="519e5-189">Um in einen anderen Konstruktor wechseln, ändern Sie einfach die Konstruktoren auskommentiert werden.</span><span class="sxs-lookup"><span data-stu-id="519e5-189">To switch to a different constructor, just change which constructors are commented out.</span></span>  
  
 <span data-ttu-id="519e5-190">Im Beispiel wird eine `LargeObject`-Klasse definiert, die durch einen von mehreren Threads verzögert initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="519e5-190">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="519e5-191">Die beiden wichtigsten Zeilen des Codes in diesem Beispiel werden die Erstellung der Initialisierer und die eigentliche Initialisierung.</span><span class="sxs-lookup"><span data-stu-id="519e5-191">The two key lines of code in this example are the creation of the initializer and the actual initialization.</span></span> <span data-ttu-id="519e5-192">Zu Anfang der `Main`-Methode wird in diesem Beispiel ein threadsicherer verzögerter Initialisierer für `LargeObject` erstellt:</span><span class="sxs-lookup"><span data-stu-id="519e5-192">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctor#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="519e5-193">Das Beispiel erstellt und startet drei Threads, die eine Blockierung auf einem <xref:System.Threading.ManualResetEvent> Objekt, um das Beispiel die Threads gleichzeitig freigeben kann.</span><span class="sxs-lookup"><span data-stu-id="519e5-193">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="519e5-194">Die `ThreadProc` -Methode, die durch Aufrufe für alle drei Threads verwendet wird die <xref:System.Lazy%601.Value%2A> -Eigenschaft zum Abrufen der `LargeObject` Instanz:</span><span class="sxs-lookup"><span data-stu-id="519e5-194">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property to get the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctor#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="519e5-195">Die <xref:System.Lazy%601> Klasse bietet sperren, sodass nur ein Thread, zum Erstellen zugreifen kann der `LargeObject` Instanz.</span><span class="sxs-lookup"><span data-stu-id="519e5-195">The <xref:System.Lazy%601> class provides locking, so that only one thread is allowed to create the `LargeObject` instance.</span></span> <span data-ttu-id="519e5-196">Das Beispiel zeigt, dass die anderen Threads, die alle die gleiche Instanz zu erhalten.</span><span class="sxs-lookup"><span data-stu-id="519e5-196">The example demonstrates that the other threads all get the same instance.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="519e5-197">Der Einfachheit halber wird in diesem Beispiel eine globale Instanz von <xref:System.Lazy%601> verwendet, und alle Methoden sind `static` (`Shared` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="519e5-197">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="519e5-198">Dies sind keine Anforderungen für die Verwendung der verzögerten Initialisierung.</span><span class="sxs-lookup"><span data-stu-id="519e5-198">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctor#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="519e5-199">Verzögerte Initialisierung</span><span class="sxs-lookup"><span data-stu-id="519e5-199">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (bool isThreadSafe);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool isThreadSafe) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (isThreadSafe As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(bool isThreadSafe);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : bool -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; isThreadSafe" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="isThreadSafe" Type="System.Boolean" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="isThreadSafe"><span data-ttu-id="519e5-200"><see langword="true" />, damit diese Instanz durch mehrere Threads gleichzeitig verwendet werden kann, <see langword="false" />, damit die Instanz nur von jeweils einem Thread verwendet werden kann.</span><span class="sxs-lookup"><span data-stu-id="519e5-200"><see langword="true" /> to make this instance usable concurrently by multiple threads; <see langword="false" /> to make the instance usable by only one thread at a time.</span></span></param>
        <summary><span data-ttu-id="519e5-201">Initialisiert eine neue Instanz der <see cref="T:System.Lazy`1" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="519e5-201">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span> <span data-ttu-id="519e5-202">Wenn eine verzögerte Initialisierung auftritt, werden der Standardkonstruktor des Zieltyps und der angegebene Initialisierungsmodus verwendet.</span><span class="sxs-lookup"><span data-stu-id="519e5-202">When lazy initialization occurs, the default constructor of the target type and the specified initialization mode are used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="519e5-203">Der Threadsicherheitsmodus eine <xref:System.Lazy%601> Instanz, die mit diesem Konstruktor initialisiert wird, ist <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> Wenn `isThreadSafe` ist `true`ist, andernfalls wird der Modus <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="519e5-203">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> if `isThreadSafe` is `true`; otherwise, the mode is <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span></span> <span data-ttu-id="519e5-204">Der Threadsicherheitsmodus beschreibt das Verhalten, wenn mehrere Threads, zum Initialisieren versuchen der <xref:System.Lazy%601> Instanz.</span><span class="sxs-lookup"><span data-stu-id="519e5-204">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="519e5-205">Angeben der <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> Modus der <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> oder <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="519e5-205">To specify the <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> mode, use the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor.</span></span>  
  
 <span data-ttu-id="519e5-206">Ein <xref:System.Lazy%601> -Instanz, die mit diesem Konstruktor erstellt wird werden die Ausnahmen nicht zwischengespeichert.</span><span class="sxs-lookup"><span data-stu-id="519e5-206">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="519e5-207">Weitere Informationen finden Sie unter der <xref:System.Lazy%601>-Klasse oder unter der <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType>-Enumeration.</span><span class="sxs-lookup"><span data-stu-id="519e5-207">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="519e5-208">Das folgende Beispiel veranschaulicht die Verwendung dieses Konstruktors eine verzögerte Initialisierung zu erstellen, die nicht threadsicher ist, für Szenarien, in dem alle Zugriffe auf die verzögert initialisierte Objekt auf dem gleichen Thread auftritt.</span><span class="sxs-lookup"><span data-stu-id="519e5-208">The following example demonstrates the use of this constructor to create a lazy initializer that is not thread safe, for scenarios where all access to the lazily initialized object occurs on the same thread.</span></span> <span data-ttu-id="519e5-209">Es zeigt auch die Verwendung der <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> Konstruktor (Angeben von <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> für `mode`.</span><span class="sxs-lookup"><span data-stu-id="519e5-209">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`.</span></span> <span data-ttu-id="519e5-210">Um in einen anderen Konstruktor wechseln, ändern Sie einfach die Konstruktor auskommentiert ist.</span><span class="sxs-lookup"><span data-stu-id="519e5-210">To switch to a different constructor, just change which constructor is commented out.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="519e5-211">Für Code, der zeigt, wie Sie diesen Konstruktor in Multithread-Szenarien verwenden (Angeben von `true` für `isThreadSafe`), siehe das Beispiel für die <xref:System.Lazy%601.%23ctor> Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="519e5-211">For code that demonstrates how to use this constructor in multithreaded scenarios (specifying `true` for `isThreadSafe`), see the example for the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="519e5-212">Das Beispiel definiert eine `LargeObject` -Klasse, die verzögert initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="519e5-212">The example defines a `LargeObject` class that will be initialized lazily.</span></span> <span data-ttu-id="519e5-213">In der `Main` -Methode, um das Beispiel erstellt eine <xref:System.Lazy%601> -Instanz und hält dann an.</span><span class="sxs-lookup"><span data-stu-id="519e5-213">In the `Main` method, the example creates a <xref:System.Lazy%601> instance and then pauses.</span></span> <span data-ttu-id="519e5-214">Beim Drücken der **EINGABETASTE** drücken, im Beispiel wird auf die <xref:System.Lazy%601.Value%2A> Eigenschaft der <xref:System.Lazy%601> -Instanz, die Initialisierung ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="519e5-214">When you press the **Enter** key, the example accesses the <xref:System.Lazy%601.Value%2A> property of the <xref:System.Lazy%601> instance, which causes initialization to occur.</span></span> <span data-ttu-id="519e5-215">Der Konstruktor, der die `LargeObject` Klasse zeigt eine konsolenmeldung an.</span><span class="sxs-lookup"><span data-stu-id="519e5-215">The constructor of the `LargeObject` class displays a console message.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="519e5-216">Der Einfachheit halber wird in diesem Beispiel eine globale Instanz von <xref:System.Lazy%601> verwendet, und alle Methoden sind `static` (`Shared` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="519e5-216">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="519e5-217">Dies sind keine Anforderungen für die Verwendung der verzögerten Initialisierung.</span><span class="sxs-lookup"><span data-stu-id="519e5-217">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorBool#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorbool/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorBool#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorbool/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="519e5-218">Verzögerte Initialisierung</span><span class="sxs-lookup"><span data-stu-id="519e5-218">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; valueFactory" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="valueFactory"><span data-ttu-id="519e5-219">Der zum Erstellen des verzögert initialisierten Werts bei Bedarf aufgerufene Delegat.</span><span class="sxs-lookup"><span data-stu-id="519e5-219">The delegate that is invoked to produce the lazily initialized value when it is needed.</span></span></param>
        <summary><span data-ttu-id="519e5-220">Initialisiert eine neue Instanz der <see cref="T:System.Lazy`1" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="519e5-220">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span> <span data-ttu-id="519e5-221">Wenn eine verzögerte Initialisierung auftritt, wird die angegebene Initialisierungsfunktion verwendet.</span><span class="sxs-lookup"><span data-stu-id="519e5-221">When lazy initialization occurs, the specified initialization function is used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="519e5-222">Eine Instanz, die mit diesem Konstruktor erstellt wird, kann von mehreren Threads gleichzeitig verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="519e5-222">An instance that is created with this constructor may be used concurrently from multiple threads.</span></span>  
  
 <span data-ttu-id="519e5-223">Der Threadsicherheitsmodus eine <xref:System.Lazy%601> Instanz, die mit diesem Konstruktor initialisiert wird, ist <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="519e5-223">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span></span> <span data-ttu-id="519e5-224">Der Threadsicherheitsmodus beschreibt das Verhalten, wenn mehrere Threads, zum Initialisieren versuchen der <xref:System.Lazy%601> Instanz.</span><span class="sxs-lookup"><span data-stu-id="519e5-224">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="519e5-225">Ausnahmen, die ausgelöst werden, indem `valueFactory` zwischengespeichert werden.</span><span class="sxs-lookup"><span data-stu-id="519e5-225">Exceptions that are thrown by `valueFactory` are cached.</span></span> <span data-ttu-id="519e5-226">Weitere Informationen finden Sie unter der <xref:System.Lazy%601>-Klasse oder unter der <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType>-Enumeration.</span><span class="sxs-lookup"><span data-stu-id="519e5-226">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="519e5-227">Das folgende Beispiel veranschaulicht die Verwendung dieses Konstruktors für die verzögerten Initialisierung mit Zwischenspeichern von Ausnahmen angeben.</span><span class="sxs-lookup"><span data-stu-id="519e5-227">The following example demonstrates the use of this constructor to provide lazy initialization with exception caching.</span></span> <span data-ttu-id="519e5-228">Es zeigt auch die Verwendung von der <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> Konstruktor (Angeben von `true` für `isThreadSafe`) und die <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> Konstruktor (angeben <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> für `mode`).</span><span class="sxs-lookup"><span data-stu-id="519e5-228">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="519e5-229">Um in einen anderen Konstruktor wechseln, ändern Sie einfach die Konstruktoren auskommentiert werden.</span><span class="sxs-lookup"><span data-stu-id="519e5-229">To switch to a different constructor, just change which constructors are commented out.</span></span>  
  
 <span data-ttu-id="519e5-230">Im Beispiel wird eine `LargeObject`-Klasse definiert, die durch einen von mehreren Threads verzögert initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="519e5-230">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="519e5-231">Die drei wichtigsten Abschnitte des Codes veranschaulichen die Erstellung der Initialisierer, die eigentliche Initialisierung und den Konstruktor der `LargeObject` -Klasse, die Zwischenspeichern von Ausnahmen veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="519e5-231">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor of the `LargeObject` class, which demonstrates exception caching.</span></span> <span data-ttu-id="519e5-232">Zu Anfang der `Main`-Methode wird in diesem Beispiel ein threadsicherer verzögerter Initialisierer für `LargeObject` erstellt:</span><span class="sxs-lookup"><span data-stu-id="519e5-232">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFunc#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="519e5-233">Das Beispiel erstellt und startet drei Threads.</span><span class="sxs-lookup"><span data-stu-id="519e5-233">The example creates and starts three threads.</span></span> <span data-ttu-id="519e5-234">Die `ThreadProc` -Methode, die durch Aufrufe für alle drei Threads verwendet wird die <xref:System.Lazy%601.Value%2A> -Eigenschaft zum Abrufen der `LargeObject` Instanz:</span><span class="sxs-lookup"><span data-stu-id="519e5-234">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property to get the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFunc#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="519e5-235">Im Konstruktor des der `LargeObject` -Klasse, die dritte wichtige Codeabschnitt löst eine Ausnahme beim ersten ein `LargeObject` Instanz wird erstellt, aber danach ermöglicht das Erstellen von Instanz auftreten:</span><span class="sxs-lookup"><span data-stu-id="519e5-235">In the constructor of the `LargeObject` class, the third key section of code throws an exception the first time a `LargeObject` instance is created, but thereafter allows instance creation to occur:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1.ctorFunc#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#largector)]  
  
 <span data-ttu-id="519e5-236">Wenn das Beispiel ausgeführt wird, wird den ersten Thread, der versucht, eine Instanz erstellen `LargeObject` schlägt fehl, und die Ausnahme abgefangen wird.</span><span class="sxs-lookup"><span data-stu-id="519e5-236">When the example is run, the first thread that tries to create an instance of `LargeObject` fails, and the exception is caught.</span></span> <span data-ttu-id="519e5-237">Sie erwarten wahrscheinlich, dass der nächste Thread wurde erfolgreich eine Instanz erstellen, würde aber die <xref:System.Lazy%601> Objekt hat die Ausnahme zwischengespeichert.</span><span class="sxs-lookup"><span data-stu-id="519e5-237">You might expect that the next thread would successfully create an instance, but the <xref:System.Lazy%601> object has cached the exception.</span></span> <span data-ttu-id="519e5-238">Aus diesem Grund werden alle drei Threads die Ausnahme auslösen.</span><span class="sxs-lookup"><span data-stu-id="519e5-238">Because of this, all three threads throw the exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="519e5-239">Der Einfachheit halber wird in diesem Beispiel eine globale Instanz von <xref:System.Lazy%601> verwendet, und alle Methoden sind `static` (`Shared` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="519e5-239">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="519e5-240">Dies sind keine Anforderungen für die Verwendung der verzögerten Initialisierung.</span><span class="sxs-lookup"><span data-stu-id="519e5-240">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFunc#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="519e5-241"><paramref name="valueFactory" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="519e5-241"><paramref name="valueFactory" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="519e5-242">Verzögerte Initialisierung</span><span class="sxs-lookup"><span data-stu-id="519e5-242">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (System.Threading.LazyThreadSafetyMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.LazyThreadSafetyMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (mode As LazyThreadSafetyMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(System::Threading::LazyThreadSafetyMode mode);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : System.Threading.LazyThreadSafetyMode -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; mode" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mode" Type="System.Threading.LazyThreadSafetyMode" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="mode"><span data-ttu-id="519e5-243">Einer der Enumerationswerte, der den Threadsicherheitsmodus angibt.</span><span class="sxs-lookup"><span data-stu-id="519e5-243">One of the enumeration values that specifies the thread safety mode.</span></span></param>
        <summary><span data-ttu-id="519e5-244">Initialisiert eine neue Instanz der <see cref="T:System.Lazy`1" />-Klasse, die den Standardkonstruktor von <paramref name="T" /> und einen angegebenen Threadsicherheitsmodus verwendet.</span><span class="sxs-lookup"><span data-stu-id="519e5-244">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class that uses the default constructor of <paramref name="T" /> and the specified thread-safety mode.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="519e5-245">Der Threadsicherheitsmodus eine <xref:System.Lazy%601> Instanz beschreibt das Verhalten, wenn mehrere Threads, zum Initialisieren versuchen der <xref:System.Lazy%601> Instanz.</span><span class="sxs-lookup"><span data-stu-id="519e5-245">The thread safety mode of a <xref:System.Lazy%601> instance describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="519e5-246">Ein <xref:System.Lazy%601> -Instanz, die mit diesem Konstruktor erstellt wird werden die Ausnahmen nicht zwischengespeichert.</span><span class="sxs-lookup"><span data-stu-id="519e5-246">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="519e5-247">Weitere Informationen finden Sie unter der <xref:System.Lazy%601>-Klasse oder unter der <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType>-Enumeration.</span><span class="sxs-lookup"><span data-stu-id="519e5-247">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="519e5-248">Das folgende Beispiel veranschaulicht die Verwendung dieses Konstruktors einen verzögerten Initialisierer zu erstellen, der können von mehreren Threads, um ein Objekt erstellen, verzögert die man anfliegt.</span><span class="sxs-lookup"><span data-stu-id="519e5-248">The following example demonstrates the use of this constructor to create a lazy initializer that enables multiple threads to race to create an object lazily.</span></span> <span data-ttu-id="519e5-249">Mehrere Threads möglicherweise bei der Erstellung von Instanzen erfolgreich, aber alle Threads verwenden Sie die Instanz, die zuerst erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="519e5-249">Multiple threads might succeed in creating instances, but all threads use the instance that was created first.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="519e5-250">Ein Beispiel für die veranschaulicht, wie Sie diesen Konstruktor in Singlethread-Szenarios verwenden (Angeben von <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> für `mode`), finden Sie unter den <xref:System.Lazy%601.%23ctor%28System.Boolean%29> Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="519e5-250">For an example that demonstrates how to use this constructor in single-threaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="519e5-251">Für ein Beispiel, das veranschaulicht, wie Sie diesen Konstruktor verwenden, zu Sperren anstelle der Racebedingungen im Multithread-Szenarien (Angeben von <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> für `mode`), finden Sie unter der <xref:System.Lazy%601.%23ctor> Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="519e5-251">For an example that demonstrates how to use this constructor to provide locking instead of race conditions in multithreaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="519e5-252">Das Beispiel definiert eine `LargeObject` -Klasse, die von einer von mehreren Threads verzögert initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="519e5-252">The example defines a `LargeObject` class that will be initialized lazily by any of several threads.</span></span> <span data-ttu-id="519e5-253">Die drei wichtigsten Abschnitte des Codes veranschaulichen die Erstellung der Initialisierer, die eigentliche Initialisierung aus, und der Konstruktor und Finalizer, der die `LargeObject` Klasse.</span><span class="sxs-lookup"><span data-stu-id="519e5-253">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor and finalizer of the `LargeObject` class.</span></span> <span data-ttu-id="519e5-254">Am Anfang der `Main` -Methode, um das Beispiel erstellt die <xref:System.Lazy%601> -Objekt, das verzögerte Initialisierung von führt die `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="519e5-254">At the beginning of the `Main` method, the example creates the <xref:System.Lazy%601> object that performs lazy initialization of the `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorLTSM#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="519e5-255">Das Beispiel erstellt und startet drei Threads, die eine Blockierung auf einem <xref:System.Threading.ManualResetEvent> Objekt, um das Beispiel die Threads gleichzeitig freigeben kann.</span><span class="sxs-lookup"><span data-stu-id="519e5-255">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="519e5-256">In der `ThreadProc` -Methode, die von allen drei Threads Aufrufen verwendet wird, die <xref:System.Lazy%601.Value%2A> Eigenschaft erstellt die `LargeObject` Instanz:</span><span class="sxs-lookup"><span data-stu-id="519e5-256">In the `ThreadProc` method that's used by all three threads, calling the <xref:System.Lazy%601.Value%2A> property creates the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorLTSM#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="519e5-257">Da der Konstruktor für die <xref:System.Lazy%601> angegebenen Instanz <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, dürfen alle drei Threads erstellen `LargeObject` Instanzen.</span><span class="sxs-lookup"><span data-stu-id="519e5-257">Because the constructor for the <xref:System.Lazy%601> instance specified <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, all three threads are allowed to create `LargeObject` instances.</span></span> <span data-ttu-id="519e5-258">Das Beispiel veranschaulicht dies, indem konsolennachrichten angezeigt, in den Konstruktor und in der Finalizer von der `LargeObject` Klasse:</span><span class="sxs-lookup"><span data-stu-id="519e5-258">The example demonstrates this by displaying console messages in the constructor and in the finalizer of the `LargeObject` class:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#CtorFinalizer](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#ctorfinalizer)]
 [!code-vb[System.Lazy\`1.ctorLTSM#CtorFinalizer](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#ctorfinalizer)]  
  
 <span data-ttu-id="519e5-259">Allerdings die <xref:System.Lazy%601> Objekt wird sichergestellt, dass nur eine Instanz wird von allen Threads verwendet.</span><span class="sxs-lookup"><span data-stu-id="519e5-259">However, the <xref:System.Lazy%601> object ensures that only one instance is used by all threads.</span></span> <span data-ttu-id="519e5-260">Die Ausgabe des Beispiels zeigt, dass alle drei Threads verwendet werden, die dieselbe Instanz, und zeigt außerdem, dass die anderen beiden Instanzen von der Garbagecollection freigegeben werden können.</span><span class="sxs-lookup"><span data-stu-id="519e5-260">The output from the example shows that all three threads use the same instance, and also shows that the other two instances can be reclaimed by garbage collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="519e5-261">Der Einfachheit halber wird in diesem Beispiel eine globale Instanz von <xref:System.Lazy%601> verwendet, und alle Methoden sind `static` (`Shared` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="519e5-261">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="519e5-262">Dies sind keine Anforderungen für die Verwendung der verzögerten Initialisierung.</span><span class="sxs-lookup"><span data-stu-id="519e5-262">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorLTSM#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="519e5-263"><paramref name="mode" /> enthält einen ungültigen Wert.</span><span class="sxs-lookup"><span data-stu-id="519e5-263"><paramref name="mode" /> contains an invalid value.</span></span></exception>
        <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="519e5-264">Verzögerte Initialisierung</span><span class="sxs-lookup"><span data-stu-id="519e5-264">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(T value);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : 'T -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="T" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="519e5-265">Der vorinitialisierte Wert, der verwendet werdensoll.</span><span class="sxs-lookup"><span data-stu-id="519e5-265">The preinitialized value to be used.</span></span></param>
        <summary><span data-ttu-id="519e5-266">Initialisiert eine neue Instanz der <see cref="T:System.Lazy`1" />-Klasse, die einen vorinitialisierten angegebenen Wert verwendet.</span><span class="sxs-lookup"><span data-stu-id="519e5-266">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class that uses a preinitialized specified value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks
<span data-ttu-id="519e5-267">Eine Instanz, die mit diesem Konstruktor erstellte ist gleichzeitig von mehreren Threads verwendet werden kann.</span><span class="sxs-lookup"><span data-stu-id="519e5-267">An instance created with this constructor is usable by multiple threads concurrently.</span></span>
]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory, bool isThreadSafe);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory, bool isThreadSafe) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T), isThreadSafe As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory, bool isThreadSafe);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; * bool -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; (valueFactory, isThreadSafe)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" Index="0" FrameworkAlternate="xamarinmac-3.0" />
        <Parameter Name="isThreadSafe" Type="System.Boolean" Index="1" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="valueFactory"><span data-ttu-id="519e5-268">Der zum Erstellen des verzögert initialisierten Werts bei Bedarf aufgerufene Delegat.</span><span class="sxs-lookup"><span data-stu-id="519e5-268">The delegate that is invoked to produce the lazily initialized value when it is needed.</span></span></param>
        <param name="isThreadSafe"><span data-ttu-id="519e5-269"><see langword="true" />, damit diese Instanz durch mehrere Threads gleichzeitig verwendet werden kann, <see langword="false" />, damit diese Instanz nur von jeweils einem Thread verwendet werden kann.</span><span class="sxs-lookup"><span data-stu-id="519e5-269"><see langword="true" /> to make this instance usable concurrently by multiple threads; <see langword="false" /> to make this instance usable by only one thread at a time.</span></span></param>
        <summary><span data-ttu-id="519e5-270">Initialisiert eine neue Instanz der <see cref="T:System.Lazy`1" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="519e5-270">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span> <span data-ttu-id="519e5-271">Wenn eine verzögerte Initialisierung auftritt, werden die angegebene Initialisierungsfunktion und der angegebene Initialisierungsmodus verwendet.</span><span class="sxs-lookup"><span data-stu-id="519e5-271">When lazy initialization occurs, the specified initialization function and initialization mode are used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="519e5-272">Der Threadsicherheitsmodus eine <xref:System.Lazy%601> Instanz, die mit diesem Konstruktor initialisiert wird, ist <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> Wenn `isThreadSafe` ist `true`ist, andernfalls wird der Modus <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="519e5-272">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> if `isThreadSafe` is `true`; otherwise, the mode is <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span></span> <span data-ttu-id="519e5-273">Der Threadsicherheitsmodus beschreibt das Verhalten, wenn mehrere Threads, zum Initialisieren versuchen der <xref:System.Lazy%601> Instanz.</span><span class="sxs-lookup"><span data-stu-id="519e5-273">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="519e5-274">Angeben der <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> Modus der <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> oder <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="519e5-274">To specify the <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> mode, use the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor.</span></span>  
  
 <span data-ttu-id="519e5-275">Ausnahmen, die ausgelöst werden, indem `valueFactory` zwischengespeichert werden.</span><span class="sxs-lookup"><span data-stu-id="519e5-275">Exceptions that are thrown by `valueFactory` are cached.</span></span> <span data-ttu-id="519e5-276">Weitere Informationen finden Sie unter der <xref:System.Lazy%601>-Klasse oder unter der <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType>-Enumeration.</span><span class="sxs-lookup"><span data-stu-id="519e5-276">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="519e5-277">Das folgende Beispiel veranschaulicht die Verwendung dieses Konstruktors für die Ausnahme, die Zwischenspeicherung in einem Szenario mit einem einzelnen Thread verzögerten Initialisierung bereit.</span><span class="sxs-lookup"><span data-stu-id="519e5-277">The following example demonstrates the use of this constructor to provide lazy initialization with exception caching, in a scenario with a single thread.</span></span> <span data-ttu-id="519e5-278">Es zeigt auch die Verwendung der <xref:System.Lazy%601.%23ctor%2A> Konstruktor (Angeben von <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> für `mode`).</span><span class="sxs-lookup"><span data-stu-id="519e5-278">It also demonstrates the use of the  <xref:System.Lazy%601.%23ctor%2A> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="519e5-279">Um diesen Konstruktor zu wechseln, ändern Sie einfach die Konstruktor auskommentiert ist.</span><span class="sxs-lookup"><span data-stu-id="519e5-279">To switch to that constructor, just change which constructor is commented out.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="519e5-280">Für Code, der zeigt, wie Sie diesen Konstruktor in Multithread-Szenarien verwenden (Angeben von `true` für `isThreadSafe`), siehe das Beispiel für die <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="519e5-280">For code that demonstrates how to use this constructor in multithreaded scenarios (specifying `true` for `isThreadSafe`), see the example for the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span>  
  
 <span data-ttu-id="519e5-281">Im Beispiel wird eine `LargeObject`-Klasse definiert, die durch einen von mehreren Threads verzögert initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="519e5-281">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="519e5-282">Die drei wichtigsten Abschnitte des Codes veranschaulichen die Erstellung der Initialisierer, die eigentliche Initialisierung und den Konstruktor der `LargeObject` -Klasse, die Zwischenspeichern von Ausnahmen veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="519e5-282">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor of the `LargeObject` class, which demonstrates exception caching.</span></span> <span data-ttu-id="519e5-283">Zu Anfang der `Main`-Methode wird in diesem Beispiel ein threadsicherer verzögerter Initialisierer für `LargeObject` erstellt:</span><span class="sxs-lookup"><span data-stu-id="519e5-283">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="519e5-284">Im Aufruf an den Konstruktor der `isThreadSafe` Parameter `false`, sodass die <xref:System.Lazy%601> ist nicht threadsicher.</span><span class="sxs-lookup"><span data-stu-id="519e5-284">In the call to the constructor, the `isThreadSafe` parameter is `false`, so the <xref:System.Lazy%601> is not thread safe.</span></span> <span data-ttu-id="519e5-285">Da es nicht threadsicher ist, wird im Beispiel wird die <xref:System.Lazy%601.Value%2A> Eigenschaft drei Mal auf dem gleichen Thread:</span><span class="sxs-lookup"><span data-stu-id="519e5-285">Because it's not thread safe, the example calls the <xref:System.Lazy%601.Value%2A> property three times on the same thread:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="519e5-286">Im Konstruktor des der `LargeObject` -Klasse, die dritte wichtige Codeabschnitt löst eine Ausnahme beim ersten ein `LargeObject` Instanz wird erstellt, aber danach ermöglicht das Erstellen von Instanz auftreten:</span><span class="sxs-lookup"><span data-stu-id="519e5-286">In the constructor of the `LargeObject` class, the third key section of code throws an exception the first time a `LargeObject` instance is created, but thereafter allows instance creation to occur:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#largector)]  
  
 <span data-ttu-id="519e5-287">Wenn das Beispiel ausgeführt wird, wird den ersten Versuch zum Erstellen einer Instanz von `LargeObject` schlägt fehl, und die Ausnahme abgefangen wird.</span><span class="sxs-lookup"><span data-stu-id="519e5-287">When the example is run, the first attempt to create an instance of `LargeObject` fails, and the exception is caught.</span></span> <span data-ttu-id="519e5-288">Sie erwarten wahrscheinlich, dass der nächste Versuch erfolgreich ist, würde, aber die <xref:System.Lazy%601> Objekt hat die Ausnahme zwischengespeichert.</span><span class="sxs-lookup"><span data-stu-id="519e5-288">You might expect that the next attempt would succeed, but the <xref:System.Lazy%601> object has cached the exception.</span></span> <span data-ttu-id="519e5-289">Aus diesem Grund werden alle drei Versuche der Ausnahme auslösen.</span><span class="sxs-lookup"><span data-stu-id="519e5-289">Because of this, all three attempts throw the exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="519e5-290">Der Einfachheit halber wird in diesem Beispiel eine globale Instanz von <xref:System.Lazy%601> verwendet, und alle Methoden sind `static` (`Shared` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="519e5-290">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="519e5-291">Dies sind keine Anforderungen für die Verwendung der verzögerten Initialisierung.</span><span class="sxs-lookup"><span data-stu-id="519e5-291">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="519e5-292"><paramref name="valueFactory" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="519e5-292"><paramref name="valueFactory" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="519e5-293">Verzögerte Initialisierung</span><span class="sxs-lookup"><span data-stu-id="519e5-293">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory, System.Threading.LazyThreadSafetyMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory, valuetype System.Threading.LazyThreadSafetyMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T), mode As LazyThreadSafetyMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory, System::Threading::LazyThreadSafetyMode mode);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; * System.Threading.LazyThreadSafetyMode -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; (valueFactory, mode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" Index="0" FrameworkAlternate="xamarinmac-3.0" />
        <Parameter Name="mode" Type="System.Threading.LazyThreadSafetyMode" Index="1" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="valueFactory"><span data-ttu-id="519e5-294">Der zum Erstellen des verzögert initialisierten Werts bei Bedarf aufgerufene Delegat.</span><span class="sxs-lookup"><span data-stu-id="519e5-294">The delegate that is invoked to produce the lazily initialized value when it is needed.</span></span></param>
        <param name="mode"><span data-ttu-id="519e5-295">Einer der Enumerationswerte, der den Threadsicherheitsmodus angibt.</span><span class="sxs-lookup"><span data-stu-id="519e5-295">One of the enumeration values that specifies the thread safety mode.</span></span></param>
        <summary><span data-ttu-id="519e5-296">Initialisiert eine neue Instanz der <see cref="T:System.Lazy`1" />-Klasse, die die angegebene Initialisierungsfunktion und den angegebenen Threadsicherheitsmodus verwendet.</span><span class="sxs-lookup"><span data-stu-id="519e5-296">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class that uses the specified initialization function and thread-safety mode.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="519e5-297">Der Threadsicherheitsmodus eine <xref:System.Lazy%601> Instanz beschreibt das Verhalten, wenn mehrere Threads, zum Initialisieren versuchen der <xref:System.Lazy%601> Instanz.</span><span class="sxs-lookup"><span data-stu-id="519e5-297">The thread safety mode of a <xref:System.Lazy%601> instance describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="519e5-298">Ausnahmen, die ausgelöst werden, indem `valueFactory` zwischengespeichert werden, es sei denn, `mode` ist <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="519e5-298">Exceptions that are thrown by `valueFactory` are cached, unless `mode` is <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span></span> <span data-ttu-id="519e5-299">Weitere Informationen finden Sie unter der <xref:System.Lazy%601>-Klasse oder unter der <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType>-Enumeration.</span><span class="sxs-lookup"><span data-stu-id="519e5-299">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="519e5-300">Das folgende Beispiel veranschaulicht die Verwendung dieses Konstruktors einen verzögerten Initialisierer zu erstellen, der können von mehreren Threads, um ein Objekt erstellen, verzögert die man anfliegt.</span><span class="sxs-lookup"><span data-stu-id="519e5-300">The following example demonstrates the use of this constructor to create a lazy initializer that enables multiple threads to race to create an object lazily.</span></span> <span data-ttu-id="519e5-301">Mehrere Threads möglicherweise bei der Erstellung von Instanzen erfolgreich, aber alle Threads verwenden Sie die Instanz, die zuerst erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="519e5-301">Multiple threads might succeed in creating instances, but all threads use the instance that was created first.</span></span> <span data-ttu-id="519e5-302">Darüber hinaus im Beispiel wird veranschaulicht, dass Ausnahmen nicht zwischengespeichert werden, bei der Angabe <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, auch wenn die Initialisierung von einer Funktion nicht vom Standardkonstruktor des Typs verzögert erstellte ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="519e5-302">In addition, the example demonstrates that exceptions are never cached when you specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, even if initialization is performed by a function instead of by the default constructor of the lazily created type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="519e5-303">Ein Beispiel für die veranschaulicht, wie Sie diesen Konstruktor in Singlethread-Szenarios verwenden (Angeben von <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> für `mode`), finden Sie unter den <xref:System.Lazy%601.%23ctor%28System.Boolean%29> Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="519e5-303">For an example that demonstrates how to use this constructor in single-threaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="519e5-304">Für ein Beispiel, das veranschaulicht, wie Sie diesen Konstruktor verwenden, zu Sperren anstelle der Racebedingungen im Multithread-Szenarien (Angeben von <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> für `mode`), finden Sie unter der <xref:System.Lazy%601.%23ctor> Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="519e5-304">For an example that demonstrates how to use this constructor to provide locking instead of race conditions in multithreaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="519e5-305">Das Beispiel definiert eine `LargeObject` -Klasse, die von einer von mehreren Threads verzögert initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="519e5-305">The example defines a `LargeObject` class that will be initialized lazily by any of several threads.</span></span> <span data-ttu-id="519e5-306">Die vier wichtigsten Abschnitte des Codes veranschaulichen die Erstellung der Initialisierer, die eigentliche Initialisierung, die Initialisierungsfunktion, und der Konstruktor und Finalizer, der die `LargeObject` Klasse.</span><span class="sxs-lookup"><span data-stu-id="519e5-306">The four key sections of code illustrate the creation of the initializer, the actual initialization, the initialization function, and the constructor and finalizer of the `LargeObject` class.</span></span> <span data-ttu-id="519e5-307">Am Anfang der `Main` -Methode, um das Beispiel erstellt die <xref:System.Lazy%601> -Objekt, das verzögerte Initialisierung von führt die `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="519e5-307">At the beginning of the `Main` method, the example creates the <xref:System.Lazy%601> object that performs lazy initialization of the `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="519e5-308">Die verzögerte Initialisierung verwendet die Funktion zum Ausführen der Initialisierung.</span><span class="sxs-lookup"><span data-stu-id="519e5-308">The lazy initializer uses a function to perform the initialization.</span></span> <span data-ttu-id="519e5-309">In diesem Fall ist eine Funktion erforderlich, da es kein Standardkonstruktor für ist die `LargeObject` Klasse.</span><span class="sxs-lookup"><span data-stu-id="519e5-309">In this case, a function is required because there is no default constructor for the `LargeObject` class.</span></span>  
  
 <span data-ttu-id="519e5-310">Das Beispiel erstellt und startet drei Threads, die eine Blockierung auf einem <xref:System.Threading.ManualResetEvent> Objekt, um das Beispiel die Threads gleichzeitig freigeben kann.</span><span class="sxs-lookup"><span data-stu-id="519e5-310">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="519e5-311">In der `ThreadProc` -Methode, die von allen drei Threads Aufrufen verwendet wird, die <xref:System.Lazy%601.Value%2A> Eigenschaft erstellt die `LargeObject` Instanz:</span><span class="sxs-lookup"><span data-stu-id="519e5-311">In the `ThreadProc` method that's used by all three threads, calling the <xref:System.Lazy%601.Value%2A> property creates the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="519e5-312">Im dritten wichtige Abschnitt des Codes, die verzögerte Initialisierung-Funktion aufgerufen, um das Erstellen der `LargeObject` Instanz.</span><span class="sxs-lookup"><span data-stu-id="519e5-312">In the third key section of code, the lazy initialization function is called to create the `LargeObject` instance.</span></span> <span data-ttu-id="519e5-313">Die Funktion löst eine Ausnahme beim ersten Mal aufgerufen wird:</span><span class="sxs-lookup"><span data-stu-id="519e5-313">The function throws an exception the first time it's called:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#FactoryFunc](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#factoryfunc)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#FactoryFunc](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#factoryfunc)]  
  
 <span data-ttu-id="519e5-314">Bei einem anderen <xref:System.Threading.LazyThreadSafetyMode> festlegen, wird eine nicht behandelte Ausnahme in der Initialisierungsfunktion zwischengespeichert werden.</span><span class="sxs-lookup"><span data-stu-id="519e5-314">With any other <xref:System.Threading.LazyThreadSafetyMode> setting, an unhandled exception in the initialization function would be cached.</span></span> <span data-ttu-id="519e5-315">Allerdings <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> unterdrückt Zwischenspeichern von Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="519e5-315">However, <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> suppresses exception caching.</span></span> <span data-ttu-id="519e5-316">Die Ausgabe des Beispiels zeigt, dass es sich bei ein weiteren Versuch zum Initialisieren des Objekts erfolgreich ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="519e5-316">The output from the example demonstrates that a subsequent attempt to initialize the object succeeds.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="519e5-317">Die Ausnahmemeldung wird in der Regel nach Nachrichten, die angibt, dass andere Threads das Objekt erfolgreich initialisiert haben, angezeigt.</span><span class="sxs-lookup"><span data-stu-id="519e5-317">The exception message usually appears after messages indicating that other threads have successfully initialized the object.</span></span> <span data-ttu-id="519e5-318">Dies ist aufgrund der Verzögerung durch Auslösen und Abfangen der Ausnahme.</span><span class="sxs-lookup"><span data-stu-id="519e5-318">This is because of the delay introduced by throwing and catching the exception.</span></span>  
  
 <span data-ttu-id="519e5-319">Da der Konstruktor für die <xref:System.Lazy%601> angegebenen Instanz <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, dürfen alle drei Threads erstellen `LargeObject` Instanzen.</span><span class="sxs-lookup"><span data-stu-id="519e5-319">Because the constructor for the <xref:System.Lazy%601> instance specified <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, all three threads are allowed to create `LargeObject` instances.</span></span> <span data-ttu-id="519e5-320">Das Beispiel veranschaulicht dies, indem konsolennachrichten angezeigt, in den Konstruktor und in der Finalizer von der `LargeObject` Klasse:</span><span class="sxs-lookup"><span data-stu-id="519e5-320">The example demonstrates this by displaying console messages in the constructor and in the finalizer of the `LargeObject` class:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#CtorFinalizer](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#ctorfinalizer)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#CtorFinalizer](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#ctorfinalizer)]  
  
 <span data-ttu-id="519e5-321">Die <xref:System.Lazy%601> Objekt wird sichergestellt, dass nur eine Instanz wird verwendet, von allen Threads (mit Ausnahme der Thread, in denen die Initialisierungsfunktion löst eine Ausnahme aus).</span><span class="sxs-lookup"><span data-stu-id="519e5-321">The <xref:System.Lazy%601> object ensures that only one instance is used by all threads (except the thread where the initialization function throws an exception).</span></span> <span data-ttu-id="519e5-322">Die Ausgabe aus dem Beispiel zeigt dies.</span><span class="sxs-lookup"><span data-stu-id="519e5-322">The output from the example shows this.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="519e5-323">Der Einfachheit halber wird in diesem Beispiel eine globale Instanz von <xref:System.Lazy%601> verwendet, und alle Methoden sind `static` (`Shared` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="519e5-323">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="519e5-324">Dies sind keine Anforderungen für die Verwendung der verzögerten Initialisierung.</span><span class="sxs-lookup"><span data-stu-id="519e5-324">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="519e5-325"><paramref name="mode" /> enthält einen ungültigen Wert.</span><span class="sxs-lookup"><span data-stu-id="519e5-325"><paramref name="mode" /> contains an invalid value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="519e5-326"><paramref name="valueFactory" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="519e5-326"><paramref name="valueFactory" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="519e5-327">Verzögerte Initialisierung</span><span class="sxs-lookup"><span data-stu-id="519e5-327">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsValueCreated">
      <MemberSignature Language="C#" Value="public bool IsValueCreated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValueCreated" />
      <MemberSignature Language="DocId" Value="P:System.Lazy`1.IsValueCreated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsValueCreated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValueCreated { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValueCreated : bool" Usage="System.Lazy&lt;'T&gt;.IsValueCreated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="519e5-328">Ruft einen Wert ab, der angibt, ob ein Wert für diese <see cref="T:System.Lazy`1" />-Instanz erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="519e5-328">Gets a value that indicates whether a value has been created for this <see cref="T:System.Lazy`1" /> instance.</span></span></summary>
        <value><span data-ttu-id="519e5-329"><see langword="true" />, wenn für diese <see cref="T:System.Lazy`1" />-Instanz ein Wert erstellt wurde, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="519e5-329"><see langword="true" /> if a value has been created for this <see cref="T:System.Lazy`1" /> instance; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="519e5-330">Wenn die verzögerter Initialisierung auftritt, für eine <xref:System.Lazy%601> Instanz es möglicherweise ein Wert, der erstellt wird oder eine Ausnahme ausgelöst wird.</span><span class="sxs-lookup"><span data-stu-id="519e5-330">When lazy initialization occurs for a <xref:System.Lazy%601> instance, it may result in either a value being created or an exception being thrown.</span></span> <span data-ttu-id="519e5-331">Wenn eine Ausnahme ausgelöst wird, werden nachfolgende Verhalten ist das <xref:System.Lazy%601> Instanz hängt davon ab, ob Zwischenspeichern von Ausnahmen in Kraft ist.</span><span class="sxs-lookup"><span data-stu-id="519e5-331">If an exception is thrown, subsequent behavior of the <xref:System.Lazy%601> instance depends on whether exception caching is in effect.</span></span> <span data-ttu-id="519e5-332">Wenn die <xref:System.Lazy%601> Instanz mithilfe eines Konstruktors, der keine Initialisierungsfunktion nicht erstellt wurde und das Zwischenspeichern von Ausnahmen ist nicht aktiv.</span><span class="sxs-lookup"><span data-stu-id="519e5-332">If the <xref:System.Lazy%601> instance was created by using a constructor that does not specify an initialization function, then exception caching is not in effect.</span></span> <span data-ttu-id="519e5-333">Einen weiteren Versuch zum Initialisieren der <xref:System.Lazy%601> möglicherweise erfolgreich ausgeführt werden, und nach der erfolgreichen Initialisierung der <xref:System.Lazy%601.IsValueCreated%2A> -Eigenschaft gibt `true`.</span><span class="sxs-lookup"><span data-stu-id="519e5-333">A subsequent attempt to initialize the <xref:System.Lazy%601> might succeed, and after successful initialization the <xref:System.Lazy%601.IsValueCreated%2A> property returns `true`.</span></span> <span data-ttu-id="519e5-334">Wenn die <xref:System.Lazy%601> Instanz mit einer Initialisierungsfunktion erstellt wurde (gemäß der `valueFactory` Parameter, der die <xref:System.Lazy%601> Konstruktor), und Zwischenspeichern von Ausnahmen von den Threadsicherheitsmodus gesteuert wird.</span><span class="sxs-lookup"><span data-stu-id="519e5-334">If the <xref:System.Lazy%601> instance was created with an initialization function (specified by the `valueFactory` parameter of the <xref:System.Lazy%601> constructor), then exception caching is controlled by the thread safety mode.</span></span>  
  
-   <span data-ttu-id="519e5-335">Wenn der Modus <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> oder <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>, es gibt keine zweite Chance zum Initialisieren der <xref:System.Lazy%601> Instanz.</span><span class="sxs-lookup"><span data-stu-id="519e5-335">If the mode is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> or <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>, there is no second chance to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="519e5-336">Wenn eine Ausnahme tritt auf, und wird nicht in die Initialisierungsfunktion behandelt, die Ausnahme zwischengespeichert und erneut ausgelöst, bei nachfolgenden Zugriffen auf die <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="519e5-336">If an exception occurs and is unhandled in the initialization function, that exception is cached and rethrown on subsequent accesses of the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="519e5-337">Es wird kein Wert erstellt, wenn eine Ausnahme wird ausgelöst, also in solchen Fällen <xref:System.Lazy%601.IsValueCreated%2A> gibt `false`.</span><span class="sxs-lookup"><span data-stu-id="519e5-337">No value is created if an exception is thrown, so in such cases <xref:System.Lazy%601.IsValueCreated%2A> returns `false`.</span></span>  
  
-   <span data-ttu-id="519e5-338">Wenn der Modus <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, der erste Thread, der erfolgreich ausführt, die Initialisierungsfunktion (oder die Standard-Konstruktor) erstellt, den Wert für die <xref:System.Lazy%601> Instanz.</span><span class="sxs-lookup"><span data-stu-id="519e5-338">If the mode is <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, the first thread that succeeds in running the initialization function (or the default constructor) creates the value for the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="519e5-339">Wenn die Initialisierungsfunktion für einen Thread eine Ausnahme auslöst, andere Threads können trotzdem versuchen, initialisieren Sie die <xref:System.Lazy%601> Instanz.</span><span class="sxs-lookup"><span data-stu-id="519e5-339">If the initialization function throws an exception on one thread, other threads can still try to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="519e5-340">Wenn der Wert erstellt wurde, die <xref:System.Lazy%601.IsValueCreated%2A> -Eigenschaft gibt `false`.</span><span class="sxs-lookup"><span data-stu-id="519e5-340">Until the value is created, the <xref:System.Lazy%601.IsValueCreated%2A> property returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="519e5-341">Verzögerte Initialisierung</span><span class="sxs-lookup"><span data-stu-id="519e5-341">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="lazy.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="519e5-342">Erstellt eine Zeichenfolgendarstellung der <see cref="P:System.Lazy`1.Value" />-Eigenschaft für diese Instanz und gibt sie zurück.</span><span class="sxs-lookup"><span data-stu-id="519e5-342">Creates and returns a string representation of the <see cref="P:System.Lazy`1.Value" /> property for this instance.</span></span></summary>
        <returns><span data-ttu-id="519e5-343">Das Ergebnis des Aufrufs der <see cref="M:System.Object.ToString" />-Methode für die <see cref="P:System.Lazy`1.Value" />-Eigenschaft dieser Instanz, wenn der Wert erstellt wurde (d. h., wenn die <see cref="P:System.Lazy`1.IsValueCreated" />-Eigenschaft <see langword="true" /> zurückgibt).</span><span class="sxs-lookup"><span data-stu-id="519e5-343">The result of calling the <see cref="M:System.Object.ToString" /> method on the <see cref="P:System.Lazy`1.Value" /> property for this instance, if the value has been created (that is, if the <see cref="P:System.Lazy`1.IsValueCreated" /> property returns <see langword="true" />).</span></span> <span data-ttu-id="519e5-344">Andernfalls eine Zeichenfolge, die angibt, dass der Wert nicht erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="519e5-344">Otherwise, a string indicating that the value has not been created.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="519e5-345">Das Aufrufen dieser Methode löst keine Initialisierung.</span><span class="sxs-lookup"><span data-stu-id="519e5-345">Calling this method does not cause initialization.</span></span>  
  
 <span data-ttu-id="519e5-346">Die <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> Eigenschaft kann sein, `null` nach verzögerte Initialisierung, die bei der Factorymethode für angegebene der `valueFactory` Parameter der <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, oder <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> Konstruktor zurück, `null`.</span><span class="sxs-lookup"><span data-stu-id="519e5-346">The <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property can be `null` after lazy initialization if the factory method that was specified for the `valueFactory` parameter of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="519e5-347">Die <see cref="P:System.Lazy`1.Value" />-Eigenschaft ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="519e5-347">The <see cref="P:System.Lazy`1.Value" /> property is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public T Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Value" />
      <MemberSignature Language="DocId" Value="P:System.Lazy`1.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T Value { T get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : 'T" Usage="System.Lazy&lt;'T&gt;.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="519e5-348">Ruft den verzögert initialisierten Wert der aktuellen <see cref="T:System.Lazy`1" />-Instanz ab.</span><span class="sxs-lookup"><span data-stu-id="519e5-348">Gets the lazily initialized value of the current <see cref="T:System.Lazy`1" /> instance.</span></span></summary>
        <value><span data-ttu-id="519e5-349">Der verzögert initialisierte Wert der aktuellen <see cref="T:System.Lazy`1" />-Instanz.</span><span class="sxs-lookup"><span data-stu-id="519e5-349">The lazily initialized value of the current <see cref="T:System.Lazy`1" /> instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="519e5-350">Wenn die <xref:System.Lazy%601.IsValueCreated%2A?displayProperty=nameWithType> Eigenschaft `false`, den Zugriff auf die <xref:System.Lazy%601.Value%2A> Eigenschaft erzwingt die Initialisierung.</span><span class="sxs-lookup"><span data-stu-id="519e5-350">If the <xref:System.Lazy%601.IsValueCreated%2A?displayProperty=nameWithType> property is `false`, accessing the <xref:System.Lazy%601.Value%2A> property forces initialization.</span></span>  
  
 <span data-ttu-id="519e5-351">Zusätzlich zu den Ausnahmen, die aufgelistet werden, die <xref:System.Lazy%601.Value%2A> Eigenschaft kann jede nicht behandelte Ausnahme, die von der Factorymethode ausgelöst wird, der an übergebene Auslösen der `valueFactory` Parameter der <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, oder <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="519e5-351">In addition to the exceptions that are listed, the <xref:System.Lazy%601.Value%2A> property can throw any unhandled exception that is thrown by the factory method that was passed to the `valueFactory` parameter of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="519e5-352">Die <see cref="T:System.Lazy`1" />-Instanz wird initialisiert, um den Standardkonstruktor des Typs zu verwenden, der verzögert initialisiert wird, und es fehlen Berechtigungen für den Zugriff auf den Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="519e5-352">The <see cref="T:System.Lazy`1" /> instance is initialized to use the default constructor of the type that is being lazily initialized, and permissions to access the constructor are missing.</span></span></exception>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="519e5-353">Die <see cref="T:System.Lazy`1" />-Instanz wird initialisiert, um den Standardkonstruktor des Typs zu verwenden, der verzögert initialisiert wird. Dieser Typ besitzt keinen öffentlichen Konstruktor ohne Parameter.</span><span class="sxs-lookup"><span data-stu-id="519e5-353">The <see cref="T:System.Lazy`1" /> instance is initialized to use the default constructor of the type that is being lazily initialized, and that type does not have a public, parameterless constructor.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="519e5-354">Die Initialisierungsfunktion versucht, in dieser Instanz auf <see cref="P:System.Lazy`1.Value" /> zuzugreifen.</span><span class="sxs-lookup"><span data-stu-id="519e5-354">The initialization function tries to access <see cref="P:System.Lazy`1.Value" /> on this instance.</span></span></exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="519e5-355">Verzögerte Initialisierung</span><span class="sxs-lookup"><span data-stu-id="519e5-355">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
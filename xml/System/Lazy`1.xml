<Type Name="Lazy&lt;T&gt;" FullName="System.Lazy&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="61b1ad39415a95994eb2f37c51cda4c654ac8698" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83942003" /></Metadata><TypeSignature Language="C#" Value="public class Lazy&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Lazy`1&lt;T&gt; extends System.Object" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.Lazy`1" />
  <TypeSignature Language="VB.NET" Value="Public Class Lazy(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Lazy" />
  <TypeSignature Language="F#" Value="type Lazy&lt;'T&gt; = class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Lazy`1&lt;T&gt; extends System.Object" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="System.Core" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Core" FromVersion="4.0.0.0" To="mscorlib" ToVersion="4.0.0.0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
    <TypeForwarding From="System.Core" FromVersion="2.0.5.0" To="mscorlib" ToVersion="2.0.5.0" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8" />
  </TypeForwardingChain>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Diagnostics.DebuggerDisplay("ThreadSafetyMode={Mode}, IsValueCreated={IsValueCreated}, IsValueFaulted={IsValueFaulted}, Value={ValueForDebugDisplay}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.System_LazyDebugView`1))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T"><span data-ttu-id="56030-101">Der Typ des Objekts, das verzögert initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="56030-101">The type of object that is being lazily initialized.</span></span></typeparam>
    <summary><span data-ttu-id="56030-102">Stellt Unterstützung für die verzögerte Initialisierung bereit.</span><span class="sxs-lookup"><span data-stu-id="56030-102">Provides support for lazy initialization.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="56030-103">Verwenden Sie die verzögerte Initialisierung, um die Erstellung eines großen oder ressourcenintensiven Objekts oder die Ausführung einer ressourcenintensiven Aufgabe zu verzögern, insbesondere dann, wenn eine solche Erstellung oder Ausführung während der Lebensdauer des Programms möglicherweise nicht stattfindet.</span><span class="sxs-lookup"><span data-stu-id="56030-103">Use lazy initialization to defer the creation of a large or resource-intensive object, or the execution of a resource-intensive task, particularly when such creation or execution might not occur during the lifetime of the program.</span></span>  
  
 <span data-ttu-id="56030-104">Zum Vorbereiten der verzögerten Initialisierung erstellen Sie eine Instanz von <xref:System.Lazy%601>.</span><span class="sxs-lookup"><span data-stu-id="56030-104">To prepare for lazy initialization, you create an instance of <xref:System.Lazy%601>.</span></span> <span data-ttu-id="56030-105">Das Typargument des <xref:System.Lazy%601> Objekts, das Sie erstellen, gibt den Typ des Objekts an, das Sie verzögert initialisieren möchten.</span><span class="sxs-lookup"><span data-stu-id="56030-105">The type argument of the <xref:System.Lazy%601> object that you create specifies the type of the object that you want to initialize lazily.</span></span> <span data-ttu-id="56030-106">Der Konstruktor, den Sie zum Erstellen des <xref:System.Lazy%601> Objekts verwenden, bestimmt die Merkmale der Initialisierung.</span><span class="sxs-lookup"><span data-stu-id="56030-106">The constructor that you use to create the <xref:System.Lazy%601> object determines the characteristics of the initialization.</span></span> <span data-ttu-id="56030-107">Die verzögerte Initialisierung tritt beim ersten Zugriff auf die <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType>-Eigenschaft auf.</span><span class="sxs-lookup"><span data-stu-id="56030-107">Lazy initialization occurs the first time the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property is accessed.</span></span>  
  
 <span data-ttu-id="56030-108">In den meisten Fällen hängt die Auswahl eines Konstruktors von ihren Antworten auf zwei Fragen ab:</span><span class="sxs-lookup"><span data-stu-id="56030-108">In most cases, choosing a constructor depends on your answers to two questions:</span></span>  
  
-   <span data-ttu-id="56030-109">Ist der Zugriff auf das verzögert initialisierte Objekt von mehreren Threads aus möglich?</span><span class="sxs-lookup"><span data-stu-id="56030-109">Will the lazily initialized object be accessed from more than one thread?</span></span> <span data-ttu-id="56030-110">Wenn dies der Fall ist, kann das <xref:System.Lazy%601> Objekt es in einem beliebigen Thread erstellen.</span><span class="sxs-lookup"><span data-stu-id="56030-110">If so, the <xref:System.Lazy%601> object might create it on any thread.</span></span> <span data-ttu-id="56030-111">Sie können einen der einfachen Konstruktoren verwenden, dessen Standardverhalten darin besteht, ein Thread sicheres <xref:System.Lazy%601> Objekt zu erstellen, sodass nur eine Instanz des verzögert instanziierten Objekts erstellt wird, unabhängig davon, wie viele Threads darauf zugreifen.</span><span class="sxs-lookup"><span data-stu-id="56030-111">You can use one of the simple constructors whose default behavior is to create a thread-safe <xref:System.Lazy%601> object, so that only one instance of the lazily instantiated object is created no matter how many threads try to access it.</span></span> <span data-ttu-id="56030-112">Wenn Sie ein <xref:System.Lazy%601> Objekt erstellen möchten, das nicht Thread sicher ist, müssen Sie einen Konstruktor verwenden, mit dem Sie keine Thread Sicherheit angeben können.</span><span class="sxs-lookup"><span data-stu-id="56030-112">To create a <xref:System.Lazy%601> object that is not thread safe, you must use a constructor that enables you to specify no thread safety.</span></span>  
  
    > [!CAUTION]
    >  <span data-ttu-id="56030-113">Wenn das <xref:System.Lazy%601> Objekt Thread sicher wird, wird das verzögert initialisierte Objekt nicht geschützt.</span><span class="sxs-lookup"><span data-stu-id="56030-113">Making the <xref:System.Lazy%601> object thread safe does not protect the lazily initialized object.</span></span> <span data-ttu-id="56030-114">Wenn mehrere Threads auf das verzögert initialisierte Objekt zugreifen können, müssen Sie die Eigenschaften und Methoden für den Multithreadzugriff sicher machen.</span><span class="sxs-lookup"><span data-stu-id="56030-114">If multiple threads can access the lazily initialized object, you must make its properties and methods safe for multithreaded access.</span></span>  
  
-   <span data-ttu-id="56030-115">Erfordert die verzögerte Initialisierung viel Code, oder verfügt das verzögert initialisierte Objekt über einen Parameter losen Konstruktor, der alles benötigt, was Sie benötigen, und löst keine Ausnahmen aus?</span><span class="sxs-lookup"><span data-stu-id="56030-115">Does lazy initialization require a lot of code, or does the lazily initialized object have a parameterless constructor that does everything you need and doesn't throw exceptions?</span></span> <span data-ttu-id="56030-116">Wenn Sie Initialisierungs Code schreiben müssen, oder wenn Ausnahmen behandelt werden müssen, verwenden Sie einen der-Konstruktoren, der eine Factorymethode annimmt.</span><span class="sxs-lookup"><span data-stu-id="56030-116">If you need to write initialization code or if exceptions need to be handled, use one of the constructors that takes a factory method.</span></span> <span data-ttu-id="56030-117">Schreiben Sie den Initialisierungs Code in der Factorymethode.</span><span class="sxs-lookup"><span data-stu-id="56030-117">Write your initialization code in the factory method.</span></span>  
  
 <span data-ttu-id="56030-118">In der folgenden Tabelle wird basierend auf den folgenden beiden Faktoren der zu wählbare Konstruktor angezeigt:</span><span class="sxs-lookup"><span data-stu-id="56030-118">The following table shows which constructor to choose, based on these two factors:</span></span>  
  
|<span data-ttu-id="56030-119">Auf das Objekt wird über zugegriffen.</span><span class="sxs-lookup"><span data-stu-id="56030-119">Object will be accessed by</span></span>|<span data-ttu-id="56030-120">Wenn kein Initialisierungs Code erforderlich ist (Parameter loser Konstruktor), verwenden Sie</span><span class="sxs-lookup"><span data-stu-id="56030-120">If no initialization code is required (parameterless constructor), use</span></span>|<span data-ttu-id="56030-121">Wenn Initialisierungs Code erforderlich ist, verwenden Sie</span><span class="sxs-lookup"><span data-stu-id="56030-121">If initialization code is required, use</span></span>|  
|--------------------------------|------------------------------------------------------------------------|---------------------------------------------|  
|<span data-ttu-id="56030-122">Mehrere Threads</span><span class="sxs-lookup"><span data-stu-id="56030-122">Multiple threads</span></span>|<xref:System.Lazy%601.%23ctor>|<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>|  
|<span data-ttu-id="56030-123">Ein Thread</span><span class="sxs-lookup"><span data-stu-id="56030-123">One thread</span></span>|<span data-ttu-id="56030-124"><xref:System.Lazy%601.%23ctor%28System.Boolean%29>, wenn `isThreadSafe` auf `false`festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="56030-124"><xref:System.Lazy%601.%23ctor%28System.Boolean%29> with `isThreadSafe` set to `false`.</span></span>|<span data-ttu-id="56030-125"><xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29>, wenn `isThreadSafe` auf `false`festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="56030-125"><xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> with `isThreadSafe` set to `false`.</span></span>|  
  
 <span data-ttu-id="56030-126">Sie können einen Lambda Ausdruck verwenden, um die Factorymethode anzugeben.</span><span class="sxs-lookup"><span data-stu-id="56030-126">You can use a lambda expression to specify the factory method.</span></span> <span data-ttu-id="56030-127">Dadurch bleibt der gesamte Initialisierungs Code an einem Ort.</span><span class="sxs-lookup"><span data-stu-id="56030-127">This keeps all the initialization code in one place.</span></span> <span data-ttu-id="56030-128">Der Lambda-Ausdruck erfasst den Kontext, einschließlich aller Argumente, die Sie an den Konstruktor des verzögerten initialisierten Objekts übergeben.</span><span class="sxs-lookup"><span data-stu-id="56030-128">The lambda expression captures the context, including any arguments you pass to the lazily initialized object's constructor.</span></span>  
  
 <span data-ttu-id="56030-129">Zwischen **Speichern von Ausnahmen** Wenn Sie Factorymethoden verwenden, werden Ausnahmen zwischengespeichert.</span><span class="sxs-lookup"><span data-stu-id="56030-129">**Exception caching** When you use factory methods, exceptions are cached.</span></span> <span data-ttu-id="56030-130">Das heißt, wenn die Factorymethode eine Ausnahme auslöst, wenn ein Thread das erste Mal versucht, auf die <xref:System.Lazy%601.Value%2A>-Eigenschaft des <xref:System.Lazy%601> Objekts zuzugreifen, wird bei jedem nachfolgenden Versuch dieselbe Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="56030-130">That is, if the factory method throws an exception the first time a thread tries to access the <xref:System.Lazy%601.Value%2A> property of the <xref:System.Lazy%601> object, the same exception is thrown on every subsequent attempt.</span></span> <span data-ttu-id="56030-131">Dadurch wird sichergestellt, dass alle Aufrufe der <xref:System.Lazy%601.Value%2A>-Eigenschaft dasselbe Ergebnis erzeugen und feine Fehler vermeiden, die auftreten können, wenn verschiedene Threads andere Ergebnisse erhalten.</span><span class="sxs-lookup"><span data-stu-id="56030-131">This ensures that every call to the <xref:System.Lazy%601.Value%2A> property produces the same result and avoids subtle errors that might arise if different threads get different results.</span></span> <span data-ttu-id="56030-132">Der <xref:System.Lazy%601> steht für eine tatsächliche `T`, die andernfalls zu einem früheren Zeitpunkt (normalerweise während des Starts) initialisiert worden wären.</span><span class="sxs-lookup"><span data-stu-id="56030-132">The <xref:System.Lazy%601> stands in for an actual `T` that otherwise would have been initialized at some earlier point, usually during startup.</span></span> <span data-ttu-id="56030-133">Ein Fehler an diesem früheren Punkt ist normalerweise schwerwiegend.</span><span class="sxs-lookup"><span data-stu-id="56030-133">A failure at that earlier point is usually fatal.</span></span> <span data-ttu-id="56030-134">Wenn eine Möglichkeit für einen BEHEB baren Fehler vorliegt, empfiehlt es sich, die Wiederholungs Logik in der Initialisierungs Routine (in diesem Fall die Factorymethode) zu erstellen, genauso wie bei Verwendung der verzögerten Initialisierung.</span><span class="sxs-lookup"><span data-stu-id="56030-134">If there is a potential for a recoverable failure, we recommend that you build the retry logic into the initialization routine (in this case, the factory method), just as you would if you weren't using lazy initialization.</span></span>  
  
 <span data-ttu-id="56030-135">**Alternative zum Sperren** In bestimmten Situationen können Sie den mehr Aufwand des standardmäßigen Sperr Verhaltens des <xref:System.Lazy%601> Objekts vermeiden.</span><span class="sxs-lookup"><span data-stu-id="56030-135">**Alternative to locking** In certain situations, you might want to avoid the overhead of the <xref:System.Lazy%601> object's default locking behavior.</span></span> <span data-ttu-id="56030-136">In seltenen Fällen kann es zu Deadlocks kommen.</span><span class="sxs-lookup"><span data-stu-id="56030-136">In rare situations, there might be a potential for deadlocks.</span></span> <span data-ttu-id="56030-137">In solchen Fällen können Sie den <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29>-oder <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>-Konstruktor verwenden und <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>angeben.</span><span class="sxs-lookup"><span data-stu-id="56030-137">In such cases, you can use the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor, and specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span></span> <span data-ttu-id="56030-138">Dies ermöglicht es dem <xref:System.Lazy%601> Objekt, eine Kopie des verzögert initialisierten Objekts für jeden von mehreren Threads zu erstellen, wenn die Threads die <xref:System.Lazy%601.Value%2A>-Eigenschaft gleichzeitig aufzurufen.</span><span class="sxs-lookup"><span data-stu-id="56030-138">This enables the <xref:System.Lazy%601> object to create a copy of the lazily initialized object on each of several threads if the threads call the <xref:System.Lazy%601.Value%2A> property simultaneously.</span></span> <span data-ttu-id="56030-139">Das <xref:System.Lazy%601>-Objekt stellt sicher, dass alle Threads dieselbe Instanz des verzögerten initialisierten Objekts verwenden, und verwirft die nicht verwendeten Instanzen.</span><span class="sxs-lookup"><span data-stu-id="56030-139">The <xref:System.Lazy%601> object ensures that all threads use the same instance of the lazily initialized object and discards the instances that are not used.</span></span> <span data-ttu-id="56030-140">Folglich ist der Aufwand für die Reduzierung des Sperr Aufwands, dass Ihr Programm manchmal zusätzliche Kopien eines teuren Objekts erstellen und verwerfen kann.</span><span class="sxs-lookup"><span data-stu-id="56030-140">Thus, the cost of reducing the locking overhead is that your program might sometimes create and discard extra copies of an expensive object.</span></span> <span data-ttu-id="56030-141">In den meisten Fällen ist dies unwahrscheinlich.</span><span class="sxs-lookup"><span data-stu-id="56030-141">In most cases, this is unlikely.</span></span> <span data-ttu-id="56030-142">Die Beispiele für die <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29>-und <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>-Konstruktoren veranschaulichen dieses Verhalten.</span><span class="sxs-lookup"><span data-stu-id="56030-142">The examples for the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> and <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructors demonstrate this behavior.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="56030-143">Wenn Sie <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>angeben, werden Ausnahmen nie zwischengespeichert, auch wenn Sie eine Factorymethode angeben.</span><span class="sxs-lookup"><span data-stu-id="56030-143">When you specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, exceptions are never cached, even if you specify a factory method.</span></span>  
  
 <span data-ttu-id="56030-144">**Äquivalente Konstruktoren** Zusätzlich zur Aktivierung der Verwendung von <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>können die Konstruktoren <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> und <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> die Funktionalität der anderen Konstruktoren duplizieren.</span><span class="sxs-lookup"><span data-stu-id="56030-144">**Equivalent constructors** In addition to enabling the use of <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> and <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructors can duplicate the functionality of the other constructors.</span></span> <span data-ttu-id="56030-145">In der folgenden Tabelle werden die Parameterwerte gezeigt, die ein entsprechendes Verhalten verursachen.</span><span class="sxs-lookup"><span data-stu-id="56030-145">The following table shows the parameter values that produce equivalent behavior.</span></span>  
  
|<span data-ttu-id="56030-146">So erstellen Sie ein <xref:System.Lazy%601> Objekt, das</span><span class="sxs-lookup"><span data-stu-id="56030-146">To create a <xref:System.Lazy%601> object that is</span></span>|<span data-ttu-id="56030-147">Legen Sie für Konstruktoren, die einen `LazyThreadSafetyMode` `mode`-Parameter aufweisen, `mode` auf fest.</span><span class="sxs-lookup"><span data-stu-id="56030-147">For constructors that have a `LazyThreadSafetyMode` `mode` parameter, set `mode` to</span></span>|<span data-ttu-id="56030-148">Legen Sie für Konstruktoren mit einem booleschen `isThreadSafe` Parameter `isThreadSafe` auf fest.</span><span class="sxs-lookup"><span data-stu-id="56030-148">For constructors that have a Boolean `isThreadSafe` parameter, set `isThreadSafe` to</span></span>|<span data-ttu-id="56030-149">Für Konstruktoren ohne Thread Sicherheitsparameter</span><span class="sxs-lookup"><span data-stu-id="56030-149">For constructors with no thread safety parameters</span></span>|  
|-------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------|-------------------------------------------------------|  
|<span data-ttu-id="56030-150">Vollständig Thread sicher; verwendet sperren, um sicherzustellen, dass der Wert nur von einem Thread initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="56030-150">Fully thread safe; uses locking to ensure that only one thread initializes the value.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication>|`true`|<span data-ttu-id="56030-151">Alle derartigen Konstruktoren sind vollständig Thread sicher.</span><span class="sxs-lookup"><span data-stu-id="56030-151">All such constructors are fully thread safe.</span></span>|  
|<span data-ttu-id="56030-152">Nicht Thread sicher.</span><span class="sxs-lookup"><span data-stu-id="56030-152">Not thread safe.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.None>|`false`|<span data-ttu-id="56030-153">Nicht zutreffend</span><span class="sxs-lookup"><span data-stu-id="56030-153">Not applicable.</span></span>|  
|<span data-ttu-id="56030-154">Vollständig Thread sicher; Threads können den Wert initialisieren.</span><span class="sxs-lookup"><span data-stu-id="56030-154">Fully thread safe; threads race to initialize the value.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly>|<span data-ttu-id="56030-155">Nicht zutreffend</span><span class="sxs-lookup"><span data-stu-id="56030-155">Not applicable.</span></span>|<span data-ttu-id="56030-156">Nicht zutreffend</span><span class="sxs-lookup"><span data-stu-id="56030-156">Not applicable.</span></span>|  
  
 <span data-ttu-id="56030-157">**Weitere Funktionen** Weitere Informationen zur Verwendung von <xref:System.Lazy%601> mit Thread statischen Feldern oder als Sicherungs Speicher für Eigenschaften finden Sie unter verzögerte [Initialisierung](/dotnet/framework/performance/lazy-initialization).</span><span class="sxs-lookup"><span data-stu-id="56030-157">**Other capabilities** For information about the use of <xref:System.Lazy%601> with thread-static fields, or as the backing store for properties, see [Lazy Initialization](/dotnet/framework/performance/lazy-initialization).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="56030-158">Im folgenden Beispiel wird veranschaulicht, wie die <xref:System.Lazy%601>-Klasse verwendet wird, um eine verzögerte Initialisierung mit Zugriff von mehreren Threads bereitzustellen.</span><span class="sxs-lookup"><span data-stu-id="56030-158">The following example demonstrates the use of the <xref:System.Lazy%601> class to provide lazy initialization with access from multiple threads.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="56030-159">Im Beispiel wird der <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>-Konstruktor verwendet.</span><span class="sxs-lookup"><span data-stu-id="56030-159">The example uses the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span> <span data-ttu-id="56030-160">Außerdem wird die Verwendung des <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29>-Konstruktors (`true` für `isThreadSafe`) und des <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>-Konstruktors (durch Angabe <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> für `mode`) veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="56030-160">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="56030-161">Um zu einem anderen Konstruktor zu wechseln, ändern Sie einfach, welche Konstruktoren auskommentiert werden.</span><span class="sxs-lookup"><span data-stu-id="56030-161">To switch to a different constructor, just change which constructors are commented out.</span></span>  
>   
>  <span data-ttu-id="56030-162">Ein Beispiel, das das Zwischenspeichern von Ausnahmen mit denselben Konstruktoren veranschaulicht, finden Sie im <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>-Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="56030-162">For an example that demonstrates exception caching using the same constructors, see the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span>  
  
 <span data-ttu-id="56030-163">Im Beispiel wird eine `LargeObject`-Klasse definiert, die durch einen von mehreren Threads verzögert initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="56030-163">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="56030-164">Die vier wichtigsten Abschnitte des Codes veranschaulichen die Erstellung des Initialisierers, die Factorymethode, die tatsächliche Initialisierung und den Konstruktor der `LargeObject`-Klasse, die eine Meldung anzeigt, wenn das Objekt erstellt wird.</span><span class="sxs-lookup"><span data-stu-id="56030-164">The four key sections of code illustrate the creation of the initializer, the factory method, the actual initialization, and the constructor of the `LargeObject` class, which displays a message when the object is created.</span></span> <span data-ttu-id="56030-165">Zu Anfang der `Main`-Methode wird in diesem Beispiel ein threadsicherer verzögerter Initialisierer für `LargeObject` erstellt:</span><span class="sxs-lookup"><span data-stu-id="56030-165">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="56030-166">Die Factorymethode zeigt die Erstellung des Objekts mit einem Platzhalter für die weitere Initialisierung:</span><span class="sxs-lookup"><span data-stu-id="56030-166">The factory method shows the creation of the object, with a placeholder for further initialization:</span></span>  
  
 [!code-csharp[System.Lazy\`1#FactoryFunc](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#factoryfunc)]
 [!code-vb[System.Lazy\`1#FactoryFunc](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#factoryfunc)]  
  
 <span data-ttu-id="56030-167">Beachten Sie, dass die ersten beiden Code Abschnitte mit einer Lambda-Funktion kombiniert werden können, wie hier gezeigt:</span><span class="sxs-lookup"><span data-stu-id="56030-167">Note that the first two code sections could be combined by using a lambda function, as shown here:</span></span>  
  
 [!code-csharp[System.Lazy\`1#InitWithLambda](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/lambda.cs#initwithlambda)]
 [!code-vb[System.Lazy\`1#InitWithLambda](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/lambda.vb#initwithlambda)]  
  
 <span data-ttu-id="56030-168">Im Beispiel wird angehalten, um anzugeben, dass ein unbestimmter Zeitraum vergehen kann, bevor eine verzögerte Initialisierung stattfindet.</span><span class="sxs-lookup"><span data-stu-id="56030-168">The example pauses, to indicate that an indeterminate period may elapse before lazy initialization occurs.</span></span> <span data-ttu-id="56030-169">Wenn Sie die **Eingabe** Taste drücken, werden im Beispiel drei Threads erstellt und gestartet.</span><span class="sxs-lookup"><span data-stu-id="56030-169">When you press the **Enter** key, the example creates and starts three threads.</span></span> <span data-ttu-id="56030-170">Die `ThreadProc`-Methode, die von allen drei Threads verwendet wird, ruft die <xref:System.Lazy%601.Value%2A>-Eigenschaft auf.</span><span class="sxs-lookup"><span data-stu-id="56030-170">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property.</span></span> <span data-ttu-id="56030-171">Wenn dies das erste Mal geschieht, wird die `LargeObject` Instanz erstellt:</span><span class="sxs-lookup"><span data-stu-id="56030-171">The first time this happens, the `LargeObject` instance is created:</span></span>  
  
 [!code-csharp[System.Lazy\`1#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="56030-172">Der Konstruktor der `LargeObject`-Klasse, die den letzten Schlüssel Abschnitt des Codes enthält, zeigt eine Meldung an und zeichnet die Identität des Initialisierungs Threads auf.</span><span class="sxs-lookup"><span data-stu-id="56030-172">The constructor of the `LargeObject` class, which includes the last key section of code, displays a message and records the identity of the initializing thread.</span></span> <span data-ttu-id="56030-173">Die Ausgabe des Programms wird am Ende der vollständigen Code Auflistung angezeigt.</span><span class="sxs-lookup"><span data-stu-id="56030-173">The output from the program appears at the end of the full code listing.</span></span>  
  
 [!code-csharp[System.Lazy\`1#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#largector)]  
  
> [!NOTE]
>  <span data-ttu-id="56030-174">Der Einfachheit halber wird in diesem Beispiel eine globale Instanz von <xref:System.Lazy%601> verwendet, und alle Methoden sind `static` (`Shared` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="56030-174">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="56030-175">Dies sind keine Anforderungen für die Verwendung der verzögerten Initialisierung.</span><span class="sxs-lookup"><span data-stu-id="56030-175">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#all)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="56030-176">Standardmäßig sind alle öffentlichen und geschützten Member der <see cref="T:System.Lazy`1" />-Klasse Thread sicher und können gleichzeitig von mehreren Threads verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="56030-176">By default, all public and protected members of the <see cref="T:System.Lazy`1" /> class are thread safe and may be used concurrently from multiple threads.</span></span> <span data-ttu-id="56030-177">Diese Sicherheitsgarantien können optional und pro Instanz entfernt werden, wobei Parameter für die Konstruktoren des Typs verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="56030-177">These thread-safety guarantees may be removed optionally and per instance, using parameters to the type's constructors.</span></span></threadsafe>
    <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
    <related type="Article" href="/dotnet/framework/performance/lazy-initialization"><span data-ttu-id="56030-178">Verzögerte Initialisierung</span><span class="sxs-lookup"><span data-stu-id="56030-178">Lazy Initialization</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="56030-179">Initialisiert eine neue Instanz der Klasse <see cref="T:System.Lazy`1" />.</span><span class="sxs-lookup"><span data-stu-id="56030-179">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="56030-180">Initialisiert eine neue Instanz der Klasse <see cref="T:System.Lazy`1" />.</span><span class="sxs-lookup"><span data-stu-id="56030-180">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span> <span data-ttu-id="56030-181">Wenn eine verzögerte Initialisierung auftritt, wird der parameterlose Konstruktor des Zieltyps verwendet.</span><span class="sxs-lookup"><span data-stu-id="56030-181">When lazy initialization occurs, the parameterless constructor of the target type is used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="56030-182">Eine Instanz, die mit diesem Konstruktor erstellt wird, kann gleichzeitig von mehreren Threads verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="56030-182">An instance that is created with this constructor may be used concurrently from multiple threads.</span></span>  
  
 <span data-ttu-id="56030-183">Der Thread Sicherheitsmodus einer <xref:System.Lazy%601>-Instanz, die mit diesem Konstruktor initialisiert wird, ist <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="56030-183">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span></span> <span data-ttu-id="56030-184">Der Thread Sicherheitsmodus beschreibt das Verhalten, wenn mehrere Threads versuchen, die <xref:System.Lazy%601> Instanz zu initialisieren.</span><span class="sxs-lookup"><span data-stu-id="56030-184">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="56030-185">Eine <xref:System.Lazy%601>-Instanz, die mit diesem Konstruktor erstellt wird, speichert keine Ausnahmen zwischen.</span><span class="sxs-lookup"><span data-stu-id="56030-185">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="56030-186">Weitere Informationen finden Sie unter der <xref:System.Lazy%601>-Klasse oder unter der <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType>-Enumeration.</span><span class="sxs-lookup"><span data-stu-id="56030-186">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="56030-187">Im folgenden Beispiel wird die Verwendung dieses Konstruktors veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="56030-187">The following example demonstrates the use of this constructor.</span></span> <span data-ttu-id="56030-188">Außerdem wird die Verwendung des <xref:System.Lazy%601.%23ctor%28System.Boolean%29>-Konstruktors (`true` für `isThreadSafe`) und des <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29>-Konstruktors (durch Angabe <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> für `mode`) veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="56030-188">It also illustrates the use of the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="56030-189">Um zu einem anderen Konstruktor zu wechseln, ändern Sie einfach, welche Konstruktoren auskommentiert werden.</span><span class="sxs-lookup"><span data-stu-id="56030-189">To switch to a different constructor, just change which constructors are commented out.</span></span>  
  
 <span data-ttu-id="56030-190">Im Beispiel wird eine `LargeObject`-Klasse definiert, die durch einen von mehreren Threads verzögert initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="56030-190">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="56030-191">Die zwei wichtigsten Codezeilen in diesem Beispiel sind die Erstellung des Initialisierers und die tatsächliche Initialisierung.</span><span class="sxs-lookup"><span data-stu-id="56030-191">The two key lines of code in this example are the creation of the initializer and the actual initialization.</span></span> <span data-ttu-id="56030-192">Zu Anfang der `Main`-Methode wird in diesem Beispiel ein threadsicherer verzögerter Initialisierer für `LargeObject` erstellt:</span><span class="sxs-lookup"><span data-stu-id="56030-192">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctor#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="56030-193">Im Beispiel werden drei Threads erstellt und gestartet, die für ein <xref:System.Threading.ManualResetEvent> Objekt blockiert werden, damit das Beispiel alle Threads gleichzeitig freigeben kann.</span><span class="sxs-lookup"><span data-stu-id="56030-193">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="56030-194">Die `ThreadProc`-Methode, die von allen drei Threads verwendet wird, ruft die <xref:System.Lazy%601.Value%2A>-Eigenschaft auf, um die `LargeObject` Instanz zu erhalten:</span><span class="sxs-lookup"><span data-stu-id="56030-194">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property to get the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctor#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="56030-195">Die <xref:System.Lazy%601>-Klasse stellt Sperren bereit, sodass nur ein Thread die `LargeObject` Instanz erstellen darf.</span><span class="sxs-lookup"><span data-stu-id="56030-195">The <xref:System.Lazy%601> class provides locking, so that only one thread is allowed to create the `LargeObject` instance.</span></span> <span data-ttu-id="56030-196">Das Beispiel zeigt, dass die anderen Threads dieselbe Instanz erhalten.</span><span class="sxs-lookup"><span data-stu-id="56030-196">The example demonstrates that the other threads all get the same instance.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="56030-197">Der Einfachheit halber wird in diesem Beispiel eine globale Instanz von <xref:System.Lazy%601> verwendet, und alle Methoden sind `static` (`Shared` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="56030-197">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="56030-198">Dies sind keine Anforderungen für die Verwendung der verzögerten Initialisierung.</span><span class="sxs-lookup"><span data-stu-id="56030-198">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctor#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/performance/lazy-initialization"><span data-ttu-id="56030-199">Verzögerte Initialisierung</span><span class="sxs-lookup"><span data-stu-id="56030-199">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (bool isThreadSafe);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool isThreadSafe) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (isThreadSafe As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(bool isThreadSafe);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : bool -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; isThreadSafe" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="isThreadSafe" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isThreadSafe"><span data-ttu-id="56030-200"><see langword="true" />, damit diese Instanz gleichzeitig von mehreren Threads verwendet werden kann; <see langword="false" />, damit die Instanz jeweils nur von einem Thread verwendet werden kann.</span><span class="sxs-lookup"><span data-stu-id="56030-200"><see langword="true" /> to make this instance usable concurrently by multiple threads; <see langword="false" /> to make the instance usable by only one thread at a time.</span></span></param>
        <summary><span data-ttu-id="56030-201">Initialisiert eine neue Instanz der Klasse <see cref="T:System.Lazy`1" />.</span><span class="sxs-lookup"><span data-stu-id="56030-201">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span> <span data-ttu-id="56030-202">Wenn eine verzögerte Initialisierung auftritt, werden der parameterlose Konstruktor des Zieltyps und der angegebene Initialisierungsmodus verwendet.</span><span class="sxs-lookup"><span data-stu-id="56030-202">When lazy initialization occurs, the parameterless constructor of the target type and the specified initialization mode are used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="56030-203">Der Thread Sicherheitsmodus einer <xref:System.Lazy%601>-Instanz, die mit diesem Konstruktor initialisiert wird, ist <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>, wenn `isThreadSafe` `true`ist. Andernfalls ist der Modus <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="56030-203">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> if `isThreadSafe` is `true`; otherwise, the mode is <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span></span> <span data-ttu-id="56030-204">Der Thread Sicherheitsmodus beschreibt das Verhalten, wenn mehrere Threads versuchen, die <xref:System.Lazy%601> Instanz zu initialisieren.</span><span class="sxs-lookup"><span data-stu-id="56030-204">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="56030-205">Um den <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> Modus anzugeben, verwenden Sie den <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>-oder <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29>-Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="56030-205">To specify the <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> mode, use the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor.</span></span>  
  
 <span data-ttu-id="56030-206">Eine <xref:System.Lazy%601>-Instanz, die mit diesem Konstruktor erstellt wird, speichert keine Ausnahmen zwischen.</span><span class="sxs-lookup"><span data-stu-id="56030-206">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="56030-207">Weitere Informationen finden Sie unter der <xref:System.Lazy%601>-Klasse oder unter der <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType>-Enumeration.</span><span class="sxs-lookup"><span data-stu-id="56030-207">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="56030-208">Im folgenden Beispiel wird veranschaulicht, wie dieser Konstruktor verwendet wird, um einen verzögerten Initialisierer zu erstellen, der nicht Thread sicher ist, in Szenarien, in denen der gesamte Zugriff auf das verzögert initialisierte Objekt im gleichen Thread auftritt.</span><span class="sxs-lookup"><span data-stu-id="56030-208">The following example demonstrates the use of this constructor to create a lazy initializer that is not thread safe, for scenarios where all access to the lazily initialized object occurs on the same thread.</span></span> <span data-ttu-id="56030-209">Außerdem wird die Verwendung des <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29>-Konstruktors (angeben von <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> für `mode`veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="56030-209">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`.</span></span> <span data-ttu-id="56030-210">Um zu einem anderen Konstruktor zu wechseln, ändern Sie einfach den auskommentierten Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="56030-210">To switch to a different constructor, just change which constructor is commented out.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="56030-211">Code, der die Verwendung dieses Konstruktors in Multithread-Szenarien veranschaulicht (angeben von `true` für `isThreadSafe`), finden Sie im Beispiel für den <xref:System.Lazy%601.%23ctor>-Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="56030-211">For code that demonstrates how to use this constructor in multithreaded scenarios (specifying `true` for `isThreadSafe`), see the example for the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="56030-212">Im Beispiel wird eine `LargeObject` Klasse definiert, die verzögert initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="56030-212">The example defines a `LargeObject` class that will be initialized lazily.</span></span> <span data-ttu-id="56030-213">In der `Main`-Methode wird in diesem Beispiel eine <xref:System.Lazy%601> Instanz erstellt und dann angehalten.</span><span class="sxs-lookup"><span data-stu-id="56030-213">In the `Main` method, the example creates a <xref:System.Lazy%601> instance and then pauses.</span></span> <span data-ttu-id="56030-214">Wenn Sie die **Eingabe** Taste drücken, greift das Beispiel auf die <xref:System.Lazy%601.Value%2A>-Eigenschaft der <xref:System.Lazy%601>-Instanz zu, die eine Initialisierung auslöst.</span><span class="sxs-lookup"><span data-stu-id="56030-214">When you press the **Enter** key, the example accesses the <xref:System.Lazy%601.Value%2A> property of the <xref:System.Lazy%601> instance, which causes initialization to occur.</span></span> <span data-ttu-id="56030-215">Der Konstruktor der `LargeObject` Klasse zeigt eine Konsolen Meldung an.</span><span class="sxs-lookup"><span data-stu-id="56030-215">The constructor of the `LargeObject` class displays a console message.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="56030-216">Der Einfachheit halber wird in diesem Beispiel eine globale Instanz von <xref:System.Lazy%601> verwendet, und alle Methoden sind `static` (`Shared` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="56030-216">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="56030-217">Dies sind keine Anforderungen für die Verwendung der verzögerten Initialisierung.</span><span class="sxs-lookup"><span data-stu-id="56030-217">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorBool#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorbool/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorBool#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorbool/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/performance/lazy-initialization"><span data-ttu-id="56030-218">Verzögerte Initialisierung</span><span class="sxs-lookup"><span data-stu-id="56030-218">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; valueFactory" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="valueFactory"><span data-ttu-id="56030-219">Der Delegat, der aufgerufen wird, um bei Bedarf den verzögert initialisierten Wert zu erzeugen.</span><span class="sxs-lookup"><span data-stu-id="56030-219">The delegate that is invoked to produce the lazily initialized value when it is needed.</span></span></param>
        <summary><span data-ttu-id="56030-220">Initialisiert eine neue Instanz der Klasse <see cref="T:System.Lazy`1" />.</span><span class="sxs-lookup"><span data-stu-id="56030-220">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span> <span data-ttu-id="56030-221">Bei einer verzögerten Initialisierung wird die angegebene Initialisierungsfunktion verwendet.</span><span class="sxs-lookup"><span data-stu-id="56030-221">When lazy initialization occurs, the specified initialization function is used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="56030-222">Eine Instanz, die mit diesem Konstruktor erstellt wird, kann gleichzeitig von mehreren Threads verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="56030-222">An instance that is created with this constructor may be used concurrently from multiple threads.</span></span>  
  
 <span data-ttu-id="56030-223">Der Thread Sicherheitsmodus einer <xref:System.Lazy%601>-Instanz, die mit diesem Konstruktor initialisiert wird, ist <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="56030-223">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span></span> <span data-ttu-id="56030-224">Der Thread Sicherheitsmodus beschreibt das Verhalten, wenn mehrere Threads versuchen, die <xref:System.Lazy%601> Instanz zu initialisieren.</span><span class="sxs-lookup"><span data-stu-id="56030-224">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="56030-225">Ausnahmen, die von `valueFactory` ausgelöst werden, werden zwischengespeichert.</span><span class="sxs-lookup"><span data-stu-id="56030-225">Exceptions that are thrown by `valueFactory` are cached.</span></span> <span data-ttu-id="56030-226">Weitere Informationen finden Sie unter der <xref:System.Lazy%601>-Klasse oder unter der <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType>-Enumeration.</span><span class="sxs-lookup"><span data-stu-id="56030-226">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="56030-227">Im folgenden Beispiel wird veranschaulicht, wie dieser Konstruktor verwendet wird, um eine verzögerte Initialisierung mit Ausnahme Zwischenspeicherung bereitzustellen.</span><span class="sxs-lookup"><span data-stu-id="56030-227">The following example demonstrates the use of this constructor to provide lazy initialization with exception caching.</span></span> <span data-ttu-id="56030-228">Außerdem wird die Verwendung des <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29>-Konstruktors (`true` für `isThreadSafe`) und des <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>-Konstruktors (durch Angabe <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> für `mode`) veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="56030-228">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="56030-229">Um zu einem anderen Konstruktor zu wechseln, ändern Sie einfach, welche Konstruktoren auskommentiert werden.</span><span class="sxs-lookup"><span data-stu-id="56030-229">To switch to a different constructor, just change which constructors are commented out.</span></span>  
  
 <span data-ttu-id="56030-230">Im Beispiel wird eine `LargeObject`-Klasse definiert, die durch einen von mehreren Threads verzögert initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="56030-230">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="56030-231">Die drei wichtigsten Code Abschnitte veranschaulichen die Erstellung des Initialisierers, die tatsächliche Initialisierung und den Konstruktor der `LargeObject`-Klasse, die das Zwischenspeichern von Ausnahmen veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="56030-231">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor of the `LargeObject` class, which demonstrates exception caching.</span></span> <span data-ttu-id="56030-232">Zu Anfang der `Main`-Methode wird in diesem Beispiel ein threadsicherer verzögerter Initialisierer für `LargeObject` erstellt:</span><span class="sxs-lookup"><span data-stu-id="56030-232">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFunc#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="56030-233">Im Beispiel werden drei Threads erstellt und gestartet.</span><span class="sxs-lookup"><span data-stu-id="56030-233">The example creates and starts three threads.</span></span> <span data-ttu-id="56030-234">Die `ThreadProc`-Methode, die von allen drei Threads verwendet wird, ruft die <xref:System.Lazy%601.Value%2A>-Eigenschaft auf, um die `LargeObject` Instanz zu erhalten:</span><span class="sxs-lookup"><span data-stu-id="56030-234">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property to get the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFunc#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="56030-235">Im Konstruktor der `LargeObject` Klasse löst der dritte Schlüssel Abschnitt des Codes eine Ausnahme aus, wenn zum ersten Mal eine `LargeObject` Instanz erstellt wird. Anschließend kann die Instanzerstellung erfolgen:</span><span class="sxs-lookup"><span data-stu-id="56030-235">In the constructor of the `LargeObject` class, the third key section of code throws an exception the first time a `LargeObject` instance is created, but thereafter allows instance creation to occur:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1.ctorFunc#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#largector)]  
  
 <span data-ttu-id="56030-236">Wenn das Beispiel ausgeführt wird, schlägt der erste Thread, der versucht, eine Instanz von `LargeObject` zu erstellen, fehl, und die Ausnahme wird abgefangen.</span><span class="sxs-lookup"><span data-stu-id="56030-236">When the example is run, the first thread that tries to create an instance of `LargeObject` fails, and the exception is caught.</span></span> <span data-ttu-id="56030-237">Sie erwarten möglicherweise, dass der nächste Thread eine Instanz erfolgreich erstellt, aber das <xref:System.Lazy%601> Objekt die Ausnahme zwischengespeichert hat.</span><span class="sxs-lookup"><span data-stu-id="56030-237">You might expect that the next thread would successfully create an instance, but the <xref:System.Lazy%601> object has cached the exception.</span></span> <span data-ttu-id="56030-238">Aus diesem Grund lösen alle drei Threads die Ausnahme aus.</span><span class="sxs-lookup"><span data-stu-id="56030-238">Because of this, all three threads throw the exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="56030-239">Der Einfachheit halber wird in diesem Beispiel eine globale Instanz von <xref:System.Lazy%601> verwendet, und alle Methoden sind `static` (`Shared` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="56030-239">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="56030-240">Dies sind keine Anforderungen für die Verwendung der verzögerten Initialisierung.</span><span class="sxs-lookup"><span data-stu-id="56030-240">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFunc#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="56030-241"><paramref name="valueFactory" /> ist <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="56030-241"><paramref name="valueFactory" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/framework/performance/lazy-initialization"><span data-ttu-id="56030-242">Verzögerte Initialisierung</span><span class="sxs-lookup"><span data-stu-id="56030-242">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (System.Threading.LazyThreadSafetyMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.LazyThreadSafetyMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (mode As LazyThreadSafetyMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(System::Threading::LazyThreadSafetyMode mode);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : System.Threading.LazyThreadSafetyMode -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; mode" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mode" Type="System.Threading.LazyThreadSafetyMode" />
      </Parameters>
      <Docs>
        <param name="mode"><span data-ttu-id="56030-243">Einer der Enumerationswerte, der den Threadsicherheitsmodus angibt.</span><span class="sxs-lookup"><span data-stu-id="56030-243">One of the enumeration values that specifies the thread safety mode.</span></span></param>
        <summary><span data-ttu-id="56030-244">Initialisiert eine neue Instanz der <see cref="T:System.Lazy`1" />-Klasse, die den parameterlosen Konstruktor von <paramref name="T" /> und den angegebenen Threadsicherheitsmodus verwendet.</span><span class="sxs-lookup"><span data-stu-id="56030-244">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class that uses the parameterless constructor of <paramref name="T" /> and the specified thread-safety mode.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="56030-245">Der Thread Sicherheitsmodus einer <xref:System.Lazy%601> Instanz beschreibt das Verhalten, wenn mehrere Threads versuchen, die <xref:System.Lazy%601> Instanz zu initialisieren.</span><span class="sxs-lookup"><span data-stu-id="56030-245">The thread safety mode of a <xref:System.Lazy%601> instance describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="56030-246">Eine <xref:System.Lazy%601>-Instanz, die mit diesem Konstruktor erstellt wird, speichert keine Ausnahmen zwischen.</span><span class="sxs-lookup"><span data-stu-id="56030-246">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="56030-247">Weitere Informationen finden Sie unter der <xref:System.Lazy%601>-Klasse oder unter der <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType>-Enumeration.</span><span class="sxs-lookup"><span data-stu-id="56030-247">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="56030-248">Im folgenden Beispiel wird veranschaulicht, wie dieser Konstruktor verwendet wird, um einen verzögerten Initialisierer zu erstellen, der es mehreren Threads ermöglicht, mit verzögerter Erstellung eines Objekts zu Rennen.</span><span class="sxs-lookup"><span data-stu-id="56030-248">The following example demonstrates the use of this constructor to create a lazy initializer that enables multiple threads to race to create an object lazily.</span></span> <span data-ttu-id="56030-249">Bei der Erstellung von Instanzen sind möglicherweise mehrere Threads erfolgreich, aber alle Threads verwenden die Instanz, die zuerst erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="56030-249">Multiple threads might succeed in creating instances, but all threads use the instance that was created first.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="56030-250">Ein Beispiel für die Verwendung dieses Konstruktors in Single Thread-Szenarien (angeben von <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> für `mode`) finden Sie im <xref:System.Lazy%601.%23ctor%28System.Boolean%29>-Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="56030-250">For an example that demonstrates how to use this constructor in single-threaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="56030-251">Ein Beispiel, das veranschaulicht, wie dieser Konstruktor verwendet wird, um Sperren anstelle von Racebedingungen in Multithread-Szenarien (mit Angabe von <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> für `mode`) zu ermöglichen, finden Sie im <xref:System.Lazy%601.%23ctor>-Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="56030-251">For an example that demonstrates how to use this constructor to provide locking instead of race conditions in multithreaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="56030-252">Im Beispiel wird eine `LargeObject` Klasse definiert, die von mehreren Threads verzögert initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="56030-252">The example defines a `LargeObject` class that will be initialized lazily by any of several threads.</span></span> <span data-ttu-id="56030-253">Die drei wichtigsten Code Abschnitte veranschaulichen die Erstellung des Initialisierers, die tatsächliche Initialisierung sowie den Konstruktor und den Finalizer der `LargeObject`-Klasse.</span><span class="sxs-lookup"><span data-stu-id="56030-253">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor and finalizer of the `LargeObject` class.</span></span> <span data-ttu-id="56030-254">Am Anfang der `Main`-Methode erstellt das Beispiel das <xref:System.Lazy%601>-Objekt, das die verzögerte Initialisierung der `LargeObject`durchführt:</span><span class="sxs-lookup"><span data-stu-id="56030-254">At the beginning of the `Main` method, the example creates the <xref:System.Lazy%601> object that performs lazy initialization of the `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorLTSM#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="56030-255">Im Beispiel werden drei Threads erstellt und gestartet, die für ein <xref:System.Threading.ManualResetEvent> Objekt blockiert werden, damit das Beispiel alle Threads gleichzeitig freigeben kann.</span><span class="sxs-lookup"><span data-stu-id="56030-255">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="56030-256">In der `ThreadProc`-Methode, die von allen drei Threads verwendet wird, wird durch Aufrufen der <xref:System.Lazy%601.Value%2A>-Eigenschaft die `LargeObject`-Instanz erstellt:</span><span class="sxs-lookup"><span data-stu-id="56030-256">In the `ThreadProc` method that's used by all three threads, calling the <xref:System.Lazy%601.Value%2A> property creates the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorLTSM#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="56030-257">Da der Konstruktor für die <xref:System.Lazy%601> Instanz <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>angegeben ist, können alle drei Threads `LargeObject` Instanzen erstellen.</span><span class="sxs-lookup"><span data-stu-id="56030-257">Because the constructor for the <xref:System.Lazy%601> instance specified <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, all three threads are allowed to create `LargeObject` instances.</span></span> <span data-ttu-id="56030-258">Das Beispiel veranschaulicht dies durch Anzeigen von Konsolen Meldungen im Konstruktor und im Finalizer der `LargeObject`-Klasse:</span><span class="sxs-lookup"><span data-stu-id="56030-258">The example demonstrates this by displaying console messages in the constructor and in the finalizer of the `LargeObject` class:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#CtorFinalizer](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#ctorfinalizer)]
 [!code-vb[System.Lazy\`1.ctorLTSM#CtorFinalizer](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#ctorfinalizer)]  
  
 <span data-ttu-id="56030-259">Das <xref:System.Lazy%601>-Objekt stellt jedoch sicher, dass nur eine Instanz von allen Threads verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="56030-259">However, the <xref:System.Lazy%601> object ensures that only one instance is used by all threads.</span></span> <span data-ttu-id="56030-260">Die Ausgabe des Beispiels zeigt, dass alle drei Threads dieselbe Instanz verwenden, und zeigt außerdem, dass die beiden anderen Instanzen von Garbage Collection freigegeben werden können.</span><span class="sxs-lookup"><span data-stu-id="56030-260">The output from the example shows that all three threads use the same instance, and also shows that the other two instances can be reclaimed by garbage collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="56030-261">Der Einfachheit halber wird in diesem Beispiel eine globale Instanz von <xref:System.Lazy%601> verwendet, und alle Methoden sind `static` (`Shared` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="56030-261">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="56030-262">Dies sind keine Anforderungen für die Verwendung der verzögerten Initialisierung.</span><span class="sxs-lookup"><span data-stu-id="56030-262">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorLTSM#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="56030-263"><paramref name="mode" /> enthält einen ungültigen Wert.</span><span class="sxs-lookup"><span data-stu-id="56030-263"><paramref name="mode" /> contains an invalid value.</span></span></exception>
        <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
        <related type="Article" href="/dotnet/framework/performance/lazy-initialization"><span data-ttu-id="56030-264">Verzögerte Initialisierung</span><span class="sxs-lookup"><span data-stu-id="56030-264">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(T value);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : 'T -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="T" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="56030-265">Der vorinitialisierte Wert, der verwendet werdensoll.</span><span class="sxs-lookup"><span data-stu-id="56030-265">The preinitialized value to be used.</span></span></param>
        <summary><span data-ttu-id="56030-266">Initialisiert eine neue Instanz der <see cref="T:System.Lazy`1" />-Klasse, die einen vorinitialisierten angegebenen Wert verwendet.</span><span class="sxs-lookup"><span data-stu-id="56030-266">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class that uses a preinitialized specified value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks
<span data-ttu-id="56030-267">Eine Instanz, die mit diesem Konstruktor erstellt wird, kann gleichzeitig von mehreren Threads verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="56030-267">An instance created with this constructor is usable by multiple threads concurrently.</span></span>
]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory, bool isThreadSafe);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory, bool isThreadSafe) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T), isThreadSafe As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory, bool isThreadSafe);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; * bool -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; (valueFactory, isThreadSafe)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
        <Parameter Name="isThreadSafe" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="valueFactory"><span data-ttu-id="56030-268">Der Delegat, der aufgerufen wird, um bei Bedarf den verzögert initialisierten Wert zu erzeugen.</span><span class="sxs-lookup"><span data-stu-id="56030-268">The delegate that is invoked to produce the lazily initialized value when it is needed.</span></span></param>
        <param name="isThreadSafe"><span data-ttu-id="56030-269"><see langword="true" />, damit diese Instanz gleichzeitig von mehreren Threads verwendet werden kann, <see langword="false" /> damit diese Instanz jeweils nur von einem Thread verwendet werden kann.</span><span class="sxs-lookup"><span data-stu-id="56030-269"><see langword="true" /> to make this instance usable concurrently by multiple threads; <see langword="false" /> to make this instance usable by only one thread at a time.</span></span></param>
        <summary><span data-ttu-id="56030-270">Initialisiert eine neue Instanz der Klasse <see cref="T:System.Lazy`1" />.</span><span class="sxs-lookup"><span data-stu-id="56030-270">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span> <span data-ttu-id="56030-271">Bei einer verzögerten Initialisierung werden die angegebene Initialisierungsfunktion und der angegebene Initialisierungsmodus verwendet.</span><span class="sxs-lookup"><span data-stu-id="56030-271">When lazy initialization occurs, the specified initialization function and initialization mode are used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="56030-272">Der Thread Sicherheitsmodus einer <xref:System.Lazy%601>-Instanz, die mit diesem Konstruktor initialisiert wird, ist <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>, wenn `isThreadSafe` `true`ist. Andernfalls ist der Modus <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="56030-272">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> if `isThreadSafe` is `true`; otherwise, the mode is <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span></span> <span data-ttu-id="56030-273">Der Thread Sicherheitsmodus beschreibt das Verhalten, wenn mehrere Threads versuchen, die <xref:System.Lazy%601> Instanz zu initialisieren.</span><span class="sxs-lookup"><span data-stu-id="56030-273">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="56030-274">Um den <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> Modus anzugeben, verwenden Sie den <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>-oder <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29>-Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="56030-274">To specify the <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> mode, use the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor.</span></span>  
  
 <span data-ttu-id="56030-275">Ausnahmen, die von `valueFactory` ausgelöst werden, werden zwischengespeichert.</span><span class="sxs-lookup"><span data-stu-id="56030-275">Exceptions that are thrown by `valueFactory` are cached.</span></span> <span data-ttu-id="56030-276">Weitere Informationen finden Sie unter der <xref:System.Lazy%601>-Klasse oder unter der <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType>-Enumeration.</span><span class="sxs-lookup"><span data-stu-id="56030-276">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="56030-277">Im folgenden Beispiel wird veranschaulicht, wie dieser Konstruktor verwendet wird, um eine verzögerte Initialisierung mit Ausnahme Zwischenspeicherung in einem Szenario mit einem einzelnen Thread bereitzustellen.</span><span class="sxs-lookup"><span data-stu-id="56030-277">The following example demonstrates the use of this constructor to provide lazy initialization with exception caching, in a scenario with a single thread.</span></span> <span data-ttu-id="56030-278">Außerdem wird die Verwendung des <xref:System.Lazy%601.%23ctor%2A>-Konstruktors (angeben von <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> für `mode`) veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="56030-278">It also demonstrates the use of the  <xref:System.Lazy%601.%23ctor%2A> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="56030-279">Um zu diesem Konstruktor zu wechseln, ändern Sie einfach den auskommentierten Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="56030-279">To switch to that constructor, just change which constructor is commented out.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="56030-280">Code, der die Verwendung dieses Konstruktors in Multithread-Szenarien veranschaulicht (angeben von `true` für `isThreadSafe`), finden Sie im Beispiel für den <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>-Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="56030-280">For code that demonstrates how to use this constructor in multithreaded scenarios (specifying `true` for `isThreadSafe`), see the example for the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span>  
  
 <span data-ttu-id="56030-281">Im Beispiel wird eine `LargeObject`-Klasse definiert, die durch einen von mehreren Threads verzögert initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="56030-281">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="56030-282">Die drei wichtigsten Code Abschnitte veranschaulichen die Erstellung des Initialisierers, die tatsächliche Initialisierung und den Konstruktor der `LargeObject`-Klasse, die das Zwischenspeichern von Ausnahmen veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="56030-282">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor of the `LargeObject` class, which demonstrates exception caching.</span></span> <span data-ttu-id="56030-283">Zu Anfang der `Main`-Methode wird in diesem Beispiel ein threadsicherer verzögerter Initialisierer für `LargeObject` erstellt:</span><span class="sxs-lookup"><span data-stu-id="56030-283">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="56030-284">Beim Aufrufen des Konstruktors wird der `isThreadSafe`-Parameter `false`, sodass der <xref:System.Lazy%601> nicht Thread sicher ist.</span><span class="sxs-lookup"><span data-stu-id="56030-284">In the call to the constructor, the `isThreadSafe` parameter is `false`, so the <xref:System.Lazy%601> is not thread safe.</span></span> <span data-ttu-id="56030-285">Da es nicht Thread sicher ist, wird im Beispiel die <xref:System.Lazy%601.Value%2A>-Eigenschaft dreimal im gleichen Thread aufgerufen:</span><span class="sxs-lookup"><span data-stu-id="56030-285">Because it's not thread safe, the example calls the <xref:System.Lazy%601.Value%2A> property three times on the same thread:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="56030-286">Im Konstruktor der `LargeObject` Klasse löst der dritte Schlüssel Abschnitt des Codes eine Ausnahme aus, wenn zum ersten Mal eine `LargeObject` Instanz erstellt wird. Anschließend kann die Instanzerstellung erfolgen:</span><span class="sxs-lookup"><span data-stu-id="56030-286">In the constructor of the `LargeObject` class, the third key section of code throws an exception the first time a `LargeObject` instance is created, but thereafter allows instance creation to occur:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#largector)]  
  
 <span data-ttu-id="56030-287">Wenn das Beispiel ausgeführt wird, tritt beim ersten Versuch, eine Instanz von `LargeObject` zu erstellen, ein Fehler auf, und die Ausnahme wird abgefangen.</span><span class="sxs-lookup"><span data-stu-id="56030-287">When the example is run, the first attempt to create an instance of `LargeObject` fails, and the exception is caught.</span></span> <span data-ttu-id="56030-288">Möglicherweise ist der nächste Versuch erfolgreich, aber das <xref:System.Lazy%601> Objekt hat die Ausnahme zwischengespeichert.</span><span class="sxs-lookup"><span data-stu-id="56030-288">You might expect that the next attempt would succeed, but the <xref:System.Lazy%601> object has cached the exception.</span></span> <span data-ttu-id="56030-289">Aus diesem Grund lösen alle drei Versuche die Ausnahme aus.</span><span class="sxs-lookup"><span data-stu-id="56030-289">Because of this, all three attempts throw the exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="56030-290">Der Einfachheit halber wird in diesem Beispiel eine globale Instanz von <xref:System.Lazy%601> verwendet, und alle Methoden sind `static` (`Shared` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="56030-290">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="56030-291">Dies sind keine Anforderungen für die Verwendung der verzögerten Initialisierung.</span><span class="sxs-lookup"><span data-stu-id="56030-291">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="56030-292"><paramref name="valueFactory" /> ist <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="56030-292"><paramref name="valueFactory" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/framework/performance/lazy-initialization"><span data-ttu-id="56030-293">Verzögerte Initialisierung</span><span class="sxs-lookup"><span data-stu-id="56030-293">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory, System.Threading.LazyThreadSafetyMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory, valuetype System.Threading.LazyThreadSafetyMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T), mode As LazyThreadSafetyMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory, System::Threading::LazyThreadSafetyMode mode);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; * System.Threading.LazyThreadSafetyMode -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; (valueFactory, mode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
        <Parameter Name="mode" Type="System.Threading.LazyThreadSafetyMode" />
      </Parameters>
      <Docs>
        <param name="valueFactory"><span data-ttu-id="56030-294">Der Delegat, der aufgerufen wird, um bei Bedarf den verzögert initialisierten Wert zu erzeugen.</span><span class="sxs-lookup"><span data-stu-id="56030-294">The delegate that is invoked to produce the lazily initialized value when it is needed.</span></span></param>
        <param name="mode"><span data-ttu-id="56030-295">Einer der Enumerationswerte, der den Threadsicherheitsmodus angibt.</span><span class="sxs-lookup"><span data-stu-id="56030-295">One of the enumeration values that specifies the thread safety mode.</span></span></param>
        <summary><span data-ttu-id="56030-296">Initialisiert eine neue Instanz der <see cref="T:System.Lazy`1" />-Klasse, die die angegebene Initialisierungsfunktion und den angegebenen Threadsicherheitsmodus verwendet.</span><span class="sxs-lookup"><span data-stu-id="56030-296">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class that uses the specified initialization function and thread-safety mode.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="56030-297">Der Thread Sicherheitsmodus einer <xref:System.Lazy%601> Instanz beschreibt das Verhalten, wenn mehrere Threads versuchen, die <xref:System.Lazy%601> Instanz zu initialisieren.</span><span class="sxs-lookup"><span data-stu-id="56030-297">The thread safety mode of a <xref:System.Lazy%601> instance describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="56030-298">Ausnahmen, die von `valueFactory` ausgelöst werden, werden zwischengespeichert, es sei denn, `mode` ist <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="56030-298">Exceptions that are thrown by `valueFactory` are cached, unless `mode` is <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span></span> <span data-ttu-id="56030-299">Weitere Informationen finden Sie unter der <xref:System.Lazy%601>-Klasse oder unter der <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType>-Enumeration.</span><span class="sxs-lookup"><span data-stu-id="56030-299">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="56030-300">Im folgenden Beispiel wird veranschaulicht, wie dieser Konstruktor verwendet wird, um einen verzögerten Initialisierer zu erstellen, der es mehreren Threads ermöglicht, mit verzögerter Erstellung eines Objekts zu Rennen.</span><span class="sxs-lookup"><span data-stu-id="56030-300">The following example demonstrates the use of this constructor to create a lazy initializer that enables multiple threads to race to create an object lazily.</span></span> <span data-ttu-id="56030-301">Bei der Erstellung von Instanzen sind möglicherweise mehrere Threads erfolgreich, aber alle Threads verwenden die Instanz, die zuerst erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="56030-301">Multiple threads might succeed in creating instances, but all threads use the instance that was created first.</span></span> <span data-ttu-id="56030-302">Außerdem wird im Beispiel veranschaulicht, dass Ausnahmen nie zwischengespeichert werden, wenn Sie <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>angeben. Dies gilt auch dann, wenn die Initialisierung durch eine Funktion statt durch den Parameter losen Konstruktor des verzögerten erstellten Typs erfolgt.</span><span class="sxs-lookup"><span data-stu-id="56030-302">In addition, the example demonstrates that exceptions are never cached when you specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, even if initialization is performed by a function instead of by the parameterless constructor of the lazily created type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="56030-303">Ein Beispiel für die Verwendung dieses Konstruktors in Single Thread-Szenarien (angeben von <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> für `mode`) finden Sie im <xref:System.Lazy%601.%23ctor%28System.Boolean%29>-Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="56030-303">For an example that demonstrates how to use this constructor in single-threaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="56030-304">Ein Beispiel, das veranschaulicht, wie dieser Konstruktor verwendet wird, um Sperren anstelle von Racebedingungen in Multithread-Szenarien (mit Angabe von <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> für `mode`) zu ermöglichen, finden Sie im <xref:System.Lazy%601.%23ctor>-Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="56030-304">For an example that demonstrates how to use this constructor to provide locking instead of race conditions in multithreaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="56030-305">Im Beispiel wird eine `LargeObject` Klasse definiert, die von mehreren Threads verzögert initialisiert wird.</span><span class="sxs-lookup"><span data-stu-id="56030-305">The example defines a `LargeObject` class that will be initialized lazily by any of several threads.</span></span> <span data-ttu-id="56030-306">Die vier wichtigsten Abschnitte des Codes veranschaulichen die Erstellung des Initialisierers, die tatsächliche Initialisierung, die Initialisierungsfunktion und den Konstruktor und den Finalizer der `LargeObject`-Klasse.</span><span class="sxs-lookup"><span data-stu-id="56030-306">The four key sections of code illustrate the creation of the initializer, the actual initialization, the initialization function, and the constructor and finalizer of the `LargeObject` class.</span></span> <span data-ttu-id="56030-307">Am Anfang der `Main`-Methode erstellt das Beispiel das <xref:System.Lazy%601>-Objekt, das die verzögerte Initialisierung der `LargeObject`durchführt:</span><span class="sxs-lookup"><span data-stu-id="56030-307">At the beginning of the `Main` method, the example creates the <xref:System.Lazy%601> object that performs lazy initialization of the `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="56030-308">Der verzögerte Initialisierer verwendet eine Funktion, um die Initialisierung auszuführen.</span><span class="sxs-lookup"><span data-stu-id="56030-308">The lazy initializer uses a function to perform the initialization.</span></span> <span data-ttu-id="56030-309">In diesem Fall ist eine Funktion erforderlich, da kein Parameter loser Konstruktor für die `LargeObject` Klasse vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="56030-309">In this case, a function is required because there is no parameterless constructor for the `LargeObject` class.</span></span>  
  
 <span data-ttu-id="56030-310">Im Beispiel werden drei Threads erstellt und gestartet, die für ein <xref:System.Threading.ManualResetEvent> Objekt blockiert werden, damit das Beispiel alle Threads gleichzeitig freigeben kann.</span><span class="sxs-lookup"><span data-stu-id="56030-310">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="56030-311">In der `ThreadProc`-Methode, die von allen drei Threads verwendet wird, wird durch Aufrufen der <xref:System.Lazy%601.Value%2A>-Eigenschaft die `LargeObject`-Instanz erstellt:</span><span class="sxs-lookup"><span data-stu-id="56030-311">In the `ThreadProc` method that's used by all three threads, calling the <xref:System.Lazy%601.Value%2A> property creates the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="56030-312">Im dritten Schlüssel Abschnitt des Codes wird die verzögerte Initialisierungsfunktion aufgerufen, um die `LargeObject` Instanz zu erstellen.</span><span class="sxs-lookup"><span data-stu-id="56030-312">In the third key section of code, the lazy initialization function is called to create the `LargeObject` instance.</span></span> <span data-ttu-id="56030-313">Die-Funktion löst eine Ausnahme aus, wenn Sie zum ersten Mal aufgerufen wird:</span><span class="sxs-lookup"><span data-stu-id="56030-313">The function throws an exception the first time it's called:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#FactoryFunc](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#factoryfunc)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#FactoryFunc](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#factoryfunc)]  
  
 <span data-ttu-id="56030-314">Bei allen anderen <xref:System.Threading.LazyThreadSafetyMode> Einstellungen wird eine nicht behandelte Ausnahme in der Initialisierungsfunktion zwischengespeichert.</span><span class="sxs-lookup"><span data-stu-id="56030-314">With any other <xref:System.Threading.LazyThreadSafetyMode> setting, an unhandled exception in the initialization function would be cached.</span></span> <span data-ttu-id="56030-315"><xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> unterdrückt jedoch das Zwischenspeichern von Ausnahmen.</span><span class="sxs-lookup"><span data-stu-id="56030-315">However, <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> suppresses exception caching.</span></span> <span data-ttu-id="56030-316">Die Ausgabe des Beispiels zeigt, dass ein nachfolgender Versuch, das Objekt zu initialisieren, erfolgreich ist.</span><span class="sxs-lookup"><span data-stu-id="56030-316">The output from the example demonstrates that a subsequent attempt to initialize the object succeeds.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="56030-317">Die Ausnahme Meldung wird normalerweise Nachrichten angezeigt, die angeben, dass das Objekt von anderen Threads erfolgreich initialisiert wurde.</span><span class="sxs-lookup"><span data-stu-id="56030-317">The exception message usually appears after messages indicating that other threads have successfully initialized the object.</span></span> <span data-ttu-id="56030-318">Dies liegt an der Verzögerung, die durch auslösen und Abfangen der Ausnahme verursacht wurde.</span><span class="sxs-lookup"><span data-stu-id="56030-318">This is because of the delay introduced by throwing and catching the exception.</span></span>  
  
 <span data-ttu-id="56030-319">Da der Konstruktor für die <xref:System.Lazy%601> Instanz <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>angegeben ist, können alle drei Threads `LargeObject` Instanzen erstellen.</span><span class="sxs-lookup"><span data-stu-id="56030-319">Because the constructor for the <xref:System.Lazy%601> instance specified <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, all three threads are allowed to create `LargeObject` instances.</span></span> <span data-ttu-id="56030-320">Das Beispiel veranschaulicht dies durch Anzeigen von Konsolen Meldungen im Konstruktor und im Finalizer der `LargeObject`-Klasse:</span><span class="sxs-lookup"><span data-stu-id="56030-320">The example demonstrates this by displaying console messages in the constructor and in the finalizer of the `LargeObject` class:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#CtorFinalizer](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#ctorfinalizer)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#CtorFinalizer](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#ctorfinalizer)]  
  
 <span data-ttu-id="56030-321">Das <xref:System.Lazy%601>-Objekt stellt sicher, dass nur eine Instanz von allen Threads verwendet wird (außer dem Thread, in dem die Initialisierungsfunktion eine Ausnahme auslöst).</span><span class="sxs-lookup"><span data-stu-id="56030-321">The <xref:System.Lazy%601> object ensures that only one instance is used by all threads (except the thread where the initialization function throws an exception).</span></span> <span data-ttu-id="56030-322">Dies wird in der Ausgabe des Beispiels veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="56030-322">The output from the example shows this.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="56030-323">Der Einfachheit halber wird in diesem Beispiel eine globale Instanz von <xref:System.Lazy%601> verwendet, und alle Methoden sind `static` (`Shared` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="56030-323">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="56030-324">Dies sind keine Anforderungen für die Verwendung der verzögerten Initialisierung.</span><span class="sxs-lookup"><span data-stu-id="56030-324">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="56030-325"><paramref name="mode" /> enthält einen ungültigen Wert.</span><span class="sxs-lookup"><span data-stu-id="56030-325"><paramref name="mode" /> contains an invalid value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="56030-326"><paramref name="valueFactory" /> ist <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="56030-326"><paramref name="valueFactory" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/framework/performance/lazy-initialization"><span data-ttu-id="56030-327">Verzögerte Initialisierung</span><span class="sxs-lookup"><span data-stu-id="56030-327">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsValueCreated">
      <MemberSignature Language="C#" Value="public bool IsValueCreated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValueCreated" />
      <MemberSignature Language="DocId" Value="P:System.Lazy`1.IsValueCreated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsValueCreated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValueCreated { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValueCreated : bool" Usage="System.Lazy&lt;'T&gt;.IsValueCreated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="56030-328">Ruft einen Wert ab, der angibt, ob ein Wert für diese <see cref="T:System.Lazy`1" />-Instanz erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="56030-328">Gets a value that indicates whether a value has been created for this <see cref="T:System.Lazy`1" /> instance.</span></span></summary>
        <value><span data-ttu-id="56030-329"><see langword="true" />, wenn ein Wert für diese <see cref="T:System.Lazy`1" />-Instanz erstellt wurde, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="56030-329"><see langword="true" /> if a value has been created for this <see cref="T:System.Lazy`1" /> instance; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="56030-330">Wenn eine verzögerte Initialisierung für eine <xref:System.Lazy%601> Instanz erfolgt, kann dies dazu führen, dass entweder ein Wert erstellt oder eine Ausnahme ausgelöst wird.</span><span class="sxs-lookup"><span data-stu-id="56030-330">When lazy initialization occurs for a <xref:System.Lazy%601> instance, it may result in either a value being created or an exception being thrown.</span></span> <span data-ttu-id="56030-331">Wenn eine Ausnahme ausgelöst wird, hängt das nachfolgende Verhalten der <xref:System.Lazy%601> Instanz davon ab, ob das Zwischenspeichern von Ausnahmen wirksam ist.</span><span class="sxs-lookup"><span data-stu-id="56030-331">If an exception is thrown, subsequent behavior of the <xref:System.Lazy%601> instance depends on whether exception caching is in effect.</span></span> <span data-ttu-id="56030-332">Wenn die <xref:System.Lazy%601> Instanz mithilfe eines Konstruktors erstellt wurde, der keine Initialisierungsfunktion angibt, ist das Zwischenspeichern von Ausnahmen nicht wirksam.</span><span class="sxs-lookup"><span data-stu-id="56030-332">If the <xref:System.Lazy%601> instance was created by using a constructor that does not specify an initialization function, then exception caching is not in effect.</span></span> <span data-ttu-id="56030-333">Ein nachfolgende Versuch, den <xref:System.Lazy%601> zu initialisieren, kann erfolgreich sein, und nach erfolgreicher Initialisierung gibt die <xref:System.Lazy%601.IsValueCreated%2A>-Eigenschaft `true`zurück.</span><span class="sxs-lookup"><span data-stu-id="56030-333">A subsequent attempt to initialize the <xref:System.Lazy%601> might succeed, and after successful initialization the <xref:System.Lazy%601.IsValueCreated%2A> property returns `true`.</span></span> <span data-ttu-id="56030-334">Wenn die <xref:System.Lazy%601> Instanz mit einer Initialisierungsfunktion erstellt wurde (angegeben durch den `valueFactory`-Parameter des <xref:System.Lazy%601>-Konstruktors), wird das Zwischenspeichern von Ausnahmen vom Thread Sicherheitsmodus gesteuert.</span><span class="sxs-lookup"><span data-stu-id="56030-334">If the <xref:System.Lazy%601> instance was created with an initialization function (specified by the `valueFactory` parameter of the <xref:System.Lazy%601> constructor), then exception caching is controlled by the thread safety mode.</span></span>  
  
-   <span data-ttu-id="56030-335">Wenn der Modus <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> oder <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>ist, besteht keine zweite Möglichkeit, die <xref:System.Lazy%601> Instanz zu initialisieren.</span><span class="sxs-lookup"><span data-stu-id="56030-335">If the mode is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> or <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>, there is no second chance to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="56030-336">Wenn eine Ausnahme auftritt und in der Initialisierungsfunktion nicht behandelt wird, wird diese Ausnahme zwischengespeichert und bei nachfolgenden Zugriffen der <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType>-Eigenschaft erneut ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="56030-336">If an exception occurs and is unhandled in the initialization function, that exception is cached and rethrown on subsequent accesses of the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="56030-337">Wenn eine Ausnahme ausgelöst wird, wird kein Wert erstellt. in solchen Fällen <xref:System.Lazy%601.IsValueCreated%2A> `false`zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="56030-337">No value is created if an exception is thrown, so in such cases <xref:System.Lazy%601.IsValueCreated%2A> returns `false`.</span></span>  
  
-   <span data-ttu-id="56030-338">Wenn der Modus <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>ist, erstellt der erste Thread, der die Initialisierungsfunktion erfolgreich ausführt (oder der Parameter lose Konstruktor), den Wert für die <xref:System.Lazy%601> Instanz.</span><span class="sxs-lookup"><span data-stu-id="56030-338">If the mode is <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, the first thread that succeeds in running the initialization function (or the parameterless constructor) creates the value for the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="56030-339">Wenn die Initialisierungsfunktion eine Ausnahme in einem Thread auslöst, können andere Threads weiterhin versuchen, die <xref:System.Lazy%601> Instanz zu initialisieren.</span><span class="sxs-lookup"><span data-stu-id="56030-339">If the initialization function throws an exception on one thread, other threads can still try to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="56030-340">Die <xref:System.Lazy%601.IsValueCreated%2A>-Eigenschaft gibt `false`zurück, bis der Wert erstellt wird.</span><span class="sxs-lookup"><span data-stu-id="56030-340">Until the value is created, the <xref:System.Lazy%601.IsValueCreated%2A> property returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
        <related type="Article" href="/dotnet/framework/performance/lazy-initialization"><span data-ttu-id="56030-341">Verzögerte Initialisierung</span><span class="sxs-lookup"><span data-stu-id="56030-341">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="lazy.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="56030-342">Erstellt eine Zeichenfolgendarstellung der <see cref="P:System.Lazy`1.Value" />-Eigenschaft für diese Instanz und gibt diese zurück.</span><span class="sxs-lookup"><span data-stu-id="56030-342">Creates and returns a string representation of the <see cref="P:System.Lazy`1.Value" /> property for this instance.</span></span></summary>
        <returns><span data-ttu-id="56030-343">Das Ergebnis des Aufrufs der <see cref="M:System.Object.ToString" />-Methode für die <see cref="P:System.Lazy`1.Value" />-Eigenschaft für diese Instanz, wenn der Wert erstellt wurde (d. h., wenn die <see cref="P:System.Lazy`1.IsValueCreated" />-Eigenschaft <see langword="true" /> zurückgibt ).</span><span class="sxs-lookup"><span data-stu-id="56030-343">The result of calling the <see cref="M:System.Object.ToString" /> method on the <see cref="P:System.Lazy`1.Value" /> property for this instance, if the value has been created (that is, if the <see cref="P:System.Lazy`1.IsValueCreated" /> property returns <see langword="true" />).</span></span> <span data-ttu-id="56030-344">Andernfalls hat eine Zeichenfolge, die angibt, dass der Wert nicht erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="56030-344">Otherwise, a string indicating that the value has not been created.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="56030-345">Das Aufrufen dieser Methode führt nicht zu einer Initialisierung.</span><span class="sxs-lookup"><span data-stu-id="56030-345">Calling this method does not cause initialization.</span></span>  
  
 <span data-ttu-id="56030-346">Die <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType>-Eigenschaft kann nach der verzögerten Initialisierung `null` werden, wenn die Factorymethode, die für den `valueFactory`-Parameter des <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>-, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>-oder <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29>-Konstruktors angegeben wurde, `null`zurückgibt.</span><span class="sxs-lookup"><span data-stu-id="56030-346">The <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property can be `null` after lazy initialization if the factory method that was specified for the `valueFactory` parameter of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="56030-347">Die <see cref="P:System.Lazy`1.Value" />-Eigenschaft ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="56030-347">The <see cref="P:System.Lazy`1.Value" /> property is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public T Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Value" />
      <MemberSignature Language="DocId" Value="P:System.Lazy`1.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T Value { T get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : 'T" Usage="System.Lazy&lt;'T&gt;.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="56030-348">Ruft den verzögert initialisierten Wert der aktuellen <see cref="T:System.Lazy`1" />-Instanz ab.</span><span class="sxs-lookup"><span data-stu-id="56030-348">Gets the lazily initialized value of the current <see cref="T:System.Lazy`1" /> instance.</span></span></summary>
        <value><span data-ttu-id="56030-349">Der verzögert initialisierte Wert der aktuellen <see cref="T:System.Lazy`1" />-Instanz.</span><span class="sxs-lookup"><span data-stu-id="56030-349">The lazily initialized value of the current <see cref="T:System.Lazy`1" /> instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="56030-350">Wenn die <xref:System.Lazy%601.IsValueCreated%2A?displayProperty=nameWithType>-Eigenschaft `false`ist, erzwingt der Zugriff auf die <xref:System.Lazy%601.Value%2A>-Eigenschaft die Initialisierung.</span><span class="sxs-lookup"><span data-stu-id="56030-350">If the <xref:System.Lazy%601.IsValueCreated%2A?displayProperty=nameWithType> property is `false`, accessing the <xref:System.Lazy%601.Value%2A> property forces initialization.</span></span>  
  
 <span data-ttu-id="56030-351">Zusätzlich zu den aufgelisteten Ausnahmen kann die <xref:System.Lazy%601.Value%2A>-Eigenschaft jede nicht behandelte Ausnahme auslösen, die von der Factorymethode ausgelöst wird, die an den `valueFactory`-Parameter des <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>-, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>-oder <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29>-Konstruktors übergeben wurde.</span><span class="sxs-lookup"><span data-stu-id="56030-351">In addition to the exceptions that are listed, the <xref:System.Lazy%601.Value%2A> property can throw any unhandled exception that is thrown by the factory method that was passed to the `valueFactory` parameter of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="56030-352">Die <see cref="T:System.Lazy`1" />-Klasse wird initialisiert, um den parameterlosen Konstruktor des Typs zu verwenden, der verzögert initialisiert wird, und es fehlen Berechtigungen für den Zugriff auf den Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="56030-352">The <see cref="T:System.Lazy`1" /> instance is initialized to use the parameterless constructor of the type that is being lazily initialized, and permissions to access the constructor are missing.</span></span></exception>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="56030-353">Die <see cref="T:System.Lazy`1" />-Klasse wird initialisiert, um den parameterlosen Konstruktor des Typs zu verwenden, der verzögert initialisiert wird. Dieser Typ besitzt keinen öffentlichen, parameterlosen Konstruktor.</span><span class="sxs-lookup"><span data-stu-id="56030-353">The <see cref="T:System.Lazy`1" /> instance is initialized to use the parameterless constructor of the type that is being lazily initialized, and that type does not have a public, parameterless constructor.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="56030-354">Die Initialisierungsfunktion versucht, in dieser Instanz auf <see cref="P:System.Lazy`1.Value" /> zuzugreifen.</span><span class="sxs-lookup"><span data-stu-id="56030-354">The initialization function tries to access <see cref="P:System.Lazy`1.Value" /> on this instance.</span></span></exception>
        <related type="Article" href="/dotnet/framework/performance/lazy-initialization"><span data-ttu-id="56030-355">Verzögerte Initialisierung</span><span class="sxs-lookup"><span data-stu-id="56030-355">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>

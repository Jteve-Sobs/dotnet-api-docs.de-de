<Type Name="Tuple&lt;T1,T2&gt;" FullName="System.Tuple&lt;T1,T2&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="168d40624fb25c0285f4635b22fe220ee1964147" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58731682" /></Metadata><TypeSignature Language="C#" Value="public class Tuple&lt;T1,T2&gt; : IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Tuple`2&lt;T1, T2&gt; extends System.Object implements class System.Collections.IStructuralComparable, class System.Collections.IStructuralEquatable, class System.IComparable" />
  <TypeSignature Language="DocId" Value="T:System.Tuple`2" />
  <TypeSignature Language="VB.NET" Value="Public Class Tuple(Of T1, T2)&#xA;Implements IComparable, IStructuralComparable, IStructuralEquatable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2&gt;&#xA;public ref class Tuple : IComparable, System::Collections::IStructuralComparable, System::Collections::IStructuralEquatable" />
  <TypeSignature Language="F#" Value="type Tuple&lt;'T1, 'T2&gt; = class&#xA;    interface IStructuralEquatable&#xA;    interface IStructuralComparable&#xA;    interface IComparable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1" />
    <TypeParameter Name="T2" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IStructuralComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IStructuralEquatable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T1">Der Typ der ersten Komponente des Tupels.</typeparam>
    <typeparam name="T2">Der Typ der zweiten Komponente des Tupels.</typeparam>
    <summary>Stellt ein 2-Tupel bzw. Paar dar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein Tupel ist eine Datenstruktur, die eine bestimmte Anzahl und die Sequenz von Werten verfügt. Die <xref:System.Tuple%602> Klasse stellt ein 2-Tupel bzw. Paar, das ein Tupel, die zwei Komponenten verfügt, ist. Ein 2-Tupel ist ähnlich wie eine <xref:System.Collections.Generic.KeyValuePair%602> Struktur.  
  
 Instanziieren Sie ein <xref:System.Tuple%602> Objekt durch Aufrufen der <xref:System.Tuple%602.%23ctor%2A> Konstruktor oder die statische <xref:System.Tuple.Create%60%602%28%60%600%2C%60%601%29?displayProperty=nameWithType> Methode. Sie können die Werte der Komponenten des Tupels abrufen, indem Sie mithilfe der schreibgeschützten <xref:System.Tuple%602.Item1%2A> und <xref:System.Tuple%602.Item2%2A> Instanzeigenschaften.  
  
 Tupel werden häufig in vier verschiedene Arten verwendet:  
  
-   Um einen Satz von Daten darzustellen. Z. B. ein Tupels kann einen Datensatz in einer Datenbank darstellen, und seine Komponenten können die Felder des Datensatzes darstellen.  
  
-   Einfacher Zugriff auf sowie die Bearbeitung eines Datensatzes zu ermöglichen. Das folgende Beispiel definiert ein Array von <xref:System.Tuple%602> Objekte, die die Namen der Schüler/Studenten und die entsprechenden enthalten die Testergebnisse. Es durchläuft dann das Array zum Berechnen der durchschnittlichen Testergebnis.  
  
     [!code-csharp[System.Tuple\`2.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`2.class/cs/example1.cs#1)]
     [!code-vb[System.Tuple\`2.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`2.class/vb/example1.vb#1)]  
  
-   Mehrere Werte zurückgeben, von einer Methode ohne Verwendung von `out` Parameter (in c#) oder `ByRef` Parameter (in Visual Basic). Z. B. im folgenden Beispiel wird eine <xref:System.Tuple%602> Objekts, das zurückgegeben wird, den Quotienten und den Rest, die aus der Division ganzer Zahlen resultieren.  
  
     [!code-csharp[System.Tuple\`2.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`2.item1/cs/item1.cs#1)]
     [!code-vb[System.Tuple\`2.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`2.item1/vb/item1.vb#1)]  
  
-   Um mehrere Werte an eine Methode über einen einzelnen Parameter übergeben. Z. B. die <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> Methode verfügt über einen einzelnen Parameter, mit dem Sie einen Wert an die Methode angeben können, die der Thread beim Start ausgeführt wird. Wenn Sie angeben, ein <xref:System.Tuple%602> Objekt als Methodenargument, Sie können angeben, dass die Startroutine mit zwei Datenelemente.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Tuple" />
    <altmember cref="T:System.Tuple`1" />
    <altmember cref="T:System.Tuple`3" />
    <altmember cref="T:System.Tuple`4" />
    <altmember cref="T:System.Tuple`5" />
    <altmember cref="T:System.Tuple`6" />
    <altmember cref="T:System.Tuple`7" />
    <altmember cref="T:System.Tuple`8" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Tuple (T1 item1, T2 item2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T1 item1, !T2 item2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`2.#ctor(`0,`1)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (item1 As T1, item2 As T2)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Tuple(T1 item1, T2 item2);" />
      <MemberSignature Language="F#" Value="new Tuple&lt;'T1, 'T2&gt; : 'T1 * 'T2 -&gt; Tuple&lt;'T1, 'T2&gt;" Usage="new System.Tuple&lt;'T1, 'T2&gt; (item1, item2)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="item1" Type="T1" />
        <Parameter Name="item2" Type="T2" />
      </Parameters>
      <Docs>
        <param name="item1">Der Wert der ersten Komponente des Tupels.</param>
        <param name="item2">Der Wert der zweiten Komponente des Tupels.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Tuple`2" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können auch mithilfe der statischen <xref:System.Tuple.Create%60%602%28%60%600%2C%60%601%29?displayProperty=nameWithType> Methode, um ein 2-Tupel-Objekt zu instanziieren, ohne die Typen seiner Komponenten explizit angeben zu müssen. Im folgenden Beispiel wird die <xref:System.Tuple.Create%60%602%28%60%600%2C%60%601%29?displayProperty=nameWithType> Methode, um ein 2-Tupel, dessen Komponenten vom Typ sind <xref:System.String> und <xref:System.Double>.  
  
 [!code-csharp[System.Tuple.Create#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/create1.cs#3)]
 [!code-vb[System.Tuple.Create#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/create1.vb#3)]  
  
 Dies entspricht dem folgenden Aufruf der <xref:System.Tuple%602.%23ctor%2A> Klassenkonstruktor.  
  
 [!code-csharp[System.Tuple.Create#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/create1.cs#4)]
 [!code-vb[System.Tuple.Create#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/create1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`2.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="tuple.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Das Objekt, das mit dieser Instanz verglichen werden soll.</param>
        <summary>Gibt einen Wert zurück, der angibt, ob das aktuelle <see cref="T:System.Tuple`2" />-Objekt gleich einem angegebenen Objekt ist.</summary>
        <returns><see langword="true" />, wenn die aktuelle Instanz gleich dem angegebenen Objekt ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `obj` Parameter wird als gleich der aktuellen Instanz in den folgenden Situationen:  
  
-   Es ist ein <xref:System.Tuple%602> Objekt.  
  
-   Die beiden Komponenten sind dieselben Typen wie die aktuelle Instanz.  
  
-   Die beiden Komponenten sind gleich, mit denen der aktuellen Instanz. Die Gleichheit wird vom standardmäßigen Objektgleichheitsvergleich für die einzelnen Komponenten festgelegt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Tuple%602.Equals%28System.Object%29?displayProperty=nameWithType> Methode, um zu bestimmen, ob eines der Objekte in ein Array von <xref:System.Tuple%602> Objekte miteinander gleich sind. Die Ausgabe spiegelt die Tatsache wider, die die <xref:System.Tuple%602.Equals%28System.Object%29> Methodenrückgabe `true` beim Vergleich von <xref:System.Tuple%602> Objekte, deren Komponenten die gleiche Werte aufweisen.  
  
 [!code-csharp[System.Tuple\`2.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`2.equals/cs/equals1.cs#1)]
 [!code-vb[System.Tuple\`2.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`2.equals/vb/equals1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`2.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="tuple.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt den Hashcode für das aktuelle <see cref="T:System.Tuple`2" />-Objekt zurück.</summary>
        <returns>Ein 32-Bit-Hashcode als ganze Zahl mit Vorzeichen.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item1">
      <MemberSignature Language="C#" Value="public T1 Item1 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T1 Item1" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`2.Item1" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item1 As T1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T1 Item1 { T1 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item1 : 'T1" Usage="System.Tuple&lt;'T1, 'T2&gt;.Item1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T1</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Wert der ersten Komponente des aktuellen <see cref="T:System.Tuple`2" />-Objekts ab.</summary>
        <value>Der Wert der ersten Komponente des aktuellen <see cref="T:System.Tuple`2" />-Objekts.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können den Typ des dynamisch bestimmen die <xref:System.Tuple%602.Item1%2A> -Komponente in zwei Arten:  
  
-   Durch Aufrufen der `GetType` Methode auf dem Wert, der von zurückgegeben wird das <xref:System.Tuple%602.Item1%2A> Eigenschaft.  
  
-   Durch Abrufen der <xref:System.Type> Objekt, das darstellt der <xref:System.Tuple%602> -Objekt und das Abrufen des ersten Elements aus dem Array, das von zurückgegebene seine <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> Methode.  
  
   
  
## Examples  
 Das Beispiel veranschaulicht die Verwendung der <xref:System.Tuple%602.Item1%2A> und <xref:System.Tuple%602.Item2%2A> Eigenschaften eine Methode definieren, die mehrere Werte in Form von ein 2-Tupel zurückgibt.  
  
 [!code-csharp[System.Tuple\`2.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`2.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`2.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`2.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item2">
      <MemberSignature Language="C#" Value="public T2 Item2 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T2 Item2" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`2.Item2" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item2 As T2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T2 Item2 { T2 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item2 : 'T2" Usage="System.Tuple&lt;'T1, 'T2&gt;.Item2" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T2</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Wert der zweiten Komponente des aktuellen <see cref="T:System.Tuple`2" />-Objekts ab.</summary>
        <value>Der Wert der zweiten Komponente des aktuellen <see cref="T:System.Tuple`2" />-Objekts.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können den Typ des dynamisch bestimmen die <xref:System.Tuple%602.Item2%2A> -Komponente in zwei Arten:  
  
-   Durch Aufrufen der `GetType` Methode auf dem Wert, der von zurückgegeben wird das <xref:System.Tuple%602.Item2%2A> Eigenschaft.  
  
-   Durch Abrufen der <xref:System.Type> Objekt, das darstellt der <xref:System.Tuple%602> Objekt und das zweite Element aus dem Array, das von zurückgegebene Abrufen der <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> Methode.  
  
   
  
## Examples  
 Das Beispiel veranschaulicht die Verwendung der <xref:System.Tuple%602.Item1%2A> und <xref:System.Tuple%602.Item2%2A> Eigenschaften eine Methode definieren, die mehrere Werte in Form von ein 2-Tupel zurückgibt.  
  
 [!code-csharp[System.Tuple\`2.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`2.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`2.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`2.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IStructuralComparable.CompareTo (object other, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IStructuralComparable.CompareTo(object other, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`2.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (other As Object, comparer As IComparer) As Integer Implements IStructuralComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IStructuralComparable.CompareTo(System::Object ^ other, System::Collections::IComparer ^ comparer) = System::Collections::IStructuralComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="other">Ein Objekt, das mit der aktuellen Instanz verglichen werden soll.</param>
        <param name="comparer">Ein Objekt, das benutzerdefinierte Regeln für Vergleiche bereitstellt.</param>
        <summary>Vergleicht das aktuelle <see cref="T:System.Tuple`2" />-Objekt anhand eines angegebenen Vergleichs mit einem angegebenen Objekt und gibt eine ganze Zahl zurück, die angibt, ob sich das aktuelle Objekt in der Sortierreihenfolge vor dem angegebenen Objekt, dahinter oder an derselben Position befindet.</summary>
        <returns>Eine ganze Zahl mit Vorzeichen, die die relative Position dieser Instanz und von <paramref name="other" /> in der Sortierreihenfolge angibt, wie in der folgenden Tabelle veranschaulicht.  
  
 <list type="table"><listheader><term> Wert 
 </term><description> Beschreibung  
 </description></listheader><item><term> Eine negative ganze Zahl 
 </term><description> Diese Instanz geht <paramref name="other" /> voran.  
  
 </description></item><item><term> Zero 
 </term><description> Diese Instanz und <paramref name="other" /> befinden sich in der Sortierreihenfolge an der gleichen Position.  
  
 </description></item><item><term> Eine positive ganze Zahl 
 </term><description> Diese Instanz folgt <paramref name="other" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung. Er kann nur verwendet werden, wenn die <xref:System.Tuple%602>-Instanz in eine <xref:System.Collections.IStructuralComparable>-Schnittstelle umgewandelt wird.  
  
 Obwohl diese Methode direkt aufgerufen werden kann, am häufigsten durch Aufruf von Auflistung sortieren-Methoden mit <xref:System.Collections.IComparer> Parameter, um die Mitglieder einer Sammlung zu sortieren. Wird z. B. von aufgerufen der <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType> Methode und die <xref:System.Collections.SortedList.Add%2A> Methode eine <xref:System.Collections.SortedList> -Objekt, das mit instanziiert wird die <xref:System.Collections.SortedList.%23ctor%28System.Collections.IComparer%29?displayProperty=nameWithType> Konstruktor.  
  
> [!CAUTION]
>  Die <xref:System.Tuple%602.System%23Collections%23IStructuralComparable%23CompareTo%2A> Methode richtet sich an für die Verwendung in Sortiervorgängen ausgeführt wird. Es sollte nicht verwendet werden, wenn der primäre Zweck eines Vergleichs ist, um festzustellen, ob zwei Objekte gleich sind. Um zu bestimmen, ob zwei Objekte gleich sind, rufen Sie die <xref:System.Tuple%602.System%23Collections%23IStructuralEquatable%23Equals%2A> Methode.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt ein Array von <xref:System.Tuple%602> Objekte, die den Namen eines Studenten bestehen, und testen die Bewertung. Die Komponente der einzelnen Tupel im Array ohne Reihenfolge angezeigt, sortiert das Array und ruft dann <xref:System.Tuple%602.ToString%2A> um den Wert der einzelnen Tupel in sortierter Reihenfolge anzuzeigen. Zum Sortieren des Arrays, das Beispiel definiert einen generischen `ScoreComparer` Klasse, die implementiert die <xref:System.Collections.IComparer> -Schnittstelle und die Sortierungen der <xref:System.Tuple%602> Objekte in aufsteigender Reihenfolge nach dem Wert der ersten Komponente, statt die zweite Komponente. Beachten Sie, die im Beispiel nicht direkt aufgerufen wird die <xref:System.Tuple%602.System%23Collections%23IStructuralComparable%23CompareTo%2A> Methode. Diese Methode aufgerufen wird, implizit von der <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType> -Methode für jedes Element im Array.  
  
 [!code-csharp[System.Tuple\`2.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`2.compareto/cs/compareto2.cs#2)]
 [!code-vb[System.Tuple\`2.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`2.compareto/vb/compareto2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="other" /> ist kein <see cref="T:System.Tuple`2" />-Objekt.</exception>
        <altmember cref="M:System.Tuple`2.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralEquatable.Equals">
      <MemberSignature Language="C#" Value="bool IStructuralEquatable.Equals (object other, System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IStructuralEquatable.Equals(object other, class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`2.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Function Equals (other As Object, comparer As IEqualityComparer) As Boolean Implements IStructuralEquatable.Equals" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IStructuralEquatable.Equals(System::Object ^ other, System::Collections::IEqualityComparer ^ comparer) = System::Collections::IStructuralEquatable::Equals;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="other">Das Objekt, das mit dieser Instanz verglichen werden soll.</param>
        <param name="comparer">Ein Objekt, das die Methode definiert, mit der ermittelt wird, ob die beiden Objekte gleich sind.</param>
        <summary>Gibt einen Wert zurück, der auf Grundlage einer angegebenen Vergleichsmethode angibt, ob das aktuelle <see cref="T:System.Tuple`2" />-Objekt gleich einem angegebenen Objekt ist.</summary>
        <returns><see langword="true" />, wenn die aktuelle Instanz gleich dem angegebenen Objekt ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung. Er kann nur verwendet werden, wenn die <xref:System.Tuple%602>-Instanz in eine <xref:System.Collections.IStructuralEquatable>-Schnittstelle umgewandelt wird.  
  
 Die <xref:System.Tuple%602.System%23Collections%23IStructuralEquatable%23Equals%2A> Implementierung wird nur aufgerufen, wenn `other` nicht `null`, und ob es erfolgreich sein kann umgewandelt (in c#) oder Konvertierung (in Visual Basic) eine <xref:System.Tuple%602> Objekt, dessen Komponenten von demselben Typ wie die aktuelle Instanz. Die <xref:System.Tuple%602.System%23Collections%23IStructuralEquatable%23Equals%2A> -Methode übergibt zuerst die <xref:System.Tuple%602.Item1%2A> Werte der <xref:System.Tuple%602> zu zu vergleichenden Objekte die <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType> Implementierung. Wenn dieser Methodenaufruf gibt `true`, die Methode erneut aufgerufen, und übergeben die <xref:System.Tuple%602.Item2%2A> Werte der beiden <xref:System.Tuple%602> Objekte.  
  
   
  
## Examples  
 Das folgende Beispiel definiert eine `Item2Comparer` Klasse, die implementiert die <xref:System.Collections.IEqualityComparer> Schnittstelle, und ändert die Art, wie <xref:System.Tuple%602> Objekte auf Gleichheit überprüft werden. Die-Methode gibt immer `true` wird beim Übergeben der <xref:System.Tuple%602.Item1%2A> Eigenschaftswerte von zwei <xref:System.Tuple%602> Objekte, und ruft die <xref:System.Tuple%602.System%23Collections%23IStructuralEquatable%23Equals%2A> Methode zum Auswerten ihrer <xref:System.Tuple%602.Item2%2A> Eigenschaftswerte. Daher die Methode testet auf Gleichheit anhand des Werts, der nur die <xref:System.Tuple%602.Item2%2A> Eigenschaft. Die Ausgabe zeigt das Ergebnis für ein Dataset mit <xref:System.Tuple%602> Objekte, mit denen die Namen der Runner und die Abstände, die sie ausgeführt wurden.  
  
 [!code-csharp[System.Tuple\`2.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`2.equals/cs/equals2.cs#2)]
 [!code-vb[System.Tuple\`2.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`2.equals/vb/equals2.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IEqualityComparer" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralEquatable.GetHashCode">
      <MemberSignature Language="C#" Value="int IStructuralEquatable.GetHashCode (System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IStructuralEquatable.GetHashCode(class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`2.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Function GetHashCode (comparer As IEqualityComparer) As Integer Implements IStructuralEquatable.GetHashCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IStructuralEquatable.GetHashCode(System::Collections::IEqualityComparer ^ comparer) = System::Collections::IStructuralEquatable::GetHashCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="comparer">Ein Objekt, dessen <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" />-Methode den Hashcode des aktuellen <see cref="T:System.Tuple`2" />-Objekts berechnet</param>
        <summary>Berechnet mit einer angegebenen Berechnungsmethode den Hash für das aktuelle <see cref="T:System.Tuple`2" />-Objekt.</summary>
        <returns>Ein 32-Bit-Hashcode als ganze Zahl mit Vorzeichen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung. Er kann nur verwendet werden, wenn die <xref:System.Tuple%602>-Instanz in eine <xref:System.Collections.IStructuralEquatable>-Schnittstelle umgewandelt wird.  
  
 Die Methode einfach umschließt einen Aufruf der `comparer` des Objekts <xref:System.Collections.IEqualityComparer.GetHashCode%2A?displayProperty=nameWithType> Implementierung.  
  
 Die Algorithmus verwendet, um den Hash berechnen sollten den gleichen Hashcode zurückgeben, für zwei <xref:System.Tuple%602> Objekte, die als gleich betrachtet werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`2.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (obj As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ obj) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Ein Objekt, das mit der aktuellen Instanz verglichen werden soll.</param>
        <summary>Vergleicht das aktuelle <see cref="T:System.Tuple`2" />-Objekt mit einem angegebenen Objekt und gibt eine Ganzzahl zurück, die darauf hinweist, ob sich das aktuelle Objekt in der Sortierreihenfolge vor oder hinter dem angegebenen Objekt oder an der gleichen Position befindet.</summary>
        <returns>Eine ganze Zahl mit Vorzeichen, die die relative Position dieser Instanz und von <paramref name="obj" /> in der Sortierreihenfolge angibt, wie in der folgenden Tabelle veranschaulicht.  
  
 <list type="table"><listheader><term> Wert 
 </term><description> Beschreibung  
 </description></listheader><item><term> Eine negative ganze Zahl 
 </term><description> Diese Instanz geht <paramref name="obj" /> voran.  
  
 </description></item><item><term> Zero 
 </term><description> Diese Instanz und <paramref name="obj" /> befinden sich in der Sortierreihenfolge an der gleichen Position.  
  
 </description></item><item><term> Eine positive ganze Zahl 
 </term><description> Diese Instanz folgt <paramref name="obj" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung. Er kann nur verwendet werden, wenn die <xref:System.Tuple%602>-Instanz in eine <xref:System.IComparable>-Schnittstelle umgewandelt wird.  
  
 Diese Methode bietet die <xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType> Implementierung für die <xref:System.Tuple%602> Klasse. Obwohl die Methode direkt aufgerufen werden kann, am häufigsten durch Aufruf von standardmäßigen Überladungen der Sortiermethoden, z. B. Auflistung <xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType> und <xref:System.Collections.SortedList.Add%2A?displayProperty=nameWithType>, um die Mitglieder einer Sammlung zu sortieren.  
  
> [!CAUTION]
>  Die <xref:System.Tuple%602.System%23IComparable%23CompareTo%2A?displayProperty=nameWithType> Methode richtet sich an für die Verwendung in Sortiervorgängen ausgeführt wird. Es sollte nicht verwendet werden, wenn der primäre Zweck eines Vergleichs ist, um festzustellen, ob zwei Objekte gleich sind. Um zu bestimmen, ob zwei Objekte gleich sind, rufen Sie die <xref:System.Tuple%602.Equals%2A> Methode.  
  
 Die <xref:System.Tuple%602.System%23IComparable%23CompareTo%2A?displayProperty=nameWithType> Methode verwendet den Standardvergleich für das Objekt, jede Komponente verglichen werden soll.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt ein Array von <xref:System.Tuple%602> Objekte, die den Namen eines Studenten bestehen, und testen die Bewertung. Die Komponente der einzelnen Tupel im Array ohne Reihenfolge angezeigt, sortiert das Array und ruft dann <xref:System.Tuple%602.ToString%2A> um den Wert der einzelnen Tupel in sortierter Reihenfolge anzuzeigen. Die Ausgabe zeigt, dass das Array nach der ersten Komponente sortiert wurden. Beachten Sie, die im Beispiel nicht direkt aufgerufen wird die <xref:System.Tuple%602.System%23IComparable%23CompareTo%28System.Object%29> Methode. Diese Methode aufgerufen wird, implizit von der <xref:System.Array.Sort%28System.Array%29> -Methode für jedes Element im Array.  
  
 [!code-csharp[System.Tuple\`2.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`2.compareto/cs/compareto1.cs#1)]
 [!code-vb[System.Tuple\`2.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`2.compareto/vb/compareto1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="obj" /> ist kein <see cref="T:System.Tuple`2" />-Objekt.</exception>
        <altmember cref="M:System.Tuple`2.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.CompilerServices.ITuple.Item">
      <MemberSignature Language="C#" Value="object System.Runtime.CompilerServices.ITuple.Item[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Runtime.CompilerServices.ITuple.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`2.System#Runtime#CompilerServices#ITuple#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Item(index As Integer) As Object Implements ITuple.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Runtime::CompilerServices::ITuple::Item[int] { System::Object ^ get(int index); };" />
      <MemberSignature Language="F#" Usage="System.Runtime.CompilerServices.ITuple.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.CompilerServices.ITuple.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="index">Der Index des angegebenen Elements <see langword="Tuple" />. <paramref name="index" /> kann zwischen 0 und 1 liegen.</param>
        <summary>Ruft den Wert des angegebenen Elements <see langword="Tuple" /> ab.</summary>
        <value>Der Wert des <see langword="Tuple" />-Elements an der angegebenen Position.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Tuple%602.System%23Runtime%23CompilerServices%23ITuple%23Item%2A?displayProperty=nameWithType> Eigenschaft ist eine explizite schnittstellenimplementierung. Um es aufzurufen, müssen Sie umwandeln oder Konvertieren der <xref:System.Tuple%602> -Objekt an eine <xref:System.Runtime.CompilerServices.ITuple> Schnittstellenobjekt.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException"><paramref name="index" /> ist kleiner als 0 (null) oder größer als 1.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.CompilerServices.ITuple.Length">
      <MemberSignature Language="C#" Value="int System.Runtime.CompilerServices.ITuple.Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Runtime.CompilerServices.ITuple.Length" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`2.System#Runtime#CompilerServices#ITuple#Length" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Length As Integer Implements ITuple.Length" />
      <MemberSignature Language="C++ CLI" Value="property int System::Runtime::CompilerServices::ITuple::Length { int get(); };" />
      <MemberSignature Language="F#" Usage="System.Runtime.CompilerServices.ITuple.Length" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.CompilerServices.ITuple.Length</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Anzahl der Elemente im <see langword="Tuple" /> ab.</summary>
        <value>Die Anzahl von Elementen in einem <see cref="T:System.Tuple`2" />-Objekt beträgt 2.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Tuple%602.System%23Runtime%23CompilerServices%23ITuple%23Length%2A> Eigenschaft ist eine explizite schnittstellenimplementierung. Um es aufzurufen, müssen Sie umwandeln oder Konvertieren der <xref:System.Tuple%602> -Objekt an eine <xref:System.Runtime.CompilerServices.ITuple> Schnittstellenobjekt.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`2.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="tuple.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt eine Zeichenfolge zurück, die den Wert dieser <see cref="T:System.Tuple`2" />-Instanz darstellt.</summary>
        <returns>Die Zeichenfolgendarstellung dieses <see cref="T:System.Tuple`2" />-Objekts.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die von dieser Methode zurückgegebene Zeichenfolge hat das Format (*Item1*, *Item2*), wobei *Item1* und *Item2* stellen die Werte von der <xref:System.Tuple%602.Item1%2A> und <xref:System.Tuple%602.Item2%2A> Eigenschaften. Wenn die beiden Werte wird `null`, es wird dargestellt, als <xref:System.String.Empty?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.Tuple%602.ToString%2A> Methode.  
  
 [!code-csharp[System.Tuple\`2.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`2.tostring/cs/tostring1.cs#1)]
 [!code-vb[System.Tuple\`2.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`2.tostring/vb/tostring1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
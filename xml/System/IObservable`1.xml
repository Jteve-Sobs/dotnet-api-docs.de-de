<Type Name="IObservable&lt;T&gt;" FullName="System.IObservable&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b254aa9b58fa22bb12d126a5a11607096ee177a5" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58717596" /></Metadata><TypeSignature Language="C#" Value="public interface IObservable&lt;out T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IObservable`1&lt;+ T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IObservable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IObservable(Of Out T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IObservable" />
  <TypeSignature Language="F#" Value="type IObservable&lt;'T&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">Das Objekt, das Benachrichtigungsinformationen bereitstellt.</typeparam>
    <summary>Definiert einen Anbieter für Pushbenachrichtigungen.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.IObserver%601> und <xref:System.IObservable%601> Schnittstellen bieten einen generalisierten Mechanismus für Pushbenachrichtigungen, auch bekannt als das Entwurfsmuster "Beobachter". Die <xref:System.IObservable%601> Schnittstelle stellt die Klasse dar, das Benachrichtigungen (der Anbieter), sendet der <xref:System.IObserver%601> -Schnittstelle stellt die Klasse, die sie (der Beobachter) empfängt. `T` Stellt die Klasse, die die Benachrichtigungsinformationen bereitstellt. In einigen pushbasierte Benachrichtigungen die <xref:System.IObserver%601> Implementierung und `T` denselben Typ darstellen kann.  
  
 Der Anbieter muss eine einzelne Methode, implementieren <xref:System.IObservable%601.Subscribe%2A>, das angibt, dass ein Beobachter pushbasierte Benachrichtigungen empfangen werden sollen. Aufrufer der Methode übergeben, eine Instanz der Beobachter. Die Methode gibt ein <xref:System.IDisposable> -Implementierung, die das Beobachtern erlaubt, Benachrichtigungen zu einem beliebigen Zeitpunkt aus, bevor Sie der Anbieter senden beendet wurde abgebrochen.  
  
 Zu jedem Zeitpunkt möglicherweise ein angegebenen Anbieter 0 (null), ein oder mehrere Observer-Objekte. Der Anbieter ist verantwortlich für das Speichern Verweise auf Observer, und sicherstellen, dass sie gültig sind, bevor die Benachrichtigungen gesendet. Die <xref:System.IObservable%601> Schnittstelle ist keine Annahmen über die Anzahl der Beobachter oder die Reihenfolge, in denen Benachrichtigungen gesendet werden.  
  
 Der Anbieter sendet die folgenden drei Arten von Benachrichtigungen an den Beobachter, durch den Aufruf <xref:System.IObserver%601> Methoden:  
  
-   Die aktuellen Daten. Der Anbieter kann Aufrufen der <xref:System.IObserver%601.OnNext%2A?displayProperty=nameWithType> Methode, um den Beobachter übergeben eine `T` -Objekt, das aktuelle Daten, die geänderten Daten oder neue Daten enthält.  
  
-   Eine fehlerbedingung. Der Anbieter kann Aufrufen der <xref:System.IObserver%601.OnError%2A?displayProperty=nameWithType> Methode, um den Beobachter zu informieren, die eine fehlerbedingung aufgetreten ist.  
  
-   Keine weiteren Daten. Der Anbieter kann Aufrufen der <xref:System.IObserver%601.OnCompleted%2A?displayProperty=nameWithType> Methode, um dem Beobachter zu benachrichtigen, dass er mit dem Senden von Benachrichtigungen abgeschlossen hat.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht das Entwurfsmuster "Beobachter". Definiert eine `Location` -Klasse, Informationen zu Breiten- und Längenkoordinaten enthält.  
  
 [!code-csharp[System.IObserver.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#5)]
 [!code-vb[System.IObserver.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#5)]  
  
 Die `LocationTracker` -Klasse stellt die <xref:System.IObservable%601> Implementierung. Die `TrackLocation` -Methode übergeben eine auf NULL festlegbare `Location` -Objekt, das die Daten für Breiten- und Längenkoordinaten enthält. Wenn die `Location` Wert ist kein `null`, `TrackLocation` Methodenaufrufe der <xref:System.IObserver%601.OnNext%2A> -Methode jedes Beobachters.  
  
 [!code-csharp[System.IObserver.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#6)]
 [!code-vb[System.IObserver.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#6)]  
  
 Wenn die `Location` Wert `null`, `TrackLocation` Methode instanziiert ein `LocationUnknownException` -Objekt, das im folgenden Beispiel gezeigt wird. Es ruft dann jedes Beobachters <xref:System.IObserver%601.OnError%2A> Methode und übergibt es die `LocationUnknownException` Objekt. Beachten Sie, dass `LocationUnknownException` leitet sich von <xref:System.Exception>, aber keine neue Member hinzugefügt wird.  
  
 [!code-csharp[System.IObserver.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#7)]
 [!code-vb[System.IObserver.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#7)]  
  
 Beobachter registrieren sich für die Benachrichtigungen aus einer `TrackLocation` -Objekt durch Aufrufen der <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType> -Methode, die einen Verweis auf das Observer-Objekt, einen privaten generischen weist <xref:System.Collections.Generic.List%601> Objekt. Die Methode gibt ein `Unsubscriber` -Objekt, das ist ein <xref:System.IDisposable> -Implementierung, die Beobachter den Empfang von Benachrichtigungen beenden kann. Die `LocationTracker` -Klasse enthält auch eine `EndTransmission` Methode. Wenn keine weiteren Daten verfügbar ist, ruft die-Methode jedes Beobachters <xref:System.IObserver%601.OnCompleted%2A> Methode und löscht dann die interne Liste der Beobachter.  
  
 In diesem Beispiel die `LocationReporter` -Klasse stellt die <xref:System.IObserver%601> Implementierung. Es zeigt Informationen zu den aktuellen Speicherort, an die Konsole. Der Konstruktor schließt eine `name` -Parameter, der ermöglicht die `LocationReporter` Instanz sich in die Zeichenfolgenausgabe identifiziert. Es enthält auch eine `Subscribe` -Methode, die einen Aufruf des Anbieters umschließt <xref:System.IObservable%601.Subscribe%2A> Methode. Dadurch wird die Methode, weisen Sie den zurückgegebenen <xref:System.IDisposable> Verweis auf eine private Variable. Die `LocationReporter` -Klasse enthält auch eine `Unsubscribe` -Methode, die Aufrufe der <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> -Methode des Objekts, die von zurückgegeben wird die <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType> Methode. Der folgende Code definiert die `LocationReporter` Klasse.  
  
 [!code-csharp[System.IObserver.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/observer.cs#8)]
 [!code-vb[System.IObserver.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/observer.vb#8)]  
  
 Klicken Sie dann instanziiert der folgende Code, den Anbieter und der Beobachter.  
  
 [!code-csharp[System.IObserver.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/program.cs#9)]
 [!code-vb[System.IObserver.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/module1.vb#9)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IObserver`1" />
    <related type="Article" href="https://msdn.microsoft.com/library/3680171f-f522-453c-aa4a-54f755a78f88">Das Entwurfsmuster "Beobachter"</related>
  </Docs>
  <Members>
    <Member MemberName="Subscribe">
      <MemberSignature Language="C#" Value="public IDisposable Subscribe (IObserver&lt;out T&gt; observer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IDisposable Subscribe(class System.IObserver`1&lt;!T&gt; observer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IObservable`1.Subscribe(System.IObserver{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Subscribe (observer As IObserver(Of Out T)) As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IDisposable ^ Subscribe(IObserver&lt;T&gt; ^ observer);" />
      <MemberSignature Language="F#" Value="abstract member Subscribe : IObserver&lt;'T&gt; -&gt; IDisposable" Usage="iObservable.Subscribe observer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="observer" Type="System.IObserver&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="observer">Das Objekt, das Benachrichtigungen empfangen soll.</param>
        <summary>Benachrichtigt den Anbieter, dass ein Beobachter Benachrichtigungen empfangen soll.</summary>
        <returns>Ein Verweis auf eine Schnittstelle, mit der Beobachter den Empfang von Benachrichtigungen beenden können, bevor der Anbieter das Absenden der Benachrichtigungen abgeschlossen hat.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.IObservable%601.Subscribe%2A> Methode aufgerufen werden, um einen Beobachter für Pushbenachrichtigungen registrieren. Eine typische Implementierung der <xref:System.IObservable%601.Subscribe%2A> Methode bewirkt Folgendes:  
  
-   Sie speichert einen Verweis auf den Beobachter in einem Auflistungsobjekt, z. B. eine <xref:System.Collections.Generic.List%601> Objekt.  
  
-   Es gibt einen Verweis auf ein <xref:System.IDisposable> Schnittstelle. Auf diese Weise können die Beobachter Kündigen des Abonnements (d. h. den Empfang von Benachrichtigungen beenden), bevor der Anbieter hat Versand einstellt und dem Namen des Abonnenten <xref:System.IObserver%601.OnCompleted%2A> Methode.  
  
 Zu jedem beliebigen Zeitpunkt, einer bestimmten Instanz einer <xref:System.IObservable%601> Implementierung ist zuständig für das Behandeln aller Abonnements, und benachrichtigen alle Abonnenten. Es sei denn, die Dokumentation für einen bestimmten <xref:System.IObservable%601> Implementierung gibt hingegen an Beobachter sollte keine Annahmen über die <xref:System.IObservable%601> Implementierung, wie z. B. die Reihenfolge der Benachrichtigungen, die mehrere Beobachter erhalten sollen.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die <xref:System.IObservable%601.Subscribe%2A> -Methode für eine Anwendung, die Breiten-und Längengraddaten meldet. Definiert eine <xref:System.Collections.Generic.IList%601> Auflistungsobjekt, das Verweise auf alle Beobachter speichert. Es gibt auch eine private Klasse mit dem Namen `Unsubscriber` , implementiert die <xref:System.IDisposable> Schnittstelle und ermöglicht es Abonnenten den Empfang von ereignisbenachrichtigungen beenden.  Finden Sie im Abschnitt "Beispiel" von der <xref:System.IObservable%601> Thema, das vollständige Beispiel.  
  
 [!code-csharp[System.IObserver.Class#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#13)]
 [!code-vb[System.IObserver.Class#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#13)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IObserver`1" />
      </Docs>
    </Member>
  </Members>
</Type>
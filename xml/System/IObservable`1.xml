<Type Name="IObservable&lt;T&gt;" FullName="System.IObservable&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="964e4f535ee713e26af76869be78e21c9f3aa4c8" /><Meta Name="ms.sourcegitcommit" Value="397961a0164281b579f68064c3bb66c071f374d9" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/14/2020" /><Meta Name="ms.locfileid" Value="86326796" /></Metadata><TypeSignature Language="C#" Value="public interface IObservable&lt;out T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IObservable`1&lt;+ T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IObservable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IObservable(Of Out T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IObservable" />
  <TypeSignature Language="F#" Value="type IObservable&lt;'T&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">Das Objekt, das Benachrichtigungsinformationen bereitstellt.</typeparam>
    <summary>Definiert einen Anbieter für Pushbenachrichtigungen.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.IObserver%601> -Schnittstelle und die <xref:System.IObservable%601> -Schnittstelle stellen einen generalisierten Mechanismus für Pushbenachrichtigungen bereit, der auch als Beobachter-Entwurfsmuster bezeichnet wird. Die- <xref:System.IObservable%601> Schnittstelle stellt die Klasse dar, die Benachrichtigungen (den Anbieter) sendet. die- <xref:System.IObserver%601> Schnittstelle stellt die Klasse dar, die Sie empfängt (der Beobachter). `T`stellt die Klasse dar, die die Benachrichtigungs Informationen bereitstellt. Bei einigen Push-basierten Benachrichtigungen kann die <xref:System.IObserver%601> Implementierung und `T` den gleichen Typ darstellen.  
  
 Der Anbieter muss eine einzelne Methode implementieren, <xref:System.IObservable%601.Subscribe%2A> , die angibt, dass ein Beobachter Pushbenachrichtigungen empfangen möchte. Aufrufer zur Methode übergeben eine Instanz des Observer. Die-Methode gibt eine-Implementierung zurück, mit der <xref:System.IDisposable> Beobachter Benachrichtigungen jederzeit abbrechen können, bevor Sie von dem Anbieter nicht mehr gesendet werden.  
  
 Ein bestimmter Anbieter kann zu einem beliebigen Zeitpunkt über NULL, einen oder mehrere Beobachter verfügen. Der Anbieter ist dafür verantwortlich, Verweise auf Beobachter zu speichern und sicherzustellen, dass Sie gültig sind, bevor Benachrichtigungen gesendet werden. Die <xref:System.IObservable%601> Schnittstelle nimmt keine Annahmen über die Anzahl von Beobachtern oder die Reihenfolge an, in der Benachrichtigungen gesendet werden.  
  
 Der Anbieter sendet die folgenden drei Arten von Benachrichtigungen durch Aufrufen von Methoden an den Beobachter <xref:System.IObserver%601> :  
  
-   Die aktuellen Daten. Der Anbieter kann die- <xref:System.IObserver%601.OnNext%2A?displayProperty=nameWithType> Methode aufgerufen werden, um dem Beobachter ein-Objekt zu übergeben, `T` das über aktuelle Daten, geänderte Daten oder neue Daten verfügt.  
  
-   Ein Fehlerzustand. Der Anbieter kann die- <xref:System.IObserver%601.OnError%2A?displayProperty=nameWithType> Methode aufzurufen, um den Beobachter zu benachrichtigen, dass eine Fehlerbedingung aufgetreten ist.  
  
-   Keine weiteren Daten. Der Anbieter kann die- <xref:System.IObserver%601.OnCompleted%2A?displayProperty=nameWithType> Methode zum Benachrichtigen des Beobachters auffordern, dass er das Senden von Benachrichtigungen abgeschlossen hat.  
  
   
  
## Examples  
 Im folgenden Beispiel wird das Observer-Entwurfsmuster veranschaulicht. Es definiert eine `Location` Klasse, die Informationen zu breiten-und Längengrad enthält.  
  
 [!code-csharp[System.IObserver.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#5)]
 [!code-vb[System.IObserver.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#5)]  
  
 Die- `LocationTracker` Klasse stellt die- <xref:System.IObservable%601> Implementierung bereit. An die zugehörige- `TrackLocation` Methode wird ein `Location` Objekt, das NULL-Werte zulässt, mit den breiten-und Längengrad Daten Wenn der `Location` Wert nicht ist `null` , ruft die- `TrackLocation` Methode die- <xref:System.IObserver%601.OnNext%2A> Methode jedes Beobachters auf.  
  
 [!code-csharp[System.IObserver.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#6)]
 [!code-vb[System.IObserver.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#6)]  
  
 Wenn der `Location` Wert ist `null` , `TrackLocation` instanziiert die-Methode ein- `LocationUnknownException` Objekt, das im folgenden Beispiel gezeigt wird. Anschließend wird die-Methode jedes Beobachters aufgerufen und an das-Objekt weitergeleitet <xref:System.IObserver%601.OnError%2A> `LocationUnknownException` . Beachten Sie, dass `LocationUnknownException` von abgeleitet <xref:System.Exception> ist, aber keine neuen Elemente hinzufügt.  
  
 [!code-csharp[System.IObserver.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#7)]
 [!code-vb[System.IObserver.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#7)]  
  
 Beobachter registrieren sich für den Empfang von Benachrichtigungen von einem- `TrackLocation` Objekt durch Aufrufen der zugehörigen- <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType> Methode, die einem privaten generischen-Objekt einen Verweis auf das Observer-Objekt zuweist <xref:System.Collections.Generic.List%601> . Die Methode gibt ein- `Unsubscriber` Objekt zurück. Hierbei handelt es sich um eine-Implementierung, mit der <xref:System.IDisposable> Beobachter den Empfang von Benachrichtigungen beenden Die- `LocationTracker` Klasse enthält auch eine- `EndTransmission` Methode. Wenn keine weiteren Standortdaten verfügbar sind, ruft die-Methode die-Methode jedes Beobachters <xref:System.IObserver%601.OnCompleted%2A> auf und löscht dann die interne Liste der Beobachter.  
  
 In diesem Beispiel stellt die- `LocationReporter` Klasse die- <xref:System.IObserver%601> Implementierung bereit. Er zeigt Informationen zum aktuellen Speicherort der Konsole an. Der zugehörige Konstruktor enthält einen- `name` Parameter, der es der-Instanz ermöglicht, `LocationReporter` sich selbst in der Zeichen folgen Ausgabe zu identifizieren. Sie enthält auch eine- `Subscribe` Methode, die einen-Rückruf für die-Methode des Anbieters umschließt <xref:System.IObservable%601.Subscribe%2A> . Dadurch kann die-Methode den zurückgegebenen <xref:System.IDisposable> Verweis einer privaten Variablen zuweisen. Die- `LocationReporter` Klasse enthält auch eine- `Unsubscribe` Methode, die die- <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> Methode des-Objekts aufruft, das von der-Methode zurückgegeben wird <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType> . Der folgende Code definiert die- `LocationReporter` Klasse.  
  
 [!code-csharp[System.IObserver.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/observer.cs#8)]
 [!code-vb[System.IObserver.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/observer.vb#8)]  
  
 Der folgende Code instanziiert dann den Anbieter und den Beobachter.  
  
 [!code-csharp[System.IObserver.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/program.cs#9)]
 [!code-vb[System.IObserver.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/module1.vb#9)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IObserver`1" />
    <related type="Article" href="/dotnet/standard/events/observer-design-pattern">Das Observer-Entwurfsmuster</related>
  </Docs>
  <Members>
    <Member MemberName="Subscribe">
      <MemberSignature Language="C#" Value="public IDisposable Subscribe (IObserver&lt;out T&gt; observer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IDisposable Subscribe(class System.IObserver`1&lt;!T&gt; observer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IObservable`1.Subscribe(System.IObserver{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Subscribe (observer As IObserver(Of Out T)) As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IDisposable ^ Subscribe(IObserver&lt;T&gt; ^ observer);" />
      <MemberSignature Language="F#" Value="abstract member Subscribe : IObserver&lt;'T&gt; -&gt; IDisposable" Usage="iObservable.Subscribe observer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="observer" Type="System.IObserver&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="observer">Das Objekt, das Benachrichtigungen zu empfangen hat.</param>
        <summary>Benachrichtigt den Anbieter, dass ein Beobachter Benachrichtigungen zu empfangen hat.</summary>
        <returns>Ein Verweis auf eine Schnittstelle, über die Beobachter den Empfang von Benachrichtigungen beenden können, bevor der Anbieter deren Versand einstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die- <xref:System.IObservable%601.Subscribe%2A> Methode muss aufgerufen werden, um einen Beobachter für Pushbenachrichtigungen zu registrieren. Eine typische Implementierung der- <xref:System.IObservable%601.Subscribe%2A> Methode führt Folgendes aus:  
  
-   Es speichert einen Verweis auf den Observer in einem Auflistungs Objekt, z <xref:System.Collections.Generic.List%601> . b. ein-Objekt.  
  
-   Es gibt einen Verweis auf eine- <xref:System.IDisposable> Schnittstelle zurück. Dies ermöglicht Observer, das Abonnement zu kündigen (d. h., um den Empfang von Benachrichtigungen zu beenden), bevor der Anbieter das Senden und das Aufrufen der-Methode des Abonnenten abgeschlossen hat <xref:System.IObserver%601.OnCompleted%2A>  
  
 Zu jedem beliebigen Zeitpunkt ist eine bestimmte Instanz einer <xref:System.IObservable%601> Implementierung für die Verarbeitung aller Abonnements und die Benachrichtigung aller Abonnenten zuständig. Wenn die Dokumentation für eine bestimmte <xref:System.IObservable%601> Implementierung nicht anders anzeigt, sollten Beobachter keine Annahmen über die <xref:System.IObservable%601> Implementierung treffen, z. b. die Reihenfolge der Benachrichtigungen, die von mehreren Beobachtern empfangen werden.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.IObservable%601.Subscribe%2A> -Methode für eine Anwendung veranschaulicht, die Informationen zu breiten-und Längengrad meldet. Es definiert ein Auflistungs <xref:System.Collections.Generic.IList%601> Objekt, das Verweise auf alle Beobachter speichert. Außerdem wird eine private Klasse mit dem Namen zurückgegeben `Unsubscriber` , die die <xref:System.IDisposable> -Schnittstelle implementiert und es Abonnenten ermöglicht, den Empfang von Ereignis Benachrichtigungen anzuhalten  Das komplette Beispiel finden Sie im Beispiel Abschnitt des <xref:System.IObservable%601> Themas.  
  
 [!code-csharp[System.IObserver.Class#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#13)]
 [!code-vb[System.IObserver.Class#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#13)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IObserver`1" />
      </Docs>
    </Member>
  </Members>
</Type>

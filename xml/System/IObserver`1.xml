<Type Name="IObserver&lt;T&gt;" FullName="System.IObserver&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8ca9b792aac63db0a6049b5c039f3559c547183d" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75172790" /></Metadata><TypeSignature Language="C#" Value="public interface IObserver&lt;in T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IObserver`1&lt;- T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IObserver`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IObserver(Of In T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IObserver" />
  <TypeSignature Language="F#" Value="type IObserver&lt;'T&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">Das Objekt, das Benachrichtigungsinformationen bereitstellt.</typeparam>
    <summary>Stellt einen Mechanismus für den Empfang von Pushbenachrichtigungen bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.IObserver%601>-und <xref:System.IObservable%601> Schnittstellen stellen einen generalisierten Mechanismus für Pushbasierte Benachrichtigungen bereit, der auch als Beobachter-Entwurfsmuster bezeichnet wird. Die <xref:System.IObservable%601>-Schnittstelle stellt die Klasse dar, die Benachrichtigungen sendet (der Anbieter). die <xref:System.IObserver%601>-Schnittstelle stellt die Klasse dar, die Sie empfängt (der Beobachter). `T` stellt die Klasse dar, die die Benachrichtigungs Informationen bereitstellt.  
  
 Eine <xref:System.IObserver%601>-Implementierung ordnet an, Benachrichtigungen von einem Anbieter (einer <xref:System.IObservable%601> Implementierung) zu empfangen, indem eine Instanz von sich selbst an die <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType>-Methode des Anbieters übergeben wird. Diese Methode gibt ein <xref:System.IDisposable> Objekt zurück, das verwendet werden kann, um den Observer abzubestellen, bevor der Anbieter das Senden von Benachrichtigungen abschließt.  
  
 Die <xref:System.IObserver%601>-Schnittstelle definiert die folgenden drei Methoden, die der Beobachter implementieren muss:  
  
-   Die <xref:System.IObserver%601.OnNext%2A>-Methode, die in der Regel vom Anbieter aufgerufen wird, um dem Beobachter neue Daten oder Zustandsinformationen bereitzustellen.  
  
-   Die <xref:System.IObserver%601.OnError%2A>-Methode, die in der Regel vom Anbieter aufgerufen wird, um anzugeben, dass Daten nicht verfügbar, nicht zugänglich oder beschädigt sind oder dass für den Anbieter ein anderer Fehler aufgetreten ist.  
  
-   Die <xref:System.IObserver%601.OnCompleted%2A>-Methode, die in der Regel vom Anbieter aufgerufen wird, um anzugeben, dass das Senden von Benachrichtigungen an Beobachter abgeschlossen ist.  
  
   
  
## Examples  
 Im folgenden Beispiel wird das Observer-Entwurfsmuster veranschaulicht. Es definiert eine `Location` Klasse, die Informationen zu breiten-und Längengrad enthält.  
  
 [!code-csharp[System.IObserver.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#5)]
 [!code-vb[System.IObserver.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#5)]  
  
 Die `LocationReporter`-Klasse stellt die <xref:System.IObserver%601>-Implementierung bereit. Er zeigt Informationen zum aktuellen Speicherort der Konsole an. Der zugehörige Konstruktor enthält einen `name`-Parameter, der es der `LocationReporter` Instanz ermöglicht, sich selbst in der Ausgabe der Zeichenfolge zu identifizieren. Sie enthält auch eine `Subscribe`-Methode, die einen aufzurufenden Rückruf für die <xref:System.IObservable%601.Subscribe%2A>-Methode des Anbieters einschließt. Dadurch kann die-Methode den zurückgegebenen <xref:System.IDisposable> Verweis einer privaten Variablen zuweisen. Die `LocationReporter`-Klasse enthält auch eine `Unsubscribe`-Methode, die die <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>-Methode des-Objekts aufruft, das von der <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType>-Methode zurückgegeben wird. Im folgenden Code wird die `LocationReporter`-Klasse definiert.  
  
 [!code-csharp[System.IObserver.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/observer.cs#8)]
 [!code-vb[System.IObserver.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/observer.vb#8)]  
  
 Die `LocationTracker`-Klasse stellt die <xref:System.IObservable%601>-Implementierung bereit. Der `TrackLocation`-Methode wird ein `Location` Objekt, das NULL-Werte zulässt, an das Objekt mit den breiten-und Längengraden geleitet. Wenn der `Location` Wert nicht `null`ist, ruft die `TrackLocation`-Methode die <xref:System.IObserver%601.OnNext%2A>-Methode jedes Beobachters auf.  
  
 [!code-csharp[System.IObserver.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#6)]
 [!code-vb[System.IObserver.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#6)]  
  
 Wenn der `Location` Wert `null`ist, instanziiert die `TrackLocation`-Methode ein `LocationNotFoundException` Objekt, das im folgenden Beispiel gezeigt wird. Anschließend wird die <xref:System.IObserver%601.OnError%2A>-Methode jedes Beobachters aufgerufen und das `LocationNotFoundException`-Objekt übergibt. Beachten Sie, dass `LocationNotFoundException` von <xref:System.Exception> abgeleitet ist, aber keine neuen Elemente hinzufügt.  
  
 [!code-csharp[System.IObserver.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#7)]
 [!code-vb[System.IObserver.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#7)]  
  
 Beobachter registrieren sich für den Empfang von Benachrichtigungen von einem `TrackLocation` Objekt durch Aufrufen seiner <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType>-Methode, die einem privaten generischen <xref:System.Collections.Generic.List%601>-Objekt einen Verweis auf das Observer-Objekt zuweist. Die Methode gibt ein `Unsubscriber` Objekt zurück. Hierbei handelt es sich um eine <xref:System.IDisposable>-Implementierung, mit der Beobachter den Empfang von Benachrichtigungen beenden können. Die `LocationTracker`-Klasse enthält auch eine `EndTransmission`-Methode. Wenn keine weiteren Speicherort Daten verfügbar sind, ruft die Methode die <xref:System.IObserver%601.OnCompleted%2A> Methode jedes Observer auf und löscht dann die interne Liste der Beobachter.  
  
 Der folgende Code instanziiert dann den Anbieter und den Beobachter.  
  
 [!code-csharp[System.IObserver.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/program.cs#9)]
 [!code-vb[System.IObserver.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/module1.vb#9)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IObservable`1" />
  </Docs>
  <Members>
    <Member MemberName="OnCompleted">
      <MemberSignature Language="C#" Value="public void OnCompleted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnCompleted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IObserver`1.OnCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnCompleted ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnCompleted();" />
      <MemberSignature Language="F#" Value="abstract member OnCompleted : unit -&gt; unit" Usage="iObserver.OnCompleted " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Benachrichtigt den Beobachter, dass der Anbieter das Senden von Pushbenachrichtigungen abgeschlossen hat.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.IObserver%601.OnCompleted%2A>-Implementierung des Beobachters aufgerufen wird, kann die <xref:System.IObserver%601.OnCompleted%2A>-Methode optional die <xref:System.IDisposable.Dispose%2A>-Methode des <xref:System.IDisposable> Objekts aufrufen, das beim Aufrufen der <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType>-Methode an den Beobachter zurückgegeben wurde.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine Implementierung der <xref:System.IObserver%601.OnCompleted%2A>-Methode in einer breiten-/Längen Grad-nach Verfolgungs Anwendung bereitstellt. Die-Methode meldet einfach, dass keine weiteren Daten verfügbar sind, und ruft die <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>-Implementierung des Anbieters auf. Das komplette Beispiel finden Sie im Beispiel Abschnitt des <xref:System.IObserver%601> Themas.  
  
 [!code-csharp[System.IObserver.Class#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/observer.cs#11)]
 [!code-vb[System.IObserver.Class#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/observer.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnError">
      <MemberSignature Language="C#" Value="public void OnError (Exception error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnError(class System.Exception error) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IObserver`1.OnError(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnError (error As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnError(Exception ^ error);" />
      <MemberSignature Language="F#" Value="abstract member OnError : Exception -&gt; unit" Usage="iObserver.OnError error" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="error" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="error">Ein Objekt, das weitere Informationen zum Fehler enthält.</param>
        <summary>Benachrichtigt den Beobachter, dass beim Anbieter eine Fehlerbedingung aufgetreten ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obwohl `error` ein Objekt ist, das von <xref:System.Exception?displayProperty=nameWithType>abgeleitet ist, stellt es nicht notwendigerweise eine Ausnahme dar, die vom Anbieter ausgelöst wird. Sie kann auch eine Routine-oder erwartete Fehlerbedingung darstellen, z. b. fehlende oder nicht verfügbare Daten. Die <xref:System.IObserver%601.OnError%2A>-Methode sollte als Informations Meldung betrachtet werden, und der Anbieter sollte nicht erwarten, dass der Beobachter die Fehlerbehandlung bereitstellt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine Implementierung der <xref:System.IObserver%601.OnError%2A>-Methode in einer breiten-/Längen Grad-nach Verfolgungs Anwendung bereitstellt. Die-Methode meldet einfach, dass Daten derzeit nicht verfügbar sind. Das <xref:System.Exception>-Objekt, das an das Objekt übergeben wird, wird nicht als Parameter verwendet. Das komplette Beispiel finden Sie im Beispiel Abschnitt des <xref:System.IObserver%601> Themas.  
  
 [!code-csharp[System.IObserver.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/observer.cs#10)]
 [!code-vb[System.IObserver.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/observer.vb#10)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/c834760f-ddd4-417f-abb7-a059679d5b8c">Empfohlene Vorgehensweisen für Beobachterentwurfsmuster</related>
      </Docs>
    </Member>
    <Member MemberName="OnNext">
      <MemberSignature Language="C#" Value="public void OnNext (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnNext(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IObserver`1.OnNext(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnNext (value As T)" />
      <MemberSignature Language="F#" Value="abstract member OnNext : 'T -&gt; unit" Usage="iObserver.OnNext value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value">Die aktuellen Benachrichtigungsinformationen.</param>
        <summary>Stellt die neuen Daten für den Beobachter bereit.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nachdem ein Beobachter die <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType>-Methode eines Anbieters aufgerufen hat, ruft der Anbieter die <xref:System.IObserver%601.OnNext%2A> Methode des Observer auf, um Benachrichtigungen bereitzustellen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine Implementierung der <xref:System.IObserver%601.OnNext%2A>-Methode in einer breiten-/Längen Grad-nach Verfolgungs Anwendung bereitstellt. Das komplette Beispiel finden Sie im Beispiel Abschnitt des <xref:System.IObserver%601> Themas.  
  
 [!code-csharp[System.IObserver.Class#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/observer.cs#12)]
 [!code-vb[System.IObserver.Class#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/observer.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

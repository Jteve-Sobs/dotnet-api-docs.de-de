<Type Name="IObserver&lt;T&gt;" FullName="System.IObserver&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ea35d1fd6f86c6834e27af2684cc90c2e5b8fc8a" />
    <Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="09/22/2018" />
    <Meta Name="ms.locfileid" Value="46662492" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IObserver&lt;in T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IObserver`1&lt;- T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IObserver`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IObserver(Of In T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IObserver" />
  <TypeSignature Language="F#" Value="type IObserver&lt;'T&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">Das Objekt, das Benachrichtigungsinformationen bereitstellt.</typeparam>
    <summary>Stellt einen Mechanismus für den Empfang von Pushbenachrichtigungen bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.IObserver%601> und <xref:System.IObservable%601> Schnittstellen bieten einen generalisierten Mechanismus für Pushbenachrichtigungen, auch bekannt als das Entwurfsmuster "Beobachter". Die <xref:System.IObservable%601> Schnittstelle stellt die Klasse dar, das Benachrichtigungen (der Anbieter), sendet der <xref:System.IObserver%601> -Schnittstelle stellt die Klasse, die sie (der Beobachter) empfängt. `T` Stellt die Klasse, die die Benachrichtigungsinformationen bereitstellt.  
  
 Ein <xref:System.IObserver%601> Implementierung ordnet an, um Benachrichtigungen von einem Anbieter (eine <xref:System.IObservable%601> Implementierung) eine Instanz von sich selbst an des Anbieters übergeben <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType> Methode. Diese Methode gibt ein <xref:System.IDisposable> -Objekt, das verwendet werden kann, um den Beobachter, bevor der Anbieter kündigen abgeschlossen ist, Senden von Benachrichtigungen.  
  
 Die <xref:System.IObserver%601> Schnittstelle definiert die folgenden drei Methoden, die der Beobachter implementieren müssen:  
  
-   Die <xref:System.IObserver%601.OnNext%2A> -Methode, die in der Regel von einem Anbieter geben Sie den Beobachter neue Daten oder Zustände Informationen aufgerufen wird.  
  
-   Die <xref:System.IObserver%601.OnError%2A> -Methode, die in der Regel wird vom Anbieter aufgerufen, um anzugeben, dass Daten nicht verfügbar, nicht zugegriffen werden kann oder beschädigt ist, oder dass der Anbieter eine andere fehlerbedingung festgestellt hat.  
  
-   Die <xref:System.IObserver%601.OnCompleted%2A> -Methode, die in der Regel durch den Anbieter aus, um anzugeben, dass es abgeschlossen ist, Senden von Benachrichtigungen an Observer aufgerufen wird.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht das Entwurfsmuster "Beobachter". Definiert eine `Location` -Klasse, Informationen zu Breiten- und Längenkoordinaten enthält.  
  
 [!code-csharp[System.IObserver.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#5)]
 [!code-vb[System.IObserver.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#5)]  
  
 Die `LocationReporter` -Klasse stellt die <xref:System.IObserver%601> Implementierung. Es zeigt Informationen zu den aktuellen Speicherort, an die Konsole. Der Konstruktor enthält einen `name` Parameter, der ermöglicht die `LocationReporter` Instanz sich in die Zeichenfolgenausgabe identifiziert. Es enthält auch eine `Subscribe` -Methode, die einen Aufruf des Anbieters umschließt <xref:System.IObservable%601.Subscribe%2A> Methode. Dadurch können die Methode, weisen Sie den zurückgegebenen <xref:System.IDisposable> Verweis auf eine private Variable. Die `LocationReporter` -Klasse enthält auch eine `Unsubscribe` -Methode, die Aufrufe der <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> -Methode des Objekts vom die <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType> Methode. Der folgende Code definiert die `LocationReporter` Klasse.  
  
 [!code-csharp[System.IObserver.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/observer.cs#8)]
 [!code-vb[System.IObserver.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/observer.vb#8)]  
  
 Die `LocationTracker` -Klasse stellt die <xref:System.IObservable%601> Implementierung. Die `TrackLocation` -Methode übergeben eine auf NULL festlegbare `Location` -Objekt, das die Daten für Breiten- und Längenkoordinaten enthält. Wenn die `Location` Wert ist kein `null`, `TrackLocation` Methodenaufrufe der <xref:System.IObserver%601.OnNext%2A> -Methode jedes Beobachters.  
  
 [!code-csharp[System.IObserver.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#6)]
 [!code-vb[System.IObserver.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#6)]  
  
 Wenn die `Location` Wert `null`, `TrackLocation` Methode instanziiert ein `LocationNotFoundException` -Objekt, das im folgenden Beispiel gezeigt wird. Es ruft dann jedes Beobachters <xref:System.IObserver%601.OnError%2A> Methode und übergibt es die `LocationNotFoundException` Objekt. Beachten Sie, dass `LocationNotFoundException` leitet sich von <xref:System.Exception> aber keine neue Member hinzugefügt wird.  
  
 [!code-csharp[System.IObserver.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#7)]
 [!code-vb[System.IObserver.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#7)]  
  
 Beobachter registrieren sich für die Benachrichtigungen aus einer `TrackLocation` -Objekt durch Aufrufen der <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType> -Methode, die einen Verweis auf das Observer-Objekt, einen privaten generischen weist <xref:System.Collections.Generic.List%601> Objekt. Die Methode gibt ein `Unsubscriber` -Objekt, das ist ein <xref:System.IDisposable> -Implementierung, die Beobachter den Empfang von Benachrichtigungen beenden kann. Die `LocationTracker` -Klasse enthält auch eine `EndTransmission` Methode. Wenn keine weiteren Daten verfügbar ist, ruft die-Methode jedes Beobachters <xref:System.IObserver%601.OnCompleted%2A> Methode und löscht dann die interne Liste der Beobachter.  
  
 Klicken Sie dann instanziiert der folgende Code, den Anbieter und der Beobachter.  
  
 [!code-csharp[System.IObserver.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/program.cs#9)]
 [!code-vb[System.IObserver.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/module1.vb#9)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IObservable`1" />
  </Docs>
  <Members>
    <Member MemberName="OnCompleted">
      <MemberSignature Language="C#" Value="public void OnCompleted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnCompleted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IObserver`1.OnCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnCompleted ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnCompleted();" />
      <MemberSignature Language="F#" Value="abstract member OnCompleted : unit -&gt; unit" Usage="iObserver.OnCompleted " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Benachrichtigt den Beobachter, dass der Anbieter das Senden von Pushbenachrichtigungen abgeschlossen hat.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn des Beobachters die <xref:System.IObserver%601.OnCompleted%2A> Implementierung aufgerufen wird, der <xref:System.IObserver%601.OnCompleted%2A> Methodenaufruf kann optional die <xref:System.IDisposable.Dispose%2A> -Methode der der <xref:System.IDisposable> -Objekt, das an den Beobachter zurückgegeben wurde, als diese aufgerufen der <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType> Methode.  
  
   
  
## Examples  
 Im folgende Beispiel stellt eine Implementierung der <xref:System.IObserver%601.OnCompleted%2A> -Methode in einen breiten-und Längengrad-Anwendung. Die Methode einfach meldet, dass keine weiteren Daten verfügbar sind und Aufrufe des Anbieters <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> Implementierung. Finden Sie im Abschnitt "Beispiel" von der <xref:System.IObserver%601> Thema, das vollständige Beispiel.  
  
 [!code-csharp[System.IObserver.Class#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/observer.cs#11)]
 [!code-vb[System.IObserver.Class#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/observer.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnError">
      <MemberSignature Language="C#" Value="public void OnError (Exception error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnError(class System.Exception error) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IObserver`1.OnError(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnError (error As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnError(Exception ^ error);" />
      <MemberSignature Language="F#" Value="abstract member OnError : Exception -&gt; unit" Usage="iObserver.OnError error" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="error" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="error">Ein Objekt, das weitere Informationen zum Fehler enthält.</param>
        <summary>Benachrichtigt den Beobachter, dass beim Anbieter eine Fehlerbedingung aufgetreten ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obwohl `error` ist ein Objekt, das von abgeleitet ist <xref:System.Exception?displayProperty=nameWithType>, es ist nicht notwendigerweise eine Ausnahme, die vom Anbieter ausgelöst wird. Sie können auch ein Routine- oder erwarteten Fehler, z. B. Daten darstellen, das fehlt oder ist nicht verfügbar ist. Die <xref:System.IObserver%601.OnError%2A> Methode dient ausschließlich zu Informationszwecken angezeigt werden sollte, und der Anbieter zu erwarten nicht, den Beobachter Fehlerbehandlung bereitstellen.  
  
   
  
## Examples  
 Im folgende Beispiel stellt eine Implementierung der <xref:System.IObserver%601.OnError%2A> -Methode in einen breiten-und Längengrad-Anwendung. Die Methode gibt einfach, dass die Daten aktuell nicht verfügbar sind; Es macht nicht verwenden, der die <xref:System.Exception> Objekt als Parameter übergeben. Finden Sie im Abschnitt "Beispiel" von der <xref:System.IObserver%601> Thema, das vollständige Beispiel.  
  
 [!code-csharp[System.IObserver.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/observer.cs#10)]
 [!code-vb[System.IObserver.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/observer.vb#10)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/c834760f-ddd4-417f-abb7-a059679d5b8c">Empfohlene Vorgehensweisen für Beobachterentwurfsmuster</related>
      </Docs>
    </Member>
    <Member MemberName="OnNext">
      <MemberSignature Language="C#" Value="public void OnNext (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnNext(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IObserver`1.OnNext(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnNext (value As T)" />
      <MemberSignature Language="F#" Value="abstract member OnNext : 'T -&gt; unit" Usage="iObserver.OnNext value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value">Die aktuellen Benachrichtigungsinformationen.</param>
        <summary>Stellt die neuen Daten für den Beobachter bereit.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nachdem ein Beobachter eines Anbieters aufgerufen hat <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType> Methodenaufrufe, der Anbieter des Beobachters die <xref:System.IObserver%601.OnNext%2A> Methode, um Benachrichtigungen zu senden.  
  
   
  
## Examples  
 Im folgende Beispiel stellt eine Implementierung der <xref:System.IObserver%601.OnNext%2A> -Methode in einen breiten-und Längengrad-Anwendung. Finden Sie im Abschnitt "Beispiel" von der <xref:System.IObserver%601> Thema, das vollständige Beispiel.  
  
 [!code-csharp[System.IObserver.Class#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/observer.cs#12)]
 [!code-vb[System.IObserver.Class#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/observer.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
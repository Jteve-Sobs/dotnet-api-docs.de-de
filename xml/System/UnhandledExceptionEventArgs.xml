<Type Name="UnhandledExceptionEventArgs" FullName="System.UnhandledExceptionEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2d76b7f9fe64b2be28255a71c40792392806a8e1" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86686311" /></Metadata><TypeSignature Language="C#" Value="public class UnhandledExceptionEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UnhandledExceptionEventArgs extends System.EventArgs" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.UnhandledExceptionEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class UnhandledExceptionEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class UnhandledExceptionEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type UnhandledExceptionEventArgs = class&#xA;    inherit EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit UnhandledExceptionEventArgs extends System.EventArgs" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Serializable]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Serializable&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="dcdda-101">Stellt Daten für das Ereignis bereit, das ausgelöst wird, wenn eine Ausnahme von keiner Anwendungsdomäne behandelt wird.</span><span class="sxs-lookup"><span data-stu-id="dcdda-101">Provides data for the event that is raised when there is an exception that is not handled in any application domain.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dcdda-102"><xref:System.UnhandledExceptionEventArgs> bietet Zugriff auf das Ausnahme Objekt und ein Flag, das angibt, ob die Common Language Runtime beendet wird.</span><span class="sxs-lookup"><span data-stu-id="dcdda-102"><xref:System.UnhandledExceptionEventArgs> provides access to the exception object and a flag indicating whether the common language runtime is terminating.</span></span> <span data-ttu-id="dcdda-103">Der <xref:System.UnhandledExceptionEventArgs> ist einer der Parameter, die <xref:System.UnhandledExceptionEventHandler> an für das-Ereignis übermittelt werden <xref:System.AppDomain.UnhandledException?displayProperty=nameWithType> .</span><span class="sxs-lookup"><span data-stu-id="dcdda-103">The <xref:System.UnhandledExceptionEventArgs> is one of the parameters passed into <xref:System.UnhandledExceptionEventHandler> for the <xref:System.AppDomain.UnhandledException?displayProperty=nameWithType> event.</span></span>  
  
 <span data-ttu-id="dcdda-104">Weitere Informationen zu Ereignishandlerdelegaten finden Sie unter [behandeln und Auswerfen von Ereignissen](/dotnet/standard/events/).</span><span class="sxs-lookup"><span data-stu-id="dcdda-104">For more information about event handler delegates, see [Handling and Raising Events](/dotnet/standard/events/).</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="E:System.AppDomain.UnhandledException" />
    <altmember cref="T:System.UnhandledExceptionEventHandler" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UnhandledExceptionEventArgs (object exception, bool isTerminating);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object exception, bool isTerminating) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (exception As Object, isTerminating As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UnhandledExceptionEventArgs(System::Object ^ exception, bool isTerminating);" />
      <MemberSignature Language="F#" Value="new UnhandledExceptionEventArgs : obj * bool -&gt; UnhandledExceptionEventArgs" Usage="new System.UnhandledExceptionEventArgs (exception, isTerminating)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="exception" Type="System.Object" />
        <Parameter Name="isTerminating" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="exception"><span data-ttu-id="dcdda-105">Die nicht behandelte Ausnahme.</span><span class="sxs-lookup"><span data-stu-id="dcdda-105">The exception that is not handled.</span></span></param>
        <param name="isTerminating"><span data-ttu-id="dcdda-106"><see langword="true" />, wenn die Laufzeit beendet wird, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="dcdda-106"><see langword="true" /> if the runtime is terminating; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="dcdda-107">Initialisiert eine neue Instanz der <see cref="T:System.UnhandledExceptionEventArgs" />-Klasse mit dem Ausnahmeobjekt und einem Common Language Runtime-Beendigungsflag.</span><span class="sxs-lookup"><span data-stu-id="dcdda-107">Initializes a new instance of the <see cref="T:System.UnhandledExceptionEventArgs" /> class with the exception object and a common language runtime termination flag.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExceptionObject">
      <MemberSignature Language="C#" Value="public object ExceptionObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ExceptionObject" />
      <MemberSignature Language="DocId" Value="P:System.UnhandledExceptionEventArgs.ExceptionObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExceptionObject As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ExceptionObject { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExceptionObject : obj" Usage="System.UnhandledExceptionEventArgs.ExceptionObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="dcdda-108">Ruft das nicht behandelte Ausnahmeobjekt ab.</span><span class="sxs-lookup"><span data-stu-id="dcdda-108">Gets the unhandled exception object.</span></span></summary>
        <value><span data-ttu-id="dcdda-109">Das nicht behandelte Ausnahmeobjekt.</span><span class="sxs-lookup"><span data-stu-id="dcdda-109">The unhandled exception object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dcdda-110">Diese Eigenschaft gibt ein Objekt vom Typ <xref:System.Object> anstelle eines von abgeleiteten zurück <xref:System.Exception> .</span><span class="sxs-lookup"><span data-stu-id="dcdda-110">This property returns an object of type <xref:System.Object> rather than one derived from <xref:System.Exception>.</span></span> <span data-ttu-id="dcdda-111">Obwohl die Common Language Specification erfordert, dass alle Ausnahme Typen von abgeleitet <xref:System.Exception> werden, können Methoden Ausnahmen mit Objekten auslösen, die nicht von abgeleitet sind <xref:System.Exception> .</span><span class="sxs-lookup"><span data-stu-id="dcdda-111">Although the Common Language Specification requires that all exception types derive from <xref:System.Exception>, it is possible for methods to throw exceptions with objects not derived from <xref:System.Exception>.</span></span> <span data-ttu-id="dcdda-112">Sie können folgende Schritte ausführen, um mit dieser Ausnahme zu arbeiten:</span><span class="sxs-lookup"><span data-stu-id="dcdda-112">You can do the following to work with this exception:</span></span>  
  
-   <span data-ttu-id="dcdda-113">Wenden Sie das-  <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> Attribut mit dem <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows%2A?displayProperty=nameWithType> Wert `true` auf die Assembly an, die den Ereignishandler enthält.</span><span class="sxs-lookup"><span data-stu-id="dcdda-113">Apply the  <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> attribute with a <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows%2A?displayProperty=nameWithType> value of `true` to the assembly that contains the event handler.</span></span> <span data-ttu-id="dcdda-114">Dies umschließt alle Ausnahmen, die nicht von der- <xref:System.Exception> Klasse in einem-Objekt abgeleitet werden <xref:System.Runtime.CompilerServices.RuntimeWrappedException> .</span><span class="sxs-lookup"><span data-stu-id="dcdda-114">This wraps all exceptions not derived from the <xref:System.Exception> class in a <xref:System.Runtime.CompilerServices.RuntimeWrappedException> object.</span></span> <span data-ttu-id="dcdda-115">Sie können dann sicher umwandeln (in c#) oder (in Visual Basic) das von dieser Eigenschaft zurückgegebene Objekt in ein <xref:System.Exception> -Objekt umwandeln und das ursprüngliche Exception-Objekt aus der- <xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=nameWithType> Eigenschaft abrufen.</span><span class="sxs-lookup"><span data-stu-id="dcdda-115">You can then safely cast (in C#) or convert (in Visual Basic) the object returned by this property to an <xref:System.Exception> object, and retrieve the original exception object from the <xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="dcdda-116">Beachten Sie, dass einige Compiler, wie z. b. die c#-und Visual Basic Compiler, dieses Attribut automatisch anwenden.</span><span class="sxs-lookup"><span data-stu-id="dcdda-116">Note that some compilers, such as the C# and Visual Basic compilers, automatically apply this attribute.</span></span>  
  
-   <span data-ttu-id="dcdda-117">Wandelt das von dieser Eigenschaft zurückgegebene-Objekt in ein- <xref:System.Exception> Objekt um.</span><span class="sxs-lookup"><span data-stu-id="dcdda-117">Cast the object returned by this property to an <xref:System.Exception> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dcdda-118">Im folgenden Beispiel wird das- <xref:System.AppDomain.UnhandledException> Ereignis veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="dcdda-118">The following example demonstrates the <xref:System.AppDomain.UnhandledException> event.</span></span> <span data-ttu-id="dcdda-119">Er definiert einen Ereignishandler, `MyHandler` der aufgerufen wird, wenn in der Standard Anwendungsdomäne eine nicht behandelte Ausnahme ausgelöst wird.</span><span class="sxs-lookup"><span data-stu-id="dcdda-119">It defines an event handler, `MyHandler`, that is invoked whenever an unhandled exception is thrown in the default application domain.</span></span> <span data-ttu-id="dcdda-120">Anschließend werden zwei Ausnahmen ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="dcdda-120">It then throws two exceptions.</span></span> <span data-ttu-id="dcdda-121">Der erste wird von einem **try/catch-** Block behandelt.</span><span class="sxs-lookup"><span data-stu-id="dcdda-121">The first is handled by a **try/catch** block.</span></span> <span data-ttu-id="dcdda-122">Die zweite ist unbehandelt und ruft die `MyHandle` Routine auf, bevor die Anwendung beendet wird.</span><span class="sxs-lookup"><span data-stu-id="dcdda-122">The second is unhandled and invokes the `MyHandle` routine before the application terminates.</span></span>  
  
 [!code-cpp[AppDomain_UnhandledException#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_UnhandledException/CPP/unhandledexception.cpp#1)]
 [!code-csharp[AppDomain_UnhandledException#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_UnhandledException/CS/unhandledexception.cs#1)]
 [!code-vb[AppDomain_UnhandledException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_UnhandledException/VB/unhandledexception.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute" />
        <altmember cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" />
      </Docs>
    </Member>
    <Member MemberName="IsTerminating">
      <MemberSignature Language="C#" Value="public bool IsTerminating { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTerminating" />
      <MemberSignature Language="DocId" Value="P:System.UnhandledExceptionEventArgs.IsTerminating" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsTerminating As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsTerminating { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsTerminating : bool" Usage="System.UnhandledExceptionEventArgs.IsTerminating" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="dcdda-123">Gibt an, ob Common Language Runtime beendet wird.</span><span class="sxs-lookup"><span data-stu-id="dcdda-123">Indicates whether the common language runtime is terminating.</span></span></summary>
        <value><span data-ttu-id="dcdda-124"><see langword="true" />, wenn die Laufzeit beendet wird, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="dcdda-124"><see langword="true" /> if the runtime is terminating; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dcdda-125">Ab der .NET Framework Version 2,0 gibt diese Eigenschaft `true` für die meisten Ausnahme Fehler zurück, es sei denn, ein Anwendungskompatibilitäts-Flag wird verwendet, um das Verhalten der Versionen 1,0 und 1,1 wiederherzustellen.</span><span class="sxs-lookup"><span data-stu-id="dcdda-125">Beginning with the .NET Framework version 2.0, this property returns `true` for most unhandled exceptions, unless an application compatibility flag is used to revert to the behavior of versions 1.0 and 1.1.</span></span> <span data-ttu-id="dcdda-126">Der Grund hierfür ist, dass die meisten nicht behandelten Ausnahmen in Threads, einschließlich Threadpoolthreads, auf natürliche Weise fortgesetzt werden können. Dies führt normalerweise zu einer Beendigung der Anwendung.</span><span class="sxs-lookup"><span data-stu-id="dcdda-126">The reason is that most unhandled exceptions in threads, including thread pool threads, are allowed to proceed naturally, which normally results in termination of the application.</span></span> <span data-ttu-id="dcdda-127">Weitere Informationen, einschließlich einer Liste der Fälle, in denen die Laufzeit nicht beendet wird, finden Sie unter [Ausnahmen in verwalteten Threads](/dotnet/standard/threading/exceptions-in-managed-threads).</span><span class="sxs-lookup"><span data-stu-id="dcdda-127">For more information, including a list of cases in which the runtime does not terminate, see [Exceptions in Managed Threads](/dotnet/standard/threading/exceptions-in-managed-threads).</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="dcdda-128">Versionsinformationen</span><span class="sxs-lookup"><span data-stu-id="dcdda-128">Version Information</span></span>  
 <span data-ttu-id="dcdda-129">Folgendes gilt für die .NET Framework Versionen 1,0 und 1,1: Diese Eigenschaft gibt zurück `true` , wenn eine Ausnahme in einem Anwendungs Hauptthread empfangen, aber nicht von diesem behandelt wird.</span><span class="sxs-lookup"><span data-stu-id="dcdda-129">The following applies to the .NET Framework versions 1.0 and 1.1: This property returns `true` when an exception is received in, but not handled by, an application's main thread.</span></span> <span data-ttu-id="dcdda-130">Diese Eigenschaft gibt auch `true` dann zurück, wenn ein nicht verwalteter Thread verwalteten Code ausführt und eine nicht behandelte Ausnahme empfängt.</span><span class="sxs-lookup"><span data-stu-id="dcdda-130">This property also returns `true` if an unmanaged thread is executing managed code and receives an unhandled exception.</span></span> <span data-ttu-id="dcdda-131">Schließlich gibt diese Eigenschaft `false` für Thread Pool-Threads und verwaltete Threads zurück, die von einer Anwendung erstellt werden, da die Versionen 1,0 und 1,1 nicht behandelte Ausnahmen in solchen Threads abfangen und Sie ignorieren.</span><span class="sxs-lookup"><span data-stu-id="dcdda-131">Finally, this property returns `false` for thread pool threads and managed threads created by an application, because versions 1.0 and 1.1 catch unhandled exceptions in such threads and ignore them.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

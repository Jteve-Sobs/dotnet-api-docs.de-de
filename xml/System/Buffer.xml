<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Buffer.xml" source-language="en-US" target-language="de-DE">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac55e1d29e63ded4bec7a4b24dc14f7a73639dec8d5.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5e1d29e63ded4bec7a4b24dc14f7a73639dec8d5</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Buffer">
          <source>Manipulates arrays of primitive types.</source>
          <target state="translated">Verändert Arrays von primitiven Typen.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Buffer">
          <source><ph id="ph1">&lt;xref:System.Buffer&gt;</ph> only affects arrays of primitive types; this class does not apply to objects.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Buffer&gt;</ph> wirkt sich nur auf Arrays von primitiven Typen; Diese Klasse gilt nicht für Objekte.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Buffer">
          <source>Each primitive type is treated as a series of bytes without regard to any behavior or limitation associated with the primitive type.</source>
          <target state="translated">Als eine Reihe von Bytes, unabhängig von der alle Verhalten oder die Beschränkung der Grundtyp zugeordnet wird jedes primitiven Typs behandelt.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Buffer">
          <source><ph id="ph1">&lt;xref:System.Buffer&gt;</ph> provides methods to copy bytes from one array of primitive types to another array of primitive types, get a byte from an array, set a byte in an array, and obtain the length of an array.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Buffer&gt;</ph> Stellt Methoden zum Kopieren von Bytes aus einem Array von primitiven Typen in ein anderes Array von primitiven Typen ist einen Byte aus einem Array abrufen, einen Byte in einem Array festgelegt und die Länge eines Arrays zu erhalten.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Buffer">
          <source>This class provides better performance for manipulating primitive types than similar methods in the <ph id="ph1">&lt;xref:System.Array?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">Diese Klasse bietet eine bessere Leistung für die Bearbeitung von primitiven Typen als ähnliche Methoden in der <ph id="ph1">&lt;xref:System.Array?displayProperty=nameWithType&gt;</ph> Klasse.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Buffer">
          <source><ph id="ph1">&lt;xref:System.Buffer&gt;</ph> is applicable to the following primitive types: <ph id="ph2">&lt;xref:System.Boolean&gt;</ph>, <ph id="ph3">&lt;xref:System.Char&gt;</ph>, <ph id="ph4">&lt;xref:System.SByte&gt;</ph>, <ph id="ph5">&lt;xref:System.Byte&gt;</ph>, <ph id="ph6">&lt;xref:System.Int16&gt;</ph>, <ph id="ph7">&lt;xref:System.UInt16&gt;</ph>, <ph id="ph8">&lt;xref:System.Int32&gt;</ph>, <ph id="ph9">&lt;xref:System.UInt32&gt;</ph>, <ph id="ph10">&lt;xref:System.Int64&gt;</ph>, <ph id="ph11">&lt;xref:System.UInt64&gt;</ph>, <ph id="ph12">&lt;xref:System.IntPtr&gt;</ph>, <ph id="ph13">&lt;xref:System.UIntPtr&gt;</ph>, <ph id="ph14">&lt;xref:System.Single&gt;</ph>, and <ph id="ph15">&lt;xref:System.Double&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Buffer&gt;</ph> gilt für die folgenden primitiven Typen: <ph id="ph2">&lt;xref:System.Boolean&gt;</ph>, <ph id="ph3">&lt;xref:System.Char&gt;</ph>, <ph id="ph4">&lt;xref:System.SByte&gt;</ph>, <ph id="ph5">&lt;xref:System.Byte&gt;</ph>, <ph id="ph6">&lt;xref:System.Int16&gt;</ph>, <ph id="ph7">&lt;xref:System.UInt16&gt;</ph>, <ph id="ph8">&lt;xref:System.Int32&gt;</ph>, <ph id="ph9">&lt;xref:System.UInt32&gt;</ph>, <ph id="ph10">&lt;xref:System.Int64&gt;</ph>, <ph id="ph11">&lt;xref:System.UInt64&gt;</ph>, <ph id="ph12">&lt;xref:System.IntPtr&gt;</ph>, <ph id="ph13">&lt;xref:System.UIntPtr&gt;</ph>, <ph id="ph14">&lt;xref:System.Single&gt;</ph>, und <ph id="ph15">&lt;xref:System.Double&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Buffer">
          <source>The following code example illustrates the use of several <ph id="ph1">`Buffer`</ph> class methods.</source>
          <target state="translated">Das folgende Codebeispiel veranschaulicht die Verwendung mehrerer <ph id="ph1">`Buffer`</ph> -Klassenmethoden.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>The source buffer.</source>
          <target state="translated">Der Quellpuffer.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>The zero-based byte offset into <bpt id="p1">&lt;c&gt;</bpt>src<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der nullbasierte Byteoffset in <bpt id="p1">&lt;c&gt;</bpt>src<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>The destination buffer.</source>
          <target state="translated">Der Zielpuffer.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>The zero-based byte offset into <bpt id="p1">&lt;c&gt;</bpt>dst<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der nullbasierte Byteoffset in <bpt id="p1">&lt;c&gt;</bpt>dst<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>The number of bytes to copy.</source>
          <target state="translated">Die Anzahl der zu kopierenden Bytes.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>Copies a specified number of bytes from a source array starting at a particular offset to a destination array starting at a particular offset.</source>
          <target state="translated">Kopiert eine angegebene Anzahl von Bytes aus einem Quellarray in ein Zielarray, jeweils beginnend bei einem bestimmten Offset.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>This method copies <ph id="ph1">`count`</ph> bytes from <ph id="ph2">`src`</ph>, beginning at <ph id="ph3">`srcOffset`</ph>, to <ph id="ph4">`dst`</ph>, beginning at <ph id="ph5">`dstOffset`</ph>.</source>
          <target state="translated">Diese Methode kopiert <ph id="ph1">`count`</ph> Bytes vom <ph id="ph2">`src`</ph>, beginnend bei <ph id="ph3">`srcOffset`</ph>in <ph id="ph4">`dst`</ph>, beginnend bei <ph id="ph5">`dstOffset`</ph>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>Both <ph id="ph1">`srcOffset`</ph> and <ph id="ph2">`dstOffset`</ph> are zero-based; that is, the first byte in each buffer is at position 0, not position 1.</source>
          <target state="translated">Beide <ph id="ph1">`srcOffset`</ph> und <ph id="ph2">`dstOffset`</ph> sind nullbasiert, d. h. das erste Byte in den einzelnen Puffern ist an Position 0 nicht an der position 1.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Buffer.BlockCopy%2A&gt;</ph> method accesses the bytes in the <ph id="ph2">`src`</ph> parameter array using offsets into memory, not programming constructs such as indexes or upper and lower array bounds.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Buffer.BlockCopy%2A&gt;</ph> Methode greift auf die Bytes in der <ph id="ph2">`src`</ph> Parameterarray Offsets in den Arbeitsspeicher verwenden, nicht die Programmierkonstrukte, z. B. Indizes oder oberen und unteren Arraygrenzen.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>For example, if in the programming language of your application you declare an <ph id="ph1">&lt;xref:System.Int32&gt;</ph> array with a zero-based lower bound of -50, and then pass the array and an offset of 5 to the <ph id="ph2">&lt;xref:System.Buffer.BlockCopy%2A&gt;</ph> method, the first array element the method will access is the second element of the array, which is at index -49.</source>
          <target state="translated">Wenn in der Programmiersprache Ihrer Anwendung, die Sie deklarieren z. B. eine <ph id="ph1">&lt;xref:System.Int32&gt;</ph> array mit einer nullbasierten Untergrenze von-50, und übergeben Sie das Array und einen Offset von 5, um die <ph id="ph2">&lt;xref:System.Buffer.BlockCopy%2A&gt;</ph> -Methode, das erste Arrayelement auf die Methode greifen ist die zweite Element des Arrays, die am Index-49 ist.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>Furthermore, which byte of array element -49 is accessed first depends on the endianness of the computer that is executing your application.</source>
          <target state="translated">Darüber hinaus hängt erfolgt die Byte des Arrayelements-49 zuerst das Endianness des Computers, der die Anwendung ausgeführt wird.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>As its name suggests, the <ph id="ph1">&lt;xref:System.Buffer.BlockCopy%2A&gt;</ph> method copies a block of bytes as a whole, rather than copying one byte at a time.</source>
          <target state="translated">Wie der Name andeutet, die <ph id="ph1">&lt;xref:System.Buffer.BlockCopy%2A&gt;</ph> Methode kopiert einen Block von Bytes als Ganzes, anstatt jeweils ein Byte kopieren.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>Therefore, if <ph id="ph1">`src`</ph> and <ph id="ph2">`dst`</ph> reference the same array, and the range from <ph id="ph3">`srcOffset`</ph><ph id="ph4"> + </ph><ph id="ph5">`count`</ph> -1 overlaps the range from <ph id="ph6">`dstOffset`</ph><ph id="ph7"> + </ph><ph id="ph8">`count`</ph> - 1, the values of the overlapping bytes are not overwritten before they are copied to the destination.</source>
          <target state="translated">Aus diesem Grund Wenn <ph id="ph1">`src`</ph> und <ph id="ph2">`dst`</ph> verweisen desselben Arrays, und der Bereich von <ph id="ph3">`srcOffset`</ph> <ph id="ph4"> + </ph> <ph id="ph5">`count`</ph> -1 überschneidet sich mit einem Bereich von <ph id="ph6">`dstOffset`</ph> <ph id="ph7"> + </ph> <ph id="ph8">`count`</ph> - 1, die Werte der überlappender Bytes werden nicht überschrieben werden, bevor sie an das Ziel kopiert werden.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>In the following example, the values of bytes 0-16 in an array named <ph id="ph1">`arr`</ph> are copied to bytes 12-28.</source>
          <target state="translated">Im folgenden Beispiel die Werte der Bytes 0-16 in einem Array mit dem Namen <ph id="ph1">`arr`</ph> in Bytes 12-28 kopiert werden.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>Despite the overlapping range, the values of the source bytes are successfully copied.</source>
          <target state="translated">Trotz der überlappenden Bereichs werden die Werte der Quellbytes erfolgreich kopiert.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>In the following example, the values of bytes 12-28 in an array named <ph id="ph1">`arr`</ph> are copied to bytes 0-16.</source>
          <target state="translated">Im folgenden Beispiel die Werte der Bytes 12-28 in einem Array mit dem Namen <ph id="ph1">`arr`</ph> in Bytes 0-16 kopiert werden.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>Again, despite the overlapping range, the values of the source bytes are successfully copied.</source>
          <target state="translated">Trotz der überlappenden Bereichs werden die Werte der Quellbytes erneut erfolgreich kopiert.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>The following example copies regions of arrays by using the <ph id="ph1">&lt;xref:System.Buffer.BlockCopy%2A&gt;</ph> method.</source>
          <target state="translated">Im folgenden Beispiel werden die Bereiche von Arrays mithilfe der <ph id="ph1">&lt;xref:System.Buffer.BlockCopy%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>For each <ph id="ph1">&lt;xref:System.Buffer.BlockCopy%2A&gt;</ph> operation, it lists the source and destination arrays as both an array of values and as a sequence of bytes.</source>
          <target state="translated">Für jede <ph id="ph1">&lt;xref:System.Buffer.BlockCopy%2A&gt;</ph> Vorgang, führt es die Quell- und Zielarrays als ein Array von Werten und als eine Folge von Bytes.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>The example illustrates the importance of considering a system's endianness when working with the <ph id="ph1">&lt;xref:System.Buffer.BlockCopy%2A&gt;</ph> method: Because Windows systems are little-endian, the lower-order bytes of a primitive data type's value precede the higher-order bytes.</source>
          <target state="translated">Das Beispiel veranschaulicht die Wichtigkeit der Berücksichtigung eines Systems Endianness beim Arbeiten mit der <ph id="ph1">&lt;xref:System.Buffer.BlockCopy%2A&gt;</ph> Methode: Da Windows-Systeme little-Endian sind, die niederwertigen Bytes ein primitiver Datentyp Wert vorausgehen, die höherwertigen Bytes.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="src" /&gt;</ph> or <ph id="ph2">&lt;paramref name="dst" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="src" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="dst" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="src" /&gt;</ph> or <ph id="ph2">&lt;paramref name="dst" /&gt;</ph> is not an array of primitives.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="src" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="dst" /&gt;</ph> ist kein Array primitiver Datentypen.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- oder - </target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>The number of bytes in <ph id="ph1">&lt;paramref name="src" /&gt;</ph> is less than <ph id="ph2">&lt;paramref name="srcOffset" /&gt;</ph> plus <ph id="ph3">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">Die Anzahl der Bytes in <ph id="ph1">&lt;paramref name="src" /&gt;</ph> ist kleiner als <ph id="ph2">&lt;paramref name="srcOffset" /&gt;</ph> plus <ph id="ph3">&lt;paramref name="count" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- oder - </target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>The number of bytes in <ph id="ph1">&lt;paramref name="dst" /&gt;</ph> is less than <ph id="ph2">&lt;paramref name="dstOffset" /&gt;</ph> plus <ph id="ph3">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">Die Anzahl der Bytes in <ph id="ph1">&lt;paramref name="dst" /&gt;</ph> ist kleiner als <ph id="ph2">&lt;paramref name="dstOffset" /&gt;</ph> plus <ph id="ph3">&lt;paramref name="count" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="srcOffset" /&gt;</ph>, <ph id="ph2">&lt;paramref name="dstOffset" /&gt;</ph>, or <ph id="ph3">&lt;paramref name="count" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="srcOffset" /&gt;</ph>, <ph id="ph2">&lt;paramref name="dstOffset" /&gt;</ph> oder <ph id="ph3">&lt;paramref name="count" /&gt;</ph> ist kleiner als 0 (null).</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Buffer.ByteLength(System.Array)">
          <source>An array.</source>
          <target state="translated">Ein Array.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Buffer.ByteLength(System.Array)">
          <source>Returns the number of bytes in the specified array.</source>
          <target state="translated">Gibt die Anzahl der Bytes im angegebenen Array zurück.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Buffer.ByteLength(System.Array)">
          <source>The number of bytes in the array.</source>
          <target state="translated">Die Anzahl der Bytes im Array.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.ByteLength(System.Array)">
          <source>The following code example illustrates the use of the <ph id="ph1">`ByteLength`</ph> method to return the number of bytes in an array.</source>
          <target state="translated">Das folgende Codebeispiel veranschaulicht die Verwendung von der <ph id="ph1">`ByteLength`</ph> Methode, um die Anzahl der Bytes in einem Array zurückzugeben.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Buffer.ByteLength(System.Array)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Buffer.ByteLength(System.Array)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is not a primitive.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> ist kein Array von Primitiven.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Buffer.ByteLength(System.Array)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is larger than 2 gigabytes (GB).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> ist größer als 2 Gigabyte (GB).</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Buffer.GetByte(System.Array,System.Int32)">
          <source>An array.</source>
          <target state="translated">Ein Array.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Buffer.GetByte(System.Array,System.Int32)">
          <source>A location in the array.</source>
          <target state="translated">Eine Position im Array.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Buffer.GetByte(System.Array,System.Int32)">
          <source>Retrieves the byte at a specified location in a specified array.</source>
          <target state="translated">Ruft das Byte an einer angegebenen Position in einem angegebenen Array ab.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Buffer.GetByte(System.Array,System.Int32)">
          <source>Returns the <ph id="ph1">&lt;paramref name="index" /&gt;</ph> byte in the array.</source>
          <target state="translated">Gibt das <ph id="ph1">&lt;paramref name="index" /&gt;</ph>-Byte im Array zurück.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.GetByte(System.Array,System.Int32)">
          <source>The <ph id="ph1">`GetByte`</ph> method gets a particular byte out of the array.</source>
          <target state="translated">Die <ph id="ph1">`GetByte`</ph> Methode ruft ein bestimmtes Byte aus dem Array ab.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.GetByte(System.Array,System.Int32)">
          <source>The array must be an array of primitives.</source>
          <target state="translated">Das Array muss ein Array von primitiven Typen sein.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.GetByte(System.Array,System.Int32)">
          <source>The following code example displays the byte values at specified locations within arrays using the <ph id="ph1">`GetByte`</ph> method.</source>
          <target state="translated">Das folgende Codebeispiel zeigt die Bytewerte an bestimmten Positionen innerhalb von Arrays mit den <ph id="ph1">`GetByte`</ph> Methode.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Buffer.GetByte(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is not a primitive.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> ist kein Array von Primitiven.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Buffer.GetByte(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Buffer.GetByte(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is negative or greater than the length of <ph id="ph2">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> ist negativ oder größer als die Länge von <ph id="ph2">&lt;paramref name="array" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Buffer.GetByte(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is larger than 2 gigabytes (GB).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> ist größer als 2 Gigabyte (GB).</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="T:System.Buffer">
          <source>Copies a block of memory.</source>
          <target state="translated">Kopiert einen Speicherblock.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)">
          <source>The address of the bytes to copy.</source>
          <target state="translated">Die Adresse der zu kopierenden Bytes.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)">
          <source>The target address.</source>
          <target state="translated">Die Zieladresse.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)">
          <source>The number of bytes available in the destination memory block.</source>
          <target state="translated">Die Anzahl der im Ziel-Speicherblock verfügbaren Bytes.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)">
          <source>The number of bytes to copy.</source>
          <target state="translated">Die Anzahl der zu kopierenden Bytes.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)">
          <source>Copies a number of bytes specified as a long integer value from one address in memory to another.</source>
          <target state="translated">Kopiert eine als Long Integer-Wert angegebene Anzahl von Bytes aus einer Speicheradresse in eine andere Speicheradresse.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)">
          <source>This API is not CLS-compliant.</source>
          <target state="translated">Diese API ist nicht CLS-kompatibel.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)">
          <source>This method copies <ph id="ph1">`sourceBytesToCopy`</ph> bytes from the address specified by <ph id="ph2">`source`</ph> to the address specified by <ph id="ph3">`destination`</ph>.</source>
          <target state="translated">Diese Methode kopiert <ph id="ph1">`sourceBytesToCopy`</ph> Bytes vom durch die angegebene Adresse <ph id="ph2">`source`</ph> an der Adresse angegebene <ph id="ph3">`destination`</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)">
          <source>If the buffers overlap and the difference between <ph id="ph1">`destination`</ph> minus <ph id="ph2">`source`</ph> is less than <ph id="ph3">`sourceBytesToCopy`</ph>, the source block is copied to the destination block in reverse order.</source>
          <target state="translated">Wenn der Puffer überlappen und den Unterschied zwischen <ph id="ph1">`destination`</ph> minus <ph id="ph2">`source`</ph> ist kleiner als <ph id="ph3">`sourceBytesToCopy`</ph>, Quellblock wird an den Zielblock in umgekehrter Reihenfolge kopiert.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)">
          <source><ph id="ph1">&lt;paramref name="sourceBytesToCopy" /&gt;</ph> is greater than <ph id="ph2">&lt;paramref name="destinationSizeInBytes" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="sourceBytesToCopy" /&gt;</ph> ist größer als <ph id="ph2">&lt;paramref name="destinationSizeInBytes" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)">
          <source>The address of the bytes to copy.</source>
          <target state="translated">Die Adresse der zu kopierenden Bytes.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)">
          <source>The target address.</source>
          <target state="translated">Die Zieladresse.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)">
          <source>The number of bytes available in the destination memory block.</source>
          <target state="translated">Die Anzahl der im Ziel-Speicherblock verfügbaren Bytes.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)">
          <source>The number of bytes to copy.</source>
          <target state="translated">Die Anzahl der zu kopierenden Bytes.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)">
          <source>Copies a number of bytes specified as an unsigned long integer value from one address in memory to another.</source>
          <target state="translated">Kopiert eine als Unsigned Long Integer-Wert angegebene Anzahl von Bytes aus einer Speicheradresse in eine andere Speicheradresse.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)">
          <source>This API is not CLS-compliant.</source>
          <target state="translated">Diese API ist nicht CLS-kompatibel.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)">
          <source>This method copies <ph id="ph1">`sourceBytesToCopy`</ph> bytes from the address specified by <ph id="ph2">`source`</ph> to the address specified by <ph id="ph3">`destination`</ph>.</source>
          <target state="translated">Diese Methode kopiert <ph id="ph1">`sourceBytesToCopy`</ph> Bytes vom durch die angegebene Adresse <ph id="ph2">`source`</ph> an der Adresse angegebene <ph id="ph3">`destination`</ph>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)">
          <source>If the buffers overlap and the difference between <ph id="ph1">`destination`</ph> minus <ph id="ph2">`source`</ph> is less than <ph id="ph3">`sourceBytesToCopy`</ph>, the source block is copied to the destination block in reverse order.</source>
          <target state="translated">Wenn der Puffer überlappen und den Unterschied zwischen <ph id="ph1">`destination`</ph> minus <ph id="ph2">`source`</ph> ist kleiner als <ph id="ph3">`sourceBytesToCopy`</ph>, Quellblock wird an den Zielblock in umgekehrter Reihenfolge kopiert.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)">
          <source><ph id="ph1">&lt;paramref name="sourceBytesToCopy" /&gt;</ph> is greater than <ph id="ph2">&lt;paramref name="destinationSizeInBytes" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="sourceBytesToCopy" /&gt;</ph> ist größer als <ph id="ph2">&lt;paramref name="destinationSizeInBytes" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Buffer.SetByte(System.Array,System.Int32,System.Byte)">
          <source>An array.</source>
          <target state="translated">Ein Array.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Buffer.SetByte(System.Array,System.Int32,System.Byte)">
          <source>A location in the array.</source>
          <target state="translated">Eine Position im Array.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Buffer.SetByte(System.Array,System.Int32,System.Byte)">
          <source>A value to assign.</source>
          <target state="translated">Ein zuzuweisender Wert.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Buffer.SetByte(System.Array,System.Int32,System.Byte)">
          <source>Assigns a specified value to a byte at a particular location in a specified array.</source>
          <target state="translated">Weist einem Byte an einer bestimmten Position eines angegebenen Arrays einen bestimmten Wert zu.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.SetByte(System.Array,System.Int32,System.Byte)">
          <source><ph id="ph1">`array`</ph> must be an array of primitives.</source>
          <target state="translated"><ph id="ph1">`array`</ph> muss ein Array von primitiven Typen.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.SetByte(System.Array,System.Int32,System.Byte)">
          <source>The following code example assigns values to bytes at particular locations within arrays using the <ph id="ph1">`SetByte`</ph> method.</source>
          <target state="translated">Im folgenden Codebeispiel wird weist Werte auf Byte an bestimmten Positionen im von Arrays mit den <ph id="ph1">`SetByte`</ph> Methode.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Buffer.SetByte(System.Array,System.Int32,System.Byte)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is not a primitive.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> ist kein Array von Primitiven.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Buffer.SetByte(System.Array,System.Int32,System.Byte)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Buffer.SetByte(System.Array,System.Int32,System.Byte)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is negative or greater than the length of <ph id="ph2">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> ist negativ oder größer als die Länge von <ph id="ph2">&lt;paramref name="array" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Buffer.SetByte(System.Array,System.Int32,System.Byte)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is larger than 2 gigabytes (GB).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> ist größer als 2 Gigabyte (GB).</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>
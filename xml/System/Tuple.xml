<Type Name="Tuple" FullName="System.Tuple">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d208c32c7848dbefcf28aa23100a81328b5cfa54" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82495291" /></Metadata><TypeSignature Language="C#" Value="public static class Tuple" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Tuple extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Tuple" />
  <TypeSignature Language="VB.NET" Value="Public Class Tuple" />
  <TypeSignature Language="C++ CLI" Value="public ref class Tuple abstract sealed" />
  <TypeSignature Language="F#" Value="type Tuple = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt statische Methoden zum Erstellen von Tupelobjekten bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein Tupel ist eine Datenstruktur, die über eine bestimmte Anzahl und eine bestimmte Sequenz von Elementen verfügt. Ein Beispiel für ein Tupel ist eine Datenstruktur mit drei Elementen (als 3-Tupel oder dreifach bezeichnet), die zum Speichern eines Bezeichners verwendet wird, z. b. der Name einer Person im ersten Element, ein Jahr im zweiten Element und das Einkommen der Person für dieses Jahr im dritten Element. Der .NET Framework unterstützt Tupel direkt mit einem bis sieben Elementen. Außerdem können Sie Tupel von acht oder mehr Elementen erstellen, indem Sie tupelobjekte in der <xref:System.Tuple%608.Rest%2A>-Eigenschaft eines <xref:System.Tuple%608> Objekts Schachteln.  
  
 Tupel werden üblicherweise auf vier Arten verwendet:  
  
-   , Um einen einzelnen Satz von Daten darzustellen. Ein Tupel kann z. b. einen Datenbankdaten Satz darstellen, und seine Komponenten können einzelne Felder des Datensatzes darstellen.  
  
-   , Um einen einfachen Zugriff auf ein DataSet und die Bearbeitung von Daten zu ermöglichen.  
  
-   , Wenn mehrere Werte aus einer Methode zurückgegeben werden sollen, ohne C#`out` Parameter (in) oder `ByRef` Parameter (in Visual Basic) zu verwenden.  
  
-   , Wenn mehrere Werte über einen einzelnen Parameter an eine Methode übergeben werden sollen. Die <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType>-Methode verfügt z. b. über einen einzelnen Parameter, mit dem Sie einen Wert für die Methode angeben können, die der Thread zum Zeitpunkt des Starts ausführt. Wenn Sie ein <xref:System.Tuple%603> Objekt als Methoden Argument bereitstellen, können Sie die Start Routine des Threads mit drei Datenelementen bereitstellen.  
  
 Die <xref:System.Tuple> Klasse stellt nicht selbst ein Tupel dar. Vielmehr handelt es sich um eine Klasse, die statische Methoden zum Erstellen von Instanzen der Tupeltypen bereitstellt, die von der .NET Framework unterstützt werden. Es stellt Hilfsmethoden bereit, die Sie aufrufen können, um Tupel-Objekte zu instanziieren, ohne explizit den Typ der einzelnen tupelkomponenten angeben zu müssen.  
  
 Obwohl Sie eine Instanz einer tupelklasse erstellen können, indem Sie deren Klassenkonstruktor aufrufen, kann der entsprechende Code mühsam sein. Im folgenden Beispiel wird ein Klassenkonstruktor verwendet, um ein 7-Tupel oder ein septupel zu erstellen, das auffüllungs Daten für New York City für die einzelnen Volkszählungen von 1950 bis 2000 enthält.  
  
 [!code-csharp[System.Tuple.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.class/cs/example1.cs#1)]
 [!code-vb[System.Tuple.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.class/vb/example1.vb#1)]  
  
 Das Erstellen desselben tupelobjekts mithilfe einer Hilfsmethode ist einfacher, wie im folgenden Beispiel gezeigt.  
  
 [!code-csharp[System.Tuple.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.class/cs/example1.cs#2)]
 [!code-vb[System.Tuple.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.class/vb/example1.vb#2)]  
  
 Die <xref:System.Tuple.Create%2A>-Hilfsmethoden unterstützen direkt die Erstellung von tupelobjekten, die von einer bis acht Komponenten (d. h. Singletons durch oktupel) verfügen. Obwohl es keine praktische Beschränkung für die Anzahl der Komponenten gibt, die ein Tupel aufweisen kann, sind keine Hilfsmethoden verfügbar, um ein Tupel mit neun oder mehr Komponenten zu erstellen. Um ein solches Tupel zu erstellen, müssen Sie den <xref:System.Tuple%608.%23ctor%2A?displayProperty=nameWithType>-Konstruktor aufrufen.  
  
> [!NOTE]
>  Weitere Informationen und Beispiele für die Verwendung von Tupeln finden Sie in der Dokumentation zu den einzelnen Tupeltypen in der .NET Framework. Diese werden im Abschnitt Siehe auch am Ende dieses Themas aufgelistet.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein 8-Tupel (oktupel) erstellt, das Primzahlen enthält, die kleiner als 20 sind.  
  
 [!code-csharp[System.Tuple.Create#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/createntuple.cs#17)]
 [!code-vb[System.Tuple.Create#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/createntuple.vb#17)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Tuple`1" />
    <altmember cref="T:System.Tuple`2" />
    <altmember cref="T:System.Tuple`3" />
    <altmember cref="T:System.Tuple`4" />
    <altmember cref="T:System.Tuple`5" />
    <altmember cref="T:System.Tuple`6" />
    <altmember cref="T:System.Tuple`7" />
    <altmember cref="T:System.Tuple`8" />
  </Docs>
  <Members>
    <MemberGroup MemberName="Create&lt;T1&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Erstellt ein neues Tupelobjekt.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Create&lt;T1&gt;">
      <MemberSignature Language="C#" Value="public static (T1) Create&lt;T1&gt; (T1 item1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Tuple`1&lt;!!T1&gt; Create&lt;T1&gt;(!!T1 item1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple.Create``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create(Of T1) (item1 As T1) As Tuple(Of T1)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1&gt;&#xA; static Tuple&lt;T1&gt; ^ Create(T1 item1);" />
      <MemberSignature Language="F#" Value="static member Create : 'T1 -&gt; 'T1" Usage="System.Tuple.Create item1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Tuple&lt;T1&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="item1" Type="T1" />
      </Parameters>
      <Docs>
        <typeparam name="T1">Der Typ der einzigen Komponente des Tupels.</typeparam>
        <param name="item1">Der Wert der einzigen Komponente des Tupels.</param>
        <summary>Erstellt ein neues 1-Tupel bzw. Singleton.</summary>
        <returns>Ein Tupel, dessen Wert (<paramref name="item1" />) ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Tuple.Create%2A> ist eine Hilfsmethode, die Sie aufrufen können, um ein 1-Tuple-Objekt zu instanziieren, ohne explizit den Typ der Komponente angeben zu müssen. Im folgenden Beispiel wird die <xref:System.Tuple.Create%2A>-Methode verwendet, um ein 1-Tupel zu instanziieren, dessen Komponente vom Typ <xref:System.Int32>ist.  
  
 [!code-csharp[System.Tuple.Create#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/create1.cs#1)]
 [!code-vb[System.Tuple.Create#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/create1.vb#1)]  
  
 Dieser Code entspricht dem folgenden aufrufskonstruktor des <xref:System.Tuple%601.%23ctor%2A>-Klasse.  
  
 [!code-csharp[System.Tuple.Create#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/create1.cs#2)]
 [!code-vb[System.Tuple.Create#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/create1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Tuple`1" />
      </Docs>
    </Member>
    <Member MemberName="Create&lt;T1,T2&gt;">
      <MemberSignature Language="C#" Value="public static (T1,T2) Create&lt;T1,T2&gt; (T1 item1, T2 item2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Tuple`2&lt;!!T1, !!T2&gt; Create&lt;T1, T2&gt;(!!T1 item1, !!T2 item2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple.Create``2(``0,``1)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create(Of T1, T2) (item1 As T1, item2 As T2) As Tuple(Of T1, T2)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2&gt;&#xA; static Tuple&lt;T1, T2&gt; ^ Create(T1 item1, T2 item2);" />
      <MemberSignature Language="F#" Value="static member Create : 'T1 * 'T2 -&gt; 'T1 * 'T2" Usage="System.Tuple.Create (item1, item2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Tuple&lt;T1,T2&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="item1" Type="T1" />
        <Parameter Name="item2" Type="T2" />
      </Parameters>
      <Docs>
        <typeparam name="T1">Der Typ der ersten Komponente des Tupels.</typeparam>
        <typeparam name="T2">Der Typ der zweiten Komponente des Tupels.</typeparam>
        <param name="item1">Der Wert der ersten Komponente des Tupels.</param>
        <param name="item2">Der Wert der zweiten Komponente des Tupels.</param>
        <summary>Erstellt ein neues 2-Tupel bzw. Paar.</summary>
        <returns>Ein 2-Tupel, dessen Wert (<paramref name="item1" />, <paramref name="item2" />) ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Tuple.Create%2A> ist eine Hilfsmethode, die Sie aufrufen können, um ein 2-Tuple-Objekt zu instanziieren, ohne explizit die Typen seiner Komponenten angeben zu müssen. Im folgenden Beispiel wird die <xref:System.Tuple.Create%2A>-Methode verwendet, um ein 2-Tupel zu instanziieren.  
  
 [!code-csharp[System.Tuple.Create#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/create1.cs#3)]
 [!code-vb[System.Tuple.Create#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/create1.vb#3)]  
  
 Dieser Code entspricht dem folgenden aufrufskonstruktor des <xref:System.Tuple%602.%23ctor%2A>-Klasse.  
  
 [!code-csharp[System.Tuple.Create#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/create1.cs#4)]
 [!code-vb[System.Tuple.Create#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/create1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Tuple`2" />
      </Docs>
    </Member>
    <Member MemberName="Create&lt;T1,T2,T3&gt;">
      <MemberSignature Language="C#" Value="public static (T1,T2,T3) Create&lt;T1,T2,T3&gt; (T1 item1, T2 item2, T3 item3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Tuple`3&lt;!!T1, !!T2, !!T3&gt; Create&lt;T1, T2, T3&gt;(!!T1 item1, !!T2 item2, !!T3 item3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple.Create``3(``0,``1,``2)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create(Of T1, T2, T3) (item1 As T1, item2 As T2, item3 As T3) As Tuple(Of T1, T2, T3)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3&gt;&#xA; static Tuple&lt;T1, T2, T3&gt; ^ Create(T1 item1, T2 item2, T3 item3);" />
      <MemberSignature Language="F#" Value="static member Create : 'T1 * 'T2 * 'T3 -&gt; 'T1 * 'T2 * 'T3" Usage="System.Tuple.Create (item1, item2, item3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Tuple&lt;T1,T2,T3&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="item1" Type="T1" />
        <Parameter Name="item2" Type="T2" />
        <Parameter Name="item3" Type="T3" />
      </Parameters>
      <Docs>
        <typeparam name="T1">Der Typ der ersten Komponente des Tupels.</typeparam>
        <typeparam name="T2">Der Typ der zweiten Komponente des Tupels.</typeparam>
        <typeparam name="T3">Der Typ der dritten Komponente des Tupels.</typeparam>
        <param name="item1">Der Wert der ersten Komponente des Tupels.</param>
        <param name="item2">Der Wert der zweiten Komponente des Tupels.</param>
        <param name="item3">Der Wert der dritten Komponente des Tupels.</param>
        <summary>Erstellt ein neues 3-Tupel bzw. Tripel.</summary>
        <returns>Ein 3-Tupel, dessen Wert (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />) ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Tuple.Create%2A> ist eine Hilfsmethode, die Sie aufrufen können, um ein 3-Tuple-Objekt zu instanziieren, ohne explizit die Typen seiner Komponenten angeben zu müssen. Im folgenden Beispiel wird die <xref:System.Tuple.Create%2A>-Methode verwendet, um ein 3-Tupel zu instanziieren.  
  
 [!code-csharp[System.Tuple.Create#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/create1.cs#5)]
 [!code-vb[System.Tuple.Create#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/create1.vb#5)]  
  
 Dieser Code entspricht dem folgenden aufrufskonstruktor des <xref:System.Tuple%603.%23ctor%2A?displayProperty=nameWithType>-Klasse.  
  
 [!code-csharp[System.Tuple.Create#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/create1.cs#6)]
 [!code-vb[System.Tuple.Create#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/create1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Tuple`3" />
      </Docs>
    </Member>
    <Member MemberName="Create&lt;T1,T2,T3,T4&gt;">
      <MemberSignature Language="C#" Value="public static (T1,T2,T3,T4) Create&lt;T1,T2,T3,T4&gt; (T1 item1, T2 item2, T3 item3, T4 item4);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Tuple`4&lt;!!T1, !!T2, !!T3, !!T4&gt; Create&lt;T1, T2, T3, T4&gt;(!!T1 item1, !!T2 item2, !!T3 item3, !!T4 item4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple.Create``4(``0,``1,``2,``3)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create(Of T1, T2, T3, T4) (item1 As T1, item2 As T2, item3 As T3, item4 As T4) As Tuple(Of T1, T2, T3, T4)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3, typename T4&gt;&#xA; static Tuple&lt;T1, T2, T3, T4&gt; ^ Create(T1 item1, T2 item2, T3 item3, T4 item4);" />
      <MemberSignature Language="F#" Value="static member Create : 'T1 * 'T2 * 'T3 * 'T4 -&gt; 'T1 * 'T2 * 'T3 * 'T4" Usage="System.Tuple.Create (item1, item2, item3, item4)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Tuple&lt;T1,T2,T3,T4&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="item1" Type="T1" />
        <Parameter Name="item2" Type="T2" />
        <Parameter Name="item3" Type="T3" />
        <Parameter Name="item4" Type="T4" />
      </Parameters>
      <Docs>
        <typeparam name="T1">Der Typ der ersten Komponente des Tupels.</typeparam>
        <typeparam name="T2">Der Typ der zweiten Komponente des Tupels.</typeparam>
        <typeparam name="T3">Der Typ der dritten Komponente des Tupels.</typeparam>
        <typeparam name="T4">Der Typ der vierten Komponente des Tupels.</typeparam>
        <param name="item1">Der Wert der ersten Komponente des Tupels.</param>
        <param name="item2">Der Wert der zweiten Komponente des Tupels.</param>
        <param name="item3">Der Wert der dritten Komponente des Tupels.</param>
        <param name="item4">Der Wert der vierten Komponente des Tupels.</param>
        <summary>Erstellt ein neues 4-Tupel bzw. Quadrupel.</summary>
        <returns>Ein 4-Tupel, dessen Wert (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />) ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Tuple.Create%2A> ist eine Hilfsmethode, die Sie aufrufen können, um ein 4-Tupel-Objekt zu instanziieren, ohne explizit die Typen seiner Komponenten angeben zu müssen. Im folgenden Beispiel wird die <xref:System.Tuple.Create%2A>-Methode verwendet, um ein 4-Tupel zu instanziieren.  
  
 [!code-csharp[System.Tuple.Create#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/create1.cs#7)]
 [!code-vb[System.Tuple.Create#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/create1.vb#7)]  
  
 Dieser Code entspricht dem folgenden aufrufskonstruktor des <xref:System.Tuple%604.%23ctor%2A?displayProperty=nameWithType>-Klasse.  
  
 [!code-csharp[System.Tuple.Create#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/create1.cs#8)]
 [!code-vb[System.Tuple.Create#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/create1.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Tuple`4" />
      </Docs>
    </Member>
    <Member MemberName="Create&lt;T1,T2,T3,T4,T5&gt;">
      <MemberSignature Language="C#" Value="public static (T1,T2,T3,T4,T5) Create&lt;T1,T2,T3,T4,T5&gt; (T1 item1, T2 item2, T3 item3, T4 item4, T5 item5);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Tuple`5&lt;!!T1, !!T2, !!T3, !!T4, !!T5&gt; Create&lt;T1, T2, T3, T4, T5&gt;(!!T1 item1, !!T2 item2, !!T3 item3, !!T4 item4, !!T5 item5) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple.Create``5(``0,``1,``2,``3,``4)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create(Of T1, T2, T3, T4, T5) (item1 As T1, item2 As T2, item3 As T3, item4 As T4, item5 As T5) As Tuple(Of T1, T2, T3, T4, T5)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5&gt;&#xA; static Tuple&lt;T1, T2, T3, T4, T5&gt; ^ Create(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5);" />
      <MemberSignature Language="F#" Value="static member Create : 'T1 * 'T2 * 'T3 * 'T4 * 'T5 -&gt; 'T1 * 'T2 * 'T3 * 'T4 * 'T5" Usage="System.Tuple.Create (item1, item2, item3, item4, item5)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Tuple&lt;T1,T2,T3,T4,T5&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
        <TypeParameter Name="T5" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="item1" Type="T1" />
        <Parameter Name="item2" Type="T2" />
        <Parameter Name="item3" Type="T3" />
        <Parameter Name="item4" Type="T4" />
        <Parameter Name="item5" Type="T5" />
      </Parameters>
      <Docs>
        <typeparam name="T1">Der Typ der ersten Komponente des Tupels.</typeparam>
        <typeparam name="T2">Der Typ der zweiten Komponente des Tupels.</typeparam>
        <typeparam name="T3">Der Typ der dritten Komponente des Tupels.</typeparam>
        <typeparam name="T4">Der Typ der vierten Komponente des Tupels.</typeparam>
        <typeparam name="T5">Der Typ der fünften Komponente des Tupels.</typeparam>
        <param name="item1">Der Wert der ersten Komponente des Tupels.</param>
        <param name="item2">Der Wert der zweiten Komponente des Tupels.</param>
        <param name="item3">Der Wert der dritten Komponente des Tupels.</param>
        <param name="item4">Der Wert der vierten Komponente des Tupels.</param>
        <param name="item5">Der Wert der fünften Komponente des Tupels.</param>
        <summary>Erstellt ein neues 5-Tupel bzw. Quintupel.</summary>
        <returns>Ein 5-Tupel, dessen Wert (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />, <paramref name="item5" />) ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Tuple.Create%2A> ist eine Hilfsmethode, die Sie aufrufen können, um ein 5-Tupel-Objekt zu instanziieren, ohne explizit die Typen seiner Komponenten angeben zu müssen. Im folgenden Beispiel wird die <xref:System.Tuple.Create%2A>-Methode verwendet, um ein 5-Tupel zu instanziieren.  
  
 [!code-csharp[System.Tuple.Create#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/create1.cs#9)]
 [!code-vb[System.Tuple.Create#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/create1.vb#9)]  
  
 Dieser Code entspricht dem folgenden aufrufskonstruktor des <xref:System.Tuple%605.%23ctor%2A>-Klasse.  
  
 [!code-csharp[System.Tuple.Create#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/create1.cs#10)]
 [!code-vb[System.Tuple.Create#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/create1.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Tuple`5" />
      </Docs>
    </Member>
    <Member MemberName="Create&lt;T1,T2,T3,T4,T5,T6&gt;">
      <MemberSignature Language="C#" Value="public static (T1,T2,T3,T4,T5,T6) Create&lt;T1,T2,T3,T4,T5,T6&gt; (T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Tuple`6&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6&gt; Create&lt;T1, T2, T3, T4, T5, T6&gt;(!!T1 item1, !!T2 item2, !!T3 item3, !!T4 item4, !!T5 item5, !!T6 item6) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple.Create``6(``0,``1,``2,``3,``4,``5)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create(Of T1, T2, T3, T4, T5, T6) (item1 As T1, item2 As T2, item3 As T3, item4 As T4, item5 As T5, item6 As T6) As Tuple(Of T1, T2, T3, T4, T5, T6)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6&gt;&#xA; static Tuple&lt;T1, T2, T3, T4, T5, T6&gt; ^ Create(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6);" />
      <MemberSignature Language="F#" Value="static member Create : 'T1 * 'T2 * 'T3 * 'T4 * 'T5 * 'T6 -&gt; 'T1 * 'T2 * 'T3 * 'T4 * 'T5 * 'T6" Usage="System.Tuple.Create (item1, item2, item3, item4, item5, item6)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Tuple&lt;T1,T2,T3,T4,T5,T6&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
        <TypeParameter Name="T5" />
        <TypeParameter Name="T6" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="item1" Type="T1" />
        <Parameter Name="item2" Type="T2" />
        <Parameter Name="item3" Type="T3" />
        <Parameter Name="item4" Type="T4" />
        <Parameter Name="item5" Type="T5" />
        <Parameter Name="item6" Type="T6" />
      </Parameters>
      <Docs>
        <typeparam name="T1">Der Typ der ersten Komponente des Tupels.</typeparam>
        <typeparam name="T2">Der Typ der zweiten Komponente des Tupels.</typeparam>
        <typeparam name="T3">Der Typ der dritten Komponente des Tupels.</typeparam>
        <typeparam name="T4">Der Typ der vierten Komponente des Tupels.</typeparam>
        <typeparam name="T5">Der Typ der fünften Komponente des Tupels.</typeparam>
        <typeparam name="T6">Der Typ der sechsten Komponente des Tupels.</typeparam>
        <param name="item1">Der Wert der ersten Komponente des Tupels.</param>
        <param name="item2">Der Wert der zweiten Komponente des Tupels.</param>
        <param name="item3">Der Wert der dritten Komponente des Tupels.</param>
        <param name="item4">Der Wert der vierten Komponente des Tupels.</param>
        <param name="item5">Der Wert der fünften Komponente des Tupels.</param>
        <param name="item6">Der Wert der sechsten Komponente des Tupels.</param>
        <summary>Erstellt ein neues 6-Tupel bzw. Sextupel.</summary>
        <returns>Ein 6-Tupel, dessen Wert (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />, <paramref name="item5" />, <paramref name="item6" />) ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Tuple.Create%2A> ist eine Hilfsmethode, die Sie aufrufen können, um ein 6-Tuple-Objekt zu instanziieren, ohne explizit die Typen seiner Komponenten angeben zu müssen. Im folgenden Beispiel wird die <xref:System.Tuple.Create%2A>-Methode verwendet, um ein 6-Tupel zu instanziieren.  
  
 [!code-csharp[System.Tuple.Create#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/create1.cs#11)]
 [!code-vb[System.Tuple.Create#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/create1.vb#11)]  
  
 Dieser Code entspricht dem folgenden aufrufskonstruktor des <xref:System.Tuple%606.%23ctor%2A>-Klasse.  
  
 [!code-csharp[System.Tuple.Create#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/create1.cs#12)]
 [!code-vb[System.Tuple.Create#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/create1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Tuple`6" />
      </Docs>
    </Member>
    <Member MemberName="Create&lt;T1,T2,T3,T4,T5,T6,T7&gt;">
      <MemberSignature Language="C#" Value="public static (T1,T2,T3,T4,T5,T6,T7) Create&lt;T1,T2,T3,T4,T5,T6,T7&gt; (T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Tuple`7&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7&gt; Create&lt;T1, T2, T3, T4, T5, T6, T7&gt;(!!T1 item1, !!T2 item2, !!T3 item3, !!T4 item4, !!T5 item5, !!T6 item6, !!T7 item7) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple.Create``7(``0,``1,``2,``3,``4,``5,``6)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create(Of T1, T2, T3, T4, T5, T6, T7) (item1 As T1, item2 As T2, item3 As T3, item4 As T4, item5 As T5, item6 As T6, item7 As T7) As Tuple(Of T1, T2, T3, T4, T5, T6, T7)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7&gt;&#xA; static Tuple&lt;T1, T2, T3, T4, T5, T6, T7&gt; ^ Create(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7);" />
      <MemberSignature Language="F#" Value="static member Create : 'T1 * 'T2 * 'T3 * 'T4 * 'T5 * 'T6 * 'T7 -&gt; 'T1 * 'T2 * 'T3 * 'T4 * 'T5 * 'T6 * 'T7" Usage="System.Tuple.Create (item1, item2, item3, item4, item5, item6, item7)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
        <TypeParameter Name="T5" />
        <TypeParameter Name="T6" />
        <TypeParameter Name="T7" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="item1" Type="T1" />
        <Parameter Name="item2" Type="T2" />
        <Parameter Name="item3" Type="T3" />
        <Parameter Name="item4" Type="T4" />
        <Parameter Name="item5" Type="T5" />
        <Parameter Name="item6" Type="T6" />
        <Parameter Name="item7" Type="T7" />
      </Parameters>
      <Docs>
        <typeparam name="T1">Der Typ der ersten Komponente des Tupels.</typeparam>
        <typeparam name="T2">Der Typ der zweiten Komponente des Tupels.</typeparam>
        <typeparam name="T3">Der Typ der dritten Komponente des Tupels.</typeparam>
        <typeparam name="T4">Der Typ der vierten Komponente des Tupels.</typeparam>
        <typeparam name="T5">Der Typ der fünften Komponente des Tupels.</typeparam>
        <typeparam name="T6">Der Typ der sechsten Komponente des Tupels.</typeparam>
        <typeparam name="T7">Der Typ der siebten Komponente des Tupels.</typeparam>
        <param name="item1">Der Wert der ersten Komponente des Tupels.</param>
        <param name="item2">Der Wert der zweiten Komponente des Tupels.</param>
        <param name="item3">Der Wert der dritten Komponente des Tupels.</param>
        <param name="item4">Der Wert der vierten Komponente des Tupels.</param>
        <param name="item5">Der Wert der fünften Komponente des Tupels.</param>
        <param name="item6">Der Wert der sechsten Komponente des Tupels.</param>
        <param name="item7">Der Wert der siebten Komponente des Tupels.</param>
        <summary>Erstellt ein neues 7-Tupel bzw. Septupel.</summary>
        <returns>Ein 7-Tupel, dessen Wert (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />, <paramref name="item5" />, <paramref name="item6" />, <paramref name="item7" />) ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Tuple.Create%2A> ist eine Hilfsmethode, die Sie aufrufen können, um ein 7-Tuple-Objekt zu instanziieren, ohne explizit die Typen seiner Komponenten angeben zu müssen. Im folgenden Beispiel wird die <xref:System.Tuple.Create%2A>-Methode verwendet, um ein 7-Tupel zu instanziieren.  
  
 [!code-csharp[System.Tuple.Create#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/create1.cs#13)]
 [!code-vb[System.Tuple.Create#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/create1.vb#13)]  
  
 Dieser Code entspricht dem folgenden aufrufskonstruktor des <xref:System.Tuple%607.%23ctor%2A>-Klasse.  
  
 [!code-csharp[System.Tuple.Create#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/create1.cs#14)]
 [!code-vb[System.Tuple.Create#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/create1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Tuple`7" />
      </Docs>
    </Member>
    <Member MemberName="Create&lt;T1,T2,T3,T4,T5,T6,T7,T8&gt;">
      <MemberSignature Language="C#" Value="public static (T1,T2,T3,T4,T5,T6,T7,Tuple&lt;T8&gt;) Create&lt;T1,T2,T3,T4,T5,T6,T7,T8&gt; (T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, T8 item8);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Tuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, class System.Tuple`1&lt;!!T8&gt;&gt; Create&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt;(!!T1 item1, !!T2 item2, !!T3 item3, !!T4 item4, !!T5 item5, !!T6 item6, !!T7 item7, !!T8 item8) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create(Of T1, T2, T3, T4, T5, T6, T7, T8) (item1 As T1, item2 As T2, item3 As T3, item4 As T4, item5 As T5, item6 As T6, item7 As T7, item8 As T8) As Tuple(Of T1, T2, T3, T4, T5, T6, T7, Tuple(Of T8))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8&gt;&#xA; static Tuple&lt;T1, T2, T3, T4, T5, T6, T7, Tuple&lt;T8&gt; ^&gt; ^ Create(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, T8 item8);" />
      <MemberSignature Language="F#" Value="static member Create : 'T1 * 'T2 * 'T3 * 'T4 * 'T5 * 'T6 * 'T7 * 'T8 -&gt; 'T1 * 'T2 * 'T3 * 'T4 * 'T5 * 'T6 * 'T7 * 'T8" Usage="System.Tuple.Create (item1, item2, item3, item4, item5, item6, item7, item8)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,System.Tuple&lt;T8&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
        <TypeParameter Name="T5" />
        <TypeParameter Name="T6" />
        <TypeParameter Name="T7" />
        <TypeParameter Name="T8" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="item1" Type="T1" />
        <Parameter Name="item2" Type="T2" />
        <Parameter Name="item3" Type="T3" />
        <Parameter Name="item4" Type="T4" />
        <Parameter Name="item5" Type="T5" />
        <Parameter Name="item6" Type="T6" />
        <Parameter Name="item7" Type="T7" />
        <Parameter Name="item8" Type="T8" />
      </Parameters>
      <Docs>
        <typeparam name="T1">Der Typ der ersten Komponente des Tupels.</typeparam>
        <typeparam name="T2">Der Typ der zweiten Komponente des Tupels.</typeparam>
        <typeparam name="T3">Der Typ der dritten Komponente des Tupels.</typeparam>
        <typeparam name="T4">Der Typ der vierten Komponente des Tupels.</typeparam>
        <typeparam name="T5">Der Typ der fünften Komponente des Tupels.</typeparam>
        <typeparam name="T6">Der Typ der sechsten Komponente des Tupels.</typeparam>
        <typeparam name="T7">Der Typ der siebten Komponente des Tupels.</typeparam>
        <typeparam name="T8">Der Typ der achten Komponente des Tupels.</typeparam>
        <param name="item1">Der Wert der ersten Komponente des Tupels.</param>
        <param name="item2">Der Wert der zweiten Komponente des Tupels.</param>
        <param name="item3">Der Wert der dritten Komponente des Tupels.</param>
        <param name="item4">Der Wert der vierten Komponente des Tupels.</param>
        <param name="item5">Der Wert der fünften Komponente des Tupels.</param>
        <param name="item6">Der Wert der sechsten Komponente des Tupels.</param>
        <param name="item7">Der Wert der siebten Komponente des Tupels.</param>
        <param name="item8">Der Wert der achten Komponente des Tupels.</param>
        <summary>Erstellt ein neues 8-Tupel bzw. Oktupel.</summary>
        <returns>Ein 8-Tupel (Oktupel), dessen Wert (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />, <paramref name="item5" />, <paramref name="item6" />, <paramref name="item7" />, <paramref name="item8" />) ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Tuple.Create%2A> ist eine Hilfsmethode, die Sie aufrufen können, um ein 8-Tupel zu instanziieren, ohne die Typen der Komponenten explizit angeben zu müssen.  
  
> [!NOTE]
>  Sie müssen den <xref:System.Tuple%608.%23ctor%2A?displayProperty=nameWithType>-Konstruktor aufrufen, um ein Tupel mit neun oder mehr Komponenten zu erstellen, es sei denn, Ihre Sprache bietet hierfür eine spezielle Syntax. Die statischen Methoden (`Shared` in Visual Basic) der <xref:System.Tuple>-Klasse können nicht verwendet werden, um ein Tupel mit neun oder mehr Komponenten zu erstellen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein 8-Tupel erstellt, dessen Komponenten Primzahlen sind, die kleiner als 20 sind.  
  
 [!code-csharp[System.Tuple.Create#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/createntuple.cs#17)]
 [!code-vb[System.Tuple.Create#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/createntuple.vb#17)]  
  
 Dies entspricht dem folgenden Beispiel, in dem der <xref:System.Tuple%608>-Klassenkonstruktor anstelle der <xref:System.Tuple.Create%2A> Factory-Erstellungs Methode verwendet wird. Beachten Sie, dass das Instanziieren eines <xref:System.Tuple%608> Objekts auf diese Weise erheblich mehr Code umfasst, da Sie ein gestrukturetes <xref:System.Tuple%601> Objekt als achte Komponente des <xref:System.Tuple%608> Objekts deklarieren müssen, um ein oktupel zu erstellen.  
  
 [!code-csharp[System.Tuple.Create#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/ctor8.cs#20)]
 [!code-vb[System.Tuple.Create#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/ctor8.vb#20)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Tuple`8" />
      </Docs>
    </Member>
  </Members>
</Type>

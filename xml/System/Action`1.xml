<Type Name="Action&lt;T&gt;" FullName="System.Action&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b667dcf79e5ae762a2e599fd337d51ceea34b2c7" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37482404" /></Metadata><TypeSignature Language="C#" Value="public delegate void Action&lt;in T&gt;(T obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Action`1&lt;- T&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Action`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub Action(Of In T)(obj As T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public delegate void Action(T obj);" />
  <TypeSignature Language="F#" Value="type Action&lt;'T&gt; = delegate of 'T -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="obj" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T">Der Typ des Parameters der Methode, die dieser Delegat kapselt.</typeparam>
    <param name="obj">Der Parameter der Methode, die dieser Delegat kapselt.</param>
    <summary>Kapselt eine Methode, die über einen einzelnen Parameter verfügt und keinen Wert zurückgibt.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können die <xref:System.Action%601> Delegat, der eine Methode als Parameter übergeben werden, ohne explizit einen benutzerdefinierten Delegaten zu deklarieren. Die der gekapselte Methode muss die Signatur der Methode entsprechen, die von diesem Delegaten definiert ist. Dies bedeutet, dass die gekapselte Methode zunächst einen Parameter, der als Wert übergeben wird, müssen sie keinen Wert zurück. (In c# muss die Methode zurückgeben `void`. In Visual Basic muss es vom definiert werden die `Sub`...`End Sub` erstellen. Sie können auch eine Methode, die einen Wert zurückgibt, der ignoriert wird sein.) In der Regel wird eine solche Methode zum Ausführen eines Vorgangs verwendet.  
  
> [!NOTE]
>  Um eine Methode zu verweisen, die über einen Parameter verfügt und einen Wert zurückgibt, verwenden Sie den generischen <xref:System.Func%602> stattdessen delegieren.  
  
 Bei Verwendung der <xref:System.Action%601> Delegaten, Sie müssen nicht explizit einen Delegaten definieren, die eine Methode mit einem einzigen Parameter kapselt. Der folgende Code deklariert beispielsweise explizit einen Delegaten, der mit dem Namen `DisplayMessage` und weist einen Verweis auf die <xref:System.Console.WriteLine%2A> Methode oder der `ShowWindowsMessage` Methode, um eine Delegatinstanz.  
  
 [!code-cpp[System.Action~1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Action~1/cpp/delegate.cpp#1)]
 [!code-csharp[System.Action~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Delegate.cs#1)]
 [!code-vb[System.Action~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/Delegate.vb#1)]  
  
 Im folgende Beispiel wird dieser Code vereinfacht, durch die Instanziierung der <xref:System.Action%601> Delegaten aufrufen, anstatt explizit definieren einen neuen Delegaten und eine benannte Methode zugewiesen wird.  
  
 [!code-cpp[System.Action~1#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Action~1/cpp/action`1.cpp#2)]
 [!code-csharp[System.Action~1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Action1.cs#2)]
 [!code-vb[System.Action~1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/Action1.vb#2)]  
  
 Sie können auch die <xref:System.Action%601> delegieren mit anonymen Methoden in C# geschrieben, wie im folgende Beispiel veranschaulicht. (Eine Einführung in anonyme Methoden, finden Sie unter [anonyme Methoden](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)  
  
 [!code-csharp[System.Action~1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Anon.cs#3)]  
  
 Sie können auch einen Lambda-Ausdruck zuweisen einer <xref:System.Action%601> Instanz delegieren, wie im folgende Beispiel veranschaulicht. (Eine Einführung in Lambda-Ausdrücke, finden Sie unter [Lambda-Ausdrücke](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)  
  
 [!code-csharp[System.Action~1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Lambda.cs#4)]
 [!code-vb[System.Action~1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/lambda.vb#4)]  
  
 Die <xref:System.Collections.Generic.List%601.ForEach%2A> und <xref:System.Array.ForEach%2A> -Methode akzeptieren jeweils eine <xref:System.Action%601> -Delegaten als Parameter. Die Methode, die vom Delegaten gekapselt sind, können Sie zum Ausführen einer Aktion für jedes Element in der Matrix oder Liste. Im Beispiel wird die <xref:System.Collections.Generic.List%601.ForEach%2A> Methode veranschaulicht.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt die Verwendung von der <xref:System.Action%601> Delegat zum Drucken des Inhalts von einem <xref:System.Collections.Generic.List%601> Objekt. In diesem Beispiel die `Print` Methode wird verwendet, um den Inhalt der Liste der in der Konsole anzeigen. C#-Beispiel veranschaulicht darüber hinaus auch die Verwendung anonymer Methoden, um den Inhalt in der Konsole anzuzeigen. Beachten Sie, der im Beispiel nicht explizit deklariert, ein <xref:System.Action%601> Variable. Stattdessen wird einen Verweis auf eine Methode, die einen einzelnen Parameter akzeptiert und, ist einen Wert, der nicht zurückgeben, der <xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType> -Methode, deren einziger Parameter ist ein <xref:System.Action%601> delegieren. Auf ähnliche Weise, in der c#-Beispiel ein <xref:System.Action%601> Delegaten nicht explizit instanziiert, da die Signatur der anonymen Methode die Signatur entspricht der <xref:System.Action%601> Delegat, der von erwarteten der <xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType> Methode.  
  
 [!code-csharp[System.Action_PrintExample#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action_PrintExample/cs/action.cs#01)]
 [!code-vb[System.Action_PrintExample#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action_PrintExample/vb/action.vb#01)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Func`2" />
  </Docs>
</Type>
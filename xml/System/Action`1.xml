<Type Name="Action&lt;T&gt;" FullName="System.Action&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8a2282810184f9346dadc33bd241406f3515f9fe" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69422068" /></Metadata><TypeSignature Language="C#" Value="public delegate void Action&lt;in T&gt;(T obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Action`1&lt;- T&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Action`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub Action(Of In T)(obj As T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public delegate void Action(T obj);" />
  <TypeSignature Language="F#" Value="type Action&lt;'T&gt; = delegate of 'T -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="obj" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T">Der Typ des Parameters der Methode, die dieser Delegat kapselt.</typeparam>
    <param name="obj">Der Parameter der Methode, die dieser Delegat kapselt.</param>
    <summary>Kapselt eine Methode, die über einen einzelnen Parameter verfügt und keinen Wert zurückgibt.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können den <xref:System.Action%601> -Delegaten verwenden, um eine Methode als Parameter zu übergeben, ohne explizit einen benutzerdefinierten Delegaten zu deklarieren. Die gekapselte Methode muss der Methoden Signatur entsprechen, die von diesem Delegaten definiert wird. Dies bedeutet, dass die gekapselte Methode über einen Parameter verfügen muss, der als Wert übergeben wird, und Sie darf keinen Wert zurückgeben. (In C#muss die-Methode zurück `void`geben. In Visual Basic muss Sie von der `Sub`...`End Sub` Erstellen. Es kann auch eine Methode sein, die einen Wert zurückgibt, der ignoriert wird.) In der Regel wird eine solche Methode verwendet, um einen Vorgang auszuführen.  
  
> [!NOTE]
>  Verwenden Sie stattdessen den generischen <xref:System.Func%602> Delegaten, um auf eine Methode zu verweisen, die über einen Parameter verfügt und einen Wert zurückgibt.  
  
 Wenn Sie den <xref:System.Action%601> -Delegaten verwenden, müssen Sie nicht explizit einen Delegaten definieren, der eine Methode mit einem einzelnen Parameter kapselt. Der folgende Code deklariert z. b. explizit einen Delegaten mit dem Namen `DisplayMessage` und weist der Delegatinstanz entweder einen Verweis auf die <xref:System.Console.WriteLine%2A> -Methode oder die `ShowWindowsMessage` -Methode zu.  
  
 [!code-cpp[System.Action~1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Action~1/cpp/delegate.cpp#1)]
 [!code-csharp[System.Action~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Delegate.cs#1)]
 [!code-vb[System.Action~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/Delegate.vb#1)]  
  
 Im folgenden Beispiel wird dieser Code vereinfacht, indem der <xref:System.Action%601> Delegat instanziiert wird, anstatt explizit einen neuen Delegaten zu definieren und ihm eine benannte Methode zuzuweisen.  
  
 [!code-cpp[System.Action~1#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Action~1/cpp/action`1.cpp#2)]
 [!code-csharp[System.Action~1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Action1.cs#2)]
 [!code-vb[System.Action~1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/Action1.vb#2)]  
  
 Sie können den <xref:System.Action%601> Delegaten auch mit anonymen Methoden in C#verwenden, wie im folgenden Beispiel veranschaulicht. (Eine Einführung zu anonymen Methoden finden Sie unter [Anonyme Methoden](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)  
  
 [!code-csharp[System.Action~1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Anon.cs#3)]  
  
 Sie können einem Delegatinstanz auch einen Lambda <xref:System.Action%601> -Ausdruck zuweisen, wie im folgenden Beispiel veranschaulicht. (Eine Einführung in Lambda-Ausdrücke finden Sie unter [Lambda-Ausdrücke](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)  
  
 [!code-csharp[System.Action~1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Lambda.cs#4)]
 [!code-vb[System.Action~1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/lambda.vb#4)]  
  
 Die <xref:System.Collections.Generic.List%601.ForEach%2A> - <xref:System.Array.ForEach%2A> Methode und die- <xref:System.Action%601> Methode akzeptieren jeweils einen Delegaten als Parameter. Die vom Delegaten gekapselte Methode ermöglicht Ihnen das Ausführen einer Aktion für jedes Element im Array oder in der Liste. Im Beispiel wird die <xref:System.Collections.Generic.List%601.ForEach%2A> -Methode verwendet, um eine Abbildung bereitzustellen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie der <xref:System.Action%601> -Delegat zum Drucken des Inhalts <xref:System.Collections.Generic.List%601> eines-Objekts verwendet wird. In diesem Beispiel `Print` wird die-Methode verwendet, um den Inhalt der Liste in der Konsole anzuzeigen. Außerdem veranschaulicht das C# Beispiel die Verwendung anonymer Methoden, um die Inhalte der Konsole anzuzeigen. Beachten Sie, dass im Beispiel nicht explizit eine <xref:System.Action%601> Variable deklariert wird. Stattdessen übergibt Sie einen Verweis auf eine Methode, die einen einzelnen Parameter annimmt und keinen Wert an die <xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType> Methode zurückgibt, deren einzelner Parameter ein <xref:System.Action%601> Delegat ist. Im C# Beispiel wird ein <xref:System.Action%601> Delegat nicht explizit instanziiert, da die Signatur der anonymen Methode mit <xref:System.Action%601> der Signatur des Delegaten übereinstimmt, der von der <xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType> -Methode erwartet wird.  
  
 [!code-csharp[System.Action_PrintExample#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action_PrintExample/cs/action.cs#01)]
 [!code-vb[System.Action_PrintExample#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action_PrintExample/vb/action.vb#01)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Func`2" />
  </Docs>
</Type>

<Type Name="ReadOnlySpan&lt;T&gt;+Enumerator" FullName="System.ReadOnlySpan&lt;T&gt;+Enumerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="32186cbdbd5cd370177d775b52144af016a40610" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75039826" /></Metadata><TypeSignature Language="C#" Value="public struct ReadOnlySpan&lt;T&gt;.Enumerator" />
  <TypeSignature Language="ILAsm" Value=".class nested public sequential ansi sealed beforefieldinit ReadOnlySpan`1/Enumerator&lt;T&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.ReadOnlySpan`1.Enumerator" />
  <TypeSignature Language="VB.NET" Value="Public Structure ReadOnlySpan(Of T).Enumerator" />
  <TypeSignature Language="C++ CLI" Value="public: value class ReadOnlySpan&lt;T&gt;::Enumerator" />
  <TypeSignature Language="F#" Value="type ReadOnlySpan&lt;'T&gt;.Enumerator = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.2;netcore-2.1;netcore-3.0;netstandard-2.1;netcore-3.1">
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt einen Enumerator für diese Elemente eines <see cref="T:System.ReadOnlySpan`1" />-Elements bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

Die C# [foreach](~/docs/csharp/language-reference/keywords/foreach-in.md) - C# Sprache und die [for each-Sprache... Das nächste](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) Konstrukt in Visual Basic verbirgt die Komplexität von Enumeratoren. Anstatt den Enumerator direkt zu manipulieren, wird die Verwendung von `foreach` oder `For Each...Next` empfohlen. 

Anfänglich wird der Enumerator vor dem ersten Element im <xref:System.ReadOnlySpan`1>positioniert. An dieser Position ist <xref:System.ReadOnlySpan`1.Enumerator.Current> nicht definiert. Sie müssen <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> aufgerufen werden, um den Enumerator vor dem Lesen des Werts von <xref:System.ReadOnlySpan`1.Enumerator.Current>auf das erste Element im <xref:System.ReadOnlySpan`1> zu setzen.

<xref:System.ReadOnlySpan`1.Enumerator.Current> gibt denselben Wert zurück, bis <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> aufgerufen wird. <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> legt <xref:System.ReadOnlySpan`1.Enumerator.Current> auf das nächste Element in der <xref:System.ReadOnlySpan`1>fest.

Wenn <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> das Ende der <xref:System.ReadOnlySpan`1>übergibt, gibt <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> `false`zurück. Wenn sich der Enumerator in diesem Zustand befindet, geben nachfolgende Aufrufe von <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> ebenfalls `false` zurück, und <xref:System.ReadOnlySpan`1.Enumerator.Current> ist nicht definiert. <xref:System.ReadOnlySpan`1.Enumerator.Current> kann nicht erneut auf das erste Element in der <xref:System.ReadOnlySpan`1> festgelegt werden. Stattdessen müssen Sie eine neue Enumeratorinstanz erstellen. 

Obwohl die <xref:System.ReadOnlySpan`1> auf dem Stapel zugeordnet ist, sind die zugrunde liegenden Daten, auf die die <xref:System.ReadOnlySpan`1> verweist, möglicherweise nicht. Daher ist die Enumeration durch eine <xref:System.ReadOnlySpan`1> intrinsisch keine Thread sichere Prozedur. Um die Thread Sicherheit während der Enumeration zu gewährleisten, müssen Sie eine eigene Synchronisierung implementieren.

Im Gegensatz zu einigen anderen enumeratorstrukturen in .net <xref:System.ReadOnlySpan`1.Enumerator>:

- Implementiert nicht die-<xref:System.Collections.IEnumerator> oder <xref:System.Collections.Generic.IEnumerator`1>-Schnittstelle. Der Grund hierfür ist, dass <xref:System.ReadOnlySpan`1.Enumerator> eine [ref-Struktur](~/docs/csharp/language-reference/keywords/ref.md#ref-struct-types) ist und nicht gekapselt werden kann.

- Enthält keine `Reset`-Methode, die den Enumerator auf seine anfängliche Position vor dem ersten Element in der Spanne festlegen kann. (Die <xref:System.Collections.IEnumerator.Reset?displayProperty=nameWithType>-Methode muss als Teil der-Schnittstelle implementiert werden, aber die meisten Implementierungen lösen entweder eine Ausnahme aus oder stellen keine Implementierung bereit.)

]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public T Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Current" />
      <MemberSignature Language="DocId" Value="P:System.ReadOnlySpan`1.Enumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T&amp; ^ Current { T&amp; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : 'T" Usage="System.ReadOnlySpan&lt;'T&gt;.Enumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.2;netcore-2.1;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Verweis auf das Element an der aktuellen Position des Enumerators ab.</summary>
        <value>Das Element in der <see cref="T:System.ReadOnlySpan`1" /> an der aktuellen Position des Enumerators.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

`Current` ist unter einer der folgenden Bedingungen nicht definiert: 

- Unmittelbar nach dem Erstellen des Enumerators wird der Enumerator vor dem ersten Element in der Spanne positioniert. <xref:System.ReadOnlySpan`1.Enumerator.MoveNext*> müssen aufgerufen werden, um den Enumerator vor dem Lesen des Werts `Current`auf das erste Element der Spanne zu setzen.

- Der letzte Aufrufe von <xref:System.ReadOnlySpan`1.Enumerator.MoveNext*> `false`zurückgegeben, der das Ende der Spanne angibt. 

`Current` gibt denselben Wert zurück, bis <xref:System.ReadOnlySpan`1.Enumerator.MoveNext*> aufgerufen wird. <xref:System.ReadOnlySpan`1.Enumerator.MoveNext*> legt `Current` auf das nächste Element in der Spanne fest.

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.Enumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext();" />
      <MemberSignature Language="F#" Value="member this.MoveNext : unit -&gt; bool" Usage="enumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legt den Enumerator auf das nächste Element von <see cref="T:System.ReadOnlySpan`1" /> fest.</summary>
        <returns><see langword="true" />, wenn der Enumerator erfolgreich auf das nächste Element festgelegt wurde; <see langword="false" />, wenn das Ende des Span-Elements überschritten wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Nachdem ein Enumerator erstellt wurde, wird er vor dem ersten Element in der Spanne positioniert, und der erste-`MoveNext`-aufgabenator verschiebt den Enumerator auf das erste Element in der Spanne. 

Wenn `MoveNext` das Ende der Spanne übergibt, gibt `MoveNext` `false`zurück. Wenn sich der Enumerator in diesem Zustand befindet, geben nachfolgende Aufrufe von `MoveNext` ebenfalls `false`zurück.

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

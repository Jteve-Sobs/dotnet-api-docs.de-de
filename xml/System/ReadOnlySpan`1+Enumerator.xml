<Type Name="ReadOnlySpan&lt;T&gt;+Enumerator" FullName="System.ReadOnlySpan&lt;T&gt;+Enumerator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0385ad9b2121b51248da126abd92d108ef2e8643" />
    <Meta Name="ms.sourcegitcommit" Value="c902e847cd05ac37d93eca981b0fb009aae0a790" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="11/28/2018" />
    <Meta Name="ms.locfileid" Value="52454577" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct ReadOnlySpan&lt;T&gt;.Enumerator" />
  <TypeSignature Language="ILAsm" Value=".class nested public sequential ansi sealed beforefieldinit ReadOnlySpan`1/Enumerator&lt;T&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.ReadOnlySpan`1.Enumerator" />
  <TypeSignature Language="VB.NET" Value="Public Structure ReadOnlySpan(Of T).Enumerator" />
  <TypeSignature Language="C++ CLI" Value="public: value class ReadOnlySpan&lt;T&gt;::Enumerator" />
  <TypeSignature Language="F#" Value="type ReadOnlySpan&lt;'T&gt;.Enumerator = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.1;netcore-2.2">
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt einen Enumerator für diese Elemente eines <see cref="T:System.ReadOnlySpan`1" />-Elements bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[Die C#- [Foreach](~/docs/csharp/language-reference/keywords/foreach-in.md) der C#-Sprache und die [für jede... Nächste](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) Konstrukt in Visual Basic Blendet die Komplexität der Enumeratoren. Anstatt ein direktes Bearbeiten des Enumerators, mit `foreach` oder `For Each...Next` wird empfohlen. 

Zunächst wird der Enumerator vor das erste Element in der <xref:System.ReadOnlySpan`1>. An dieser Position ist <xref:System.ReadOnlySpan`1.Enumerator.Current> nicht definiert. Rufen Sie <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> auf den Enumerator auf das erste Element in der <xref:System.ReadOnlySpan`1> vor dem Lesen des Werts von <xref:System.ReadOnlySpan`1.Enumerator.Current>.

<xref:System.ReadOnlySpan`1.Enumerator.Current> Gibt den gleichen Wert bis <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> aufgerufen wird. <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> Legt <xref:System.ReadOnlySpan`1.Enumerator.Current> zum nächsten Element in der <xref:System.ReadOnlySpan`1>.

Wenn <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> übergibt am Ende der <xref:System.ReadOnlySpan`1>, <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> gibt `false`. Wenn der Enumerator ist auf diesem Status, schlagen nachfolgende Aufrufe <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> auch zurückgeben `false` und <xref:System.ReadOnlySpan`1.Enumerator.Current> ist nicht definiert. Sie können nicht festgelegt werden <xref:System.ReadOnlySpan`1.Enumerator.Current> auf das erste Element in der <xref:System.ReadOnlySpan`1> erneut; Sie müssen eine neue Enumeratorinstanz stattdessen erstellen. 

Obwohl die <xref:System.ReadOnlySpan`1> zugeordnet ist, auf dem Stapel, die zugrunde liegenden Daten auf dem die <xref:System.ReadOnlySpan`1> verweist, möglicherweise nicht. Aus diesem Grund die Enumeration eine <xref:System.ReadOnlySpan`1> ist systemintern keine threadsichere Prozedur. Um während der Enumeration Threadsicherheit zu gewährleisten, müssen Sie eine eigene Synchronisierung implementieren.

Im Gegensatz zu einigen anderen Enumerator-Strukturen in .NET die <xref:System.ReadOnlySpan`1.Enumerator>:

- Implementiert nicht die <xref:System.Collections.IEnumerator> oder <xref:System.Collections.Generic.IEnumerator`1> Schnittstelle. Grund hierfür ist, <xref:System.ReadOnlySpan`1.Enumerator> ist eine [Referenzstruktur](~/docs/csharp/language-reference/keywords/ref.md#ref-struct-types) und können nicht geschachtelt werden.

- Enthält keine `Reset` -Methode, die den Enumerator auf seine anfängliche Position vor dem ersten Element in der Spanne festlegen kann. (Die <xref:System.Collections.IEnumerator.Reset?displayProperty=nameWithType> Methode muss als Teil der Schnittstelle implementiert werden, aber die meisten Implementierungen eine Ausnahme auslösen, oder es keine Implementierung bereitstellen.)]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public T&amp; Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance T&amp; modreq(System.Runtime.InteropServices.InAttribute) Current" />
      <MemberSignature Language="DocId" Value="P:System.ReadOnlySpan`1.Enumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As T&amp;" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T&amp; ^ Current { T&amp; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : T&amp;" Usage="System.ReadOnlySpan&lt;'T&gt;.Enumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.1;netcore-2.2">
          <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T&amp;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Verweis auf das Element an der aktuellen Position des Enumerators ab.</summary>
        <value>Das Element in der <see cref="T:System.ReadOnlySpan`1" /> an der aktuellen Position des Enumerators.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[`Current` ist nicht unter eine der folgenden Bedingungen definiert werden: 

- Unmittelbar nach der Enumerator erstellt wird, wird der Enumerator vor dem ersten Element in der Spanne. <xref:System.ReadOnlySpan`1.Enumerator.MoveNext*> muss aufgerufen werden, um den Enumerator auf das erste Element der Spanne vor dem Lesen des Werts von `Current`.

- Der letzte Aufruf von <xref:System.ReadOnlySpan`1.Enumerator.MoveNext*> zurückgegebenen `false`, womit das Ende der Spanne. 

`Current` Gibt den gleichen Wert bis <xref:System.ReadOnlySpan`1.Enumerator.MoveNext*> aufgerufen wird. <xref:System.ReadOnlySpan`1.Enumerator.MoveNext*> Legt `Current` zum nächsten Element in der Spanne.]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.Enumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext();" />
      <MemberSignature Language="F#" Value="member this.MoveNext : unit -&gt; bool" Usage="enumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legt den Enumerator auf das nächste Element von <see cref="System.ReadOnlySpan`1" /> fest.</summary>
        <returns>`true`, wenn der Enumerator erfolgreich auf das nächste Element festgelegt wurde; `false`, wenn das Ende des Span-Elements überschritten wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[Nachdem ein Enumerator erstellt wurde, es befindet sich vor dem ersten Element in der Spanne und der erste Aufruf `MoveNext` setzt den Enumerator auf das erste Element in der Spanne. 

Wenn `MoveNext` übergibt das Ende der Spanne `MoveNext` gibt `false`. Wenn der Enumerator ist auf diesem Status, schlagen nachfolgende Aufrufe `MoveNext` auch zurückgeben `false`.]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
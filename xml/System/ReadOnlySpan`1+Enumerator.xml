<Type Name="ReadOnlySpan&lt;T&gt;+Enumerator" FullName="System.ReadOnlySpan&lt;T&gt;+Enumerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8e8c2c4ad5693fb8b728b8d2ce475bbfabac4686" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86686935" /></Metadata><TypeSignature Language="C#" Value="public struct ReadOnlySpan&lt;T&gt;.Enumerator" />
  <TypeSignature Language="ILAsm" Value=".class nested public sequential ansi sealed beforefieldinit ReadOnlySpan`1/Enumerator&lt;T&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.ReadOnlySpan`1.Enumerator" />
  <TypeSignature Language="VB.NET" Value="Public Structure ReadOnlySpan(Of T).Enumerator" />
  <TypeSignature Language="C++ CLI" Value="public: value class ReadOnlySpan&lt;T&gt;::Enumerator" />
  <TypeSignature Language="F#" Value="type ReadOnlySpan&lt;'T&gt;.Enumerator = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Memory" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Memory" FromVersion="4.1.0.0" To="System.Runtime" ToVersion="4.2.1.0" FrameworkAlternate="netcore-2.1;netcore-2.2" />
    <TypeForwarding From="System.Memory" FromVersion="4.2.0.0" To="System.Runtime" ToVersion="4.2.1.0" FrameworkAlternate="netcore-3.0" />
    <TypeForwarding From="System.Memory" FromVersion="4.2.1.0" To="System.Runtime" ToVersion="4.2.2.0" FrameworkAlternate="netcore-3.1" />
  </TypeForwardingChain>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.IsByRefLike]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsByRefLike&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt einen Enumerator für diese Elemente eines <see cref="T:System.ReadOnlySpan`1" />-Elements bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

Die c#- [foreach](/dotnet/csharp/language-reference/keywords/foreach-in) -Sprache der c#-Sprache und die [for each-... Das nächste](/dotnet/visual-basic/language-reference/statements/for-each-next-statement) Konstrukt in Visual Basic verbirgt die Komplexität von Enumeratoren. Anstatt den Enumerator direkt zu manipulieren, wird die Verwendung von `foreach` oder `For Each...Next` empfohlen. 

Anfänglich wird der Enumerator vor dem ersten Element in der positioniert <xref:System.ReadOnlySpan`1> . An dieser Position ist <xref:System.ReadOnlySpan`1.Enumerator.Current> nicht definiert. Sie müssen aufzurufen <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> , um den Enumerator vor dem Lesen des Werts von auf das erste Element in der zu setzen <xref:System.ReadOnlySpan`1> <xref:System.ReadOnlySpan`1.Enumerator.Current> .

<xref:System.ReadOnlySpan`1.Enumerator.Current>Gibt den gleichen Wert zurück, bis <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> aufgerufen wird. <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A>legt <xref:System.ReadOnlySpan`1.Enumerator.Current> auf das nächste Element in der fest <xref:System.ReadOnlySpan`1> .

Wenn <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> das Ende von übergibt <xref:System.ReadOnlySpan`1> , wird <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> zurückgegeben `false` . Wenn sich der Enumerator in diesem Zustand befindet, geben nachfolgende Aufrufe von <xref:System.ReadOnlySpan`1.Enumerator.MoveNext%2A> ebenfalls zurück `false` und <xref:System.ReadOnlySpan`1.Enumerator.Current> sind nicht definiert. Sie können nicht <xref:System.ReadOnlySpan`1.Enumerator.Current> erneut auf das erste Element im festlegen <xref:System.ReadOnlySpan`1> . stattdessen müssen Sie eine neue Enumeratorinstanz erstellen. 

Obwohl der <xref:System.ReadOnlySpan`1> auf dem Stapel zugeordnet ist, sind die zugrunde liegenden Daten, auf die <xref:System.ReadOnlySpan`1> verweist, möglicherweise nicht. Daher ist die Enumeration durch eine <xref:System.ReadOnlySpan`1> intrinsisch keine Thread sichere Prozedur. Um die Thread Sicherheit während der Enumeration zu gewährleisten, müssen Sie eine eigene Synchronisierung implementieren.

Anders als bei einigen anderen enumeratorstrukturen in .net <xref:System.ReadOnlySpan`1.Enumerator> :

- Implementiert nicht die- <xref:System.Collections.IEnumerator> Schnittstelle oder die- <xref:System.Collections.Generic.IEnumerator`1> Schnittstelle. Der Grund hierfür <xref:System.ReadOnlySpan`1.Enumerator> ist, dass eine [ref-Struktur](/dotnet/csharp/language-reference/builtin-types/struct#ref-struct) ist und nicht gekapselt werden kann.

- Enthält keine- `Reset` Methode, die den Enumerator auf seine anfängliche Position vor dem ersten Element in der Spanne festlegen kann. (Die- <xref:System.Collections.IEnumerator.Reset?displayProperty=nameWithType> Methode muss als Teil der-Schnittstelle implementiert werden, aber die meisten Implementierungen lösen entweder eine Ausnahme aus oder stellen keine Implementierung bereit.)

]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public T Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Current" />
      <MemberSignature Language="DocId" Value="P:System.ReadOnlySpan`1.Enumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T&amp; ^ Current { T&amp; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : 'T" Usage="System.ReadOnlySpan&lt;'T&gt;.Enumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Verweis auf das Element an der aktuellen Position des Enumerators ab.</summary>
        <value>Das Element in der <see cref="T:System.ReadOnlySpan`1" /> an der aktuellen Position des Enumerators.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

`Current`ist unter einer der folgenden Bedingungen nicht definiert: 

- Unmittelbar nach dem Erstellen des Enumerators wird der Enumerator vor dem ersten Element in der Spanne positioniert. <xref:System.ReadOnlySpan`1.Enumerator.MoveNext*>muss aufgerufen werden, um den Enumerator vor dem Lesen des Werts von auf das erste Element der Spanne zu setzen `Current` .

- Der letzte <xref:System.ReadOnlySpan`1.Enumerator.MoveNext*> zurückgegebene Rückruf `false` , der das Ende der Spanne angibt. 

`Current`Gibt den gleichen Wert zurück, bis <xref:System.ReadOnlySpan`1.Enumerator.MoveNext*> aufgerufen wird. <xref:System.ReadOnlySpan`1.Enumerator.MoveNext*>legt `Current` auf das nächste Element in der Spanne fest.

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.Enumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext();" />
      <MemberSignature Language="F#" Value="member this.MoveNext : unit -&gt; bool" Usage="enumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legt den Enumerator auf das nächste Element von <see cref="T:System.ReadOnlySpan`1" /> fest.</summary>
        <returns><see langword="true" />, wenn der Enumerator erfolgreich auf das nächste Element festgelegt wurde; <see langword="false" />, wenn das Ende des Span-Elements überschritten wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Nachdem ein Enumerator erstellt wurde, wird er vor dem ersten Element in der Spanne positioniert, und der erste-Befehl, um `MoveNext` den Enumerator auf das erste Element in der Spanne zu verschieben. 

Wenn `MoveNext` das Ende der Spanne übergibt, wird `MoveNext` zurückgegeben `false` . Wenn sich der Enumerator in diesem Zustand befindet, geben nachfolgende Aufrufe von `MoveNext` ebenfalls zurück `false` .

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

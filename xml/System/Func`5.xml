<Type Name="Func&lt;T1,T2,T3,T4,TResult&gt;" FullName="System.Func&lt;T1,T2,T3,T4,TResult&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3412e0f08f8a89543f1dd906195dcf268ed186c9" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69420649" /></Metadata><TypeSignature Language="C#" Value="public delegate TResult Func&lt;in T1,in T2,in T3,in T4,out TResult&gt;(T1 arg1, T2 arg2, T3 arg3, T4 arg4);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`5&lt;- T1, - T2, - T3, - T4, + TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`5" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of In T1, In T2, In T3, In T4, Out TResult)(arg1 As T1, arg2 As T2, arg3 As T3, arg4 As T4) As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3, typename T4, typename TResult&gt;&#xA;public delegate TResult Func(T1 arg1, T2 arg2, T3 arg3, T4 arg4);" />
  <TypeSignature Language="F#" Value="type Func&lt;'T1, 'T2, 'T3, 'T4, 'Result&gt; = delegate of 'T1 * 'T2 * 'T3 * 'T4 -&gt; 'Result" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T2">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T3">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T4">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="arg1" Type="T1" Index="0" FrameworkAlternate="xamarinmac-3.0" />
    <Parameter Name="arg2" Type="T2" Index="1" FrameworkAlternate="xamarinmac-3.0" />
    <Parameter Name="arg3" Type="T3" Index="2" FrameworkAlternate="xamarinmac-3.0" />
    <Parameter Name="arg4" Type="T4" Index="3" FrameworkAlternate="xamarinmac-3.0" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T1"><span data-ttu-id="ba258-101">Der Typ des ersten Parameters der Methode, die dieser Delegat kapselt.</span><span class="sxs-lookup"><span data-stu-id="ba258-101">The type of the first parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <typeparam name="T2"><span data-ttu-id="ba258-102">Der Typ des zweiten Parameters der Methode, die dieser Delegat kapselt.</span><span class="sxs-lookup"><span data-stu-id="ba258-102">The type of the second parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <typeparam name="T3"><span data-ttu-id="ba258-103">Der Typ des dritten Parameters der Methode, die dieser Delegat kapselt.</span><span class="sxs-lookup"><span data-stu-id="ba258-103">The type of the third parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <typeparam name="T4"><span data-ttu-id="ba258-104">Der Typ des vierten Parameters der Methode, die dieser Delegat kapselt.</span><span class="sxs-lookup"><span data-stu-id="ba258-104">The type of the fourth parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <typeparam name="TResult"><span data-ttu-id="ba258-105">Der Typ des Rückgabewerts der Methode, die dieser Delegat kapselt.</span><span class="sxs-lookup"><span data-stu-id="ba258-105">The type of the return value of the method that this delegate encapsulates.</span></span></typeparam>
    <param name="arg1"><span data-ttu-id="ba258-106">Der erste Parameter der Methode, die dieser Delegat kapselt.</span><span class="sxs-lookup"><span data-stu-id="ba258-106">The first parameter of the method that this delegate encapsulates.</span></span></param>
    <param name="arg2"><span data-ttu-id="ba258-107">Der zweite Parameter der Methode, die dieser Delegat kapselt.</span><span class="sxs-lookup"><span data-stu-id="ba258-107">The second parameter of the method that this delegate encapsulates.</span></span></param>
    <param name="arg3"><span data-ttu-id="ba258-108">Der dritte Parameter der Methode, die dieser Delegat kapselt.</span><span class="sxs-lookup"><span data-stu-id="ba258-108">The third parameter of the method that this delegate encapsulates.</span></span></param>
    <param name="arg4"><span data-ttu-id="ba258-109">Der vierte Parameter der Methode, die dieser Delegat kapselt.</span><span class="sxs-lookup"><span data-stu-id="ba258-109">The fourth parameter of the method that this delegate encapsulates.</span></span></param>
    <summary><span data-ttu-id="ba258-110">Kapselt eine Methode, die über vier Parameter verfügt und einen Wert von dem Typ zurückgibt, der vom <typeparamref name="TResult" />-Parameter angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="ba258-110">Encapsulates a method that has four parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</span></span></summary>
    <returns><span data-ttu-id="ba258-111">Der Rückgabewert der Methode, die dieser Delegat kapselt.</span><span class="sxs-lookup"><span data-stu-id="ba258-111">The return value of the method that this delegate encapsulates.</span></span></returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ba258-112">Mit diesem Delegaten können Sie eine Methode darstellen, die als Parameter übergeben werden kann, ohne explizit einen benutzerdefinierten Delegaten zu deklarieren.</span><span class="sxs-lookup"><span data-stu-id="ba258-112">You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate.</span></span> <span data-ttu-id="ba258-113">Die gekapselte Methode muss der Methoden Signatur entsprechen, die von diesem Delegaten definiert wird.</span><span class="sxs-lookup"><span data-stu-id="ba258-113">The encapsulated method must correspond to the method signature that is defined by this delegate.</span></span> <span data-ttu-id="ba258-114">Dies bedeutet, dass die gekapselte Methode über vier Parameter verfügen muss, die jeweils als Wert an Sie übermittelt werden, und dass ein Wert zurückgegeben werden muss.</span><span class="sxs-lookup"><span data-stu-id="ba258-114">This means that the encapsulated method must have four parameters, each of which is passed to it by value, and that it must return a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ba258-115">Verwenden Sie stattdessen den generischen `void` `Sub` <xref:System.Action%604> Delegaten, um auf eine Methode zu verweisen, die über vier Parameter verfügt und zurückgibt `Function`(oder in Visual Basic, die als deklariert wird, und nicht als).</span><span class="sxs-lookup"><span data-stu-id="ba258-115">To reference a method that has four parameters and returns `void` (or in Visual Basic, that is declared as a `Sub` rather than as a `Function`), use the generic <xref:System.Action%604> delegate instead.</span></span>  
  
 <span data-ttu-id="ba258-116">Wenn Sie den <xref:System.Func%605> -Delegaten verwenden, müssen Sie nicht explizit einen Delegaten definieren, der eine Methode mit vier Parametern kapselt.</span><span class="sxs-lookup"><span data-stu-id="ba258-116">When you use the <xref:System.Func%605> delegate, you do not have to explicitly define a delegate that encapsulates a method with four parameters.</span></span> <span data-ttu-id="ba258-117">Der folgende Code deklariert z. b. explizit einen generischen `Searcher` Delegaten mit dem Namen und <xref:System.String.IndexOf%2A> weist der Delegatinstanz einen Verweis auf die-Methode zu.</span><span class="sxs-lookup"><span data-stu-id="ba258-117">For example, the following code explicitly declares a generic delegate named `Searcher` and assigns a reference to the <xref:System.String.IndexOf%2A> method to its delegate instance.</span></span>  
  
 [!code-csharp[System.Func~5#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~5/cs/Delegate.cs#1)]
 [!code-vb[System.Func~5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~5/vb/Delegate.vb#1)]  
  
 <span data-ttu-id="ba258-118">Im folgenden Beispiel wird dieser Code vereinfacht, indem der <xref:System.Func%605> Delegat instanziiert wird, anstatt explizit einen neuen Delegaten zu definieren und ihm eine benannte Methode zuzuweisen.</span><span class="sxs-lookup"><span data-stu-id="ba258-118">The following example simplifies this code by instantiating the <xref:System.Func%605> delegate instead of explicitly defining a new delegate and assigning a named method to it.</span></span>  
  
 [!code-csharp[System.Func~5#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~5/cs/Func5.cs#2)]
 [!code-vb[System.Func~5#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~5/vb/Func5.vb#2)]  
  
 <span data-ttu-id="ba258-119">Sie können den <xref:System.Func%605> Delegaten mit anonymen Methoden in C#verwenden, wie im folgenden Beispiel veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="ba258-119">You can use the <xref:System.Func%605> delegate with anonymous methods in C#, as the following example illustrates.</span></span> <span data-ttu-id="ba258-120">(Eine Einführung zu anonymen Methoden finden Sie unter [Anonyme Methoden](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span><span class="sxs-lookup"><span data-stu-id="ba258-120">(For an introduction to anonymous methods, see [Anonymous Methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span></span>  
  
 [!code-csharp[System.Func~5#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~5/cs/Anon.cs#3)]  
  
 <span data-ttu-id="ba258-121">Sie können einem Delegaten auch einen Lambda- <xref:System.Func%605> Ausdruck zuweisen, wie im folgenden Beispiel veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="ba258-121">You can also assign a lambda expression to a <xref:System.Func%605> delegate, as the following example illustrates.</span></span> <span data-ttu-id="ba258-122">(Eine Einführung in Lambda-Ausdrücke finden Sie unter [Lambda](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) -Ausdrücke und [Lambda](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)-Ausdrücke.)</span><span class="sxs-lookup"><span data-stu-id="ba258-122">(For an introduction to lambda expressions, see [Lambda Expressions](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) and [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span></span>  
  
 [!code-csharp[System.Func~5#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~5/cs/Lambda.cs#4)]
 [!code-vb[System.Func~5#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~5/vb/Lambda.vb#4)]  
  
 <span data-ttu-id="ba258-123">Der zugrunde liegende Typ eines Lambda-Ausdrucks ist einer der generischen `Func` Delegaten.</span><span class="sxs-lookup"><span data-stu-id="ba258-123">The underlying type of a lambda expression is one of the generic `Func` delegates.</span></span> <span data-ttu-id="ba258-124">Dadurch ist es möglich, einen Lambda-Ausdruck als Parameter zu übergeben, ohne ihn explizit einem Delegaten zuzuweisen.</span><span class="sxs-lookup"><span data-stu-id="ba258-124">This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate.</span></span> <span data-ttu-id="ba258-125">Insbesondere weil viele Methoden von Typen im <xref:System.Linq> -Namespace Parameter aufweisen `Func` , können Sie diese Methoden als Lambda-Ausdruck übergeben, ohne einen `Func` Delegaten explizit zu instanziieren.</span><span class="sxs-lookup"><span data-stu-id="ba258-125">In particular, because many methods of types in the <xref:System.Linq> namespace have `Func` parameters, you can pass these methods a lambda expression without explicitly instantiating a `Func` delegate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ba258-126">Im folgenden Beispiel wird veranschaulicht, wie ein <xref:System.Func%603> Delegat deklariert und verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="ba258-126">The following example demonstrates how to declare and use a <xref:System.Func%603> delegate.</span></span> <span data-ttu-id="ba258-127">In diesem Beispiel wird <xref:System.Func%603> eine-Variable deklariert und ihr ein Lambda-Ausdruck <xref:System.String> zugewiesen, der <xref:System.Int32> einen-Wert und einen-Wert als Parameter annimmt.</span><span class="sxs-lookup"><span data-stu-id="ba258-127">This example declares a <xref:System.Func%603> variable and assigns it a lambda expression that takes a <xref:System.String> value and an <xref:System.Int32> value as parameters.</span></span> <span data-ttu-id="ba258-128">Der Lambda-Ausdruck `true` gibt zurück <xref:System.Int32> , wenn die <xref:System.String> Länge des-Parameters gleich dem Wert des-Parameters ist.</span><span class="sxs-lookup"><span data-stu-id="ba258-128">The lambda expression returns `true` if the length of the <xref:System.String> parameter is equal to the value of the <xref:System.Int32> parameter.</span></span> <span data-ttu-id="ba258-129">Der Delegat, der diese Methode kapselt, wird anschließend in einer Abfrage verwendet, um Zeichen folgen in einem Array von Zeichen folgen zu filtern.</span><span class="sxs-lookup"><span data-stu-id="ba258-129">The delegate that encapsulates this method is subsequently used in a query to filter strings in an array of strings.</span></span>  
  
 [!code-csharp[System.Func~3#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~3/cs/Example.cs#5)]
 [!code-vb[System.Func~3#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~3/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md"><span data-ttu-id="ba258-130">Lambda-Ausdrücke (C#-Programmierhandbuch)</span><span class="sxs-lookup"><span data-stu-id="ba258-130">Lambda Expressions (C# Programming Guide)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md"><span data-ttu-id="ba258-131">Lambda-Ausdrücke</span><span class="sxs-lookup"><span data-stu-id="ba258-131">Lambda Expressions</span></span></related>
    <related type="Article" href="~/docs/csharp/programming-guide/delegates/index.md"><span data-ttu-id="ba258-132">Delegaten (C#-Programmierhandbuch)</span><span class="sxs-lookup"><span data-stu-id="ba258-132">Delegates (C# Programming Guide)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/delegates/index.md"><span data-ttu-id="ba258-133">Delegaten in Visual Basic</span><span class="sxs-lookup"><span data-stu-id="ba258-133">Delegates in Visual Basic</span></span></related>
  </Docs>
</Type>

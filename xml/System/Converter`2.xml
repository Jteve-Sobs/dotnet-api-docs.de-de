<Type Name="Converter&lt;TInput,TOutput&gt;" FullName="System.Converter&lt;TInput,TOutput&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="164461ff8bbe5c1e6dae918de5e4d20cfdd87e70" /><Meta Name="ms.sourcegitcommit" Value="f828282420515ef705e09bbdb6c22116df98b5e3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="83487071" /></Metadata><TypeSignature Language="C#" Value="public delegate TOutput Converter&lt;in TInput,out TOutput&gt;(TInput input);" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Converter`2&lt;- TInput, + TOutput&gt; extends System.MulticastDelegate" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="DocId" Value="T:System.Converter`2" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Converter(Of In TInput, Out TOutput)(input As TInput) As TOutput " FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TInput, typename TOutput&gt;&#xA;public delegate TOutput Converter(TInput input);" />
  <TypeSignature Language="F#" Value="type Converter&lt;'Input, 'Output&gt; = delegate of 'Input -&gt; 'Output" />
  <TypeSignature Language="C#" Value="public delegate TOutput Converter&lt;TInput,TOutput&gt;(TInput input);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Converter`2&lt;TInput, TOutput&gt; extends System.MulticastDelegate" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Converter(Of TInput, TOutput)(input As TInput) As TOutput " FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <TypeParameters>
    <TypeParameter Name="TInput">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TOutput">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="input" Type="TInput" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TOutput</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="TInput">Der Typ des umzuwandelnden Objekts.</typeparam>
    <typeparam name="TOutput">Der Typ, in den das Eingabeobjekt konvertiert werden soll.</typeparam>
    <param name="input">Das zu konvertierende Objekt.</param>
    <summary>Stellt eine Methode dar, die ein Objekt von einem Typ in einen anderen Typ konvertiert.</summary>
    <returns>Die <typeparamref name="TOutput" />, die die konvertierte <typeparamref name="TInput" /> darstellt.</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Delegat wird von der <xref:System.Array.ConvertAll%2A> -Methode der <xref:System.Array> -Klasse und der- <xref:System.Collections.Generic.List`1.ConvertAll*> Methode der- <xref:System.Collections.Generic.List%601> Klasse verwendet, um jedes Element der Auflistung von einem Typ in einen anderen zu konvertieren.  
  
   
  
## Examples  
 Dieser Abschnitt enthält zwei Codebeispiele. Der erste veranschaulicht den Delegaten <xref:System.Converter%602> mit der <xref:System.Array.ConvertAll%2A> -Methode der <xref:System.Array> -Klasse, und der zweite veranschaulicht den Delegaten mit der- <xref:System.Collections.Generic.List`1.ConvertAll*> Methode der <xref:System.Collections.Generic.List%601> generischen-Klasse.  
  
 Beispiel 1  
  
 Im folgenden Codebeispiel wird eine Methode mit dem Namen definiert `PointFToPoint` , die eine- <xref:System.Drawing.PointF> Struktur in eine- <xref:System.Drawing.Point> Struktur konvertiert. Im Beispiel wird dann ein Array von <xref:System.Drawing.PointF> Strukturen erstellt, ein Delegat `Converter<PointF, Point>` ( `Converter(Of PointF, Point)` in Visual Basic) erstellt, um die `PointFToPoint` Methode darzustellen, und der Delegat wird an die Methode weitergeleitet <xref:System.Array.ConvertAll%2A> . Die <xref:System.Array.ConvertAll%2A> -Methode übergibt jedes Element der Eingabeliste an die `PointFToPoint` -Methode und fügt die konvertierten Elemente in eine neue Liste von- <xref:System.Drawing.Point> Strukturen ein. Beide Listen werden angezeigt.  
  
 [!code-cpp[Array_ConvertAll#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_ConvertAll/cpp/source.cpp#1)]
 [!code-csharp[Array_ConvertAll#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_ConvertAll/cs/source.cs#1)]
 [!code-vb[Array_ConvertAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_ConvertAll/vb/source.vb#1)]  
  
 Beispiel 2  
  
 Im folgenden Codebeispiel wird eine Methode mit dem Namen definiert `PointFToPoint` , die eine- <xref:System.Drawing.PointF> Struktur in eine- <xref:System.Drawing.Point> Struktur konvertiert. Im Beispiel wird dann eine <xref:System.Collections.Generic.List%601> von <xref:System.Drawing.PointF> Strukturen erstellt, ein Delegat `Converter\<PointF, Point>` ( `Converter(Of PointF, Point)` in Visual Basic) erstellt, um die `PointFToPoint` Methode darzustellen, und der Delegat wird an die Methode weitergeleitet <xref:System.Collections.Generic.List`1.ConvertAll*> . Die <xref:System.Collections.Generic.List`1.ConvertAll*> -Methode übergibt jedes Element der Eingabeliste an die `PointFToPoint` -Methode und fügt die konvertierten Elemente in eine neue Liste von- <xref:System.Drawing.Point> Strukturen ein. Beide Listen werden angezeigt.  
  
 [!code-cpp[List\`1_ConvertAll#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_ConvertAll/cpp/source.cpp#1)]
 [!code-csharp[List\`1_ConvertAll#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_ConvertAll/cs/source.cs#1)]
 [!code-vb[List\`1_ConvertAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_ConvertAll/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>

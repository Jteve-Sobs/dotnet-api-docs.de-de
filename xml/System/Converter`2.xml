<Type Name="Converter&lt;TInput,TOutput&gt;" FullName="System.Converter&lt;TInput,TOutput&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3d572a9ac7cdd88d83e2e60e3ab38a089b5d7b1a" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37728367" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate TOutput Converter&lt;in TInput,out TOutput&gt;(TInput input);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Converter`2&lt;- TInput, + TOutput&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Converter`2" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Converter(Of In TInput, Out TOutput)(input As TInput) As TOutput " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TInput, typename TOutput&gt;&#xA;public delegate TOutput Converter(TInput input);" />
  <TypeSignature Language="F#" Value="type Converter&lt;'Input, 'Output&gt; = delegate of 'Input -&gt; 'Output" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TInput">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TOutput">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="input" Type="TInput" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TOutput</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="TInput">Der Typ des umzuwandelnden Objekts.</typeparam>
    <typeparam name="TOutput">Der Typ, in den das Eingabeobjekt konvertiert werden soll.</typeparam>
    <param name="input">Das zu konvertierende Objekt.</param>
    <summary>Stellt eine Methode dar, die ein Objekt von einem Typ in einen anderen Typ konvertiert.</summary>
    <returns>Die <typeparamref name="TOutput" />, die die konvertierte <typeparamref name="TInput" /> darstellt.</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Delegat wird verwendet, durch die <xref:System.Array.ConvertAll%2A> -Methode der der <xref:System.Array> Klasse und die <xref:System.Collections.Generic.List`1.ConvertAll*> -Methode der der <xref:System.Collections.Generic.List%601> Klasse, um jedes Element der Auflistung von einem Typ in einen anderen konvertieren.  
  
   
  
## Examples  
 Dieser Abschnitt enthält zwei Codebeispiele. Zuerst wird veranschaulicht, die <xref:System.Converter%602> -Delegaten mit der <xref:System.Array.ConvertAll%2A> -Methode der der <xref:System.Array> -Klasse, und die zweite zeigt den Delegaten mit der <xref:System.Collections.Generic.List`1.ConvertAll*> -Methode der der <xref:System.Collections.Generic.List%601> generische Klasse.  
  
 Beispiel 1  
  
 Das folgende Codebeispiel definiert eine Methode, die mit dem Namen `PointFToPoint` , konvertiert ein <xref:System.Drawing.PointF> -Struktur in eine <xref:System.Drawing.Point> Struktur. Im Beispiel wird dann erstellt ein Array von <xref:System.Drawing.PointF> strukturiert ist, erstellt eine `Converter<PointF, Point>` delegieren (`Converter(Of PointF, Point)` in Visual Basic) zur Darstellung der `PointFToPoint` -Methode, und übergibt den Delegaten an die <xref:System.Array.ConvertAll%2A> Methode. Die <xref:System.Array.ConvertAll%2A> Methode übergibt jedes Element der Liste der Eingabe der `PointFToPoint` Methode und legt die konvertierten Elemente in eine neue Liste von <xref:System.Drawing.Point> Strukturen. Beide Listen werden angezeigt.  
  
 [!code-cpp[Array_ConvertAll#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_ConvertAll/cpp/source.cpp#1)]
 [!code-csharp[Array_ConvertAll#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_ConvertAll/cs/source.cs#1)]
 [!code-vb[Array_ConvertAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_ConvertAll/vb/source.vb#1)]  
  
 Beispiel 2  
  
 Das folgende Codebeispiel definiert eine Methode, die mit dem Namen `PointFToPoint` , konvertiert ein <xref:System.Drawing.PointF> -Struktur in eine <xref:System.Drawing.Point> Struktur. Im Beispiel wird dann erstellt eine <xref:System.Collections.Generic.List%601> von <xref:System.Drawing.PointF> strukturiert ist, erstellt eine `Converter\<PointF, Point>` delegieren (`Converter(Of PointF, Point)` in Visual Basic) zur Darstellung der `PointFToPoint` -Methode, und übergibt den Delegaten an die <xref:System.Collections.Generic.List`1.ConvertAll*> Methode. Die <xref:System.Collections.Generic.List`1.ConvertAll*> Methode übergibt jedes Element der Liste der Eingabe der `PointFToPoint` Methode und legt die konvertierten Elemente in eine neue Liste von <xref:System.Drawing.Point> Strukturen. Beide Listen werden angezeigt.  
  
 [!code-cpp[List\`1_ConvertAll#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_ConvertAll/cpp/source.cpp#1)]
 [!code-csharp[List\`1_ConvertAll#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_ConvertAll/cs/source.cs#1)]
 [!code-vb[List\`1_ConvertAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_ConvertAll/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>
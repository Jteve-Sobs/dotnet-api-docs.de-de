<Type Name="IEquatable&lt;T&gt;" FullName="System.IEquatable&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9fcae00acfa7690a177a9ae3923d64e925291729" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70473006" /></Metadata><TypeSignature Language="C#" Value="public interface IEquatable&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEquatable`1&lt;T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IEquatable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEquatable(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEquatable" />
  <TypeSignature Language="F#" Value="type IEquatable&lt;'T&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">Der Typ der zu vergleichenden Objekte.</typeparam>
    <summary>Definiert eine generalisierte Methode, die von einem Werttyp oder von einer Klasse zur Erstellung einer typspezifischen Methode implementiert wird, um die Gleichheit von Instanzen zu ermitteln.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Schnittstelle wird von Typen implementiert, deren Werte gleichgesetzt werden können (z. b. die numerischen Klassen und Zeichen folgen Klassen). Ein Werttyp oder eine Klasse <xref:System.IEquatable%601.Equals%2A> implementiert die-Methode, um eine typspezifische Methode zu erstellen, die zum Bestimmen der Gleichheit von Instanzen geeignet ist.  
  
> [!NOTE]
>  Die <xref:System.IComparable%601> -Schnittstelle <xref:System.IComparable%601.CompareTo%2A> definiert die-Methode, die die Sortierreihenfolge von Instanzen des implementierenden Typs bestimmt. Die <xref:System.IEquatable%601> -Schnittstelle <xref:System.IEquatable%601.Equals%2A> definiert die-Methode, die die Gleichheit von Instanzen des implementierenden Typs bestimmt.  
  
 Die <xref:System.IEquatable%601> -Schnittstelle wird von generischen Auflistungs <xref:System.Collections.Generic.List%601>Objekten, <xref:System.Collections.Generic.LinkedList%601> <xref:System.Collections.Generic.Dictionary%602>wie z. b., und, `Contains`beim Testen auf Gleichheit `Remove`in Methoden wie, `IndexOf`, `LastIndexOf`und verwendet. Sie sollte für jedes Objekt implementiert werden, das möglicherweise in einer generischen Auflistung gespeichert ist.  
  
   
  
## Examples  
 Weitere Informationen finden Sie im <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> Beispiel für die-Methode.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Ersetzen Sie den Typparameter der <see cref="T:System.IEquatable`1" /> Schnittstelle durch den Typ, der diese Schnittstelle implementiert.  
  
Wenn Sie implementieren <see cref="T:System.IEquatable`1" />, sollten Sie auch die Basisklassen Implementierungen von <see cref="M:System.Object.Equals(System.Object)" /> und über <see cref="M:System.Object.GetHashCode" /> schreiben, damit ihr Verhalten mit dem <see cref="M:System.IEquatable`1.Equals(`0)" /> der-Methode konsistent ist. Wenn Sie außer Kraft <see cref="M:System.Object.Equals(System.Object)" />setzen, wird die überschriebene Implementierung auch in Aufrufen der statischen <see langword="Equals(System.Object, System.Object)" /> -Methode für die-Klasse aufgerufen. Außerdem sollten Sie die <see langword="op_Equality" /> Operatoren und <see langword="op_Inequality" /> überladen. Dadurch wird sichergestellt, dass alle Gleichheits Überprüfungen konsistente Ergebnisse zurückgeben.  
  
 <block subset="none" type="note"><para>  
 Weitere Informationen zum über <see cref="M:System.Object.Equals(System.Object)" />Schreiben von finden <see cref="M:System.Object.Equals(System.Object)" /> Sie im Artikel.  
  
</para></block>  
  
 Für einen Werttyp sollten Sie immer implementieren <see cref="T:System.IEquatable`1" /> und über <see cref="M:System.Object.Equals(System.Object)" /> schreiben, um eine bessere Leistung zu erzielen. <see cref="M:System.Object.Equals(System.Object)" />Boxes-Werttypen und basiert auf Reflektion, um zwei Werte auf Gleichheit zu vergleichen. Sowohl Ihre Implementierung von <see cref="M:System.IEquatable`1.Equals(`0)" /> als auch Ihre außer <see cref="M:System.Object.Equals(System.Object)" /> Kraft Setzung von sollten konsistente Ergebnisse zurückgeben.  
  
Wenn Sie implementieren <see cref="T:System.IEquatable`1" />, sollten Sie auch implementieren <see cref="T:System.IComparable`1" /> , wenn Instanzen des Typs sortiert oder sortiert werden können. Wenn Ihr Typ implementiert <see cref="T:System.IComparable`1" />, implementieren <see cref="T:System.IEquatable`1" />Sie fast immer auch.</para>
      <para>Beachten Sie, dass einige Entwürfe vorhanden sind, bei denen ein Typ eine Auftrags Beziehung unterstützt, aber die Gleichheit von einer Sortier Beziehung abweichen kann. Stellen Sie `Person` sich eine Klasse vor, bei der alphabetisch sortiert wird. Zwei Personen mit demselben Namen sortieren dasselbe, aber nicht die gleiche Person.</para></block>
    <altmember cref="T:System.IComparable`1" />
    <altmember cref="T:System.IComparable" />
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (T other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(!T other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IEquatable`1.Equals(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(T other);" />
      <MemberSignature Language="F#" Value="abstract member Equals : 'T -&gt; bool" Usage="iEquatable.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="T" />
      </Parameters>
      <Docs>
        <param name="other">Ein Objekt, das mit diesem Objekt verglichen werden soll.</param>
        <summary>Gibt an, ob das aktuelle Objekt gleich einem anderen Objekt des gleichen Typs ist.</summary>
        <returns><see langword="true" />, wenn das aktuelle Objekt gleich dem <paramref name="other" />-Parameter ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Implementierung <xref:System.IEquatable%601.Equals%2A> der-Methode soll einen Test auf Gleichheit mit einem anderen Objekt vom Typ `T`ausführen, und zwar mit demselben Typ wie das aktuelle Objekt. Die <xref:System.IEquatable%601.Equals(%600)> -Methode wird in den folgenden Situationen aufgerufen:  
  
-   Wenn die `Equals` -Methode aufgerufen wird und `other` das-Argument ein stark typisiertes Objekt vom `T`Typ ist. (Wenn `other` nicht vom Typ `T`ist, wird die <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> Basis Methode aufgerufen. Von den beiden Methoden <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> bietet eine etwas bessere Leistung.)  
  
-   Wenn die Suchmethoden einer Reihe generischer Auflistungs Objekte aufgerufen werden. Einige dieser Typen und ihre Methoden umfassen Folgendes:  
  
    -   Einige der generischen über Ladungen <xref:System.Array.BinarySearch%2A> der-Methode.  
  
    -   Die Suchmethoden der <xref:System.Collections.Generic.List%601> -Klasse, einschließlich <xref:System.Collections.Generic.List%601.Contains%28%600%29?displayProperty=nameWithType>, <xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType>, <xref:System.Collections.Generic.List%601.LastIndexOf%2A?displayProperty=nameWithType>und. <xref:System.Collections.Generic.List%601.Remove%2A?displayProperty=nameWithType>  
  
    -   Die Suchmethoden der <xref:System.Collections.Generic.Dictionary%602> -Klasse, einschließlich <xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A> und. <xref:System.Collections.Generic.IDictionary%602.Remove%2A>  
  
    -   Die Suchmethoden der generischen <xref:System.Collections.Generic.LinkedList%601> Klasse, einschließlich <xref:System.Collections.Generic.LinkedList%601.Contains%2A?displayProperty=nameWithType> und <xref:System.Collections.Generic.LinkedList%601.Remove%2A>.  
  
 Anders ausgedrückt: um die Möglichkeit zu behandeln, dass Objekte einer Klasse in einem Array oder einem generischen Auflistungs Objekt gespeichert werden, empfiehlt es sich, zu <xref:System.IEquatable%601> implementieren, damit das Objekt leicht identifiziert und manipuliert werden kann.  
  
 Definieren Sie bei <xref:System.IEquatable%601.Equals%2A> der Implementierung der-Methode Gleichheit entsprechend für den Typ, der vom generischen Typargument angegeben wird. Wenn das Typargument z. <xref:System.Int32>b. lautet, definieren Sie Gleichheit entsprechend für den Vergleich von 2 32-Bit-Ganzzahlen mit Vorzeichen.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt die partielle Implementierung einer `Person` Klasse, die <xref:System.IEquatable%601> implementiert und über zwei Eigenschaften `LastName` verfügt `SSN`: und. Die <xref:System.IEquatable%601.Equals%2A> -Methode `True` gibt zurück `SSN` , wenn die `Person` -Eigenschaft von zwei-Objekten identisch ist `False`, andernfalls wird zurückgegeben.  
  
 [!code-csharp[System.GenericIEquatable.Equals#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/cs/EqualsEx2.cs#3)]
 [!code-vb[System.GenericIEquatable.Equals#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/vb/EqualsEx2.vb#3)]  
  
 `Person`-Objekte können dann in einem <xref:System.Collections.Generic.List%601> -Objekt gespeichert werden und können durch die `Contains` -Methode identifiziert werden, wie im folgenden Beispiel gezeigt.  
  
 [!code-csharp[System.GenericIEquatable.Equals#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/cs/Snippet12.cs#12)]
 [!code-vb[System.GenericIEquatable.Equals#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/vb/Snippet12.vb#12)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Wenn Sie implementieren <see cref="M:System.IEquatable`1.Equals(`0)" />, sollten Sie auch die Basisklassen Implementierungen von <see cref="M:System.Object.Equals(System.Object)" /> und über <see cref="M:System.Object.GetHashCode" /> schreiben, damit ihr Verhalten mit dem <see cref="M:System.IEquatable`1.Equals(`0)" /> der-Methode konsistent ist. Wenn Sie außer Kraft <see cref="M:System.Object.Equals(System.Object)" />setzen, wird die überschriebene Implementierung auch in Aufrufen der statischen <see langword="Equals(System.Object, System.Object)" /> -Methode für die-Klasse aufgerufen. Außerdem sollten Sie die <see langword="op_Equality" /> Operatoren und <see langword="op_Inequality" /> überladen. Dadurch wird sichergestellt, dass alle Gleichheits Überprüfungen konsistente Ergebnisse zurückgeben, die im Beispiel veranschaulicht werden.</para></block>
      </Docs>
    </Member>
  </Members>
</Type>

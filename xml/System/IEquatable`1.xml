<Type Name="IEquatable&lt;T&gt;" FullName="System.IEquatable&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d13d2a1249f5f2aa09c6bbd78eb6f2931d76006f" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83499620" /></Metadata><TypeSignature Language="C#" Value="public interface IEquatable&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEquatable`1&lt;T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IEquatable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEquatable(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEquatable" />
  <TypeSignature Language="F#" Value="type IEquatable&lt;'T&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">Der Typ der zu vergleichenden Objekte.</typeparam>
    <summary>Definiert eine generalisierte Methode, die von einem Werttyp oder von einer Klasse zur Erstellung einer typspezifischen Methode implementiert wird, um die Gleichheit von Instanzen zu ermitteln.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Schnittstelle wird von Typen implementiert, deren Werte gleichgesetzt werden können (z. b. die numerischen Klassen und Zeichen folgen Klassen). Ein Werttyp oder eine Klasse implementiert die <xref:System.IEquatable%601.Equals%2A>-Methode, um eine typspezifische Methode zu erstellen, die zum Bestimmen der Gleichheit von Instanzen geeignet ist.  
  
> [!NOTE]
>  Die <xref:System.IComparable%601>-Schnittstelle definiert die <xref:System.IComparable%601.CompareTo%2A>-Methode, die die Sortierreihenfolge von Instanzen des implementierenden Typs bestimmt. Die <xref:System.IEquatable%601>-Schnittstelle definiert die <xref:System.IEquatable%601.Equals%2A>-Methode, die die Gleichheit von Instanzen des implementierenden Typs bestimmt.  
  
 Die <xref:System.IEquatable%601>-Schnittstelle wird von generischen Auflistungs Objekten, z. b. <xref:System.Collections.Generic.Dictionary%602>, <xref:System.Collections.Generic.List%601>und <xref:System.Collections.Generic.LinkedList%601>, beim Testen auf Gleichheit in Methoden wie `Contains`, `IndexOf`, `LastIndexOf`und `Remove`verwendet. Sie sollte für jedes Objekt implementiert werden, das möglicherweise in einer generischen Auflistung gespeichert ist.  
  
   
  
## Examples  
 Weitere Informationen finden Sie im Beispiel für die <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType>-Methode.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Ersetzen Sie den Typparameter der <see cref="T:System.IEquatable`1" />-Schnittstelle durch den Typ, der diese Schnittstelle implementiert.  
  
Wenn Sie <see cref="T:System.IEquatable`1" />implementieren, sollten Sie auch die Basisklassen Implementierungen von <see cref="M:System.Object.Equals(System.Object)" /> und <see cref="M:System.Object.GetHashCode" /> überschreiben, damit ihr Verhalten mit dem der <see cref="M:System.IEquatable`1.Equals(`0)" /> Methode konsistent ist. Wenn Sie <see cref="M:System.Object.Equals(System.Object)" />außer Kraft setzen, wird die überschriebene Implementierung auch in Aufrufen der statischen <see langword="Equals(System.Object, System.Object)" />-Methode für die Klasse aufgerufen. Außerdem sollten Sie die <see langword="op_Equality" />-und <see langword="op_Inequality" /> Operatoren überladen. Dadurch wird sichergestellt, dass alle Gleichheits Überprüfungen konsistente Ergebnisse zurückgeben.  
  
 <block subset="none" type="note"><para>  
 Weitere Informationen zum Überschreiben von <see cref="M:System.Object.Equals(System.Object)" />finden Sie im Artikel <see cref="M:System.Object.Equals(System.Object)" />.  
  
</para></block>  
  
 Für einen Werttyp sollten Sie immer <see cref="T:System.IEquatable`1" /> implementieren und <see cref="M:System.Object.Equals(System.Object)" /> überschreiben, um die Leistung zu verbessern. <see cref="M:System.Object.Equals(System.Object)" /> Boxes-Werttypen und basiert auf Reflektion, um zwei Werte auf Gleichheit zu vergleichen. Sowohl bei der Implementierung von <see cref="M:System.IEquatable`1.Equals(`0)" /> als auch bei der außer Kraft Setzung von <see cref="M:System.Object.Equals(System.Object)" /> sollten konsistente Ergebnisse zurückgegeben werden.  
  
Wenn Sie <see cref="T:System.IEquatable`1" />implementieren, sollten Sie auch <see cref="T:System.IComparable`1" /> implementieren, wenn Instanzen des Typs sortiert oder sortiert werden können. Wenn Ihr Typ <see cref="T:System.IComparable`1" />implementiert, implementieren Sie fast immer auch <see cref="T:System.IEquatable`1" />.</para>
      <para>Beachten Sie, dass einige Entwürfe vorhanden sind, bei denen ein Typ eine Auftrags Beziehung unterstützt, aber die Gleichheit von einer Sortier Beziehung abweichen kann. Stellen Sie sich eine `Person` Klasse vor, bei der alphabetisch sortiert wird. Zwei Personen mit demselben Namen sortieren dasselbe, aber nicht die gleiche Person.</para></block>
    <altmember cref="T:System.IComparable`1" />
    <altmember cref="T:System.IComparable" />
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (T other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(!T other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IEquatable`1.Equals(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(T other);" />
      <MemberSignature Language="F#" Value="abstract member Equals : 'T -&gt; bool" Usage="iEquatable.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="T" />
      </Parameters>
      <Docs>
        <param name="other">Ein Objekt, das mit diesem Objekt verglichen werden soll.</param>
        <summary>Gibt an, ob das aktuelle Objekt gleich einem anderen Objekt des gleichen Typs ist.</summary>
        <returns><see langword="true" />, wenn das aktuelle Objekt gleich dem <paramref name="other" />-Parameter ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Implementierung der <xref:System.IEquatable%601.Equals%2A>-Methode soll einen Test auf Gleichheit mit einem anderen Objekt vom Typ "`T`" ausführen, und zwar mit demselben Typ wie das aktuelle Objekt. Die <xref:System.IEquatable%601.Equals(%600)>-Methode wird in den folgenden Situationen aufgerufen:  
  
-   Wenn die `Equals`-Methode aufgerufen wird und das `other`-Argument ein stark typisiertes Objekt vom Typ `T`ist. (Wenn `other` nicht vom Typ `T`ist, wird die Basis-<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>-Methode aufgerufen. Von den beiden Methoden bietet <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> eine etwas bessere Leistung.)  
  
-   Wenn die Suchmethoden einer Reihe generischer Auflistungs Objekte aufgerufen werden. Einige dieser Typen und ihre Methoden umfassen Folgendes:  
  
    -   Einige der generischen über Ladungen der <xref:System.Array.BinarySearch%2A>-Methode.  
  
    -   Die Suchmethoden der <xref:System.Collections.Generic.List%601>-Klasse, einschließlich <xref:System.Collections.Generic.List%601.Contains%28%600%29?displayProperty=nameWithType>, <xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType>, <xref:System.Collections.Generic.List%601.LastIndexOf%2A?displayProperty=nameWithType>und <xref:System.Collections.Generic.List%601.Remove%2A?displayProperty=nameWithType>.  
  
    -   Die Suchmethoden der <xref:System.Collections.Generic.Dictionary%602>-Klasse, einschließlich <xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A> und <xref:System.Collections.Generic.IDictionary%602.Remove%2A>.  
  
    -   Die Suchmethoden der generischen <xref:System.Collections.Generic.LinkedList%601>-Klasse, einschließlich <xref:System.Collections.Generic.LinkedList%601.Contains%2A?displayProperty=nameWithType> und <xref:System.Collections.Generic.LinkedList%601.Remove%2A>.  
  
 Anders ausgedrückt: um die Möglichkeit zu behandeln, dass Objekte einer Klasse in einem Array oder einem generischen Auflistungs Objekt gespeichert werden, empfiehlt es sich, <xref:System.IEquatable%601> zu implementieren, damit das Objekt leicht identifiziert und manipuliert werden kann.  
  
 Wenn Sie die <xref:System.IEquatable%601.Equals%2A>-Methode implementieren, definieren Sie Gleichheit entsprechend für den Typ, der vom generischen Typargument angegeben wird. Wenn das Typargument z. b. <xref:System.Int32>ist, definieren Sie Gleichheit entsprechend für den Vergleich von 2 32-Bit-Ganzzahlen mit Vorzeichen.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt die partielle Implementierung einer `Person`-Klasse, die <xref:System.IEquatable%601> implementiert und über zwei Eigenschaften `LastName` und `SSN`verfügt. Die <xref:System.IEquatable%601.Equals%2A>-Methode gibt `True` zurück, wenn die `SSN`-Eigenschaft von zwei `Person`-Objekten identisch ist. Andernfalls wird `False`zurückgegeben.  
  
 [!code-csharp[System.GenericIEquatable.Equals#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/cs/EqualsEx2.cs#3)]
 [!code-vb[System.GenericIEquatable.Equals#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/vb/EqualsEx2.vb#3)]  
  
 `Person` Objekte können dann in einem <xref:System.Collections.Generic.List%601>-Objekt gespeichert werden und können von der `Contains`-Methode identifiziert werden, wie im folgenden Beispiel gezeigt.  
  
 [!code-csharp[System.GenericIEquatable.Equals#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/cs/Snippet12.cs#12)]
 [!code-vb[System.GenericIEquatable.Equals#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/vb/Snippet12.vb#12)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Wenn Sie <see cref="M:System.IEquatable`1.Equals(`0)" />implementieren, sollten Sie auch die Basisklassen Implementierungen von <see cref="M:System.Object.Equals(System.Object)" /> und <see cref="M:System.Object.GetHashCode" /> überschreiben, damit ihr Verhalten mit dem der <see cref="M:System.IEquatable`1.Equals(`0)" /> Methode konsistent ist. Wenn Sie <see cref="M:System.Object.Equals(System.Object)" />außer Kraft setzen, wird die überschriebene Implementierung auch in Aufrufen der statischen <see langword="Equals(System.Object, System.Object)" />-Methode für die Klasse aufgerufen. Außerdem sollten Sie die <see langword="op_Equality" />-und <see langword="op_Inequality" /> Operatoren überladen. Dadurch wird sichergestellt, dass alle Gleichheits Überprüfungen konsistente Ergebnisse zurückgeben, die im Beispiel veranschaulicht werden.</para></block>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="IEquatable&lt;T&gt;" FullName="System.IEquatable&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="18f3359483051fdd67d952480aed65e9b5f7b985" />
    <Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="11/29/2018" />
    <Meta Name="ms.locfileid" Value="52589866" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IEquatable&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEquatable`1&lt;T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IEquatable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEquatable(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEquatable" />
  <TypeSignature Language="F#" Value="type IEquatable&lt;'T&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">Der Typ der zu vergleichenden Objekte.</typeparam>
    <summary>Definiert eine generalisierte Methode, die von einem Werttyp oder von einer Klasse zur Erstellung einer typspezifischen Methode implementiert wird, um die Gleichheit von Instanzen zu ermitteln.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Schnittstelle wird von Typen implementiert, deren Werte (z. B. numerische und String-Klassen) gleichgesetzt werden können. Ein Werttyp oder einer Klasse implementiert die <xref:System.IEquatable%601.Equals%2A> Methode, um eine typspezifische-Methode zum Bestimmen der Gleichheit von Instanzen zu erstellen.  
  
> [!NOTE]
>  Die <xref:System.IComparable%601> Schnittstelle definiert die <xref:System.IComparable%601.CompareTo%2A> Methode, die die Sortierreihenfolge der Instanzen des Implementierungstyps bestimmt. Die <xref:System.IEquatable%601> Schnittstelle definiert die <xref:System.IEquatable%601.Equals%2A> Methode, die die Gleichheit von Instanzen des Implementierungstyps bestimmt.  
  
 Die <xref:System.IEquatable%601> Schnittstelle wird von der generischen Auflistungsobjekten verwendet, z. B. <xref:System.Collections.Generic.Dictionary%602>, <xref:System.Collections.Generic.List%601>, und <xref:System.Collections.Generic.LinkedList%601> beim Testen auf Gleichheit in Methoden wie `Contains`, `IndexOf`, `LastIndexOf`, und `Remove`. Sie sollten für ein beliebiges Objekt implementiert werden, die in einer generischen Auflistung gespeichert werden kann.  
  
   
  
## Examples  
 Siehe das Beispiel für die <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> Methode.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Ersetzen der Typparameter, der die <see cref="T:System.IEquatable`1" /> Schnittstelle mit dem Typ, der diese Schnittstelle implementiert.  
  
Wenn Sie implementieren <see cref="T:System.IEquatable`1" />, sollten Sie auch die Implementierungen der Basisklasse der überschreiben <see cref="M:System.Object.Equals(System.Object)" /> und <see cref="M:System.Object.GetHashCode" /> , damit ihr Verhalten konsistent mit ist der <see cref="M:System.IEquatable`1.Equals(`0)" /> Methode. Wenn Sie außer Kraft setzen <see cref="M:System.Object.Equals(System.Object)" />, die überschriebene Implementierung ist die Abkürzung in Aufrufen der statischen <see langword="Equals(System.Object, System.Object)" /> Methode in Ihrer Klasse auf. Darüber hinaus sollten Sie überladen der <see langword="op_Equality" /> und <see langword="op_Inequality" /> Operatoren. Dadurch wird sichergestellt, dass alle Tests für Gleichheit konsistente Ergebnisse zurückgeben.  
  
 <block subset="none" type="note"><para>  
 Informationen zum Überschreiben <see cref="M:System.Object.Equals(System.Object)" />, finden Sie unter den <see cref="M:System.Object.Equals(System.Object)" /> Artikel.  
  
</para></block>  
  
 Für einen Werttyp handelt, sollten Sie immer implementieren <see cref="T:System.IEquatable`1" /> und überschreiben <see cref="M:System.Object.Equals(System.Object)" /> für eine bessere Leistung. <see cref="M:System.Object.Equals(System.Object)" /> Werttypen und verwendet Reflektion, um zwei Werte hinsichtlich ihrer Gleichheit verglichen werden soll. Sowohl die Implementierung von <see cref="M:System.IEquatable`1.Equals(`0)" /> und Ihre Überschreibung der <see cref="M:System.Object.Equals(System.Object)" /> konsistente Ergebnisse zurückgeben soll.  
  
Wenn Sie implementieren <see cref="T:System.IEquatable`1" />, sollten Sie auch implementieren <see cref="T:System.IComparable`1" /> Wenn Instanzen des Typs sortiert oder sortiert werden können. Wenn Ihr Typ implementiert <see cref="T:System.IComparable`1" />, implementieren Sie fast immer auch <see cref="T:System.IEquatable`1" />.</para>
      <para>Beachten Sie, dass einige Entwürfe, in denen ein Typ mit eine Order-Beziehung unterstützt, aber auf Gleichheit ist möglicherweise eine Beziehung vom Typ Bestellung unterscheidet. Erwägen Sie eine `Person` Klasse, in dem Sie alphabetisch zu sortieren. Zwei Personen mit demselben Namen identisch zu sortieren, sind jedoch nicht dieselbe Person.</para>
    </block>
    <altmember cref="T:System.IComparable`1" />
    <altmember cref="T:System.IComparable" />
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (T other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(!T other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IEquatable`1.Equals(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(T other);" />
      <MemberSignature Language="F#" Value="abstract member Equals : 'T -&gt; bool" Usage="iEquatable.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="T" />
      </Parameters>
      <Docs>
        <param name="other">Ein Objekt, das mit diesem Objekt verglichen werden soll.</param>
        <summary>Gibt an, ob das aktuelle Objekt gleich einem anderen Objekt des gleichen Typs ist.</summary>
        <returns>
          <see langword="true" />, wenn das aktuelle Objekt gleich dem <paramref name="other" />-Parameter ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Implementierung der <xref:System.IEquatable%601.Equals%2A> Methode dient zum Ausführen eines Tests für Gleichheit mit einem anderen Objekt vom Typ `T`, denselben Typ wie das aktuelle Objekt. Die <xref:System.IEquatable%601.Equals(%600)> Methode wird aufgerufen, in den folgenden Situationen:  
  
-   Wenn die `Equals` Methode wird aufgerufen, und die `other` Argument ist ein stark typisiertes Objekt vom Typ `T`. (Wenn `other` ist nicht vom Typ `T`, der Base <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> Methode wird aufgerufen. Der beiden Methoden <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> bietet eine etwas bessere Leistung.)  
  
-   Wenn die Suchmethoden der eine Anzahl von generischen Auflistung von Objekten aufgerufen werden. Einige dieser Typen und deren Methoden umfassen Folgendes:  
  
    -   Einige generische Überladung von der <xref:System.Array.BinarySearch%2A> Methode.  
  
    -   Die Suchmethoden der <xref:System.Collections.Generic.List%601> Klasse, einschließlich <xref:System.Collections.Generic.List%601.Contains%28%600%29?displayProperty=nameWithType>, <xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType>, <xref:System.Collections.Generic.List%601.LastIndexOf%2A?displayProperty=nameWithType>, und <xref:System.Collections.Generic.List%601.Remove%2A?displayProperty=nameWithType>.  
  
    -   Die Suchmethoden der <xref:System.Collections.Generic.Dictionary%602> Klasse, einschließlich <xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A> und <xref:System.Collections.Generic.IDictionary%602.Remove%2A>.  
  
    -   Die Suchmethoden der generischen <xref:System.Collections.Generic.LinkedList%601> Klasse, einschließlich <xref:System.Collections.Generic.LinkedList%601.Contains%2A?displayProperty=nameWithType> und <xref:System.Collections.Generic.LinkedList%601.Remove%2A>.  
  
 Das heißt, behandeln Sie die Möglichkeit, dass Objekte einer Klasse in einem Array oder eine generische Auflistung-Objekt gespeichert werden, ist es eine gute Idee, implementieren Sie <xref:System.IEquatable%601> , damit das Objekt einfach identifiziert und bearbeitet werden kann.  
  
 Bei der Implementierung der <xref:System.IEquatable%601.Equals%2A> -Methode, definieren Sie Gleichheit auf den vom generischen Argument angegebenen Typ. Wenn das Typargument ist z. B. <xref:System.Int32>, definieren die Gleichheit entsprechend für den Vergleich von zwei 32-Bit-Ganzzahlen mit Vorzeichen.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt die teilweise Implementierung der ein `Person` Klasse, die implementiert <xref:System.IEquatable%601> und verfügt über zwei Eigenschaften, `LastName` und `SSN`. Die <xref:System.IEquatable%601.Equals%2A> Methodenrückgabe `True` Wenn die `SSN` -Eigenschaft zweier `Person` Objekte identisch ist; andernfalls wird `False`.  
  
 [!code-csharp[System.GenericIEquatable.Equals#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/cs/EqualsEx2.cs#3)]
 [!code-vb[System.GenericIEquatable.Equals#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/vb/EqualsEx2.vb#3)]  
  
 `Person` Objekte können dann in gespeichert werden eine <xref:System.Collections.Generic.List%601> Objekt identifiziert werden können, und wählen Sie die `Contains` Methode, wie im folgenden Beispiel gezeigt.  
  
 [!code-csharp[System.GenericIEquatable.Equals#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/cs/Snippet12.cs#12)]
 [!code-vb[System.GenericIEquatable.Equals#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/vb/Snippet12.vb#12)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Wenn Sie implementieren <see cref="M:System.IEquatable`1.Equals(`0)" />, sollten Sie auch die Implementierungen der Basisklasse der überschreiben <see cref="M:System.Object.Equals(System.Object)" /> und <see cref="M:System.Object.GetHashCode" /> , damit ihr Verhalten konsistent mit ist der <see cref="M:System.IEquatable`1.Equals(`0)" /> Methode. Wenn Sie außer Kraft setzen <see cref="M:System.Object.Equals(System.Object)" />, die überschriebene Implementierung ist die Abkürzung in Aufrufen der statischen <see langword="Equals(System.Object, System.Object)" /> Methode in Ihrer Klasse auf. Darüber hinaus sollten Sie überladen der <see langword="op_Equality" /> und <see langword="op_Inequality" /> Operatoren. Dadurch wird sichergestellt, dass alle Tests für Gleichheit konsistente Ergebnisse zurückgeben, wie das Beispiel veranschaulicht.</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>
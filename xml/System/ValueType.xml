<Type Name="ValueType" FullName="System.ValueType">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d7961a45dd5c909be4d66d64972923c01c6ef84f" /><Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="11/29/2018" /><Meta Name="ms.locfileid" Value="52589165" /></Metadata><TypeSignature Language="C#" Value="public abstract class ValueType" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit ValueType extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ValueType" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ValueType" />
  <TypeSignature Language="C++ CLI" Value="public ref class ValueType abstract" />
  <TypeSignature Language="F#" Value="type ValueType = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt die Basisklasse für Werttypen bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ValueType> überschreibt die virtuelle Methoden von <xref:System.Object> mit angemessener Implementierungen für Werttypen. Siehe auch <xref:System.Enum>, erbt von <xref:System.ValueType>.  
  
 Datentypen werden in Werttypen und Referenztypen aufgeteilt. Werttypen sind entweder Stapel zugeordneten oder Inline in einer Struktur zugeordnet. Verweistypen werden Heaps zugewiesen. Sowohl Verweis- und Werttypen sind die ultimative Basisklasse abgeleitet <xref:System.Object>. In Fällen, in denen es erforderlich, für einen Werttyp so verhält, wie ein Objekt ist, wird ein Wrapper, die den Werttyp sieht ein Verweisobjekt wird auf dem Heap zugeordnet, und der Wert des Werttyps in diese kopiert wird. Der Wrapper wird markiert, damit das System weiß, dass es sich um einen Werttyp enthält. Dieser Prozess wird als Boxing bezeichnet, und der umgekehrte Vorgang wird als unboxing bezeichnet. Boxing und unboxing können beliebigen Typs als Objekt behandelt werden soll.  
  
 Obwohl <xref:System.ValueType> ist die implizite Basisklasse für Werttypen können keine Sie erstellen Sie eine Klasse, die von erbt <xref:System.ValueType> direkt. Stattdessen einzelne Compiler bieten ein Programmiersprachen-Schlüsselwort, oder erstellen Sie (wie z. B. `struct` in C# geschrieben und `Structure`...`End Structure` in Visual Basic), um die Erstellung von Werttypen zu unterstützen.  
  
 Dient als Basisklasse für Werttypen in .NET Framework, abgesehen von den <xref:System.ValueType> Struktur wird in der Regel nicht direkt im Code verwendet. Allerdings kann es als Parameter in Methodenaufrufe möglichen Argumente auf Werttypen alle Objekte zu beschränken, oder eine Methode zur Handhabung einer Anzahl von verschiedenen Werttypen zuzulassen, verwendet werden. Im folgende Beispiel wird veranschaulicht, wie <xref:System.ValueType> verhindert, dass Verweistypen an Methoden übergeben werden. Es definiert eine Klasse namens `Utility` , enthält vier Methoden: `IsNumeric`, der angibt, ob das Argument eine Zahl ist. `IsInteger`, der angibt, ob das Argument eine ganze Zahl ist; `IsFloat`, der angibt, ob das Argument eine Gleitkommazahl; ist und `Compare`, womit die Beziehung zwischen zwei numerische Werte. In jedem Fall sind die Methodenparameter vom Typ <xref:System.ValueType>, und Verweistypen werden daran gehindert, die an die Methoden übergeben werden.  
  
 [!code-csharp[System.ValueType.Structure#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.valuetype.structure/cs/example1.cs#1)]
 [!code-vb[System.ValueType.Structure#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.valuetype.structure/vb/example1.vb#1)]  
  
 Das folgende Beispiel veranschaulicht Aufrufe der Methoden der `Utility` Klasse.  
  
 [!code-csharp[System.ValueType.Structure#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.valuetype.structure/cs/example1.cs#2)]
 [!code-vb[System.ValueType.Structure#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.valuetype.structure/vb/example1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Object" />
    <altmember cref="T:System.Enum" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ValueType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ValueType();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.ValueType" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="valueType.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Das Objekt, das mit der aktuellen Instanz verglichen werden soll.</param>
        <summary>Gibt an, ob diese Instanz und ein angegebenes Objekt gleich sind.</summary>
        <returns><see langword="true" />, wenn <paramref name="obj" /> und diese Instanz denselben Typ aufweisen und denselben Wert darstellen, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType> methodenüberschreibungen <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> und stellt die Standardimplementierung der Wertgleichheit für alle Werttypen in .NET Framework bereit.  
  
 Wenn keines der Felder der aktuellen Instanz und `obj` sind Referenztypen, die <xref:System.ValueType.Equals%2A> -Methode führt einen Byte-pro-Byte-Vergleich der beiden Objekte im Arbeitsspeicher. Andernfalls wird Reflektion zum Vergleichen von der entsprechenden Feldes von `obj` und diese Instanz.  
  
> [!TIP]
>  Insbesondere dann, wenn der Werttyp Felder, die Verweistypen sind enthält, sollten Sie Sie überschreiben die <xref:System.ValueType.Equals%28System.Object%29> Methode. Dies kann die Leistung verbessern und ermöglichen es Ihnen, die Bedeutung der Gleichheit für den Typ genauer darstellen.  
  
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a>Anmerkungen zu dieser von der [!INCLUDE[wrt](~/includes/wrt-md.md)]  
 Beim Aufrufen der <xref:System.ValueType.Equals%2A> Methode für eine [!INCLUDE[wrt](~/includes/wrt-md.md)] Struktur, ist es das Standardverhalten für Werttypen, die nicht außer Kraft setzen <xref:System.ValueType.Equals%2A>. Dies ist Teil der Unterstützung von .NET Framework für die [!INCLUDE[wrt](~/includes/wrt-md.md)] (finden Sie unter [.NET Framework Unterstützung für Windows Store-Apps und Windows-Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)). [!INCLUDE[wrt](~/includes/wrt-md.md)] Strukturen können nicht außer Kraft setzen <xref:System.ValueType.Equals%2A>, auch wenn sie mit geschrieben werden C# oder Visual Basic, da diese Methoden enthalten können. (Darüber hinaus Strukturen in der [!INCLUDE[wrt](~/includes/wrt-md.md)] selbst nicht erben <xref:System.ValueType>.) Allerdings haben sie anscheinend <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, und <xref:System.ValueType.GetHashCode%2A> Methoden ein, wenn Sie diese in Ihrem C#- oder Visual Basic-Code verwenden und .NET Framework das Standardverhalten für diese Methoden ist.  
  
   
  
## Examples  
 Im folgende Beispiel wird veranschaulicht, wie die <xref:System.ValueType.Equals%2A> Methode kann von einem abgeleiteten Typ überschrieben werden.  
  
 [!code-cpp[ValueType.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/ValueType.Equals Example/CPP/source.cpp#1)]
 [!code-csharp[ValueType.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/ValueType.Equals Example/CS/source.cs#1)]
 [!code-vb[ValueType.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ValueType.Equals Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="valueType.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt den Hashcode für diese Instanz zurück.</summary>
        <returns>Eine 32-Bit-Ganzzahl mit Vorzeichen. Diese ist der Hashcode für die Instanz.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.ValueType.GetHashCode%2A> Methode gilt für die von abgeleiteten Typen <xref:System.ValueType>. Ein oder mehrere Felder des abgeleiteten Typs wird verwendet, um den Rückgabewert zu berechnen. Wenn Sie des abgeleiteten Typs aufrufen `GetHashCode` -Methode, der Rückgabewert wahrscheinlich nicht für die Verwendung als Schlüssel in einer Hashtabelle geeignet. Darüber hinaus kann der Wert aus einem oder mehreren dieser Felder geändert wird, ungeeignet für die Verwendung in einer Hashtabelle als Schlüssel zurückgegeben werden. In beiden Fällen sollten Sie eine eigene Implementierung schreiben die <xref:System.ValueType.GetHashCode%2A> -Methode, genauer das Konzept der ein Hashcode für den Typ darstellt.  
  
 Weitere Informationen finden Sie unter <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> und <xref:System.Collections.Hashtable?displayProperty=nameWithType>.  
  
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a>Anmerkungen zu dieser von der [!INCLUDE[wrt](~/includes/wrt-md.md)]  
 Beim Aufrufen der <xref:System.ValueType.GetHashCode%2A> Methode für eine [!INCLUDE[wrt](~/includes/wrt-md.md)] Struktur, ist es das Standardverhalten für Werttypen, die nicht außer Kraft setzen <xref:System.ValueType.GetHashCode%2A>. Dies ist Teil der Unterstützung von .NET Framework für die [!INCLUDE[wrt](~/includes/wrt-md.md)] (finden Sie unter [.NET Framework Unterstützung für Windows Store-Apps und Windows-Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)). [!INCLUDE[wrt](~/includes/wrt-md.md)] Strukturen können nicht außer Kraft setzen <xref:System.ValueType.GetHashCode%2A>, auch wenn sie mit geschrieben werden C# oder Visual Basic, da diese Methoden enthalten können. (Darüber hinaus Strukturen in der [!INCLUDE[wrt](~/includes/wrt-md.md)] selbst nicht erben <xref:System.ValueType>.) Allerdings haben sie anscheinend <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, und <xref:System.ValueType.GetHashCode%2A> Methoden ein, wenn Sie diese in Ihrem C#- oder Visual Basic-Code verwenden und .NET Framework das Standardverhalten für diese Methoden ist.  
  
   
  
## Examples  
 Im folgende Beispiel wird veranschaulicht, wie die <xref:System.ValueType.GetHashCode%2A> Methode kann von einem abgeleiteten Typ überschrieben werden.  
  
 [!code-cpp[ValueType.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/ValueType.Equals Example/CPP/source.cpp#1)]
 [!code-csharp[ValueType.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/ValueType.Equals Example/CS/source.cs#1)]
 [!code-vb[ValueType.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ValueType.Equals Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="valueType.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt den voll qualifizierten Typnamen dieser Instanz zurück.</summary>
        <returns>Der vollqualifizierte Typname.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> methodenüberschreibungen der <xref:System.Object.ToString%2A?displayProperty=nameWithType> Methode und stellt die Standardimplementierung von der `ToString` -Methode für Werttypen. (Werttypen sind Typen von definiert die `struct` Schlüsselwort in C# geschrieben und von der `Structure`... `End Structure` in Visual Basic erstellen.) Funktionell die Implementierung ist jedoch das gleiche wie der <xref:System.Object.ToString%2A?displayProperty=nameWithType>: die Methode gibt den vollqualifizierten Typnamen zurück.  
  
 Werttypen, die von definiert die `struct` -Schlüsselwort in c# und die `Structure`... `End Structure` Konstrukt in Visual Basic in der Regel überschreiben die <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> Methode, um eine aussagekräftigere Zeichenfolgendarstellung des Werttyps bereitzustellen. Der Unterschied wird im folgenden Beispiel veranschaulicht. Es definiert zwei Typen mit Werten `EmployeeA` und `EmployeeB`, erstellt eine Instanz jedes und ruft seine `ToString` Methode. Da der `EmployeeA` Struktur überschreibt nicht die <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> -Methode, es zeigt nur den vollqualifizierten Typnamen. Die `EmployeeB.ToString` -Methode bietet dagegen auf aussagekräftige Informationen über das Objekt.  
  
 [!code-csharp[System.ValueType.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ValueType.ToString/cs/ToString2.cs#1)]
 [!code-vb[System.ValueType.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ValueType.ToString/vb/ToString2.vb#1)]  
  
 Beachten Sie, dass obwohl Enumerationstypen auch Werttypen sind, von Ableiten der <xref:System.Enum> Klasse, welche Außerkraftsetzungen <xref:System.ValueType.ToString%2A?displayProperty=nameWithType>.  
  
## <a name="notes-for-the-windows-runtime"></a>Anmerkungen zu dieser Version für die Windows-Runtime  
 Beim Aufrufen der <xref:System.ValueType.ToString%2A> Methode für eine [!INCLUDE[wrt](~/includes/wrt-md.md)] Struktur, ist es das Standardverhalten für Werttypen, die nicht außer Kraft setzen <xref:System.ValueType.ToString%2A>. Dies ist Teil der Unterstützung von .NET Framework für die [!INCLUDE[wrt](~/includes/wrt-md.md)] (finden Sie unter [.NET Framework Unterstützung für Windows Store-Apps und Windows-Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)). [!INCLUDE[wrt](~/includes/wrt-md.md)] Strukturen können nicht außer Kraft setzen <xref:System.ValueType.ToString%2A>, auch wenn sie mit geschrieben werden C# oder Visual Basic, da diese Methoden enthalten können. (Darüber hinaus Strukturen in der [!INCLUDE[wrt](~/includes/wrt-md.md)] selbst nicht erben <xref:System.ValueType>.) Allerdings haben sie anscheinend <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, und <xref:System.ValueType.GetHashCode%2A> Methoden ein, wenn Sie diese in Ihrem C#- oder Visual Basic-Code verwenden und .NET Framework das Standardverhalten für diese Methoden ist.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="ValueType" FullName="System.ValueType">
  <Metadata><Meta Name="ms.openlocfilehash" Value="28f1d057ec658f2384bcc5dd43aacd177553bacc" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69404369" /></Metadata><TypeSignature Language="C#" Value="public abstract class ValueType" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit ValueType extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ValueType" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ValueType" />
  <TypeSignature Language="C++ CLI" Value="public ref class ValueType abstract" />
  <TypeSignature Language="F#" Value="type ValueType = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt die Basisklasse für Werttypen bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ValueType>überschreibt die virtuellen Methoden aus <xref:System.Object> mit geeigneteren Implementierungen für Werttypen. Siehe auch <xref:System.Enum>, das von <xref:System.ValueType>erbt.  
  
 Datentypen werden in Werttypen und Verweis Typen unterteilt. Werttypen werden entweder in einem Stapel zugeordnet oder Inline in einer Struktur zugeordnet. Verweis Typen werden Heap zugeordnet. Verweis-und Werttypen werden von der Ultimate-Basis <xref:System.Object>Klasse abgeleitet. In Fällen, in denen es erforderlich ist, dass sich ein Werttyp wie ein Objekt verhält, wird ein Wrapper, der den Werttyp als Verweis Objekt ausgleicht, auf dem Heap zugeordnet, und der Wert des Werttyps wird in ihn kopiert. Der Wrapper ist so gekennzeichnet, dass das System weiß, dass es einen Werttyp enthält. Dieser Prozess wird als Boxing bezeichnet, und der umgekehrte Prozess wird als Unboxing bezeichnet. Beim Boxing und Unboxing kann jeder Typ als Objekt behandelt werden.  
  
 Obwohl <xref:System.ValueType> die implizite Basisklasse für Werttypen ist, können Sie keine Klasse erstellen, die direkt <xref:System.ValueType> von erbt. Stattdessen stellen einzelne Compiler ein sprach Schlüsselwort oder Konstrukt bereit (z `struct` . C# b `Structure`. in und...`End Structure` in Visual Basic), um die Erstellung von Werttypen zu unterstützen.  
  
 Abgesehen von der Bereitstellung als Basisklasse für Werttypen im .NET Framework wird <xref:System.ValueType> die Struktur in der Regel nicht direkt im Code verwendet. Sie kann jedoch als Parameter in Methoden aufrufen verwendet werden, um mögliche Argumente auf Werttypen anstelle von allen Objekten zu beschränken, oder um eine Methode für die Verarbeitung einer Reihe unterschiedlicher Werttypen zuzulassen. Im folgenden Beispiel wird veranschaulicht <xref:System.ValueType> , wie die Übergabe von Verweis Typen an-Methoden verhindert. Er definiert eine Klasse mit `Utility` dem Namen, die vier `IsNumeric`Methoden enthält:, die angibt, ob das Argument eine Zahl ist. `IsInteger`gibt an, ob das Argument eine ganze Zahl ist. , der angibt, ob das Argument eine Gleit Komma Zahl ist, und `Compare`, womit die Beziehung zwischen zwei numerischen Werten angegeben wird. `IsFloat` In jedem Fall sind die Methoden Parameter vom Typ <xref:System.ValueType>, und die Übergabe von Verweis Typen an die Methoden wird verhindert.  
  
 [!code-csharp[System.ValueType.Structure#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.valuetype.structure/cs/example1.cs#1)]
 [!code-vb[System.ValueType.Structure#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.valuetype.structure/vb/example1.vb#1)]  
  
 Das folgende Beispiel veranschaulicht Aufrufe der-Methoden der `Utility` -Klasse.  
  
 [!code-csharp[System.ValueType.Structure#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.valuetype.structure/cs/example1.cs#2)]
 [!code-vb[System.ValueType.Structure#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.valuetype.structure/vb/example1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Object" />
    <altmember cref="T:System.Enum" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ValueType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ValueType();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.ValueType" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="valueType.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Das Objekt, das mit der aktuellen Instanz verglichen werden soll.</param>
        <summary>Gibt an, ob diese Instanz und ein angegebenes Objekt gleich sind.</summary>
        <returns><see langword="true" />, wenn <paramref name="obj" /> und diese Instanz denselben Typ aufweisen und denselben Wert darstellen, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType> <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> -Methode überschreibt und stellt die Standard Implementierung der Wert Gleichheit für alle Werttypen in der .NET Framework bereit.  
  
 Wenn keines der Felder der aktuellen Instanz und `obj` Verweis Typen ist, führt die <xref:System.ValueType.Equals%2A> -Methode einen Byte-pro-Byte-Vergleich der beiden-Objekte im Arbeitsspeicher aus. Andernfalls wird Reflektion verwendet, um die entsprechenden Felder von `obj` und dieser Instanz zu vergleichen.  
  
> [!TIP]
>  Insbesondere wenn der Werttyp Felder enthält, die Verweis Typen sind, sollten Sie <xref:System.ValueType.Equals%28System.Object%29> die-Methode überschreiben. Dies kann die Leistung verbessern und es Ihnen ermöglichen, die Bedeutung der Gleichheit für den Typ genauer darzustellen.  
  
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a>Hinweise zum[!INCLUDE[wrt](~/includes/wrt-md.md)]  
 Wenn Sie die <xref:System.ValueType.Equals%2A> -Methode für eine [!INCLUDE[wrt](~/includes/wrt-md.md)] -Struktur aufzurufen, wird das Standardverhalten für Werttypen <xref:System.ValueType.Equals%2A>bereitstellt, die nicht überschrieben werden. Dies ist ein Teil der Unterstützung, die der .NET Framework für [!INCLUDE[wrt](~/includes/wrt-md.md)] bietet (siehe [.NET Framework-Unterstützung für Windows Store-Apps und Windows-Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)). [!INCLUDE[wrt](~/includes/wrt-md.md)]Strukturen können nicht <xref:System.ValueType.Equals%2A>außer Kraft gesetzt werden, auch wenn C# Sie mit oder Visual Basic geschrieben sind, da Sie keine Methoden aufweisen können. (Darüber hinaus erben [!INCLUDE[wrt](~/includes/wrt-md.md)] <xref:System.ValueType>Strukturen im selbst nicht.) Allerdings scheinen Sie die Methoden <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>und <xref:System.ValueType.GetHashCode%2A> zu haben, wenn Sie Sie im- C# oder-Visual Basic Code verwenden, und die .NET Framework stellt das Standardverhalten für diese Methoden bereit.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, <xref:System.ValueType.Equals%2A> wie die-Methode von einem abgeleiteten Werttyp überschrieben werden kann.  
  
 [!code-cpp[ValueType.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/ValueType.Equals Example/CPP/source.cpp#1)]
 [!code-csharp[ValueType.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/ValueType.Equals Example/CS/source.cs#1)]
 [!code-vb[ValueType.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ValueType.Equals Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="valueType.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt den Hashcode für diese Instanz zurück.</summary>
        <returns>Eine 32-Bit-Ganzzahl mit Vorzeichen. Diese ist der Hashcode für die Instanz.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.ValueType.GetHashCode%2A> -Methode gilt für Typen, <xref:System.ValueType>die von abgeleitet werden. Ein oder mehrere Felder des abgeleiteten Typs werden verwendet, um den Rückgabewert zu berechnen. Wenn Sie die- `GetHashCode` Methode des abgeleiteten Typs aufzurufen, ist der Rückgabewert wahrscheinlich nicht für die Verwendung als Schlüssel in einer Hash Tabelle geeignet. Wenn sich der Wert eines oder mehrerer dieser Felder ändert, wird der Rückgabewert möglicherweise ungeeignet für die Verwendung als Schlüssel in einer Hash Tabelle. In jedem Fall sollten Sie eine eigene Implementierung der <xref:System.ValueType.GetHashCode%2A> -Methode schreiben, die das Konzept eines Hashcodes für den Typ genauer darstellt.  
  
 Weitere Informationen finden Sie unter <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> und <xref:System.Collections.Hashtable?displayProperty=nameWithType>.  
  
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a>Hinweise zum[!INCLUDE[wrt](~/includes/wrt-md.md)]  
 Wenn Sie die <xref:System.ValueType.GetHashCode%2A> -Methode für eine [!INCLUDE[wrt](~/includes/wrt-md.md)] -Struktur aufzurufen, wird das Standardverhalten für Werttypen <xref:System.ValueType.GetHashCode%2A>bereitstellt, die nicht überschrieben werden. Dies ist ein Teil der Unterstützung, die der .NET Framework für [!INCLUDE[wrt](~/includes/wrt-md.md)] bietet (siehe [.NET Framework-Unterstützung für Windows Store-Apps und Windows-Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)). [!INCLUDE[wrt](~/includes/wrt-md.md)]Strukturen können nicht <xref:System.ValueType.GetHashCode%2A>außer Kraft gesetzt werden, auch wenn C# Sie mit oder Visual Basic geschrieben sind, da Sie keine Methoden aufweisen können. (Darüber hinaus erben [!INCLUDE[wrt](~/includes/wrt-md.md)] <xref:System.ValueType>Strukturen im selbst nicht.) Allerdings scheinen Sie die Methoden <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>und <xref:System.ValueType.GetHashCode%2A> zu haben, wenn Sie Sie im- C# oder-Visual Basic Code verwenden, und die .NET Framework stellt das Standardverhalten für diese Methoden bereit.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, <xref:System.ValueType.GetHashCode%2A> wie die-Methode von einem abgeleiteten Werttyp überschrieben werden kann.  
  
 [!code-cpp[ValueType.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/ValueType.Equals Example/CPP/source.cpp#1)]
 [!code-csharp[ValueType.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/ValueType.Equals Example/CS/source.cs#1)]
 [!code-vb[ValueType.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ValueType.Equals Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="valueType.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt den voll qualifizierten Typnamen dieser Instanz zurück.</summary>
        <returns>Der voll gekennzeichnete Typname.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> -Methode überschreibt <xref:System.Object.ToString%2A?displayProperty=nameWithType> die-Methode und stellt `ToString` die Standard Implementierung der-Methode für Werttypen bereit. (Werttypen sind Typen, die `struct` durch das C#-Schlüsselwort in `Structure`definiert werden, und durch die... `End Structure` in Visual Basic erstellen.) Funktionell ist die Implementierung jedoch identisch mit der von <xref:System.Object.ToString%2A?displayProperty=nameWithType>: die Methode gibt den voll qualifizierten Typnamen zurück.  
  
 Durch das `struct` -Schlüsselwort definierte Werttypen `Structure`in C# und... Construct in Visual Basic in der Regel <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> die-Methode überschreiben, um eine aussagekräftigere Zeichen folgen Darstellung des Werttyps bereitzustellen `End Structure` Der Unterschied wird im folgenden Beispiel veranschaulicht. Es definiert zwei Werttypen `EmployeeA` , `EmployeeB`und, erstellt eine Instanz von jedem und ruft seine `ToString` -Methode auf. Da die `EmployeeA` -Struktur die <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> -Methode nicht überschreibt, wird nur der voll qualifizierte Typname angezeigt. Die `EmployeeB.ToString` -Methode hingegen stellt sinnvolle Informationen über das-Objekt bereit.  
  
 [!code-csharp[System.ValueType.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ValueType.ToString/cs/ToString2.cs#1)]
 [!code-vb[System.ValueType.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ValueType.ToString/vb/ToString2.vb#1)]  
  
 Obwohl Enumerationstypen auch Werttypen sind, werden Sie von der <xref:System.Enum> -Klasse abgeleitet, die <xref:System.ValueType.ToString%2A?displayProperty=nameWithType>überschreibt.  
  
## <a name="notes-for-the-windows-runtime"></a>Hinweise für den Windows-Runtime  
 Wenn Sie die <xref:System.ValueType.ToString%2A> -Methode für eine [!INCLUDE[wrt](~/includes/wrt-md.md)] -Struktur aufzurufen, wird das Standardverhalten für Werttypen <xref:System.ValueType.ToString%2A>bereitstellt, die nicht überschrieben werden. Dies ist ein Teil der Unterstützung, die der .NET Framework für [!INCLUDE[wrt](~/includes/wrt-md.md)] bietet (siehe [.NET Framework-Unterstützung für Windows Store-Apps und Windows-Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)). [!INCLUDE[wrt](~/includes/wrt-md.md)]Strukturen können nicht <xref:System.ValueType.ToString%2A>außer Kraft gesetzt werden, auch wenn C# Sie mit oder Visual Basic geschrieben sind, da Sie keine Methoden aufweisen können. (Darüber hinaus erben [!INCLUDE[wrt](~/includes/wrt-md.md)] <xref:System.ValueType>Strukturen im selbst nicht.) Allerdings scheinen Sie die Methoden <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>und <xref:System.ValueType.GetHashCode%2A> zu haben, wenn Sie Sie im- C# oder-Visual Basic Code verwenden, und die .NET Framework stellt das Standardverhalten für diese Methoden bereit.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="ValueType" FullName="System.ValueType">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4d0eafe3bd4b086ee7e19efccf0b865dfe0b86c9" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78679947" /></Metadata><TypeSignature Language="C#" Value="public abstract class ValueType" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ValueType extends System.Object" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.ValueType" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ValueType" />
  <TypeSignature Language="C++ CLI" Value="public ref class ValueType abstract" />
  <TypeSignature Language="F#" Value="type ValueType = class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit ValueType extends System.Object" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt die Basisklasse für Werttypen bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ValueType> überschreibt die virtuellen Methoden <xref:System.Object> mit geeigneteren Implementierungen für Werttypen. Siehe auch <xref:System.Enum>, die von <xref:System.ValueType>erbt.  
  
 Datentypen werden in Werttypen und Verweis Typen unterteilt. Werttypen werden entweder in einem Stapel zugeordnet oder Inline in einer Struktur zugeordnet. Verweis Typen werden Heap zugeordnet. Verweis-und Werttypen werden von der Ultimate-Basisklasse <xref:System.Object>abgeleitet. In Fällen, in denen es erforderlich ist, dass sich ein Werttyp wie ein Objekt verhält, wird ein Wrapper, der den Werttyp als Verweis Objekt ausgleicht, auf dem Heap zugeordnet, und der Wert des Werttyps wird in ihn kopiert. Der Wrapper ist so gekennzeichnet, dass das System weiß, dass es einen Werttyp enthält. Dieser Prozess wird als Boxing bezeichnet, und der umgekehrte Prozess wird als Unboxing bezeichnet. Beim Boxing und Unboxing kann jeder Typ als Objekt behandelt werden.  
  
 Obwohl <xref:System.ValueType> die implizite Basisklasse für Werttypen ist, können Sie keine Klasse erstellen, die von <xref:System.ValueType> direkt erbt. Stattdessen stellen einzelne Compiler ein sprach Schlüsselwort oder Konstrukt bereit (z. b C# . `struct` in und `Structure`...`End Structure` in Visual Basic), um die Erstellung von Werttypen zu unterstützen.  
  
 Abgesehen von der Bereitstellung als Basisklasse für Werttypen im .NET Framework wird die <xref:System.ValueType> Struktur in der Regel nicht direkt im Code verwendet. Sie kann jedoch als Parameter in Methoden aufrufen verwendet werden, um mögliche Argumente auf Werttypen anstelle von allen Objekten zu beschränken, oder um eine Methode für die Verarbeitung einer Reihe unterschiedlicher Werttypen zuzulassen. Im folgenden Beispiel wird veranschaulicht, wie <xref:System.ValueType> verhindert, dass Verweis Typen an Methoden übermittelt werden. Er definiert eine Klasse mit dem Namen `Utility`, die vier Methoden enthält: `IsNumeric`, der angibt, ob das Argument eine Zahl ist. `IsInteger`, das angibt, ob das Argument eine ganze Zahl ist. `IsFloat`, das angibt, ob das Argument eine Gleit Komma Zahl ist. und `Compare`, womit die Beziehung zwischen zwei numerischen Werten angegeben wird. In jedem Fall sind die Methoden Parameter vom Typ <xref:System.ValueType>, und die Übergabe von Verweis Typen an die Methoden wird verhindert.  
  
 [!code-csharp[System.ValueType.Structure#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.valuetype.structure/cs/example1.cs#1)]
 [!code-vb[System.ValueType.Structure#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.valuetype.structure/vb/example1.vb#1)]  
  
 Das folgende Beispiel veranschaulicht Aufrufe der-Methoden der `Utility`-Klasse.  
  
 [!code-csharp[System.ValueType.Structure#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.valuetype.structure/cs/example1.cs#2)]
 [!code-vb[System.ValueType.Structure#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.valuetype.structure/vb/example1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Object" />
    <altmember cref="T:System.Enum" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ValueType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ValueType();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der Klasse <see cref="T:System.ValueType" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="valueType.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Das Objekt, das mit der aktuellen Instanz verglichen werden soll.</param>
        <summary>Gibt an, ob diese Instanz und ein angegebenes Objekt gleich sind.</summary>
        <returns><see langword="true" />, wenn <paramref name="obj" /> und diese Instanz denselben Typ aufweisen und denselben Wert darstellen, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType>-Methode überschreibt <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> und stellt die Standard Implementierung der Wert Gleichheit für alle Werttypen im .NET Framework bereit.  
  
 Die Standard Implementierung ruft <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> für jedes Feld der aktuellen Instanz auf und `obj` und gibt `true` zurück, wenn alle Felder gleich sind.
  
> [!TIP]
>  Insbesondere wenn der Werttyp Felder enthält, die Verweis Typen sind, sollten Sie die <xref:System.ValueType.Equals%28System.Object%29>-Methode überschreiben. Dies kann die Leistung verbessern und es Ihnen ermöglichen, die Bedeutung der Gleichheit für den Typ genauer darzustellen.  
  
## <a name="notes-for-the-wrt"></a>Hinweise für den [!INCLUDE[wrt](~/includes/wrt-md.md)]  
 Wenn Sie die <xref:System.ValueType.Equals%2A>-Methode für eine [!INCLUDE[wrt](~/includes/wrt-md.md)] Struktur aufzurufen, wird das Standardverhalten für Werttypen bereitstellt, die <xref:System.ValueType.Equals%2A>nicht überschreiben. Dies ist ein Teil der Unterstützung, die der .NET Framework für die [!INCLUDE[wrt](~/includes/wrt-md.md)] bietet (siehe [.NET Framework Support für Windows Store-Apps und Windows-Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)). [!INCLUDE[wrt](~/includes/wrt-md.md)] Strukturen können <xref:System.ValueType.Equals%2A>nicht überschreiben, auch wenn Sie mit C# oder Visual Basic geschrieben sind, da Sie keine Methoden aufweisen können. (Darüber hinaus erben Strukturen im [!INCLUDE[wrt](~/includes/wrt-md.md)] selbst nicht <xref:System.ValueType>.) Sie scheinen jedoch <xref:System.ValueType.ToString%2A>-, <xref:System.ValueType.Equals%2A>-und <xref:System.ValueType.GetHashCode%2A>-Methoden zu haben, wenn Sie Sie im C# -oder-Visual Basic Code verwenden, und das .NET Framework stellt das Standardverhalten für diese Methoden bereit.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie die <xref:System.ValueType.Equals%2A> Methode von einem abgeleiteten Werttyp überschrieben werden kann.  
  
 [!code-cpp[ValueType.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/ValueType.Equals Example/CPP/source.cpp#1)]
 [!code-csharp[ValueType.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/ValueType.Equals Example/CS/source.cs#1)]
 [!code-vb[ValueType.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ValueType.Equals Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="valueType.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt den Hashcode für diese Instanz zurück.</summary>
        <returns>Eine 32-Bit-Ganzzahl mit Vorzeichen, die den Hashcode für diese Instanz darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.ValueType.GetHashCode%2A>-Methode gilt für Typen, die von <xref:System.ValueType>abgeleitet werden. Ein oder mehrere Felder des abgeleiteten Typs werden verwendet, um den Rückgabewert zu berechnen. Wenn Sie die `GetHashCode`-Methode des abgeleiteten Typs aufzurufen, ist der Rückgabewert wahrscheinlich nicht für die Verwendung als Schlüssel in einer Hash Tabelle geeignet. Wenn sich der Wert eines oder mehrerer dieser Felder ändert, wird der Rückgabewert möglicherweise ungeeignet für die Verwendung als Schlüssel in einer Hash Tabelle. In jedem Fall sollten Sie eine eigene Implementierung der <xref:System.ValueType.GetHashCode%2A>-Methode schreiben, die das Konzept eines Hashcodes für den Typ genauer darstellt.  
  
 Weitere Informationen finden Sie unter <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> und <xref:System.Collections.Hashtable?displayProperty=nameWithType>.  
  
## <a name="notes-for-the-wrt"></a>Hinweise für den [!INCLUDE[wrt](~/includes/wrt-md.md)]  
 Wenn Sie die <xref:System.ValueType.GetHashCode%2A>-Methode für eine [!INCLUDE[wrt](~/includes/wrt-md.md)] Struktur aufzurufen, wird das Standardverhalten für Werttypen bereitstellt, die <xref:System.ValueType.GetHashCode%2A>nicht überschreiben. Dies ist ein Teil der Unterstützung, die der .NET Framework für die [!INCLUDE[wrt](~/includes/wrt-md.md)] bietet (siehe [.NET Framework Support für Windows Store-Apps und Windows-Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)). [!INCLUDE[wrt](~/includes/wrt-md.md)] Strukturen können <xref:System.ValueType.GetHashCode%2A>nicht überschreiben, auch wenn Sie mit C# oder Visual Basic geschrieben sind, da Sie keine Methoden aufweisen können. (Darüber hinaus erben Strukturen im [!INCLUDE[wrt](~/includes/wrt-md.md)] selbst nicht <xref:System.ValueType>.) Sie scheinen jedoch <xref:System.ValueType.ToString%2A>-, <xref:System.ValueType.Equals%2A>-und <xref:System.ValueType.GetHashCode%2A>-Methoden zu haben, wenn Sie Sie im C# -oder-Visual Basic Code verwenden, und das .NET Framework stellt das Standardverhalten für diese Methoden bereit.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie die <xref:System.ValueType.GetHashCode%2A> Methode von einem abgeleiteten Werttyp überschrieben werden kann.  
  
 [!code-cpp[ValueType.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/ValueType.Equals Example/CPP/source.cpp#1)]
 [!code-csharp[ValueType.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/ValueType.Equals Example/CS/source.cs#1)]
 [!code-vb[ValueType.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ValueType.Equals Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="valueType.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt den vollqualifizierten Typnamen dieser Instanz zurück.</summary>
        <returns>Der vollqualifizierte Typname.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.ValueType.ToString%2A?displayProperty=nameWithType>-Methode überschreibt die <xref:System.Object.ToString%2A?displayProperty=nameWithType>-Methode und stellt die Standard Implementierung der `ToString`-Methode für Werttypen bereit. (Werttypen sind Typen, die durch das `struct` C#-Schlüsselwort in und das `Structure`...`End Structure`-Konstrukt in Visual Basic definiert sind.) Funktionell ist die Implementierung jedoch identisch mit der von <xref:System.Object.ToString%2A?displayProperty=nameWithType>: die Methode gibt den voll qualifizierten Typnamen zurück.  
  
 Werttypen, die durch das `struct` C# -Schlüsselwort in und das `Structure`...`End Structure`-Konstrukt in Visual Basic definiert sind, überschreiben normalerweise die <xref:System.ValueType.ToString%2A?displayProperty=nameWithType>-Methode, um eine aussagekräftigere Zeichen folgen Darstellung des wertt Der Unterschied wird im folgenden Beispiel veranschaulicht. Er definiert zwei Werttypen, `EmployeeA` und `EmployeeB`, erstellt eine Instanz von jedem und ruft seine `ToString`-Methode auf. Da die `EmployeeA` Struktur die <xref:System.ValueType.ToString%2A?displayProperty=nameWithType>-Methode nicht außer Kraft setzt, wird nur der voll qualifizierte Typname angezeigt. Die `EmployeeB.ToString`-Methode hingegen stellt sinnvolle Informationen über das Objekt bereit.  
  
 [!code-csharp[System.ValueType.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ValueType.ToString/cs/ToString2.cs#1)]
 [!code-vb[System.ValueType.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ValueType.ToString/vb/ToString2.vb#1)]  
  
 Beachten Sie Folgendes: Obwohl Enumerationstypen auch Werttypen sind, werden Sie von der <xref:System.Enum>-Klasse abgeleitet, die <xref:System.ValueType.ToString%2A?displayProperty=nameWithType>überschreibt.  
  
## <a name="notes-for-the-windows-runtime"></a>Hinweise für den Windows-Runtime  
 Wenn Sie die <xref:System.ValueType.ToString%2A>-Methode für eine [!INCLUDE[wrt](~/includes/wrt-md.md)] Struktur aufzurufen, wird das Standardverhalten für Werttypen bereitstellt, die <xref:System.ValueType.ToString%2A>nicht überschreiben. Dies ist ein Teil der Unterstützung, die der .NET Framework für die [!INCLUDE[wrt](~/includes/wrt-md.md)] bietet (siehe [.NET Framework Support für Windows Store-Apps und Windows-Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)). [!INCLUDE[wrt](~/includes/wrt-md.md)] Strukturen können <xref:System.ValueType.ToString%2A>nicht überschreiben, auch wenn Sie mit C# oder Visual Basic geschrieben sind, da Sie keine Methoden aufweisen können. (Darüber hinaus erben Strukturen im [!INCLUDE[wrt](~/includes/wrt-md.md)] selbst nicht <xref:System.ValueType>.) Sie scheinen jedoch <xref:System.ValueType.ToString%2A>-, <xref:System.ValueType.Equals%2A>-und <xref:System.ValueType.GetHashCode%2A>-Methoden zu haben, wenn Sie Sie im C# -oder-Visual Basic Code verwenden, und das .NET Framework stellt das Standardverhalten für diese Methoden bereit.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

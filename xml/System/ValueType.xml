<Type Name="ValueType" FullName="System.ValueType">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3b756fc1621dab1597966503a0af93b3c8478663" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ValueType" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit ValueType extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ValueType" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ValueType" />
  <TypeSignature Language="C++ CLI" Value="public ref class ValueType abstract" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="aecd8-101">Stellt die Basisklasse für Werttypen bereit.</span>
      <span class="sxs-lookup">
        <span data-stu-id="aecd8-101">Provides the base class for value types.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aecd8-102"><xref:System.ValueType> überschreibt die virtuelle Methoden aus <xref:System.Object> mit geeigneter Implementierungen für Werttypen.</span><span class="sxs-lookup"><span data-stu-id="aecd8-102"><xref:System.ValueType> overrides the virtual methods from <xref:System.Object> with more appropriate implementations for value types.</span></span> <span data-ttu-id="aecd8-103">Siehe auch <xref:System.Enum>, erbt die <xref:System.ValueType>.</span><span class="sxs-lookup"><span data-stu-id="aecd8-103">See also <xref:System.Enum>, which inherits from <xref:System.ValueType>.</span></span>  
  
 <span data-ttu-id="aecd8-104">Datentypen werden in Werttypen und Verweistypen aufgeteilt.</span><span class="sxs-lookup"><span data-stu-id="aecd8-104">Data types are separated into value types and reference types.</span></span> <span data-ttu-id="aecd8-105">Werttypen sind entweder Stapel zugeordneten oder Inline in einer Struktur zugewiesen.</span><span class="sxs-lookup"><span data-stu-id="aecd8-105">Value types are either stack-allocated or allocated inline in a structure.</span></span> <span data-ttu-id="aecd8-106">Verweistypen werden Heaps zugewiesen.</span><span class="sxs-lookup"><span data-stu-id="aecd8-106">Reference types are heap-allocated.</span></span> <span data-ttu-id="aecd8-107">Typen von Verweis- und die übergeordnete Basisklasse abgeleitet sind <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="aecd8-107">Both reference and value types are derived from the ultimate base class <xref:System.Object>.</span></span> <span data-ttu-id="aecd8-108">In Fällen, in denen es für einen Werttyp an verhält sich wie ein Objekt erforderlich ist, wird ein Wrapper, der den Werttyp anscheinend ein Verweis-Objekt ist auf dem Heap reserviert und wird der Werttyp Wert hinein kopiert.</span><span class="sxs-lookup"><span data-stu-id="aecd8-108">In cases where it is necessary for a value type to behave like an object, a wrapper that makes the value type look like a reference object is allocated on the heap, and the value type's value is copied into it.</span></span> <span data-ttu-id="aecd8-109">Die Wrapper wird markiert, damit das System weiß, dass es sich um einen Werttyp enthält.</span><span class="sxs-lookup"><span data-stu-id="aecd8-109">The wrapper is marked so the system knows that it contains a value type.</span></span> <span data-ttu-id="aecd8-110">Dieser Prozess wird als Boxing bezeichnet, und der umgekehrte Vorgang wird als unboxing bezeichnet.</span><span class="sxs-lookup"><span data-stu-id="aecd8-110">This process is known as boxing, and the reverse process is known as unboxing.</span></span> <span data-ttu-id="aecd8-111">Boxing und unboxing können einen beliebigen Typ als ein Objekt behandelt werden soll.</span><span class="sxs-lookup"><span data-stu-id="aecd8-111">Boxing and unboxing allow any type to be treated as an object.</span></span>  
  
 <span data-ttu-id="aecd8-112">Obwohl <xref:System.ValueType> ist die implizite Basisklasse für Werttypen, können nicht Sie erstellen Sie eine Klasse, die von erben <xref:System.ValueType> direkt.</span><span class="sxs-lookup"><span data-stu-id="aecd8-112">Although <xref:System.ValueType> is the implicit base class for value types, you cannot create a class that inherits from <xref:System.ValueType> directly.</span></span> <span data-ttu-id="aecd8-113">Stattdessen einzelne Compiler geben Sie ein Schlüsselwort oder zu erstellen (z. B. `struct` in C# geschrieben und `Structure`...`End Structure`</span><span class="sxs-lookup"><span data-stu-id="aecd8-113">Instead, individual compilers provide a language keyword or construct (such as `struct` in C# and `Structure`…`End Structure`</span></span> <span data-ttu-id="aecd8-114">in Visual Basic) unterstützen die Erstellung von Werttypen.</span><span class="sxs-lookup"><span data-stu-id="aecd8-114">in Visual Basic) to support the creation of value types.</span></span>  
  
 <span data-ttu-id="aecd8-115">Abgesehen von dient als Basisklasse für Werttypen in .NET Framework die <xref:System.ValueType> Struktur wird in der Regel nicht direkt im Code verwendet.</span><span class="sxs-lookup"><span data-stu-id="aecd8-115">Aside from serving as the base class for value types in the .NET Framework, the <xref:System.ValueType> structure is generally not used directly in code.</span></span> <span data-ttu-id="aecd8-116">Allerdings können sie als Parameter in Methodenaufrufen möglichen Argumente in Werttypen anstelle aller Objekte eingeschränkt werden, oder eine Methode zur Handhabung einer Anzahl von verschiedenen Werttypen gestatten verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="aecd8-116">However, it can be used as a parameter in method calls to restrict possible arguments to value types instead of all objects, or to permit a method to handle a number of different value types.</span></span> <span data-ttu-id="aecd8-117">Im folgende Beispiel wird veranschaulicht, wie <xref:System.ValueType> verhindert, dass Verweistypen an Methoden übergeben werden.</span><span class="sxs-lookup"><span data-stu-id="aecd8-117">The following example illustrates how <xref:System.ValueType> prevents reference types from being passed to methods.</span></span> <span data-ttu-id="aecd8-118">Definiert eine Klasse namens `Utility` , enthält vier Methoden: `IsNumeric`, der angibt, ob das Argument eine Zahl ist. `IsInteger`, der angibt, ob das Argument eine ganze Zahl ist; `IsFloat`, der angibt, ob das Argument eine Gleitkommazahl; ist und `Compare`, gibt die Beziehung zwischen zwei numerische Werte an.</span><span class="sxs-lookup"><span data-stu-id="aecd8-118">It defines a class named `Utility` that contains four methods: `IsNumeric`, which indicates whether its argument is a number; `IsInteger`, which indicates whether its argument is an integer; `IsFloat`, which indicates whether its argument is a floating-point number; and `Compare`, which indicates the relationship between two numeric values.</span></span> <span data-ttu-id="aecd8-119">In jedem Fall werden die Methodenparameter des Typs <xref:System.ValueType>, und Verweistypen werden daran gehindert, die an die Methode übergeben werden.</span><span class="sxs-lookup"><span data-stu-id="aecd8-119">In each case, the method parameters are of type <xref:System.ValueType>, and reference types are prevented from being passed to the methods.</span></span>  
  
 [!code-csharp[System.ValueType.Structure#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.valuetype.structure/cs/example1.cs#1)]
 [!code-vb[System.ValueType.Structure#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.valuetype.structure/vb/example1.vb#1)]  
  
 <span data-ttu-id="aecd8-120">Das folgende Beispiel veranschaulicht Aufrufe der Methoden von der `Utility` Klasse.</span><span class="sxs-lookup"><span data-stu-id="aecd8-120">The following example illustrates calls to the methods of the `Utility` class.</span></span>  
  
 [!code-csharp[System.ValueType.Structure#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.valuetype.structure/cs/example1.cs#2)]
 [!code-vb[System.ValueType.Structure#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.valuetype.structure/vb/example1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Object" />
    <altmember cref="T:System.Enum" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ValueType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ValueType();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="aecd8-121">Initialisiert eine neue Instanz der <see cref="T:System.ValueType" />-Klasse.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aecd8-121">Initializes a new instance of the <see cref="T:System.ValueType" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="aecd8-122">Das Objekt, das mit der aktuellen Instanz verglichen werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aecd8-122">The object to compare with the current instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="aecd8-123">Gibt an, ob diese Instanz und ein angegebenes Objekt gleich sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aecd8-123">Indicates whether this instance and a specified object are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="aecd8-124">
            <see langword="true" />, wenn <paramref name="obj" /> und diese Instanz denselben Typ aufweisen und denselben Wert darstellen, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aecd8-124">
              <see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aecd8-125">Die <xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType> methodenüberschreibungen <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> und stellt die Standardimplementierung von Wertgleichheit für alle Typen in .NET Framework bereit.</span><span class="sxs-lookup"><span data-stu-id="aecd8-125">The <xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType> method overrides <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> and provides the default implementation of value equality for all value types in the .NET Framework.</span></span>  
  
 <span data-ttu-id="aecd8-126">Wenn keines der Felder der aktuellen Instanz und `obj` sind Referenztypen, die <xref:System.ValueType.Equals%2A> -Methode führt einen Byte-pro-Byte-Vergleich der beiden Objekte im Arbeitsspeicher.</span><span class="sxs-lookup"><span data-stu-id="aecd8-126">If none of the fields of the current instance and `obj` are reference types, the <xref:System.ValueType.Equals%2A> method performs a byte-by-byte comparison of the two objects in memory.</span></span> <span data-ttu-id="aecd8-127">Andernfalls es Reflektion verwendet, um den entsprechenden Feldern von Vergleichen `obj` und dieser Instanz.</span><span class="sxs-lookup"><span data-stu-id="aecd8-127">Otherwise, it uses reflection to compare the corresponding fields of `obj` and this instance.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="aecd8-128">Insbesondere, wenn der Werttyp Felder, die Verweistypen sind enthält, sollten Sie überschreiben die <xref:System.ValueType.Equals%28System.Object%29> Methode.</span><span class="sxs-lookup"><span data-stu-id="aecd8-128">Particularly if your value type contains fields that are reference types, you should override the <xref:System.ValueType.Equals%28System.Object%29> method.</span></span> <span data-ttu-id="aecd8-129">Dies kann die Leistung verbessern und ermöglichen es Ihnen, die Bedeutung der Gleichheit für den Typ genauer darstellen.</span><span class="sxs-lookup"><span data-stu-id="aecd8-129">This can improve performance and enable you to more closely represent the meaning of equality for the type.</span></span>  
  
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a><span data-ttu-id="aecd8-130">Hinweise für die [!INCLUDE[wrt](~/includes/wrt-md.md)]</span><span class="sxs-lookup"><span data-stu-id="aecd8-130">Notes for the [!INCLUDE[wrt](~/includes/wrt-md.md)]</span></span>  
 <span data-ttu-id="aecd8-131">Beim Aufrufen der <xref:System.ValueType.Equals%2A> Methode auf eine [!INCLUDE[wrt](~/includes/wrt-md.md)] -Struktur, stellt er das Standardverhalten für Werttypen, die nicht außer Kraft setzen <xref:System.ValueType.Equals%2A>.</span><span class="sxs-lookup"><span data-stu-id="aecd8-131">When you call the <xref:System.ValueType.Equals%2A> method on a [!INCLUDE[wrt](~/includes/wrt-md.md)] structure, it provides the default behavior for value types that don’t override <xref:System.ValueType.Equals%2A>.</span></span> <span data-ttu-id="aecd8-132">Dies ist Teil der Unterstützung von .NET Framework für die [!INCLUDE[wrt](~/includes/wrt-md.md)] (siehe [.NET Framework Unterstützung für Windows Store-Apps und Windows-Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)).</span><span class="sxs-lookup"><span data-stu-id="aecd8-132">This is part of the support that the .NET Framework provides for the [!INCLUDE[wrt](~/includes/wrt-md.md)] (see [.NET Framework Support for Windows Store Apps and Windows Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)).</span></span> [!INCLUDE[wrt](~/includes/wrt-md.md)]<span data-ttu-id="aecd8-133"> Strukturen können nicht überschreiben <xref:System.ValueType.Equals%2A>, selbst wenn sie mit c# oder Visual Basic geschrieben sind, da diese Methoden besitzen dürfen.</span><span class="sxs-lookup"><span data-stu-id="aecd8-133"> structures can’t override <xref:System.ValueType.Equals%2A>, even if they’re written with C# or Visual Basic, because they can’t have methods.</span></span> <span data-ttu-id="aecd8-134">(Darüber hinaus Strukturen in den [!INCLUDE[wrt](~/includes/wrt-md.md)] selbst nicht erben <xref:System.ValueType>.) Allerdings sie angezeigt werden, damit <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, und <xref:System.ValueType.GetHashCode%2A> Methoden, wenn Sie in c# oder Visual Basic-Code werden verwendet, und die .NET Framework das Standardverhalten für diese Methoden bietet.</span><span class="sxs-lookup"><span data-stu-id="aecd8-134">(In addition, structures in the [!INCLUDE[wrt](~/includes/wrt-md.md)] itself don’t inherit <xref:System.ValueType>.) However, they appear to have <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, and <xref:System.ValueType.GetHashCode%2A> methods when you use them in your C# or Visual Basic code, and the .NET Framework provides the default behavior for these methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aecd8-135">Im folgende Beispiel wird veranschaulicht, wie die <xref:System.ValueType.Equals%2A> Methode kann durch einen abgeleiteten Typ überschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="aecd8-135">The following example demonstrates how the <xref:System.ValueType.Equals%2A> method can be overridden by a derived value type.</span></span>  
  
 [!code-cpp[ValueType.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/ValueType.Equals Example/CPP/source.cpp#1)]
 [!code-csharp[ValueType.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/ValueType.Equals Example/CS/source.cs#1)]
 [!code-vb[ValueType.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ValueType.Equals Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="aecd8-136">Gibt den Hashcode für diese Instanz zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aecd8-136">Returns the hash code for this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="aecd8-137">Eine 32-Bit-Ganzzahl mit Vorzeichen. Diese ist der Hashcode für die Instanz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aecd8-137">A 32-bit signed integer that is the hash code for this instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aecd8-138">Die <xref:System.ValueType.GetHashCode%2A> Methode gilt für abgeleitet Typen <xref:System.ValueType>.</span><span class="sxs-lookup"><span data-stu-id="aecd8-138">The <xref:System.ValueType.GetHashCode%2A> method applies to types derived from <xref:System.ValueType>.</span></span> <span data-ttu-id="aecd8-139">Ein oder mehrere Felder des abgeleiteten Typs wird verwendet, um den Rückgabewert zu berechnen.</span><span class="sxs-lookup"><span data-stu-id="aecd8-139">One or more fields of the derived type is used to calculate the return value.</span></span> <span data-ttu-id="aecd8-140">Wenn Sie des abgeleiteten Typs aufrufen `GetHashCode` -Methode, der Rückgabewert wahrscheinlich nicht für die Verwendung als Schlüssel in einer Hashtabelle geeignet sein.</span><span class="sxs-lookup"><span data-stu-id="aecd8-140">If you call the derived type's `GetHashCode` method, the return value is not likely to be suitable for use as a key in a hash table.</span></span> <span data-ttu-id="aecd8-141">Darüber hinaus kann Änderung des Werts aus einem oder mehreren dieser Felder nicht geeignet für die Verwendung in einer Hashtabelle als Schlüssel zurückgegeben werden.</span><span class="sxs-lookup"><span data-stu-id="aecd8-141">Additionally, if the value of one or more of those fields changes, the return value might become unsuitable for use as a key in a hash table.</span></span> <span data-ttu-id="aecd8-142">In beiden Fällen sollten Sie Ihre eigene Implementierung der die <xref:System.ValueType.GetHashCode%2A> Methode, die das Konzept der ein Hashcode für den Typ genauer darstellt.</span><span class="sxs-lookup"><span data-stu-id="aecd8-142">In either case, consider writing your own implementation of the <xref:System.ValueType.GetHashCode%2A> method that more closely represents the concept of a hash code for the type.</span></span>  
  
 <span data-ttu-id="aecd8-143">Weitere Informationen finden Sie unter <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> und <xref:System.Collections.Hashtable?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="aecd8-143">For more information, see <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>, and <xref:System.Collections.Hashtable?displayProperty=nameWithType>.</span></span>  
  
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a><span data-ttu-id="aecd8-144">Hinweise für die [!INCLUDE[wrt](~/includes/wrt-md.md)]</span><span class="sxs-lookup"><span data-stu-id="aecd8-144">Notes for the [!INCLUDE[wrt](~/includes/wrt-md.md)]</span></span>  
 <span data-ttu-id="aecd8-145">Beim Aufrufen der <xref:System.ValueType.GetHashCode%2A> Methode auf eine [!INCLUDE[wrt](~/includes/wrt-md.md)] -Struktur, stellt er das Standardverhalten für Werttypen, die nicht außer Kraft setzen <xref:System.ValueType.GetHashCode%2A>.</span><span class="sxs-lookup"><span data-stu-id="aecd8-145">When you call the <xref:System.ValueType.GetHashCode%2A> method on a [!INCLUDE[wrt](~/includes/wrt-md.md)] structure, it provides the default behavior for value types that don’t override <xref:System.ValueType.GetHashCode%2A>.</span></span> <span data-ttu-id="aecd8-146">Dies ist Teil der Unterstützung von .NET Framework für die [!INCLUDE[wrt](~/includes/wrt-md.md)] (siehe [.NET Framework Unterstützung für Windows Store-Apps und Windows-Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)).</span><span class="sxs-lookup"><span data-stu-id="aecd8-146">This is part of the support that the .NET Framework provides for the [!INCLUDE[wrt](~/includes/wrt-md.md)] (see [.NET Framework Support for Windows Store Apps and Windows Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)).</span></span> [!INCLUDE[wrt](~/includes/wrt-md.md)]<span data-ttu-id="aecd8-147"> Strukturen können nicht überschreiben <xref:System.ValueType.GetHashCode%2A>, selbst wenn sie mit c# oder Visual Basic geschrieben sind, da diese Methoden besitzen dürfen.</span><span class="sxs-lookup"><span data-stu-id="aecd8-147"> structures can’t override <xref:System.ValueType.GetHashCode%2A>, even if they’re written with C# or Visual Basic, because they can’t have methods.</span></span> <span data-ttu-id="aecd8-148">(Darüber hinaus Strukturen in den [!INCLUDE[wrt](~/includes/wrt-md.md)] selbst nicht erben <xref:System.ValueType>.) Allerdings sie angezeigt werden, damit <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, und <xref:System.ValueType.GetHashCode%2A> Methoden, wenn Sie in c# oder Visual Basic-Code werden verwendet, und die .NET Framework das Standardverhalten für diese Methoden bietet.</span><span class="sxs-lookup"><span data-stu-id="aecd8-148">(In addition, structures in the [!INCLUDE[wrt](~/includes/wrt-md.md)] itself don’t inherit <xref:System.ValueType>.) However, they appear to have <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, and <xref:System.ValueType.GetHashCode%2A> methods when you use them in your C# or Visual Basic code, and the .NET Framework provides the default behavior for these methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aecd8-149">Im folgende Beispiel wird veranschaulicht, wie die <xref:System.ValueType.GetHashCode%2A> Methode kann durch einen abgeleiteten Typ überschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="aecd8-149">The following example demonstrates how the <xref:System.ValueType.GetHashCode%2A> method can be overridden by a derived value type.</span></span>  
  
 [!code-cpp[ValueType.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/ValueType.Equals Example/CPP/source.cpp#1)]
 [!code-csharp[ValueType.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/ValueType.Equals Example/CS/source.cs#1)]
 [!code-vb[ValueType.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ValueType.Equals Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="aecd8-150">Gibt den voll qualifizierten Typnamen dieser Instanz zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aecd8-150">Returns the fully qualified type name of this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="aecd8-151">Der vollqualifizierte Typname.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aecd8-151">The fully qualified type name.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aecd8-152">Die <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> methodenüberschreibungen der <xref:System.Object.ToString%2A?displayProperty=nameWithType> Methode und stellt die Standardimplementierung von der `ToString` Methode für Werttypen.</span><span class="sxs-lookup"><span data-stu-id="aecd8-152">The <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> method overrides the <xref:System.Object.ToString%2A?displayProperty=nameWithType> method and provides the default implementation of the `ToString` method for value types.</span></span> <span data-ttu-id="aecd8-153">(Werttypen sind Typen, die definiert, indem Sie die `struct` Schlüsselwort in C# geschrieben und von der `Structure`... `End Structure` in Visual Basic erstellen.) Funktionell die Implementierung ist jedoch das gleiche wie der <xref:System.Object.ToString%2A?displayProperty=nameWithType>: die Methode gibt den voll qualifizierten Typnamen zurück.</span><span class="sxs-lookup"><span data-stu-id="aecd8-153">(Value types are types defined by the `struct` keyword in C#, and by the `Structure`...`End Structure` construct in Visual Basic.) Functionally, however, the implementation is that same as that of <xref:System.Object.ToString%2A?displayProperty=nameWithType>: the method returns the fully qualified type name.</span></span>  
  
 <span data-ttu-id="aecd8-154">Werttypen, die definiert, indem Sie die `struct` -Schlüsselwort in c# und die `Structure`... `End Structure` Konstrukt in Visual Basic in der Regel überschreiben die <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> Methode, um eine aussagekräftigere Zeichenfolgendarstellung des Werttyps bereitzustellen.</span><span class="sxs-lookup"><span data-stu-id="aecd8-154">Value types defined by the `struct` keyword in C# and the `Structure`...`End Structure` construct in Visual Basic typically override the <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> method to provide a more meaningful string representation of the value type.</span></span> <span data-ttu-id="aecd8-155">Der Unterschied wird im folgenden Beispiel veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="aecd8-155">The following example illustrates the difference.</span></span> <span data-ttu-id="aecd8-156">Er definiert zwei Werttypen `EmployeeA` und `EmployeeB`, erstellt eine Instanz von jeder und ruft seine `ToString` Methode.</span><span class="sxs-lookup"><span data-stu-id="aecd8-156">It defines two value types, `EmployeeA` and `EmployeeB`, creates an instance of each, and calls its `ToString` method.</span></span> <span data-ttu-id="aecd8-157">Da die `EmployeeA` überschreibt die Struktur nicht die <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> -Methode, es zeigt nur den voll qualifizierten Typnamen an.</span><span class="sxs-lookup"><span data-stu-id="aecd8-157">Because the `EmployeeA` structure does not override the <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> method, it displays only the fully qualified type name.</span></span> <span data-ttu-id="aecd8-158">Die `EmployeeB.ToString` -Methode, andererseits, aussagekräftige Informationen über das Objekt enthält.</span><span class="sxs-lookup"><span data-stu-id="aecd8-158">The `EmployeeB.ToString` method, on the other hand, provides meaningful information about the object.</span></span>  
  
 [!code-csharp[System.ValueType.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ValueType.ToString/cs/ToString2.cs#1)]
 [!code-vb[System.ValueType.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ValueType.ToString/vb/ToString2.vb#1)]  
  
 <span data-ttu-id="aecd8-159">Beachten Sie, dass obwohl Enumerationstypen auch Werttypen sind, von Ableiten der <xref:System.Enum> Klasse, welche Außerkraftsetzungen <xref:System.ValueType.ToString%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="aecd8-159">Note that, although enumeration types are also value types, they derive from the <xref:System.Enum> class, which overrides  <xref:System.ValueType.ToString%2A?displayProperty=nameWithType>.</span></span>  
  
## <a name="notes-for-the-windows-runtime"></a><span data-ttu-id="aecd8-160">Hinweise für die Windows-Runtime</span><span class="sxs-lookup"><span data-stu-id="aecd8-160">Notes for the Windows Runtime</span></span>  
 <span data-ttu-id="aecd8-161">Beim Aufrufen der <xref:System.ValueType.ToString%2A> Methode auf eine [!INCLUDE[wrt](~/includes/wrt-md.md)] -Struktur, stellt er das Standardverhalten für Werttypen, die nicht außer Kraft setzen <xref:System.ValueType.ToString%2A>.</span><span class="sxs-lookup"><span data-stu-id="aecd8-161">When you call the <xref:System.ValueType.ToString%2A> method on a [!INCLUDE[wrt](~/includes/wrt-md.md)] structure, it provides the default behavior for value types that don’t override <xref:System.ValueType.ToString%2A>.</span></span> <span data-ttu-id="aecd8-162">Dies ist Teil der Unterstützung von .NET Framework für die [!INCLUDE[wrt](~/includes/wrt-md.md)] (siehe [.NET Framework Unterstützung für Windows Store-Apps und Windows-Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)).</span><span class="sxs-lookup"><span data-stu-id="aecd8-162">This is part of the support that the .NET Framework provides for the [!INCLUDE[wrt](~/includes/wrt-md.md)] (see [.NET Framework Support for Windows Store Apps and Windows Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)).</span></span> [!INCLUDE[wrt](~/includes/wrt-md.md)]<span data-ttu-id="aecd8-163"> Strukturen können nicht überschreiben <xref:System.ValueType.ToString%2A>, selbst wenn sie mit c# oder Visual Basic geschrieben sind, da diese Methoden besitzen dürfen.</span><span class="sxs-lookup"><span data-stu-id="aecd8-163"> structures can’t override <xref:System.ValueType.ToString%2A>, even if they’re written with C# or Visual Basic, because they can’t have methods.</span></span> <span data-ttu-id="aecd8-164">(Darüber hinaus Strukturen in den [!INCLUDE[wrt](~/includes/wrt-md.md)] selbst nicht erben <xref:System.ValueType>.) Allerdings sie angezeigt werden, damit <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, und <xref:System.ValueType.GetHashCode%2A> Methoden, wenn Sie in c# oder Visual Basic-Code werden verwendet, und die .NET Framework das Standardverhalten für diese Methoden bietet.</span><span class="sxs-lookup"><span data-stu-id="aecd8-164">(In addition, structures in the [!INCLUDE[wrt](~/includes/wrt-md.md)] itself don’t inherit <xref:System.ValueType>.) However, they appear to have <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, and <xref:System.ValueType.GetHashCode%2A> methods when you use them in your C# or Visual Basic code, and the .NET Framework provides the default behavior for these methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
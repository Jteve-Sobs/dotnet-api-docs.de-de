<Type Name="IFormattable" FullName="System.IFormattable">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b2576510961cb47b6ac9c492844f7dae58d8f64e" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48589815" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.IFormattable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IFormattable" />
  <TypeSignature Language="F#" Value="type IFormattable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt Funktionen zum Formatieren des Werts eines Objekts als Zeichenfolgendarstellung bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.IFormattable> Schnittstelle konvertiert ein Objekt in seine Zeichenfolgendarstellung, die basierend auf einer Formatzeichenfolge und einen Formatanbieter.  
  
 Eine Formatzeichenfolge definiert in der Regel die allgemeine Darstellung eines Objekts. .NET Framework unterstützt z. B. Folgendes:  
  
-   Standardformatzeichenfolgen zum Formatieren von Enumerationswerten (finden Sie unter [Enumerationsformatzeichenfolgen](~/docs/standard/base-types/enumeration-format-strings.md)).  
  
-   Standardentitäten und benutzerdefinierten Formatzeichenfolgen zum Formatieren von numerischer Werten (finden Sie unter [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) und [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md)).  
  
-   Standardentitäten und benutzerdefinierten Formatzeichenfolgen zum Formatieren von Datums-und Uhrzeitwerte (finden Sie unter [Standardformatzeichenfolgen für Datum und Uhrzeit-Formatzeichenfolgen](~/docs/standard/base-types/standard-date-and-time-format-strings.md) und [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md)).  
  
-   Standardmäßige und benutzerdefinierte Formatzeichenfolgen für die Formatierung von Zeitintervallen (finden Sie unter [TimeSpan-Standardformatzeichenfolgen](~/docs/standard/base-types/standard-timespan-format-strings.md) und [benutzerdefinierte TimeSpan-Formatzeichenfolgen](~/docs/standard/base-types/custom-timespan-format-strings.md)).  
  
 Sie können auch eigene Formatzeichenfolgen um unterstützen die Formatierung der Anwendung definierte Typen definieren.  
  
 Ein Formatanbieter gibt ein Formatierungsobjekt, die in der Regel verwendeten Symbole definiert, in ein Objekt in seine Zeichenfolgendarstellung konvertiert. Wenn Sie eine Zahl als Währungswert konvertieren, definiert einen Formatanbieter z. B. das Währungssymbol, das angezeigt wird in der Ergebniszeichenfolge. .NET Framework definiert drei Formatanbieter an:  
  
-   Die <xref:System.Globalization.CultureInfo?displayProperty=nameWithType> -Klasse, die entweder gibt eine <xref:System.Globalization.NumberFormatInfo> Objekt zum Formatieren von numerischen Werten oder ein <xref:System.Globalization.DateTimeFormatInfo> Objekt zum Formatieren von Datums-und Uhrzeitwerte.  
  
-   Die <xref:System.Globalization.NumberFormatInfo?displayProperty=nameWithType> -Klasse, die zum Formatieren von numerischen Werten eine Instanz von sich selbst zurückgibt.  
  
-   Die <xref:System.Globalization.DateTimeFormatInfo?displayProperty=nameWithType> -Klasse, die eine Instanz von sich selbst für die Formatierung von Datums-und Uhrzeitwerten zurückgibt.  
  
 Darüber hinaus können Sie Ihre eigenen benutzerdefinierten Formatanbieter zum Bereitstellen von kulturspezifischen, Beruf-spezifisch ist, definieren oder Branche-spezifische Informationen, die bei der Formatierung verwendete. Weitere Informationen zum Implementieren von benutzerdefinierten Formatierung durch die Verwendung eines benutzerdefinierten Formatanbieters finden Sie unter <xref:System.ICustomFormatter>.  
  
 Die <xref:System.IFormattable> Schnittstelle definiert eine einzelne Methode, <xref:System.IFormattable.ToString%2A>, Formatierungsdienste für den implementierenden Typ bereitstellt. Die <xref:System.IFormattable.ToString%2A> -Methode direkt aufgerufen werden kann. Darüber hinaus heißt es automatisch von der <xref:System.Convert.ToString%28System.Object%29?displayProperty=nameWithType> und <xref:System.Convert.ToString%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType> Methoden und durch Methoden, mit denen die [Funktion für kombinierte Formatierung](~/docs/standard/base-types/composite-formatting.md) in .NET Framework. Diese Methoden umfassen <xref:System.Console.WriteLine%28System.String%2CSystem.Object%29?displayProperty=nameWithType>, <xref:System.String.Format%2A?displayProperty=nameWithType>, und <xref:System.Text.StringBuilder.AppendFormat%28System.String%2CSystem.Object%29?displayProperty=nameWithType>, u. a.. Die <xref:System.IFormattable.ToString%2A> -Methode für jedes Formatelement in Formatzeichenfolge der Methode aufgerufen wird.  
  
 Die <xref:System.IFormattable> Schnittstelle wird durch die Basisdatentypen implementiert.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine `Temperature` -Klasse definiert, die die <xref:System.IFormattable> -Schnittstelle implementiert. Die Klasse unterstützt vier Formatbezeichner: "G" und "C", die darauf hinweisen, dass die Temperatur in Grad Celsius; angezeigt werden "F", der angibt, dass die Temperatur in Fahrenheit angezeigt werden; und "K", der angibt, dass die Temperatur in Kelvin angezeigt werden. Darüber hinaus die <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> Implementierung kann auch eine Zeichenfolge, die behandeln `null` oder leer sein. Die anderen beiden `ToString` definierten Methoden den `Temperature` Klasse einfach einen Wrapper für einen Aufruf der <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> Implementierung.  
  
 [!code-csharp[System.IFormattable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iformattable/cs/example1.cs#1)]
 [!code-vb[System.IFormattable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iformattable/vb/example1.vb#1)]  
  
 Das folgende Beispiel ruft dann die <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> Implementierung entweder direkt oder über eine kombinierte Formatzeichenfolge.  
  
 [!code-csharp[System.IFormattable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iformattable/cs/example1.cs#2)]
 [!code-vb[System.IFormattable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iformattable/vb/example1.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Klassen, die mehr Kontrolle über die Formatierung von Zeichenfolgen als benötigen <see cref="M:System.Object.ToString" /> stellt implementieren sollten <see cref="T:System.IFormattable" />.  
  
Eine Klasse, die implementiert <see cref="T:System.IFormattable" /> muss den (Allgemein) Formatbezeichner "G" unterstützen. Neben der Formatbezeichner "G" kann die Klasse die Liste der Formatbezeichner definieren, die es unterstützt. Darüber hinaus muss die Klasse vorbereitet werden, einen Formatbezeichner, um behandeln <see langword="null" />. Weitere Informationen zur Formatierung und Formatierungscodes finden Sie unter [Formatierung von Typen](~/docs/standard/base-types/formatting-types.md)</para>
    </block>
    <altmember cref="T:System.IFormatProvider" />
    <altmember cref="M:System.Object.ToString" />
    <altmember cref="P:System.Threading.Thread.CurrentCulture" />
    <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Formatieren von Typen in .NET</related>
  </Docs>
  <Members>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="abstract member ToString : string * IFormatProvider -&gt; string" Usage="iFormattable.ToString (format, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">Das zu verwendende Format.  
  
- oder -  
Ein NULL-Verweis (<see langword="Nothing" /> in Visual Basic), wenn das für den Typ der <see cref="T:System.IFormattable" /> -Implementierung definierte Standardformat verwendet werden soll.</param>
        <param name="formatProvider">Der zum Formatieren des Werts zu verwendende Anbieter.  
  
- oder -  
Ein NULL-Verweis (<see langword="Nothing" /> in Visual Basic), wenn die Informationen über numerische Formate dem aktuellen Gebietsschema des Betriebssystems entnommen werden sollen.</param>
        <summary>Formatiert den Wert der aktuellen Instanz mit dem angegebenen Format.</summary>
        <returns>Der Wert der aktuellen Instanz im angegebenen Format.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.IFormattable.ToString%2A> Methode konvertiert einen Wert in eine Zeichenfolgendarstellung, die auf verschiedene Weise ausgedrückt werden kann. Das genaue Format hängt davon ab, bestimmte Symbole oder einer bestimmten Reihenfolge, die durch bestimmte Kulturen, Berufe oder Branchen definiert. Sie können die Methode direkt aufrufen. Es heißt auch automatisch von der <xref:System.Convert.ToString%28System.Object%29?displayProperty=nameWithType> und <xref:System.Convert.ToString%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType> Methoden und durch Methoden, die die kombinierte Formatierung verwenden von Features in .NET Framework, z. B. <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>, <xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>, und <xref:System.Text.StringBuilder.AppendFormat%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>. (Weitere Informationen finden Sie unter [kombinierte Formatierung](~/docs/standard/base-types/composite-formatting.md).)  
  
 Kombinierte Formatierung von Methoden der <xref:System.IFormattable.ToString%2A> Methode einmal für jedes Formatelement in einer Formatzeichenfolge. Die an die Methode übergebenen Parameter hängen bestimmte Formatierungsmethode auf, die aufgerufen wird und der Inhalt des Formatelements, wie folgt:  
  
-   Wenn es sich bei dem Formatelement, das eine Formatzeichenfolge nicht enthalten ist (z. B., wenn dem Formatelement, das einfach ist `{0}`), wird übergeben `null` als Wert für die <xref:System.String?displayProperty=nameWithType> Parameter.  
  
-   Wenn es sich bei dem Formatelement, das eine Formatzeichenfolge enthält (z. B. `{0:G}`), dass als Wert für Formatzeichenfolge übergeben wird die <xref:System.String?displayProperty=nameWithType> Parameter.  
  
-   Wenn der ursprüngliche Methodenaufruf nicht enthalten ist ein <xref:System.IFormatProvider?displayProperty=nameWithType> Parameter <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> übergeben wird, als Wert für die <xref:System.IFormatProvider?displayProperty=nameWithType> Parameter.  
  
-   Wenn der ursprüngliche Methodenaufruf enthält ein <xref:System.IFormatProvider?displayProperty=nameWithType> Parameter, der Anbieter, die im Aufruf Methode bereitgestellt werden wird übergeben als Wert für die <xref:System.IFormatProvider?displayProperty=nameWithType> Parameter.  
  
> [!NOTE]
>  Eines Objekts <xref:System.IFormattable.ToString%2A> Implementierung wird von Methoden zur kombinierten Formatierung nur aufgerufen, wenn sie nicht übergeben werden ein <xref:System.ICustomFormatter> Formatanbieter verwendet, oder wenn die <xref:System.ICustomFormatter.Format%2A> Methodenrückgabe des benutzerdefinierten Formatanbieters `null`.  
  
 .NET Framework enthält drei Formatanbieter alle implementieren die <xref:System.IFormatProvider> Schnittstelle:  
  
-   <xref:System.Globalization.NumberFormatInfo> Liefert Informationen, z. B. die Zeichen für Dezimalzahl und Gruppentrennzeichen, und die Schreibweise und Platzierung der Währungssymbole in monetäre Werte.  
  
-   <xref:System.Globalization.DateTimeFormatInfo> Liefert Informationen über die Formatierung von Datums- und Zeitangaben beziehen, z. B. die Position des Monats, den Tag und Jahr in einem Datum.  
  
-   <xref:System.Globalization.CultureInfo> enthält die standardformatierung Informationen in einer bestimmten Kultur, einschließlich der Informationen numerisches Format und Formatierungsinformationen für Datums- und Zeitangaben beziehen.  
  
 Darüber hinaus können Sie Ihre eigenen benutzerdefinierten Formatanbieters definieren.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt eine `Temperature` Klasse, die implementiert die <xref:System.IFormattable.ToString%2A> Methode. Dieses Codebeispiel ist Teil eines umfangreicheren Beispiels für die <xref:System.IFormattable> Klasse.  
  
 [!code-csharp[System.IFormattable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iformattable/cs/example1.cs#1)]
 [!code-vb[System.IFormattable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iformattable/vb/example1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Die <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" /> -Methode muss den (Allgemein) Formatbezeichner "G" unterstützen. Neben der Formatbezeichner "G" kann die Klasse die Liste der Formatbezeichner definieren, die es unterstützt. Darüber hinaus muss die Klasse vorbereitet werden, einen Formatbezeichner, um behandeln <see langword="null" />. Weitere Informationen zur Formatierung und Formatierungscodes finden Sie unter [Formatierung von Typen](~/docs/standard/base-types/formatting-types.md).</para>
        </block>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.IFormatProvider" />
        <altmember cref="T:System.Globalization.NumberFormatInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
  </Members>
</Type>
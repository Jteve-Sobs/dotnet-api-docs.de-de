<Type Name="IFormattable" FullName="System.IFormattable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9fc0bc7f4795e380e97f82eea143f43e349c98a7" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69420202" /></Metadata><TypeSignature Language="C#" Value="public interface IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.IFormattable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IFormattable" />
  <TypeSignature Language="F#" Value="type IFormattable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt Funktionen zum Formatieren des Werts eines Objekts als Zeichenfolgendarstellung bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.IFormattable> -Schnittstelle konvertiert ein Objekt basierend auf einer Format Zeichenfolge und einem Format Anbieter in seine Zeichen folgen Darstellung.  
  
 Eine Format Zeichenfolge definiert in der Regel die allgemeine Darstellung eines Objekts. Der .NET Framework unterstützt z. b. Folgendes:  
  
-   Standard Format Zeichenfolgen zum Formatieren von Enumerationswerten (siehe Enumerationsformatzeichenfolgen) [](~/docs/standard/base-types/enumeration-format-strings.md)  
  
-   Standardmäßige und benutzerdefinierte Format Zeichenfolgen zum Formatieren numerischer Werte [](~/docs/standard/base-types/standard-numeric-format-strings.md) [](~/docs/standard/base-types/custom-numeric-format-strings.md)  
  
-   Standardmäßige und benutzerdefinierte Format Zeichenfolgen zum Formatieren von Datums-und Uhrzeitwerten ( [](~/docs/standard/base-types/custom-date-and-time-format-strings.md)siehe Standardformat Zeichenfolgen für [Datum](~/docs/standard/base-types/standard-date-and-time-format-strings.md) und Uhrzeit).  
  
-   Standard mäßige und benutzerdefinierte Format Zeichenfolgen zum Formatieren von Zeitintervallen (siehe [Standard mäßige TimeSpan-Format](~/docs/standard/base-types/standard-timespan-format-strings.md) Zeichenfolgen und [Benutzerdefinierte TimeSpan-Format](~/docs/standard/base-types/custom-timespan-format-strings.md)  
  
 Sie können auch eigene Format Zeichenfolgen definieren, um die Formatierung der von der Anwendung definierten Typen zu unterstützen.  
  
 Ein Format Anbieter gibt ein Formatierungs Objekt zurück, das in der Regel die Symbole definiert, mit denen ein Objekt in seine Zeichen folgen Darstellung umgerechnet wird. Wenn Sie z. b. eine Zahl in einen Währungswert konvertieren, definiert ein Format Anbieter das Währungssymbol, das in der Ergebnis Zeichenfolge angezeigt wird. Der .NET Framework definiert drei Format Anbieter:  
  
-   Die <xref:System.Globalization.CultureInfo?displayProperty=nameWithType> -Klasse, die entweder ein <xref:System.Globalization.NumberFormatInfo> -Objekt zum Formatieren von numerischen Werten <xref:System.Globalization.DateTimeFormatInfo> oder ein-Objekt zum Formatieren von Datums-und Uhrzeitwerten zurückgibt.  
  
-   Die <xref:System.Globalization.NumberFormatInfo?displayProperty=nameWithType> -Klasse, die eine Instanz von sich selbst zum Formatieren von numerischen Werten zurückgibt.  
  
-   Die <xref:System.Globalization.DateTimeFormatInfo?displayProperty=nameWithType> -Klasse, die eine Instanz von sich selbst zum Formatieren von Datums-und Uhrzeitwerten zurückgibt.  
  
 Außerdem können Sie eigene benutzerdefinierte Format Anbieter definieren, um kulturspezifische, berufsspezifische oder branchenspezifische Informationen anzugeben, die bei der Formatierung verwendet werden. Weitere Informationen zum Implementieren benutzerdefinierter Formatierungen mithilfe eines benutzerdefinierten Format Anbieters finden <xref:System.ICustomFormatter>Sie unter.  
  
 Die <xref:System.IFormattable> -Schnittstelle definiert eine einzige <xref:System.IFormattable.ToString%2A>Methode,, die Formatierungs Dienste für den implementierenden Typ bereitstellt. Die <xref:System.IFormattable.ToString%2A> -Methode kann direkt aufgerufen werden. Außerdem wird es automatisch von der-Methode und <xref:System.Convert.ToString%28System.Object%29?displayProperty=nameWithType> der <xref:System.Convert.ToString%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType> -Methode sowie von Methoden aufgerufen, die das Feature für die [kombinierte Formatierung](~/docs/standard/base-types/composite-formatting.md) in der .NET Framework verwenden. Zu diesen Methoden <xref:System.Console.WriteLine%28System.String%2CSystem.Object%29?displayProperty=nameWithType>zählen <xref:System.String.Format%2A?displayProperty=nameWithType>unter anderem <xref:System.Text.StringBuilder.AppendFormat%28System.String%2CSystem.Object%29?displayProperty=nameWithType>, und. Die <xref:System.IFormattable.ToString%2A> -Methode wird für jedes Format Element in der Format Zeichenfolge der Methode aufgerufen.  
  
 Die <xref:System.IFormattable> -Schnittstelle wird von den Basis Datentypen implementiert.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine `Temperature` -Klasse definiert, die die <xref:System.IFormattable> -Schnittstelle implementiert. Die-Klasse unterstützt vier Formatspezifizierer: "G" und "C", die angeben, dass die Temperatur in Celsius angezeigt werden soll. "F" gibt an, dass die Temperatur in Fahrenheit angezeigt werden soll. und "K" gibt an, dass die Temperatur in Kelvin angezeigt werden soll. Außerdem kann die <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> Implementierung auch eine Format Zeichenfolge verarbeiten, die `null` oder leer ist. Die anderen beiden `ToString` Methoden, die durch `Temperature` die-Klasse definiert werden, wrappen einfach einen-Rückruf der <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> -Implementierung.  
  
 [!code-csharp[System.IFormattable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iformattable/cs/example1.cs#1)]
 [!code-vb[System.IFormattable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iformattable/vb/example1.vb#1)]  
  
 Im folgenden Beispiel wird die <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> Implementierung entweder direkt oder mithilfe einer zusammengesetzten Format Zeichenfolge aufgerufen.  
  
 [!code-csharp[System.IFormattable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iformattable/cs/example1.cs#2)]
 [!code-vb[System.IFormattable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iformattable/vb/example1.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Klassen, die mehr Kontrolle über die Formatierung von Zeichen folgen <see cref="M:System.Object.ToString" /> als bereitstellen <see cref="T:System.IFormattable" />, sollten implementieren.  
  
Eine Klasse, die <see cref="T:System.IFormattable" /> implementiert, muss den Format Bezeichner "G" (allgemein) unterstützen. Neben dem "G"-Spezifizierer kann die-Klasse die Liste der Format Bezeichner definieren, die Sie unterstützt. Außerdem muss die Klasse darauf vorbereitet sein, einen Format Bezeichner zu verarbeiten, der <see langword="null" />ist. Weitere Informationen zu Formatierungs-und Formatierungscodes finden Sie unter Formatieren von [Typen](~/docs/standard/base-types/formatting-types.md) .</para></block>
    <altmember cref="T:System.IFormatProvider" />
    <altmember cref="M:System.Object.ToString" />
    <altmember cref="P:System.Threading.Thread.CurrentCulture" />
    <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Formatieren von Typen in .NET</related>
  </Docs>
  <Members>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="abstract member ToString : string * IFormatProvider -&gt; string" Usage="iFormattable.ToString (format, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">Das zu verwendende Format.  
  
- oder - 
Ein NULL-Verweis (<see langword="Nothing" /> in Visual Basic), wenn das für den Typ der <see cref="T:System.IFormattable" /> -Implementierung definierte Standardformat verwendet werden soll.</param>
        <param name="formatProvider">Der zum Formatieren des Werts zu verwendende Anbieter.  
  
- oder - 
Ein NULL-Verweis (<see langword="Nothing" /> in Visual Basic), wenn die Informationen über numerische Formate dem aktuellen Gebietsschema des Betriebssystems entnommen werden sollen.</param>
        <summary>Formatiert den Wert der aktuellen Instanz unter Verwendung des angegebenen Formats.</summary>
        <returns>Der Wert der aktuellen Instanz im angegebenen Format.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.IFormattable.ToString%2A> -Methode konvertiert einen Wert in eine Zeichen folgen Darstellung, die auf verschiedene Weise ausgedrückt werden kann. Das genaue Format hängt von bestimmten Symbolen oder der angegebenen Reihenfolge ab, die durch bestimmte Kulturen, Berufe oder Branchen definiert ist. Sie können die-Methode direkt aufzurufen. Sie wird auch automatisch von der- <xref:System.Convert.ToString%28System.Object%29?displayProperty=nameWithType> Methode <xref:System.Convert.ToString%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType> und der-Methode sowie von Methoden aufgerufen, die das Feature für die kombinierte Formatierung in <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>der <xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>.NET Framework verwenden <xref:System.Text.StringBuilder.AppendFormat%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>, wie z. b., und. (Weitere Informationen finden Sie unter [kombinierte Formatierung](~/docs/standard/base-types/composite-formatting.md).)  
  
 Kombinierte Formatierungs Methoden bezeichnen <xref:System.IFormattable.ToString%2A> die Methode einmal für jedes Format Element in einer Format Zeichenfolge. Die Parameter, die an die-Methode weitergegeben werden, hängen wie folgt von der spezifischen Formatierungs Methode, die aufgerufen wird, und vom Inhalt des Format Elements ab:  
  
-   Wenn das Format Element keine Format Zeichenfolge enthält (z. b. wenn das Format Element einfach `{0}`ist), wird es `null` <xref:System.String?displayProperty=nameWithType> als Wert des-Parameters übergeben.  
  
-   Wenn das Format Element eine Format Zeichenfolge (z `{0:G}`. b.) enthält, wird diese Format Zeichenfolge als Wert <xref:System.String?displayProperty=nameWithType> des-Parameters übergeben.  
  
-   Wenn der ursprüngliche Methoden Aufrufwert keinen- <xref:System.IFormatProvider?displayProperty=nameWithType> Parameter enthält <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> , wird <xref:System.IFormatProvider?displayProperty=nameWithType> als Wert des-Parameters übergeben.  
  
-   Wenn der ursprüngliche Methoden Aufrufwert <xref:System.IFormatProvider?displayProperty=nameWithType> einen-Parameter enthält, wird der im Methodenaufrufe angegebene Anbieter als Wert <xref:System.IFormatProvider?displayProperty=nameWithType> des-Parameters übergeben.  
  
> [!NOTE]
>  Die Implementierung eines <xref:System.IFormattable.ToString%2A> Objekts wird nur durch kombinierte Formatierungs Methoden aufgerufen, wenn Ihnen kein <xref:System.ICustomFormatter> Format Anbieter übermittelt wird oder wenn <xref:System.ICustomFormatter.Format%2A> die-Methode des benutzerdefinierten Format `null`Anbieters zurückgibt.  
  
 Die .NET Framework enthält drei Format Anbieter, die alle die <xref:System.IFormatProvider> -Schnittstelle implementieren:  
  
-   <xref:System.Globalization.NumberFormatInfo>liefert numerische Formatierungsinformationen, z. b. die Zeichen, die für Dezimal-und Gruppen Trennzeichen verwendet werden sollen, sowie die Rechtschreibung und Platzierung von Währungs Symbolen in Währungswerten.  
  
-   <xref:System.Globalization.DateTimeFormatInfo>liefert Datums-und zeitbezogene Formatierungsinformationen, wie z. b. die Position des Monats, den Tag und das Jahr in einem Datums Muster.  
  
-   <xref:System.Globalization.CultureInfo>enthält die Standard Formatierungsinformationen in einer bestimmten Kultur, einschließlich der numerischen Formatinformationen und Datums-und zeitbezogenen Formatierungsinformationen.  
  
 Außerdem können Sie einen eigenen benutzerdefinierten Format Anbieter definieren.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine `Temperature` Klasse veranschaulicht, die <xref:System.IFormattable.ToString%2A> die-Methode implementiert. Dieses Codebeispiel ist Teil eines größeren Beispiels, das für die <xref:System.IFormattable> -Klasse bereitgestellt wird.  
  
 [!code-csharp[System.IFormattable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iformattable/cs/example1.cs#1)]
 [!code-vb[System.IFormattable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iformattable/vb/example1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Die <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" /> -Methode muss den Format Bezeichner "G" (allgemein) unterstützen. Neben dem "G"-Spezifizierer kann die-Klasse die Liste der Format Bezeichner definieren, die Sie unterstützt. Außerdem muss die Klasse darauf vorbereitet sein, einen Format Bezeichner zu verarbeiten, der <see langword="null" />ist. Weitere Informationen zu Formatierungs-und Formatierungscodes finden Sie unter Formatieren von [Typen](~/docs/standard/base-types/formatting-types.md).</para></block>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.IFormatProvider" />
        <altmember cref="T:System.Globalization.NumberFormatInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
  </Members>
</Type>

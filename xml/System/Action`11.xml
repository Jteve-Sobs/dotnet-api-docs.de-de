<Type Name="Action&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11&gt;" FullName="System.Action&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1c9ffb97e9bb1341a47e5ee68dcc691957cad555" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58701692" /></Metadata><TypeSignature Language="C#" Value="public delegate void Action&lt;in T1,in T2,in T3,in T4,in T5,in T6,in T7,in T8,in T9,in T10,in T11&gt;(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Action`11&lt;- T1, - T2, - T3, - T4, - T5, - T6, - T7, - T8, - T9, - T10, - T11&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Action`11" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub Action(Of In T1, In T2, In T3, In T4, In T5, In T6, In T7, In T8, In T9, In T10, In T11)(arg1 As T1, arg2 As T2, arg3 As T3, arg4 As T4, arg5 As T5, arg6 As T6, arg7 As T7, arg8 As T8, arg9 As T9, arg10 As T10, arg11 As T11)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11&gt;&#xA;public delegate void Action(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11);" />
  <TypeSignature Language="F#" Value="type Action&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'T8, 'T9, 'T10, 'T11&gt; = delegate of 'T1 * 'T2 * 'T3 * 'T4 * 'T5 * 'T6 * 'T7 * 'T8 * 'T9 * 'T10 * 'T11 -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T2">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T3">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T4">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T5">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T6">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T7">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T8">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T9">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T10">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T11">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="arg1" Type="T1" />
    <Parameter Name="arg2" Type="T2" />
    <Parameter Name="arg3" Type="T3" />
    <Parameter Name="arg4" Type="T4" />
    <Parameter Name="arg5" Type="T5" />
    <Parameter Name="arg6" Type="T6" />
    <Parameter Name="arg7" Type="T7" />
    <Parameter Name="arg8" Type="T8" />
    <Parameter Name="arg9" Type="T9" />
    <Parameter Name="arg10" Type="T10" />
    <Parameter Name="arg11" Type="T11" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T1">Der Typ des ersten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
    <typeparam name="T2">Der Typ des zweiten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
    <typeparam name="T3">Der Typ des dritten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
    <typeparam name="T4">Der Typ des vierten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
    <typeparam name="T5">Der Typ des fünften Parameters der Methode, die dieser Delegat kapselt.</typeparam>
    <typeparam name="T6">Der Typ des sechsten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
    <typeparam name="T7">Der Typ des siebten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
    <typeparam name="T8">Der Typ des achten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
    <typeparam name="T9">Der Typ des neunten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
    <typeparam name="T10">Der Typ des zehnten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
    <typeparam name="T11">Der Typ des elften Parameters der Methode, die dieser Delegat kapselt.</typeparam>
    <param name="arg1">Der erste Parameter der Methode, die dieser Delegat kapselt.</param>
    <param name="arg2">Der zweite Parameter der Methode, die dieser Delegat kapselt.</param>
    <param name="arg3">Der dritte Parameter der Methode, die dieser Delegat kapselt.</param>
    <param name="arg4">Der vierte Parameter der Methode, die dieser Delegat kapselt.</param>
    <param name="arg5">Der fünfte Parameter der Methode, die dieser Delegat kapselt.</param>
    <param name="arg6">Der sechste Parameter der Methode, die dieser Delegat kapselt.</param>
    <param name="arg7">Der siebte Parameter der Methode, die dieser Delegat kapselt.</param>
    <param name="arg8">Der achte Parameter der Methode, die dieser Delegat kapselt.</param>
    <param name="arg9">Der neunte Parameter der Methode, die dieser Delegat kapselt.</param>
    <param name="arg10">Der zehnte Parameter der Methode, die dieser Delegat kapselt.</param>
    <param name="arg11">Der elfte Parameter der Methode, die dieser Delegat kapselt.</param>
    <summary>Kapselt eine Methode, die über 11 Parameter verfügt und keinen Wert zurückgibt.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können die <xref:System.Action%6011> Delegat, der eine Methode als Parameter übergeben werden, ohne explizit einen benutzerdefinierten Delegaten zu deklarieren. Die der gekapselte Methode muss die Signatur der Methode entsprechen, die von diesem Delegaten definiert ist. Dies bedeutet, dass die gekapselte Methode über 11 Parameter, die alle an ihn, als Wert übergeben werden verfügen muss, und sie müssen keinen Wert zurück. (In c# muss die Methode zurückgeben `void`. In Visual Basic muss es vom definiert werden die `Sub`...`End Sub` erstellen. Sie können auch eine Methode, die einen Wert zurückgibt, der ignoriert wird sein.) In der Regel wird eine solche Methode zum Ausführen eines Vorgangs verwendet.  
  
> [!NOTE]
>  Um eine Methode zu verweisen, die über 11 Parameter verfügt und einen Wert zurückgibt, verwenden Sie den generischen <xref:System.Func%6012> stattdessen delegieren.  
  
 Sie können auch die <xref:System.Action%6011> mit anonymen Methoden und Lambda-Ausdrücke zu delegieren.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Func`12" />
  </Docs>
</Type>
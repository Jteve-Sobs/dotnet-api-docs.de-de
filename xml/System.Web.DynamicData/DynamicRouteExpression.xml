<Type Name="DynamicRouteExpression" FullName="System.Web.DynamicData.DynamicRouteExpression">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ab1315949099e26973fb0a289cbde835f6b96400" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86680578" /></Metadata><TypeSignature Language="C#" Value="public class DynamicRouteExpression : System.Web.UI.WebControls.Expressions.DataSourceExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DynamicRouteExpression extends System.Web.UI.WebControls.Expressions.DataSourceExpression" />
  <TypeSignature Language="DocId" Value="T:System.Web.DynamicData.DynamicRouteExpression" />
  <TypeSignature Language="VB.NET" Value="Public Class DynamicRouteExpression&#xA;Inherits DataSourceExpression" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicRouteExpression : System::Web::UI::WebControls::Expressions::DataSourceExpression" />
  <TypeSignature Language="F#" Value="type DynamicRouteExpression = class&#xA;    inherit DataSourceExpression" />
  <AssemblyInfo>
    <AssemblyName>System.Web.DynamicData</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.Expressions.DataSourceExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Ruft den Primärschlüssel aus den Routinginformationen zum Filtern von Daten ab.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die- <xref:System.Web.DynamicData.DynamicRouteExpression> Klasse wird mit dem- <xref:System.Web.UI.WebControls.QueryExtender> Steuerelement im Seiten Markup verwendet. Die- <xref:System.Web.DynamicData.DynamicRouteExpression> Klasse ruft den Primärschlüssel aus den Routing Informationen ab, die in einer Webanforderung enthalten sind. Das- <xref:System.Web.UI.WebControls.QueryExtender> Steuerelement verwendet dann den Schlüssel in einer- `Where` Klausel. Dadurch wird die Abfrage für die Datenquelle geändert, die dann die vom Schlüssel gefilterten Tabellenzeilen zurückgibt.  
  
 Sie können Daten auch mithilfe eines fremd Schlüssels filtern, den Sie mithilfe der- <xref:System.Web.DynamicData.DynamicRouteExpression.ColumnName%2A> Eigenschaft angeben.  
  
<a name="DeclarativeSyntax"></a>   
## <a name="declarative-syntax"></a>Deklarative Syntax  
  
```  
<asp:DynamicRouteExpression  
  ColumnName="Name of the foreign key column"/>  
```  
  
   
  
## Examples  
 In diesem Thema steht ein Visual Studio-Projekt mit Quellcode zur Verfügung: [Gerüstbau dynamische Daten](https://go.microsoft.com/fwlink/?LinkId=168914).  
  
 Das folgende Beispiel zeigt eine benutzerdefinierte List. aspx-Seitenvorlage für die Products-Tabelle. Mit der- <xref:System.Web.DynamicData.DynamicRouteExpression.ColumnName%2A> Eigenschaft wird der ProductCategory-Fremdschlüssel zum Filtern der Products-Zeilen angegeben.  
  
 Auf der Seite benutzerdefinierte List. aspx-Seite wird eine Spalte angezeigt, die Links zu den Kategorien enthält, die in der Spalte ProductCategory Fremdschlüssel enthalten sind. Wenn der Benutzer auf einen dieser Links klickt, zeigt die Seite List. aspx nur die Zeilen an, die die ausgewählte Kategorie enthalten.  
  
 Für das Beispiel ist Folgendes erforderlich:  
  
-   Eine dynamische Daten Website. Weitere Informationen finden Sie unter Exemplarische Vorgehensweise [: Erstellen einer neuen dynamische Daten Website mithilfe von Gerüstbau](https://msdn.microsoft.com/library/1564aef2-9103-436a-9806-c8ad7abd616a).  
  
-   Die AdventureWorksLT-Beispieldatenbank. Weitere Informationen finden Sie unter Gewusst [wie: Herstellen einer Verbindung mit der AdventureWorksLT-Datenbank mithilfe von. MDF-Datei](https://msdn.microsoft.com/library/d34ffbac-607d-40f1-b088-0a3304ea032b).  
  
 [!code-aspx-csharp[System.Web.DynamicData.DynamicRouteExpression#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.dynamicdata.dynamicrouteexpression/cs/list.aspx#1)]
 [!code-aspx-vb[System.Web.DynamicData.DynamicRouteExpression#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.dynamicdata.dynamicrouteexpression/vb/list.aspx#1)]  
  
 [!code-csharp[System.Web.DynamicData.DynamicRouteExpression#3](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.dynamicdata.dynamicrouteexpression/cs/list.aspx.cs#3)]
 [!code-vb[System.Web.DynamicData.DynamicRouteExpression#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.dynamicdata.dynamicrouteexpression/vb/list.aspx.vb#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicRouteExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicRouteExpression.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicRouteExpression();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.DynamicData.DynamicRouteExpression" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der Regel wird der <xref:System.Web.DynamicData.DynamicRouteExpression.%23ctor%2A> Konstruktor nicht aufgerufen. Stattdessen verwenden Sie die <xref:System.Web.DynamicData.DynamicRouteExpression> -Klasse im Seiten Markup, und die-Klasse wird initialisiert, wenn die Seite geladen wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnName">
      <MemberSignature Language="C#" Value="public string ColumnName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ColumnName" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicRouteExpression.ColumnName" />
      <MemberSignature Language="VB.NET" Value="Public Property ColumnName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ColumnName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ColumnName : string with get, set" Usage="System.Web.DynamicData.DynamicRouteExpression.ColumnName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue("")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue("")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen einer Spalte ab, die einen Fremdschlüssel enthält, mit dem die Datenquelle abgefragt wird, oder legt den Namen fest.</summary>
        <value>Der Name der Fremdschlüsselspalte.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die- <xref:System.Web.DynamicData.DynamicRouteExpression.ColumnName%2A> Eigenschaft stellt einen Fremdschlüssel dar. Dieser Schlüssel wird verwendet, um die Abfrage für die Datenquelle zu ändern.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie die Fremdschlüssel Spalte ProductCategory zum Filtern der anzuzeigenden Produkte angegeben wird. Dieses Beispiel ist Teil des größeren Beispiels, das für die-Klasse bereitgestellt wird <xref:System.Web.DynamicData.DynamicRouteExpression> .  
  
```  
<asp:QueryExtender TargetControlID="GridDataSource"   
    ID="GridQueryExtender" runat="server">  
  <asp:DynamicRouteExpression ColumnName="ProductCategory" />  
</asp:QueryExtender>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetQueryable">
      <MemberSignature Language="C#" Value="public override System.Linq.IQueryable GetQueryable (System.Linq.IQueryable source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.IQueryable GetQueryable(class System.Linq.IQueryable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicRouteExpression.GetQueryable(System.Linq.IQueryable)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetQueryable (source As IQueryable) As IQueryable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Linq::IQueryable ^ GetQueryable(System::Linq::IQueryable ^ source);" />
      <MemberSignature Language="F#" Value="override this.GetQueryable : System.Linq.IQueryable -&gt; System.Linq.IQueryable" Usage="dynamicRouteExpression.GetQueryable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" />
      </Parameters>
      <Docs>
        <param name="source">Die zu ändernde Abfrage.</param>
        <summary>Ruft die Abfrage aus der Datenquelle ab.</summary>
        <returns>Eine Instanz der geänderten Abfrage.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Abfrage aus der Datenquelle, die durch den-Parameter dargestellt wird, `source` wird durch Anwenden des primär-oder fremd Schlüssels, bei dem es sich um die aktuellen Routeninformationen handelt, geändert.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetContext">
      <MemberSignature Language="C#" Value="public override void SetContext (System.Web.UI.Control owner, System.Web.HttpContext context, System.Web.UI.WebControls.IQueryableDataSource dataSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetContext(class System.Web.UI.Control owner, class System.Web.HttpContext context, class System.Web.UI.WebControls.IQueryableDataSource dataSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicRouteExpression.SetContext(System.Web.UI.Control,System.Web.HttpContext,System.Web.UI.WebControls.IQueryableDataSource)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub SetContext (owner As Control, context As HttpContext, dataSource As IQueryableDataSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void SetContext(System::Web::UI::Control ^ owner, System::Web::HttpContext ^ context, System::Web::UI::WebControls::IQueryableDataSource ^ dataSource);" />
      <MemberSignature Language="F#" Value="override this.SetContext : System.Web.UI.Control * System.Web.HttpContext * System.Web.UI.WebControls.IQueryableDataSource -&gt; unit" Usage="dynamicRouteExpression.SetContext (owner, context, dataSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="owner" Type="System.Web.UI.Control" />
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="dataSource" Type="System.Web.UI.WebControls.IQueryableDataSource" />
      </Parameters>
      <Docs>
        <param name="owner">Das Steuerelement, das die <see cref="T:System.Web.DynamicData.DynamicRouteExpression" />-Instanz enthält. Dies ist ein <see cref="T:System.Web.UI.WebControls.QueryExtender" />-Steuerelement.</param>
        <param name="context">Der Webanforderungskontext.</param>
        <param name="dataSource">Die Zieldatenquelle für die <see cref="T:System.Web.DynamicData.DynamicRouteExpression" />-Instanz.</param>
        <summary>Legt den HTTP-Kontext des <see cref="T:System.Web.DynamicData.DynamicRouteExpression" />-Objekts fest.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="DynamicFilter" FullName="System.Web.DynamicData.DynamicFilter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e7bbb0533a7ba42d8a13d2e97a261a70128e3cb7" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48693048" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DynamicFilter : System.Web.UI.Control, System.Web.DynamicData.IFilterExpressionProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DynamicFilter extends System.Web.UI.Control implements class System.Web.DynamicData.IFilterExpressionProvider" />
  <TypeSignature Language="DocId" Value="T:System.Web.DynamicData.DynamicFilter" />
  <TypeSignature Language="VB.NET" Value="Public Class DynamicFilter&#xA;Inherits Control&#xA;Implements IFilterExpressionProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicFilter : System::Web::UI::Control, System::Web::DynamicData::IFilterExpressionProvider" />
  <TypeSignature Language="F#" Value="type DynamicFilter = class&#xA;    inherit Control&#xA;    interface IFilterExpressionProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Web.DynamicData</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Control</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.DynamicData.IFilterExpressionProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Zeigt die Benutzeroberfläche zum Filtern von Tabellenzeilen mithilfe einer angegebenen Spalte an.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In diesem Thema:  
  
-   [Introduction (Einführung)](#introduction)  
  
-   [ClassContext](#ClassContext)  
  
-   [Deklarative Syntax](#DeclarativeSyntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>Einführung  
 Die <xref:System.Web.DynamicData.DynamicFilter> Steuerelement wird in einem Seitenmarkup zum Generieren der Benutzeroberfläche für das Filtern von Tabellenzeilen verwendet. Dynamische Daten erstellt die Benutzeroberfläche mithilfe der Filter-Standardvorlagen, die sich im Ordner "~\DynamicData\Filters" befinden. Diese Vorlagen unterstützen die Fremdschlüssel, Boolean und Enumeration Spaltentypen.  
  
 Die folgende Tabelle zeigt einige der Aufgaben, die Sie ausführen können.  
  
|Szenario|Beschreibung |  
|--------------|-----------------|  
|Geben Sie die Spalte, die für tabellenzeilenfilterung verwendet.|Verwenden Sie die Eigenschaft <xref:System.Web.DynamicData.DynamicFilter.DataField%2A> an die Spalte, die für tabellenzeilenfilterung verwendet.|  
|Geben Sie den Namen der Filtervorlage mit die Benutzeroberfläche zu erstellen.|Verwenden Sie die Eigenschaft <xref:System.Web.DynamicData.DynamicFilter.FilterUIHint%2A> an den Namen der Filtervorlage mit die Benutzeroberfläche zu erstellen.|  
|Führen Sie benutzerdefinierte Vorgänge aus, bevor die Benutzeroberfläche gerendert wird.|Verwenden der <xref:System.Web.DynamicData.DynamicFilter.FilterChanged> , benutzerdefinierte Vorgänge ausführen, bevor die Benutzeroberfläche gerendert wird.|  
  
 Sie können die Filtervorlage mit auf folgende Weise angeben:  
  
-   Mithilfe der <xref:System.Web.DynamicData.DynamicFilter.FilterUIHint%2A> -Eigenschaft in Seitenmarkup. Dieser Ansatz ist eine Darstellungsschicht Anpassung, dies ist unabhängig von der das Schema (Datenbank), und die zu einer Einzelseite angewendet.  
  
-   Mithilfe der <xref:System.ComponentModel.DataAnnotations.FilterUIHintAttribute> Attribut im Modell. Dieser Ansatz ist eine Datenschicht Anpassung, welche hängt von dem speziellen Schema (Datenbank) und, die für die gesamte Anwendung gilt.  
  
 Wenn Sie beide Ansätze verwenden, hat die Filtervorlage, die im Markup angegeben wird Vorrang vor der Vorlage, die im Datenmodell angegeben wird.  
  
<a name="ClassContext"></a>   
## <a name="class-context"></a>Klassenkontext  
 Die <xref:System.Web.DynamicData.DynamicFilter> -Steuerelement dient zur Arbeit mit der <xref:System.Web.UI.WebControls.QueryExtender> Steuerelement. Die <xref:System.Web.DynamicData.DynamicFilter> Steuerelement verweist auf eine <xref:System.Web.DynamicData.DynamicFilterExpression> Instanz innerhalb einer <xref:System.Web.UI.WebControls.QueryExtender> Objekt im Markup Seite.  
  
 Die folgende Abbildung zeigt die Schritte, die Dynamic Data folgt, um Tabellenzeilen filtern nach einer foreign Key-Spalte zu implementieren.  
  
 ![Dynamische Daten Abfragen Elemente](~/add/media/dynamic-dataquery.png "dynamische Daten Abfragen, Elemente")  
  
1.  Die <xref:System.Web.DynamicData.DynamicFilter> Steuerelement übergibt den ausgewählte Wert, der die <xref:System.Web.UI.WebControls.QueryExtender> Steuerelement.  
  
2.  Die <xref:System.Web.UI.WebControls.QueryExtender> Steuerelement verwendet den Wert, um die Abfrage Filtern von Informationen zu erstellen. Es übergibt dann diese Informationen an den Datenquellen-Steuerelement.  
  
3.  Das Datenquellen-Steuerelement übergibt die Filterinformationen-Abfrage an dem Datenquellenanbieter.  
  
4.  Der Datenquellenanbieter übergibt die Abfrage in der Datenbank.  
  
5.  Die gefilterte Tabellenzeilen wird von die Datenbank zurückgegeben.  
  
6.  Der Datenquellenanbieter sendet diese Daten zurück an das Datenquellen-Steuerelement.  
  
7.  Das Datenquellen-Steuerelement übergibt die Zeilen der gefilterten Tabelle an das datengebundene Steuerelement für die Anzeige.  
  
<a name="DeclarativeSyntax"></a>   
## <a name="declarative-syntax"></a>Deklarative Syntax  
  
```  
<asp:DynamicFilter  
    ID="Control ID"  
    DataField="Name of the data field to use for filtering"  
    EnableViewState="True|False"   
    FilterUIHint="Name of the filter template to generate the UI"  
    OnFilterChanged="Filter changed event handler"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnUnload="Unload event handler"   
    Visible="True|False"  
    runat="server"/>  
```  
  
   
  
## Examples  
 An dieser Stelle ist ein Visual Studio-Projekt mit Quellcode zur Verfügung: [herunterladen](http://go.microsoft.com/fwlink/?LinkId=168914).  
  
 In den folgenden Beispielen verwenden die Standardvorlage für ForeignKey.ascx Filter, um die Benutzeroberfläche zum Filtern der Products-Tabellenzeilen von der Spalte "ProductCategory" fremdschlüsselbeziehung zu erstellen. Wenn der Benutzer einen Wert von "ProductCategory" auswählt, werden nur die Zeilen mit diesem Wert angezeigt.  
  
 Im Beispiel ist Folgendes erforderlich:  
  
-   Eine Dynamic Data-Website oder eine Dynamic Data-Webanwendung. Dies ermöglicht Ihnen die Erstellung der `AdventureWorksLTDataContext` Datenkontext für die Datenbank und die Klassen für die Tabellen zugreifen. Weitere Informationen finden Sie unter `Walkthrough: Creating a New Dynamic Data Web Site using Scaffolding`.  
  
 [!code-aspx-csharp[System.Web.DynamicData.DynamicFilter#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.dynamicdata.dynamicfilter/cs/dynamicfilter.aspx#1)]
 [!code-aspx-vb[System.Web.DynamicData.DynamicFilter#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.dynamicdata.dynamicfilter/vb/dynamicfilter.aspx#1)]  
  
 [!code-csharp[System.Web.DynamicData.DynamicFilter#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.dynamicdata.dynamicfilter/cs/dynamicfilter.aspx.cs#2)]
 [!code-vb[System.Web.DynamicData.DynamicFilter#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.dynamicdata.dynamicfilter/vb/dynamicfilter.aspx.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.DynamicData.QueryableFilterRepeater" />
    <related type="Article" href="http://msdn.microsoft.com/library/7c86f5d5-795c-4b28-8733-8ea9c0802d0f">Exemplarische Vorgehensweise: Filtern von Zeilen in Tabellen mit einer über-/ Unterordnungsbeziehung</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicFilter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicFilter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicFilter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.DynamicData.DynamicFilter" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der Regel nicht Aufrufen der <xref:System.Web.DynamicData.DynamicFilter.%23ctor%2A> Konstruktor direkt. Verwenden Sie stattdessen die <xref:System.Web.DynamicData.DynamicFilter> Klasse im Seitenmarkup und die Klasse werden initialisiert, wenn die Seite geladen wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Column">
      <MemberSignature Language="C#" Value="protected internal System.Web.DynamicData.MetaColumn Column { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.DynamicData.MetaColumn Column" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicFilter.Column" />
      <MemberSignature Language="VB.NET" Value="Protected Friend ReadOnly Property Column As MetaColumn" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Web::DynamicData::MetaColumn ^ Column { System::Web::DynamicData::MetaColumn ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Column : System.Web.DynamicData.MetaColumn" Usage="System.Web.DynamicData.DynamicFilter.Column" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.MetaColumn</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die zum Filtern zu verwendende Tabellenspalte ab oder legt sie fest.</summary>
        <value>Die zum Filtern zu verwendende Tabellenspalte.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft ist nur zur internen Verwendung.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataField">
      <MemberSignature Language="C#" Value="public string DataField { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataField" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicFilter.DataField" />
      <MemberSignature Language="VB.NET" Value="Public Property DataField As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataField { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataField : string with get, set" Usage="System.Web.DynamicData.DynamicFilter.DataField" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen der Spalte ab, die für Tabellenzeilenfilterung verwendet werden soll, oder legt ihn fest.</summary>
        <value>Der Name der für Tabellenzeilenfilterung verwendeten Spalte.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Beispiel zeigt, wie Sie die Spalte für die Tabelle zeilenfilterung im Markup angegeben werden.  
  
```  
<asp:DynamicFilter ID="CategoryFilter" runat="server"   
    DataField="ProductCategory" />  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterChanged">
      <MemberSignature Language="C#" Value="public event EventHandler FilterChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler FilterChanged" />
      <MemberSignature Language="DocId" Value="E:System.Web.DynamicData.DynamicFilter.FilterChanged" />
      <MemberSignature Language="VB.NET" Value="Public Event FilterChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ FilterChanged;" />
      <MemberSignature Language="F#" Value="member this.FilterChanged : EventHandler " Usage="member this.FilterChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn der Benutzer einen Wert für den Fremdschlüssel auswählt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.DynamicData.DynamicFilter.FilterChanged> Ereignis wird ausgelöst, wenn der Benutzer einen Wert für die Fremdschlüssel auswählt, und bevor der neue Wert gerendert wird. Dadurch können Sie eine Methode zur Verarbeitung von Ereignissen zu bieten, die benutzerdefinierten Vorgänge, z. B. benutzerdefiniertes Paging ausführen kann.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, wie ein Filter ausgelöstes Ereignis behandelt wird. Der Handler setzt den Seitenindex zurück, damit die gefilterten Zeilen angezeigt werden.  
  
 [!code-csharp[System.Web.DynamicData.DynamicFilter#3](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.dynamicdata.dynamicfilter/cs/dynamicfilter.aspx.cs#3)]
 [!code-vb[System.Web.DynamicData.DynamicFilter#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.dynamicdata.dynamicfilter/vb/dynamicfilter.aspx.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterTemplate">
      <MemberSignature Language="C#" Value="public System.Web.UI.Control FilterTemplate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.Control FilterTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicFilter.FilterTemplate" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FilterTemplate As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::Control ^ FilterTemplate { System::Web::UI::Control ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FilterTemplate : System.Web.UI.Control" Usage="System.Web.DynamicData.DynamicFilter.FilterTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Filtervorlage ab, die der aktuellen Instanz des Steuerelements zugeordnet ist.</summary>
        <value>Die Filtervorlage, die der aktuellen Instanz des Steuerelements zugeordnet ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dynamic Data generiert die Benutzeroberfläche zum Filtern von Tabellenzeilen nach unterstützten Spaltentypen aufgeführt. Er verwendet die Standardvorlagen für den Filter, die sich im Ordner "~\DynamicData\Filters" befinden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterUIHint">
      <MemberSignature Language="C#" Value="public string FilterUIHint { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FilterUIHint" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicFilter.FilterUIHint" />
      <MemberSignature Language="VB.NET" Value="Public Property FilterUIHint As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FilterUIHint { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FilterUIHint : string with get, set" Usage="System.Web.DynamicData.DynamicFilter.FilterUIHint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen der Filtervorlage ab, die zum Erstellen der Benutzeroberfläche verwendet wird, oder legt ihn fest.</summary>
        <value>Der Name der Filtervorlage.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.DynamicData.DynamicFilter.FilterUIHint%2A> -Eigenschaft können Sie die Filtervorlage zum Erstellen der Benutzeroberfläche für tabellenzeilenfilterung angeben. Sie können die Filtervorlage mit auf folgende Weise angeben:  
  
-   Mithilfe der <xref:System.Web.DynamicData.DynamicFilter.FilterUIHint%2A> -Eigenschaft in Seitenmarkup. Dieser Ansatz ist eine Darstellungsschicht Anpassung, dies ist unabhängig von der das Schema (Datenbank) und die zu einer Einzelseite angewendet.  
  
-   Mithilfe der <xref:System.ComponentModel.DataAnnotations.FilterUIHintAttribute> Attribut im Modell. Dieser Ansatz ist eine Datenschicht-Anpassung, welche hängt von dem speziellen Schema (Datenbank) und das gilt für die gesamte Anwendung.  
  
 Die Filtervorlage, die im Markup angegeben hat Vorrang vor allen die Vorlage, die im Datenmodell festgelegt, wenn Sie beide Ansätze verwenden, ist.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, wie die Filtervorlage in Markup zum Filtern zu verwendende angegeben wird.  
  
```  
<asp:DynamicFilter ID="CategoryFilter" runat="server"   
    FilterUIHint="ForeignKey" />  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicFilter.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Render (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="abstract member Render : System.Web.UI.HtmlTextWriter -&gt; unit&#xA;override this.Render : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="dynamicFilter.Render writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Das Objekt, das den Inhalt des Serversteuerelements empfängt.</param>
        <summary>Sendet Serversteuerelementinhalt an das angegebene <see cref="T:System.Web.UI.HtmlTextWriter" />-Objekt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Writer wird den Inhalt auf der Seite gerendert.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IFilterExpressionProvider.GetQueryable">
      <MemberSignature Language="C#" Value="System.Linq.IQueryable IFilterExpressionProvider.GetQueryable (System.Linq.IQueryable source);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Linq.IQueryable System.Web.DynamicData.IFilterExpressionProvider.GetQueryable(class System.Linq.IQueryable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicFilter.System#Web#DynamicData#IFilterExpressionProvider#GetQueryable(System.Linq.IQueryable)" />
      <MemberSignature Language="VB.NET" Value="Function GetQueryable (source As IQueryable) As IQueryable Implements IFilterExpressionProvider.GetQueryable" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Linq::IQueryable ^ System.Web.DynamicData.IFilterExpressionProvider.GetQueryable(System::Linq::IQueryable ^ source) = System::Web::DynamicData::IFilterExpressionProvider::GetQueryable;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.DynamicData.IFilterExpressionProvider.GetQueryable(System.Linq.IQueryable)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" />
      </Parameters>
      <Docs>
        <param name="source">Anfrage der Datenquelle.</param>
        <summary>Ruft die geänderte Abfrage mithilfe des aktuellen Filterwerts ab.</summary>
        <returns>Der Filter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung. Er kann nur verwendet werden, wenn die <xref:System.Web.DynamicData.DynamicFilter>-Instanz in eine <xref:System.Web.DynamicData.IFilterExpressionProvider>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IFilterExpressionProvider.Initialize">
      <MemberSignature Language="C#" Value="void IFilterExpressionProvider.Initialize (System.Web.UI.WebControls.IQueryableDataSource dataSource);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.DynamicData.IFilterExpressionProvider.Initialize(class System.Web.UI.WebControls.IQueryableDataSource dataSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicFilter.System#Web#DynamicData#IFilterExpressionProvider#Initialize(System.Web.UI.WebControls.IQueryableDataSource)" />
      <MemberSignature Language="VB.NET" Value="Sub Initialize (dataSource As IQueryableDataSource) Implements IFilterExpressionProvider.Initialize" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.DynamicData.IFilterExpressionProvider.Initialize(System::Web::UI::WebControls::IQueryableDataSource ^ dataSource) = System::Web::DynamicData::IFilterExpressionProvider::Initialize;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.DynamicData.IFilterExpressionProvider.Initialize(System.Web.UI.WebControls.IQueryableDataSource)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSource" Type="System.Web.UI.WebControls.IQueryableDataSource" />
      </Parameters>
      <Docs>
        <param name="dataSource">Die Datenquelle</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.DynamicData.DynamicFilter" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung. Er kann nur verwendet werden, wenn die <xref:System.Web.DynamicData.DynamicFilter>-Instanz in eine <xref:System.Web.DynamicData.IFilterExpressionProvider>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
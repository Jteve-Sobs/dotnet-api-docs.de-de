<Type Name="DynamicFilter" FullName="System.Web.DynamicData.DynamicFilter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="36d6b3cc1b6dd848285c0438db3c4d0fe11db41b" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30539914" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DynamicFilter : System.Web.UI.Control, System.Web.DynamicData.IFilterExpressionProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DynamicFilter extends System.Web.UI.Control implements class System.Web.DynamicData.IFilterExpressionProvider" />
  <TypeSignature Language="DocId" Value="T:System.Web.DynamicData.DynamicFilter" />
  <TypeSignature Language="VB.NET" Value="Public Class DynamicFilter&#xA;Inherits Control&#xA;Implements IFilterExpressionProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicFilter : System::Web::UI::Control, System::Web::DynamicData::IFilterExpressionProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Web.DynamicData</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Control</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.DynamicData.IFilterExpressionProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Zeigt die Benutzeroberfläche zum Filtern von Tabellenzeilen mithilfe einer angegebenen Spalte an.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In diesem Thema:  
  
-   [Introduction (Einführung)](#introduction)  
  
-   [ClassContext](#ClassContext)  
  
-   [Deklarationssyntax](#DeclarativeSyntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>Einführung  
 Die <xref:System.Web.DynamicData.DynamicFilter> Steuerelement wird in einem Seitenmarkup verwendet, um die Benutzeroberfläche zum Filtern von Tabellenzeilen zu generieren. Dynamische Daten erstellt die Benutzeroberfläche mithilfe der Filter-Standardvorlagen, die sich im Ordner "~\DynamicData\Filters" befinden. Diese Vorlagen unterstützen Fremdschlüssel, Boolean und Enumeration.  
  
 Die folgende Tabelle zeigt einige der Aufgaben, die Sie ausführen können.  
  
|Szenario|Beschreibung |  
|--------------|-----------------|  
|Geben Sie die Spalte, die für das Filtern von Tabellenzeilen verwendet.|Verwenden Sie die Eigenschaft <xref:System.Web.DynamicData.DynamicFilter.DataField%2A> an die Spalte zum Filtern von Tabellenzeilen verwendet.|  
|Geben Sie den Namen der Filtervorlage zu verwenden, um die Benutzeroberfläche zu erstellen.|Verwenden Sie die Eigenschaft <xref:System.Web.DynamicData.DynamicFilter.FilterUIHint%2A> an den Namen der Filtervorlage zu verwenden, um die Benutzeroberfläche zu erstellen.|  
|Führen Sie benutzerdefinierte Operationen aus, bevor die Benutzeroberfläche gerendert wird.|Verwenden der <xref:System.Web.DynamicData.DynamicFilter.FilterChanged> benutzerdefinierte Vorgänge ausführen, bevor die Benutzeroberfläche gerendert wird.|  
  
 Sie können die Filtervorlage mit auf folgende Weise angeben:  
  
-   Mithilfe der <xref:System.Web.DynamicData.DynamicFilter.FilterUIHint%2A> Eigenschaft im Seitenmarkup. Dieser Ansatz ist eine Anpassung auf Präsentationsebene, dies ist unabhängig von der das Schema (Datenbank) und, die für eine einzelne Seite gilt.  
  
-   Mithilfe der <xref:System.ComponentModel.DataAnnotations.FilterUIHintAttribute> Attribut im Modell. Dieser Ansatz ist eine Datenschicht Anpassung der abhängt, die bestimmten Schemas (Datenbank) und für die gesamte Anwendung gilt.  
  
 Wenn Sie beide Ansätze verwenden, hat die Filtervorlage, die im Markup angegeben wird Vorrang vor der Vorlage, die im Datenmodell angegeben wird.  
  
<a name="ClassContext"></a>   
## <a name="class-context"></a>Klassenkontext  
 Die <xref:System.Web.DynamicData.DynamicFilter> Steuerelement ist dienen zum Arbeiten mit der <xref:System.Web.UI.WebControls.QueryExtender> Steuerelement. Die <xref:System.Web.DynamicData.DynamicFilter> Steuerelement verweist auf eine <xref:System.Web.DynamicData.DynamicFilterExpression> -Instanz innerhalb einer <xref:System.Web.UI.WebControls.QueryExtender> Objekt im Markup Seite.  
  
 Die folgende Abbildung zeigt die Schritte, die Dynamic Data folgt, um Tabellenzeilen filtern nach einer foreign Key-Spalte zu implementieren.  
  
 ![Dynamische Daten Abfragen Elemente](~/add/media/dynamic-dataquery.png "dynamische Daten Abfragen, Elemente")  
  
1.  Die <xref:System.Web.DynamicData.DynamicFilter> Steuerelement übergibt den ausgewählten Wert an die <xref:System.Web.UI.WebControls.QueryExtender> Steuerelement.  
  
2.  Die <xref:System.Web.UI.WebControls.QueryExtender> Steuerelement verwendet den Wert zum Erstellen der Abfrage, die Informationen zu filtern. Es übergibt dann diese Informationen an das Datenquellensteuerelement an.  
  
3.  Datenquellen-Steuerelements übergibt den Filterinformationen Abfrage an dem Datenquellenanbieter.  
  
4.  Der Datenquellenanbieter übergibt die Abfrage mit der Datenbank.  
  
5.  Die Datenbank gibt Zeilen der gefilterten Tabelle zurück.  
  
6.  Der Datenquellenanbieter sendet diese Daten zurück an das Datenquellensteuerelement an.  
  
7.  Datenquellen-Steuerelements übergibt die Zeilen der gefilterten Tabelle für das datengebundene Steuerelement für die Anzeige.  
  
<a name="DeclarativeSyntax"></a>   
## <a name="declarative-syntax"></a>Deklarationssyntax  
  
```  
<asp:DynamicFilter  
    ID="Control ID"  
    DataField="Name of the data field to use for filtering"  
    EnableViewState="True|False"   
    FilterUIHint="Name of the filter template to generate the UI"  
    OnFilterChanged="Filter changed event handler"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnUnload="Unload event handler"   
    Visible="True|False"  
    runat="server"/>  
```  
  
   
  
## Examples  
 An dieser Stelle ist ein Visual Studio-Projekt mit Quellcode zur Verfügung: [herunterladen](http://go.microsoft.com/fwlink/?LinkId=168914).  
  
 In den folgenden Beispielen verwenden die Standardvorlage für ForeignKey.ascx Filter, um die Benutzeroberfläche zum Filtern der Products-Tabellenzeilen von der foreign Key-Spalte "ProductCategory" zu erstellen. Wenn der Benutzer einen Wert für "ProductCategory" auswählt, werden nur die Zeilen mit diesem Wert angezeigt.  
  
 Im Beispiel wird Folgendes vorausgesetzt:  
  
-   Eine Dynamic Data-Website oder eine Dynamic Data-Webanwendung. Dies ermöglicht Ihnen die Erstellung der `AdventureWorksLTDataContext` Datenkontext für die Datenbank und der Klassen für die Tabellen zugreifen. Weitere Informationen finden Sie unter `Walkthrough: Creating a New Dynamic Data Web Site using Scaffolding`.  
  
 [!code-aspx-csharp[System.Web.DynamicData.DynamicFilter#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.dynamicdata.dynamicfilter/cs/dynamicfilter.aspx#1)]
 [!code-aspx-vb[System.Web.DynamicData.DynamicFilter#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.dynamicdata.dynamicfilter/vb/dynamicfilter.aspx#1)]  
  
 [!code-csharp[System.Web.DynamicData.DynamicFilter#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.dynamicdata.dynamicfilter/cs/dynamicfilter.aspx.cs#2)]
 [!code-vb[System.Web.DynamicData.DynamicFilter#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.dynamicdata.dynamicfilter/vb/dynamicfilter.aspx.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.DynamicData.QueryableFilterRepeater" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicFilter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicFilter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicFilter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.DynamicData.DynamicFilter" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der Regel rufen Sie nicht die <xref:System.Web.DynamicData.DynamicFilter.%23ctor%2A> Konstruktor direkt. Verwenden Sie stattdessen die <xref:System.Web.DynamicData.DynamicFilter> Klasse im Seitenmarkup und der Klasse werden initialisiert, wenn die Seite geladen ist.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Column">
      <MemberSignature Language="C#" Value="protected internal System.Web.DynamicData.MetaColumn Column { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.DynamicData.MetaColumn Column" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicFilter.Column" />
      <MemberSignature Language="VB.NET" Value="Protected Friend ReadOnly Property Column As MetaColumn" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Web::DynamicData::MetaColumn ^ Column { System::Web::DynamicData::MetaColumn ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.MetaColumn</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die zum Filtern zu verwendende Tabellenspalte ab oder legt sie fest.</summary>
        <value>Die zum Filtern zu verwendende Tabellenspalte.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft ist nur zur internen Verwendung.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataField">
      <MemberSignature Language="C#" Value="public string DataField { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataField" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicFilter.DataField" />
      <MemberSignature Language="VB.NET" Value="Public Property DataField As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataField { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen der Spalte ab, die für Tabellenzeilenfilterung verwendet werden soll, oder legt ihn fest.</summary>
        <value>Der Name der für Tabellenzeilenfilterung verwendeten Spalte.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgende Beispiel wird gezeigt, wie die Spalte für die Tabelle zeilenfilterung im Markup angegeben.  
  
```  
<asp:DynamicFilter ID="CategoryFilter" runat="server"   
    DataField="ProductCategory" />  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterChanged">
      <MemberSignature Language="C#" Value="public event EventHandler FilterChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler FilterChanged" />
      <MemberSignature Language="DocId" Value="E:System.Web.DynamicData.DynamicFilter.FilterChanged" />
      <MemberSignature Language="VB.NET" Value="Public Event FilterChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ FilterChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn der Benutzer einen Wert für den Fremdschlüssel auswählt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.DynamicData.DynamicFilter.FilterChanged> Ereignis wird ausgelöst, wenn der Benutzer einen Fremdschlüsselwert auswählt und bevor der neue Wert gerendert wird. Dadurch können Sie eine Ereignisbehandlungsmethode bereitstellen, die benutzerdefinierte Vorgänge, z. B. benutzerdefinierte Paging ausführen können.  
  
   
  
## Examples  
 Im folgende Beispiel wird gezeigt, wie ein Filter ausgelöstes Ereignis behandelt wird. Der Handler setzt den Seitenindex zurück, damit die gefilterten Zeilen angezeigt werden.  
  
 [!code-csharp[System.Web.DynamicData.DynamicFilter#3](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.dynamicdata.dynamicfilter/cs/dynamicfilter.aspx.cs#3)]
 [!code-vb[System.Web.DynamicData.DynamicFilter#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.dynamicdata.dynamicfilter/vb/dynamicfilter.aspx.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterTemplate">
      <MemberSignature Language="C#" Value="public System.Web.UI.Control FilterTemplate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.Control FilterTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicFilter.FilterTemplate" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FilterTemplate As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::Control ^ FilterTemplate { System::Web::UI::Control ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Filtervorlage ab, die der aktuellen Instanz des Steuerelements zugeordnet ist.</summary>
        <value>Die Filtervorlage, die der aktuellen Instanz des Steuerelements zugeordnet ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dynamic Data generiert die Benutzeroberfläche zum Filtern von Tabellenzeilen nach unterstützten Spaltentypen aufgeführt. Er verwendet die Standardvorlagen für Filter, die sich im Ordner "~\DynamicData\Filters" befinden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterUIHint">
      <MemberSignature Language="C#" Value="public string FilterUIHint { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FilterUIHint" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicFilter.FilterUIHint" />
      <MemberSignature Language="VB.NET" Value="Public Property FilterUIHint As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FilterUIHint { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen der Filtervorlage ab, die zum Erstellen der Benutzeroberfläche verwendet wird, oder legt ihn fest.</summary>
        <value>Der Name der Filtervorlage.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.DynamicData.DynamicFilter.FilterUIHint%2A> -Eigenschaft können Sie die Filtervorlage zum Erstellen der Benutzeroberfläche für die Filterung von Zeilen angeben. Sie können die Filtervorlage mit auf folgende Weise angeben:  
  
-   Mithilfe der <xref:System.Web.DynamicData.DynamicFilter.FilterUIHint%2A> Eigenschaft im Seitenmarkup. Dieser Ansatz ist eine Darstellungsschicht Anpassung des Schemas (Datenbank) unabhängig ist und für eine einzelne Seite gilt.  
  
-   Mithilfe der <xref:System.ComponentModel.DataAnnotations.FilterUIHintAttribute> Attribut im Modell. Dieser Ansatz ist eine Datenschicht Anpassung der abhängt, die bestimmten Schemas (Datenbank) und für die gesamte Anwendung gilt.  
  
 Wenn Sie beide Ansätze verwenden, hat die Filtervorlage im Markup angegeben Vorrang vor der Vorlage angegeben, die im Datenmodell.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, wie die Filtervorlage in Markup zum Filtern angeben.  
  
```  
<asp:DynamicFilter ID="CategoryFilter" runat="server"   
    FilterUIHint="ForeignKey" />  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicFilter.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Render (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Das Objekt, das den Inhalt des Serversteuerelements empfängt.</param>
        <summary>Sendet Serversteuerelementinhalt an das angegebene <see cref="T:System.Web.UI.HtmlTextWriter" />-Objekt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Writer rendert den Inhalt der Seite.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IFilterExpressionProvider.GetQueryable">
      <MemberSignature Language="C#" Value="System.Linq.IQueryable IFilterExpressionProvider.GetQueryable (System.Linq.IQueryable source);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Linq.IQueryable System.Web.DynamicData.IFilterExpressionProvider.GetQueryable(class System.Linq.IQueryable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicFilter.System#Web#DynamicData#IFilterExpressionProvider#GetQueryable(System.Linq.IQueryable)" />
      <MemberSignature Language="VB.NET" Value="Function GetQueryable (source As IQueryable) As IQueryable Implements IFilterExpressionProvider.GetQueryable" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Linq::IQueryable ^ System.Web.DynamicData.IFilterExpressionProvider.GetQueryable(System::Linq::IQueryable ^ source) = System::Web::DynamicData::IFilterExpressionProvider::GetQueryable;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.DynamicData.IFilterExpressionProvider.GetQueryable(System.Linq.IQueryable)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" />
      </Parameters>
      <Docs>
        <param name="source">Anfrage der Datenquelle.</param>
        <summary>Ruft die geänderte Abfrage mithilfe des aktuellen Filterwerts ab.</summary>
        <returns>Der Filter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung. Er kann nur verwendet werden, wenn die <xref:System.Web.DynamicData.DynamicFilter>-Instanz in eine <xref:System.Web.DynamicData.IFilterExpressionProvider>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IFilterExpressionProvider.Initialize">
      <MemberSignature Language="C#" Value="void IFilterExpressionProvider.Initialize (System.Web.UI.WebControls.IQueryableDataSource dataSource);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.DynamicData.IFilterExpressionProvider.Initialize(class System.Web.UI.WebControls.IQueryableDataSource dataSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicFilter.System#Web#DynamicData#IFilterExpressionProvider#Initialize(System.Web.UI.WebControls.IQueryableDataSource)" />
      <MemberSignature Language="VB.NET" Value="Sub Initialize (dataSource As IQueryableDataSource) Implements IFilterExpressionProvider.Initialize" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.DynamicData.IFilterExpressionProvider.Initialize(System::Web::UI::WebControls::IQueryableDataSource ^ dataSource) = System::Web::DynamicData::IFilterExpressionProvider::Initialize;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.DynamicData.IFilterExpressionProvider.Initialize(System.Web.UI.WebControls.IQueryableDataSource)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSource" Type="System.Web.UI.WebControls.IQueryableDataSource" />
      </Parameters>
      <Docs>
        <param name="dataSource">Die Datenquelle</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.DynamicData.DynamicFilter" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung. Er kann nur verwendet werden, wenn die <xref:System.Web.DynamicData.DynamicFilter>-Instanz in eine <xref:System.Web.DynamicData.IFilterExpressionProvider>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
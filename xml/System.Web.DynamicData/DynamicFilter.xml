<Type Name="DynamicFilter" FullName="System.Web.DynamicData.DynamicFilter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f84affd983ceb52108c09eb4dd5cf8eebafaed42" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86680838" /></Metadata><TypeSignature Language="C#" Value="public class DynamicFilter : System.Web.UI.Control" FrameworkAlternate="netframework-4.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DynamicFilter extends System.Web.UI.Control" FrameworkAlternate="netframework-4.0" />
  <TypeSignature Language="DocId" Value="T:System.Web.DynamicData.DynamicFilter" />
  <TypeSignature Language="VB.NET" Value="Public Class DynamicFilter&#xA;Inherits Control" FrameworkAlternate="netframework-4.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicFilter : System::Web::UI::Control" FrameworkAlternate="netframework-4.0" />
  <TypeSignature Language="F#" Value="type DynamicFilter = class&#xA;    inherit Control" FrameworkAlternate="netframework-4.0" />
  <TypeSignature Language="C#" Value="public class DynamicFilter : System.Web.UI.Control, System.Web.DynamicData.IFilterExpressionProvider" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DynamicFilter extends System.Web.UI.Control implements class System.Web.DynamicData.IFilterExpressionProvider" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="VB.NET" Value="Public Class DynamicFilter&#xA;Inherits Control&#xA;Implements IFilterExpressionProvider" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicFilter : System::Web::UI::Control, System::Web::DynamicData::IFilterExpressionProvider" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="F#" Value="type DynamicFilter = class&#xA;    inherit Control&#xA;    interface IFilterExpressionProvider" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>System.Web.DynamicData</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Control</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <InterfaceName>System.Web.DynamicData.IFilterExpressionProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Zeigt die Benutzeroberfläche zum Filtern von Tabellenzeilen mithilfe einer angegebenen Spalte an.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Inhalte dieses Themas:  
  
-   [Introduction (Einführung)](#introduction)  
  
-   [ClassContext](#ClassContext)  
  
-   [Deklarative Syntax](#DeclarativeSyntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>Einführung  
 Das- <xref:System.Web.DynamicData.DynamicFilter> Steuerelement wird in einem Seiten Markup verwendet, um die Benutzeroberfläche zum Filtern von Tabellenzeilen zu generieren. Dynamische Daten erstellt die Benutzeroberfläche mithilfe der Standardfilter Vorlagen im Ordner "~ \dynamicdata\filters". Diese Vorlagen unterstützen Fremdschlüssel-, boolesche und Enumeration-Spaltentypen.  
  
 In der folgenden Tabelle sind einige der Aufgaben aufgeführt, die Sie ausführen können.  
  
|Szenario|BESCHREIBUNG|  
|--------------|-----------------|  
|Geben Sie die Spalte an, die für Tabellenzeilen Filterung verwendet werden soll.|Verwenden Sie die-Eigenschaft <xref:System.Web.DynamicData.DynamicFilter.DataField%2A> , um die Spalte anzugeben, die für Tabellenzeilen Filterung verwendet werden soll.|  
|Geben Sie den Namen der Filter Vorlage an, die zum Erstellen der Benutzeroberfläche verwendet werden soll.|Verwenden Sie die-Eigenschaft <xref:System.Web.DynamicData.DynamicFilter.FilterUIHint%2A> , um den Namen der Filter Vorlage anzugeben, die zum Erstellen der Benutzeroberfläche verwendet werden soll.|  
|Ausführen benutzerdefinierter Vorgänge, bevor die Benutzeroberfläche gerendert wird.|Verwenden <xref:System.Web.DynamicData.DynamicFilter.FilterChanged> Sie, um benutzerdefinierte Vorgänge auszuführen, bevor die Benutzeroberfläche gerendert wird.|  
  
 Sie können die zu verwendende Filter Vorlage wie folgt angeben:  
  
-   Mithilfe der- <xref:System.Web.DynamicData.DynamicFilter.FilterUIHint%2A> Eigenschaft im Seiten Markup. Bei diesem Ansatz handelt es sich um eine Anpassung der Präsentationsschicht, die unabhängig vom Schema (Datenbank) ist und für eine einzelne Seite gilt.  
  
-   Mithilfe des- <xref:System.ComponentModel.DataAnnotations.FilterUIHintAttribute> Attributs im Modell. Bei diesem Ansatz handelt es sich um eine Anpassung der Datenschicht, die abhängig vom jeweiligen Schema (Datenbank) ist und für die gesamte Anwendung gilt.  
  
 Wenn Sie beide Ansätze verwenden, hat die im Markup angegebene Filter Vorlage Vorrang vor der im Datenmodell angegebenen Vorlage.  
  
<a name="ClassContext"></a>   
## <a name="class-context"></a>Klassenkontext  
 Das- <xref:System.Web.DynamicData.DynamicFilter> Steuerelement ist für die Arbeit mit dem-Steuerelement konzipiert <xref:System.Web.UI.WebControls.QueryExtender> . Auf das- <xref:System.Web.DynamicData.DynamicFilter> Steuerelement wird von einer- <xref:System.Web.DynamicData.DynamicFilterExpression> Instanz innerhalb eines- <xref:System.Web.UI.WebControls.QueryExtender> Objekts im Seiten Markup verwiesen.  
  
 In der folgenden Abbildung werden die Schritte gezeigt, die dynamische Daten folgen, um die Tabellenzeilen Filterung durch eine Fremdschlüssel Spalte zu implementieren.  
  
 ![Dynamic Data-Abfrageelemente](~/add/media/dynamic-dataquery.png "Dynamic Data-Abfrageelemente")  
  
1.  Das- <xref:System.Web.DynamicData.DynamicFilter> Steuerelement übergibt den ausgewählten Wert an das- <xref:System.Web.UI.WebControls.QueryExtender> Steuerelement.  
  
2.  Das- <xref:System.Web.UI.WebControls.QueryExtender> Steuerelement verwendet den-Wert, um die Abfrage Filter Informationen zu erstellen. Diese Informationen werden dann an das Datenquellen-Steuerelement weitergeleitet.  
  
3.  Das Datenquellen-Steuerelement übergibt die Filter Abfrage Informationen an den Datenquellen Anbieter.  
  
4.  Der Datenquellen Anbieter übergibt die Abfrage an die Datenbank.  
  
5.  Die Datenbank gibt die gefilterten Tabellenzeilen zurück.  
  
6.  Der Datenquellen Anbieter sendet diese Daten an das Datenquellen-Steuerelement zurück.  
  
7.  Das Datenquellen-Steuerelement übergibt die gefilterten Tabellenzeilen zur Anzeige an das Daten gebundene Steuerelement.  
  
<a name="DeclarativeSyntax"></a>   
## <a name="declarative-syntax"></a>Deklarative Syntax  
  
```  
<asp:DynamicFilter  
    ID="Control ID"  
    DataField="Name of the data field to use for filtering"  
    EnableViewState="True|False"   
    FilterUIHint="Name of the filter template to generate the UI"  
    OnFilterChanged="Filter changed event handler"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnUnload="Unload event handler"   
    Visible="True|False"  
    runat="server"/>  
```  
  
   
  
## Examples  
 Ein Visual Studio-Projekt mit Quellcode ist an diesem Speicherort verfügbar: [Download](https://go.microsoft.com/fwlink/?LinkId=168914).  
  
 In den folgenden Beispielen wird die standardmäßige Foreign nkey. ascx-Filter Vorlage verwendet, um die Benutzeroberfläche zum Filtern der Tabellenzeilen der Produkte nach der ProductCategory-Fremdschlüssel Spalte zu erstellen. Wenn der Benutzer einen ProductCategory-Wert auswählt, werden nur die Zeilen angezeigt, die diesen Wert enthalten.  
  
 Für das Beispiel ist Folgendes erforderlich:  
  
-   Eine dynamische Daten-Website oder eine dynamische Daten-Webanwendung. Dies ermöglicht es Ihnen, den `AdventureWorksLTDataContext` Datenkontext für die Datenbank zu erstellen und die Klassen zu erstellen, auf die die Tabellen zugreifen können. Weitere Informationen finden Sie unter `Walkthrough: Creating a New Dynamic Data Web Site using Scaffolding`.  
  
 [!code-aspx-csharp[System.Web.DynamicData.DynamicFilter#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.dynamicdata.dynamicfilter/cs/dynamicfilter.aspx#1)]
 [!code-aspx-vb[System.Web.DynamicData.DynamicFilter#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.dynamicdata.dynamicfilter/vb/dynamicfilter.aspx#1)]  
  
 [!code-csharp[System.Web.DynamicData.DynamicFilter#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.dynamicdata.dynamicfilter/cs/dynamicfilter.aspx.cs#2)]
 [!code-vb[System.Web.DynamicData.DynamicFilter#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.dynamicdata.dynamicfilter/vb/dynamicfilter.aspx.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.DynamicData.QueryableFilterRepeater" />
    <related type="Article" href="https://msdn.microsoft.com/library/7c86f5d5-795c-4b28-8733-8ea9c0802d0f">Exemplarische Vorgehensweise: Filtern von Zeilen in Tabellen mit einer über-/Unterordnungsbeziehung</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicFilter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicFilter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicFilter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.DynamicData.DynamicFilter" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der Regel wird der- <xref:System.Web.DynamicData.DynamicFilter.%23ctor%2A> Konstruktor nicht direkt aufgerufen. Stattdessen verwenden Sie die <xref:System.Web.DynamicData.DynamicFilter> -Klasse im Seiten Markup, und die-Klasse wird initialisiert, wenn die Seite geladen wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Column">
      <MemberSignature Language="C#" Value="protected internal System.Web.DynamicData.MetaColumn Column { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.DynamicData.MetaColumn Column" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicFilter.Column" />
      <MemberSignature Language="VB.NET" Value="Protected Friend ReadOnly Property Column As MetaColumn" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Web::DynamicData::MetaColumn ^ Column { System::Web::DynamicData::MetaColumn ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Column : System.Web.DynamicData.MetaColumn" Usage="System.Web.DynamicData.DynamicFilter.Column" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.MetaColumn</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die zum Filtern zu verwendende Tabellenspalte ab oder legt sie fest.</summary>
        <value>Die zum Filtern zu verwendende Tabellenspalte.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft dient nur zur internen Verwendung.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataField">
      <MemberSignature Language="C#" Value="public string DataField { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataField" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicFilter.DataField" />
      <MemberSignature Language="VB.NET" Value="Public Property DataField As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataField { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataField : string with get, set" Usage="System.Web.DynamicData.DynamicFilter.DataField" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Data")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Data")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue("")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue("")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen der Spalte ab, die für Tabellenzeilenfilterung verwendet werden soll, oder legt ihn fest.</summary>
        <value>Der Name der für Tabellenzeilenfilterung verwendeten Spalte.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie die-Spalte für die Tabellenzeilen Filterung im Markup angegeben wird.  
  
```  
<asp:DynamicFilter ID="CategoryFilter" runat="server"   
    DataField="ProductCategory" />  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterChanged">
      <MemberSignature Language="C#" Value="public event EventHandler FilterChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler FilterChanged" />
      <MemberSignature Language="DocId" Value="E:System.Web.DynamicData.DynamicFilter.FilterChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event FilterChanged As EventHandler " FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ FilterChanged;" />
      <MemberSignature Language="F#" Value="member this.FilterChanged : EventHandler " Usage="member this.FilterChanged : System.EventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Event FilterChanged As EventHandler " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn der Benutzer einen Wert für den Fremdschlüssel auswählt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das <xref:System.Web.DynamicData.DynamicFilter.FilterChanged> -Ereignis wird ausgelöst, wenn der Benutzer einen Fremdschlüssel Wert auswählt und bevor der neue Wert gerendert wird. Dies ermöglicht es Ihnen, eine Ereignis Behandlungsmethode bereitzustellen, die benutzerdefinierte Vorgänge ausführen kann, z. b. benutzerdefiniertes Paging.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie ein Filter geändertes Ereignis behandelt wird. Der Handler setzt den Seitenindex zurück, bevor die gefilterten Zeilen angezeigt werden.  
  
 [!code-csharp[System.Web.DynamicData.DynamicFilter#3](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.dynamicdata.dynamicfilter/cs/dynamicfilter.aspx.cs#3)]
 [!code-vb[System.Web.DynamicData.DynamicFilter#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.dynamicdata.dynamicfilter/vb/dynamicfilter.aspx.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterTemplate">
      <MemberSignature Language="C#" Value="public System.Web.UI.Control FilterTemplate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.Control FilterTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicFilter.FilterTemplate" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FilterTemplate As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::Control ^ FilterTemplate { System::Web::UI::Control ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FilterTemplate : System.Web.UI.Control" Usage="System.Web.DynamicData.DynamicFilter.FilterTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Filtervorlage ab, die der aktuellen Instanz des Steuerelements zugeordnet ist.</summary>
        <value>Die Filtervorlage, die der aktuellen Instanz des Steuerelements zugeordnet ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dynamische Daten generiert die Benutzeroberfläche zum Filtern von Tabellenzeilen für unterstützte Spaltentypen. Dabei werden die Standardfilter Vorlagen verwendet, die sich im Ordner "~ \dynamicdata\filters" befinden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterUIHint">
      <MemberSignature Language="C#" Value="public string FilterUIHint { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FilterUIHint" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicFilter.FilterUIHint" />
      <MemberSignature Language="VB.NET" Value="Public Property FilterUIHint As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FilterUIHint { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FilterUIHint : string with get, set" Usage="System.Web.DynamicData.DynamicFilter.FilterUIHint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Behavior")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Behavior")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue("")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue("")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen der Filtervorlage ab, die zum Erstellen der Benutzeroberfläche verwendet wird, oder legt ihn fest.</summary>
        <value>Der Name der Filtervorlage.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit der- <xref:System.Web.DynamicData.DynamicFilter.FilterUIHint%2A> Eigenschaft können Sie die Filter Vorlage zum Erstellen der Benutzeroberfläche für die Tabellenzeilen Filterung angeben. Sie können die zu verwendende Filter Vorlage wie folgt angeben:  
  
-   Mithilfe der- <xref:System.Web.DynamicData.DynamicFilter.FilterUIHint%2A> Eigenschaft im Seiten Markup. Bei diesem Ansatz handelt es sich um eine Anpassung der Präsentationsschicht, die unabhängig vom Schema (Datenbank) ist und für eine einzelne Seite gilt.  
  
-   Mithilfe des- <xref:System.ComponentModel.DataAnnotations.FilterUIHintAttribute> Attributs im Modell. Bei diesem Ansatz handelt es sich um eine Anpassung der Datenschicht, die abhängig vom jeweiligen Schema (Datenbank) ist und für die gesamte Anwendung gilt.  
  
 Wenn Sie beide Ansätze verwenden, hat die im Markup angegebene Filter Vorlage Vorrang vor der im Datenmodell angegebenen Vorlage.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie Sie die Filter Vorlage in Markup angeben, die für die Filterung verwendet werden soll.  
  
```  
<asp:DynamicFilter ID="CategoryFilter" runat="server"   
    FilterUIHint="ForeignKey" />  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicFilter.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Render (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.Render : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="dynamicFilter.Render writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Das Objekt, das den Inhalt des Serversteuerelements empfängt.</param>
        <summary>Sendet Serversteuerelementinhalt an das angegebene <see cref="T:System.Web.UI.HtmlTextWriter" />-Objekt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Writer rendert den Inhalt auf der Seite.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IFilterExpressionProvider.GetQueryable">
      <MemberSignature Language="C#" Value="System.Linq.IQueryable IFilterExpressionProvider.GetQueryable (System.Linq.IQueryable source);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Linq.IQueryable System.Web.DynamicData.IFilterExpressionProvider.GetQueryable(class System.Linq.IQueryable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicFilter.System#Web#DynamicData#IFilterExpressionProvider#GetQueryable(System.Linq.IQueryable)" />
      <MemberSignature Language="VB.NET" Value="Function GetQueryable (source As IQueryable) As IQueryable Implements IFilterExpressionProvider.GetQueryable" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Linq::IQueryable ^ System.Web.DynamicData.IFilterExpressionProvider.GetQueryable(System::Linq::IQueryable ^ source) = System::Web::DynamicData::IFilterExpressionProvider::GetQueryable;" />
      <MemberSignature Language="F#" Value="abstract member System.Web.DynamicData.IFilterExpressionProvider.GetQueryable : System.Linq.IQueryable -&gt; System.Linq.IQueryable&#xA;override this.System.Web.DynamicData.IFilterExpressionProvider.GetQueryable : System.Linq.IQueryable -&gt; System.Linq.IQueryable" Usage="dynamicFilter.System.Web.DynamicData.IFilterExpressionProvider.GetQueryable source" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.DynamicData.IFilterExpressionProvider.GetQueryable(System.Linq.IQueryable)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IFilterExpressionProvider.Initialize">
      <MemberSignature Language="C#" Value="void IFilterExpressionProvider.Initialize (System.Web.UI.WebControls.IQueryableDataSource dataSource);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.DynamicData.IFilterExpressionProvider.Initialize(class System.Web.UI.WebControls.IQueryableDataSource dataSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicFilter.System#Web#DynamicData#IFilterExpressionProvider#Initialize(System.Web.UI.WebControls.IQueryableDataSource)" />
      <MemberSignature Language="VB.NET" Value="Sub Initialize (dataSource As IQueryableDataSource) Implements IFilterExpressionProvider.Initialize" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.DynamicData.IFilterExpressionProvider.Initialize(System::Web::UI::WebControls::IQueryableDataSource ^ dataSource) = System::Web::DynamicData::IFilterExpressionProvider::Initialize;" />
      <MemberSignature Language="F#" Value="abstract member System.Web.DynamicData.IFilterExpressionProvider.Initialize : System.Web.UI.WebControls.IQueryableDataSource -&gt; unit&#xA;override this.System.Web.DynamicData.IFilterExpressionProvider.Initialize : System.Web.UI.WebControls.IQueryableDataSource -&gt; unit" Usage="dynamicFilter.System.Web.DynamicData.IFilterExpressionProvider.Initialize dataSource" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.DynamicData.IFilterExpressionProvider.Initialize(System.Web.UI.WebControls.IQueryableDataSource)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSource" Type="System.Web.UI.WebControls.IQueryableDataSource" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="dataSource">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>

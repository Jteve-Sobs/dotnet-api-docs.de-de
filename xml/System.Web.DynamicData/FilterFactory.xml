<Type Name="FilterFactory" FullName="System.Web.DynamicData.FilterFactory">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bd65fb73338091c246b89d0287291387b020e235" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69055194" /></Metadata><TypeSignature Language="C#" Value="public class FilterFactory" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FilterFactory extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.DynamicData.FilterFactory" />
  <TypeSignature Language="VB.NET" Value="Public Class FilterFactory" />
  <TypeSignature Language="C++ CLI" Value="public ref class FilterFactory" />
  <TypeSignature Language="F#" Value="type FilterFactory = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web.DynamicData</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Erstellt eine Filtervorlage.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.DynamicData.FilterFactory> -Klasse wird zur Laufzeit von dynamische Daten verwendet, um eine Instanz einer Filter Vorlage für einen bestimmten Spaltentyp zu erhalten.  
  
 Sie können die Methoden überschreiben, die in dieser Klasse definiert sind, um die Art und Weise anzupassen, wie Filter Vorlagen geladen werden. Beispielsweise könnte eine benutzerdefinierte Implementierung die Filter Vorlagen von einem anderen Speicherort als dem Standardordner ~/DynamicData/Filters laden.  
  
 Dynamische Daten stellt Filter Vorlagen für Fremdschlüssel-, boolesche und Enumeration-Spaltentypen bereit und zeigt Sie mithilfe eines <xref:System.Web.UI.WebControls.DropDownList> -Steuer Elements an. Sie können auch benutzerdefinierte Filter Vorlagen erstellen.  
  
   
  
## Examples  
 Ein Beispiel für die Tabellenzeilen Filterung verwendet die Standardfilter Vorlagen. Weitere Informationen <xref:System.Web.DynamicData.QueryableFilterRepeater> finden Sie in der-Klasse.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.DynamicData.DynamicFilter" />
    <altmember cref="T:System.Web.DynamicData.QueryableFilterRepeater" />
    <altmember cref="T:System.Web.DynamicData.FieldTemplateFactory" />
    <altmember cref="T:System.Web.DynamicData.EntityTemplateFactory" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FilterFactory ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.FilterFactory.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FilterFactory();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.DynamicData.FilterFactory" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFilterControl">
      <MemberSignature Language="C#" Value="public virtual System.Web.DynamicData.QueryableFilterUserControl CreateFilterControl (System.Web.DynamicData.MetaColumn column, string filterUIHint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.DynamicData.QueryableFilterUserControl CreateFilterControl(class System.Web.DynamicData.MetaColumn column, string filterUIHint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.FilterFactory.CreateFilterControl(System.Web.DynamicData.MetaColumn,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateFilterControl (column As MetaColumn, filterUIHint As String) As QueryableFilterUserControl" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::DynamicData::QueryableFilterUserControl ^ CreateFilterControl(System::Web::DynamicData::MetaColumn ^ column, System::String ^ filterUIHint);" />
      <MemberSignature Language="F#" Value="abstract member CreateFilterControl : System.Web.DynamicData.MetaColumn * string -&gt; System.Web.DynamicData.QueryableFilterUserControl&#xA;override this.CreateFilterControl : System.Web.DynamicData.MetaColumn * string -&gt; System.Web.DynamicData.QueryableFilterUserControl" Usage="filterFactory.CreateFilterControl (column, filterUIHint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.QueryableFilterUserControl</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="column" Type="System.Web.DynamicData.MetaColumn" />
        <Parameter Name="filterUIHint" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="column">Die Datenspalte, auf die die Filtervorlage angewendet wird.</param>
        <param name="filterUIHint">Der Name der zu verwendenden Filtervorlage.</param>
        <summary>Erstellt eine Instanz der Filtervorlage.</summary>
        <returns>Eine Instanz der <see cref="T:System.Web.DynamicData.QueryableFilterUserControl" />-Klasse.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird von dynamische Daten aufgerufen, um eine Instanz einer Filter Vorlage zu erhalten. Abgeleitete Klassen können diese Methode überschreiben, um anzupassen, wie Instanzen von Filter Vorlagen erstellt werden. Beispielsweise könnte eine benutzerdefinierte Implementierung Vorlagen aus einer kompilierten Assembly anstatt aus dem Standardordner ~/DynamicData/Filters laden.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="column" /> ist **NULL**.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetFilterVirtualPath">
      <MemberSignature Language="C#" Value="public virtual string GetFilterVirtualPath (System.Web.DynamicData.MetaColumn column, string filterUIHint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetFilterVirtualPath(class System.Web.DynamicData.MetaColumn column, string filterUIHint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.FilterFactory.GetFilterVirtualPath(System.Web.DynamicData.MetaColumn,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFilterVirtualPath (column As MetaColumn, filterUIHint As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetFilterVirtualPath(System::Web::DynamicData::MetaColumn ^ column, System::String ^ filterUIHint);" />
      <MemberSignature Language="F#" Value="abstract member GetFilterVirtualPath : System.Web.DynamicData.MetaColumn * string -&gt; string&#xA;override this.GetFilterVirtualPath : System.Web.DynamicData.MetaColumn * string -&gt; string" Usage="filterFactory.GetFilterVirtualPath (column, filterUIHint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="column" Type="System.Web.DynamicData.MetaColumn" />
        <Parameter Name="filterUIHint" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="column">Die Datenspalte, auf die die Filtervorlage angewendet wird.</param>
        <param name="filterUIHint">Die zu verwendende Filtervorlage.</param>
        <summary>Ruft den virtuellen Pfad der Filtervorlage ab.</summary>
        <returns>Der virtuelle Pfad der Filtervorlage.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Standardmäßig befinden sich Filter Vorlagen im Ordner ~/DynamicData/Filers.  
  
 Diese Methode bestimmt den virtuellen Pfad des Ordners, der die Feld Vorlage enthält. Abgeleitete Klassen können diese Methode überschreiben, um Filter Vorlagen von einem anderen virtuellen Pfad bereitzustellen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="column" /> ist **NULL**.</exception>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="DynamicValidator" FullName="System.Web.DynamicData.DynamicValidator">
  <TypeSignature Language="C#" Value="public class DynamicValidator : System.Web.UI.WebControls.BaseValidator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DynamicValidator extends System.Web.UI.WebControls.BaseValidator" />
  <TypeSignature Language="DocId" Value="T:System.Web.DynamicData.DynamicValidator" />
  <TypeSignature Language="VB.NET" Value="Public Class DynamicValidator&#xA;Inherits BaseValidator" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicValidator : System::Web::UI::WebControls::BaseValidator" />
  <AssemblyInfo>
    <AssemblyName>System.Web.DynamicData</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.BaseValidator</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.DynamicData.DynamicValidator), "DynamicValidator.bmp")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="0f201-101">Dient zum Erzwingen und Abfangen von Ausnahmen, die in einem Datenmodell ausgelöst werden, und zeigt den Fehler an.</span><span class="sxs-lookup"><span data-stu-id="0f201-101">Enforces and catches exceptions that are thrown in a data model and displays the error.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f201-102">Die <xref:System.Web.DynamicData.DynamicValidator> -Steuerelement kann mit Datenfeldern oder Datenentitäten verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="0f201-102">The <xref:System.Web.DynamicData.DynamicValidator> control can be used with data fields or data entities.</span></span> <span data-ttu-id="0f201-103">Fängt Ausnahmen, die in LINQ to SQL-Klassen oder Entität im Erweiterbarkeitsmethoden im Datenmodell ausgelöst werden.</span><span class="sxs-lookup"><span data-stu-id="0f201-103">It catches exceptions that are thrown in LINQ-to-SQL classes or entity in extensibility methods in the data model.</span></span> <span data-ttu-id="0f201-104">Die <xref:System.Web.DynamicData.DynamicValidator> Steuerelement bezieht sich auf die Steuerelemente, die Benutzereingaben akzeptieren.</span><span class="sxs-lookup"><span data-stu-id="0f201-104">The <xref:System.Web.DynamicData.DynamicValidator> control is associated with the controls that accept user input.</span></span> <span data-ttu-id="0f201-105">Angenommen, ein <xref:System.Web.DynamicData.DynamicValidator> Steuerelement, das ein Textfeld, das zugeordnet ist, die Benutzereingaben für ein Feld "UnitsInStock" in eine Produkttabelle abfängt und die Ausnahme, die ausgelöst wird, wenn die Eingabe größer oder kleiner als die zulässigen Einheiten im Datenmodell wird angezeigt.</span><span class="sxs-lookup"><span data-stu-id="0f201-105">For example, a <xref:System.Web.DynamicData.DynamicValidator> control that is associated with a text box that accepts user input for a UnitsInStock field in a Products table catches and displays the exception that is thrown if the input is greater or less than the allowable units in the data model.</span></span>  
  
 <span data-ttu-id="0f201-106">Standardmäßig wird ASP.NET Dynamic Data nicht alle Ausnahmen, die aus dem Datenmodell auf der Seite angezeigt werden, da einige Datenbankausnahmen vertrauliche Informationen enthalten können.</span><span class="sxs-lookup"><span data-stu-id="0f201-106">By default, ASP.NET Dynamic Data does not display all exceptions from the data model in the page, because some database exceptions might contain confidential information.</span></span> <span data-ttu-id="0f201-107">Dynamic Data zeigt <xref:System.Web.DynamicData.DynamicValidator.ValidationException%2A> nur Werte.</span><span class="sxs-lookup"><span data-stu-id="0f201-107">Dynamic Data displays <xref:System.Web.DynamicData.DynamicValidator.ValidationException%2A> values only.</span></span> <span data-ttu-id="0f201-108">Wenn Sie Ihre Anwendung andere Ausnahmen anzeigen möchten, können Sie erstellen eine <xref:System.Web.DynamicData.DynamicValidator> steuern, geben Sie die Ausnahmen, die Sie anzeigen möchten, und fügen Sie die Ausnahmen zu den <xref:System.Web.DynamicData.DynamicValidator> Steuerelement.</span><span class="sxs-lookup"><span data-stu-id="0f201-108">If you want your application to display other exceptions, you can create a <xref:System.Web.DynamicData.DynamicValidator> control, provide the exceptions that you want to display, and attach the exceptions to the <xref:System.Web.DynamicData.DynamicValidator> control.</span></span> <span data-ttu-id="0f201-109">Die Ausnahmen, die im Datenmodell ausgelöst werden, werden auf allen Seiten in der Anwendung angezeigt.</span><span class="sxs-lookup"><span data-stu-id="0f201-109">The exceptions that are thrown in the data model will be displayed in all pages in the application.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0f201-110">Im folgende Beispiel wird gezeigt, wie zum Erstellen einer <xref:System.Web.DynamicData.DynamicValidator> -Klasse, die andere Ausnahmen auf allen Seiten angezeigt.</span><span class="sxs-lookup"><span data-stu-id="0f201-110">The following example shows how to create a <xref:System.Web.DynamicData.DynamicValidator> control class that displays other exceptions in all pages.</span></span>  
  
```vb  
''' <summary>   
''' Display other exceptions in all pages.   
''' </summary>   
Public Class MyDynamicValidator   
    Inherits DynamicValidator   
  
    Protected Overloads Overrides Sub ValidateException(ByVal exception As Exception)   
        ' If it's not an exception that DynamicValidator displays find   
        ' the innermost exception.   
        If Not (TypeOf exception Is IDynamicValidatorException) AndAlso _  
                Not (TypeOf exception Is ValidationException) Then   
            While exception.InnerException IsNot Nothing   
                exception = exception.InnerException   
            End While   
  
            ' Wrap it in a ValidationException so that the base code   
            ' does not ignore it.   
            If ExceptionShouldBeDisplayedInPage(exception) Then   
                exception = New ValidationException(Nothing, exception)   
            End If   
        End If   
  
        ' Call the base class for the exception that is modified.  
        MyBase.ValidateException(exception)   
    End Sub   
  
    Private Function ExceptionShouldBeDisplayedInPage(ByVal e As Exception) _  
            As Boolean   
        ' Add code to find the exception and   
        ' decide whether it should be shown in the page.  
  
        Return True   
    End Function   
End Class  
```  
  
```csharp  
/// <summary>  
/// Display other exceptions in all pages.   
/// </summary>  
public class MyDynamicValidator : DynamicValidator {  
  
    protected override void ValidateException(Exception exception) {  
        // If it's not an exception that DynamicValidator displays find   
        // the innermost exception.  
        if (!(exception is IDynamicValidatorException) && !(exception   
              is ValidationException)) {  
            while (exception.InnerException != null) {  
                exception = exception.InnerException;  
            }  
  
            // Wrap it in a ValidationException so that the base code   
            // does not ignore it.  
            if (ExceptionShouldBeDisplayedInPage(exception)) {  
                exception = new ValidationException(null, exception);  
            }  
        }  
  
        // Call the base class on the exception that is modified.  
        base.ValidateException(exception);  
    }  
  
    private bool ExceptionShouldBeDisplayedInPage(Exception e) {  
        // Add your code to find the exception and  
        // decides whether it should be shown in the page.  
  
           return true;  
    }  
}  
```  
  
 <span data-ttu-id="0f201-111">Im folgende Beispiel wird gezeigt, wie mit Neuzuordnen in der Datei "Web.config" die Ausnahme in den Webseiten angezeigt wird.</span><span class="sxs-lookup"><span data-stu-id="0f201-111">The following example shows how to use tag remapping in the web.config file to display the exception in all the Web pages.</span></span>  
  
```xml  
<pages>  
  <tagMapping>  
    <add tagType="System.Web.DynamicData.DynamicValidator"   
        mappedTagType="MyDynamicValidator"/>  
  </tagMapping>  
</pages>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicValidator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicValidator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicValidator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0f201-112">Initialisiert eine neue Instanz der <see cref="T:System.Web.DynamicData.DynamicValidator" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="0f201-112">Initializes a new instance of the <see cref="T:System.Web.DynamicData.DynamicValidator" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Column">
      <MemberSignature Language="C#" Value="public System.Web.DynamicData.MetaColumn Column { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.DynamicData.MetaColumn Column" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicValidator.Column" />
      <MemberSignature Language="VB.NET" Value="Public Property Column As MetaColumn" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::DynamicData::MetaColumn ^ Column { System::Web::DynamicData::MetaColumn ^ get(); void set(System::Web::DynamicData::MetaColumn ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.MetaColumn</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0f201-113">Ruft die zu überprüfende Spalte ab oder legt diese fest.</span><span class="sxs-lookup"><span data-stu-id="0f201-113">Gets or sets the column to validate.</span></span></summary>
        <value><span data-ttu-id="0f201-114">Die zu überprüfende Spalte oder <see langword="null" />, wenn eine Datenentität überprüft wird.</span><span class="sxs-lookup"><span data-stu-id="0f201-114">The column to validate, or <see langword="null" /> if a data entity is validated.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnName">
      <MemberSignature Language="C#" Value="public string ColumnName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ColumnName" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicValidator.ColumnName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ColumnName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ColumnName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0f201-115">Ruft den Namen der zu überprüfenden Spalte ab.</span><span class="sxs-lookup"><span data-stu-id="0f201-115">Gets the name of the column to validate.</span></span></summary>
        <value><span data-ttu-id="0f201-116">Der Name der zu überprüfenden Spalte oder <see langword="null" />, wenn eine Datenentität überprüft wird.</span><span class="sxs-lookup"><span data-stu-id="0f201-116">The name of the column to validate, or <see langword="null" /> if a data entity is validated.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ControlPropertiesValid">
      <MemberSignature Language="C#" Value="protected override bool ControlPropertiesValid ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool ControlPropertiesValid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicValidator.ControlPropertiesValid" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ControlPropertiesValid () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool ControlPropertiesValid();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0f201-117">Gibt an, ob die Eigenschaften des angegebenen <see cref="T:System.Web.DynamicData.DynamicValidator" />-Steuerelements gültig sind.</span><span class="sxs-lookup"><span data-stu-id="0f201-117">Indicates whether the properties of the specified <see cref="T:System.Web.DynamicData.DynamicValidator" /> control are valid.</span></span></summary>
        <returns>
          <span data-ttu-id="0f201-118"><see langword="true" />, wenn die Eigenschaften des angegebenen Validierungssteuerelements gültig sind, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0f201-118"><see langword="true" />, if the properties of the specified validation control are valid; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f201-119">Diese Methode wird von der Basisklasse überschrieben.</span><span class="sxs-lookup"><span data-stu-id="0f201-119">This method is overridden from the base class.</span></span> <span data-ttu-id="0f201-120">Der Aufruf der Basisklasse schlägt fehl, wenn das Steuerelement, das Sie versuchen, überprüfen Sie eine Validierungseigenschaft nicht verfügt.</span><span class="sxs-lookup"><span data-stu-id="0f201-120">The call to the base class fails if the control you try to validate does not have a validation property.</span></span> <span data-ttu-id="0f201-121">Z. B., wenn das Steuerelement eine <xref:System.Web.UI.WebControls.GridView>, die Basisklasse schlägt fehl.</span><span class="sxs-lookup"><span data-stu-id="0f201-121">For example if the control is a <xref:System.Web.UI.WebControls.GridView>, the base class will fail.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EvaluateIsValid">
      <MemberSignature Language="C#" Value="protected override bool EvaluateIsValid ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool EvaluateIsValid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicValidator.EvaluateIsValid" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function EvaluateIsValid () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool EvaluateIsValid();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0f201-122">Bestimmt, ob der Wert im zu überprüfenden Eingabesteuerelement gültig ist.</span><span class="sxs-lookup"><span data-stu-id="0f201-122">Determines whether the value in the input control to validate is valid.</span></span></summary>
        <returns>
          <span data-ttu-id="0f201-123"><see langword="true" />, wenn das überprüfte Validierungssteuerelement gültig ist, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0f201-123"><see langword="true" /> if the validation control that is evaluated is valid; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicValidator.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="0f201-124">Die Ereignisdaten.</span><span class="sxs-lookup"><span data-stu-id="0f201-124">The event data.</span></span></param>
        <summary><span data-ttu-id="0f201-125">Löst das <see langword="Init" />-Ereignis aus, um das <see cref="T:System.Web.DynamicData.DynamicValidator" />-Steuerelement zu initialisieren.</span><span class="sxs-lookup"><span data-stu-id="0f201-125">Raises the <see langword="Init" /> event to initialize the <see cref="T:System.Web.DynamicData.DynamicValidator" /> control.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateException">
      <MemberSignature Language="C#" Value="protected virtual void ValidateException (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ValidateException(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicValidator.ValidateException(System.Exception)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ValidateException(Exception ^ exception);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception"><span data-ttu-id="0f201-126">Die ausgelöste Ausnahme.</span><span class="sxs-lookup"><span data-stu-id="0f201-126">The exception that is thrown.</span></span></param>
        <summary><span data-ttu-id="0f201-127">Richtet eine Validierungsausnahme ein, wenn im Datenmodell eine Ausnahme auftritt.</span><span class="sxs-lookup"><span data-stu-id="0f201-127">Sets up a validation exception if an exception occurs in the data model.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f201-128">Diese Methode wird aufgerufen, wenn eine Ausnahme ausgelöst wird.</span><span class="sxs-lookup"><span data-stu-id="0f201-128">This method is called when an exception is thrown.</span></span> <span data-ttu-id="0f201-129">Ein Validator spaltenspezifischen schlägt fehl, wenn eine Validierungsausnahme eine zugeordnete innere Ausnahme enthält, jedoch fehl, wenn ein globales Validierungssteuerelement, tritt eine Validierungsausnahme auf.</span><span class="sxs-lookup"><span data-stu-id="0f201-129">A column-specific validator fails when a validation exception contains an associated inner exception, but a global validator fail when a non-validation exception occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0f201-130">Verwenden Sie diese Methode nur, wenn die Ausnahme eine <xref:System.Web.DynamicData.DynamicValidator.ValidationException%2A>.</span><span class="sxs-lookup"><span data-stu-id="0f201-130">Only use this method if the exception is a <xref:System.Web.DynamicData.DynamicValidator.ValidationException%2A>.</span></span> <span data-ttu-id="0f201-131">Wenn die Ausnahme, die durch ein Fehler verursacht wird, kann mit dieser Methode einen vertrauliche Datenbankfehler anzeigen</span><span class="sxs-lookup"><span data-stu-id="0f201-131">If the exception is caused by a database error, using this method can display a sensitive database error</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidationException">
      <MemberSignature Language="C#" Value="protected virtual Exception ValidationException { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception ValidationException" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicValidator.ValidationException" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Property ValidationException As Exception" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property Exception ^ ValidationException { Exception ^ get(); void set(Exception ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0f201-132">Ruft die Validierungsausnahme ab, die während der Validierung auftritt, oder legt diese fest.</span><span class="sxs-lookup"><span data-stu-id="0f201-132">Gets or sets validation exception that occurs during validation.</span></span></summary>
        <value><span data-ttu-id="0f201-133">Die ausgelöste Validierungsausnahme.</span><span class="sxs-lookup"><span data-stu-id="0f201-133">The validation exception that is thrown.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f201-134">Diese Eigenschaft stellt die Überprüfung Ausnahme dar, die ausgelöst wird, wenn ein Fehler auftritt, wenn ein Wert bearbeitet wird, oder wenn ein neuer Wert in das Datenmodell eingefügt wird.</span><span class="sxs-lookup"><span data-stu-id="0f201-134">This property represents the validation exception that is thrown if an error occurs when a value is edited or when a new value is inserted into the data model.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="DynamicValidator" FullName="System.Web.DynamicData.DynamicValidator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="093526ae1ddd9d10164ae4dd5f1b95d47674f63b" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78776941" /></Metadata><TypeSignature Language="C#" Value="public class DynamicValidator : System.Web.UI.WebControls.BaseValidator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DynamicValidator extends System.Web.UI.WebControls.BaseValidator" />
  <TypeSignature Language="DocId" Value="T:System.Web.DynamicData.DynamicValidator" />
  <TypeSignature Language="VB.NET" Value="Public Class DynamicValidator&#xA;Inherits BaseValidator" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicValidator : System::Web::UI::WebControls::BaseValidator" />
  <TypeSignature Language="F#" Value="type DynamicValidator = class&#xA;    inherit BaseValidator" />
  <AssemblyInfo>
    <AssemblyName>System.Web.DynamicData</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.BaseValidator</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.DynamicData.DynamicValidator), "DynamicValidator.bmp")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5">
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.DynamicData.DynamicValidator), "DynamicValidator.ico")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Dient zum Erzwingen und Abfangen von Ausnahmen, die in einem Datenmodell ausgelöst werden, und zeigt den Fehler an.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das <xref:System.Web.DynamicData.DynamicValidator>-Steuerelement kann mit Datenfeldern oder Daten Entitäten verwendet werden. Sie fängt Ausnahmen ab, die in LINQ-to-SQL-Klassen oder-Entitäten in Erweiterbarkeits Methoden im Datenmodell ausgelöst werden. Das <xref:System.Web.DynamicData.DynamicValidator> Steuerelement ist mit den Steuerelementen verknüpft, die Benutzereingaben akzeptieren. Beispiel: ein <xref:System.Web.DynamicData.DynamicValidator> Steuerelement, das einem Textfeld zugeordnet ist, das Benutzereingaben für ein UnitsInStock-Feld in einer Products-Tabelle annimmt, und zeigt die Ausnahme an, die ausgelöst wird, wenn die Eingabe größer oder kleiner als die zulässigen Einheiten im Datenmodell ist.  
  
 Standardmäßig zeigt ASP.net dynamische Daten nicht alle Ausnahmen aus dem Datenmodell auf der Seite an, da einige Daten Bank Ausnahmen vertrauliche Informationen enthalten können. Dynamische Daten nur <xref:System.Web.DynamicData.DynamicValidator.ValidationException%2A> Werte angezeigt. Wenn Sie möchten, dass in Ihrer Anwendung andere Ausnahmen angezeigt werden, können Sie ein <xref:System.Web.DynamicData.DynamicValidator> Steuerelement erstellen, die anzuzeigenden Ausnahmen angeben und die Ausnahmen an das <xref:System.Web.DynamicData.DynamicValidator> Steuerelement anfügen. Die Ausnahmen, die im Datenmodell ausgelöst werden, werden auf allen Seiten in der Anwendung angezeigt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie eine <xref:System.Web.DynamicData.DynamicValidator> Steuerelement Klasse erstellt wird, die andere Ausnahmen auf allen Seiten anzeigt.  
  
```vb  
''' <summary>   
''' Display other exceptions in all pages.   
''' </summary>   
Public Class MyDynamicValidator   
    Inherits DynamicValidator   
  
    Protected Overloads Overrides Sub ValidateException(ByVal exception As Exception)   
        ' If it's not an exception that DynamicValidator displays find   
        ' the innermost exception.   
        If Not (TypeOf exception Is IDynamicValidatorException) AndAlso _  
                Not (TypeOf exception Is ValidationException) Then   
            While exception.InnerException IsNot Nothing   
                exception = exception.InnerException   
            End While   
  
            ' Wrap it in a ValidationException so that the base code   
            ' does not ignore it.   
            If ExceptionShouldBeDisplayedInPage(exception) Then   
                exception = New ValidationException(Nothing, exception)   
            End If   
        End If   
  
        ' Call the base class for the exception that is modified.  
        MyBase.ValidateException(exception)   
    End Sub   
  
    Private Function ExceptionShouldBeDisplayedInPage(ByVal e As Exception) _  
            As Boolean   
        ' Add code to find the exception and   
        ' decide whether it should be shown in the page.  
  
        Return True   
    End Function   
End Class  
```  
  
```csharp  
/// <summary>  
/// Display other exceptions in all pages.   
/// </summary>  
public class MyDynamicValidator : DynamicValidator {  
  
    protected override void ValidateException(Exception exception) {  
        // If it's not an exception that DynamicValidator displays find   
        // the innermost exception.  
        if (!(exception is IDynamicValidatorException) && !(exception   
              is ValidationException)) {  
            while (exception.InnerException != null) {  
                exception = exception.InnerException;  
            }  
  
            // Wrap it in a ValidationException so that the base code   
            // does not ignore it.  
            if (ExceptionShouldBeDisplayedInPage(exception)) {  
                exception = new ValidationException(null, exception);  
            }  
        }  
  
        // Call the base class on the exception that is modified.  
        base.ValidateException(exception);  
    }  
  
    private bool ExceptionShouldBeDisplayedInPage(Exception e) {  
        // Add your code to find the exception and  
        // decides whether it should be shown in the page.  
  
           return true;  
    }  
}  
```  
  
 Im folgenden Beispiel wird gezeigt, wie die tagneuzuordnung in der Datei "Web. config" verwendet wird, um die Ausnahme in allen Webseiten anzuzeigen.  
  
```xml  
<pages>  
  <tagMapping>  
    <add tagType="System.Web.DynamicData.DynamicValidator"   
        mappedTagType="MyDynamicValidator"/>  
  </tagMapping>  
</pages>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicValidator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicValidator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicValidator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der Klasse <see cref="T:System.Web.DynamicData.DynamicValidator" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Column">
      <MemberSignature Language="C#" Value="public System.Web.DynamicData.MetaColumn Column { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.DynamicData.MetaColumn Column" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicValidator.Column" />
      <MemberSignature Language="VB.NET" Value="Public Property Column As MetaColumn" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::DynamicData::MetaColumn ^ Column { System::Web::DynamicData::MetaColumn ^ get(); void set(System::Web::DynamicData::MetaColumn ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Column : System.Web.DynamicData.MetaColumn with get, set" Usage="System.Web.DynamicData.DynamicValidator.Column" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.MetaColumn</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die zu überprüfende Spalte ab oder legt diese fest.</summary>
        <value>Die zu überprüfende Spalte oder <see langword="null" />, wenn eine Datenentität überprüft wird.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnName">
      <MemberSignature Language="C#" Value="public string ColumnName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ColumnName" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicValidator.ColumnName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ColumnName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ColumnName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ColumnName : string" Usage="System.Web.DynamicData.DynamicValidator.ColumnName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen der zu überprüfenden Spalte ab.</summary>
        <value>Der Name der zu überprüfenden Spalte oder <see langword="null" />, wenn eine Datenentität überprüft wird.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ControlPropertiesValid">
      <MemberSignature Language="C#" Value="protected override bool ControlPropertiesValid ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool ControlPropertiesValid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicValidator.ControlPropertiesValid" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ControlPropertiesValid () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool ControlPropertiesValid();" />
      <MemberSignature Language="F#" Value="override this.ControlPropertiesValid : unit -&gt; bool" Usage="dynamicValidator.ControlPropertiesValid " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt an, ob die Eigenschaften des angegebenen <see cref="T:System.Web.DynamicData.DynamicValidator" />-Steuerelements gültig sind.</summary>
        <returns><see langword="true" />, wenn die Eigenschaften des angegebenen Validierungssteuerelements gültig sind, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird von der-Basisklasse überschrieben. Der-Rückruf der-Basisklasse schlägt fehl, wenn das Steuerelement, das Sie überprüfen möchten, nicht über eine Validierungs Eigenschaft verfügt. Wenn das Steuerelement z. b. eine <xref:System.Web.UI.WebControls.GridView>ist, schlägt die Basisklasse fehl.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EvaluateIsValid">
      <MemberSignature Language="C#" Value="protected override bool EvaluateIsValid ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool EvaluateIsValid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicValidator.EvaluateIsValid" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function EvaluateIsValid () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool EvaluateIsValid();" />
      <MemberSignature Language="F#" Value="override this.EvaluateIsValid : unit -&gt; bool" Usage="dynamicValidator.EvaluateIsValid " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Bestimmt, ob der Wert im zu überprüfenden Eingabesteuerelement gültig ist.</summary>
        <returns><see langword="true" />, wenn das überprüfte Validierungssteuerelement gültig ist, andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicValidator.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnInit : EventArgs -&gt; unit" Usage="dynamicValidator.OnInit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Die Ereignisdaten.</param>
        <summary>Löst das <see langword="Init" />-Ereignis aus, um das <see cref="T:System.Web.DynamicData.DynamicValidator" />-Steuerelement zu initialisieren.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateException">
      <MemberSignature Language="C#" Value="protected virtual void ValidateException (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ValidateException(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicValidator.ValidateException(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ValidateException (exception As Exception)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ValidateException(Exception ^ exception);" />
      <MemberSignature Language="F#" Value="abstract member ValidateException : Exception -&gt; unit&#xA;override this.ValidateException : Exception -&gt; unit" Usage="dynamicValidator.ValidateException exception" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception">Die ausgelöste Ausnahme.</param>
        <summary>Richtet eine Validierungsausnahme ein, wenn im Datenmodell eine Ausnahme auftritt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird aufgerufen, wenn eine Ausnahme ausgelöst wird. Ein Spalten spezifisches Validierungs Steuerelement schlägt fehl, wenn eine Validierungs Ausnahme eine zugeordnete interne Ausnahme enthält, aber ein globaler Validierungs Steuerelement schlägt fehl, wenn eine nicht-Validierungs Ausnahme auftritt.  
  
> [!NOTE]
>  Verwenden Sie diese Methode nur, wenn die Ausnahme eine <xref:System.Web.DynamicData.DynamicValidator.ValidationException%2A>ist. Wenn die Ausnahme durch einen Datenbankfehler verursacht wird, kann bei Verwendung dieser Methode ein sensibler Datenbankfehler angezeigt werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidationException">
      <MemberSignature Language="C#" Value="protected virtual Exception ValidationException { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception ValidationException" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicValidator.ValidationException" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Property ValidationException As Exception" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property Exception ^ ValidationException { Exception ^ get(); void set(Exception ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ValidationException : Exception with get, set" Usage="System.Web.DynamicData.DynamicValidator.ValidationException" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Validierungsausnahme ab, die während der Validierung auftritt, oder legt diese fest.</summary>
        <value>Die ausgelöste Validierungsausnahme.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft stellt die Validierungs Ausnahme dar, die ausgelöst wird, wenn ein Fehler auftritt, wenn ein Wert bearbeitet wird oder wenn ein neuer Wert in das Datenmodell eingefügt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

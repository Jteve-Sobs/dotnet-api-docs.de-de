<Type Name="DynamicControl" FullName="System.Web.DynamicData.DynamicControl">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8b1f62672c7e824b7bd8ba349be1632ad21e81cf" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78777396" /></Metadata><TypeSignature Language="C#" Value="public class DynamicControl : System.Web.UI.Control, System.Web.DynamicData.IFieldFormattingOptions, System.Web.DynamicData.IFieldTemplateHost, System.Web.UI.IAttributeAccessor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DynamicControl extends System.Web.UI.Control implements class System.Web.DynamicData.IFieldFormattingOptions, class System.Web.DynamicData.IFieldTemplateHost, class System.Web.UI.IAttributeAccessor" />
  <TypeSignature Language="DocId" Value="T:System.Web.DynamicData.DynamicControl" />
  <TypeSignature Language="VB.NET" Value="Public Class DynamicControl&#xA;Inherits Control&#xA;Implements IAttributeAccessor, IFieldFormattingOptions, IFieldTemplateHost" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicControl : System::Web::UI::Control, System::Web::DynamicData::IFieldFormattingOptions, System::Web::DynamicData::IFieldTemplateHost, System::Web::UI::IAttributeAccessor" />
  <TypeSignature Language="F#" Value="type DynamicControl = class&#xA;    inherit Control&#xA;    interface IAttributeAccessor&#xA;    interface IFieldTemplateHost&#xA;    interface IFieldFormattingOptions" />
  <AssemblyInfo>
    <AssemblyName>System.Web.DynamicData</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Control</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.DynamicData.IFieldFormattingOptions</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.DynamicData.IFieldTemplateHost</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IAttributeAccessor</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.DynamicData.DynamicControl), "DynamicControl.bmp")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5">
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.DynamicData.DynamicControl), "DynamicControl.ico")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Zeigt mithilfe von ASP.NET Dynamic Data-Features den für das Feld definierten Inhalt in auf Vorlagen basierenden datengebundenen Steuerelementen an.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks
 Inhalte dieses Themas:

-   [Einführung](#introduction)

-   [Deklarative Syntax](#declarative_syntax)

<a name="introduction"></a>
## <a name="introduction"></a>Einführung
 Das <xref:System.Web.DynamicData.DynamicControl> Steuerelement wird von auf Vorlagen basierenden Daten gebundenen Steuerelementen, z. b. <xref:System.Web.UI.WebControls.FormView> oder <xref:System.Web.UI.WebControls.ListView>, zum Anzeigen eines Daten Felds verwendet, das dynamische Daten ASP.NET-Funktionen in einer benutzerdefinierten Seite verwendet. Sie können auch ein <xref:System.Web.DynamicData.DynamicControl>-Steuerelement in einem <xref:System.Web.UI.WebControls.TemplateField> Feld eines <xref:System.Web.UI.WebControls.GridView> oder eines <xref:System.Web.UI.WebControls.DetailsView> Steuer Elements verwenden.

 Das <xref:System.Web.DynamicData.DynamicControl>-Steuerelement stellt ähnliche Funktionen wie das <xref:System.Web.DynamicData.DynamicField> Feld bereit. Da das <xref:System.Web.DynamicData.DynamicControl>-Steuerelement jedoch nur in Vorlagen verwendet wird, bietet es Ihnen mehr Flexibilität bei der Steuerung der Anzeige der Daten, da Sie andere HTML-Elemente für das Feld hinzufügen können. Wenn Sie ein <xref:System.Web.DynamicData.DynamicControl>-Steuerelement verwenden, können Sie die folgenden dynamische Daten Features nutzen:

-   Automatisches Rendern des richtigen Steuer Elements für ein Feld mithilfe von Feld Vorlagen, basierend auf dem Datentyp. Die Feld Vorlagen können für die gesamte Anwendung Global geändert werden.

-   Bereitstellen integrierter Datenvalidierung auf Grundlage des Datenbankschemas. Sie können auch Validierungs Typen hinzufügen, indem Sie das Datenmodell anpassen.

-   Anpassen des Daten Renderings für einzelne Felder mithilfe von Attributen im Datenmodell oder mithilfe der <xref:System.Web.DynamicData.DynamicField.UIHint%2A>-Eigenschaft.

 Um das Feld anzugeben, das in einem <xref:System.Web.DynamicData.DynamicControl> Steuerelement angezeigt werden soll, legen Sie die Eigenschaft <xref:System.Web.DynamicData.DynamicControl.DataField%2A> auf den Feldnamen fest. Sie können eine benutzerdefinierte Formatierungs Zeichenfolge auf den Feldwert anwenden, indem Sie die <xref:System.Web.DynamicData.DynamicControl.DataFormatString%2A>-Eigenschaft festlegen. Standardmäßig wird die Formatierungs Zeichenfolge nur dann auf Feldwerte angewendet, wenn sich das Daten gebundene Steuerelement im schreibgeschützten Modus befindet. Um die Formatierungs Zeichenfolge auf die angezeigten Werte anzuwenden, während sich das Daten gebundene Steuerelement im Bearbeitungsmodus befindet, legen Sie die <xref:System.Web.DynamicData.DynamicControl.ApplyFormatInEditMode%2A>-Eigenschaft auf `true`fest. Wenn ein Feldwert `null`ist, können Sie eine benutzerdefinierte Beschriftung anzeigen, indem Sie die <xref:System.Web.DynamicData.DynamicControl.NullDisplayText%2A>-Eigenschaft festlegen. Das <xref:System.Web.DynamicData.DynamicControl> Steuerelement kann auch leere Zeichen folgen ("")-Feldwerte automatisch in NULL-Werte konvertieren, indem die <xref:System.Web.DynamicData.DynamicControl.ConvertEmptyStringToNull%2A>-Eigenschaft auf `true`festgelegt wird.

 Das <xref:System.Web.DynamicData.DynamicControl>-Steuerelement unterstützt verschiedene Anzeigemodi. Um den Modus anzugeben, in dem das <xref:System.Web.DynamicData.DynamicControl> Steuerelement angezeigt werden soll, legen Sie die <xref:System.Web.DynamicData.DynamicControl.Mode%2A>-Eigenschaft fest. In der folgenden Tabelle sind die verschiedenen Modi aufgeführt.

 <xref:System.Web.UI.WebControls.DataBoundControlMode.ReadOnly> für den Anzeigemodus. Dadurch wird verhindert, dass Benutzer die Werte eines Datensatzes oder eines Daten Felds ändern. Sie kann in jeder der Vorlagen verwendet werden.

 <xref:System.Web.UI.WebControls.DataBoundControlMode.Edit> für den Bearbeitungsmodus. Dies ermöglicht es Benutzern, die Werte eines vorhandenen Datensatzes zu aktualisieren. Sie wird in der Bearbeitungs Vorlage verwendet (in der Regel mit dem Namen `EditItemTemplate`).

 <xref:System.Web.UI.WebControls.DataBoundControlMode.Insert> für den Einfügemodus. Dies ermöglicht es Benutzern, Werte für einen neuen Datensatz einzugeben. Sie wird in der Einfügevorlage verwendet (in der Regel mit dem Namen `InsertItemTemplate`).

 Sie können ein <xref:System.Web.DynamicData.DynamicControl>-Steuerelement in einem Daten gebundenen Steuerelement ausblenden, indem Sie die Eigenschaft <xref:System.Web.UI.Control.Visible%2A> auf `false`festlegen.

<a name="declarative_syntax"></a>
## <a name="declarative-syntax"></a>Deklarative Syntax

```
<asp:DynamicControl
    ApplyFormatInEditMode="True|False"
    ConvertEmptyStringToNull="True|False"
    CssClass="string"
    DataField="string"
    DataFormatString="string"
    EnableViewState="True|False"
    HtmlEncode="True|False"
    ID="string"
    Mode="Edit|Insert|ReadOnly"
    NullDisplayText="string"
    OnDataBinding="DataBinding event handler"
    OnDisposed="Disposed event handler"
    OnInit="Init event handler"
    OnLoad="Load event handler"
    OnPreRender="PreRender event handler"
    OnUnload="Unload event handler"
    runat="server"
    UIHint="string"
    ValidationGroup="string"
    Visible="True|False"
>
</asp:DynamicControl>
```



## Examples
 Sehen Sie sich ein Lauf Zeit Codebeispiel für dieses Feature an: [Run](https://go.microsoft.com/fwlink/?LinkId=120736&sref=System.Web.DynamicData.DynamicControl).

 Im folgenden Beispiel wird veranschaulicht, wie das <xref:System.Web.DynamicData.DynamicControl>-Steuerelement in einem <xref:System.Web.UI.WebControls.ListView>-Steuerelement verwendet wird, um Werte aus einer Datenbanktabelle anzuzeigen, einzufügen, zu löschen und zu bearbeiten. Beachten Sie, dass die <xref:System.Data.Linq.Mapping.ColumnAttribute.IsDbGenerated%2A>-Eigenschaft der Spalten `rowguid` und `ModifiedDate` auf `true`festgelegt ist, damit der Einfügevorgang funktioniert.

 [!code-aspx-csharp[System.Web.DynamicData.DynamicControl#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.DynamicData.DynamicControl#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl/VB/Default.aspx#1)]

 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.DetailsView" />
    <altmember cref="T:System.Web.UI.WebControls.FormView" />
    <altmember cref="T:System.Web.UI.WebControls.GridView" />
    <altmember cref="T:System.Web.UI.WebControls.ListView" />
    <altmember cref="T:System.Web.UI.WebControls.Repeater" />
    <altmember cref="T:System.Web.DynamicData.DynamicField" />
    <related type="Article" href="https://msdn.microsoft.com/library/78c7fcd7-5f38-46a0-a4bc-48eff3c8a512">Übersicht über ASP.net dynamische Daten</related>
    <related type="Article" href="https://msdn.microsoft.com/library/e0166a58-9178-4660-81a6-175994b11b12">ASP.net dynamische Daten Gerüstbau</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der Klasse <see cref="T:System.Web.DynamicData.DynamicControl" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicControl.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicControl();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der Klasse <see cref="T:System.Web.DynamicData.DynamicControl" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicControl (System.Web.UI.WebControls.DataBoundControlMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Web.UI.WebControls.DataBoundControlMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicControl.#ctor(System.Web.UI.WebControls.DataBoundControlMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (mode As DataBoundControlMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicControl(System::Web::UI::WebControls::DataBoundControlMode mode);" />
      <MemberSignature Language="F#" Value="new System.Web.DynamicData.DynamicControl : System.Web.UI.WebControls.DataBoundControlMode -&gt; System.Web.DynamicData.DynamicControl" Usage="new System.Web.DynamicData.DynamicControl mode" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mode" Type="System.Web.UI.WebControls.DataBoundControlMode" />
      </Parameters>
      <Docs>
        <param name="mode">Einer der Enumerationswerte, der den Modus des Steuerelements angibt.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.DynamicData.DynamicControl" />-Klasse mit dem angegebenen Modus.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyFormatInEditMode">
      <MemberSignature Language="C#" Value="public bool ApplyFormatInEditMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ApplyFormatInEditMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.ApplyFormatInEditMode" />
      <MemberSignature Language="VB.NET" Value="Public Property ApplyFormatInEditMode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ApplyFormatInEditMode { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ApplyFormatInEditMode : bool with get, set" Usage="System.Web.DynamicData.DynamicControl.ApplyFormatInEditMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die von der <see cref="P:System.Web.DynamicData.DynamicControl.DataFormatString" />-Eigenschaft angegebene Formatierungszeichenfolge auf Feldwerte angewendet wird, wenn sich das Datenfeld im Bearbeitungsmodus befindet, oder legt diesen Wert fest.</summary>
        <value><see langword="true" />, wenn die Formatierungszeichenfolge angewendet wird, andernfalls <see langword="false" />. Der Standardwert lautet <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Das <xref:System.Web.DynamicData.DynamicControl>-Steuerelement verfügt über verschiedene Anzeigemodi, die dem Benutzer das Lesen, bearbeiten oder Einfügen eines Felds ermöglichen. Standardmäßig wird die durch die <xref:System.Web.DynamicData.DynamicControl.DataFormatString%2A>-Eigenschaft angegebene Formatierungs Zeichenfolge nur dann auf einen Feldwert angewendet, wenn sich das <xref:System.Web.DynamicData.DynamicControl> Steuerelement im schreibgeschützten Modus befindet. Um die Formatierungs Zeichenfolge auf die angezeigten Werte anzuwenden, während sich das Daten gebundene Steuerelement im Bearbeitungsmodus befindet, legen Sie die <xref:System.Web.DynamicData.DynamicControl.ApplyFormatInEditMode%2A>-Eigenschaft auf `true`fest.

> [!NOTE]
>  Das <xref:System.Web.DynamicData.DynamicControl> Steuerelement entfernt die Formatierung nicht automatisch, wenn das Feld in der Datenquelle aktualisiert wird. Wenn Sie nicht möchten, dass die Formatierung als Teil des gespeicherten Werts verwendet wird, müssen Sie die Formatierung Programm gesteuert entfernen.

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.DynamicData.DynamicControl.DataFormatString" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.Mode" />
      </Docs>
    </Member>
    <Member MemberName="Column">
      <MemberSignature Language="C#" Value="public System.Web.DynamicData.MetaColumn Column { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.DynamicData.MetaColumn Column" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.Column" />
      <MemberSignature Language="VB.NET" Value="Public Property Column As MetaColumn" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::DynamicData::MetaColumn ^ Column { System::Web::DynamicData::MetaColumn ^ get(); void set(System::Web::DynamicData::MetaColumn ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Column : System.Web.DynamicData.MetaColumn with get, set" Usage="System.Web.DynamicData.DynamicControl.Column" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.MetaColumn</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das dem Steuerelement zugeordnete Spaltenobjekt ab oder legt es fest.</summary>
        <value>Das Spaltenobjekt, das dem Steuerelement zugeordnet ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Mit der <xref:System.Web.DynamicData.DynamicControl.Column%2A>-Eigenschaft können Sie Metadateninformationen zu einer bestimmten Spalte abrufen. Die <xref:System.Web.DynamicData.DynamicControl.Column%2A>-Eigenschaft wird automatisch vom <xref:System.Web.DynamicData.DynamicControl>-Steuerelement basierend auf dem Feldnamen festgelegt, der für die <xref:System.Web.DynamicData.DynamicControl.DataField%2A>-Eigenschaft bereitgestellt wird.

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.DynamicData.DynamicControl.DataField" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.Table" />
      </Docs>
    </Member>
    <Member MemberName="ConvertEmptyStringToNull">
      <MemberSignature Language="C#" Value="public bool ConvertEmptyStringToNull { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ConvertEmptyStringToNull" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.ConvertEmptyStringToNull" />
      <MemberSignature Language="VB.NET" Value="Public Property ConvertEmptyStringToNull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ConvertEmptyStringToNull { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ConvertEmptyStringToNull : bool with get, set" Usage="System.Web.DynamicData.DynamicControl.ConvertEmptyStringToNull" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob bei der Aktualisierung des Datenfelds in der Datenquelle Werte, die leere Zeichenfolgen ("") darstellen, in NULL-Werte konvertiert werden, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn leere Zeichenfolgenwerte automatisch in NULL-Werte konvertiert werden, andernfalls <see langword="false" />. Der Standardwert lautet <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Das <xref:System.Web.UI.WebControls.Parameter>-Objekt des Datenquellen-Steuer Elements verfügt auch über eine Eigenschaft mit dem Namen <xref:System.Web.UI.WebControls.Parameter.ConvertEmptyStringToNull%2A?displayProperty=nameWithType>. Diese Eigenschaft führt die gleiche Funktion aus. Stellen Sie sicher, dass beide Eigenschaften entsprechend festgelegt sind.

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms366709(v=vs.100)">Verarbeiten von NULL-Daten bankwerten mithilfe von Datenquellen-</related>
      </Docs>
    </Member>
    <Member MemberName="CssClass">
      <MemberSignature Language="C#" Value="public virtual string CssClass { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CssClass" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.CssClass" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CssClass As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CssClass { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CssClass : string with get, set" Usage="System.Web.DynamicData.DynamicControl.CssClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.CssClassProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die CSS (Cascading Style Sheet)-Klasse ab, die die Anzeigestile für den Inhalt des <see cref="T:System.Web.DynamicData.DynamicControl" />-Steuerelements angibt, oder legt diese fest.</summary>
        <value>Der Name der CSS-Klasse.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataField">
      <MemberSignature Language="C#" Value="public string DataField { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataField" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.DataField" />
      <MemberSignature Language="VB.NET" Value="Public Property DataField As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataField { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataField : string with get, set" Usage="System.Web.DynamicData.DynamicControl.DataField" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen des Datenfelds ab, an das das <see cref="T:System.Web.DynamicData.DynamicControl" />-Steuerelement gebunden wird, oder legt diesen fest.</summary>
        <value>Der Name des Datenfelds, an das das <see cref="T:System.Web.DynamicData.DynamicControl" />-Steuerelement gebunden werden soll. Der Standardwert ist eine leere Zeichenfolge ("") und gibt an, dass diese Eigenschaft nicht festgelegt ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Verwenden Sie die <xref:System.Web.DynamicData.DynamicControl.DataField%2A>-Eigenschaft, um das Datenfeld anzugeben, das an das <xref:System.Web.DynamicData.DynamicControl> Steuerelement gebunden werden soll. Beim Datenfeld kann es sich um den Spaltennamen oder für Fremdschlüssel Spalten um den Beziehungs Namen handeln.

 Standardmäßig wird das angegebene Datenfeld vom <xref:System.Web.DynamicData.DynamicControl> Steuerelement mithilfe der Feld Vorlage angezeigt, die dem Feld Datentyp zugeordnet ist. Sie können die Feld Vorlage ändern, die für das Datenfeld gerendert wird, indem Sie die <xref:System.Web.DynamicData.DynamicControl.UIHint%2A>-Eigenschaft festlegen. Sie können auch den angezeigten Text formatieren, indem Sie die <xref:System.Web.DynamicData.DynamicControl.DataFormatString%2A>-Eigenschaft festlegen.

 **Hinweis** Wenn Sie die Anzeige und das Verhalten eines Daten Felds Global ändern möchten, müssen Sie Attribute auf das Datenmodell anwenden, anstatt dies in einer bestimmten Instanz des <xref:System.Web.DynamicData.DynamicControl> Steuer Elements festzulegen. Weitere Informationen finden Sie unter [ASP.net dynamische Daten](https://msdn.microsoft.com/library/78c7fcd7-5f38-46a0-a4bc-48eff3c8a512).



## Examples
 Im folgenden Beispiel wird veranschaulicht, wie die <xref:System.Web.DynamicData.DynamicControl.DataField%2A>-Eigenschaft verwendet wird, um anzugeben, welches Feld in einem <xref:System.Web.DynamicData.DynamicControl> Steuerelement angezeigt werden soll.

 [!code-aspx-csharp[System.Web.DynamicData.DynamicControl.DataField#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl.DataField/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.DynamicData.DynamicControl.DataField#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl.DataField/VB/Default.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.DynamicData.DynamicControl.DataFormatString" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.NullDisplayText" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.UIHint" />
      </Docs>
    </Member>
    <Member MemberName="DataFormatString">
      <MemberSignature Language="C#" Value="public string DataFormatString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataFormatString" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.DataFormatString" />
      <MemberSignature Language="VB.NET" Value="Public Property DataFormatString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataFormatString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataFormatString : string with get, set" Usage="System.Web.DynamicData.DynamicControl.DataFormatString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine Zeichenfolge ab, die das Anzeigeformat für den Wert des Felds angibt, oder legt diese fest.</summary>
        <value>Eine Formatierungszeichenfolge, die das Anzeigeformat für den Wert des Felds angibt. Der Standardwert ist eine leere Zeichenfolge (""), die angibt, dass keine besondere Formatierung auf den Feldwert angewendet wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Verwenden Sie die <xref:System.Web.DynamicData.DynamicControl.DataFormatString%2A>-Eigenschaft, um ein benutzerdefiniertes Anzeige Format für die Werte anzugeben, die im <xref:System.Web.DynamicData.DynamicControl> Steuerelement angezeigt werden. Wenn die <xref:System.Web.DynamicData.DynamicControl.DataFormatString%2A>-Eigenschaft nicht festgelegt ist, wird der Feldwert ohne spezielle Formatierung angezeigt.

 Standardmäßig wird die Formatierungs Zeichenfolge nur auf den Feldwert angewendet, wenn die <xref:System.Web.DynamicData.DynamicControl.Mode%2A>-Eigenschaft auf <xref:System.Web.UI.WebControls.DataBoundControlMode.ReadOnly>festgelegt ist. Wenn Sie die Formatierungs Zeichenfolge im Bearbeitungsmodus auf den Feldwert anwenden möchten, legen Sie die <xref:System.Web.DynamicData.DynamicControl.ApplyFormatInEditMode%2A>-Eigenschaft auf `true`fest.

 Das Anzeige Format, das Sie mithilfe der <xref:System.Web.DynamicData.DynamicControl.DataFormatString%2A>-Eigenschaft angeben, ist für diese Instanz des <xref:System.Web.DynamicData.DynamicControl> Steuer Elements spezifisch. Sie können auch das Anzeige Format für ein Datenfeld in der gesamten Anwendung ändern, indem Sie die <xref:System.ComponentModel.DataAnnotations.DisplayFormatAttribute> auf das Datenmodell anwenden und den <xref:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.DataFormatString%2A?displayProperty=nameWithType> benannten Parameter im Konstruktor festlegen. Weitere Informationen finden Sie unter [ASP.net dynamische Daten](https://msdn.microsoft.com/library/78c7fcd7-5f38-46a0-a4bc-48eff3c8a512).

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.DynamicData.DynamicControl.ApplyFormatInEditMode" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.DataField" />
        <altmember cref="T:System.ComponentModel.DataAnnotations.DisplayFormatAttribute" />
        <altmember cref="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.DataFormatString" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Formatieren von Typen in .NET</related>
      </Docs>
    </Member>
    <Member MemberName="FieldTemplate">
      <MemberSignature Language="C#" Value="public System.Web.UI.Control FieldTemplate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.Control FieldTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.FieldTemplate" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FieldTemplate As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::Control ^ FieldTemplate { System::Web::UI::Control ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FieldTemplate : System.Web.UI.Control" Usage="System.Web.DynamicData.DynamicControl.FieldTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Feldvorlage ab, die für das <see cref="T:System.Web.DynamicData.DynamicControl" />-Steuerelement erstellt wird.</summary>
        <value>Die Feldvorlage, die für das <see cref="T:System.Web.DynamicData.DynamicControl" />-Steuerelement erstellt wird.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public string GetAttribute (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetAttribute(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicControl.GetAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttribute (key As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetAttribute(System::String ^ key);" />
      <MemberSignature Language="F#" Value="abstract member GetAttribute : string -&gt; string&#xA;override this.GetAttribute : string -&gt; string" Usage="dynamicControl.GetAttribute key" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IAttributeAccessor.GetAttribute(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Der Name des Attributs.</param>
        <summary>Ruft den Attributwert mithilfe des angegebenen Schlüssels ab.</summary>
        <returns>Der Wert des Attributs.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Wenn die Attribut Auflistung `null`ist, gibt diese Methode eine leere Zeichenfolge zurück.

 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.DynamicData.DynamicControl.SetAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="public bool HtmlEncode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HtmlEncode" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.HtmlEncode" />
      <MemberSignature Language="VB.NET" Value="Public Property HtmlEncode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HtmlEncode { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.HtmlEncode : bool with get, set" Usage="System.Web.DynamicData.DynamicControl.HtmlEncode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die Daten für das Steuerelement vor dem Rendern HTML-codiert werden, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn die Daten für das Steuerelement vor dem Rendern HTML-codiert werden, andernfalls <see langword="false" />. Der Standardwert lautet <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Verwenden Sie die <xref:System.Web.DynamicData.DynamicControl.HtmlEncode%2A>-Eigenschaft, um anzugeben, ob Feldwerte in ihren jeweiligen Zeichen folgen Darstellungen HTML-codiert werden, bevor Sie angezeigt werden.

> [!NOTE]
>  HTML-Codierungs Feldwerte helfen, Site übergreifende Skript Angriffe und böswillige Inhalte zu verhindern. Diese Eigenschaft sollte nach Möglichkeit aktiviert werden. Weitere Informationen finden Sie unter [Übersicht über Skriptangriffe](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100)).

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.DataBoundControlMode Mode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.DataBoundControlMode Mode" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.Mode" />
      <MemberSignature Language="VB.NET" Value="Public Property Mode As DataBoundControlMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::DataBoundControlMode Mode { System::Web::UI::WebControls::DataBoundControlMode get(); void set(System::Web::UI::WebControls::DataBoundControlMode value); };" />
      <MemberSignature Language="F#" Value="member this.Mode : System.Web.UI.WebControls.DataBoundControlMode with get, set" Usage="System.Web.DynamicData.DynamicControl.Mode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataBoundControlMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Renderingmodus ab oder legt diesen fest.</summary>
        <value>Einer der Enumerationswerte, der den Renderingmodus für das Steuerelement angibt. Der Standardwert lautet <see cref="F:System.Web.UI.WebControls.DataBoundControlMode.ReadOnly" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Verwenden Sie die <xref:System.Web.DynamicData.DynamicControl.Mode%2A>-Eigenschaft, um anzugeben, welcher Rendermodus zum Anzeigen des <xref:System.Web.DynamicData.DynamicControl> Steuer Elements verwendet werden soll. In der folgenden Tabelle sind die verschiedenen Modi aufgeführt.

|Mode|BESCHREIBUNG|
|----------|-----------------|
|<xref:System.Web.UI.WebControls.DataBoundControlMode.ReadOnly>|für den Anzeigemodus. Dadurch wird verhindert, dass Benutzer die Werte eines Datensatzes oder eines Daten Felds ändern. Sie kann in jeder der Vorlagen verwendet werden. Dies ist der Standardwert.|
|<xref:System.Web.UI.WebControls.DataBoundControlMode.Edit>|für den Bearbeitungsmodus. Dies ermöglicht es Benutzern, die Werte eines vorhandenen Datensatzes zu aktualisieren. Sie wird in der `EditItemTemplate` Vorlage verwendet.|
|<xref:System.Web.UI.WebControls.DataBoundControlMode.Insert>|für den Einfügemodus. Dies ermöglicht es Benutzern, Werte für einen neuen Datensatz einzugeben. Sie wird in der `InsertItemTemplate` Vorlage verwendet.|

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NullDisplayText">
      <MemberSignature Language="C#" Value="public string NullDisplayText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NullDisplayText" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.NullDisplayText" />
      <MemberSignature Language="VB.NET" Value="Public Property NullDisplayText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NullDisplayText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NullDisplayText : string with get, set" Usage="System.Web.DynamicData.DynamicControl.NullDisplayText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Beschriftung ab, die für ein Datenfeld angezeigt wird, wenn der Wert des Felds <see langword="null" /> ist, oder legt diese fest.</summary>
        <value>Die Beschriftung, die für ein Datenfeld angezeigt wird, wenn der Wert des Felds <see langword="null" /> ist. Der Standardwert ist eine leere Zeichenfolge ("") und gibt an, dass diese Eigenschaft nicht festgelegt ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Manchmal wird ein Feldwert als NULL in der Datenquelle gespeichert. Sie können eine benutzerdefinierte Beschriftung angeben, die für Felder mit einem NULL-Wert angezeigt werden soll, indem Sie die <xref:System.Web.DynamicData.DynamicControl.NullDisplayText%2A>-Eigenschaft festlegen. Wenn diese Eigenschaft nicht festgelegt ist, werden NULL-Feldwerte als leere Zeichen folgen ("") angezeigt.

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.DynamicData.DynamicControl.DataField" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.DataFormatString" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.ConvertEmptyStringToNull" />
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicControl.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnInit : EventArgs -&gt; unit" Usage="dynamicControl.OnInit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Die Ereignisdaten.</param>
        <summary>Löst das <see cref="E:System.Web.UI.Control.Init" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [Behandeln und Auslösen von Ereignissen](~/docs/standard/events/index.md).

 Mit der <xref:System.Web.DynamicData.DynamicControl.OnInit%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die <see cref="P:System.Web.DynamicData.DynamicControl.DataField" />-Eigenschaft ist nicht festgelegt.</exception>
        <block subset="none" type="overrides"><para>Wenn Sie <see cref="M:System.Web.DynamicData.DynamicControl.OnInit(System.EventArgs)" /> in einer abgeleiteten Klasse überschreiben, stellen Sie sicher, dass die <see cref="M:System.Web.DynamicData.DynamicControl.OnInit(System.EventArgs)" />-Methode der Basisklasse aufgerufen wird, damit registrierte Delegaten das Ereignis empfangen.</para></block>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicControl.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Render (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.Render : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="dynamicControl.Render writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Das Objekt, mit dem der Inhalt des <see cref="T:System.Web.DynamicData.DynamicControl" />-Steuerelements im Clientbrowser gerendert wird.</param>
        <summary>Rendert den Inhalt des <see cref="T:System.Web.DynamicData.DynamicControl" />-Steuerelements mithilfe des angegebenen <see cref="T:System.Web.UI.HtmlTextWriter" />-Objekts im Browser des Clients.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Die <xref:System.Web.DynamicData.DynamicControl.Render%2A>-Methode wird hauptsächlich von Steuerelement Entwicklern verwendet, um das <xref:System.Web.DynamicData.DynamicControl> Steuerelement zu erweitern.

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAttribute">
      <MemberSignature Language="C#" Value="public void SetAttribute (string key, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetAttribute(string key, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicControl.SetAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttribute (key As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetAttribute(System::String ^ key, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member SetAttribute : string * string -&gt; unit&#xA;override this.SetAttribute : string * string -&gt; unit" Usage="dynamicControl.SetAttribute (key, value)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IAttributeAccessor.SetAttribute(System.String,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Der Name des festzulegenden Attributs.</param>
        <param name="value">Der Wert, der dem Attribut zugewiesen werden soll.</param>
        <summary>Legt das angegebene Attribut auf den angegebenen Wert fest.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IFieldTemplateHost.FormattingOptions">
      <MemberSignature Language="C#" Value="System.Web.DynamicData.IFieldFormattingOptions System.Web.DynamicData.IFieldTemplateHost.FormattingOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.DynamicData.IFieldFormattingOptions System.Web.DynamicData.IFieldTemplateHost.FormattingOptions" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.System#Web#DynamicData#IFieldTemplateHost#FormattingOptions" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property FormattingOptions As IFieldFormattingOptions Implements IFieldTemplateHost.FormattingOptions" />
      <MemberSignature Language="C++ CLI" Value="property System::Web::DynamicData::IFieldFormattingOptions ^ System::Web::DynamicData::IFieldTemplateHost::FormattingOptions { System::Web::DynamicData::IFieldFormattingOptions ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Web.DynamicData.IFieldTemplateHost.FormattingOptions : System.Web.DynamicData.IFieldFormattingOptions" Usage="System.Web.DynamicData.IFieldTemplateHost.FormattingOptions" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IFieldTemplateHost.FormattingOptions</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.IFieldFormattingOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Eine Beschreibung dieses Members finden Sie unter <see cref="P:System.Web.DynamicData.IFieldTemplateHost.FormattingOptions" />.</summary>
        <value>Die Formatierungsoptionen, die auf die Feldvorlage angewendet werden sollen.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Table">
      <MemberSignature Language="C#" Value="public virtual System.Web.DynamicData.MetaTable Table { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.DynamicData.MetaTable Table" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.Table" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Table As MetaTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::DynamicData::MetaTable ^ Table { System::Web::DynamicData::MetaTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Table : System.Web.DynamicData.MetaTable" Usage="System.Web.DynamicData.DynamicControl.Table" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.MetaTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Tabellenobjekt ab, das dem Steuerelement zugeordnet ist.</summary>
        <value>Das Tabellenobjekt, das dem Steuerelement zugeordnet ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Verwenden Sie die <xref:System.Web.DynamicData.DynamicControl.Table%2A>-Eigenschaft, um auf Metadateninformationen zu der Tabelle zuzugreifen, die dem Daten gebundenen Steuerelement zugeordnet ist, das das <xref:System.Web.DynamicData.DynamicControl> Steuerelement enthält.

 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Das <see cref="T:System.Web.DynamicData.DynamicControl" />-Steuerelement befindet sich in einem datengebundenen Steuerelement, das an kein Datenquellen-Steuerelement gebunden ist, von dem die <see cref="T:System.Web.DynamicData.IDynamicDataSource" />-Schnittstelle implementiert wird.</exception>
        <altmember cref="P:System.Web.DynamicData.DynamicControl.Column" />
      </Docs>
    </Member>
    <Member MemberName="UIHint">
      <MemberSignature Language="C#" Value="public virtual string UIHint { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UIHint" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.UIHint" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property UIHint As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ UIHint { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.UIHint : string with get, set" Usage="System.Web.DynamicData.DynamicControl.UIHint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen der Feldvorlage ab, die zum Rendern des Datenfelds verwendet wird, oder legt diesen fest.</summary>
        <value>Der Name der Feldvorlage, die zum Rendern des Datenfelds verwendet wird. Der Standardwert ist eine leere Zeichenfolge (""). Dies bedeutet, dass die Feldvorlage auf der Grundlage des Datenfeldtyps oder anhand von auf das Datenmodell angewendeten Metadateninformationen gerendert wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Verwenden Sie die <xref:System.Web.DynamicData.DynamicControl.UIHint%2A>-Eigenschaft, um die Feld Vorlage anzugeben, mit der die Benutzeroberfläche für ein Datenfeld angezeigt werden soll. Standardmäßig sind Feld Vorlagen Benutzer Steuerelemente und ihre Namen enthalten ein Suffix zum Identifizieren von Feld Vorlagen, die für Bearbeitungsvorgänge und Einfügevorgänge verwendet werden. Die Suffixe sind _edit bzw. _insert. Wenn Sie einen Wert für die <xref:System.Web.DynamicData.DynamicControl.UIHint%2A>-Eigenschaft festlegen, legen Sie den Namen ohne die Suffixe fest. Dynamische Daten identifiziert den korrekten Modus durch Auswerten des <xref:System.Web.DynamicData.DynamicControl.Mode%2A>-Eigenschafts Werts und renderdie richtige Feld Vorlage.

 Wenn die <xref:System.Web.DynamicData.DynamicControl.UIHint%2A>-Eigenschaft nicht festgelegt ist, wird standardmäßig dynamische Daten die Feld Vorlage basierend auf dem Feldtyp Rendering. Weitere Informationen finden Sie unter [ASP.net dynamische Daten Gerüstbau](https://msdn.microsoft.com/library/e0166a58-9178-4660-81a6-175994b11b12).

 Die Feld Vorlage, die Sie mithilfe der <xref:System.Web.DynamicData.DynamicControl.UIHint%2A>-Eigenschaft angeben, ist für diese Instanz des <xref:System.Web.DynamicData.DynamicControl> Steuer Elements spezifisch. Sie können auch die von einem Datenfeld verwendete Feld Vorlage in der gesamten Anwendung ändern, indem Sie die <xref:System.ComponentModel.DataAnnotations.UIHintAttribute> auf das Datenmodell anwenden. Durch Festlegen der <xref:System.Web.DynamicData.DynamicControl.UIHint%2A>-Eigenschaft werden die auf das Datenmodell angewendeten Metadaten überschrieben. Weitere Informationen zu Metadatenattributen finden Sie unter [ASP.net dynamische Daten](https://msdn.microsoft.com/library/78c7fcd7-5f38-46a0-a4bc-48eff3c8a512).



## Examples
 Sehen Sie sich ein Lauf Zeit Codebeispiel für dieses Feature an: [Run](https://go.microsoft.com/fwlink/?LinkId=120736&sref=System.Web.DynamicData.DynamicControl.UIHint).

 Im folgenden Beispiel wird gezeigt, wie Sie ein Datenfeld angeben können, um eine andere Feld Vorlage zum Rendering des Inhalts zu verwenden. Das zweite Beispiel zeigt die benutzerdefinierte Feld Vorlage, die von der <xref:System.Web.DynamicData.DynamicControl.UIHint%2A>-Eigenschaft angegeben wird.

 [!code-aspx-csharp[System.Web.DynamicData.DynamicControl.UIHint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl.UIHint/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.DynamicData.DynamicControl.UIHint#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl.UIHint/VB/Default.aspx#1)]

 [!code-aspx-csharp[System.Web.DynamicData.DynamicControl.UIHint#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl.UIHint/CS/Email.ascx#2)]
 [!code-aspx-vb[System.Web.DynamicData.DynamicControl.UIHint#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl.UIHint/VB/Email.ascx#2)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.DataAnnotations.UIHintAttribute" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.DataField" />
        <related type="Article" href="https://msdn.microsoft.com/library/78c7fcd7-5f38-46a0-a4bc-48eff3c8a512">Übersicht über das ASP.net dynamische Daten-Modell</related>
      </Docs>
    </Member>
    <Member MemberName="ValidationGroup">
      <MemberSignature Language="C#" Value="public virtual string ValidationGroup { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ValidationGroup" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.ValidationGroup" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ValidationGroup As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ValidationGroup { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ValidationGroup : string with get, set" Usage="System.Web.DynamicData.DynamicControl.ValidationGroup" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen der Validierungsgruppe für das Steuerelement ab oder legt diesen fest.</summary>
        <value>Der Validierungsgruppenname für das Steuerelement.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 Validierungs Gruppen ermöglichen es Ihnen, Validierungs Steuerelemente auf einer Seite einer bestimmten Kategorie zuzuweisen. Jede Validierungs Gruppe kann unabhängig von anderen Validierungs Gruppen auf der Seite überprüft werden. Verwenden Sie die <xref:System.Web.DynamicData.DynamicControl.ValidationGroup%2A>-Eigenschaft, um den Namen der Validierungs Gruppe anzugeben, für die das <xref:System.Web.DynamicData.DynamicControl>-Steuerelement eine Validierung veranlasst, wenn die Seite an den Server zurückgesendet wird.

 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

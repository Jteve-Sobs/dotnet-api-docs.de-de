<Type Name="IWebEventCustomEvaluator" FullName="System.Web.Management.IWebEventCustomEvaluator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2cb3d9bae91efd80a55508ab6d04fbaa0681160f" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51906530" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IWebEventCustomEvaluator" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IWebEventCustomEvaluator" />
  <TypeSignature Language="DocId" Value="T:System.Web.Management.IWebEventCustomEvaluator" />
  <TypeSignature Language="VB.NET" Value="Public Interface IWebEventCustomEvaluator" />
  <TypeSignature Language="C++ CLI" Value="public interface class IWebEventCustomEvaluator" />
  <TypeSignature Language="F#" Value="type IWebEventCustomEvaluator = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Wertet aus, ob ein Ereignis an den zugehörigen Anbieter zum Verarbeiten gesendet werden soll.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET-Systemüberwachung ermöglicht die Produktion und operatives Personal bereitgestellte Webanwendungen zu verwalten. Die <xref:System.Web.Management> Namespace enthält die integritätsereignis Typen, die verantwortlich für das Verpacken von Anwendungsdaten für Integritätsstatus und die Anbietertypen, die für die Verarbeitung dieser Daten verantwortlich. Darüber hinaus werden die unterstützende Typen, mit denen bei der Verwaltung der Health-Ereignisse enthält.  
  
 Diese Schnittstelle ermöglicht es, aktivieren oder deaktivieren das Auslösen eines bestimmten Ereignisses. Dies ist besonders nützlich, wenn Sie ein eigenes benutzerdefinierte Ereignis zu implementieren und die Rate zu steuern, an der er an den zugehörigen Anbieter zur Verarbeitung gesendet wird.  
  
> [!NOTE]
>  Diese Schnittstelle wird nicht gesteuert, wie oft das Ereignis ausgelöst wird. Es wird nur gesteuert, wie oft die Informationen zur Verarbeitung an den Anbieter gesendet wird.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie für die Ableitung der <xref:System.Web.Management.IWebEventCustomEvaluator> Schnittstelle beim Erstellen eines benutzerdefinierten Ereignisses.  
  
 [!code-csharp[System.Web.Management.WebBaseEvent#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WebBaseEvent/CS/webbaseevent.cs#1)]
 [!code-vb[System.Web.Management.WebBaseEvent#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WebBaseEvent/VB/webbaseevent.vb#1)]  
  
 Im folgenden ist ein Auszug aus der Konfigurationsdatei, die ASP.NET verwenden, ermöglicht die <xref:System.Web.Management.IWebEventCustomEvaluator.CanFire%2A> Methode entscheiden, ob das ausgelöste Ereignis für die Verarbeitung an den Anbieter gesendet werden muss.  
  
```  
<healthMonitoring   
  heartBeatInterval="0" enabled="true">  
  
    <providers>  
      <add name="SampleWebEventProvider"   
        type="SamplesAspNet.SampleEventProvider, webeventprovider, Version=1.0.1741.20369, Culture=neutral, PublicKeyToken=cf85aa6c978d9dea, processorArchitecture=MSIL" />  
    </providers>  
  
    <profiles>  
      <add   
        name="Custom"   
        minInstances="1"   
        maxLimit="Infinite"   
        minInterval="00:00:00"   
        custom ="SamplesAspNet.SampleWebRequestEvent,webrequestevent"   
        />  
    </profiles>  
  
    <eventMappings>  
  
      <add name="SampleWebRequestEvent" type="SamplesAspNet.SampleWebRequestEvent,webrequestevent, Version=1.0.1759.20533, Culture=neutral, PublicKeyToken=0d72899b07049076, processorArchitecture=MSIL" />  
  
    </eventMappings>  
  
    <rules>  
      <clear />  
  
        <add name="Custom Web Request Event"   
          eventName="SampleWebRequestEvent"  
          provider="SampleWebEventProvider" profile="Custom" />  
    </rules>  
  
</healthMonitoring>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Management.RuleFiringRecord" />
    <related type="Article" href="https://msdn.microsoft.com/library/e003f224-70fe-4cd8-a71a-2dc81e2d7e4c">Übersicht über die ASP.NET-Systemüberwachung</related>
  </Docs>
  <Members>
    <Member MemberName="CanFire">
      <MemberSignature Language="C#" Value="public bool CanFire (System.Web.Management.WebBaseEvent raisedEvent, System.Web.Management.RuleFiringRecord record);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanFire(class System.Web.Management.WebBaseEvent raisedEvent, class System.Web.Management.RuleFiringRecord record) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Management.IWebEventCustomEvaluator.CanFire(System.Web.Management.WebBaseEvent,System.Web.Management.RuleFiringRecord)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanFire (raisedEvent As WebBaseEvent, record As RuleFiringRecord) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanFire(System::Web::Management::WebBaseEvent ^ raisedEvent, System::Web::Management::RuleFiringRecord ^ record);" />
      <MemberSignature Language="F#" Value="abstract member CanFire : System.Web.Management.WebBaseEvent * System.Web.Management.RuleFiringRecord -&gt; bool" Usage="iWebEventCustomEvaluator.CanFire (raisedEvent, record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="raisedEvent" Type="System.Web.Management.WebBaseEvent" />
        <Parameter Name="record" Type="System.Web.Management.RuleFiringRecord" />
      </Parameters>
      <Docs>
        <param name="raisedEvent">Das auszulösende Ereignis.</param>
        <param name="record">Ein <see cref="T:System.Web.Management.RuleFiringRecord" /> mit Informationen über das Ereignis.</param>
        <summary>Wertet aus, ob ein Ereignis ausgelöst werden soll.</summary>
        <returns>
          <see langword="true" />, wenn das Ereignis ausgelöst werden soll, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die Auswertung des benutzerdefinierten Ereignisses gibt `true`, das Ereignis ausgelöst wird, und klicken Sie dann der entsprechende Anbieter verarbeitet.  
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt eine benutzerdefinierte Implementierung der <xref:System.Web.Management.IWebEventCustomEvaluator.CanFire%2A> Methode.  
  
 [!code-csharp[System.Web.Management.WebBaseEvent#22](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WebBaseEvent/CS/webbaseevent.cs#22)]
 [!code-vb[System.Web.Management.WebBaseEvent#22](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WebBaseEvent/VB/webbaseevent.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="Keyboard" FullName="Microsoft.VisualBasic.Devices.Keyboard">
  <Metadata><Meta Name="ms.openlocfilehash" Value="881909c1d3e3f89c507680c8d4a885b11bb43faa" /><Meta Name="ms.sourcegitcommit" Value="f6fc130f7b9399b2b130a137d6b0b2b73c1d17b3" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="11/18/2019" /><Meta Name="ms.locfileid" Value="74154470" /></Metadata><TypeSignature Language="C#" Value="public class Keyboard" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Keyboard extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Devices.Keyboard" />
  <TypeSignature Language="VB.NET" Value="Public Class Keyboard" />
  <TypeSignature Language="C++ CLI" Value="public ref class Keyboard" />
  <TypeSignature Language="F#" Value="type Keyboard = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides properties for accessing the current state of the keyboard, such as what keys are currently pressed, and provides a method to send keystrokes to the active window.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das `My.Computer.Keyboard`-Objekt stellt eine Schnittstelle zur Tastatur des Computers bereit. Die Eigenschaften des `My.Computer.Keyboard` enthalten Informationen zum Status mehrerer spezieller Schlüssel. Mit der `My.Computer.Keyboard.SendKeys`-Methode können Sie Schlüssel an das aktive Fenster senden, als ob Sie auf der Tastatur eingegeben wurden.  
  
## <a name="tasks"></a>Aufgaben  
 In der folgenden Tabelle wird ein Beispiel für eine Aufgabe mit dem `My.Computer.Keyboard`-Objekt aufgelistet.  
  
|Zweck|Informationen finden Sie unter .|  
|-|-|  
|Senden von Tastatureingaben an eine Anwendung|[Vorgehensweise: Starten von Anwendungen und Senden von Tastatureingaben (Visual Basic)](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-start-an-application-and-send-it-keystrokes.md)|  
  
## <a name="availability-by-project-type"></a>Verfügbarkeit nach Projekttyp  
  
|Projekttyp:|Verfügbar|  
|-|-|  
|Windows-Anwendung|**Ja**|  
|Klassenbibliothek|**Ja**|  
|Konsolenanwendung|**Ja**|  
|Windows-Steuerelement Bibliothek|**Ja**|  
|Websteuer Element Bibliothek|Nein|  
|Windows-Dienst|**Ja**|  
|Website|Nein|  
  
   
  
## Examples  
 In diesem Beispiel wird die `My.Computer.Keyboard.CtrlKeyDown`-Eigenschaft verwendet, um zu bestimmen, ob die STRG-Taste des Computers gedrückt wird.  
  
 [!code-vb[VbVbalrMyComputer#36](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#36)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
    <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objekte (Visual Basic)</related>
    <related type="Article" href="https://msdn.microsoft.com/library/aa37d54c-5c98-4b44-b98a-c26d2a03c038">Zugreifen auf die Tastatur</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Keyboard ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Devices.Keyboard.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Keyboard();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.Devices.Keyboard" /> class.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objekte (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/aa37d54c-5c98-4b44-b98a-c26d2a03c038">Zugreifen auf die Tastatur</related>
      </Docs>
    </Member>
    <Member MemberName="AltKeyDown">
      <MemberSignature Language="C#" Value="public bool AltKeyDown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AltKeyDown" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Devices.Keyboard.AltKeyDown" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AltKeyDown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AltKeyDown { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AltKeyDown : bool" Usage="Microsoft.VisualBasic.Devices.Keyboard.AltKeyDown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the ALT key is down.</summary>
        <value><see langword="True" />, wenn die Alt-Taste gedrückt ist. Andernfalls <see langword="False" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `My.Computer.Keyboard.AltKeyDown`-Eigenschaft bietet ähnliche Funktionen wie die <xref:System.Windows.Forms.Control.ModifierKeys%2A>-Eigenschaft.  
  
## <a name="availability-by-project-type"></a>Verfügbarkeit nach Projekttyp  
  
|Projekttyp:|Verfügbar|  
|-|-|  
|Windows-Anwendung|**Ja**|  
|Klassenbibliothek|**Ja**|  
|Konsolenanwendung|**Ja**|  
|Windows-Steuerelement Bibliothek|**Ja**|  
|Websteuer Element Bibliothek|Nein|  
|Windows-Dienst|**Ja**|  
|Website|Nein|  
  
   
  
## Examples  
 In diesem Beispiel wird die `My.Computer.Keyboard.AltKeyDown`-Eigenschaft verwendet, um zu bestimmen, ob die Alt-Taste des Computers herunter ist.  
  
 [!code-vb[VbVbalrMyComputer#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#23)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
        <altmember cref="P:System.Windows.Forms.Control.ModifierKeys" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objekte (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/aa37d54c-5c98-4b44-b98a-c26d2a03c038">Zugreifen auf die Tastatur</related>
      </Docs>
    </Member>
    <Member MemberName="CapsLock">
      <MemberSignature Language="C#" Value="public bool CapsLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CapsLock" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Devices.Keyboard.CapsLock" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CapsLock As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CapsLock { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CapsLock : bool" Usage="Microsoft.VisualBasic.Devices.Keyboard.CapsLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether CAPS LOCK is turned on.</summary>
        <value>Ein <see langword="Boolean" /> Wert: <see langword="True" />, wenn die Feststell Taste aktiviert ist. Andernfalls <see langword="False" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nur der Status der FESTSTELL Sperre wird zurückgegeben.  
  
## <a name="availability-by-project-type"></a>Verfügbarkeit nach Projekttyp  
  
|Projekttyp:|Verfügbar|  
|-|-|  
|Windows-Anwendung|**Ja**|  
|Klassenbibliothek|**Ja**|  
|Konsolenanwendung|**Ja**|  
|Windows-Steuerelement Bibliothek|**Ja**|  
|Websteuer Element Bibliothek|Nein|  
|Windows-Dienst|**Ja**|  
|Website|Nein|  
  
   
  
## Examples  
 In diesem Beispiel wird die `My.Computer.Keyboard.CapsLock`-Eigenschaft verwendet, um zu bestimmen, ob die Feststell Taste des Computers aktiviert ist.  
  
 [!code-vb[VbVbalrMyComputer#50](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#50)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objekte (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/aa37d54c-5c98-4b44-b98a-c26d2a03c038">Zugreifen auf die Tastatur</related>
      </Docs>
    </Member>
    <Member MemberName="CtrlKeyDown">
      <MemberSignature Language="C#" Value="public bool CtrlKeyDown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CtrlKeyDown" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Devices.Keyboard.CtrlKeyDown" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CtrlKeyDown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CtrlKeyDown { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CtrlKeyDown : bool" Usage="Microsoft.VisualBasic.Devices.Keyboard.CtrlKeyDown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether a CTRL key is down.</summary>
        <value><see langword="True" />, wenn eine STRG-Taste gedrückt ist. Andernfalls <see langword="False" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `My.Computer.Keyboard.CtrlKeyDown`-Eigenschaft bietet ähnliche Funktionen wie die <xref:System.Windows.Forms.Control.ModifierKeys%2A>-Eigenschaft.  
  
## <a name="availability-by-project-type"></a>Verfügbarkeit nach Projekttyp  
  
|Projekttyp:|Verfügbar|  
|-|-|  
|Windows-Anwendung|**Ja**|  
|Klassenbibliothek|**Ja**|  
|Konsolenanwendung|**Ja**|  
|Windows-Steuerelement Bibliothek|**Ja**|  
|Websteuer Element Bibliothek|Nein|  
|Windows-Dienst|**Ja**|  
|Website|Nein|  
  
   
  
## Examples  
 In diesem Beispiel wird die `My.Computer.Keyboard.CtrlKeyDown`-Eigenschaft verwendet, um zu bestimmen, ob die STRG-Taste des Computers herunter ist.  
  
 [!code-vb[VbVbalrMyComputer#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#34)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
        <altmember cref="P:System.Windows.Forms.Control.ModifierKeys" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objekte (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/aa37d54c-5c98-4b44-b98a-c26d2a03c038">Zugreifen auf die Tastatur</related>
      </Docs>
    </Member>
    <Member MemberName="NumLock">
      <MemberSignature Language="C#" Value="public bool NumLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NumLock" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Devices.Keyboard.NumLock" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NumLock As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NumLock { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.NumLock : bool" Usage="Microsoft.VisualBasic.Devices.Keyboard.NumLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the NUM LOCK key is on.</summary>
        <value><see langword="True" />, wenn die Num-Sperre on ist. Andernfalls <see langword="False" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nur der Status des num-Sperr Schlüssels wird zurückgegeben.  
  
## <a name="availability-by-project-type"></a>Verfügbarkeit nach Projekttyp  
  
|Projekttyp:|Verfügbar|  
|-|-|  
|Windows-Anwendung|**Ja**|  
|Klassenbibliothek|**Ja**|  
|Konsolenanwendung|**Ja**|  
|Windows-Steuerelement Bibliothek|**Ja**|  
|Websteuer Element Bibliothek|Nein|  
|Windows-Dienst|**Ja**|  
|Website|Nein|  
  
   
  
## Examples  
 In diesem Beispiel wird die `My.Computer.Keyboard.NumLock`-Eigenschaft verwendet, um zu bestimmen, ob der NUM-Sperr Schlüssel des Computers ist.  
  
 [!code-vb[VbVbalrMyComputer#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#48)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objekte (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/aa37d54c-5c98-4b44-b98a-c26d2a03c038">Zugreifen auf die Tastatur</related>
      </Docs>
    </Member>
    <Member MemberName="ScrollLock">
      <MemberSignature Language="C#" Value="public bool ScrollLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ScrollLock" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Devices.Keyboard.ScrollLock" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ScrollLock As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ScrollLock { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ScrollLock : bool" Usage="Microsoft.VisualBasic.Devices.Keyboard.ScrollLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see langword="Boolean" /> indicating whether the SCROLL LOCK key is on.</summary>
        <value><see langword="True" />, wenn die Scrollsperre on ist. Andernfalls <see langword="False" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nur der Status der scrollsperrtaste wird zurückgegeben.  
  
## <a name="availability-by-project-type"></a>Verfügbarkeit nach Projekttyp  
  
|Projekttyp:|Verfügbar|  
|-|-|  
|Windows-Anwendung|**Ja**|  
|Klassenbibliothek|**Ja**|  
|Konsolenanwendung|**Ja**|  
|Windows-Steuerelement Bibliothek|**Ja**|  
|Websteuer Element Bibliothek|Nein|  
|Windows-Dienst|**Ja**|  
|Website|Nein|  
  
   
  
## Examples  
 In diesem Beispiel wird die `My.Computer.Keyboard.ScrollLock`-Eigenschaft verwendet, um zu bestimmen, ob die scrollsperrtaste des Computers eingeschaltet ist.  
  
 [!code-vb[VbVbalrMyComputer#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objekte (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/aa37d54c-5c98-4b44-b98a-c26d2a03c038">Zugreifen auf die Tastatur</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="SendKeys">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Sends one or more keystrokes to the active window, as if typed on the keyboard.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendKeys">
      <MemberSignature Language="C#" Value="public void SendKeys (string keys);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void SendKeys(string keys) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Devices.Keyboard.SendKeys(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendKeys (keys As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendKeys(System::String ^ keys);" />
      <MemberSignature Language="F#" Value="member this.SendKeys : string -&gt; unit" Usage="keyboard.SendKeys keys" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="keys">A <see langword="String" /> that defines the keys to send.</param>
        <summary>Sends one or more keystrokes to the active window, as if typed on the keyboard.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `My.Computer.Keyboard.SendKeys`-Methode bietet ähnliche Funktionen wie die Methoden <xref:System.Windows.Forms.SendKeys.Send%2A> und <xref:System.Windows.Forms.SendKeys.SendWait%2A>.  
  
 Das `wait`-Argument ist hilfreich, wenn die andere Anwendung abgeschlossen werden muss, bevor die Anwendung fortgesetzt werden kann.  
  
> [!NOTE]
>  Da keine verwaltete Methode zum Aktivieren einer anderen Anwendung vorhanden ist, können Sie diese Klasse in der aktuellen Anwendung verwenden, das Fenster, an das die Schlüssel gesendet werden sollen, manuell auswählen oder Windows-API-Methoden verwenden, wie z. b. `FindWindow` und `SetForegroundWindow`, um den Fokus auf andere zu erzwingen. Bereich. Weitere Informationen finden Sie unter Exemplarische Vorgehensweise [: Aufrufen von Windows-APIs](~/docs/visual-basic/programming-guide/com-interop/walkthrough-calling-windows-apis.md).  
  
 Das `keys`-Argument kann einen beliebigen einzelnen Schlüssel oder einen beliebigen Schlüssel in Kombination mit alt, STRG oder UMSCHALT (oder einer beliebigen Kombination dieser Schlüssel) angeben. Jeder Schlüssel wird durch ein oder mehrere Zeichen dargestellt, z. b. `a` für das Zeichen "a" oder `{ENTER}` für die EINGABETASTE.  
  
 Um einen Schlüssel mit Shift zu kombinieren, stellen Sie dem Schlüsselcode `+` (Pluszeichen) voran. Um einen Schlüssel mit STRG zu kombinieren, stellen Sie dem Schlüsselcode `^` (Caretzeichen) voran. Um einen Schlüssel mit alt zu kombinieren, stellen Sie dem Schlüsselcode `%` (Prozentzeichen) voran. Verwenden Sie zum Angeben von wiederholten Schlüsseln das Formular `{`*Schlüsselnummer*`}`. Sie müssen ein Leerzeichen zwischen *Schlüssel* und *Zahl*platzieren. `{LEFT 42}` bedeutet z. b. "Drücken der Pfeiltaste nach links" 42 "; `{h 10}` bedeutet, dass "h" 10 Mal gedrückt wird. "  
  
 In der folgenden Tabelle werden die Codes aufgelistet, die zum Angeben von Zeichen verwendet werden können, die nicht angezeigt werden, wenn Sie die entsprechende Taste drücken (z. b. Eingabe oder Tab).  
  
|Key|Code|  
|-|-|  
|Rücktaste|{Backspace} oder {SB}|  
|BREAK|Umbruch|  
|Feststelltaste|{CapsLock}|  
|LÖSCHEN|Klartext|  
|DELETE|{DELETE} oder {del}|  
|NACH-UNTEN-TASTE|Auf|  
|ENDE|Schließlich|  
|Eingabe (numerische Keypad)|Eingehen|  
|EINGABETASTE|~|  
|ESC|{Escape} oder {ESC}|  
|HILFE|Hilft|  
|POS1|{HOME}|  
|INS|Setze|  
|NACH-LINKS-TASTE|Linken|  
|NUM-Sperre|NUM|  
|BILD-AB|{PGDN}|  
|BILD-AUF|{PGUP}|  
|EINGABETASTE|Hre|  
|NACH-RECHTS-TASTE|Rechten|  
|Scrollsperre|{ScrollLock}|  
|TAB|{TAB}|  
|NACH-OBEN-TASTE|{UP}|  
|F1 bis F15 Taste|{F1} bis {F15 Taste}|  
  
## <a name="availability-by-project-type"></a>Verfügbarkeit nach Projekttyp  
  
|Projekttyp:|Verfügbar|  
|-|-|  
|Windows-Anwendung|**Ja**|  
|Klassenbibliothek|**Ja**|  
|Konsolenanwendung|**Ja**|  
|Windows-Steuerelement Bibliothek|**Ja**|  
|Websteuer Element Bibliothek|Nein|  
|Windows-Dienst|**Ja**|  
|Website|Nein|  

## Examples  

In diesem Beispiel wird die `My.Computer.Keyboard.SendKeys`-Methode verwendet, um Tastatureingaben an eine externe Anwendung (die Notepad-Anwendung) zu senden, die von der <xref:Microsoft.VisualBasic.Interaction.Shell%2A>-Methode gestartet wurde
  
[!code-vb[VbVbalrMyComputer#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#25)]

Eine <xref:System.ArgumentException>-Ausnahme wird ausgegeben, wenn eine Anwendung mit dem angeforderten Prozessbezeichner nicht gefunden werden kann.
  
Der-<xref:Microsoft.VisualBasic.Interaction.Shell%2A> Methode erfordert Full Trust (<xref:System.Security.SecurityException>-Klasse).
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">A partial-trust situation exists in which the user lacks necessary permissions.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Steuert die Fähigkeit, auf Dateien und Ordner zuzugreifen. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Steuert die Berechtigungen, die sich auf Benutzeroberflächen und die Zwischenablage beziehen. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
        <altmember cref="M:System.Windows.Forms.SendKeys.Send(System.String)" />
        <altmember cref="M:System.Windows.Forms.SendKeys.SendWait(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objekte (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/aa37d54c-5c98-4b44-b98a-c26d2a03c038">Zugreifen auf die Tastatur</related>
        <related type="Article" href="https://msdn.microsoft.com/library/9280ca96-7a93-47a3-8d01-6d01be0657cb">Exemplarische Vorgehensweise: Aufrufen von Windows-APIs</related>
      </Docs>
    </Member>
    <Member MemberName="SendKeys">
      <MemberSignature Language="C#" Value="public void SendKeys (string keys, bool wait);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void SendKeys(string keys, bool wait) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Devices.Keyboard.SendKeys(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendKeys (keys As String, wait As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendKeys(System::String ^ keys, bool wait);" />
      <MemberSignature Language="F#" Value="member this.SendKeys : string * bool -&gt; unit" Usage="keyboard.SendKeys (keys, wait)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
        <Parameter Name="wait" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="keys">A <see langword="String" /> that defines the keys to send.</param>
        <param name="wait">Optional. A <see langword="Boolean" /> that specifies whether or not to wait for keystrokes to get processed before the application continues. <see langword="True" /> by default.</param>
        <summary>Sends one or more keystrokes to the active window, as if typed on the keyboard.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `My.Computer.Keyboard.SendKeys`-Methode bietet ähnliche Funktionen wie die Methoden <xref:System.Windows.Forms.SendKeys.Send%2A> und <xref:System.Windows.Forms.SendKeys.SendWait%2A>.  
  
 Das `wait`-Argument ist hilfreich, wenn die andere Anwendung abgeschlossen werden muss, bevor die Anwendung fortgesetzt werden kann.  
  
> [!NOTE]
>  Da keine verwaltete Methode zum Aktivieren einer anderen Anwendung vorhanden ist, können Sie diese Klasse in der aktuellen Anwendung verwenden, das Fenster, an das die Schlüssel gesendet werden sollen, manuell auswählen oder Windows-API-Methoden verwenden, wie z. b. `FindWindow` und `SetForegroundWindow`, um den Fokus auf andere zu erzwingen. Bereich. Weitere Informationen finden Sie unter Exemplarische Vorgehensweise [: Aufrufen von Windows-APIs](~/docs/visual-basic/programming-guide/com-interop/walkthrough-calling-windows-apis.md).  
  
 Das `keys`-Argument kann einen beliebigen einzelnen Schlüssel oder einen beliebigen Schlüssel in Kombination mit alt, STRG oder UMSCHALT (oder einer beliebigen Kombination dieser Schlüssel) angeben. Jeder Schlüssel wird durch ein oder mehrere Zeichen dargestellt, z. b. `a` für das Zeichen "a" oder `{ENTER}` für die EINGABETASTE.  
  
 Um einen Schlüssel mit Shift zu kombinieren, stellen Sie dem Schlüsselcode `+` (Pluszeichen) voran. Um einen Schlüssel mit STRG zu kombinieren, stellen Sie dem Schlüsselcode `^` (Caretzeichen) voran. Um einen Schlüssel mit alt zu kombinieren, stellen Sie dem Schlüsselcode `%` (Prozentzeichen) voran. Verwenden Sie zum Angeben von wiederholten Schlüsseln das Formular `{`*Schlüsselnummer*`}`. Sie müssen ein Leerzeichen zwischen *Schlüssel* und *Zahl*platzieren. `{LEFT 42}` bedeutet z. b. "Drücken der Pfeiltaste nach links" 42 "; `{h 10}` bedeutet, dass "h" 10 Mal gedrückt wird. "  
  
 In der folgenden Tabelle werden die Codes aufgelistet, die zum Angeben von Zeichen verwendet werden können, die nicht angezeigt werden, wenn Sie die entsprechende Taste drücken (z. b. Eingabe oder Tab).  
  
|Key|Code|  
|-|-|  
|Rücktaste|{Backspace} oder {SB}|  
|BREAK|Umbruch|  
|Feststelltaste|{CapsLock}|  
|LÖSCHEN|Klartext|  
|DELETE|{DELETE} oder {del}|  
|NACH-UNTEN-TASTE|Auf|  
|ENDE|Schließlich|  
|Eingabe (numerische Keypad)|Eingehen|  
|EINGABETASTE|~|  
|ESC|{Escape} oder {ESC}|  
|HILFE|Hilft|  
|POS1|{HOME}|  
|INS|Setze|  
|NACH-LINKS-TASTE|Linken|  
|NUM-Sperre|NUM|  
|BILD-AB|{PGDN}|  
|BILD-AUF|{PGUP}|  
|EINGABETASTE|Hre|  
|NACH-RECHTS-TASTE|Rechten|  
|Scrollsperre|{ScrollLock}|  
|TAB|{TAB}|  
|NACH-OBEN-TASTE|{UP}|  
|F1 bis F15 Taste|{F1} bis {F15 Taste}|  
  
## <a name="availability-by-project-type"></a>Verfügbarkeit nach Projekttyp  
  
|Projekttyp:|Verfügbar|  
|-|-|  
|Windows-Anwendung|**Ja**|  
|Klassenbibliothek|**Ja**|  
|Konsolenanwendung|**Ja**|  
|Windows-Steuerelement Bibliothek|**Ja**|  
|Websteuer Element Bibliothek|Nein|  
|Windows-Dienst|**Ja**|  
|Website|Nein|  

## Examples

In diesem Beispiel wird die `My.Computer.Keyboard.SendKeys`-Methode verwendet, um Tastatureingaben an eine externe Anwendung (die Notepad-Anwendung) zu senden, die von der <xref:Microsoft.VisualBasic.Interaction.Shell%2A>-Methode gestartet wurde
  
[!code-vb[VbVbalrMyComputer#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#25)]

Eine <xref:System.ArgumentException>-Ausnahme wird ausgegeben, wenn eine Anwendung mit dem angeforderten Prozessbezeichner nicht gefunden werden kann.
  
Der-<xref:Microsoft.VisualBasic.Interaction.Shell%2A> Methode erfordert Full Trust (<xref:System.Security.SecurityException>-Klasse).
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">A partial-trust situation exists in which the user lacks necessary permissions.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Steuert die Fähigkeit, auf Dateien und Ordner zuzugreifen. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Steuert die Berechtigungen, die sich auf Benutzeroberflächen und die Zwischenablage beziehen. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
        <altmember cref="M:System.Windows.Forms.SendKeys.Send(System.String)" />
        <altmember cref="M:System.Windows.Forms.SendKeys.SendWait(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objekte (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/aa37d54c-5c98-4b44-b98a-c26d2a03c038">Zugreifen auf die Tastatur</related>
        <related type="Article" href="https://msdn.microsoft.com/library/9280ca96-7a93-47a3-8d01-6d01be0657cb">Exemplarische Vorgehensweise: Aufrufen von Windows-APIs</related>
      </Docs>
    </Member>
    <Member MemberName="ShiftKeyDown">
      <MemberSignature Language="C#" Value="public bool ShiftKeyDown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShiftKeyDown" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Devices.Keyboard.ShiftKeyDown" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ShiftKeyDown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShiftKeyDown { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ShiftKeyDown : bool" Usage="Microsoft.VisualBasic.Devices.Keyboard.ShiftKeyDown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether a SHIFT key is down.</summary>
        <value><see langword="True" />, wenn eine UMSCHALTTASTE gedrückt ist. Andernfalls <see langword="False" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `My.Computer.Keyboard.ShiftKeyDown`-Eigenschaft bietet ähnliche Funktionen wie die <xref:System.Windows.Forms.Control.ModifierKeys%2A>-Eigenschaft.  
  
## <a name="availability-by-project-type"></a>Verfügbarkeit nach Projekttyp  
  
|Projekttyp:|Verfügbar|  
|-|-|  
|Windows-Anwendung|**Ja**|  
|Klassenbibliothek|**Ja**|  
|Konsolenanwendung|**Ja**|  
|Windows-Steuerelement Bibliothek|**Ja**|  
|Websteuer Element Bibliothek|Nein|  
|Windows-Dienst|**Ja**|  
|Website|Nein|  
  
   
  
## Examples  
 In diesem Beispiel wird die `My.Computer.Keyboard.ShiftKeyDown`-Eigenschaft verwendet, um zu bestimmen, ob einer der Umschalt Tasten des Computers nicht mehr festgelegt ist.  
  
 [!code-vb[VbVbalrMyComputer#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#47)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
        <altmember cref="P:System.Windows.Forms.Control.ModifierKeys" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objekte (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/aa37d54c-5c98-4b44-b98a-c26d2a03c038">Zugreifen auf die Tastatur</related>
      </Docs>
    </Member>
  </Members>
</Type>

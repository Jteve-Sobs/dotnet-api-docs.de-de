<Type Name="FileSystemEnumerable&lt;TResult&gt;" FullName="System.IO.Enumeration.FileSystemEnumerable&lt;TResult&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3bcd31c8bafed0e13e3b8dbae007efac755acff9" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86814834" /></Metadata><TypeSignature Language="C#" Value="public class FileSystemEnumerable&lt;TResult&gt; : System.Collections.Generic.IEnumerable&lt;TResult&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FileSystemEnumerable`1&lt;TResult&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!TResult&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.IO.Enumeration.FileSystemEnumerable`1" />
  <TypeSignature Language="VB.NET" Value="Public Class FileSystemEnumerable(Of TResult)&#xA;Implements IEnumerable(Of TResult)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA;public ref class FileSystemEnumerable : System::Collections::Generic::IEnumerable&lt;TResult&gt;" />
  <TypeSignature Language="F#" Value="type FileSystemEnumerable&lt;'Result&gt; = class&#xA;    interface seq&lt;'Result&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.IO.FileSystem</AssemblyName>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.IO.FileSystem" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <TypeParameters>
    <TypeParameter Name="TResult" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;TResult&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TResult"><span data-ttu-id="70888-101">Der Typ, den dieser Aufzähl Bare kapselt.</span><span class="sxs-lookup"><span data-stu-id="70888-101">The type that this enumerable encapsulates.</span></span></typeparam>
    <summary><span data-ttu-id="70888-102">Ermöglicht die Verwendung von benutzerdefinierten Filterprädikaten und Transformationsdelegaten zu Enumerationszwecken.</span><span class="sxs-lookup"><span data-stu-id="70888-102">Allows utilizing custom filter predicates and transform delegates for enumeration purposes.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileSystemEnumerable (string directory, System.IO.Enumeration.FileSystemEnumerable&lt;TResult&gt;.FindTransform transform, System.IO.EnumerationOptions? options = default);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string directory, class System.IO.Enumeration.FileSystemEnumerable`1/FindTransform&lt;!TResult&gt; transform, class System.IO.EnumerationOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Enumeration.FileSystemEnumerable`1.#ctor(System.String,System.IO.Enumeration.FileSystemEnumerable`1.FindTransform{`0},System.IO.EnumerationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (directory As String, transform As FileSystemEnumerable(Of TResult).FindTransform, Optional options As EnumerationOptions = Nothing)" />
      <MemberSignature Language="F#" Value="new System.IO.Enumeration.FileSystemEnumerable&lt;'Result&gt; : string * System.IO.Enumeration.FileSystemEnumerable&lt;'Result&gt;.FindTransform * System.IO.EnumerationOptions -&gt; System.IO.Enumeration.FileSystemEnumerable&lt;'Result&gt;" Usage="new System.IO.Enumeration.FileSystemEnumerable&lt;'Result&gt; (directory, transform, options)" />
      <MemberSignature Language="C#" Value="public FileSystemEnumerable (string directory, System.IO.Enumeration.FileSystemEnumerable&lt;TResult&gt;.FindTransform transform, System.IO.EnumerationOptions options = default);" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="transform" Type="System.IO.Enumeration.FileSystemEnumerable&lt;TResult&gt;+FindTransform" />
        <Parameter Name="options" Type="System.IO.EnumerationOptions" />
      </Parameters>
      <Docs>
        <param name="directory"><span data-ttu-id="70888-103">Der Pfad des Verzeichnisses, in dem die Enumeration ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="70888-103">The path of the directory where the enumeration will be performed.</span></span></param>
        <param name="transform"><span data-ttu-id="70888-104">Eine Delegatmethode zum Transformieren von Ergebnisrohdaten in ein Ergebnis.</span><span class="sxs-lookup"><span data-stu-id="70888-104">A delegate method for transforming raw find data into a result.</span></span></param>
        <param name="options"><span data-ttu-id="70888-105">Ein Objekt, das die Enumerationsoptionen beschreibt.</span><span class="sxs-lookup"><span data-stu-id="70888-105">An object describing the enumeration options.</span></span></param>
        <summary><span data-ttu-id="70888-106">Initialisiert eine neue Instanz der <see cref="T:System.IO.Enumeration.FileSystemEnumerable`1" />-Klasse mit bestimmten Such- und Filteroptionen.</span><span class="sxs-lookup"><span data-stu-id="70888-106">Initializes a new instance of the <see cref="T:System.IO.Enumeration.FileSystemEnumerable`1" /> class with specific search and filtering options.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="70888-107"><paramref name="directory" /> oder <paramref name="transform" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="70888-107"><paramref name="directory" /> or <paramref name="transform" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="70888-108">Der <paramref name="directory" />-Pfad ist leer.</span><span class="sxs-lookup"><span data-stu-id="70888-108">The <paramref name="directory" /> path is empty.</span></span>

<span data-ttu-id="70888-109">- oder -</span><span class="sxs-lookup"><span data-stu-id="70888-109">-or-</span></span>

<span data-ttu-id="70888-110"><paramref name="directory" /> enthält das NULL-Zeichen „\0“.</span><span class="sxs-lookup"><span data-stu-id="70888-110"><paramref name="directory" /> contains a null character "\0".</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;TResult&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!TResult&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Enumeration.FileSystemEnumerable`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerator&lt;TResult&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'Result&gt;&#xA;override this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'Result&gt;" Usage="fileSystemEnumerable.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="70888-111">Ruft den Enumerator für diesen Ergebnistyp ab.</span><span class="sxs-lookup"><span data-stu-id="70888-111">Retrieves the enumerator for this type of result.</span></span></summary>
        <returns><span data-ttu-id="70888-112">Ein Enumerator.</span><span class="sxs-lookup"><span data-stu-id="70888-112">An enumerator.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldIncludePredicate">
      <MemberSignature Language="C#" Value="public System.IO.Enumeration.FileSystemEnumerable&lt;TResult&gt;.FindPredicate? ShouldIncludePredicate { get; set; }" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Enumeration.FileSystemEnumerable`1/FindPredicate&lt;!TResult&gt; ShouldIncludePredicate" />
      <MemberSignature Language="DocId" Value="P:System.IO.Enumeration.FileSystemEnumerable`1.ShouldIncludePredicate" />
      <MemberSignature Language="VB.NET" Value="Public Property ShouldIncludePredicate As FileSystemEnumerable(Of TResult).FindPredicate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Enumeration::FileSystemEnumerable&lt;TResult&gt;::FindPredicate ^ ShouldIncludePredicate { System::IO::Enumeration::FileSystemEnumerable&lt;TResult&gt;::FindPredicate ^ get(); void set(System::IO::Enumeration::FileSystemEnumerable&lt;TResult&gt;::FindPredicate ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ShouldIncludePredicate : System.IO.Enumeration.FileSystemEnumerable&lt;'Result&gt;.FindPredicate with get, set" Usage="System.IO.Enumeration.FileSystemEnumerable&lt;'Result&gt;.ShouldIncludePredicate" />
      <MemberSignature Language="C#" Value="public System.IO.Enumeration.FileSystemEnumerable&lt;TResult&gt;.FindPredicate ShouldIncludePredicate { get; set; }" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Enumeration.FileSystemEnumerable&lt;TResult&gt;+FindPredicate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="70888-113">Ruft das Prädikat ab, das verwendet werden kann, um zu überprüfen, ob TResults einbezogen werden sollen, oder legt dieses Prädikat fest.</span><span class="sxs-lookup"><span data-stu-id="70888-113">Gets or sets the predicate that can be used to verify if the TResults should be included.</span></span></summary>
        <value><span data-ttu-id="70888-114">Das include-Prädikat.</span><span class="sxs-lookup"><span data-stu-id="70888-114">The include predicate.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldRecursePredicate">
      <MemberSignature Language="C#" Value="public System.IO.Enumeration.FileSystemEnumerable&lt;TResult&gt;.FindPredicate? ShouldRecursePredicate { get; set; }" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Enumeration.FileSystemEnumerable`1/FindPredicate&lt;!TResult&gt; ShouldRecursePredicate" />
      <MemberSignature Language="DocId" Value="P:System.IO.Enumeration.FileSystemEnumerable`1.ShouldRecursePredicate" />
      <MemberSignature Language="VB.NET" Value="Public Property ShouldRecursePredicate As FileSystemEnumerable(Of TResult).FindPredicate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Enumeration::FileSystemEnumerable&lt;TResult&gt;::FindPredicate ^ ShouldRecursePredicate { System::IO::Enumeration::FileSystemEnumerable&lt;TResult&gt;::FindPredicate ^ get(); void set(System::IO::Enumeration::FileSystemEnumerable&lt;TResult&gt;::FindPredicate ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ShouldRecursePredicate : System.IO.Enumeration.FileSystemEnumerable&lt;'Result&gt;.FindPredicate with get, set" Usage="System.IO.Enumeration.FileSystemEnumerable&lt;'Result&gt;.ShouldRecursePredicate" />
      <MemberSignature Language="C#" Value="public System.IO.Enumeration.FileSystemEnumerable&lt;TResult&gt;.FindPredicate ShouldRecursePredicate { get; set; }" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Enumeration.FileSystemEnumerable&lt;TResult&gt;+FindPredicate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="70888-115">Ruft das Prädikat ab, das verwendet werden kann, um zu überprüfen, ob TResults rekursiv durchlaufen werden sollen, oder legt dieses Prädikat fest.</span><span class="sxs-lookup"><span data-stu-id="70888-115">Gets or sets the predicate that can be used to verify if the TResults should be recursed.</span></span></summary>
        <value><span data-ttu-id="70888-116">Das recurse-Prädikat.</span><span class="sxs-lookup"><span data-stu-id="70888-116">The recurse predicate.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Enumeration.FileSystemEnumerable`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="fileSystemEnumerable.System.Collections.IEnumerable.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="70888-117">Ruft einen Enumerator ab, der für Iterationen verwendet werden kann.</span><span class="sxs-lookup"><span data-stu-id="70888-117">Gets an enumerator that can be used to iterate.</span></span></summary>
        <returns><span data-ttu-id="70888-118">Eine Enumeratorinstanz.</span><span class="sxs-lookup"><span data-stu-id="70888-118">An enumerator instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="70888-119">Bei diesem Member handelt es sich um eine explizite Schnittstellenmemberimplementierung.</span><span class="sxs-lookup"><span data-stu-id="70888-119">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="70888-120">Er kann nur verwendet werden, wenn die <xref:System.IO.Enumeration.FileSystemEnumerable`1>-Instanz in eine <xref:System.Collections.IEnumerable>-Schnittstelle umgewandelt wird.</span><span class="sxs-lookup"><span data-stu-id="70888-120">It can be used only when the <xref:System.IO.Enumeration.FileSystemEnumerable`1> instance is cast to an <xref:System.Collections.IEnumerable> interface.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="AddInProcess" FullName="System.AddIn.Hosting.AddInProcess">
  <Metadata><Meta Name="ms.openlocfilehash" Value="67219867c669a4026c2b8e27164f19ad253825b0" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57959702" /></Metadata><TypeSignature Language="C#" Value="public sealed class AddInProcess" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AddInProcess extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.AddIn.Hosting.AddInProcess" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AddInProcess" />
  <TypeSignature Language="C++ CLI" Value="public ref class AddInProcess sealed" />
  <TypeSignature Language="F#" Value="type AddInProcess = class" />
  <AssemblyInfo>
    <AssemblyName>System.AddIn</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt einen externen Prozess zum prozessexternen Ausführen von Add-Ins über die Hostanwendung bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um ein Add-in in einem externen Prozess aktivieren möchten, übergeben Sie ein <xref:System.AddIn.Hosting.AddInProcess> Objekt an die entsprechende <xref:System.AddIn.Hosting.AddInToken.Activate%60%601%28System.AddIn.Hosting.AddInProcess%2CSystem.Security.PermissionSet%29?displayProperty=nameWithType> -methodenüberladung.  
  
 Die ausführbare Datei, die das Add-in ausgeführt wird, wird von eine von zwei Dateien, die mit .NET Framework unter dem Windows-Verzeichnis installiert abgerufen. Standardmäßig wird die ausführbaren Datei, die die Bits pro Wort der hostanwendung entspricht verwendet. Wenn der Host ein 64-Bit-Prozess ist, wird die AddInProcess.exe ausgeführt. Andernfalls wird die AddInProcess32.exe ausgeführt. Verwenden, um die Möglichkeit anzugeben, die ausführbare Datei ausgewählt ist, die <xref:System.AddIn.Hosting.AddInProcess.%23ctor%28System.AddIn.Hosting.Platform%29> Konstruktor zur Erstellung der <xref:System.AddIn.Hosting.AddInProcess> Objekt.  
  
   
  
## Examples  
 Im folgende Beispiel wird ein Add-in in einem externen Prozess aktiviert.  
  
 [!code-csharp[AddInP3Host#10](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#10)]
 [!code-vb[AddInP3Host#10](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#10)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/8dd45b02-7218-40f9-857d-40d7b98b850b">Add-Ins und Erweiterbarkeit</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.AddIn.Hosting.AddInProcess" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AddInProcess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInProcess.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AddInProcess();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.AddIn.Hosting.AddInProcess" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor hat dieselbe Wirkung wie die Verwendung der <xref:System.AddIn.Hosting.AddInProcess.%23ctor%28System.AddIn.Hosting.Platform%29> Konstruktor mit der <xref:System.AddIn.Hosting.Platform.Host?displayProperty=nameWithType> Flag, um anzugeben, dass der Prozess, der das Add-In ausgeführt wird, die gleiche Bits pro Wort wie der Hostprozess hat.  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.Demand">für volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer. Dieser Member kann von nur teilweise vertrauenswürdigem Code nicht verwendet werden.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AddInProcess (System.AddIn.Hosting.Platform platform);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.AddIn.Hosting.Platform platform) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInProcess.#ctor(System.AddIn.Hosting.Platform)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AddInProcess(System::AddIn::Hosting::Platform platform);" />
      <MemberSignature Language="F#" Value="new System.AddIn.Hosting.AddInProcess : System.AddIn.Hosting.Platform -&gt; System.AddIn.Hosting.AddInProcess" Usage="new System.AddIn.Hosting.AddInProcess platform" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="platform" Type="System.AddIn.Hosting.Platform" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="platform">Ein Wert, der die Bits pro Wort des Prozesses angibt, in dem das Add-In ausgeführt wird.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.AddIn.Hosting.AddInProcess" />-Klasse und gibt die Bits pro Wort des Prozesses an, in dem das Add-In ausgeführt wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die folgende Tabelle zeigt, wie `platform` wirkt sich auf die Bits pro Wort des Prozesses auf verschiedenen Betriebssystemen:  
  
||32-Bit-Betriebssystem|64-Bit-Betriebssystem|  
|-|------------------------------|------------------------------|  
|Host|32-Bit|Identisch mit dem Hostprozess|  
|AnyCPU|32-Bit|64-Bit|  
|X86|32-Bit|32-Bit|  
|X64|Ausnahme wird ausgelöst.|64-Bit|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Der Registrierungseintrag für den Pfad zur ausführbaren Datei (AddInProcess.exe oder AddInProcess32.exe) ist nicht vorhanden.  
  
- oder - 
Der ausführbare Datei fehlt.</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.Demand">für volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer. Dieser Member kann von nur teilweise vertrauenswürdigem Code nicht verwendet werden.</permission>
      </Docs>
    </Member>
    <Member MemberName="IsCurrentProcess">
      <MemberSignature Language="C#" Value="public bool IsCurrentProcess { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCurrentProcess" />
      <MemberSignature Language="DocId" Value="P:System.AddIn.Hosting.AddInProcess.IsCurrentProcess" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCurrentProcess As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCurrentProcess { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCurrentProcess : bool" Usage="System.AddIn.Hosting.AddInProcess.IsCurrentProcess" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob das aktuelle <see cref="T:System.AddIn.Hosting.AddInProcess" />-Objekt den Hostanwendungsprozess darstellt.</summary>
        <value><see langword="true" />, wenn das <see cref="T:System.AddIn.Hosting.AddInProcess" />-Objekt dem aktuellen Prozess entspricht; andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn der Wert dieser Eigenschaft ist `true`, das Add-in ist ausgeführten in-Process mit der hostanwendung. In diesem Fall mithilfe der <xref:System.AddIn.Hosting.AddInProcess.Start%2A> oder <xref:System.AddIn.Hosting.AddInProcess.Shutdown%2A> -Methode löst eine <xref:System.InvalidOperationException>.  
  
> [!NOTE]
>  Die <xref:System.AddIn.Hosting.AddInEnvironment.Process%2A?displayProperty=nameWithType> -Eigenschaft gibt ein <xref:System.AddIn.Hosting.AddInProcess> Objekt, das den Hostanwendungsprozess darstellt, wenn das Add-in in-Process ausgeführt wird.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Add-in in einem externen Prozess aktiviert und verwendet die <xref:System.AddIn.Hosting.AddInProcess.IsCurrentProcess%2A> Eigenschaft, um zu bestimmen, ob das Add-in im selben Prozess wie der Hostprozess für die Anwendung ist.  
  
 [!code-csharp[AddInP3Host#10](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#10)]
 [!code-vb[AddInP3Host#10](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeepAlive">
      <MemberSignature Language="C#" Value="public bool KeepAlive { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool KeepAlive" />
      <MemberSignature Language="DocId" Value="P:System.AddIn.Hosting.AddInProcess.KeepAlive" />
      <MemberSignature Language="VB.NET" Value="Public Property KeepAlive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool KeepAlive { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.KeepAlive : bool with get, set" Usage="System.AddIn.Hosting.AddInProcess.KeepAlive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob der externe Prozess beibehalten werden soll, oder legt diesen Wert fest.</summary>
        <value><see langword="true" />, wenn der externe Prozess beibehalten werden soll, andernfalls <see langword="false" />. Die Standardeinstellung ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Legen Sie diese Eigenschaft auf `false` der externe Prozess aggressiv Herunterfahren, nachdem das letzte add-in innerhalb des Prozesses heruntergefahren wurde.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Platform">
      <MemberSignature Language="C#" Value="public System.AddIn.Hosting.Platform Platform { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.AddIn.Hosting.Platform Platform" />
      <MemberSignature Language="DocId" Value="P:System.AddIn.Hosting.AddInProcess.Platform" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Platform As Platform" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::AddIn::Hosting::Platform Platform { System::AddIn::Hosting::Platform get(); };" />
      <MemberSignature Language="F#" Value="member this.Platform : System.AddIn.Hosting.Platform" Usage="System.AddIn.Hosting.AddInProcess.Platform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.AddIn.Hosting.Platform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Bits pro Wort des Prozesses ab, in dem das prozessexterne Add-In ausgeführt wird.</summary>
        <value>Die Bits pro Wort des Prozesses, in dem das Add-In ausgeführt wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Bits pro Wort wird festgelegt, wenn die <xref:System.AddIn.Hosting.AddInProcess> Objekt wird initialisiert, und kann nicht geändert werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessId">
      <MemberSignature Language="C#" Value="public int ProcessId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ProcessId" />
      <MemberSignature Language="DocId" Value="P:System.AddIn.Hosting.AddInProcess.ProcessId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ProcessId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ProcessId { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ProcessId : int" Usage="System.AddIn.Hosting.AddInProcess.ProcessId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Prozess-ID des externen Prozesses ab.</summary>
        <value>Die Prozess-ID oder -1, wenn der externe Prozess nicht gestartet wurde.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie diese Eigenschaft für das Debuggen.  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">für volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer. Dieser Member kann von nur teilweise vertrauenswürdigem Code nicht verwendet werden.</permission>
      </Docs>
    </Member>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public bool Shutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Shutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInProcess.Shutdown" />
      <MemberSignature Language="VB.NET" Value="Public Function Shutdown () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Shutdown();" />
      <MemberSignature Language="F#" Value="member this.Shutdown : unit -&gt; bool" Usage="addInProcess.Shutdown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erzwingt das Beenden des externen Prozesses.</summary>
        <returns><see langword="true" />, wenn der externe Prozess ausgeführt und erfolgreich beendet wurde. <see langword="false" />, wenn dem <see cref="T:System.AddIn.Hosting.AddInProcess" /> kein aktiver Prozess zugeordnet ist.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Das Add-In wird im Prozess mit der Hostanwendung ausgeführt. Das Starten und Beenden des Prozesses ist nur für externe Prozesse und nicht für den Hostprozess zulässig.</exception>
      </Docs>
    </Member>
    <Member MemberName="ShuttingDown">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.ComponentModel.CancelEventArgs&gt; ShuttingDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.ComponentModel.CancelEventArgs&gt; ShuttingDown" />
      <MemberSignature Language="DocId" Value="E:System.AddIn.Hosting.AddInProcess.ShuttingDown" />
      <MemberSignature Language="VB.NET" Value="Public Event ShuttingDown As EventHandler(Of CancelEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::ComponentModel::CancelEventArgs ^&gt; ^ ShuttingDown;" />
      <MemberSignature Language="F#" Value="member this.ShuttingDown : EventHandler&lt;System.ComponentModel.CancelEventArgs&gt; " Usage="member this.ShuttingDown : System.EventHandler&lt;System.ComponentModel.CancelEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.ComponentModel.CancelEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn der durch das <see cref="T:System.AddIn.Hosting.AddInProcess" />-Objekt dargestellte Prozess gerade beendet werden soll.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public bool Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInProcess.Start" />
      <MemberSignature Language="VB.NET" Value="Public Function Start () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; bool" Usage="addInProcess.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Startet den externen Prozess.</summary>
        <returns><see langword="true" />, wenn der Prozess erfolgreich gestartet wurde. <see langword="false" />, wenn der Prozess bereits ausgeführt wird.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Das Add-In wird im Prozess mit der Hostanwendung ausgeführt. Das Starten und Beenden des Prozesses ist nur für externe Prozesse und nicht für den Hostprozess zulässig.</exception>
      </Docs>
    </Member>
    <Member MemberName="StartupTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan StartupTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan StartupTimeout" />
      <MemberSignature Language="DocId" Value="P:System.AddIn.Hosting.AddInProcess.StartupTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property StartupTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan StartupTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.StartupTimeout : TimeSpan with get, set" Usage="System.AddIn.Hosting.AddInProcess.StartupTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die zulässige Anzahl von Sekunden zum Starten des Prozesses ab oder legt diese fest.</summary>
        <value>Die zulässige Anzahl von Sekunden zum Starten des Prozesses.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Standardwert beträgt 10 Sekunden. Diese Eigenschaft wird in der Regel während des Debuggens verwendet, um die Startzeit für den Prozess zu erhöhen, die die Out-of-Process-add-in ausgeführt wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Der Prozess wird bereits ausgeführt.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Der zugewiesene Wert ist kleiner als 0 (null).</exception>
      </Docs>
    </Member>
  </Members>
</Type>
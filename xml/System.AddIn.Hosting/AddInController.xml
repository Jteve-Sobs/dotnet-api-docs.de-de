<Type Name="AddInController" FullName="System.AddIn.Hosting.AddInController">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d9cffa69b4b43207c9987fe0353df7536ce24261" /><Meta Name="ms.sourcegitcommit" Value="1bb00d2f4343e73ae8d58668f02297a3cf10a4c1" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="06/15/2019" /><Meta Name="ms.locfileid" Value="63914718" /></Metadata><TypeSignature Language="C#" Value="public sealed class AddInController" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AddInController extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.AddIn.Hosting.AddInController" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AddInController" />
  <TypeSignature Language="C++ CLI" Value="public ref class AddInController sealed" />
  <TypeSignature Language="F#" Value="type AddInController = class" />
  <AssemblyInfo>
    <AssemblyName>System.AddIn</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt den Zugriff auf ein Add-In für eine Reihe von Aufgaben bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie diese Klasse, um die folgenden Aufgaben ausführen:  
  
-   Verwenden der <xref:System.AddIn.Hosting.AddInController.AddInEnvironment%2A> -Eigenschaft zum Abrufen einer <xref:System.AddIn.Hosting.AddInEnvironment> -Objekt für ein Add-in. Klicken Sie dann verwenden Sie das Objekt, um andere Add-Ins in derselben Anwendungsdomäne und Prozess wie das ursprüngliche Add-in aktivieren.  
  
-   Verwenden der <xref:System.AddIn.Hosting.AddInController.AppDomain%2A> -Eigenschaft zum Abrufen einer <xref:System.AppDomain> -Objekt für ein Add-in. Klicken Sie dann verwenden Sie das Objekt, um andere Add-Ins in derselben Anwendungsdomäne wie der ursprüngliche Add-in aktivieren. Beachten Sie, dass aufgrund von Einschränkungen bezüglich prozessübergreifende Remoting, dieses Szenario nicht mit add-ins möglich ist, die in einem separaten Prozess aktiviert werden.  
  
-   Verwenden der <xref:System.AddIn.Hosting.AddInController.Token%2A> -Eigenschaft zum Abrufen einer <xref:System.AddIn.Hosting.AddInToken> Objekt, das ein Add-In darstellt.  
  
-   Beenden Sie ein Add-in mit dem <xref:System.AddIn.Hosting.AddInController.Shutdown%2A> Methode.  
  
 Rufen Sie zum Abrufen des Controllers für ein Add-in die <xref:System.AddIn.Hosting.AddInController.GetAddInController%2A> Methode und übergeben Sie eine Instanz des Add-Ins als Parameter.  
  
   
  
## Examples  
 Das folgende Beispiel aktiviert ein Add-in in der gleichen Umgebung wie ein zuvor aktivierte Add-in mithilfe einer <xref:System.AddIn.Hosting.AddInController> Objekt.  
  
 [!code-csharp[AddInP3Host#8](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#8)]
 [!code-vb[AddInP3Host#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#8)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddInEnvironment">
      <MemberSignature Language="C#" Value="public System.AddIn.Hosting.AddInEnvironment AddInEnvironment { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.AddIn.Hosting.AddInEnvironment AddInEnvironment" />
      <MemberSignature Language="DocId" Value="P:System.AddIn.Hosting.AddInController.AddInEnvironment" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AddInEnvironment As AddInEnvironment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::AddIn::Hosting::AddInEnvironment ^ AddInEnvironment { System::AddIn::Hosting::AddInEnvironment ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AddInEnvironment : System.AddIn.Hosting.AddInEnvironment" Usage="System.AddIn.Hosting.AddInController.AddInEnvironment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AddIn.Hosting.AddInEnvironment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein <see cref="T:System.AddIn.Hosting.AddInEnvironment" />-Objekt ab.</summary>
        <value>Ein Objekt, mit dem andere Add-Ins in derselben Umgebung wie das ursprüngliche Add-In aktiviert werden können.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie diese Eigenschaft zum Abrufen der <xref:System.AddIn.Hosting.AddInEnvironment> -Objekt für ein Add-in. Klicken Sie dann verwenden Sie das Objekt, um andere Add-Ins in derselben Anwendungsdomäne und Prozess wie das ursprüngliche Add-in aktivieren.  
  
   
  
## Examples  
 Im folgende Beispiel wird eine zweite-add-in in der gleichen Umgebung wie das erste add-in aktiviert.  
  
 [!code-csharp[AddInP3Host#8](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#8)]
 [!code-vb[AddInP3Host#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppDomain">
      <MemberSignature Language="C#" Value="public AppDomain AppDomain { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.AppDomain AppDomain" />
      <MemberSignature Language="DocId" Value="P:System.AddIn.Hosting.AddInController.AppDomain" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AppDomain As AppDomain" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property AppDomain ^ AppDomain { AppDomain ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AppDomain : AppDomain" Usage="System.AddIn.Hosting.AddInController.AppDomain" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AppDomain</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Anwendungsdomäne ab, die ein Add-In enthält.</summary>
        <value>Die Anwendungsdomäne des Add-Ins.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit dieser Eigenschaft können Sie ein Add-in abrufen <xref:System.AppDomain> Objekt und anderen Add-Ins in der gleichen Anwendungsdomäne zu aktivieren.  
  
   
  
## Examples  
 Im folgende Beispiel wird eine zweite-add-in in der gleichen Anwendungsdomäne als das erste add-in aktiviert.  
  
 [!code-csharp[AddInP3Host#9](~/samples/snippets/csharp/VS_Snippets_CLR/addinP3Host/cs/P3Host.cs#9)]
 [!code-vb[AddInP3Host#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/addinP3Host/vb/p3host.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAddInController">
      <MemberSignature Language="C#" Value="public static System.AddIn.Hosting.AddInController GetAddInController (object addIn);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.AddIn.Hosting.AddInController GetAddInController(object addIn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInController.GetAddInController(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAddInController (addIn As Object) As AddInController" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::AddIn::Hosting::AddInController ^ GetAddInController(System::Object ^ addIn);" />
      <MemberSignature Language="F#" Value="static member GetAddInController : obj -&gt; System.AddIn.Hosting.AddInController" Usage="System.AddIn.Hosting.AddInController.GetAddInController addIn" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AddIn.Hosting.AddInController</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addIn" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="addIn">Die Hostansicht des Add-Ins.</param>
        <summary>Ruft den Controller für ein Add-In ab.</summary>
        <returns>Der Controller für das Add-In.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.AddIn.Hosting.AddInToken.Activate%2A> Methoden ein Objekt zurückgeben, der die Hostansicht des Add-Ins darstellt.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public void Shutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Shutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInController.Shutdown" />
      <MemberSignature Language="VB.NET" Value="Public Sub Shutdown ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Shutdown();" />
      <MemberSignature Language="F#" Value="member this.Shutdown : unit -&gt; unit" Usage="addInController.Shutdown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Deaktiviert ein Add-In.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird die Kommunikationspipeline zwischen einem Add-in und dessen Host unterbrochen. Wenn mithilfe des Add-Ins in eine automatisch generierte Anwendungsdomäne aktiviert wurde die <xref:System.AddIn.Hosting.AddInToken.Activate%60%601%28System.AddIn.Hosting.AddInSecurityLevel%29> oder <xref:System.AddIn.Hosting.AddInToken.Activate%60%601%28System.Security.PermissionSet%29> Methoden, die <xref:System.AddIn.Hosting.AddInController.Shutdown%2A> Methode wird auch die Anwendungsdomäne entladen.  
  
 Wenn das Add-in, in seiner eigenen Anwendungsdomäne geladen wurde, die <xref:System.AddIn.Hosting.AddInController.Shutdown%2A> Methode wird auch die Anwendungsdomäne entladen.  
  
 Wenn das Add-in in einer vorhandenen Anwendungsdomäne geladen wurde, müssen die Hosts und -Pipeline-Segmente alle Verweise auf das Add-in nicht mehr. In diesem Fall wird das Add-in zu durch die Garbagecollection wieder zugänglich gemacht werden infrage.  
  
 Sie können auch diese Klasse verwenden, um ein Add-in zu schließen, die in einem externen Prozess aktiviert wird.  
  
   
  
## Examples  
 Im folgende Beispiel erhält die <xref:System.AddIn.Hosting.AddInController> Objekt für eine Hostansicht, die mit dem Namen `manager` und fährt das Add-in.  
  
 [!code-csharp[AddInCollectionPipelineHost#6](~/samples/snippets/csharp/VS_Snippets_CLR/AddInCollectionPipelineHost/cs/Program.cs#6)]
 [!code-vb[AddInCollectionPipelineHost#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/AddInCollectionPipelineHost/vb/Program.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Token">
      <MemberSignature Language="C#" Value="public System.AddIn.Hosting.AddInToken Token { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.AddIn.Hosting.AddInToken Token" />
      <MemberSignature Language="DocId" Value="P:System.AddIn.Hosting.AddInController.Token" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Token As AddInToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::AddIn::Hosting::AddInToken ^ Token { System::AddIn::Hosting::AddInToken ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Token : System.AddIn.Hosting.AddInToken" Usage="System.AddIn.Hosting.AddInController.Token" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AddIn.Hosting.AddInToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Token ab, das das Add-In darstellt.</summary>
        <value>Ein Objekt, das das Add-In darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der Regel verwenden Sie diese Eigenschaft zum Abrufen eines Tokens, um ein Add-in zu einem späteren Zeitpunkt zu aktivieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
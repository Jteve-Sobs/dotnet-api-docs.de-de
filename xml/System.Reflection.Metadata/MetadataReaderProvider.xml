<Type Name="MetadataReaderProvider" FullName="System.Reflection.Metadata.MetadataReaderProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cc3603162440a9ad9eed3123b5e8a7b5ec683ec0" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78818346" /></Metadata><TypeSignature Language="C#" Value="public sealed class MetadataReaderProvider : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MetadataReaderProvider extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Metadata.MetadataReaderProvider" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MetadataReaderProvider&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MetadataReaderProvider sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type MetadataReaderProvider = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Metadata</AssemblyName>
    <AssemblyVersion>1.3.0.0</AssemblyVersion>
    <AssemblyVersion>1.4.1.0</AssemblyVersion>
    <AssemblyVersion>1.4.2.0</AssemblyVersion>
    <AssemblyVersion>1.4.3.0</AssemblyVersion>
    <AssemblyVersion>1.4.4.0</AssemblyVersion>
    <AssemblyVersion>1.4.5.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="8445c-101">Stellt einen <see cref="T:System.Reflection.Metadata.MetadataReader" /> für Metadaten bereit, die in einem Bytearray, einem Speicherblock oder einem Stream gespeichert sind.</span><span class="sxs-lookup"><span data-stu-id="8445c-101">Provides a <see cref="T:System.Reflection.Metadata.MetadataReader" /> for metadata stored in an array of bytes, a memory block, or a stream.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8445c-102">`MetadataReaderProvider` unterstützt die folgenden Formate:</span><span class="sxs-lookup"><span data-stu-id="8445c-102">`MetadataReaderProvider` supports the following formats:</span></span>

 - <span data-ttu-id="8445c-103">ECMA-335 CLI (Common Language Infrastructure) Metadata (<xref:System.Reflection.Metadata.MetadataReaderProvider.FromMetadataImage(System.Byte*,System.Int32)>).</span><span class="sxs-lookup"><span data-stu-id="8445c-103">ECMA-335 CLI (Common Language Infrastructure) metadata (<xref:System.Reflection.Metadata.MetadataReaderProvider.FromMetadataImage(System.Byte*,System.Int32)>).</span></span>
 - <span data-ttu-id="8445c-104">Bearbeiten und Fortfahren metadatendelta (<xref:System.Reflection.Metadata.MetadataReaderProvider.FromMetadataImage(System.Byte*,System.Int32)>).</span><span class="sxs-lookup"><span data-stu-id="8445c-104">Edit and Continue metadata delta (<xref:System.Reflection.Metadata.MetadataReaderProvider.FromMetadataImage(System.Byte*,System.Int32)>).</span></span>
 - <span data-ttu-id="8445c-105">Portable PDB-Metadaten (<xref:System.Reflection.Metadata.MetadataReaderProvider.FromPortablePdbImage(System.Byte*,System.Int32)>).</span><span class="sxs-lookup"><span data-stu-id="8445c-105">Portable PDB metadata (<xref:System.Reflection.Metadata.MetadataReaderProvider.FromPortablePdbImage(System.Byte*,System.Int32)>).</span></span>

          ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.MetadataReaderProvider.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="metadataReaderProvider.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8445c-106">Verwirft den gesamten vom Leser zugewiesenen Speicher.</span><span class="sxs-lookup"><span data-stu-id="8445c-106">Disposes all memory allocated by the reader.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8445c-107"><xref:System.Reflection.Metadata.MetadataReaderProvider.Dispose> kann mehrmals aufgerufen werden (aber nicht parallel).</span><span class="sxs-lookup"><span data-stu-id="8445c-107"><xref:System.Reflection.Metadata.MetadataReaderProvider.Dispose> can be called multiple times (but not in parallel).</span></span>

<span data-ttu-id="8445c-108">Es ist nicht sicher, <xref:System.Reflection.Metadata.MetadataReaderProvider.Dispose> parallel mit einem anderen Vorgang auf dem <xref:System.Reflection.Metadata.MetadataReaderProvider> oder beim Lesen aus dem zugrunde liegenden Speicher aufzurufen.</span><span class="sxs-lookup"><span data-stu-id="8445c-108">It is not safe to call <xref:System.Reflection.Metadata.MetadataReaderProvider.Dispose> in parallel with any other operation on the <xref:System.Reflection.Metadata.MetadataReaderProvider> or when reading from the underlying memory.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromMetadataImage">
      <MemberSignature Language="C#" Value="public static System.Reflection.Metadata.MetadataReaderProvider FromMetadataImage (System.Collections.Immutable.ImmutableArray&lt;byte&gt; image);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Metadata.MetadataReaderProvider FromMetadataImage(valuetype System.Collections.Immutable.ImmutableArray`1&lt;unsigned int8&gt; image) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.MetadataReaderProvider.FromMetadataImage(System.Collections.Immutable.ImmutableArray{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromMetadataImage (image As ImmutableArray(Of Byte)) As MetadataReaderProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Metadata::MetadataReaderProvider ^ FromMetadataImage(System::Collections::Immutable::ImmutableArray&lt;System::Byte&gt; image);" />
      <MemberSignature Language="F#" Value="static member FromMetadataImage : System.Collections.Immutable.ImmutableArray&lt;byte&gt; -&gt; System.Reflection.Metadata.MetadataReaderProvider" Usage="System.Reflection.Metadata.MetadataReaderProvider.FromMetadataImage image" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.MetadataReaderProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Collections.Immutable.ImmutableArray&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="image"><span data-ttu-id="8445c-109">Metadatenimage.</span><span class="sxs-lookup"><span data-stu-id="8445c-109">Metadata image.</span></span></param>
        <summary><span data-ttu-id="8445c-110">Erstellt einen Anbieter über einen Bytearray.</span><span class="sxs-lookup"><span data-stu-id="8445c-110">Creates a provider over a byte array.</span></span></summary>
        <returns><span data-ttu-id="8445c-111">Der neue Anbieter.</span><span class="sxs-lookup"><span data-stu-id="8445c-111">The new provider.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8445c-112">Der Inhalt des Bilds wird während der Erstellung des <xref:System.Reflection.Metadata.MetadataReaderProvider>nicht gelesen.</span><span class="sxs-lookup"><span data-stu-id="8445c-112">The content of the image is not read during the construction of the <xref:System.Reflection.Metadata.MetadataReaderProvider>.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8445c-113"><paramref name="image" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="8445c-113"><paramref name="image" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FromMetadataImage">
      <MemberSignature Language="C#" Value="public static System.Reflection.Metadata.MetadataReaderProvider FromMetadataImage (byte* start, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Metadata.MetadataReaderProvider FromMetadataImage(unsigned int8* start, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.MetadataReaderProvider.FromMetadataImage(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Metadata::MetadataReaderProvider ^ FromMetadataImage(System::Byte* start, int size);" />
      <MemberSignature Language="F#" Value="static member FromMetadataImage : nativeptr&lt;byte&gt; * int -&gt; System.Reflection.Metadata.MetadataReaderProvider" Usage="System.Reflection.Metadata.MetadataReaderProvider.FromMetadataImage (start, size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.MetadataReaderProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Byte*" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start"><span data-ttu-id="8445c-114">Zeiger auf den Anfang des Metadatenblobs.</span><span class="sxs-lookup"><span data-stu-id="8445c-114">Pointer to the start of the metadata blob.</span></span></param>
        <param name="size"><span data-ttu-id="8445c-115">Die Größe des Metadatenblobs.</span><span class="sxs-lookup"><span data-stu-id="8445c-115">The size of the metadata blob.</span></span></param>
        <summary><span data-ttu-id="8445c-116">Erstellt einen Metadatenanbieter über ein im Arbeitsspeicher gespeichertes Image.</span><span class="sxs-lookup"><span data-stu-id="8445c-116">Creates a metadata provider over an image stored in memory.</span></span></summary>
        <returns><span data-ttu-id="8445c-117">Der neue Metadatenanbieter.</span><span class="sxs-lookup"><span data-stu-id="8445c-117">The new metadata provider.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8445c-118">Der Arbeitsspeicher befindet sich im Besitz des Aufrufers und wird bei der <xref:System.Reflection.Metadata.MetadataReaderProvider>nicht freigegeben.</span><span class="sxs-lookup"><span data-stu-id="8445c-118">The memory is owned by the caller and is not released on disposal of the <xref:System.Reflection.Metadata.MetadataReaderProvider>.</span></span>

<span data-ttu-id="8445c-119">Der Aufrufer ist dafür verantwortlich, den Arbeitsspeicher während der gesamten Lebensdauer des <xref:System.Reflection.Metadata.MetadataReaderProvider>in Betrieb zu nehmen.</span><span class="sxs-lookup"><span data-stu-id="8445c-119">The caller is responsible for keeping the memory alive and unmodified throughout the lifetime of the <xref:System.Reflection.Metadata.MetadataReaderProvider>.</span></span>

<span data-ttu-id="8445c-120">Der Inhalt des BLOBs wird während der Erstellung des <xref:System.Reflection.Metadata.MetadataReaderProvider>nicht gelesen.</span><span class="sxs-lookup"><span data-stu-id="8445c-120">The content of the blob is not read during the construction of the <xref:System.Reflection.Metadata.MetadataReaderProvider>.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8445c-121"><paramref name="start" /> ist <see cref="F:System.IntPtr.Zero" />.</span><span class="sxs-lookup"><span data-stu-id="8445c-121"><paramref name="start" /> is <see cref="F:System.IntPtr.Zero" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8445c-122"><paramref name="size" /> ist ein negativer Wert.</span><span class="sxs-lookup"><span data-stu-id="8445c-122"><paramref name="size" /> is negative.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FromMetadataStream">
      <MemberSignature Language="C#" Value="public static System.Reflection.Metadata.MetadataReaderProvider FromMetadataStream (System.IO.Stream stream, System.Reflection.Metadata.MetadataStreamOptions options = System.Reflection.Metadata.MetadataStreamOptions.Default, int size = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Metadata.MetadataReaderProvider FromMetadataStream(class System.IO.Stream stream, valuetype System.Reflection.Metadata.MetadataStreamOptions options, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.MetadataReaderProvider.FromMetadataStream(System.IO.Stream,System.Reflection.Metadata.MetadataStreamOptions,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromMetadataStream (stream As Stream, Optional options As MetadataStreamOptions = System.Reflection.Metadata.MetadataStreamOptions.Default, Optional size As Integer = 0) As MetadataReaderProvider" />
      <MemberSignature Language="F#" Value="static member FromMetadataStream : System.IO.Stream * System.Reflection.Metadata.MetadataStreamOptions * int -&gt; System.Reflection.Metadata.MetadataReaderProvider" Usage="System.Reflection.Metadata.MetadataReaderProvider.FromMetadataStream (stream, options, size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.MetadataReaderProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Reflection.Metadata.MetadataStreamOptions" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="8445c-123">Eine <see cref="T:System.IO.Stream" />-Instanz.</span><span class="sxs-lookup"><span data-stu-id="8445c-123">A <see cref="T:System.IO.Stream" /> instance.</span></span></param>
        <param name="options"><span data-ttu-id="8445c-124">Optionen, die angeben, wie Abschnitte des Images aus dem Stream gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="8445c-124">Options specifying how sections of the image are read from the stream.</span></span></param>
        <param name="size"><span data-ttu-id="8445c-125">Größe des Metadatenblobs im Stream.</span><span class="sxs-lookup"><span data-stu-id="8445c-125">Size of the metadata blob in the stream.</span></span> <span data-ttu-id="8445c-126">Ist dieser Wert nicht angegeben, wird angenommen, dass sich der Metadatenblob bis zum Ende des Streams erstreckt.</span><span class="sxs-lookup"><span data-stu-id="8445c-126">If not specified, the metadata blob is assumed to span to the end of the stream.</span></span></param>
        <summary><span data-ttu-id="8445c-127">Erstellt einen Anbieter für einen Stream der angegebenen Größe, beginnend an der aktuellen Position.</span><span class="sxs-lookup"><span data-stu-id="8445c-127">Creates a provider for a stream of the specified size beginning at its current position.</span></span></summary>
        <returns><span data-ttu-id="8445c-128">Der neue Anbieter.</span><span class="sxs-lookup"><span data-stu-id="8445c-128">The new provider.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="8445c-129">Sofern <xref:System.Reflection.Metadata.MetadataStreamOptions.LeaveOpen?displayProperty=nameWithType> nicht angegeben ist, wird der Besitz des Streams bei erfolgreicher Argument Überprüfung an die <xref:System.Reflection.Metadata.MetadataReaderProvider> übertragen.</span><span class="sxs-lookup"><span data-stu-id="8445c-129">Unless <xref:System.Reflection.Metadata.MetadataStreamOptions.LeaveOpen?displayProperty=nameWithType> is specified, ownership of the stream is transferred to the <xref:System.Reflection.Metadata.MetadataReaderProvider> upon successful argument validation.</span></span> <span data-ttu-id="8445c-130">Sie wird vom <xref:System.Reflection.Metadata.MetadataReaderProvider>verworfen, und der Aufrufer darf Sie nicht bearbeiten.</span><span class="sxs-lookup"><span data-stu-id="8445c-130">It will be disposed by the <xref:System.Reflection.Metadata.MetadataReaderProvider>, and the caller must not manipulate it.</span></span>
            
<span data-ttu-id="8445c-131">Wenn <xref:System.Reflection.Metadata.MetadataStreamOptions.PrefetchMetadata?displayProperty=nameWithType> nicht angegeben wird, werden während der Erstellung des <xref:System.Reflection.Metadata.MetadataReaderProvider>keine Daten aus dem Stream gelesen.</span><span class="sxs-lookup"><span data-stu-id="8445c-131">Unless <xref:System.Reflection.Metadata.MetadataStreamOptions.PrefetchMetadata?displayProperty=nameWithType> is specified, no data is read from the stream during construction of the <xref:System.Reflection.Metadata.MetadataReaderProvider>.</span></span> <span data-ttu-id="8445c-132">Darüber hinaus darf der Stream nicht vom Aufrufer manipuliert werden, während der <xref:System.Reflection.Metadata.MetadataReaderProvider> aktiv ist und nicht verworfen wird.</span><span class="sxs-lookup"><span data-stu-id="8445c-132">Furthermore, the stream must not be manipulated by caller while the <xref:System.Reflection.Metadata.MetadataReaderProvider> is alive and undisposed.</span></span>
            
<span data-ttu-id="8445c-133">Wenn <xref:System.Reflection.Metadata.MetadataStreamOptions.PrefetchMetadata?displayProperty=nameWithType>, hat der <xref:System.Reflection.Metadata.MetadataReaderProvider> alle während der Erstellung angeforderten Daten gelesen.</span><span class="sxs-lookup"><span data-stu-id="8445c-133">If <xref:System.Reflection.Metadata.MetadataStreamOptions.PrefetchMetadata?displayProperty=nameWithType>, the <xref:System.Reflection.Metadata.MetadataReaderProvider> will have read all of the data requested during construction.</span></span> <span data-ttu-id="8445c-134">Wenn <xref:System.Reflection.Metadata.MetadataStreamOptions.LeaveOpen?displayProperty=nameWithType> ebenfalls angegeben wird, behält der Aufrufer den vollständigen Besitz des Streams bei und ist sicher, dass er nach der Erstellung nicht von der <xref:System.Reflection.Metadata.MetadataReaderProvider> manipuliert wird.</span><span class="sxs-lookup"><span data-stu-id="8445c-134">As such, if <xref:System.Reflection.Metadata.MetadataStreamOptions.LeaveOpen?displayProperty=nameWithType> is also specified, the caller retains full ownership of the stream and is assured that it will not be manipulated by the <xref:System.Reflection.Metadata.MetadataReaderProvider> after construction.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8445c-135"><paramref name="stream" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="8445c-135"><paramref name="stream" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8445c-136"><paramref name="stream" /> unterstützt keine Lese- und Suchvorgänge.</span><span class="sxs-lookup"><span data-stu-id="8445c-136"><paramref name="stream" /> doesn't support read and seek operations.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8445c-137">Größe ist negativ oder erstreckt sich über das Ende des Streams hinaus.</span><span class="sxs-lookup"><span data-stu-id="8445c-137">Size is negative or extends past the end of the stream.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8445c-138">Fehler beim Lesen aus dem Stream (nur wenn <see cref="F:System.Reflection.Metadata.MetadataStreamOptions.PrefetchMetadata" /> angegeben ist).</span><span class="sxs-lookup"><span data-stu-id="8445c-138">Error reading from the stream (only when <see cref="F:System.Reflection.Metadata.MetadataStreamOptions.PrefetchMetadata" /> is specified).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FromPortablePdbImage">
      <MemberSignature Language="C#" Value="public static System.Reflection.Metadata.MetadataReaderProvider FromPortablePdbImage (System.Collections.Immutable.ImmutableArray&lt;byte&gt; image);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Metadata.MetadataReaderProvider FromPortablePdbImage(valuetype System.Collections.Immutable.ImmutableArray`1&lt;unsigned int8&gt; image) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.MetadataReaderProvider.FromPortablePdbImage(System.Collections.Immutable.ImmutableArray{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromPortablePdbImage (image As ImmutableArray(Of Byte)) As MetadataReaderProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Metadata::MetadataReaderProvider ^ FromPortablePdbImage(System::Collections::Immutable::ImmutableArray&lt;System::Byte&gt; image);" />
      <MemberSignature Language="F#" Value="static member FromPortablePdbImage : System.Collections.Immutable.ImmutableArray&lt;byte&gt; -&gt; System.Reflection.Metadata.MetadataReaderProvider" Usage="System.Reflection.Metadata.MetadataReaderProvider.FromPortablePdbImage image" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.MetadataReaderProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Collections.Immutable.ImmutableArray&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="image"><span data-ttu-id="8445c-139">Ein portables PDB-Image.</span><span class="sxs-lookup"><span data-stu-id="8445c-139">A portable PDB image.</span></span></param>
        <summary><span data-ttu-id="8445c-140">Erstellt einen portablen PDB-Metadatenanbieter über einen Bytearray.</span><span class="sxs-lookup"><span data-stu-id="8445c-140">Creates a portable PDB metadata provider over a byte array.</span></span></summary>
        <returns><span data-ttu-id="8445c-141">Der neue portable PDB-Metadatenanbieter.</span><span class="sxs-lookup"><span data-stu-id="8445c-141">The new portable PDB metadata provider .</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8445c-142">Der Inhalt des Bilds wird während der Erstellung des <xref:System.Reflection.Metadata.MetadataReaderProvider>nicht gelesen.</span><span class="sxs-lookup"><span data-stu-id="8445c-142">The content of the image is not read during the construction of the <xref:System.Reflection.Metadata.MetadataReaderProvider>.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8445c-143"><paramref name="image" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="8445c-143"><paramref name="image" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FromPortablePdbImage">
      <MemberSignature Language="C#" Value="public static System.Reflection.Metadata.MetadataReaderProvider FromPortablePdbImage (byte* start, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Metadata.MetadataReaderProvider FromPortablePdbImage(unsigned int8* start, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.MetadataReaderProvider.FromPortablePdbImage(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Metadata::MetadataReaderProvider ^ FromPortablePdbImage(System::Byte* start, int size);" />
      <MemberSignature Language="F#" Value="static member FromPortablePdbImage : nativeptr&lt;byte&gt; * int -&gt; System.Reflection.Metadata.MetadataReaderProvider" Usage="System.Reflection.Metadata.MetadataReaderProvider.FromPortablePdbImage (start, size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.MetadataReaderProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Byte*" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start"><span data-ttu-id="8445c-144">Zeiger auf den Anfang des portablen PDB-Blobs.</span><span class="sxs-lookup"><span data-stu-id="8445c-144">Pointer to the start of the portable PDB blob.</span></span></param>
        <param name="size"><span data-ttu-id="8445c-145">Die Größe des portablen PDB-Blobs.</span><span class="sxs-lookup"><span data-stu-id="8445c-145">The size of the portable PDB blob.</span></span></param>
        <summary><span data-ttu-id="8445c-146">Erstellt einen portablen PDB-Metadatenanbieter über einen im Arbeitsspeicher gespeicherten Blob.</span><span class="sxs-lookup"><span data-stu-id="8445c-146">Creates a portable PDB metadata provider over a blob stored in memory.</span></span></summary>
        <returns><span data-ttu-id="8445c-147">Der neue portable PDB-Metadatenanbieter.</span><span class="sxs-lookup"><span data-stu-id="8445c-147">The new portable PDB metadata provider.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8445c-148">Der Arbeitsspeicher befindet sich im Besitz des Aufrufers und wird bei der <xref:System.Reflection.Metadata.MetadataReaderProvider>nicht freigegeben.</span><span class="sxs-lookup"><span data-stu-id="8445c-148">The memory is owned by the caller and not released on disposal of the <xref:System.Reflection.Metadata.MetadataReaderProvider>.</span></span>

<span data-ttu-id="8445c-149">Der Aufrufer ist dafür verantwortlich, den Arbeitsspeicher während der gesamten Lebensdauer des <xref:System.Reflection.Metadata.MetadataReaderProvider>in Betrieb zu nehmen.</span><span class="sxs-lookup"><span data-stu-id="8445c-149">The caller is responsible for keeping the memory alive and unmodified throughout the lifetime of the <xref:System.Reflection.Metadata.MetadataReaderProvider>.</span></span>

<span data-ttu-id="8445c-150">Der Inhalt des BLOBs wird während der Erstellung des <xref:System.Reflection.Metadata.MetadataReaderProvider>nicht gelesen.</span><span class="sxs-lookup"><span data-stu-id="8445c-150">The content of the blob is not read during the construction of the <xref:System.Reflection.Metadata.MetadataReaderProvider>.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8445c-151"><paramref name="start" /> ist <see cref="F:System.IntPtr.Zero" />.</span><span class="sxs-lookup"><span data-stu-id="8445c-151"><paramref name="start" /> is <see cref="F:System.IntPtr.Zero" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8445c-152"><paramref name="size" /> ist ein negativer Wert.</span><span class="sxs-lookup"><span data-stu-id="8445c-152"><paramref name="size" /> is negative.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FromPortablePdbStream">
      <MemberSignature Language="C#" Value="public static System.Reflection.Metadata.MetadataReaderProvider FromPortablePdbStream (System.IO.Stream stream, System.Reflection.Metadata.MetadataStreamOptions options = System.Reflection.Metadata.MetadataStreamOptions.Default, int size = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Metadata.MetadataReaderProvider FromPortablePdbStream(class System.IO.Stream stream, valuetype System.Reflection.Metadata.MetadataStreamOptions options, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.MetadataReaderProvider.FromPortablePdbStream(System.IO.Stream,System.Reflection.Metadata.MetadataStreamOptions,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromPortablePdbStream (stream As Stream, Optional options As MetadataStreamOptions = System.Reflection.Metadata.MetadataStreamOptions.Default, Optional size As Integer = 0) As MetadataReaderProvider" />
      <MemberSignature Language="F#" Value="static member FromPortablePdbStream : System.IO.Stream * System.Reflection.Metadata.MetadataStreamOptions * int -&gt; System.Reflection.Metadata.MetadataReaderProvider" Usage="System.Reflection.Metadata.MetadataReaderProvider.FromPortablePdbStream (stream, options, size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.MetadataReaderProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Reflection.Metadata.MetadataStreamOptions" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="8445c-153">Der Stream (Datenstrom).</span><span class="sxs-lookup"><span data-stu-id="8445c-153">The stream.</span></span></param>
        <param name="options"><span data-ttu-id="8445c-154">Optionen, die angeben, wie Abschnitte des Images aus dem Stream gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="8445c-154">Options specifying how sections of the image are read from the stream.</span></span></param>
        <param name="size"><span data-ttu-id="8445c-155">Größe des Metadatenblobs im Stream.</span><span class="sxs-lookup"><span data-stu-id="8445c-155">Size of the metadata blob in the stream.</span></span> <span data-ttu-id="8445c-156">Ist dieser Wert nicht angegeben, wird angenommen, dass sich der Metadatenblob bis zum Ende des Streams erstreckt.</span><span class="sxs-lookup"><span data-stu-id="8445c-156">If not specified, the metadata blob is assumed to span to the end of the stream.</span></span></param>
        <summary><span data-ttu-id="8445c-157">Erstellt einen Anbieter für einen Stream der angegebenen Größe, beginnend an der aktuellen Position.</span><span class="sxs-lookup"><span data-stu-id="8445c-157">Creates a provider for a stream of the specified size beginning at its current position.</span></span></summary>
        <returns><span data-ttu-id="8445c-158">Eine <see cref="T:System.Reflection.Metadata.MetadataReaderProvider" />-Instanz.</span><span class="sxs-lookup"><span data-stu-id="8445c-158">A <see cref="T:System.Reflection.Metadata.MetadataReaderProvider" /> instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
            
<span data-ttu-id="8445c-159">Sofern <xref:System.Reflection.Metadata.MetadataStreamOptions.LeaveOpen?displayProperty=nameWithType> nicht angegeben ist, wird der Besitz des Streams bei erfolgreicher Argument Überprüfung an die <xref:System.Reflection.Metadata.MetadataReaderProvider> übertragen.</span><span class="sxs-lookup"><span data-stu-id="8445c-159">Unless <xref:System.Reflection.Metadata.MetadataStreamOptions.LeaveOpen?displayProperty=nameWithType> is specified, ownership of the stream is transferred to the <xref:System.Reflection.Metadata.MetadataReaderProvider> upon successful argument validation.</span></span> <span data-ttu-id="8445c-160">Sie wird vom <xref:System.Reflection.Metadata.MetadataReaderProvider>verworfen, und der Aufrufer darf Sie nicht bearbeiten.</span><span class="sxs-lookup"><span data-stu-id="8445c-160">It will be disposed by the <xref:System.Reflection.Metadata.MetadataReaderProvider>, and the caller must not manipulate it.</span></span>
            
<span data-ttu-id="8445c-161">Wenn <xref:System.Reflection.Metadata.MetadataStreamOptions.PrefetchMetadata?displayProperty=nameWithType> nicht angegeben wird, werden während der Erstellung des <xref:System.Reflection.Metadata.MetadataReaderProvider>keine Daten aus dem Stream gelesen.</span><span class="sxs-lookup"><span data-stu-id="8445c-161">Unless <xref:System.Reflection.Metadata.MetadataStreamOptions.PrefetchMetadata?displayProperty=nameWithType> is specified, no data is read from the stream during the construction of the <xref:System.Reflection.Metadata.MetadataReaderProvider>.</span></span> <span data-ttu-id="8445c-162">Darüber hinaus darf der Stream nicht vom Aufrufer manipuliert werden, während der <xref:System.Reflection.Metadata.MetadataReaderProvider> aktiv ist und nicht verworfen wird.</span><span class="sxs-lookup"><span data-stu-id="8445c-162">Furthermore, the stream must not be manipulated by caller while the <xref:System.Reflection.Metadata.MetadataReaderProvider> is alive and undisposed.</span></span>
            
<span data-ttu-id="8445c-163">Wenn <xref:System.Reflection.Metadata.MetadataStreamOptions.PrefetchMetadata?displayProperty=nameWithType>, hat der <xref:System.Reflection.Metadata.MetadataReaderProvider> alle während der Erstellung angeforderten Daten gelesen.</span><span class="sxs-lookup"><span data-stu-id="8445c-163">If <xref:System.Reflection.Metadata.MetadataStreamOptions.PrefetchMetadata?displayProperty=nameWithType>, the <xref:System.Reflection.Metadata.MetadataReaderProvider> will have read all of the data requested during construction.</span></span> <span data-ttu-id="8445c-164">Wenn <xref:System.Reflection.Metadata.MetadataStreamOptions.LeaveOpen?displayProperty=nameWithType> ebenfalls angegeben wird, behält der Aufrufer den vollständigen Besitz des Streams bei und ist sicher, dass er nach der Erstellung nicht von der <xref:System.Reflection.Metadata.MetadataReaderProvider> manipuliert wird.</span><span class="sxs-lookup"><span data-stu-id="8445c-164">As such, if <xref:System.Reflection.Metadata.MetadataStreamOptions.LeaveOpen?displayProperty=nameWithType> is also specified, the caller retains full ownership of the stream and is assured that it will not be manipulated by the <xref:System.Reflection.Metadata.MetadataReaderProvider> after construction.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8445c-165"><paramref name="stream" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="8445c-165"><paramref name="stream" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8445c-166"><paramref name="stream" /> unterstützt keine Lese- und Suchvorgänge.</span><span class="sxs-lookup"><span data-stu-id="8445c-166"><paramref name="stream" /> doesn't support read and seek operations.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8445c-167">Größe ist negativ oder erstreckt sich über das Ende des Streams hinaus.</span><span class="sxs-lookup"><span data-stu-id="8445c-167">Size is negative or extends past the end of the stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetMetadataReader">
      <MemberSignature Language="C#" Value="public System.Reflection.Metadata.MetadataReader GetMetadataReader (System.Reflection.Metadata.MetadataReaderOptions options = System.Reflection.Metadata.MetadataReaderOptions.ApplyWindowsRuntimeProjections, System.Reflection.Metadata.MetadataStringDecoder utf8Decoder = default);" FrameworkAlternate="netcore-1.0;netcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Metadata.MetadataReader GetMetadataReader(valuetype System.Reflection.Metadata.MetadataReaderOptions options, class System.Reflection.Metadata.MetadataStringDecoder utf8Decoder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.MetadataReaderProvider.GetMetadataReader(System.Reflection.Metadata.MetadataReaderOptions,System.Reflection.Metadata.MetadataStringDecoder)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMetadataReader (Optional options As MetadataReaderOptions = System.Reflection.Metadata.MetadataReaderOptions.ApplyWindowsRuntimeProjections, Optional utf8Decoder As MetadataStringDecoder = null) As MetadataReader" FrameworkAlternate="netcore-1.0;netcore-1.1" />
      <MemberSignature Language="F#" Value="member this.GetMetadataReader : System.Reflection.Metadata.MetadataReaderOptions * System.Reflection.Metadata.MetadataStringDecoder -&gt; System.Reflection.Metadata.MetadataReader" Usage="metadataReaderProvider.GetMetadataReader (options, utf8Decoder)" />
      <MemberSignature Language="C#" Value="public System.Reflection.Metadata.MetadataReader GetMetadataReader (System.Reflection.Metadata.MetadataReaderOptions options = System.Reflection.Metadata.MetadataReaderOptions.Default, System.Reflection.Metadata.MetadataStringDecoder utf8Decoder = default);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMetadataReader (Optional options As MetadataReaderOptions = System.Reflection.Metadata.MetadataReaderOptions.Default, Optional utf8Decoder As MetadataStringDecoder = null) As MetadataReader" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.MetadataReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.Reflection.Metadata.MetadataReaderOptions" />
        <Parameter Name="utf8Decoder" Type="System.Reflection.Metadata.MetadataStringDecoder" />
      </Parameters>
      <Docs>
        <param name="options"><span data-ttu-id="8445c-168">Eine bitweise Kombination von Enumerationswerten, die die Konfiguration beim Lesen der Metadaten darstellen.</span><span class="sxs-lookup"><span data-stu-id="8445c-168">A bitwise combination of the enumeration values that represent the configuration when reading the metadata.</span></span></param>
        <param name="utf8Decoder"><span data-ttu-id="8445c-169">Die zu verwendende Codierung.</span><span class="sxs-lookup"><span data-stu-id="8445c-169">The encoding to use.</span></span></param>
        <summary><span data-ttu-id="8445c-170">Ruft ein <see cref="T:System.Reflection.Metadata.MetadataReader" /> aus einem <see cref="T:System.Reflection.Metadata.MetadataReaderProvider" /> ab.</span><span class="sxs-lookup"><span data-stu-id="8445c-170">Gets a <see cref="T:System.Reflection.Metadata.MetadataReader" /> from a <see cref="T:System.Reflection.Metadata.MetadataReaderProvider" />.</span></span></summary>
        <returns><span data-ttu-id="8445c-171">Eine <see cref="T:System.Reflection.Metadata.MetadataReader" />-Instanz.</span><span class="sxs-lookup"><span data-stu-id="8445c-171">A <see cref="T:System.Reflection.Metadata.MetadataReader" /> instance..</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8445c-172">Der Aufrufer muss die <xref:System.Reflection.Metadata.MetadataReaderProvider> während der gesamten Lebensdauer des metadatenreaders verbleibt.</span><span class="sxs-lookup"><span data-stu-id="8445c-172">The caller must keep the <xref:System.Reflection.Metadata.MetadataReaderProvider> undisposed throughout the lifetime of the metadata reader.</span></span>

<span data-ttu-id="8445c-173">Wenn diese Methode mehrmals aufgerufen wird, gibt jeder Aufruf mit Argumenten, die mit den Argumenten übereinstimmen, die an den vorherigen erfolgreichen Aufruf übermittelt wurden, dieselbe Instanz von <xref:System.Reflection.Metadata.MetadataReader> wie der vorherige Aufruf zurück.</span><span class="sxs-lookup"><span data-stu-id="8445c-173">If this method is called multiple times, each call with arguments equal to the arguments passed to the previous successful call returns the same instance of <xref:System.Reflection.Metadata.MetadataReader> as the previous call.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8445c-174">Die Codierung von <paramref name="utf8Decoder" /> ist keine <see cref="T:System.Text.UTF8Encoding" />.</span><span class="sxs-lookup"><span data-stu-id="8445c-174">The encoding of <paramref name="utf8Decoder" /> is not <see cref="T:System.Text.UTF8Encoding" />.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="8445c-175">Die aktuelle Plattform ist Big-Endian.</span><span class="sxs-lookup"><span data-stu-id="8445c-175">The current platform is big-endian.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="8445c-176">E/A-Fehler beim Lesen aus den zugrunde liegenden Stream.</span><span class="sxs-lookup"><span data-stu-id="8445c-176">IO error while reading from the underlying stream.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8445c-177">Anbieter wurde verworfen.</span><span class="sxs-lookup"><span data-stu-id="8445c-177">Provider has been disposed.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="SchemaImporterExtension" FullName="System.Xml.Serialization.Advanced.SchemaImporterExtension">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ac3cda0d902cb029b9826b3ecd50fe0bc73d747c" />
    <Meta Name="ms.sourcegitcommit" Value="4b4804968da1dfdf71c501075a5b66957b54f2e8" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/27/2018" />
    <Meta Name="ms.locfileid" Value="32037305" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class SchemaImporterExtension" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SchemaImporterExtension extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Serialization.Advanced.SchemaImporterExtension" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class SchemaImporterExtension" />
  <TypeSignature Language="C++ CLI" Value="public ref class SchemaImporterExtension abstract" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Ermöglicht die Anpassung des von einem WSDL (Web Services Description Language)-Dokument generierten Codes bei der Verwendung automatisierter Abfragetools.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Import von Schemas tritt auf, wenn Sie ein Webdienstproxy mithilfe eines Tools wie z. B. das Dialogfeld "Webverweis hinzufügen" erzeugt wird im Feld gefunden in Visual Studio oder mit der [Web Services Description Language Tool (Wsdl.exe)](http://msdn.microsoft.com/library/b9210348-8bc2-4367-8c91-d1a04b403e88). Import von Schemas tritt auch bei Verwendung der [XML-Schemadefinitionstools (Xsd.exe)](~/docs/standard/serialization/xml-schema-definition-tool-xsd-exe.md) zum Generieren von Code aus einem bestimmten XSD-Dokument.  
  
 Die <xref:System.Xml.Serialization.Advanced.SchemaImporterExtension> -Klasse ermöglicht es Ihnen, die bei Verwendung dieser Tools generierten Code zu ändern. Angenommen, Sie möglicherweise eine vorhandene Klasse, dass Prozesse Buch auf einem System Aufträge, und Sie haben ein vorhandenes XSD-Dokument, das Ihre Aufträge bereitstellt. Mithilfe der <xref:System.Xml.Serialization.Advanced.SchemaImporterExtension> -Klasse, Sie können zu den Tools zum Generieren von Code, die Ihre Klasse verwendet.  
  
 Um die Generierung des Codes zu steuern, müssen Sie die Klassen im Verwenden der <xref:System.CodeDom> Namespace. Weitere Informationen finden Sie unter [mit CodeDOM](~/docs/framework/reflection-and-codedom/using-the-codedom.md) und [Kurzreferenz zum CodeDOM](https://msdn.microsoft.com/library/c77b8bfd-0a32-4e36-b59a-4f687f32c524(v=vs.100).aspx).  
  
 Die Schritte zum Tool WSDL.exe (die wiederum von anderen Tools wie z. B. das Dialogfeld "Webverweis hinzufügen" verwendet wird), verwenden Sie die Erweiterung aktiviert werden:  
  
1.  Erstellen Sie eine Implementierung von der <xref:System.Xml.Serialization.Advanced.SchemaImporterExtension> Klasse.  
  
2.  Verwenden der <xref:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportSchemaType%2A> Methode zum Schreiben von Code für den Code-Generator. Die Methode enthält Parameter, mit denen Sie untersuchen die abgefangenen XSD-Typ, und Erstellen von CodeDOM-Objekte, die verwendet werden, um die neue CLR-Code zu generieren.  
  
3.  Verwenden Sie falls erforderlich die <xref:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportAnyElement%2A> Methode zum Behandeln \<Xsd: alle > Elemente in der XSD-Dokument gefunden.  
  
4.  Verwenden Sie falls erforderlich die <xref:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportDefaultValue%2A> Methode, um Standardwerte untersuchen im XSD-Dokument gefunden, und geben Sie einen anderen Standardwert zurück.  
  
5.  Kompilieren Sie Ihre Erweiterung in einer Bibliothek.  
  
6.  Signieren der Assembly an.  
  
7.  Die Assembly im globalen Assemblycache (GAC) installieren.  
  
8.  Ändern Sie die Datei "Machine.config", um die Erweiterung einzuschließen.  
  
   
  
## Examples  
 Finden Sie unter der [SchemaImporterExtension Technologiebeispiel](~/docs/standard/serialization/schemaimporterextension-technology-sample.md). Beachten Sie, dass in diesem Beispiel keine signierte Assembly enthält. Stattdessen veranschaulicht die Verwendung der <xref:System.Xml.Serialization.Advanced.SchemaImporterExtension> mit ein Befehlsfenster.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SchemaImporterExtension ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.Advanced.SchemaImporterExtension.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SchemaImporterExtension();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtension" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportAnyElement">
      <MemberSignature Language="C#" Value="public virtual string ImportAnyElement (System.Xml.Schema.XmlSchemaAny any, bool mixed, System.Xml.Serialization.XmlSchemas schemas, System.Xml.Serialization.XmlSchemaImporter importer, System.CodeDom.CodeCompileUnit compileUnit, System.CodeDom.CodeNamespace mainNamespace, System.Xml.Serialization.CodeGenerationOptions options, System.CodeDom.Compiler.CodeDomProvider codeProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImportAnyElement(class System.Xml.Schema.XmlSchemaAny any, bool mixed, class System.Xml.Serialization.XmlSchemas schemas, class System.Xml.Serialization.XmlSchemaImporter importer, class System.CodeDom.CodeCompileUnit compileUnit, class System.CodeDom.CodeNamespace mainNamespace, valuetype System.Xml.Serialization.CodeGenerationOptions options, class System.CodeDom.Compiler.CodeDomProvider codeProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportAnyElement(System.Xml.Schema.XmlSchemaAny,System.Boolean,System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.XmlSchemaImporter,System.CodeDom.CodeCompileUnit,System.CodeDom.CodeNamespace,System.Xml.Serialization.CodeGenerationOptions,System.CodeDom.Compiler.CodeDomProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ImportAnyElement (any As XmlSchemaAny, mixed As Boolean, schemas As XmlSchemas, importer As XmlSchemaImporter, compileUnit As CodeCompileUnit, mainNamespace As CodeNamespace, options As CodeGenerationOptions, codeProvider As CodeDomProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ImportAnyElement(System::Xml::Schema::XmlSchemaAny ^ any, bool mixed, System::Xml::Serialization::XmlSchemas ^ schemas, System::Xml::Serialization::XmlSchemaImporter ^ importer, System::CodeDom::CodeCompileUnit ^ compileUnit, System::CodeDom::CodeNamespace ^ mainNamespace, System::Xml::Serialization::CodeGenerationOptions options, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="any" Type="System.Xml.Schema.XmlSchemaAny" />
        <Parameter Name="mixed" Type="System.Boolean" />
        <Parameter Name="schemas" Type="System.Xml.Serialization.XmlSchemas" />
        <Parameter Name="importer" Type="System.Xml.Serialization.XmlSchemaImporter" />
        <Parameter Name="compileUnit" Type="System.CodeDom.CodeCompileUnit" />
        <Parameter Name="mainNamespace" Type="System.CodeDom.CodeNamespace" />
        <Parameter Name="options" Type="System.Xml.Serialization.CodeGenerationOptions" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
      </Parameters>
      <Docs>
        <param name="any">Ein <see cref="T:System.Xml.Schema.XmlSchemaAny" />, das das im XSD (XML Schema Document) vorhandene <see langword="xsd:any" />-Element darstellt.</param>
        <param name="mixed">Ein <see cref="T:System.Boolean" />, der angibt, ob das XSD-<see langword="complex" />-Attribut auf "mixed" festgelegt wurde. <see langword="true" />, wenn das Attribut auf mixed festgelegt wurde, andernfalls <see langword="false" />.</param>
        <param name="schemas">Ein <see cref="T:System.Xml.Serialization.XmlSchemas" />, das die Auflistung der im XSD vorhandenen Schemas enthält.</param>
        <param name="importer">Der verwendete <see cref="T:System.Xml.Serialization.XmlSchemaImporter" />.</param>
        <param name="compileUnit">Eine <see cref="T:System.CodeDom.CodeCompileUnit" />, der Sie CodeDOM-Strukturen zum Generieren von alternativem Code für das XSD hinzufügen können.</param>
        <param name="mainNamespace">Ein <see cref="T:System.CodeDom.CodeNamespace" />, der den aktuellen Namespace für das Element darstellt.</param>
        <param name="options">Ein <see cref="T:System.Xml.Serialization.CodeGenerationOptions" /> zum Festlegen von Optionen für den Codecompiler.</param>
        <param name="codeProvider">Ein <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />, der den zum Generieren des neuen Codes verwendeten CodeDOM-Anbieter darstellt.</param>
        <summary>Verarbeitet den Import der &lt;xsd: any&gt;-Elemente im Schema.</summary>
        <returns>Der Name des CLR-Typs, dem das Element zugeordnet wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um die Generierung des Codes zu steuern, müssen Sie die Klassen im Verwenden der <xref:System.CodeDom> Namespace. Weitere Informationen finden Sie unter [mit CodeDOM](~/docs/framework/reflection-and-codedom/using-the-codedom.md) und [Kurzreferenz zum CodeDOM](https://msdn.microsoft.com/library/c77b8bfd-0a32-4e36-b59a-4f687f32c524(v=vs.100).aspx).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportDefaultValue">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.CodeExpression ImportDefaultValue (string value, string type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.CodeExpression ImportDefaultValue(string value, string type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportDefaultValue(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ImportDefaultValue (value As String, type As String) As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::CodeExpression ^ ImportDefaultValue(System::String ^ value, System::String ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="type" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Der im ursprünglichen XSD vorhandene Wert.</param>
        <param name="type">Der Name des XSD-Typs.</param>
        <summary>Ermöglicht das Angeben des Standardwerts für den importierten XSD-Typ.</summary>
        <returns>Eine <see cref="T:System.CodeDom.CodeExpression" />, mit der der neue Standardwert festgelegt wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um die Generierung des Codes zu steuern, müssen Sie die Klassen im Verwenden der <xref:System.CodeDom> Namespace. Weitere Informationen finden Sie unter [mit CodeDOM](~/docs/framework/reflection-and-codedom/using-the-codedom.md) und [Kurzreferenz zum CodeDOM](https://msdn.microsoft.com/library/c77b8bfd-0a32-4e36-b59a-4f687f32c524(v=vs.100).aspx).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ImportSchemaType">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ermöglicht das Ändern des Codes, der durch Untersuchen des importierten Schemas und Angeben des diesem zuzuordnenden CLR-Typs generiert wurde.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Beispiel zeigt eine einfache Implementierung der <xref:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportSchemaType%28System.String%2CSystem.String%2CSystem.Xml.Schema.XmlSchemaObject%2CSystem.Xml.Serialization.XmlSchemas%2CSystem.Xml.Serialization.XmlSchemaImporter%2CSystem.CodeDom.CodeCompileUnit%2CSystem.CodeDom.CodeNamespace%2CSystem.Xml.Serialization.CodeGenerationOptions%2CSystem.CodeDom.Compiler.CodeDomProvider%29> Methode. Der Code überprüft den Namespace und den Namen an. Wenn die richtigen Werte gefunden werden, hinzugefügt den Namen einer benutzerdefinierten Assembly ("Order.dll"), auf die verwiesen werden muss im generierten Code. Es fügt dann einen neuen Namespace ("Microsoft.Samples" beginnt), der im Code generiert wird.  
  
 [!code-csharp[SchemaImporterExtensionExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SchemaImporterExtensionExample/CS/SchemaImporterExtensionExample.cs#1)]
 [!code-vb[SchemaImporterExtensionExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SchemaImporterExtensionExample/VB/SchemaImporterExtensionExample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ImportSchemaType">
      <MemberSignature Language="C#" Value="public virtual string ImportSchemaType (System.Xml.Schema.XmlSchemaType type, System.Xml.Schema.XmlSchemaObject context, System.Xml.Serialization.XmlSchemas schemas, System.Xml.Serialization.XmlSchemaImporter importer, System.CodeDom.CodeCompileUnit compileUnit, System.CodeDom.CodeNamespace mainNamespace, System.Xml.Serialization.CodeGenerationOptions options, System.CodeDom.Compiler.CodeDomProvider codeProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImportSchemaType(class System.Xml.Schema.XmlSchemaType type, class System.Xml.Schema.XmlSchemaObject context, class System.Xml.Serialization.XmlSchemas schemas, class System.Xml.Serialization.XmlSchemaImporter importer, class System.CodeDom.CodeCompileUnit compileUnit, class System.CodeDom.CodeNamespace mainNamespace, valuetype System.Xml.Serialization.CodeGenerationOptions options, class System.CodeDom.Compiler.CodeDomProvider codeProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportSchemaType(System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaObject,System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.XmlSchemaImporter,System.CodeDom.CodeCompileUnit,System.CodeDom.CodeNamespace,System.Xml.Serialization.CodeGenerationOptions,System.CodeDom.Compiler.CodeDomProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ImportSchemaType (type As XmlSchemaType, context As XmlSchemaObject, schemas As XmlSchemas, importer As XmlSchemaImporter, compileUnit As CodeCompileUnit, mainNamespace As CodeNamespace, options As CodeGenerationOptions, codeProvider As CodeDomProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ImportSchemaType(System::Xml::Schema::XmlSchemaType ^ type, System::Xml::Schema::XmlSchemaObject ^ context, System::Xml::Serialization::XmlSchemas ^ schemas, System::Xml::Serialization::XmlSchemaImporter ^ importer, System::CodeDom::CodeCompileUnit ^ compileUnit, System::CodeDom::CodeNamespace ^ mainNamespace, System::Xml::Serialization::CodeGenerationOptions options, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Xml.Schema.XmlSchemaType" />
        <Parameter Name="context" Type="System.Xml.Schema.XmlSchemaObject" />
        <Parameter Name="schemas" Type="System.Xml.Serialization.XmlSchemas" />
        <Parameter Name="importer" Type="System.Xml.Serialization.XmlSchemaImporter" />
        <Parameter Name="compileUnit" Type="System.CodeDom.CodeCompileUnit" />
        <Parameter Name="mainNamespace" Type="System.CodeDom.CodeNamespace" />
        <Parameter Name="options" Type="System.Xml.Serialization.CodeGenerationOptions" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
      </Parameters>
      <Docs>
        <param name="type">Ein <see cref="T:System.Xml.Schema.XmlSchemaType" />, der den XSD-Typ darstellt.</param>
        <param name="context">Ein <see cref="T:System.Xml.Schema.XmlSchemaObject" />, das Schemainformationen darstellt, z. B. die Zeilennummer des XML-Elements.</param>
        <param name="schemas">Ein <see cref="T:System.Xml.Serialization.XmlSchemas" />, das die Auflistung der Schemas im Dokument enthält.</param>
        <param name="importer">Der verwendete <see cref="T:System.Xml.Serialization.XmlSchemaImporter" />.</param>
        <param name="compileUnit">Eine <see cref="T:System.CodeDom.CodeCompileUnit" />, der Sie CodeDOM-Strukturen zum Generieren von alternativem Code für das XSD hinzufügen können.</param>
        <param name="mainNamespace">Ein <see cref="T:System.CodeDom.CodeNamespace" />, der den aktuellen Namespace für das Element darstellt.</param>
        <param name="options">Ein <see cref="T:System.Xml.Serialization.CodeGenerationOptions" /> zum Festlegen von Optionen für den Codecompiler.</param>
        <param name="codeProvider">Ein <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />, der zum Generieren des neuen Codes verwendet wird.</param>
        <summary>Ermöglicht das Ändern des Codes, der durch Untersuchen des importierten Schemas und Angeben des diesem zuzuordnenden CLR-Typs generiert wurde.</summary>
        <returns>Der Name des CLR-Typs, dem dieser zugeordnet wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Beispiel zeigt eine einfache Implementierung der <xref:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportSchemaType%28System.String%2CSystem.String%2CSystem.Xml.Schema.XmlSchemaObject%2CSystem.Xml.Serialization.XmlSchemas%2CSystem.Xml.Serialization.XmlSchemaImporter%2CSystem.CodeDom.CodeCompileUnit%2CSystem.CodeDom.CodeNamespace%2CSystem.Xml.Serialization.CodeGenerationOptions%2CSystem.CodeDom.Compiler.CodeDomProvider%29> Methode. Der Code überprüft den Namespace und den Namen an. Wenn die richtigen Werte gefunden werden, hinzugefügt den Namen einer benutzerdefinierten Assembly ("Order.dll"), auf die verwiesen werden muss im generierten Code. Es fügt dann einen neuen Namespace ("Microsoft.Samples" beginnt), der im Code generiert wird.  
  
 [!code-csharp[SchemaImporterExtensionExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SchemaImporterExtensionExample/CS/SchemaImporterExtensionExample.cs#1)]
 [!code-vb[SchemaImporterExtensionExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SchemaImporterExtensionExample/VB/SchemaImporterExtensionExample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportSchemaType">
      <MemberSignature Language="C#" Value="public virtual string ImportSchemaType (string name, string ns, System.Xml.Schema.XmlSchemaObject context, System.Xml.Serialization.XmlSchemas schemas, System.Xml.Serialization.XmlSchemaImporter importer, System.CodeDom.CodeCompileUnit compileUnit, System.CodeDom.CodeNamespace mainNamespace, System.Xml.Serialization.CodeGenerationOptions options, System.CodeDom.Compiler.CodeDomProvider codeProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImportSchemaType(string name, string ns, class System.Xml.Schema.XmlSchemaObject context, class System.Xml.Serialization.XmlSchemas schemas, class System.Xml.Serialization.XmlSchemaImporter importer, class System.CodeDom.CodeCompileUnit compileUnit, class System.CodeDom.CodeNamespace mainNamespace, valuetype System.Xml.Serialization.CodeGenerationOptions options, class System.CodeDom.Compiler.CodeDomProvider codeProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportSchemaType(System.String,System.String,System.Xml.Schema.XmlSchemaObject,System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.XmlSchemaImporter,System.CodeDom.CodeCompileUnit,System.CodeDom.CodeNamespace,System.Xml.Serialization.CodeGenerationOptions,System.CodeDom.Compiler.CodeDomProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ImportSchemaType (name As String, ns As String, context As XmlSchemaObject, schemas As XmlSchemas, importer As XmlSchemaImporter, compileUnit As CodeCompileUnit, mainNamespace As CodeNamespace, options As CodeGenerationOptions, codeProvider As CodeDomProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ImportSchemaType(System::String ^ name, System::String ^ ns, System::Xml::Schema::XmlSchemaObject ^ context, System::Xml::Serialization::XmlSchemas ^ schemas, System::Xml::Serialization::XmlSchemaImporter ^ importer, System::CodeDom::CodeCompileUnit ^ compileUnit, System::CodeDom::CodeNamespace ^ mainNamespace, System::Xml::Serialization::CodeGenerationOptions options, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
        <Parameter Name="context" Type="System.Xml.Schema.XmlSchemaObject" />
        <Parameter Name="schemas" Type="System.Xml.Serialization.XmlSchemas" />
        <Parameter Name="importer" Type="System.Xml.Serialization.XmlSchemaImporter" />
        <Parameter Name="compileUnit" Type="System.CodeDom.CodeCompileUnit" />
        <Parameter Name="mainNamespace" Type="System.CodeDom.CodeNamespace" />
        <Parameter Name="options" Type="System.Xml.Serialization.CodeGenerationOptions" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
      </Parameters>
      <Docs>
        <param name="name">Der Name des Elements.</param>
        <param name="ns">Der Namespace des Elements.</param>
        <param name="context">Ein <see cref="T:System.Xml.Schema.XmlSchemaObject" />, das Schemainformationen darstellt, z. B. die Zeilennummer des XML-Elements.</param>
        <param name="schemas">Ein <see cref="T:System.Xml.Serialization.XmlSchemas" />, das die Auflistung der Schemas im Dokument enthält.</param>
        <param name="importer">Der verwendete <see cref="T:System.Xml.Serialization.XmlSchemaImporter" />.</param>
        <param name="compileUnit">Eine <see cref="T:System.CodeDom.CodeCompileUnit" />, der Sie CodeDOM-Strukturen zum Generieren von alternativem Code für das XSD hinzufügen können.</param>
        <param name="mainNamespace">Ein <see cref="T:System.CodeDom.CodeNamespace" />, der den aktuellen Namespace für das Element darstellt.</param>
        <param name="options">Ein <see cref="T:System.Xml.Serialization.CodeGenerationOptions" /> zum Festlegen von Optionen für den Codecompiler.</param>
        <param name="codeProvider">Ein <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />, der zum Generieren des neuen Codes verwendet wird.</param>
        <summary>Ermöglicht das Ändern des Codes, der durch Untersuchen des importierten Schemas und Angeben des diesem zuzuordnenden CLR-Typs generiert wurde.</summary>
        <returns>Der Name des CLR-Typs, dem dieser zugeordnet wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um die Generierung des Codes zu steuern, müssen Sie die Klassen im Verwenden der <xref:System.CodeDom> Namespace. Weitere Informationen finden Sie unter [mit CodeDOM](~/docs/framework/reflection-and-codedom/using-the-codedom.md) und [Kurzreferenz zum CodeDOM](https://msdn.microsoft.com/library/c77b8bfd-0a32-4e36-b59a-4f687f32c524(v=vs.100).aspx).  
  
   
  
## Examples  
 Das folgende Beispiel zeigt eine einfache Implementierung der <xref:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportSchemaType%28System.String%2CSystem.String%2CSystem.Xml.Schema.XmlSchemaObject%2CSystem.Xml.Serialization.XmlSchemas%2CSystem.Xml.Serialization.XmlSchemaImporter%2CSystem.CodeDom.CodeCompileUnit%2CSystem.CodeDom.CodeNamespace%2CSystem.Xml.Serialization.CodeGenerationOptions%2CSystem.CodeDom.Compiler.CodeDomProvider%29> Methode. Der Code überprüft den Namespace und den Namen an. Wenn die richtigen Werte gefunden werden, hinzugefügt den Namen einer benutzerdefinierten Assembly ("Order.dll"), auf die verwiesen werden muss im generierten Code. Es fügt dann einen neuen Namespace ("Microsoft.Samples" beginnt), der im Code generiert wird.  
  
 [!code-csharp[SchemaImporterExtensionExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SchemaImporterExtensionExample/CS/SchemaImporterExtensionExample.cs#1)]
 [!code-vb[SchemaImporterExtensionExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SchemaImporterExtensionExample/VB/SchemaImporterExtensionExample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
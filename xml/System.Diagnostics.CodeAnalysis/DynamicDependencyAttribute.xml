<Type Name="DynamicDependencyAttribute" FullName="System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ea615615241f8d31525b17807282219d0521e20f" /><Meta Name="ms.sourcegitcommit" Value="6fca7f55940a389853cc2d183619073ce0d69092" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/26/2020" /><Meta Name="ms.locfileid" Value="88868367" /></Metadata><TypeSignature Language="C#" Value="public sealed class DynamicDependencyAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DynamicDependencyAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DynamicDependencyAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicDependencyAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type DynamicDependencyAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.AttributeUsage(System.AttributeTargets.Constructor | System.AttributeTargets.Field | System.AttributeTargets.Method, AllowMultiple=true, Inherited=false)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.AttributeUsage(System.AttributeTargets.Constructor | System.AttributeTargets.Field | System.AttributeTargets.Method, AllowMultiple=true, Inherited=false)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="34c58-101">Gibt eine Abhängigkeit eines Members von einem anderen an.</span><span class="sxs-lookup"><span data-stu-id="34c58-101">States a dependency that one member has on another.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="34c58-102">Dieses Attribut kann verwendet werden, um Tools über eine Abhängigkeit zu informieren, die andernfalls ausschließlich aus Metadaten und Il ersichtlich ist, z. b. ein Member, der über Reflektion verwendet wurde.</span><span class="sxs-lookup"><span data-stu-id="34c58-102">This attribute can be used to inform tooling of a dependency that is otherwise not evident purely from metadata and IL, for example, a member relied on via reflection.</span></span>

          ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicDependencyAttribute (string memberSignature);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string memberSignature) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (memberSignature As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicDependencyAttribute(System::String ^ memberSignature);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute : string -&gt; System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute" Usage="new System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute memberSignature" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="memberSignature" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="memberSignature"><span data-ttu-id="34c58-103">Die Signatur des Members, zu dem eine Abhängigkeit besteht.</span><span class="sxs-lookup"><span data-stu-id="34c58-103">The signature of the member depended on.</span></span></param>
        <summary><span data-ttu-id="34c58-104">Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute" />-Klasse mit der angegebenen Signatur eines Members für den gleichen Typ wie der Consumer.</span><span class="sxs-lookup"><span data-stu-id="34c58-104">Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute" /> class with the specified signature of a member on the same type as the consumer.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicDependencyAttribute (System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes memberTypes, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes memberTypes, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (memberTypes As DynamicallyAccessedMemberTypes, type As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicDependencyAttribute(System::Diagnostics::CodeAnalysis::DynamicallyAccessedMemberTypes memberTypes, Type ^ type);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute : System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes * Type -&gt; System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute" Usage="new System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute (memberTypes, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="memberTypes" Type="System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="memberTypes"><span data-ttu-id="34c58-105">Die Typen der Member, zu denen eine Abhängigkeit besteht.</span><span class="sxs-lookup"><span data-stu-id="34c58-105">The types of members depended on.</span></span></param>
        <param name="type"><span data-ttu-id="34c58-106">Der Typ, der die angegebenen Member enthält.</span><span class="sxs-lookup"><span data-stu-id="34c58-106">The type that contains the specified members.</span></span></param>
        <summary><span data-ttu-id="34c58-107">Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute" />-Klasse mit den angegebenen Typen der Member in einer <see cref="T:System.Type" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="34c58-107">Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute" /> class with the specified types of members on a <see cref="T:System.Type" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicDependencyAttribute (string memberSignature, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string memberSignature, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (memberSignature As String, type As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicDependencyAttribute(System::String ^ memberSignature, Type ^ type);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute : string * Type -&gt; System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute" Usage="new System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute (memberSignature, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="memberSignature" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="memberSignature"><span data-ttu-id="34c58-108">Die Signatur des Members, zu dem eine Abhängigkeit besteht.</span><span class="sxs-lookup"><span data-stu-id="34c58-108">The signature of the member depended on.</span></span></param>
        <param name="type"><span data-ttu-id="34c58-109">Der Typ, der <paramref name="memberSignature" /> enthält.</span><span class="sxs-lookup"><span data-stu-id="34c58-109">The type that contains <paramref name="memberSignature" />.</span></span></param>
        <summary><span data-ttu-id="34c58-110">Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute" />-Klasse mit den angegebenen Signatur der Member in einer <see cref="T:System.Type" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="34c58-110">Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute" /> class with the specified signature of a member on a <see cref="T:System.Type" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicDependencyAttribute (System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes memberTypes, string typeName, string assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes memberTypes, string typeName, string assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (memberTypes As DynamicallyAccessedMemberTypes, typeName As String, assemblyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicDependencyAttribute(System::Diagnostics::CodeAnalysis::DynamicallyAccessedMemberTypes memberTypes, System::String ^ typeName, System::String ^ assemblyName);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute : System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes * string * string -&gt; System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute" Usage="new System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute (memberTypes, typeName, assemblyName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="memberTypes" Type="System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="assemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="memberTypes"><span data-ttu-id="34c58-111">Die Typen der Member, zu denen eine Abhängigkeit besteht.</span><span class="sxs-lookup"><span data-stu-id="34c58-111">The types of members depended on.</span></span></param>
        <param name="typeName"><span data-ttu-id="34c58-112">Der vollständige Name des Typs, der die angegebenen Member enthält.</span><span class="sxs-lookup"><span data-stu-id="34c58-112">The full name of the type containing the specified members.</span></span></param>
        <param name="assemblyName"><span data-ttu-id="34c58-113">Der Assemblyname des Typs, der die angegebenen Member enthält.</span><span class="sxs-lookup"><span data-stu-id="34c58-113">The assembly name of the type containing the specified members.</span></span></param>
        <summary><span data-ttu-id="34c58-114">Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute" />-Klasse mit den angegebenen Typen der Member in einem Typen in einer Assembly.</span><span class="sxs-lookup"><span data-stu-id="34c58-114">Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute" /> class with the specified types of members on a type in an assembly.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicDependencyAttribute (string memberSignature, string typeName, string assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string memberSignature, string typeName, string assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (memberSignature As String, typeName As String, assemblyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicDependencyAttribute(System::String ^ memberSignature, System::String ^ typeName, System::String ^ assemblyName);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute : string * string * string -&gt; System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute" Usage="new System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute (memberSignature, typeName, assemblyName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="memberSignature" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="assemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="memberSignature"><span data-ttu-id="34c58-115">Die Signatur des Members, zu dem eine Abhängigkeit besteht.</span><span class="sxs-lookup"><span data-stu-id="34c58-115">The signature of the member depended on.</span></span></param>
        <param name="typeName"><span data-ttu-id="34c58-116">Der vollständige Name des Typs, der den angegebenen Member enthält.</span><span class="sxs-lookup"><span data-stu-id="34c58-116">The full name of the type containing the specified member.</span></span></param>
        <param name="assemblyName"><span data-ttu-id="34c58-117">Der Assemblyname des Typs, der den angegebenen Member enthält.</span><span class="sxs-lookup"><span data-stu-id="34c58-117">The assembly name of the type containing the specified member.</span></span></param>
        <summary><span data-ttu-id="34c58-118">Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute" />-Klasse mit den angegebenen Signatur der Member in einem Typen in einer Assembly.</span><span class="sxs-lookup"><span data-stu-id="34c58-118">Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute" /> class with the specified signature of a member on a type in an assembly.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssemblyName">
      <MemberSignature Language="C#" Value="public string AssemblyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AssemblyName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.AssemblyName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AssemblyName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AssemblyName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AssemblyName : string" Usage="System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.AssemblyName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="34c58-119">Ruft den Assemblynamen des angegebenen Typs ab.</span><span class="sxs-lookup"><span data-stu-id="34c58-119">Gets the assembly name of the specified type.</span></span></summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="34c58-120"><xref:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.AssemblyName> ist nur gültig, wenn <xref:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName> angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="34c58-120"><xref:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.AssemblyName> is only valid when <xref:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName> is specified.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Condition">
      <MemberSignature Language="C#" Value="public string Condition { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Condition" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Condition" />
      <MemberSignature Language="VB.NET" Value="Public Property Condition As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Condition { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Condition : string with get, set" Usage="System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Condition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="34c58-121">Ruft die Bedingung ab, unter der die Abhängigkeit anwendbar ist, z. B. "DEBUG", oder legt sie fest.</span><span class="sxs-lookup"><span data-stu-id="34c58-121">Gets or sets the condition in which the dependency is applicable, for example, "DEBUG".</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MemberSignature">
      <MemberSignature Language="C#" Value="public string MemberSignature { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MemberSignature" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MemberSignature As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MemberSignature { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MemberSignature : string" Usage="System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="34c58-122">Ruft die Signatur des Members ab, zu dem eine Abhängigkeit besteht.</span><span class="sxs-lookup"><span data-stu-id="34c58-122">Gets the signature of the member depended on.</span></span></summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="34c58-123"><xref:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature>Muss entweder eine gültige Zeichenfolge sein oder <xref:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes> darf nicht gleich sein <xref:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None> , aber nicht beides.</span><span class="sxs-lookup"><span data-stu-id="34c58-123">Either <xref:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature> must be a valid string or <xref:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes> must not equal <xref:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None>, but not both.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MemberTypes">
      <MemberSignature Language="C#" Value="public System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes MemberTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes MemberTypes" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MemberTypes As DynamicallyAccessedMemberTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::CodeAnalysis::DynamicallyAccessedMemberTypes MemberTypes { System::Diagnostics::CodeAnalysis::DynamicallyAccessedMemberTypes get(); };" />
      <MemberSignature Language="F#" Value="member this.MemberTypes : System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes" Usage="System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="34c58-124">Ruft die Typen der Member ab, zu denen eine Abhängigkeit besteht, z. B. Felder und Eigenschaften.</span><span class="sxs-lookup"><span data-stu-id="34c58-124">Gets the types of the members that are depended on, for example, fields and properties.</span></span></summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="34c58-125"><xref:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature>Muss entweder eine gültige Zeichenfolge sein oder <xref:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes> darf nicht gleich sein <xref:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None> , aber nicht beides.</span><span class="sxs-lookup"><span data-stu-id="34c58-125">Either <xref:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature> must be a valid string or <xref:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes> must not equal <xref:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None>, but not both.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public Type Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Type" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Type As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ Type { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Type : Type" Usage="System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="34c58-126">Ruft die <see cref="T:System.Type" />-Klasse ab, die den angegebene Member enthält.</span><span class="sxs-lookup"><span data-stu-id="34c58-126">Gets the <see cref="T:System.Type" /> containing the specified member.</span></span></summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="34c58-127">Wenn <xref:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type> und <xref:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName> nicht angegeben sind, wird der Typ des Consumers angenommen.</span><span class="sxs-lookup"><span data-stu-id="34c58-127">If <xref:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type> and <xref:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName> aren't specified, the type of the consumer is assumed.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public string TypeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TypeName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TypeName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeName : string" Usage="System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="34c58-128">Ruft den vollständigen Name des Typs ab, der den angegebenen Member enthält.</span><span class="sxs-lookup"><span data-stu-id="34c58-128">Gets the full name of the type containing the specified member.</span></span></summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="34c58-129">Wenn <xref:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type> und <xref:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName> nicht angegeben sind, wird der Typ des Consumers angenommen.</span><span class="sxs-lookup"><span data-stu-id="34c58-129">If <xref:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type> and <xref:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName> aren't specified, the type of the consumer is assumed.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

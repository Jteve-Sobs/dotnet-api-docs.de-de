<Type Name="IPlaybackControl" FullName="System.EnterpriseServices.IPlaybackControl">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6815ba4b5f1a28e19f3e20cacd2ad88dd4f8118f" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48600216" /></Metadata><TypeSignature Language="C#" Value="public interface IPlaybackControl" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPlaybackControl" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.IPlaybackControl" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPlaybackControl" />
  <TypeSignature Language="C++ CLI" Value="public interface class IPlaybackControl" />
  <TypeSignature Language="F#" Value="type IPlaybackControl = interface" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.Guid("51372AFD-CAE7-11CF-BE81-00AA00A2FA25")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.InterfaceType</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Kann in Queued Components bei der nicht ordnungsgemäßen Behandlung von serverseitigen Wiedergabefehlern und bei clientseitigen Fehlern des Übermittlungsmechanismus von Message Queuing verwendet werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Exception-Klasse, die für die Komponente im COM+-Katalog implementiert definiert <xref:System.EnterpriseServices.IPlaybackControl> und die Schnittstelle für die ursprüngliche Klasse. Die methodenimplementierungen der ursprünglichen Klassenschnittstelle werden verwendet, um die Ausnahmebehandlung für die fehlerhaften Methoden in der Klasse selbst auszuführen. Sie werden aufgerufen, nachdem <xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A> oder <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A> zum Verarbeiten von Ausnahmen für die Methode, die ursprünglich aufgerufen.  
  
 Der Queued Components Player ruft die Methoden von <xref:System.EnterpriseServices.IPlaybackControl> um das Ausnahmehandlerobjekt darüber zu informieren, die eine Nachricht für den endgültigen Verbleib bzw. Dead-Letter-Warteschlange platziert werden. Der Queued Components Player ruft dann dieselbe Methode in der Ausnahme-Handler-Objekt, das in der ursprüngliche Methodenaufruf fehlgeschlagen ist. Das Ausnahmehandlerobjekt kann Alternative, z. B. implementieren, durch Sammeln von Informationen zur Problemdiagnose oder generieren ein Objekt oder eine Nachricht, die den Client über das Problem zu informieren. Wenn die Anwendung keine implementiert <xref:System.EnterpriseServices.IPlaybackControl>, die nicht verarbeitbare Nachricht ist für den endgültigen Verbleib bzw. Dead-Letter-Warteschlange platziert, wenn der Queued Components Player alle Wiederholungen ausgeschöpft hat.  
  
 Eine nicht verarbeitbare Nachricht ist eine Nachricht, die aus irgendeinem Grund möglicherweise aufgrund eines Problems mit dem Server oder die queuing-System nicht verarbeitet werden kann. Die Transaktion ein Rollback aus, und die nicht verarbeitbare Nachricht wird an den Anfang der Warteschlange. Wenn die Nachricht wieder aus der Warteschlange entfernt wird, tritt ein, die gleiche Bedingung. Diese Meldung kann weiterhin Schleifen auf unbestimmte Zeit, bis eine Aktion ausgeführt wird, um das Problem zu beheben. Der Queued Components-Dienst übernimmt die nicht verarbeitbare Nachricht mithilfe einer Reihe von Wiederholungen. Nach mehreren erfolglosen Versuchen wird die Nachricht an eine Warteschlange des endgültigen Verbleib verschoben. Nicht verarbeitbare Nachrichten verbleiben in der Verbleib Warteschlange, bis Sie manuell mithilfe des Komponenten-Nachricht den Tupelverschiebungsvorgang in der Warteschlange verschoben.  
  
 Die für nicht verarbeitbare Nachrichten können auch programmgesteuert behoben werden, mithilfe der <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A> -Methode, die serverseitige Komponentenautor zu informieren, die alle Versuche zum Wiedergeben der verzögerten Aktivierung fehlgeschlagen sind.  
  
 Wenn Sie eine nicht verarbeitbare Nachricht erkennen, Sie können schnell die Ursache des Problems zu beheben. möglicherweise. Wenn der Server aus irgendeinem Grund offline war, können Sie beispielsweise den Server wieder online schalten. Wenn Sie das Problem schnell lösen können, können Sie eine andere Transaktion, die den anforderer benachrichtigt werden, den die Transaktion nicht ausgeführt, automatisch generieren. Der anforderer kann eine kompensierende Transaktion ausführen, die die Auswirkungen einer Transaktion umkehrt, die ein Commit bereits ausgeführt wurde.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="FinalClientRetry">
      <MemberSignature Language="C#" Value="public void FinalClientRetry ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinalClientRetry() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IPlaybackControl.FinalClientRetry" />
      <MemberSignature Language="VB.NET" Value="Public Sub FinalClientRetry ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FinalClientRetry();" />
      <MemberSignature Language="F#" Value="abstract member FinalClientRetry : unit -&gt; unit" Usage="iPlaybackControl.FinalClientRetry " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Informiert die clientseitige Ausnahmebehandlungskomponente, dass alle Versuche von Message Queuing zum Übermitteln der Meldung an den Server zurückgewiesen wurden und dass die Meldung in der clientseitigen Xact-Warteschlange für unzustellbare Meldungen abgelegt wurde.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beim Eintreffen von Nachrichten in der Warteschlange für unzustellbare Nachrichten Xact versucht COM+, rufen Sie einen clientseitigen Ausnahmehandler, der im Zusammenhang mit der die Server-Klasse, diese Benachrichtigung zu übermitteln. Dies erfolgt durch den ersten Aufruf <xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A>, und klicken Sie dann die Version für die Ausnahmebehandlung der fehlerhaften Methode im Ausnahmehandler Objekt aufrufen. Diese Ausnahmemethode kann dann eine Ausnahmeaktion, z. B. den Fehler aufzeichnen, senden eine e-Mail-Nachricht an den Administrator oder clientseitige kompensierende Aktion (die Auswirkungen der eine früheren Transaktion umkehren) vornehmen. Wenn die Exception-Methode nicht erfolgreich ist, bleibt die Nachricht in der Transaktion Dead Letter-Warteschlange.  
  
 Warteschlange für unzustellbare Xact kann im Microsoft Message Queue (MSMQ)-Explorer angezeigt werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FinalServerRetry">
      <MemberSignature Language="C#" Value="public void FinalServerRetry ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinalServerRetry() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IPlaybackControl.FinalServerRetry" />
      <MemberSignature Language="VB.NET" Value="Public Sub FinalServerRetry ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FinalServerRetry();" />
      <MemberSignature Language="F#" Value="abstract member FinalServerRetry : unit -&gt; unit" Usage="iPlaybackControl.FinalServerRetry " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Informiert die serverseitige Ausnahmeklassenimplementierung, dass alle Versuche zum Wiedergeben der verzögerten Aktivierung auf dem Server fehlgeschlagen sind und die Meldung gerade in die Warteschlange für den endgültigen Verbleib verschoben wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beim Eintreffen von Nachrichten in der Warteschlange für unzustellbare Nachrichten Xact versucht COM+, rufen Sie einen serverseitigen Ausnahmehandler, der im Zusammenhang mit der die Server-Klasse, diese Benachrichtigung zu übermitteln. Dies erfolgt durch den ersten Aufruf <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A>, und klicken Sie dann die Version der fehlerhaften Methode in dem Ausnahmeobjekt für den Handler für die Ausnahmebehandlung aufgerufen. Diese Ausnahmemethode kann dann eine Ausnahmeaktion, z. B. den Fehler aufzeichnen, senden eine e-Mail-Nachricht an den Administrator oder clientseitige kompensierende Aktion (die Auswirkungen der eine früheren Transaktion umkehren) vornehmen. Das Serverobjekt stellen höchste anstrengungen, um diese Transaktion erfolgreich abgeschlossen. Andernfalls ist manueller Eingriff erforderlich, um die Nachricht erneut verarbeiten. Wenn die Exception-Methode nicht erfolgreich ist, wird die Nachricht an die Warteschlange des endgültigen Verbleib verschoben.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="IPlaybackControl" FullName="System.EnterpriseServices.IPlaybackControl">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6f1b4ed9250e6a7d39498f1b15c45c83e21578df" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86817668" /></Metadata><TypeSignature Language="C#" Value="public interface IPlaybackControl" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPlaybackControl" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.IPlaybackControl" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPlaybackControl" />
  <TypeSignature Language="C++ CLI" Value="public interface class IPlaybackControl" />
  <TypeSignature Language="F#" Value="type IPlaybackControl = interface" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.InteropServices.Guid("51372AFD-CAE7-11CF-BE81-00AA00A2FA25")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.Guid("51372AFD-CAE7-11CF-BE81-00AA00A2FA25")&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Kann in Queued Components bei der nicht ordnungsgemäßen Behandlung von serverseitigen Wiedergabefehlern und bei clientseitigen Fehlern des Übermittlungsmechanismus von Message Queuing verwendet werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die für die Komponente im com+-Katalog definierte Ausnahme Klasse implementiert sowohl <xref:System.EnterpriseServices.IPlaybackControl> als auch die-Schnittstelle für die ursprüngliche-Klasse. Die Methoden Implementierungen der ursprünglichen Klassen Schnittstelle werden verwendet, um die Ausnahmebehandlung für die fehlgeschlagenen Methoden in der Klasse selbst auszuführen. Sie werden nach oder aufgerufen <xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A> <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A> , um Ausnahmen für die ursprünglich aufgerufene Methode zu verarbeiten.  
  
 Der in der Warteschlange befindliche Komponenten Player Ruft die Methoden von <xref:System.EnterpriseServices.IPlaybackControl> auf, um das Ausnahmehandler-Objekt zu informieren, dass eine Nachricht in der letzten ruhenden Warteschlange oder in der Warteschlange für unzustellbare Nachrichten Der in der Warteschlange befindliche Komponenten Player ruft dann dieselbe Methode im Ausnahmehandler-Objekt auf, bei dem im ursprünglichen Methodenaufruf ein Fehler aufgetreten ist. Das Ausnahmehandler-Objekt kann eine Alternative implementieren, z. b. durch das Sammeln von Diagnoseinformationen oder das Erzeugen eines Objekts oder einer Nachricht, die den Client über das Problem informiert. Wenn die Anwendung nicht implementiert <xref:System.EnterpriseServices.IPlaybackControl> , wird die nicht verarbeitbare Nachricht in der letzten ruhenden Warteschlange bzw. in der Warteschlange für unzustellbare Nachrichten abgelegt, wenn der in der Warteschlange befindliche Komponenten Spieler  
  
 Eine nicht verarbeitbare Nachricht ist eine Nachricht, die aus irgendeinem Grund nicht verarbeitet werden kann, möglicherweise aufgrund eines Problems mit dem Server oder queuingsystem. Für die Transaktion wird ein Rollback ausgeführt, und die nicht verarbeitbare Nachricht geht an den Anfang der Warteschlange. Wenn die Nachricht wieder in die Warteschlange eingereiht wird, tritt dieselbe Bedingung auf. Diese Nachricht kann die Schleife beliebig lange fortsetzen, bis das Problem behoben wurde. Der Dienst für in der Warteschlange befindliche Komponenten verarbeitet die nicht verarbeitbare Nachricht mithilfe einer Reihe von Wiederholungs versuchen. Nach mehreren erfolglosen Wiederholungen wird die Nachricht in eine letzte Warteschlange verschoben. Nicht verarbeitbare Nachrichten verbleiben in der ruhenden Warteschlange, bis Sie manuell mit dem Message verschiebungstool der Warteschlange  
  
 Die Situation für nicht verarbeitbare Nachrichten kann auch Programm gesteuert mithilfe der-Methode aufgelöst werden <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A> , die dem Autor der serverseitigen Komponente mitteilt, dass alle Versuche zur Wiedergabe der verzögerten Aktivierung fehlgeschlagen sind.  
  
 Wenn Sie eine nicht verarbeitbare Nachricht ermitteln, können Sie möglicherweise die Ursache des Problems schnell beheben. Wenn der Server z. b. aus irgendeinem Grund offline geschaltet wurde, können Sie den Server wieder online schalten. Wenn Sie das Problem nicht schnell lösen können, können Sie automatisch eine andere Transaktion generieren, die den Anforderer darüber benachrichtigt, dass die Transaktion nicht durchgeführt wurde. Der Anforderer kann dann eine kompensierende Transaktion erstellen, die die Auswirkung einer Transaktion rückgängig macht, für die bereits ein Commit ausgeführt wurde.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="FinalClientRetry">
      <MemberSignature Language="C#" Value="public void FinalClientRetry ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinalClientRetry() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IPlaybackControl.FinalClientRetry" />
      <MemberSignature Language="VB.NET" Value="Public Sub FinalClientRetry ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FinalClientRetry();" />
      <MemberSignature Language="F#" Value="abstract member FinalClientRetry : unit -&gt; unit" Usage="iPlaybackControl.FinalClientRetry " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Informiert die clientseitige Ausnahmebehandlungskomponente, dass alle Versuche von Message Queuing zum Übermitteln der Meldung an den Server zurückgewiesen wurden und dass die Meldung in der clientseitigen Xact-Warteschlange für unzustellbare Meldungen abgelegt wurde.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Nachrichten in der Warteschlange für unzustellbare Nachrichten eintreffen, versucht com+, einen Client seitigen Ausnahmehandler für die Serverklasse aufzurufen, um diese Benachrichtigung zu übermitteln. Dies erfolgt durch das erste Aufrufen von und anschließendes <xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A> Aufrufen der Ausnahme Behandlungs Version der fehlgeschlagenen Methode im Ausnahmehandlerobjekt. Diese Ausnahme Methode kann dann eine Ausnahme Aktion ausführen, z. b. das Aufzeichnen des Fehlers, das Senden einer e-Mail-Nachricht an den Administrator oder das Durchführen von Client seitiger Kompensations Aktionen (Umkehren der Auswirkungen einer früheren Transaktion). Wenn die Ausnahme Methode nicht erfolgreich ist, wird die Nachricht in der Warteschlange für unzustellbare Nachrichten von XACT belassen.  
  
 Die XACT-Warteschlange für unzustellbare Nachrichten kann im MSMQ-Explorer (Microsoft Message Queue) angezeigt werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FinalServerRetry">
      <MemberSignature Language="C#" Value="public void FinalServerRetry ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinalServerRetry() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IPlaybackControl.FinalServerRetry" />
      <MemberSignature Language="VB.NET" Value="Public Sub FinalServerRetry ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FinalServerRetry();" />
      <MemberSignature Language="F#" Value="abstract member FinalServerRetry : unit -&gt; unit" Usage="iPlaybackControl.FinalServerRetry " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Informiert die serverseitige Ausnahmeklassenimplementierung, dass alle Versuche zum Wiedergeben der verzögerten Aktivierung auf dem Server fehlgeschlagen sind und die Meldung gerade in die Warteschlange für den endgültigen Verbleib verschoben wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Nachrichten in der Warteschlange für unzustellbare Nachrichten eintreffen, versucht com+, einen serverseitigen Ausnahmehandler für die Serverklasse aufzurufen, um diese Benachrichtigung zu übermitteln. Dies erfolgt durch das erste Aufrufen von und anschließendes <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A> Aufrufen der Ausnahme Behandlungs Version der fehlgeschlagenen Methode im Ausnahmehandlerobjekt. Diese Ausnahme Methode kann dann eine Ausnahme Aktion ausführen, z. b. das Aufzeichnen des Fehlers, das Senden einer e-Mail-Nachricht an den Administrator oder das Durchführen von Client seitiger Kompensations Aktionen (Umkehren der Auswirkungen einer früheren Transaktion). Das Server Objekt sollte jeden Vorgang ausführen, um diese Transaktion erfolgreich abzuschließen. Andernfalls ist ein manueller Eingriff erforderlich, um die Nachricht erneut zu verarbeiten. Wenn die Ausnahme Methode nicht erfolgreich ist, wird die Nachricht in die letzte ruhende Warteschlange verschoben.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

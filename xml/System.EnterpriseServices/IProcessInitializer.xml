<Type Name="IProcessInitializer" FullName="System.EnterpriseServices.IProcessInitializer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="018b60939bb52e17b264ebcf5d2ebbe42e4675e6" /><Meta Name="ms.sourcegitcommit" Value="8b09499854b5b7b909802126edc1f1fca0054c10" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="02/01/2020" /><Meta Name="ms.locfileid" Value="76947023" /></Metadata><TypeSignature Language="C#" Value="public interface IProcessInitializer" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IProcessInitializer" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.IProcessInitializer" />
  <TypeSignature Language="VB.NET" Value="Public Interface IProcessInitializer" />
  <TypeSignature Language="C++ CLI" Value="public interface class IProcessInitializer" />
  <TypeSignature Language="F#" Value="type IProcessInitializer = interface" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("1113f52d-dc7f-4943-aed6-88d04027e32a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Unterstützt Methoden, die beim Starten oder Herunterfahren einer COM-Komponente aufgerufen werden können.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementieren Sie die Methoden der <xref:System.EnterpriseServices.IProcessInitializer>-Schnittstelle für Serviced Components, wenn Sie den Initialisierungs-oder Herunterfahren-Code ausführen möchten, wenn ein Server Prozess (dllhost. exe) gestartet bzw. heruntergefahren wird.  
  
 Com+ stellt `Startup`-und `Shutdown`-Ereignisse bereit, wenn "Dllhost. exe" gestartet und beendet wird. Diese Funktion ermöglicht es, dass alle COM+-Komponenten, die in einer COM+-Serveranwendung installiert sind (im folgenden als Serverkomponenten bezeichnet), benutzerdefinierte Initialisierungs-und Bereinigungs Code ausführen. Eine Instanz der einzelnen Komponenten, die die <xref:System.EnterpriseServices.IProcessInitializer>-Schnittstelle implementieren, wird für die Dauer des Prozesses erstellt und gespeichert. Bei der Implementierung auf einem <xref:System.EnterpriseServices.ServicedComponent>muss der `InitializesServerApplication`-Parameter in der `COMAdminCatalogObject` in der Komponenten Auflistung bei der Registrierung der Komponente auf `true` festgelegt werden, damit die Schnittstellen Methoden beim Starten und Herunterfahren aufgerufen werden.
  
 Mit den `Startup`-und `Shutdown` Ereignissen können Sie Ressourcen initialisieren, Verbindungen erstellen, freigegebene Daten initialisieren und Bereinigungs Code ausführen. Allerdings dürfen Sie nicht auf die für com+ spezifischen Zustände zugreifen, da noch keine Instanzen von Serverkomponenten erstellt wurden. Außerdem sollte der Code in den `Startup`-und `Shutdown` Ereignissen so schnell wie möglich zurückgeben, da das System nur 90 Sekunden wartet, bis dllhost. exe die Aktivierung von Aktivierungen nach dem Starten des Prozesses durch das System vorbereitet hat. Wenn "Dllhost. exe" nicht signalisiert, dass es innerhalb von 90 Sekunden bereit ist, beendet das System den Prozess. Daher muss die gesamte Initialisierungs Verarbeitung innerhalb dieses Zeitraums abgeschlossen werden. Jede Serverkomponente, die an der Initialisierung teilnimmt, muss die <xref:System.EnterpriseServices.IProcessInitializer>-Schnittstelle unterstützen. Beim Starten von dllhost. exe erstellt com+ alle Serverkomponenten, die diesen Dienst angefordert haben, ruft `QueryInterface` für die <xref:System.EnterpriseServices.IProcessInitializer>-Schnittstelle auf und ruft die <xref:System.EnterpriseServices.IProcessInitializer.Startup%2A>-Funktion auf. Ebenso wird beim Herunterfahren des dllhost. exe-Prozesses die <xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A>-Funktion für diese zuvor gespeicherten Schnittstellen Zeiger aufgerufen.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public void Shutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Shutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IProcessInitializer.Shutdown" />
      <MemberSignature Language="VB.NET" Value="Public Sub Shutdown ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Shutdown();" />
      <MemberSignature Language="F#" Value="abstract member Shutdown : unit -&gt; unit" Usage="iProcessInitializer.Shutdown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Führt Aktionen zum Herunterfahren aus. Wird beim Herunterfahren von Dllhost.exe aufgerufen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A> wird nicht während eines FailFast-Ereignisses oder eines anderen schwerwiegenden herunter Fahrens aufgerufen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Startup">
      <MemberSignature Language="C#" Value="public void Startup (object punkProcessControl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Startup([in]object punkProcessControl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IProcessInitializer.Startup(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Startup (punkProcessControl As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Startup(System::Object ^ punkProcessControl);" />
      <MemberSignature Language="F#" Value="abstract member Startup : obj -&gt; unit" Usage="iProcessInitializer.Startup punkProcessControl" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="punkProcessControl" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="punkProcessControl">In Microsoft Windows XP ein Zeiger auf die <see langword="IUnknown" />-Schnittstelle der startenden COM-Komponente. In Microsoft Windows 2000 ist dieses Argument immer <see langword="null" />.</param>
        <summary>Führt die Initialisierung beim Systemstart durch. Wird beim Starten von Dllhost.exe aufgerufen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das Objekt, auf das `punkProcessControl` verweist, implementiert eine <xref:System.EnterpriseServices.IProcessInitControl>-Schnittstelle. <xref:System.EnterpriseServices.IProcessInitControl> unterstützt die einzelnen Methoden <xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>.  
  
 Der Initialisierungs Code in <xref:System.EnterpriseServices.IProcessInitializer.Startup%2A> kann die <xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>aufzurufen, wobei das Timeout auf die Anzahl der Sekunden festgelegt ist, die vor dem Start der Komponente verbleiben.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

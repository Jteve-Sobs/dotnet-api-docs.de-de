<Type Name="EncodingExtensions" FullName="System.Text.EncodingExtensions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="734cc10a484abebc435a7fb2e100ddc2f5eaaa30" /><Meta Name="ms.sourcegitcommit" Value="1617f40ee47f4336ea7edb156fc31f853fadd853" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/13/2020" /><Meta Name="ms.locfileid" Value="88188271" /></Metadata><TypeSignature Language="C#" Value="public static class EncodingExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit EncodingExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.EncodingExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module EncodingExtensions" />
  <TypeSignature Language="C++ CLI" Value="public ref class EncodingExtensions abstract sealed" />
  <TypeSignature Language="F#" Value="type EncodingExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public static void Convert (this System.Text.Decoder decoder, ref System.Buffers.ReadOnlySequence&lt;byte&gt;? bytes, System.Buffers.IBufferWriter&lt;char&gt; writer, bool flush, out long charsUsed, out bool completed);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Convert(class System.Text.Decoder decoder, [in]valuetype System.Buffers.ReadOnlySequence`1&lt;unsigned int8&gt;&amp; bytes, class System.Buffers.IBufferWriter`1&lt;char&gt; writer, bool flush, [out] int64&amp; charsUsed, [out] bool&amp; completed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingExtensions.Convert(System.Text.Decoder,System.Buffers.ReadOnlySequence{System.Byte}@,System.Buffers.IBufferWriter{System.Char},System.Boolean,System.Int64@,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Convert (decoder As Decoder, ByRef bytes As ReadOnlySequence(Of Byte), writer As IBufferWriter(Of Char), flush As Boolean, ByRef charsUsed As Long, ByRef completed As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void Convert(System::Text::Decoder ^ decoder, System::Buffers::ReadOnlySequence&lt;System::Byte&gt; % bytes, System::Buffers::IBufferWriter&lt;char&gt; ^ writer, bool flush, [Runtime::InteropServices::Out] long % charsUsed, [Runtime::InteropServices::Out] bool % completed);" />
      <MemberSignature Language="F#" Value="static member Convert : System.Text.Decoder * ReadOnlySequence * System.Buffers.IBufferWriter&lt;char&gt; * bool * int64 * bool -&gt; unit" Usage="System.Text.EncodingExtensions.Convert (decoder, bytes, writer, flush, charsUsed, completed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="decoder" Type="System.Text.Decoder" RefType="this" />
        <Parameter Name="bytes" Type="System.Buffers.ReadOnlySequence&lt;System.Byte&gt;" RefType="ref">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="writer" Type="System.Buffers.IBufferWriter&lt;System.Char&gt;" />
        <Parameter Name="flush" Type="System.Boolean" />
        <Parameter Name="charsUsed" Type="System.Int64" RefType="out" />
        <Parameter Name="completed" Type="System.Boolean" RefType="out" />
      </Parameters>
      <Docs>
        <param name="decoder"><span data-ttu-id="1e932-101">Die Decoderinstanz, die Bytes in <see langword="char" />-Werte konvertieren kann.</span><span class="sxs-lookup"><span data-stu-id="1e932-101">The decoder instance that can convert bytes to <see langword="char" /> values.</span></span></param>
        <param name="bytes"><span data-ttu-id="1e932-102">Die zu decodierende Bytesequenz.</span><span class="sxs-lookup"><span data-stu-id="1e932-102">A sequence of bytes to decode.</span></span></param>
        <param name="writer"><span data-ttu-id="1e932-103">Der Puffer, in den die decodierten Zeichen geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="1e932-103">The buffer to which the decoded characters will be written.</span></span></param>
        <param name="flush"><span data-ttu-id="1e932-104"><see langword="true" />, um anzugeben, dass keine weiteren Daten konvertiert werden; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1e932-104"><see langword="true" /> to indicate no further data is to be converted; otherwise <see langword="false" />.</span></span></param>
        <param name="charsUsed"><span data-ttu-id="1e932-105">Enthält nach Ausführung dieser Methode die Anzahl der in <paramref name="writer" /> geschriebenen Zeichen.</span><span class="sxs-lookup"><span data-stu-id="1e932-105">When this method returns, contains the count of characters that were written to <paramref name="writer" />.</span></span></param>
        <param name="completed"><span data-ttu-id="1e932-106">Enthält nach Ausführung dieser Methode <see langword="true" />, wenn <paramref name="decoder" /> keinen partiellen internen Zustand enthält; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1e932-106">When this method returns, contains <see langword="true" /> if <paramref name="decoder" /> contains no partial internal state; otherwise, <see langword="false" />.</span></span>
<span data-ttu-id="1e932-107">Wenn <paramref name="flush" /> <see langword="true" /> ist, wird dieser stets auf <see langword="true" /> festgelegt, nachdem die Methode ausgeführt wurde.</span><span class="sxs-lookup"><span data-stu-id="1e932-107">If <paramref name="flush" /> is <see langword="true" />, this will always be set to <see langword="true" /> when the method returns.</span></span></param>
        <summary><span data-ttu-id="1e932-108">Konvertiert eine <see cref="T:System.Buffers.ReadOnlySequence`1" /> in UTF-16-codierte Zeichen und schreibt das Ergebnis in <paramref name="writer" />.</span><span class="sxs-lookup"><span data-stu-id="1e932-108">Converts a <see cref="T:System.Buffers.ReadOnlySequence`1" /> to UTF-16 encoded characters and writes the result to <paramref name="writer" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="1e932-109"><paramref name="bytes" /> enthält Daten, die nicht decodiert werden können, und <paramref name="decoder" /> ist für das Auslösen konfiguriert, wenn solche Daten erkannt werden.</span><span class="sxs-lookup"><span data-stu-id="1e932-109"><paramref name="bytes" /> contains data that cannot be decoded and <paramref name="decoder" /> is configured to throw when such data is seen.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public static void Convert (this System.Text.Decoder decoder, ReadOnlySpan&lt;byte&gt;? bytes, System.Buffers.IBufferWriter&lt;char&gt; writer, bool flush, out long charsUsed, out bool completed);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Convert(class System.Text.Decoder decoder, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes, class System.Buffers.IBufferWriter`1&lt;char&gt; writer, bool flush, [out] int64&amp; charsUsed, [out] bool&amp; completed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingExtensions.Convert(System.Text.Decoder,System.ReadOnlySpan{System.Byte},System.Buffers.IBufferWriter{System.Char},System.Boolean,System.Int64@,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Convert (decoder As Decoder, bytes As ReadOnlySpan(Of Byte), writer As IBufferWriter(Of Char), flush As Boolean, ByRef charsUsed As Long, ByRef completed As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void Convert(System::Text::Decoder ^ decoder, ReadOnlySpan&lt;System::Byte&gt; bytes, System::Buffers::IBufferWriter&lt;char&gt; ^ writer, bool flush, [Runtime::InteropServices::Out] long % charsUsed, [Runtime::InteropServices::Out] bool % completed);" />
      <MemberSignature Language="F#" Value="static member Convert : System.Text.Decoder * ReadOnlySpan&lt;byte&gt; * System.Buffers.IBufferWriter&lt;char&gt; * bool * int64 * bool -&gt; unit" Usage="System.Text.EncodingExtensions.Convert (decoder, bytes, writer, flush, charsUsed, completed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="decoder" Type="System.Text.Decoder" RefType="this" />
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="writer" Type="System.Buffers.IBufferWriter&lt;System.Char&gt;" />
        <Parameter Name="flush" Type="System.Boolean" />
        <Parameter Name="charsUsed" Type="System.Int64" RefType="out" />
        <Parameter Name="completed" Type="System.Boolean" RefType="out" />
      </Parameters>
      <Docs>
        <param name="decoder"><span data-ttu-id="1e932-110">Die Decoderinstanz, die Bytes in <see langword="char" />-Werte konvertieren kann.</span><span class="sxs-lookup"><span data-stu-id="1e932-110">The decoder instance that can convert bytes to <see langword="char" /> values.</span></span></param>
        <param name="bytes"><span data-ttu-id="1e932-111">Die zu decodierende Bytesequenz.</span><span class="sxs-lookup"><span data-stu-id="1e932-111">A sequence of bytes to decode.</span></span></param>
        <param name="writer"><span data-ttu-id="1e932-112">Der Puffer, in den die decodierten Zeichen geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="1e932-112">The buffer to which the decoded chars will be written.</span></span></param>
        <param name="flush"><span data-ttu-id="1e932-113"><see langword="true" />, um anzugeben, dass keine weiteren Daten konvertiert werden; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1e932-113"><see langword="true" /> to indicate no further data is to be converted; otherwise <see langword="false" />.</span></span></param>
        <param name="charsUsed"><span data-ttu-id="1e932-114">Enthält nach Ausführung dieser Methode die Anzahl der <see langword="char" />-Instanzen, die in <paramref name="writer" /> geschrieben wurden.</span><span class="sxs-lookup"><span data-stu-id="1e932-114">When this method returns, contains the count of <see langword="char" />s which were written to <paramref name="writer" />.</span></span></param>
        <param name="completed"><span data-ttu-id="1e932-115">Enthält nach Ausführung dieser Methode <see langword="true" />, wenn <paramref name="decoder" /> keinen partiellen internen Zustand enthält; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1e932-115">When this method returns, contains <see langword="true" /> if <paramref name="decoder" /> contains no partial internal state; otherwise, <see langword="false" />.</span></span>
<span data-ttu-id="1e932-116">Wenn <paramref name="flush" /> <see langword="true" /> ist, wird dieser stets auf <see langword="true" /> festgelegt, nachdem die Methode ausgeführt wurde.</span><span class="sxs-lookup"><span data-stu-id="1e932-116">If <paramref name="flush" /> is <see langword="true" />, this will always be set to <see langword="true" /> when the method returns.</span></span></param>
        <summary><span data-ttu-id="1e932-117">Konvertiert eine <see cref="T:System.ReadOnlySpan`1" /> mithilfe von <paramref name="decoder" /> in Zeichen und schreibt das Ergebnis in <paramref name="writer" />.</span><span class="sxs-lookup"><span data-stu-id="1e932-117">Converts a <see cref="T:System.ReadOnlySpan`1" /> to chars using <paramref name="decoder" /> and writes the result to <paramref name="writer" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="1e932-118"><paramref name="bytes" /> enthält Daten, die nicht codiert werden können, und <paramref name="decoder" /> ist für das Auslösen konfiguriert, wenn solche Daten erkannt werden.</span><span class="sxs-lookup"><span data-stu-id="1e932-118"><paramref name="bytes" /> contains data that cannot be encoded and <paramref name="decoder" /> is configured to throw when such data is seen.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public static void Convert (this System.Text.Encoder encoder, ref System.Buffers.ReadOnlySequence&lt;char&gt;? chars, System.Buffers.IBufferWriter&lt;byte&gt; writer, bool flush, out long bytesUsed, out bool completed);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Convert(class System.Text.Encoder encoder, [in]valuetype System.Buffers.ReadOnlySequence`1&lt;char&gt;&amp; chars, class System.Buffers.IBufferWriter`1&lt;unsigned int8&gt; writer, bool flush, [out] int64&amp; bytesUsed, [out] bool&amp; completed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingExtensions.Convert(System.Text.Encoder,System.Buffers.ReadOnlySequence{System.Char}@,System.Buffers.IBufferWriter{System.Byte},System.Boolean,System.Int64@,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Convert (encoder As Encoder, ByRef chars As ReadOnlySequence(Of Char), writer As IBufferWriter(Of Byte), flush As Boolean, ByRef bytesUsed As Long, ByRef completed As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void Convert(System::Text::Encoder ^ encoder, System::Buffers::ReadOnlySequence&lt;char&gt; % chars, System::Buffers::IBufferWriter&lt;System::Byte&gt; ^ writer, bool flush, [Runtime::InteropServices::Out] long % bytesUsed, [Runtime::InteropServices::Out] bool % completed);" />
      <MemberSignature Language="F#" Value="static member Convert : System.Text.Encoder * ReadOnlySequence * System.Buffers.IBufferWriter&lt;byte&gt; * bool * int64 * bool -&gt; unit" Usage="System.Text.EncodingExtensions.Convert (encoder, chars, writer, flush, bytesUsed, completed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoder" Type="System.Text.Encoder" RefType="this" />
        <Parameter Name="chars" Type="System.Buffers.ReadOnlySequence&lt;System.Char&gt;" RefType="ref">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="writer" Type="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />
        <Parameter Name="flush" Type="System.Boolean" />
        <Parameter Name="bytesUsed" Type="System.Int64" RefType="out" />
        <Parameter Name="completed" Type="System.Boolean" RefType="out" />
      </Parameters>
      <Docs>
        <param name="encoder"><span data-ttu-id="1e932-119">Die Encoderinstanz, die <see langword="char" />-Werte in Bytes konvertieren kann.</span><span class="sxs-lookup"><span data-stu-id="1e932-119">The encoder instance that can convert <see langword="char" /> values to bytes.</span></span></param>
        <param name="chars"><span data-ttu-id="1e932-120">Eine Sequenz von Zeichen, die codiert werden sollen.</span><span class="sxs-lookup"><span data-stu-id="1e932-120">A sequence of characters to encode.</span></span></param>
        <param name="writer"><span data-ttu-id="1e932-121">Der Puffer, in den die codierten Bytes geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="1e932-121">The buffer to which the encoded bytes will be written.</span></span></param>
        <param name="flush"><span data-ttu-id="1e932-122"><see langword="true" />, um anzugeben, dass keine weiteren Daten konvertiert werden; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1e932-122"><see langword="true" /> to indicate no further data is to be converted; otherwise <see langword="false" />.</span></span></param>
        <param name="bytesUsed"><span data-ttu-id="1e932-123">Enthält nach Ausführung dieser Methode die Anzahl der <see langword="byte" />-Instanzen, die in <paramref name="writer" /> geschrieben wurden.</span><span class="sxs-lookup"><span data-stu-id="1e932-123">When this method returns, contains the count of <see langword="byte" />s which were written to <paramref name="writer" />.</span></span></param>
        <param name="completed"><span data-ttu-id="1e932-124">Enthält nach Ausführung dieser Methode <see langword="true" />, wenn alle Eingaben bis <paramref name="bytesUsed" /> konvertiert wurden; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1e932-124">When this method returns, contains <see langword="true" /> if all input up until <paramref name="bytesUsed" /> was converted; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="1e932-125">Wenn <paramref name="flush" /> <see langword="true" /> ist, wird dieser stets auf <see langword="true" /> festgelegt, nachdem die Methode ausgeführt wurde.</span><span class="sxs-lookup"><span data-stu-id="1e932-125">If <paramref name="flush" /> is <see langword="true" />, this will always be set to <see langword="true" /> when the method returns.</span></span></param>
        <summary><span data-ttu-id="1e932-126">Konvertiert eine <see cref="T:System.Buffers.ReadOnlySequence`1" /> in codierte Bytes und schreibt das Ergebnis in <paramref name="writer" />.</span><span class="sxs-lookup"><span data-stu-id="1e932-126">Converts a <see cref="T:System.Buffers.ReadOnlySequence`1" /> to encoded bytes and writes the result to <paramref name="writer" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="1e932-127"><paramref name="chars" /> enthält Daten, die nicht codiert werden können, und <paramref name="encoder" /> ist für das Auslösen konfiguriert, wenn solche Daten erkannt werden.</span><span class="sxs-lookup"><span data-stu-id="1e932-127"><paramref name="chars" /> contains data that cannot be encoded and <paramref name="encoder" /> is configured to throw when such data is seen.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public static void Convert (this System.Text.Encoder encoder, ReadOnlySpan&lt;char&gt;? chars, System.Buffers.IBufferWriter&lt;byte&gt; writer, bool flush, out long bytesUsed, out bool completed);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Convert(class System.Text.Encoder encoder, valuetype System.ReadOnlySpan`1&lt;char&gt; chars, class System.Buffers.IBufferWriter`1&lt;unsigned int8&gt; writer, bool flush, [out] int64&amp; bytesUsed, [out] bool&amp; completed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingExtensions.Convert(System.Text.Encoder,System.ReadOnlySpan{System.Char},System.Buffers.IBufferWriter{System.Byte},System.Boolean,System.Int64@,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Convert (encoder As Encoder, chars As ReadOnlySpan(Of Char), writer As IBufferWriter(Of Byte), flush As Boolean, ByRef bytesUsed As Long, ByRef completed As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void Convert(System::Text::Encoder ^ encoder, ReadOnlySpan&lt;char&gt; chars, System::Buffers::IBufferWriter&lt;System::Byte&gt; ^ writer, bool flush, [Runtime::InteropServices::Out] long % bytesUsed, [Runtime::InteropServices::Out] bool % completed);" />
      <MemberSignature Language="F#" Value="static member Convert : System.Text.Encoder * ReadOnlySpan&lt;char&gt; * System.Buffers.IBufferWriter&lt;byte&gt; * bool * int64 * bool -&gt; unit" Usage="System.Text.EncodingExtensions.Convert (encoder, chars, writer, flush, bytesUsed, completed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoder" Type="System.Text.Encoder" RefType="this" />
        <Parameter Name="chars" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="writer" Type="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />
        <Parameter Name="flush" Type="System.Boolean" />
        <Parameter Name="bytesUsed" Type="System.Int64" RefType="out" />
        <Parameter Name="completed" Type="System.Boolean" RefType="out" />
      </Parameters>
      <Docs>
        <param name="encoder"><span data-ttu-id="1e932-128">Die Encoderinstanz, die <see langword="char" />-Werte in Bytes konvertieren kann.</span><span class="sxs-lookup"><span data-stu-id="1e932-128">The encoder instance that can convert <see langword="char" /> values to bytes.</span></span></param>
        <param name="chars"><span data-ttu-id="1e932-129">Eine Sequenz von Zeichen, die codiert werden sollen.</span><span class="sxs-lookup"><span data-stu-id="1e932-129">A sequence of characters to encode.</span></span></param>
        <param name="writer"><span data-ttu-id="1e932-130">Der Puffer, in den die codierten Bytes geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="1e932-130">The buffer to which the encoded bytes will be written.</span></span></param>
        <param name="flush"><span data-ttu-id="1e932-131"><see langword="true" />, um anzugeben, dass keine weiteren Daten konvertiert werden; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1e932-131"><see langword="true" /> to indicate no further data is to be converted; otherwise <see langword="false" />.</span></span></param>
        <param name="bytesUsed"><span data-ttu-id="1e932-132">Enthält nach Ausführung dieser Methode die Anzahl der <see langword="byte" />-Instanzen, die in <paramref name="writer" /> geschrieben wurden.</span><span class="sxs-lookup"><span data-stu-id="1e932-132">When this method returns, contains the count of <see langword="byte" />s which were written to <paramref name="writer" />.</span></span></param>
        <param name="completed"><span data-ttu-id="1e932-133">Enthält nach Ausführung dieser Methode <see langword="true" />, wenn <paramref name="encoder" /> keinen partiellen internen Zustand enthält; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1e932-133">When this method returns, contains <see langword="true" /> if <paramref name="encoder" /> contains no partial internal state; otherwise, <see langword="false" />.</span></span>
<span data-ttu-id="1e932-134">Wenn <paramref name="flush" /> <see langword="true" /> ist, wird dieser stets auf <see langword="true" /> festgelegt, nachdem die Methode ausgeführt wurde.</span><span class="sxs-lookup"><span data-stu-id="1e932-134">If <paramref name="flush" /> is <see langword="true" />, this will always be set to <see langword="true" /> when the method returns.</span></span></param>
        <summary><span data-ttu-id="1e932-135">Konvertiert eine <see cref="T:System.ReadOnlySpan`1" /> mithilfe von <paramref name="encoder" /> in Bytes und schreibt das Ergebnis in <paramref name="writer" />.</span><span class="sxs-lookup"><span data-stu-id="1e932-135">Converts a <see cref="T:System.ReadOnlySpan`1" /> to bytes using <paramref name="encoder" /> and writes the result to <paramref name="writer" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="1e932-136"><paramref name="chars" /> enthält Daten, die nicht codiert werden können, und <paramref name="encoder" /> ist für das Auslösen konfiguriert, wenn solche Daten erkannt werden.</span><span class="sxs-lookup"><span data-stu-id="1e932-136"><paramref name="chars" /> contains data that cannot be encoded and <paramref name="encoder" /> is configured to throw when such data is seen.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public static byte[] GetBytes (this System.Text.Encoding encoding, ref System.Buffers.ReadOnlySequence&lt;char&gt;? chars);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] GetBytes(class System.Text.Encoding encoding, [in]valuetype System.Buffers.ReadOnlySequence`1&lt;char&gt;&amp; chars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingExtensions.GetBytes(System.Text.Encoding,System.Buffers.ReadOnlySequence{System.Char}@)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetBytes (encoding As Encoding, ByRef chars As ReadOnlySequence(Of Char)) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static cli::array &lt;System::Byte&gt; ^ GetBytes(System::Text::Encoding ^ encoding, System::Buffers::ReadOnlySequence&lt;char&gt; % chars);" />
      <MemberSignature Language="F#" Value="static member GetBytes : System.Text.Encoding * ReadOnlySequence -&gt; byte[]" Usage="System.Text.EncodingExtensions.GetBytes (encoding, chars)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoding" Type="System.Text.Encoding" RefType="this" />
        <Parameter Name="chars" Type="System.Buffers.ReadOnlySequence&lt;System.Char&gt;" RefType="ref">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="encoding"><span data-ttu-id="1e932-137">Die Codierung, die angibt, wie die Daten in <paramref name="chars" /> codiert werden sollen.</span><span class="sxs-lookup"><span data-stu-id="1e932-137">The encoding that represents how the data in <paramref name="chars" /> should be encoded.</span></span></param>
        <param name="chars"><span data-ttu-id="1e932-138">Die Sequenz, die in Bytes codiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="1e932-138">The sequence to encode to bytes.</span></span></param>
        <summary><span data-ttu-id="1e932-139">Codiert die angegebene <see cref="T:System.Buffers.ReadOnlySequence`1" /> unter Verwendung der angegebenen <see cref="T:System.Text.Encoding" /> in ein <see cref="T:System.Byte" />-Array.</span><span class="sxs-lookup"><span data-stu-id="1e932-139">Encodes the specified <see cref="T:System.Buffers.ReadOnlySequence`1" /> into a <see cref="T:System.Byte" /> array using the specified <see cref="T:System.Text.Encoding" />.</span></span></summary>
        <returns><span data-ttu-id="1e932-140">Ein <see cref="T:System.Byte" />-Array, das den codierten Inhalt von <paramref name="chars" /> darstellt.</span><span class="sxs-lookup"><span data-stu-id="1e932-140">A <see cref="T:System.Byte" /> array that represents the encoded contents of <paramref name="chars" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="1e932-141"><paramref name="chars" /> enthält Daten, die nicht codiert werden können, und <paramref name="encoding" /> ist für das Auslösen konfiguriert, wenn solche Daten erkannt werden.</span><span class="sxs-lookup"><span data-stu-id="1e932-141"><paramref name="chars" /> contains data that cannot be encoded and <paramref name="encoding" /> is configured to throw when such data is seen.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public static long GetBytes (this System.Text.Encoding encoding, ref System.Buffers.ReadOnlySequence&lt;char&gt;? chars, System.Buffers.IBufferWriter&lt;byte&gt; writer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 GetBytes(class System.Text.Encoding encoding, [in]valuetype System.Buffers.ReadOnlySequence`1&lt;char&gt;&amp; chars, class System.Buffers.IBufferWriter`1&lt;unsigned int8&gt; writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingExtensions.GetBytes(System.Text.Encoding,System.Buffers.ReadOnlySequence{System.Char}@,System.Buffers.IBufferWriter{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetBytes (encoding As Encoding, ByRef chars As ReadOnlySequence(Of Char), writer As IBufferWriter(Of Byte)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long GetBytes(System::Text::Encoding ^ encoding, System::Buffers::ReadOnlySequence&lt;char&gt; % chars, System::Buffers::IBufferWriter&lt;System::Byte&gt; ^ writer);" />
      <MemberSignature Language="F#" Value="static member GetBytes : System.Text.Encoding * ReadOnlySequence * System.Buffers.IBufferWriter&lt;byte&gt; -&gt; int64" Usage="System.Text.EncodingExtensions.GetBytes (encoding, chars, writer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoding" Type="System.Text.Encoding" RefType="this" />
        <Parameter Name="chars" Type="System.Buffers.ReadOnlySequence&lt;System.Char&gt;" RefType="ref">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="writer" Type="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="encoding"><span data-ttu-id="1e932-142">Die Codierung, die angibt, wie die Daten in <paramref name="chars" /> codiert werden sollen.</span><span class="sxs-lookup"><span data-stu-id="1e932-142">The encoding that represents how the data in <paramref name="chars" /> should be encoded.</span></span></param>
        <param name="chars"><span data-ttu-id="1e932-143">Die <see cref="T:System.Buffers.ReadOnlySequence`1" />, deren Inhalt codiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="1e932-143">The <see cref="T:System.Buffers.ReadOnlySequence`1" /> whose contents should be encoded.</span></span></param>
        <param name="writer"><span data-ttu-id="1e932-144">Der Puffer, in den die codierten Bytes geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="1e932-144">The buffer to which the encoded bytes will be written.</span></span></param>
        <summary><span data-ttu-id="1e932-145">Decodiert die angegebene <see cref="T:System.Buffers.ReadOnlySequence`1" /> in <see langword="byte" />s unter Verwendung der angegebenen <see cref="T:System.Text.Encoding" /> und schreibt das Ergebnis in <paramref name="writer" />.</span><span class="sxs-lookup"><span data-stu-id="1e932-145">Decodes the specified <see cref="T:System.Buffers.ReadOnlySequence`1" /> to <see langword="byte" />s using the specified <see cref="T:System.Text.Encoding" /> and writes the result to <paramref name="writer" />.</span></span></summary>
        <returns><span data-ttu-id="1e932-146">Die Anzahl der Bytes, die in <paramref name="writer" /> geschrieben wurden.</span><span class="sxs-lookup"><span data-stu-id="1e932-146">The number of bytes written to <paramref name="writer" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="1e932-147"><paramref name="chars" /> enthält Daten, die nicht codiert werden können, und <paramref name="encoding" /> ist für das Auslösen konfiguriert, wenn solche Daten erkannt werden.</span><span class="sxs-lookup"><span data-stu-id="1e932-147"><paramref name="chars" /> contains data that cannot be encoded and <paramref name="encoding" /> is configured to throw when such data is seen.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public static int GetBytes (this System.Text.Encoding? encoding, ref System.Buffers.ReadOnlySequence&lt;char&gt; chars, Span&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetBytes(class System.Text.Encoding encoding, [in]valuetype System.Buffers.ReadOnlySequence`1&lt;char&gt;&amp; chars, valuetype System.Span`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingExtensions.GetBytes(System.Text.Encoding,System.Buffers.ReadOnlySequence{System.Char}@,System.Span{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetBytes (encoding As Encoding, ByRef chars As ReadOnlySequence(Of Char), bytes As Span(Of Byte)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int GetBytes(System::Text::Encoding ^ encoding, System::Buffers::ReadOnlySequence&lt;char&gt; % chars, Span&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="static member GetBytes : System.Text.Encoding * ReadOnlySequence * Span&lt;byte&gt; -&gt; int" Usage="System.Text.EncodingExtensions.GetBytes (encoding, chars, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoding" Type="System.Text.Encoding" RefType="this" />
        <Parameter Name="chars" Type="System.Buffers.ReadOnlySequence&lt;System.Char&gt;" RefType="ref">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="bytes" Type="System.Span&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="encoding"><span data-ttu-id="1e932-148">Die Codierung, die angibt, wie die Daten in <paramref name="chars" /> codiert werden sollen.</span><span class="sxs-lookup"><span data-stu-id="1e932-148">The encoding that represents how the data in <paramref name="chars" /> should be encoded.</span></span></param>
        <param name="chars"><span data-ttu-id="1e932-149">Die Sequenz, die in Bytes codiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="1e932-149">The sequence to encode to bytes.</span></span></param>
        <param name="bytes"><span data-ttu-id="1e932-150">Der Zielpuffer, in den die codierten Bytes geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="1e932-150">The destination buffer to which the encoded bytes will be written.</span></span></param>
        <summary><span data-ttu-id="1e932-151">Codiert die angegebene <see cref="T:System.Buffers.ReadOnlySequence`1" /> in <see langword="byte" />s unter Verwendung der angegebenen <see cref="T:System.Text.Encoding" /> und gibt das Ergebnis in <paramref name="bytes" /> aus.</span><span class="sxs-lookup"><span data-stu-id="1e932-151">Encodes the specified <see cref="T:System.Buffers.ReadOnlySequence`1" /> to <see langword="byte" />s using the specified <see cref="T:System.Text.Encoding" /> and outputs the result to <paramref name="bytes" />.</span></span></summary>
        <returns><span data-ttu-id="1e932-152">Die Anzahl der Bytes, die in <paramref name="bytes" /> geschrieben wurden.</span><span class="sxs-lookup"><span data-stu-id="1e932-152">The number of bytes written to <paramref name="bytes" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1e932-153"><paramref name="bytes" /> ist nicht groß genug, um die codierte Form von <paramref name="chars" /> aufzunehmen.</span><span class="sxs-lookup"><span data-stu-id="1e932-153"><paramref name="bytes" /> is not large enough to contain the encoded form of <paramref name="chars" />.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="1e932-154"><paramref name="chars" /> enthält Daten, die nicht codiert werden können, und <paramref name="encoding" /> ist für das Auslösen konfiguriert, wenn solche Daten erkannt werden.</span><span class="sxs-lookup"><span data-stu-id="1e932-154"><paramref name="chars" /> contains data that cannot be encoded and <paramref name="encoding" /> is configured to throw when such data is seen.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public static long GetBytes (this System.Text.Encoding encoding, ReadOnlySpan&lt;char&gt;? chars, System.Buffers.IBufferWriter&lt;byte&gt; writer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 GetBytes(class System.Text.Encoding encoding, valuetype System.ReadOnlySpan`1&lt;char&gt; chars, class System.Buffers.IBufferWriter`1&lt;unsigned int8&gt; writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingExtensions.GetBytes(System.Text.Encoding,System.ReadOnlySpan{System.Char},System.Buffers.IBufferWriter{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetBytes (encoding As Encoding, chars As ReadOnlySpan(Of Char), writer As IBufferWriter(Of Byte)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long GetBytes(System::Text::Encoding ^ encoding, ReadOnlySpan&lt;char&gt; chars, System::Buffers::IBufferWriter&lt;System::Byte&gt; ^ writer);" />
      <MemberSignature Language="F#" Value="static member GetBytes : System.Text.Encoding * ReadOnlySpan&lt;char&gt; * System.Buffers.IBufferWriter&lt;byte&gt; -&gt; int64" Usage="System.Text.EncodingExtensions.GetBytes (encoding, chars, writer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoding" Type="System.Text.Encoding" RefType="this" />
        <Parameter Name="chars" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="writer" Type="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="encoding"><span data-ttu-id="1e932-155">Die Codierung, die angibt, wie die Daten in <paramref name="chars" /> codiert werden sollen.</span><span class="sxs-lookup"><span data-stu-id="1e932-155">The encoding that represents how the data in <paramref name="chars" /> should be encoded.</span></span></param>
        <param name="chars"><span data-ttu-id="1e932-156">Die Sequenz, die in Bytes codiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="1e932-156">The sequence to encode to bytes.</span></span></param>
        <param name="writer"><span data-ttu-id="1e932-157">Der Puffer, in den die codierten Bytes geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="1e932-157">The buffer to which the encoded bytes will be written.</span></span></param>
        <summary><span data-ttu-id="1e932-158">Codiert die angegebene <see cref="T:System.ReadOnlySpan`1" /> in <see langword="byte" />s unter Verwendung der angegebenen <see cref="T:System.Text.Encoding" /> und schreibt das Ergebnis in <paramref name="writer" />.</span><span class="sxs-lookup"><span data-stu-id="1e932-158">Encodes the specified <see cref="T:System.ReadOnlySpan`1" /> to <see langword="byte" />s using the specified <see cref="T:System.Text.Encoding" /> and writes the result to <paramref name="writer" />.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="1e932-159"><paramref name="chars" /> enthält Daten, die nicht codiert werden können, und <paramref name="encoding" /> ist für das Auslösen konfiguriert, wenn solche Daten erkannt werden.</span><span class="sxs-lookup"><span data-stu-id="1e932-159"><paramref name="chars" /> contains data that cannot be encoded and <paramref name="encoding" /> is configured to throw when such data is seen.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public static long GetChars (this System.Text.Encoding encoding, ref System.Buffers.ReadOnlySequence&lt;byte&gt;? bytes, System.Buffers.IBufferWriter&lt;char&gt; writer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 GetChars(class System.Text.Encoding encoding, [in]valuetype System.Buffers.ReadOnlySequence`1&lt;unsigned int8&gt;&amp; bytes, class System.Buffers.IBufferWriter`1&lt;char&gt; writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingExtensions.GetChars(System.Text.Encoding,System.Buffers.ReadOnlySequence{System.Byte}@,System.Buffers.IBufferWriter{System.Char})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetChars (encoding As Encoding, ByRef bytes As ReadOnlySequence(Of Byte), writer As IBufferWriter(Of Char)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long GetChars(System::Text::Encoding ^ encoding, System::Buffers::ReadOnlySequence&lt;System::Byte&gt; % bytes, System::Buffers::IBufferWriter&lt;char&gt; ^ writer);" />
      <MemberSignature Language="F#" Value="static member GetChars : System.Text.Encoding * ReadOnlySequence * System.Buffers.IBufferWriter&lt;char&gt; -&gt; int64" Usage="System.Text.EncodingExtensions.GetChars (encoding, bytes, writer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoding" Type="System.Text.Encoding" RefType="this" />
        <Parameter Name="bytes" Type="System.Buffers.ReadOnlySequence&lt;System.Byte&gt;" RefType="ref">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="writer" Type="System.Buffers.IBufferWriter&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="encoding"><span data-ttu-id="1e932-160">Die Codierung, die angibt, wie die Daten in <paramref name="bytes" /> decodiert werden sollen.</span><span class="sxs-lookup"><span data-stu-id="1e932-160">The encoding that represents how the data in <paramref name="bytes" /> should be decoded.</span></span></param>
        <param name="bytes"><span data-ttu-id="1e932-161">Die Sequenz, deren Bytes decodiert werden sollen.</span><span class="sxs-lookup"><span data-stu-id="1e932-161">The sequence whose bytes should be decoded.</span></span></param>
        <param name="writer"><span data-ttu-id="1e932-162">Der Puffer, in den die decodierten Zeichen geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="1e932-162">The buffer to which the decoded chars will be written.</span></span></param>
        <summary><span data-ttu-id="1e932-163">Decodiert die angegebene <see cref="T:System.Buffers.ReadOnlySequence`1" /> in <see langword="char" />s unter Verwendung der angegebenen <see cref="T:System.Text.Encoding" /> und schreibt das Ergebnis in <paramref name="writer" />.</span><span class="sxs-lookup"><span data-stu-id="1e932-163">Decodes the specified <see cref="T:System.Buffers.ReadOnlySequence`1" /> to <see langword="char" />s using the specified <see cref="T:System.Text.Encoding" /> and writes the result to <paramref name="writer" />.</span></span></summary>
        <returns><span data-ttu-id="1e932-164">Die Anzahl der in <paramref name="writer" /> geschriebenen Zeichen.</span><span class="sxs-lookup"><span data-stu-id="1e932-164">The number of chars written to <paramref name="writer" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="1e932-165"><paramref name="bytes" /> enthält Daten, die nicht decodiert werden können, und <paramref name="encoding" /> ist für das Auslösen konfiguriert, wenn solche Daten erkannt werden.</span><span class="sxs-lookup"><span data-stu-id="1e932-165"><paramref name="bytes" /> contains data that cannot be decoded and <paramref name="encoding" /> is configured to throw when such data is seen.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public static int GetChars (this System.Text.Encoding? encoding, ref System.Buffers.ReadOnlySequence&lt;byte&gt; bytes, Span&lt;char&gt; chars);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetChars(class System.Text.Encoding encoding, [in]valuetype System.Buffers.ReadOnlySequence`1&lt;unsigned int8&gt;&amp; bytes, valuetype System.Span`1&lt;char&gt; chars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingExtensions.GetChars(System.Text.Encoding,System.Buffers.ReadOnlySequence{System.Byte}@,System.Span{System.Char})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetChars (encoding As Encoding, ByRef bytes As ReadOnlySequence(Of Byte), chars As Span(Of Char)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int GetChars(System::Text::Encoding ^ encoding, System::Buffers::ReadOnlySequence&lt;System::Byte&gt; % bytes, Span&lt;char&gt; chars);" />
      <MemberSignature Language="F#" Value="static member GetChars : System.Text.Encoding * ReadOnlySequence * Span&lt;char&gt; -&gt; int" Usage="System.Text.EncodingExtensions.GetChars (encoding, bytes, chars)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoding" Type="System.Text.Encoding" RefType="this" />
        <Parameter Name="bytes" Type="System.Buffers.ReadOnlySequence&lt;System.Byte&gt;" RefType="ref">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="chars" Type="System.Span&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="encoding"><span data-ttu-id="1e932-166">Die Codierung, die angibt, wie die Daten in <paramref name="bytes" /> codiert werden.</span><span class="sxs-lookup"><span data-stu-id="1e932-166">The encoding that represents how the data in <paramref name="bytes" /> is encoded.</span></span></param>
        <param name="bytes"><span data-ttu-id="1e932-167">Die Sequenz, die in Zeichen decodiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="1e932-167">The sequence to decode to characters.</span></span></param>
        <param name="chars"><span data-ttu-id="1e932-168">Der Zielpuffer, in den die decodierten Zeichen geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="1e932-168">The destination buffer to which the decoded characters will be written.</span></span></param>
        <summary><span data-ttu-id="1e932-169">Decodiert die angegebene <see cref="T:System.Buffers.ReadOnlySequence`1" /> in <see langword="char" />s unter Verwendung der angegebenen <see cref="T:System.Text.Encoding" /> und gibt das Ergebnis in <paramref name="chars" /> aus.</span><span class="sxs-lookup"><span data-stu-id="1e932-169">Decodes the specified <see cref="T:System.Buffers.ReadOnlySequence`1" /> to <see langword="char" />s using the specified <see cref="T:System.Text.Encoding" /> and outputs the result to <paramref name="chars" />.</span></span></summary>
        <returns><span data-ttu-id="1e932-170">Die Anzahl der in <paramref name="chars" /> geschriebenen Zeichen.</span><span class="sxs-lookup"><span data-stu-id="1e932-170">The number of chars written to <paramref name="chars" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1e932-171"><paramref name="chars" /> ist nicht groß genug, um die codierte Form von <paramref name="bytes" /> aufzunehmen.</span><span class="sxs-lookup"><span data-stu-id="1e932-171"><paramref name="chars" /> is not large enough to contain the encoded form of <paramref name="bytes" />.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="1e932-172"><paramref name="bytes" /> enthält Daten, die nicht decodiert werden können, und <paramref name="encoding" /> ist für das Auslösen konfiguriert, wenn solche Daten erkannt werden.</span><span class="sxs-lookup"><span data-stu-id="1e932-172"><paramref name="bytes" /> contains data that cannot be decoded and <paramref name="encoding" /> is configured to throw when such data is seen.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public static long GetChars (this System.Text.Encoding encoding, ReadOnlySpan&lt;byte&gt;? bytes, System.Buffers.IBufferWriter&lt;char&gt; writer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 GetChars(class System.Text.Encoding encoding, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes, class System.Buffers.IBufferWriter`1&lt;char&gt; writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingExtensions.GetChars(System.Text.Encoding,System.ReadOnlySpan{System.Byte},System.Buffers.IBufferWriter{System.Char})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetChars (encoding As Encoding, bytes As ReadOnlySpan(Of Byte), writer As IBufferWriter(Of Char)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long GetChars(System::Text::Encoding ^ encoding, ReadOnlySpan&lt;System::Byte&gt; bytes, System::Buffers::IBufferWriter&lt;char&gt; ^ writer);" />
      <MemberSignature Language="F#" Value="static member GetChars : System.Text.Encoding * ReadOnlySpan&lt;byte&gt; * System.Buffers.IBufferWriter&lt;char&gt; -&gt; int64" Usage="System.Text.EncodingExtensions.GetChars (encoding, bytes, writer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoding" Type="System.Text.Encoding" RefType="this" />
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="writer" Type="System.Buffers.IBufferWriter&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="encoding"><span data-ttu-id="1e932-173">Die Codierung, die angibt, wie die Daten in <paramref name="bytes" /> decodiert werden sollen.</span><span class="sxs-lookup"><span data-stu-id="1e932-173">The encoding that represents how the data in <paramref name="bytes" /> should be decoded.</span></span></param>
        <param name="bytes"><span data-ttu-id="1e932-174">Der Bereich der zu decodierenden Bytes.</span><span class="sxs-lookup"><span data-stu-id="1e932-174">The span of bytes to decode.</span></span></param>
        <param name="writer"><span data-ttu-id="1e932-175">Der Puffer, in den die decodierten Zeichen geschrieben werden.</span><span class="sxs-lookup"><span data-stu-id="1e932-175">The buffer to which the decoded chars will be written.</span></span></param>
        <summary><span data-ttu-id="1e932-176">Decodiert die angegebene <see cref="T:System.ReadOnlySpan`1" /> in <see langword="char" />s unter Verwendung der angegebenen <see cref="T:System.Text.Encoding" /> und schreibt das Ergebnis in <paramref name="writer" />.</span><span class="sxs-lookup"><span data-stu-id="1e932-176">Decodes the specified <see cref="T:System.ReadOnlySpan`1" /> to <see langword="char" />s using the specified <see cref="T:System.Text.Encoding" /> and writes the result to <paramref name="writer" />.</span></span></summary>
        <returns><span data-ttu-id="1e932-177">Die Anzahl der in <paramref name="writer" /> geschriebenen Zeichen.</span><span class="sxs-lookup"><span data-stu-id="1e932-177">The number of chars written to <paramref name="writer" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="1e932-178"><paramref name="bytes" /> enthält Daten, die nicht decodiert werden können, und <paramref name="encoding" /> ist für das Auslösen konfiguriert, wenn solche Daten erkannt werden.</span><span class="sxs-lookup"><span data-stu-id="1e932-178"><paramref name="bytes" /> contains data that cannot be decoded and <paramref name="encoding" /> is configured to throw when such data is seen.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public static string GetString (this System.Text.Encoding encoding, ref System.Buffers.ReadOnlySequence&lt;byte&gt;? bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetString(class System.Text.Encoding encoding, [in]valuetype System.Buffers.ReadOnlySequence`1&lt;unsigned int8&gt;&amp; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingExtensions.GetString(System.Text.Encoding,System.Buffers.ReadOnlySequence{System.Byte}@)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetString (encoding As Encoding, ByRef bytes As ReadOnlySequence(Of Byte)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::String ^ GetString(System::Text::Encoding ^ encoding, System::Buffers::ReadOnlySequence&lt;System::Byte&gt; % bytes);" />
      <MemberSignature Language="F#" Value="static member GetString : System.Text.Encoding * ReadOnlySequence -&gt; string" Usage="System.Text.EncodingExtensions.GetString (encoding, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoding" Type="System.Text.Encoding" RefType="this" />
        <Parameter Name="bytes" Type="System.Buffers.ReadOnlySequence&lt;System.Byte&gt;" RefType="ref">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="encoding"><span data-ttu-id="1e932-179">Die Codierung, die angibt, wie die Daten in <paramref name="bytes" /> codiert werden.</span><span class="sxs-lookup"><span data-stu-id="1e932-179">The encoding that represents how the data in <paramref name="bytes" /> is encoded.</span></span></param>
        <param name="bytes"><span data-ttu-id="1e932-180">Die Sequenz, die in Zeichen decodiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="1e932-180">The sequence to decode into characters.</span></span></param>
        <summary><span data-ttu-id="1e932-181">Decodiert die angegebene <see cref="T:System.Buffers.ReadOnlySequence`1" /> unter Verwendung der angegebenen <see cref="T:System.Text.Encoding" /> in einen <see cref="T:System.String" />.</span><span class="sxs-lookup"><span data-stu-id="1e932-181">Decodes the specified <see cref="T:System.Buffers.ReadOnlySequence`1" /> into a <see cref="T:System.String" /> using the specified <see cref="T:System.Text.Encoding" />.</span></span></summary>
        <returns><span data-ttu-id="1e932-182">Ein <see cref="T:System.String" />, der den decodierten Inhalt von <paramref name="bytes" /> darstellt.</span><span class="sxs-lookup"><span data-stu-id="1e932-182">A <see cref="T:System.String" /> which represents the decoded contents of <paramref name="bytes" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="1e932-183"><paramref name="bytes" /> enthält Daten, die nicht decodiert werden können, und <paramref name="encoding" /> ist für das Auslösen konfiguriert, wenn solche Daten erkannt werden.</span><span class="sxs-lookup"><span data-stu-id="1e932-183"><paramref name="bytes" /> contains data that cannot be decoded and <paramref name="encoding" /> is configured to throw when such data is seen.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>

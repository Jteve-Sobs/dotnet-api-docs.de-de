<Type Name="EncodingProvider" FullName="System.Text.EncodingProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="adbb9708f99cbbdddb01067e89fd1bce5844d74b" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58698878" /></Metadata><TypeSignature Language="C#" Value="public abstract class EncodingProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit EncodingProvider extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.EncodingProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class EncodingProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class EncodingProvider abstract" />
  <TypeSignature Language="F#" Value="type EncodingProvider = class" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt die Basisklasse für einen Codierungsanbieter bereit, der Codierungen liefert, die auf einer bestimmten Plattform nicht verfügbar sind.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein codierungsanbieter bietet Codierungen, die andernfalls nicht auf eine bestimmte Zielplattform verfügbar sind.  
  
 .NET Framework auf dem Windows-Desktop unterstützt eine große Anzahl von Zeichen Codierungen und Codepages. Sie erhalten eine vollständige Liste der in .NET Framework verfügbaren Codierungen auf dem Windows-Desktop durch Aufrufen der <xref:System.Text.Encoding.GetEncodings%2A?displayProperty=nameWithType> Methode. .NET Core unterstützt standardmäßig auf der anderen Seite nur die folgenden Codierungen:  
  
-   ASCII (Codepage 20127), der zurückgegeben wird, durch die <xref:System.Text.Encoding.ASCII%2A?displayProperty=nameWithType> Eigenschaft.  
  
-   ISO-8859-1 (Codepage 28591).  
  
-   UTF-7 (Codepage 65000), der zurückgegeben wird, durch die <xref:System.Text.Encoding.UTF7%2A?displayProperty=nameWithType> Eigenschaft.  
  
-   UTF-8 (Codepage 65001), der zurückgegeben wird, durch die <xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType> Eigenschaft.  
  
-   UTF-16 und UTF-16LE (Codepage 1200), der zurückgegeben wird, durch die <xref:System.Text.Encoding.Unicode%2A> Eigenschaft.  
  
-   UTF-16BE (Codepage 1201), der durch den Aufruf instanziiert wird die <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> oder <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> Konstruktor mit einem `bigEndian` Wert `true`.  
  
-   UTF-32 und UTF-32LE (Codepage 12000), der zurückgegeben wird, durch die <xref:System.Text.Encoding.UTF32%2A?displayProperty=nameWithType> Eigenschaft.  
  
-   UTF-32BE (Codepage 12001), der durch den Aufruf instanziiert wird ein <xref:System.Text.UTF32Encoding> Konstruktor mit einem `bigEndian` Parameter und einen Wert von `true` im Aufruf Methode.  
  
 Ab .NET Framework 4.6 <xref:System.Text.EncodingProvider> ist die Basisklasse, die andernfalls nicht mehr verfügbar ist, die .NET Framework verfügbaren Codierungen. Dies umfasst die folgenden Schritte aus:  
  
1.  Definieren Sie eine Unterklasse von <xref:System.Text.EncodingProvider> , überschreibt die zwei abstrakte <xref:System.Text.EncodingProvider.GetEncoding%2A> Überladungen <xref:System.Text.EncodingProvider.GetEncoding%28System.Int32%29> und <xref:System.Text.EncodingProvider.GetEncoding%28System.String%29>. Diese Überladungen geben Folgendes zurück, die andernfalls nicht unterstützter Codierung nach Codepage-Bezeichner und Namen. Beachten Sie, die Sie auch auswählen können, um eine Codierung, wenn der Rückgabetyp der <xref:System.Text.EncodingProvider.GetEncoding%28System.Int32%29> Methode mit einem Argument von 0 aufgerufen wird.  
  
2.  Optional können Sie die virtuelle überschreiben <xref:System.Text.EncodingProvider.GetEncoding%28System.Int32%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29> und <xref:System.Text.EncodingProvider.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29> Methoden. In den meisten Fällen ist dies nicht erforderlich, da die Basisklasse eine Standardimplementierung bereitstellt.  
  
3.  Übergeben Sie die <xref:System.Text.EncodingProvider> -Instanz, auf die <xref:System.Text.Encoding.RegisterProvider%2A?displayProperty=nameWithType> Methode, um die vom Codierungen, die <xref:System.Text.EncodingProvider> Objekt für die common Language Runtime verfügbar.  
  
4.  Rufen Sie eine <xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType> -Überladung verwenden, um die Codierung abgerufen werden. Die <xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType> Methodenaufruf wird das entsprechende <xref:System.Text.EncodingProvider.GetEncoding%2A?displayProperty=nameWithType> zu bestimmen, ob er der angeforderten Codierung bereitstellen kann.  
  
 Der .NET Framework-Klassenbibliothek stellt eine statische Eigenschaft, <xref:System.Text.CodePagesEncodingProvider.Instance%2A?displayProperty=nameWithType>, zurückgibt, die eine <xref:System.Text.EncodingProvider> -Objekt, das den vollständigen Satz von Codierungen auf dem desktop .NET Framework-Klassenbibliothek zur Verfügung [!INCLUDE[net_core](~/includes/net-core-md.md)] Anwendungen. Sie können darüber hinaus Ableiten aus der <xref:System.Text.EncodingProvider> Klasse, um Ihre eigenen Codierungen verfügbar zu machen.  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Text.Encoding.GetEncoding(System.String)" />
    <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/system.text.codepagesencodingprovider.instance(v=vs.110).aspx">CodePagesEncodingProvider.Instance-Eigenschaft</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EncodingProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EncodingProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Text.EncodingProvider" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEncoding">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt eine Codierung zurück.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public abstract System.Text.Encoding GetEncoding (int codepage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoding GetEncoding(int32 codepage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncoding(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEncoding (codepage As Integer) As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Text::Encoding ^ GetEncoding(int codepage);" />
      <MemberSignature Language="F#" Value="abstract member GetEncoding : int -&gt; System.Text.Encoding" Usage="encodingProvider.GetEncoding codepage" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codepage" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="codepage">Der Codepagebezeichner der angeforderten Codierung.</param>
        <summary>Gibt die dem angegebenen Codepagebezeichner zugeordnete Codierung zurück.</summary>
        <returns>Die der angegebenen Codepage zugeordnete Codierung, oder <see langword="null" />, wenn <see cref="T:System.Text.EncodingProvider" /> keine gültige Codierung zurückgeben kann, die <paramref name="codepage" /> entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[ 

## Remarks

### <a name="notes-to-inheritors"></a>Hinweise für vererber

Sie überschreiben die [GetEncoding(Int32)](<xref:System.Text.EncodingProvider.GetEncoding(System.Int32)>) Methode, um die Codierung zurückzugeben oder Codierungen, die von unterstützt Ihre <xref:System.Text.EncodingProvider> Unterklasse. Wenn Benutzercode versucht, zum Abrufen einer Codierung durch Aufrufen der [GetEncoding(Int32)](<xref:System.Text.EncodingProvider.GetEncoding(System.Int32)>) -Methode, die Methode übergibt der `codepage` Bezeichner, der alle registrierten codierungsanbieter, bis eine gültige Codierung zurückgibt. Wenn none zurückgibt, eine gültige Codierung, die [GetEncoding(Int32)](<xref:System.Text.EncodingProvider.GetEncoding(System.Int32)>) Methode versucht, eine zwischengespeicherte Codierung abgerufen, deren Codepage-Bezeichner ist `codepage`. Aus diesem Grund Wenn `codepage` ist nicht der Codepagebezeichner der eine Codierung, die Sie unterstützen, sollte die Methode zurückgeben, `null`; es sollte nie eine Ausnahme auslösen.
        
Beachten Sie, die Sie auch auswählen können, um eine Standardcodepage zurückzugeben, wenn der Wert des der `codepage` -Argument 0 ist.

## <a name="notes-to-callers"></a>Hinweise für Aufrufer
        
Diese Methode wird aufgerufen, indem die [Encoding.GetEncoding(Int32)](<xref:System.Text.Encoding.GetEncoding(System.Int32)>) Methode. Sie sollten ihn nicht direkt aus Benutzercode aufrufen.

        ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Sie überschreiben die <see cref="M:System.Text.EncodingProvider.GetEncoding(System.Int32)" /> Methode, um die Codierung zurückzugeben oder Codierungen, die von unterstützt Ihre <see cref="T:System.Text.EncodingProvider" /> Unterklasse. Wenn Benutzercode versucht, zum Abrufen einer Codierung durch Aufrufen der <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" /> -Methode, die Methode übergibt der <paramref name="codepage" /> Bezeichner, der alle registrierten codierungsanbieter, bis eine gültige Codierung zurückgibt. Wenn none zurückgibt, eine gültige Codierung, die <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" /> Methode versucht, eine zwischengespeicherte Codierung abgerufen, deren Codepage-Bezeichner ist <paramref name="codepage" />. Aus diesem Grund Wenn <paramref name="codepage" /> ist nicht der Codepagebezeichner der eine Codierung, die Sie unterstützen, sollte die Methode zurückgeben, <see langword="null" />; es sollte nie eine Ausnahme auslösen.</para></block>
        <block subset="none" type="usage"><para>Diese Methode wird aufgerufen, indem die <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" /> Methode. Sie sollten ihn nicht direkt aus Benutzercode aufrufen.</para></block>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public abstract System.Text.Encoding GetEncoding (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoding GetEncoding(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncoding(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEncoding (name As String) As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Text::Encoding ^ GetEncoding(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetEncoding : string -&gt; System.Text.Encoding" Usage="encodingProvider.GetEncoding name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Der Name der angeforderten Codierung.</param>
        <summary>Gibt die Codierung mit dem angegebenen Namen zurück.</summary>
        <returns>Die dem angegebenen Namen zugeordnete Codierung, oder <see langword="null" />, wenn <see cref="T:System.Text.EncodingProvider" /> keine gültige Codierung zurückgeben kann, die <paramref name="name" /> entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[ 
      
## <a name="notes-to-inheritors"></a>Hinweise für vererber 
                  
Sie überschreiben die [GetEncoding(String)](<xref:System.Text.EncodingProvider.GetEncoding(System.String)>) Methode, um die Codierung zurückzugeben oder Codierungen, die von unterstützt Ihre <xref:System.Text.EncodingProvider> Unterklasse. Wenn Benutzercode versucht, zum Abrufen einer Codierung durch Aufrufen der [GetEncoding(String)](<xref:System.Text.EncodingProvider.GetEncoding(System.String)>) -Methode, die Methode übergibt der `name` Argument für jede registrierte codierungsanbieter, bis eine gültige Codierung zurückgibt. Wenn none zurückgibt, eine gültige Codierung, die [GetEncoding(String)](<xref:System.Text.EncodingProvider.GetEncoding(System.String)>) Methode versucht, eine zwischengespeicherte Codierung abgerufen, deren Namen gleich `name`. Aus diesem Grund Wenn `name` ist nicht der Name des eine Codierung, die Sie unterstützen, sollte die Methode zurückgeben, `null`. Ist der einzige Fall, in dem die Methode sollte eine Ausnahme auslösen, wenn `name` ist `null`.

## <a name="notes-to-callers"></a>Hinweise für Aufrufer

Diese Methode wird aufgerufen, indem die [Encoding.GetEncoding(String)](<xref:System.Text.Encoding.GetEncoding(System.String)>) Methode. Sie sollten ihn nicht direkt aus Benutzercode aufrufen.
        ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Sie überschreiben die <see cref="M:System.Text.EncodingProvider.GetEncoding(System.String)" /> Methode, um die Codierung zurückzugeben oder Codierungen, die von unterstützt Ihre <see cref="T:System.Text.EncodingProvider" /> Unterklasse. Wenn Benutzercode versucht, zum Abrufen einer Codierung durch Aufrufen der <see cref="M:System.Text.Encoding.GetEncoding(System.String)" /> -Methode, die Methode übergibt der <paramref name="name" /> Argument für jede registrierte codierungsanbieter, bis eine gültige Codierung zurückgibt. Wenn none zurückgibt, eine gültige Codierung, die <see cref="M:System.Text.Encoding.GetEncoding(System.String)" /> Methode versucht, eine zwischengespeicherte Codierung abgerufen, deren Namen gleich <paramref name="name" />. Aus diesem Grund Wenn <paramref name="name" /> ist nicht der Name des eine Codierung, die Sie unterstützen, sollte die Methode zurückgeben, <see langword="null" />. Ist der einzige Fall, in dem die Methode sollte eine Ausnahme auslösen, wenn <paramref name="name" /> ist <see langword="null" />.</para></block>
        <block subset="none" type="usage"><para>Diese Methode wird aufgerufen, indem die <see cref="M:System.Text.Encoding.GetEncoding(System.String)" /> Methode. Sie sollten ihn nicht direkt aus Benutzercode aufrufen.</para></block>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public virtual System.Text.Encoding GetEncoding (int codepage, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoding GetEncoding(int32 codepage, class System.Text.EncoderFallback encoderFallback, class System.Text.DecoderFallback decoderFallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Text::Encoding ^ GetEncoding(int codepage, System::Text::EncoderFallback ^ encoderFallback, System::Text::DecoderFallback ^ decoderFallback);" />
      <MemberSignature Language="F#" Value="abstract member GetEncoding : int * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding&#xA;override this.GetEncoding : int * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding" Usage="encodingProvider.GetEncoding (codepage, encoderFallback, decoderFallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codepage" Type="System.Int32" />
        <Parameter Name="encoderFallback" Type="System.Text.EncoderFallback" />
        <Parameter Name="decoderFallback" Type="System.Text.DecoderFallback" />
      </Parameters>
      <Docs>
        <param name="codepage">Der Codepagebezeichner der angeforderten Codierung.</param>
        <param name="encoderFallback">Ein Objekt, das ein Verfahren zur Fehlerbehandlung bereitstellt, wenn ein Zeichen nicht mit dieser Codierung codiert werden kann.</param>
        <param name="decoderFallback">Ein Objekt, das ein Verfahren zur Fehlerbehandlung bereitstellt, wenn eine Bytesequenz nicht mit dieser Codierung decodiert werden kann.</param>
        <summary>Gibt die dem angegebenen Codepagebezeichner zugeordnete Codierung zurück. Parameter geben einen Fehlerhandler für Zeichen an, die nicht codiert werden können, und für Bytefolgen, die nicht decodiert werden können.</summary>
        <returns>Die der angegebenen Codepage zugeordnete Codierung, oder <see langword="null" />, wenn <see cref="T:System.Text.EncodingProvider" /> keine gültige Codierung zurückgeben kann, die <paramref name="codepage" /> entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `encoderFallback` und `decoderFallback` Parameter sind Objekte, die definieren, die Fallbackstrategie verwendet, die ein Encoder ein Zeichen nicht werden, um eine Folge von Bytes konvertiert kann oder ein Decoder eine Folge von Bytes in ein Zeichen kann nicht konvertiert werden. .NET Framework bietet die folgenden fallbackmechanismen:  
  
-   Ausnahmefallback. Wenn die `encoderFallback` Argument ist eine Instanz der <xref:System.Text.EncoderExceptionFallback>, oder die `decoderExceptionFallback` Argument ist eine Instanz der <xref:System.Text.DecoderExceptionFallback>, die Codierung Methode löst eine Ausnahme aus, wenn Zeichen nicht codiert werden kann, und die Decodierung Methode löst eine Ausnahme aus, wenn ein Byte Tasksequenz kann nicht decodiert werden.  
  
-   Ersatzfallback. Wenn die `encoderFallback` Argument ist eine Instanz der <xref:System.Text.EncoderReplacementFallback>, oder die `decoderExceptionFallback` Argument ist eine Instanz der <xref:System.Text.DecoderReplacementFallback>, ersetzen Sie die Codierungs- und Decodierungsmethoden eine Ersatzzeichenfolge für Zeichen, die nicht codiert werden kann und Bytefolgen nicht möglich decodiert. Wenn Sie das Replacement fallback-Objekt durch Aufrufen des Standardkonstruktors instanziiert, das zu ersetzende Zeichen ist ein "?". Aufrufen der <xref:System.Text.EncoderReplacementFallback.%23ctor%28System.String%29?displayProperty=nameWithType> oder <xref:System.Text.DecoderReplacementFallback.%23ctor%28System.String%29?displayProperty=nameWithType> Konstruktor können Sie die Ersatzzeichenfolge angeben.  
  
-   Fallback mit ähnlichen Zeichen. Es sind ableitungen von den <xref:System.Text.EncoderFallback> oder <xref:System.Text.DecoderFallback> Klasse, um einen Fallback mit ähnlichen Ersatz-Mechanismus zu implementieren.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Da die Aufrufe dieser Methode die Implementierung der verwenden die <see cref="M:System.Text.EncodingProvider.GetEncoding(System.Int32)" /> -Methode, Sie müssen nicht überschreiben. Wenn Benutzercode versucht, zum Abrufen einer Codierung durch Aufrufen der <see cref="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> -Methode, die Methode übergibt der <paramref name="codepage" /> Bezeichner, der alle registrierten codierungsanbieter, bis eine gültige Codierung zurückgibt. Wenn none zurückgibt, eine gültige Codierung, die <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" /> Methode versucht, eine zwischengespeicherte Codierung abgerufen, deren Codepage-Bezeichner ist <paramref name="codepage" />. Aus diesem Grund Wenn Sie außer Kraft setzen möchten, führen Sie die <see cref="M:System.Text.EncodingProvider.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> -Methode überschreiben soll zurückgegeben werden <see langword="null" /> Wenn <paramref name="codepage" /> ist nicht der Codepagebezeichner der eine Codierung, dass Sie unterstützen; es sollte nie eine Ausnahme auslösen.</para></block>
        <block subset="none" type="usage"><para>Diese Methode wird aufgerufen, indem die <see cref="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> Methode. Sie sollten ihn nicht direkt aus Benutzercode aufrufen.</para></block>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public virtual System.Text.Encoding GetEncoding (string name, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoding GetEncoding(string name, class System.Text.EncoderFallback encoderFallback, class System.Text.DecoderFallback decoderFallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Text::Encoding ^ GetEncoding(System::String ^ name, System::Text::EncoderFallback ^ encoderFallback, System::Text::DecoderFallback ^ decoderFallback);" />
      <MemberSignature Language="F#" Value="abstract member GetEncoding : string * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding&#xA;override this.GetEncoding : string * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding" Usage="encodingProvider.GetEncoding (name, encoderFallback, decoderFallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="encoderFallback" Type="System.Text.EncoderFallback" />
        <Parameter Name="decoderFallback" Type="System.Text.DecoderFallback" />
      </Parameters>
      <Docs>
        <param name="name">Der Name der bevorzugten Codierung.</param>
        <param name="encoderFallback">Ein Objekt, das ein Verfahren zur Fehlerbehandlung bereitstellt, wenn ein Zeichen nicht mit dieser Codierung codiert werden kann.</param>
        <param name="decoderFallback">Ein Objekt, das ein Fehlerbehandlungsverfahren bereitstellt, wenn eine Bytefolge nicht mit der aktuellen Codierung decodiert werden kann.</param>
        <summary>Gibt die dem angegebenen Namen zugeordnete Codierung zurück. Parameter geben einen Fehlerhandler für Zeichen an, die nicht codiert werden können, und für Bytefolgen, die nicht decodiert werden können.</summary>
        <returns>Die dem angegebenen Namen zugeordnete Codierung, oder <see langword="null" />, wenn <see cref="T:System.Text.EncodingProvider" /> keine gültige Codierung zurückgeben kann, die <paramref name="name" /> entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `encoderFallback` und `decoderFallback` Parameter sind Objekte, die definieren, die Fallbackstrategie verwendet, die ein Encoder ein Zeichen nicht werden, um eine Folge von Bytes konvertiert kann oder ein Decoder eine Folge von Bytes in ein Zeichen kann nicht konvertiert werden. .NET Framework bietet die folgenden fallbackmechanismen:  
  
-   Ausnahmefallback. Wenn die `encoderFallback` Argument ist eine Instanz der <xref:System.Text.EncoderExceptionFallback>, oder die `decoderExceptionFallback` Argument ist eine Instanz der <xref:System.Text.DecoderExceptionFallback>, die Codierung Methode löst eine Ausnahme aus, wenn Zeichen nicht codiert werden kann, und die Decodierung Methode löst eine Ausnahme aus, wenn ein Byte Tasksequenz kann nicht decodiert werden.  
  
-   Ersatzfallback. Wenn die `encoderFallback` Argument ist eine Instanz der <xref:System.Text.EncoderReplacementFallback>, oder die `decoderExceptionFallback` Argument ist eine Instanz der <xref:System.Text.DecoderReplacementFallback>, ersetzen Sie die Codierungs- und Decodierungsmethoden eine Ersatzzeichenfolge für Zeichen, die nicht codiert werden kann und Bytefolgen nicht möglich decodiert. Wenn Sie das Replacement fallback-Objekt durch Aufrufen des Standardkonstruktors instanziiert, das zu ersetzende Zeichen ist ein "?". Aufrufen der <xref:System.Text.EncoderReplacementFallback.%23ctor%28System.String%29?displayProperty=nameWithType> oder <xref:System.Text.DecoderReplacementFallback.%23ctor%28System.String%29?displayProperty=nameWithType> Konstruktor können Sie die Ersatzzeichenfolge angeben.  
  
-   Fallback mit ähnlichen Zeichen. Es sind ableitungen von den <xref:System.Text.EncoderFallback> oder <xref:System.Text.DecoderFallback> Klasse, um einen Fallback mit ähnlichen Ersatz-Mechanismus zu implementieren.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Da die Aufrufe dieser Methode die Implementierung der verwenden die <see cref="M:System.Text.EncodingProvider.GetEncoding(System.String)" /> -Methode, Sie müssen nicht überschreiben. Wenn Benutzercode versucht, zum Abrufen einer Codierung durch Aufrufen der <see cref="M:System.Text.EncodingProvider.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> -Methode, die Methode übergibt der <paramref name="codepage" /> Bezeichner, der alle registrierten codierungsanbieter, bis eine gültige Codierung zurückgibt. Wenn none zurückgibt, eine gültige Codierung, die <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" /> Methode versucht, eine zwischengespeicherte Codierung abgerufen, deren Codepage-Bezeichner ist <paramref name="codepage" />. Aus diesem Grund Wenn Sie außer Kraft setzen möchten, führen Sie die <see cref="M:System.Text.EncodingProvider.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> -Methode überschreiben soll zurückgegeben werden <see langword="null" /> Wenn <paramref name="codepage" /> ist nicht der Codepagebezeichner der eine Codierung, dass Sie unterstützen; es sollte nie eine Ausnahme auslösen.</para></block>
        <block subset="none" type="usage"><para>Diese Methode wird aufgerufen, indem die <see cref="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> Methode. Sie sollten ihn nicht direkt aus Benutzercode aufrufen.</para></block>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      </Docs>
    </Member>
  </Members>
</Type>
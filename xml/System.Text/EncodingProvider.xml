<Type Name="EncodingProvider" FullName="System.Text.EncodingProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9095cc2041817c59bf18eceff1fa6a9a1d7eef88" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75118762" /></Metadata><TypeSignature Language="C#" Value="public abstract class EncodingProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit EncodingProvider extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.EncodingProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class EncodingProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class EncodingProvider abstract" />
  <TypeSignature Language="F#" Value="type EncodingProvider = class" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt die Basisklasse für einen Codierungsanbieter bereit, der Codierungen liefert, die auf einer bestimmten Plattform nicht verfügbar sind.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein Codierungs Anbieter liefert Codierungen, die anderweitig auf einer bestimmten Zielplattform nicht verfügbar sind.  
  
 Die .NET Framework auf dem Windows-Desktop unterstützt eine große Anzahl von Zeichen Codierungen und Codepages. Eine komplette Liste der Codierungen, die im .NET Framework auf dem Windows-Desktop verfügbar sind, erhalten Sie, indem Sie die <xref:System.Text.Encoding.GetEncodings%2A?displayProperty=nameWithType>-Methode aufrufen. .Net Core unterstützt dagegen standardmäßig nur die folgenden Codierungen:  
  
-   ASCII (Codepage 20127), das von der <xref:System.Text.Encoding.ASCII%2A?displayProperty=nameWithType>-Eigenschaft zurückgegeben wird.  
  
-   ISO-8859-1 (Codepage 28591).  
  
-   UTF-7 (Codepage 65000), die von der <xref:System.Text.Encoding.UTF7%2A?displayProperty=nameWithType>-Eigenschaft zurückgegeben wird.  
  
-   UTF-8 (Codepage 65001), das von der <xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType>-Eigenschaft zurückgegeben wird.  
  
-   UTF-16 und UTF-16LE (Codepage 1200), die von der <xref:System.Text.Encoding.Unicode%2A>-Eigenschaft zurückgegeben wird.  
  
-   UTF-16BE (Codepage 1201), die durch Aufrufen des <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> oder <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> Konstruktors mit dem `bigEndian` Wert `true`instanziiert wird.  
  
-   UTF-32 und UTF-32le (Codepage 12000), die von der <xref:System.Text.Encoding.UTF32%2A?displayProperty=nameWithType>-Eigenschaft zurückgegeben wird.  
  
-   UTF-32be (Codepage 12001), die durch Aufrufen eines <xref:System.Text.UTF32Encoding> Konstruktors mit einem `bigEndian`-Parameter instanziiert wird und im-Methodenaufruf den Wert `true` bereitstellt.  
  
 Beginnend mit dem .NET Framework 4,6 ist <xref:System.Text.EncodingProvider> die Basisklasse, die andernfalls nicht verfügbare Codierungen für die .NET Framework verfügbar macht. Dies umfasst die folgenden Schritte:  
  
1.  Definieren Sie eine Unterklasse von <xref:System.Text.EncodingProvider>, die die beiden abstrakten <xref:System.Text.EncodingProvider.GetEncoding%2A> Überladungen, <xref:System.Text.EncodingProvider.GetEncoding%28System.Int32%29> und <xref:System.Text.EncodingProvider.GetEncoding%28System.String%29>überschreibt. Diese über Ladungen geben die ansonsten nicht unterstützte Codierung durch den Code Page Bezeichner und den Namen zurück. Beachten Sie, dass Sie auch eine Standard Codierung zurückgeben können, wenn die <xref:System.Text.EncodingProvider.GetEncoding%28System.Int32%29>-Methode mit einem Argument von 0 aufgerufen wird.  
  
2.  Optional können Sie die Methoden des virtuellen <xref:System.Text.EncodingProvider.GetEncoding%28System.Int32%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29> und <xref:System.Text.EncodingProvider.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29> überschreiben. In den meisten Fällen ist dies nicht erforderlich, da die Basisklasse eine Standard Implementierung bereitstellt.  
  
3.  Übergeben Sie die <xref:System.Text.EncodingProvider>-Instanz an die <xref:System.Text.Encoding.RegisterProvider%2A?displayProperty=nameWithType>-Methode, um die vom <xref:System.Text.EncodingProvider>-Objekt bereitgestellten Codierungen für die Common Language Runtime verfügbar zu machen.  
  
4.  Rufen Sie eine <xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType> Überladung auf, um die Codierung abzurufen. Die <xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType>-Methode ruft die entsprechende <xref:System.Text.EncodingProvider.GetEncoding%2A?displayProperty=nameWithType> auf, um zu bestimmen, ob Sie die angeforderte Codierung bereitstellen kann.  
  
 Die .NET Framework-Klassenbibliothek stellt eine statische Eigenschaft (<xref:System.Text.CodePagesEncodingProvider.Instance%2A?displayProperty=nameWithType>) bereit, die ein <xref:System.Text.EncodingProvider> Objekt zurückgibt, das den vollständigen Satz von Codierungen, die auf der Desktop .NET Framework-Klassenbibliothek verfügbar sind, für [!INCLUDE[net_core](~/includes/net-core-md.md)] Anwendungen verfügbar macht. Außerdem können Sie von der <xref:System.Text.EncodingProvider>-Klasse ableiten, um Ihre eigenen Codierungen verfügbar zu machen.  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Text.Encoding.GetEncoding(System.String)" />
    <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/system.text.codepagesencodingprovider.instance(v=vs.110).aspx">Codepygesencodingprovider. Instance (Eigenschaft)</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EncodingProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EncodingProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Text.EncodingProvider" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEncoding">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt eine Codierung zurück.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public abstract System.Text.Encoding GetEncoding (int codepage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoding GetEncoding(int32 codepage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncoding(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEncoding (codepage As Integer) As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Text::Encoding ^ GetEncoding(int codepage);" />
      <MemberSignature Language="F#" Value="abstract member GetEncoding : int -&gt; System.Text.Encoding" Usage="encodingProvider.GetEncoding codepage" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codepage" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="codepage">Der Codepagebezeichner der angeforderten Codierung.</param>
        <summary>Gibt die dem angegebenen Codepagebezeichner zugeordnete Codierung zurück.</summary>
        <returns>Die der angegebenen Codepage zugeordnete Codierung, oder <see langword="null" />, wenn <see cref="T:System.Text.EncodingProvider" /> keine gültige Codierung zurückgeben kann, die <paramref name="codepage" /> entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[ 

## Remarks

### <a name="notes-to-inheritors"></a>Hinweise für Vererber

Sie überschreiben die [GetEncoding (Int32)](<xref:System.Text.EncodingProvider.GetEncoding(System.Int32)>) -Methode, um die von der <xref:System.Text.EncodingProvider> Unterklasse unterstützten Codierungen oder Codierungen zurückzugeben. Wenn Benutzercode versucht, eine Codierung durch Aufrufen der [GetEncoding (Int32)](<xref:System.Text.EncodingProvider.GetEncoding(System.Int32)>) -Methode abzurufen, übergibt die Methode den `codepage` Bezeichner an jeden registrierten Codierungs Anbieter, bis eine gültige Codierung zurückgegeben wird. Wenn None eine gültige Codierung zurückgibt, versucht die [GetEncoding (Int32)](<xref:System.Text.EncodingProvider.GetEncoding(System.Int32)>) -Methode, eine zwischengespeicherte Codierung abzurufen, deren Codepage-Bezeichner `codepage`ist. Wenn `codepage` nicht der Code Page Bezeichner einer Codierung ist, die Sie unterstützen, sollte die Methode daher `null`zurückgeben. Es sollte nie eine Ausnahme ausgelöst werden.
        
Beachten Sie, dass Sie auch eine Standard Codepage zurückgeben können, wenn der Wert des `codepage`-Arguments 0 (null) ist.

## <a name="notes-to-callers"></a>Hinweise zu Aufrufern
        
Diese Methode wird von der [Encoding. GetEncoding (Int32)](<xref:System.Text.Encoding.GetEncoding(System.Int32)>) -Methode aufgerufen. Sie sollten Sie nicht direkt aus Benutzercode abrufen.

        ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Sie überschreiben die <see cref="M:System.Text.EncodingProvider.GetEncoding(System.Int32)" />-Methode, um die von ihrer <see cref="T:System.Text.EncodingProvider" />-Unterklasse unterstützten Codierungen oder Codierungen zurückzugeben. Wenn Benutzercode versucht, eine Codierung durch Aufrufen der <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />-Methode abzurufen, übergibt die Methode den <paramref name="codepage" /> Bezeichner an jeden registrierten Codierungs Anbieter, bis eine gültige Codierung zurückgegeben wird. Wenn keine gültige Codierung zurückgibt, versucht die <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" /> Methode, eine zwischengespeicherte Codierung abzurufen, deren Codepage-Bezeichner <paramref name="codepage" />ist. Wenn <paramref name="codepage" /> nicht der Code Page Bezeichner einer Codierung ist, die Sie unterstützen, sollte die Methode daher <see langword="null" />zurückgeben. Es sollte nie eine Ausnahme ausgelöst werden.</para></block>
        <block subset="none" type="usage"><para>Diese Methode wird von der <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />-Methode aufgerufen. Sie sollten Sie nicht direkt aus Benutzercode abrufen.</para></block>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public abstract System.Text.Encoding GetEncoding (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoding GetEncoding(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncoding(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEncoding (name As String) As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Text::Encoding ^ GetEncoding(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetEncoding : string -&gt; System.Text.Encoding" Usage="encodingProvider.GetEncoding name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Der Name der angeforderten Codierung.</param>
        <summary>Gibt die Codierung mit dem angegebenen Namen zurück.</summary>
        <returns>Die zum angegebenen Namen zugeordnete Codierung, oder <see langword="null" />, wenn dieser <see cref="T:System.Text.EncodingProvider" /> keine gültige Codierung liefern kann, die <paramref name="name" /> entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[ 
      
## <a name="notes-to-inheritors"></a>Hinweise für Vererber 
                  
Sie überschreiben die [GetEncoding (String)](<xref:System.Text.EncodingProvider.GetEncoding(System.String)>) -Methode, um die von ihrer <xref:System.Text.EncodingProvider>-Unterklasse unterstützten Codierungen oder Codierungen zurückzugeben. Wenn Benutzercode versucht, eine Codierung durch Aufrufen der [GetEncoding (String)](<xref:System.Text.EncodingProvider.GetEncoding(System.String)>) -Methode abzurufen, übergibt die Methode das `name`-Argument an jeden registrierten Codierungs Anbieter, bis eine gültige Codierung zurückgegeben wird. Wenn None eine gültige Codierung zurückgibt, versucht die [GetEncoding (String)](<xref:System.Text.EncodingProvider.GetEncoding(System.String)>) -Methode, eine zwischengespeicherte Codierung abzurufen, deren Name `name`ist. Wenn `name` nicht der Name einer Codierung ist, die Sie unterstützen, sollte die Methode daher `null`zurückgeben. Der einzige Fall, in dem die Methode eine Ausnahme auslösen sollte, ist, wenn `name` `null`ist.

## <a name="notes-to-callers"></a>Hinweise zu Aufrufern

Diese Methode wird von der [Encoding. GetEncoding (String)](<xref:System.Text.Encoding.GetEncoding(System.String)>) -Methode aufgerufen. Sie sollten Sie nicht direkt aus Benutzercode abrufen.
        ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Sie überschreiben die <see cref="M:System.Text.EncodingProvider.GetEncoding(System.String)" />-Methode, um die von ihrer <see cref="T:System.Text.EncodingProvider" />-Unterklasse unterstützten Codierungen oder Codierungen zurückzugeben. Wenn Benutzercode versucht, eine Codierung durch Aufrufen der <see cref="M:System.Text.Encoding.GetEncoding(System.String)" />-Methode abzurufen, übergibt die Methode das <paramref name="name" />-Argument an jeden registrierten Codierungs Anbieter, bis eine gültige Codierung zurückgegeben wird. Wenn None eine gültige Codierung zurückgibt, versucht die <see cref="M:System.Text.Encoding.GetEncoding(System.String)" /> Methode, eine zwischengespeicherte Codierung abzurufen, deren Name <paramref name="name" />ist. Wenn <paramref name="name" /> nicht der Name einer Codierung ist, die Sie unterstützen, sollte die Methode daher <see langword="null" />zurückgeben. Der einzige Fall, in dem die Methode eine Ausnahme auslösen sollte, ist, wenn <paramref name="name" /> <see langword="null" />ist.</para></block>
        <block subset="none" type="usage"><para>Diese Methode wird von der <see cref="M:System.Text.Encoding.GetEncoding(System.String)" />-Methode aufgerufen. Sie sollten Sie nicht direkt aus Benutzercode abrufen.</para></block>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public virtual System.Text.Encoding GetEncoding (int codepage, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoding GetEncoding(int32 codepage, class System.Text.EncoderFallback encoderFallback, class System.Text.DecoderFallback decoderFallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Text::Encoding ^ GetEncoding(int codepage, System::Text::EncoderFallback ^ encoderFallback, System::Text::DecoderFallback ^ decoderFallback);" />
      <MemberSignature Language="F#" Value="abstract member GetEncoding : int * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding&#xA;override this.GetEncoding : int * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding" Usage="encodingProvider.GetEncoding (codepage, encoderFallback, decoderFallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codepage" Type="System.Int32" />
        <Parameter Name="encoderFallback" Type="System.Text.EncoderFallback" />
        <Parameter Name="decoderFallback" Type="System.Text.DecoderFallback" />
      </Parameters>
      <Docs>
        <param name="codepage">Der Codepagebezeichner der angeforderten Codierung.</param>
        <param name="encoderFallback">Ein Objekt, das ein Fehlerbehandlungsverfahren bereitstellt, wenn ein Zeichen nicht mit dieser Codierung codiert werden kann.</param>
        <param name="decoderFallback">Ein Objekt, das ein Fehlerbehandlungsverfahren bereitstellt, wenn eine Bytefolge nicht mit dieser Codierung decodiert werden kann.</param>
        <summary>Gibt die dem angegebenen Codepagebezeichner zugeordnete Codierung zurück. Parameter geben einen Fehlerhandler für Zeichen an, die nicht codiert werden können, und für Bytefolgen, die nicht decodiert werden können.</summary>
        <returns>Die der angegebenen Codepage zugeordnete Codierung, oder <see langword="null" />, wenn <see cref="T:System.Text.EncodingProvider" /> keine gültige Codierung zurückgeben kann, die <paramref name="codepage" /> entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Parameter "`encoderFallback`" und "`decoderFallback`" sind Objekte, die die Fall Back Strategie definieren, die verwendet wird, wenn ein Encoder ein Zeichen nicht in eine Bytefolge konvertieren kann oder ein Decoder eine Bytefolge nicht in ein Zeichen konvertieren kann. Der .NET Framework stellt die folgenden Fall Back Mechanismen bereit:  
  
-   Ausnahmefall Back. Wenn das `encoderFallback`-Argument eine Instanz von <xref:System.Text.EncoderExceptionFallback>ist, oder wenn das `decoderExceptionFallback`-Argument eine Instanz von <xref:System.Text.DecoderExceptionFallback>ist, löst die Codierungsmethode eine Ausnahme aus, wenn Zeichen nicht codiert werden können, und die Decodierungs Methode löst eine Ausnahme aus, wenn eine Byte Sequenz nicht decodiert werden kann.  
  
-   Ersatz Fall Back. Wenn das `encoderFallback`-Argument eine Instanz von <xref:System.Text.EncoderReplacementFallback>ist oder das `decoderExceptionFallback`-Argument eine Instanz von <xref:System.Text.DecoderReplacementFallback>ist, ersetzen die Codierungs-und Decodierungs Methoden eine Ersatz Zeichenfolge für Zeichen, die nicht codiert werden können, und Byte Sequenzen können nicht decodiert werden. Wenn Sie das Ersatz Fall Back Objekt instanziiert haben, indem Sie den Parameter losen Konstruktor aufrufen, ist das Ersetzungs Zeichen ein "?". Wenn Sie den <xref:System.Text.EncoderReplacementFallback.%23ctor%28System.String%29?displayProperty=nameWithType>-oder <xref:System.Text.DecoderReplacementFallback.%23ctor%28System.String%29?displayProperty=nameWithType>-Konstruktor aufzurufen, können Sie die Ersetzungs Zeichenfolge angeben.  
  
-   Fallback mit der optimalen Anpassung. Sie können von der <xref:System.Text.EncoderFallback>-oder <xref:System.Text.DecoderFallback>-Klasse ableiten, um einen Austauschmechanismus mit einer optimalen Anpassung zu implementieren.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Da Aufrufe dieser Methode die Implementierung der <see cref="M:System.Text.EncodingProvider.GetEncoding(System.Int32)" />-Methode verwenden, müssen Sie Sie nicht überschreiben. Wenn Benutzercode versucht, eine Codierung durch Aufrufen der <see cref="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" />-Methode abzurufen, übergibt die Methode den <paramref name="codepage" /> Bezeichner an jeden registrierten Codierungs Anbieter, bis eine gültige Codierung zurückgegeben wird. Wenn keine gültige Codierung zurückgibt, versucht die <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" /> Methode, eine zwischengespeicherte Codierung abzurufen, deren Codepage-Bezeichner <paramref name="codepage" />ist. Wenn Sie die <see cref="M:System.Text.EncodingProvider.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" />-Methode außer Kraft setzen, sollte Ihre außer Kraft Setzung <see langword="null" /> zurückgeben, wenn <paramref name="codepage" /> nicht der Code Page Bezeichner einer von Ihnen unterstützten Codierung ist. Es sollte nie eine Ausnahme ausgelöst werden.</para></block>
        <block subset="none" type="usage"><para>Diese Methode wird von der <see cref="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" />-Methode aufgerufen. Sie sollten Sie nicht direkt aus Benutzercode abrufen.</para></block>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public virtual System.Text.Encoding GetEncoding (string name, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoding GetEncoding(string name, class System.Text.EncoderFallback encoderFallback, class System.Text.DecoderFallback decoderFallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Text::Encoding ^ GetEncoding(System::String ^ name, System::Text::EncoderFallback ^ encoderFallback, System::Text::DecoderFallback ^ decoderFallback);" />
      <MemberSignature Language="F#" Value="abstract member GetEncoding : string * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding&#xA;override this.GetEncoding : string * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding" Usage="encodingProvider.GetEncoding (name, encoderFallback, decoderFallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="encoderFallback" Type="System.Text.EncoderFallback" />
        <Parameter Name="decoderFallback" Type="System.Text.DecoderFallback" />
      </Parameters>
      <Docs>
        <param name="name">Der Name der bevorzugten Codierung.</param>
        <param name="encoderFallback">Ein Objekt, das ein Fehlerbehandlungsverfahren bereitstellt, wenn ein Zeichen nicht mit dieser Codierung codiert werden kann.</param>
        <param name="decoderFallback">Ein Objekt, das ein Fehlerbehandlungsverfahren bereitstellt, wenn eine Bytefolge nicht mit der aktuellen Codierung decodiert werden kann.</param>
        <summary>Gibt die Codierung mit dem angegebenen Namen zurück. Parameter geben einen Fehlerhandler für Zeichen an, die nicht codiert werden können, und für Bytefolgen, die nicht decodiert werden können.</summary>
        <returns>Die zum angegebenen Namen zugeordnete Codierung, oder <see langword="null" />, wenn dieser <see cref="T:System.Text.EncodingProvider" /> keine gültige Codierung liefern kann, die <paramref name="name" /> entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Parameter "`encoderFallback`" und "`decoderFallback`" sind Objekte, die die Fall Back Strategie definieren, die verwendet wird, wenn ein Encoder ein Zeichen nicht in eine Bytefolge konvertieren kann oder ein Decoder eine Bytefolge nicht in ein Zeichen konvertieren kann. Der .NET Framework stellt die folgenden Fall Back Mechanismen bereit:  
  
-   Ausnahmefall Back. Wenn das `encoderFallback`-Argument eine Instanz von <xref:System.Text.EncoderExceptionFallback>ist, oder wenn das `decoderExceptionFallback`-Argument eine Instanz von <xref:System.Text.DecoderExceptionFallback>ist, löst die Codierungsmethode eine Ausnahme aus, wenn Zeichen nicht codiert werden können, und die Decodierungs Methode löst eine Ausnahme aus, wenn eine Byte Sequenz nicht decodiert werden kann.  
  
-   Ersatz Fall Back. Wenn das `encoderFallback`-Argument eine Instanz von <xref:System.Text.EncoderReplacementFallback>ist oder das `decoderExceptionFallback`-Argument eine Instanz von <xref:System.Text.DecoderReplacementFallback>ist, ersetzen die Codierungs-und Decodierungs Methoden eine Ersatz Zeichenfolge für Zeichen, die nicht codiert werden können, und Byte Sequenzen können nicht decodiert werden. Wenn Sie das Ersatz Fall Back Objekt instanziiert haben, indem Sie den Parameter losen Konstruktor aufrufen, ist das Ersetzungs Zeichen ein "?". Wenn Sie den <xref:System.Text.EncoderReplacementFallback.%23ctor%28System.String%29?displayProperty=nameWithType>-oder <xref:System.Text.DecoderReplacementFallback.%23ctor%28System.String%29?displayProperty=nameWithType>-Konstruktor aufzurufen, können Sie die Ersetzungs Zeichenfolge angeben.  
  
-   Fallback mit der optimalen Anpassung. Sie können von der <xref:System.Text.EncoderFallback>-oder <xref:System.Text.DecoderFallback>-Klasse ableiten, um einen Austauschmechanismus mit einer optimalen Anpassung zu implementieren.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Da Aufrufe dieser Methode die Implementierung der <see cref="M:System.Text.EncodingProvider.GetEncoding(System.String)" />-Methode verwenden, müssen Sie Sie nicht überschreiben. Wenn Benutzercode versucht, eine Codierung durch Aufrufen der <see cref="M:System.Text.EncodingProvider.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" />-Methode abzurufen, übergibt die Methode den <paramref name="codepage" /> Bezeichner an jeden registrierten Codierungs Anbieter, bis eine gültige Codierung zurückgegeben wird. Wenn keine gültige Codierung zurückgibt, versucht die <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" /> Methode, eine zwischengespeicherte Codierung abzurufen, deren Codepage-Bezeichner <paramref name="codepage" />ist. Wenn Sie die <see cref="M:System.Text.EncodingProvider.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" />-Methode außer Kraft setzen, sollte Ihre außer Kraft Setzung <see langword="null" /> zurückgeben, wenn <paramref name="codepage" /> nicht der Code Page Bezeichner einer von Ihnen unterstützten Codierung ist. Es sollte nie eine Ausnahme ausgelöst werden.</para></block>
        <block subset="none" type="usage"><para>Diese Methode wird von der <see cref="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" />-Methode aufgerufen. Sie sollten Sie nicht direkt aus Benutzercode abrufen.</para></block>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      </Docs>
    </Member>
  </Members>
</Type>

<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Decoder.xml" source-language="en-US" target-language="de-DE">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5af988a5d852dff603b2e4e888be96288515f405e.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">af988a5d852dff603b2e4e888be96288515f405e</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Text.Decoder">
          <source>Converts a sequence of encoded bytes into a set of characters.</source>
          <target state="translated">Konvertiert eine Bytefolge in einen codierten Zeichensatz.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Decoder">
          <source>To obtain an instance of an implementation of the <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> class, the application should use the <ph id="ph2">&lt;xref:System.Text.Encoding.GetDecoder%2A&gt;</ph> method of an <ph id="ph3">&lt;xref:System.Text.Encoding&gt;</ph> implementation.</source>
          <target state="translated">Zum Abrufen einer Instanz einer Implementierung von der <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> -Klasse, die Anwendung sollte verwenden die <ph id="ph2">&lt;xref:System.Text.Encoding.GetDecoder%2A&gt;</ph> Methode eine <ph id="ph3">&lt;xref:System.Text.Encoding&gt;</ph> Implementierung.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Decoder">
          <source>The <ph id="ph1">&lt;xref:System.Text.Decoder.GetCharCount%2A&gt;</ph> method determines how many characters result in decoding a sequence of bytes, and the <ph id="ph2">&lt;xref:System.Text.Decoder.GetChars%2A&gt;</ph> method performs the actual decoding.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Text.Decoder.GetCharCount%2A&gt;</ph> -Methode bestimmt, wie viele Zeichen zum Decodieren einer Bytefolge und die <ph id="ph2">&lt;xref:System.Text.Decoder.GetChars%2A&gt;</ph> Methode führt die tatsächlichen Decodierung aus.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Decoder">
          <source>There are several versions of both of these methods available in the <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> class.</source>
          <target state="translated">Es sind mehrere Versionen der beiden Methoden zur Verfügung, in der <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> Klasse.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Decoder">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Weitere Informationen finden Sie unter <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Decoder">
          <source>A <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> object maintains state information between successive calls to <ph id="ph2">`GetChars`</ph> or <ph id="ph3">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph> methods so it can correctly decode byte sequences that span blocks.</source>
          <target state="translated">Ein <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> -Objekt verwaltet Zustandsinformationen zwischen aufeinander folgenden Aufrufen <ph id="ph2">`GetChars`</ph> oder <ph id="ph3">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph> Methoden, damit Bytesequenzen, die Blöcke umfassen, ordnungsgemäß decodiert werden können.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Decoder">
          <source>The <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> behält nachfolgende Bytes am Ende der Datenblöcke und die nachfolgenden Bytes im nächste Decodierungsvorgang verwendet.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Decoder">
          <source>Therefore, <ph id="ph1">&lt;xref:System.Text.Encoding.GetDecoder%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.Encoding.GetEncoder%2A&gt;</ph> are useful for network transmission and file operations because those operations often deal with blocks of data instead of a complete data stream.</source>
          <target state="translated">Aus diesem Grund <ph id="ph1">&lt;xref:System.Text.Encoding.GetDecoder%2A&gt;</ph> und <ph id="ph2">&lt;xref:System.Text.Encoding.GetEncoder%2A&gt;</ph> sind für die Übertragung und Datei Netzwerkvorgänge hilfreich, da diese Vorgänge Datenblöcke anstelle einer vollständigen Datenstrom oft verarbeiten müssen.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Decoder">
          <source>When the application is done with a stream of data, it should make sure that the state information is flushed by setting the <ph id="ph1">`flush`</ph> parameter to <ph id="ph2">`true`</ph> in the appropriate method call.</source>
          <target state="translated">Wenn die Anwendung einen Strom von Daten abgeschlossen ist, sollten stellen Sie sicher, dass die Zustandsinformationen, durch Festlegen geleert wird der <ph id="ph1">`flush`</ph> Parameter <ph id="ph2">`true`</ph> im Aufruf geeigneten Methode.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Decoder">
          <source>If an exception occurs or if the application switches streams, it should call <ph id="ph1">&lt;xref:System.Text.Decoder.Reset%2A&gt;</ph> to clear the internal state of the <ph id="ph2">`Decoder`</ph> object.</source>
          <target state="translated">Wenn eine Ausnahme auftritt oder wenn die Anwendung Streams wechselt, sollten Sie aufrufen <ph id="ph1">&lt;xref:System.Text.Decoder.Reset%2A&gt;</ph> So löschen Sie den internen Status der <ph id="ph2">`Decoder`</ph> Objekt.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Decoder">
          <source>Version Considerations</source>
          <target state="translated">Version-Überlegungen</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Decoder">
          <source>A <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> or <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> object can be serialized during a conversion operation.</source>
          <target state="translated">Ein <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> oder <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> Objekt serialisiert werden kann, während eine Konvertierungsoperation.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Decoder">
          <source>The state of the object is retained if it is deserialized in the same version of the .NET Framework, but lost if it is deserialized in another version.</source>
          <target state="translated">Der Status des Objekts wird beibehalten, wenn es in der gleichen Version von .NET Framework deserialisiert wird, aber verloren gehen, wenn es in einer anderen Version deserialisiert wird.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Decoder">
          <source>The following example demonstrates the use of a <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> to convert two different byte arrays into a character array.</source>
          <target state="translated">Das folgende Beispiel veranschaulicht die Verwendung von einem <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> , zwei unterschiedliche Bytearrays in ein Zeichenarray zu konvertieren.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Decoder">
          <source>One of the character's bytes spans the arrays.</source>
          <target state="translated">Keines der Zeichen Bytes umfasst die Arrays.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Decoder">
          <source>This is similar to what a <ph id="ph1">&lt;xref:System.IO.StreamReader&gt;</ph> object does internally when reading a stream.</source>
          <target state="translated">Dies ist ähnlich einer <ph id="ph1">&lt;xref:System.IO.StreamReader&gt;</ph> Objekt verweist, das intern beim Lesen eines Streams.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Decoder">
          <source>When your application inherits from this class, it must override all the members.</source>
          <target state="translated">Wenn Ihre Anwendung von dieser Klasse erbt, müssen sie alle Member überschreiben.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Text.Decoder" /&gt;</ph> class.</source>
          <target state="translated">Initialisiert eine neue Instanz der <ph id="ph1">&lt;see cref="T:System.Text.Decoder" /&gt;</ph>-Klasse.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.#ctor">
          <source>To obtain an instance of an implementation of this class, the application should use the <ph id="ph1">&lt;xref:System.Text.Encoding.GetDecoder%2A&gt;</ph> method of a <ph id="ph2">&lt;xref:System.Text.Encoding&gt;</ph> implementation.</source>
          <target state="translated">Um eine Instanz einer Implementierung dieser Klasse zu erhalten, sollte die Anwendung verwenden die <ph id="ph1">&lt;xref:System.Text.Encoding.GetDecoder%2A&gt;</ph> Methode von einer <ph id="ph2">&lt;xref:System.Text.Encoding&gt;</ph> Implementierung.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.#ctor">
          <source>The following example demonstrates two techniques for initializing a new <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> instance.</source>
          <target state="translated">Im folgende Beispiel veranschaulicht zwei Techniken zum Initialisieren einer neuen <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> Instanz.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="T:System.Text.Decoder">
          <source>Converts an encoded byte sequence to a string or array of characters.</source>
          <target state="translated">Konvertiert eine codierte Bytefolge in eine Zeichenfolge oder ein Zeichenarray.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>The address of a buffer that contains the byte sequences to convert.</source>
          <target state="translated">Die Adresse eines Puffers, der die zu konvertierenden Bytefolgen enthält.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>The number of bytes in <bpt id="p1">&lt;c&gt;</bpt>bytes<ept id="p1">&lt;/c&gt;</ept> to convert.</source>
          <target state="translated">Die Anzahl der zu konvertierenden Bytes in <bpt id="p1">&lt;c&gt;</bpt>bytes<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>The address of a buffer to store the converted characters.</source>
          <target state="translated">Die Adresse eines Puffers zum Speichern der konvertierten Zeichen.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>The maximum number of characters in <bpt id="p1">&lt;c&gt;</bpt>chars<ept id="p1">&lt;/c&gt;</ept> to use in the conversion.</source>
          <target state="translated">Die maximale Anzahl von Zeichen in <bpt id="p1">&lt;c&gt;</bpt>chars<ept id="p1">&lt;/c&gt;</ept>, die bei der Konvertierung verwendet wird.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate no further data is to be converted; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, um anzugeben, dass keine weiteren Daten konvertiert werden; andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>When this method returns, contains the number of bytes that were produced by the conversion.</source>
          <target state="translated">In der Rückgabe dieser Methode ist die Anzahl der Bytes enthalten, die von der Konvertierung erzeugt wurden.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>This parameter is passed uninitialized.</source>
          <target state="translated">Dieser Parameter wird nicht initialisiert übergeben.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>When this method returns, contains the number of characters from <bpt id="p1">&lt;c&gt;</bpt>chars<ept id="p1">&lt;/c&gt;</ept> that were used in the conversion.</source>
          <target state="translated">In der Rückgabe dieser Methode ist die Anzahl der Zeichen aus <bpt id="p1">&lt;c&gt;</bpt>chars<ept id="p1">&lt;/c&gt;</ept> enthalten, die bei der Konvertierung verwendet wurden.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>This parameter is passed uninitialized.</source>
          <target state="translated">Dieser Parameter wird nicht initialisiert übergeben.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>When this method returns, contains <ph id="ph1">&lt;see langword="true" /&gt;</ph> if all the characters specified by <bpt id="p1">&lt;c&gt;</bpt>byteCount<ept id="p1">&lt;/c&gt;</ept> were converted; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">In der Rückgabe dieser Methode ist <ph id="ph1">&lt;see langword="true" /&gt;</ph> enthalten, wenn alle von <bpt id="p1">&lt;c&gt;</bpt>byteCount<ept id="p1">&lt;/c&gt;</ept> angegebenen Zeichen konvertiert wurden; andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>This parameter is passed uninitialized.</source>
          <target state="translated">Dieser Parameter wird nicht initialisiert übergeben.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>Converts a buffer of encoded bytes to UTF-16 encoded characters and stores the result in another buffer.</source>
          <target state="translated">Konvertiert einen Puffer codierter Bytes in UTF-16-codierte Zeichen und speichert das Ergebnis in einem anderen Puffer.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>Remember that the <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> object saves state between calls to <ph id="ph2">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph>.</source>
          <target state="translated">Beachten Sie, dass die <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> -Objekt speichert den Zustand zwischen Aufrufen von <ph id="ph2">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>When the application is done with a stream of data, it should set the <ph id="ph1">`flush`</ph> parameter to <ph id="ph2">`true`</ph> to make sure that the state information is flushed.</source>
          <target state="translated">Wenn die Anwendung einen Strom von Daten abgeschlossen ist, legen sie die <ph id="ph1">`flush`</ph> Parameter <ph id="ph2">`true`</ph> um sicherzustellen, dass die Zustandsinformationen geleert wird.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>With this setting, the decoder ignores invalid bytes at the end of the data block and clears the internal buffer.</source>
          <target state="translated">Mit dieser Einstellung wird vom Decoder ungültige Bytes am Ende des Datenblocks ignoriert und löscht den internen Puffer.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>Any remaining processed data that is part of a logical unit, such as the high surrogate of a surrogate pair, is converted according to the current fallback settings.</source>
          <target state="translated">Alle verbleibenden verarbeiteten Daten, die Teil einer logischen Einheit, z. B. das hohe Ersatzzeichen eines Ersatzzeichenpaars werden gemäß der aktuellen fallbackeinstellungen konvertiert.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>The <ph id="ph1">`Convert`</ph> method is designed to be used in a loop to decode an arbitrary amount of input, such as data read from a file or stream.</source>
          <target state="translated">Die <ph id="ph1">`Convert`</ph> -Methode entwickelt, um in einer Schleife verwendet werden, um zu eine beliebige Anzahl von Eingaben zu decodierende z. B. aus einer Datei oder einem Stream gelesenen Daten.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>It stores the output of the decoding operation in a fixed-size buffer.</source>
          <target state="translated">Sie speichert die Ausgabe der Decodierungsvorgang in einen Puffer mit fester Größe.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source><ph id="ph1">&lt;xref:System.Text.Decoder.GetChars%2A&gt;</ph> will throw an exception if the output buffer isn't large enough, but <ph id="ph2">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph> will fill as much space as possible and return the bytes read and chars written.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.Decoder.GetChars%2A&gt;</ph> löst eine Ausnahme aus, wenn die Ausgabepuffer nicht groß genug ist, aber <ph id="ph2">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph> wird so viel Speicherplatz wie möglich zu füllen und die gelesenen Bytes und geschriebenen Zeichen zurück.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>Also see the <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType&gt;</ph> topic for more comments.</source>
          <target state="translated">Siehe auch die <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType&gt;</ph> Thema weitere Kommentare.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>The <ph id="ph1">`completed`</ph> output parameter indicates whether all the data in the input buffer was converted and stored in the output buffer.</source>
          <target state="translated">Die <ph id="ph1">`completed`</ph> Output-Parameter gibt an, ob alle Daten im Eingabepuffer konvertiert und im Ausgabepuffer gespeichert wurden.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>This parameter is set to <ph id="ph1">`false`</ph> if the number of bytes specified by the <ph id="ph2">`byteCount`</ph> parameter cannot be converted without exceeding the number of characters specified by the <ph id="ph3">`charCount`</ph> parameter.</source>
          <target state="translated">Dieser Parameter auf festgelegt ist <ph id="ph1">`false`</ph> Wenn die Anzahl der Bytes, wird angegeben die <ph id="ph2">`byteCount`</ph> Parameter kann nicht konvertiert werden, ohne dass die Anzahl der Zeichen, die gemäß der <ph id="ph3">`charCount`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>In that situation, the application should use the contents of the output buffer or provide a new output buffer, increment the <ph id="ph1">`bytes`</ph> parameter by the number of bytes specified by the <ph id="ph2">`bytesUsed`</ph> parameter, then call the <ph id="ph3">`Convert`</ph> method again to process the remaining input.</source>
          <target state="translated">In diesem Fall sollte die Anwendung verwenden Sie den Inhalt des Ausgabepuffers oder geben Sie einen neuen Ausgabepuffer Inkrement der <ph id="ph1">`bytes`</ph> Parameter, um die Anzahl der Bytes, die gemäß der <ph id="ph2">`bytesUsed`</ph> Parameter, rufen Sie anschließend die <ph id="ph3">`Convert`</ph> -Methode erneut auf die verbleibenden Eingabe zu verarbeiten.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>The <ph id="ph1">`completed`</ph> parameter can also be set to <ph id="ph2">`false`</ph>, even though the <ph id="ph3">`bytesUsed`</ph> and <ph id="ph4">`byteCount`</ph> parameters are equal.</source>
          <target state="translated">Die <ph id="ph1">`completed`</ph> Parameter kann auch festgelegt werden, um <ph id="ph2">`false`</ph>, obwohl die <ph id="ph3">`bytesUsed`</ph> und <ph id="ph4">`byteCount`</ph> Parameter gleich sind.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>This situation occurs if there is still data in the <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> object that has not been stored in the <ph id="ph2">`bytes`</ph> buffer.</source>
          <target state="translated">Diese Situation tritt auf, wenn es weiterhin Daten in der <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> -Objekt, das nicht im gespeichert wurden die <ph id="ph2">`bytes`</ph> Puffer.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> or <ph id="ph2">&lt;paramref name="bytes" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph> (<ph id="ph4">&lt;see langword="Nothing" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="bytes" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>(<ph id="ph4">&lt;see langword="Nothing" /&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source><ph id="ph1">&lt;paramref name="charCount" /&gt;</ph> or <ph id="ph2">&lt;paramref name="byteCount" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="charCount" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="byteCount" /&gt;</ph> ist kleiner als 0.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>The output buffer is too small to contain any of the converted input.</source>
          <target state="translated">Der Ausgabepuffer ist zu klein, um die konvertierte Eingabe zu enthalten.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>The output buffer should be greater than or equal to the size indicated by the <ph id="ph1">&lt;see cref="Overload:System.Text.Decoder.GetCharCount" /&gt;</ph> method.</source>
          <target state="translated">Der Ausgabepuffer muss mindestens so groß sein, wie durch die <ph id="ph1">&lt;see cref="Overload:System.Text.Decoder.GetCharCount" /&gt;</ph>-Methode angegeben.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)</source>
          <target state="translated">Es ist ein Fallback aufgetreten (eine ausführliche Erläuterung finden Sie unter <bpt id="p1">[</bpt>Zeichencodierung in .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept>).</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>-and-</source>
          <target state="translated">- und -</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Decoder.Fallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph>.</source>
          <target state="translated">Für <ph id="ph1">&lt;see cref="P:System.Text.Decoder.Fallback" /&gt;</ph> ist <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph> festgelegt.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">erfordert volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Dieser Member kann nicht von teilweise vertrauenswürdigem oder transparentem Code verwendet werden.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>A byte array to convert.</source>
          <target state="translated">Ein zu konvertierendes Bytearray</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>The first element of <bpt id="p1">&lt;c&gt;</bpt>bytes<ept id="p1">&lt;/c&gt;</ept> to convert.</source>
          <target state="translated">Das erste zu konvertierende Element von <bpt id="p1">&lt;c&gt;</bpt>bytes<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>The number of elements of <bpt id="p1">&lt;c&gt;</bpt>bytes<ept id="p1">&lt;/c&gt;</ept> to convert.</source>
          <target state="translated">Die Anzahl zu konvertierende Elemente von <bpt id="p1">&lt;c&gt;</bpt>bytes<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>An array to store the converted characters.</source>
          <target state="translated">Ein Array zum Speichern der konvertierten Zeichen</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>The first element of <bpt id="p1">&lt;c&gt;</bpt>chars<ept id="p1">&lt;/c&gt;</ept> in which data is stored.</source>
          <target state="translated">Das erste Element von <bpt id="p1">&lt;c&gt;</bpt>chars<ept id="p1">&lt;/c&gt;</ept>, in dem Daten gespeichert werden.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>The maximum number of elements of <bpt id="p1">&lt;c&gt;</bpt>chars<ept id="p1">&lt;/c&gt;</ept> to use in the conversion.</source>
          <target state="translated">Die maximale Anzahl der in der Konversion zu verwendenden Elemente von <bpt id="p1">&lt;c&gt;</bpt>chars<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that no further data is to be converted; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, um anzugeben, dass keine weiteren Daten konvertiert werden; andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>When this method returns, contains the number of bytes that were used in the conversion.</source>
          <target state="translated">In der Rückgabe dieser Methode ist die Anzahl der Bytes enthalten, die bei der Konvertierung verwendet wurden.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>This parameter is passed uninitialized.</source>
          <target state="translated">Dieser Parameter wird nicht initialisiert übergeben.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>When this method returns, contains the number of characters from <bpt id="p1">&lt;c&gt;</bpt>chars<ept id="p1">&lt;/c&gt;</ept> that were produced by the conversion.</source>
          <target state="translated">In der Rückgabe dieser Methode ist die Anzahl der Zeichen aus <bpt id="p1">&lt;c&gt;</bpt>chars<ept id="p1">&lt;/c&gt;</ept> enthalten, die von der Konvertierung erstellt wurden.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>This parameter is passed uninitialized.</source>
          <target state="translated">Dieser Parameter wird nicht initialisiert übergeben.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>When this method returns, contains <ph id="ph1">&lt;see langword="true" /&gt;</ph> if all the characters specified by <bpt id="p1">&lt;c&gt;</bpt>byteCount<ept id="p1">&lt;/c&gt;</ept> were converted; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">In der Rückgabe dieser Methode ist <ph id="ph1">&lt;see langword="true" /&gt;</ph> enthalten, wenn alle von <bpt id="p1">&lt;c&gt;</bpt>byteCount<ept id="p1">&lt;/c&gt;</ept> angegebenen Zeichen konvertiert wurden; andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>This parameter is passed uninitialized.</source>
          <target state="translated">Dieser Parameter wird nicht initialisiert übergeben.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>Converts an array of encoded bytes to UTF-16 encoded characters and stores the result in a character array.</source>
          <target state="translated">Konvertiert ein Array codierter Bytes in UTF-16-codierte Zeichen und speichert das Ergebnis in einem Zeichenarray.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>Remember that the <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> object saves state between calls to <ph id="ph2">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph>.</source>
          <target state="translated">Beachten Sie, dass die <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> -Objekt speichert den Zustand zwischen Aufrufen von <ph id="ph2">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>When the application is done with a stream of data, it should set the <ph id="ph1">`flush`</ph> parameter to <ph id="ph2">`true`</ph> to make sure that the state information is flushed.</source>
          <target state="translated">Wenn die Anwendung einen Strom von Daten abgeschlossen ist, legen sie die <ph id="ph1">`flush`</ph> Parameter <ph id="ph2">`true`</ph> um sicherzustellen, dass die Zustandsinformationen geleert wird.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>With this setting, the decoder ignores invalid bytes at the end of the data block and clears the internal buffer.</source>
          <target state="translated">Mit dieser Einstellung wird vom Decoder ungültige Bytes am Ende des Datenblocks ignoriert und löscht den internen Puffer.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>Any remaining processed data that is part of a logical unit, such as the high surrogate of a surrogate pair, is converted according to the current fallback settings.</source>
          <target state="translated">Alle verbleibenden verarbeiteten Daten, die Teil einer logischen Einheit, z. B. das hohe Ersatzzeichen eines Ersatzzeichenpaars werden gemäß der aktuellen fallbackeinstellungen konvertiert.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>The <ph id="ph1">`Convert`</ph> method is designed to be used in a loop to decode an arbitrary amount of input, such as data read from a file or stream.</source>
          <target state="translated">Die <ph id="ph1">`Convert`</ph> -Methode entwickelt, um in einer Schleife verwendet werden, um zu eine beliebige Anzahl von Eingaben zu decodierende z. B. aus einer Datei oder einem Stream gelesenen Daten.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>It stores the output of the decoding operation in a fixed-size buffer.</source>
          <target state="translated">Sie speichert die Ausgabe der Decodierungsvorgang in einen Puffer mit fester Größe.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source><ph id="ph1">&lt;xref:System.Text.Decoder.GetChars%2A&gt;</ph> will throw an exception if the output buffer isn't large enough, but <ph id="ph2">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph> will fill as much space as possible and return the bytes read and chars written.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.Decoder.GetChars%2A&gt;</ph> löst eine Ausnahme aus, wenn die Ausgabepuffer nicht groß genug ist, aber <ph id="ph2">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph> wird so viel Speicherplatz wie möglich zu füllen und die gelesenen Bytes und geschriebenen Zeichen zurück.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>Also see the <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType&gt;</ph> topic for more comments.</source>
          <target state="translated">Siehe auch die <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType&gt;</ph> Thema weitere Kommentare.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>The <ph id="ph1">`completed`</ph> output parameter indicates whether all the data in the input buffer was converted and stored in the output buffer.</source>
          <target state="translated">Die <ph id="ph1">`completed`</ph> Output-Parameter gibt an, ob alle Daten im Eingabepuffer konvertiert und im Ausgabepuffer gespeichert wurden.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>This parameter is set to <ph id="ph1">`false`</ph> if the number of bytes specified by the <ph id="ph2">`byteCount`</ph> parameter cannot be converted without exceeding the number of characters specified by the <ph id="ph3">`charCount`</ph> parameter.</source>
          <target state="translated">Dieser Parameter auf festgelegt ist <ph id="ph1">`false`</ph> Wenn die Anzahl der Bytes, wird angegeben die <ph id="ph2">`byteCount`</ph> Parameter kann nicht konvertiert werden, ohne dass die Anzahl der Zeichen, die gemäß der <ph id="ph3">`charCount`</ph> Parameter.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>In that situation, the application should use the contents of the output buffer or provide a new output buffer, increment the <ph id="ph1">`bytes`</ph> parameter by the number of bytes specified by the <ph id="ph2">`bytesUsed`</ph> parameter, then call the <ph id="ph3">`Convert`</ph> method again to process the remaining input.</source>
          <target state="translated">In diesem Fall sollte die Anwendung verwenden Sie den Inhalt des Ausgabepuffers oder geben Sie einen neuen Ausgabepuffer Inkrement der <ph id="ph1">`bytes`</ph> Parameter, um die Anzahl der Bytes, die gemäß der <ph id="ph2">`bytesUsed`</ph> Parameter, rufen Sie anschließend die <ph id="ph3">`Convert`</ph> -Methode erneut auf die verbleibenden Eingabe zu verarbeiten.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>The <ph id="ph1">`completed`</ph> parameter can also be set to <ph id="ph2">`false`</ph>, even though the <ph id="ph3">`bytesUsed`</ph> and <ph id="ph4">`byteCount`</ph> parameters are equal.</source>
          <target state="translated">Die <ph id="ph1">`completed`</ph> Parameter kann auch festgelegt werden, um <ph id="ph2">`false`</ph>, obwohl die <ph id="ph3">`bytesUsed`</ph> und <ph id="ph4">`byteCount`</ph> Parameter gleich sind.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>This situation occurs if there is still data in the <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> object that has not been stored in the <ph id="ph2">`bytes`</ph> buffer.</source>
          <target state="translated">Diese Situation tritt auf, wenn es weiterhin Daten in der <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> -Objekt, das nicht im gespeichert wurden die <ph id="ph2">`bytes`</ph> Puffer.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.Text.Encoder.Convert%2A&gt;</ph> method to convert a file of UTF-16 characters to UTF-8.</source>
          <target state="translated">Im folgenden Codebeispiel wird mit der <ph id="ph1">&lt;xref:System.Text.Encoder.Convert%2A&gt;</ph> Methode, um eine Datei mit UTF-16-Zeichen in UTF-8 konvertieren.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>It then uses the <ph id="ph1">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph> method to convert the UTF-8 characters back to UTF-16 characters.</source>
          <target state="translated">Es verwendet dann die <ph id="ph1">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph> Methode zum Konvertieren der UTF-8-Zeichen zurück in UTF-16-Zeichen.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> or <ph id="ph2">&lt;paramref name="bytes" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph> (<ph id="ph4">&lt;see langword="Nothing" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="bytes" /&gt;</ph> ist <ph id="ph3">&lt;see langword="null" /&gt;</ph>(<ph id="ph4">&lt;see langword="Nothing" /&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source><ph id="ph1">&lt;paramref name="charIndex" /&gt;</ph>, <ph id="ph2">&lt;paramref name="charCount" /&gt;</ph>, <ph id="ph3">&lt;paramref name="byteIndex" /&gt;</ph>, or <ph id="ph4">&lt;paramref name="byteCount" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="charIndex" /&gt;</ph>, <ph id="ph2">&lt;paramref name="charCount" /&gt;</ph>, <ph id="ph3">&lt;paramref name="byteIndex" /&gt;</ph> oder <ph id="ph4">&lt;paramref name="byteCount" /&gt;</ph> ist kleiner als 0 (null).</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>-or-</source>
          <target state="translated">- oder - </target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>The length of <ph id="ph1">&lt;paramref name="chars" /&gt;</ph><ph id="ph2"> - </ph><ph id="ph3">&lt;paramref name="charIndex" /&gt;</ph> is less than <ph id="ph4">&lt;paramref name="charCount" /&gt;</ph>.</source>
          <target state="translated">Die Länge von<ph id="ph1">&lt;paramref name="chars" /&gt;</ph><ph id="ph2"> - </ph><ph id="ph3">&lt;paramref name="charIndex" /&gt;</ph> ist kleiner als <ph id="ph4">&lt;paramref name="charCount" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>-or-</source>
          <target state="translated">- oder - </target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>The length of <ph id="ph1">&lt;paramref name="bytes" /&gt;</ph><ph id="ph2"> - </ph><ph id="ph3">&lt;paramref name="byteIndex" /&gt;</ph> is less than <ph id="ph4">&lt;paramref name="byteCount" /&gt;</ph>.</source>
          <target state="translated">Die Länge von<ph id="ph1">&lt;paramref name="bytes" /&gt;</ph><ph id="ph2"> - </ph><ph id="ph3">&lt;paramref name="byteIndex" /&gt;</ph> ist kleiner als <ph id="ph4">&lt;paramref name="byteCount" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>The output buffer is too small to contain any of the converted input.</source>
          <target state="translated">Der Ausgabepuffer ist zu klein, um die konvertierte Eingabe zu enthalten.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>The output buffer should be greater than or equal to the size indicated by the <ph id="ph1">&lt;see cref="Overload:System.Text.Decoder.GetCharCount" /&gt;</ph> method.</source>
          <target state="translated">Der Ausgabepuffer muss mindestens so groß sein, wie durch die <ph id="ph1">&lt;see cref="Overload:System.Text.Decoder.GetCharCount" /&gt;</ph>-Methode angegeben.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)</source>
          <target state="translated">Es ist ein Fallback aufgetreten (eine ausführliche Erläuterung finden Sie unter <bpt id="p1">[</bpt>Zeichencodierung in .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept>).</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source>-and-</source>
          <target state="translated">- und -</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Decoder.Fallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph>.</source>
          <target state="translated">Für <ph id="ph1">&lt;see cref="P:System.Text.Decoder.Fallback" /&gt;</ph> ist <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph> festgelegt.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="P:System.Text.Decoder.Fallback">
          <source>Gets or sets a <ph id="ph1">&lt;see cref="T:System.Text.DecoderFallback" /&gt;</ph> object for the current <ph id="ph2">&lt;see cref="T:System.Text.Decoder" /&gt;</ph> object.</source>
          <target state="translated">Ruft ein <ph id="ph1">&lt;see cref="T:System.Text.DecoderFallback" /&gt;</ph>-Objekt für das aktuelle <ph id="ph2">&lt;see cref="T:System.Text.Decoder" /&gt;</ph>-Objekt ab oder legt es fest.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Decoder.Fallback">
          <source>A <ph id="ph1">&lt;see cref="T:System.Text.DecoderFallback" /&gt;</ph> object.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Text.DecoderFallback" /&gt;</ph>-Objekt.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Decoder.Fallback">
          <source>The <ph id="ph1">&lt;xref:System.Text.DecoderFallback&gt;</ph> object represents an error handler that is invoked when an encoded byte sequence cannot be converted to a character.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Text.DecoderFallback&gt;</ph> -Objekt stellt einen Fehlerhandler, der aufgerufen wird, wenn eine codierte Bytefolge in Zeichen konvertiert werden kann.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="P:System.Text.Decoder.Fallback">
          <source>The value in a set operation is <ph id="ph1">&lt;see langword="null" /&gt;</ph> (<ph id="ph2">&lt;see langword="Nothing" /&gt;</ph>).</source>
          <target state="translated">Der Wert in einem set-Vorgang ist <ph id="ph1">&lt;see langword="null" /&gt;</ph> (<ph id="ph2">&lt;see langword="Nothing" /&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="P:System.Text.Decoder.Fallback">
          <source>A new value cannot be assigned in a set operation because the current <ph id="ph1">&lt;see cref="T:System.Text.DecoderFallbackBuffer" /&gt;</ph> object contains data that has not been decoded yet.</source>
          <target state="translated">Ein neuer Wert kann in einem set-Vorgang nicht zugewiesen werden, da das aktuelle <ph id="ph1">&lt;see cref="T:System.Text.DecoderFallbackBuffer" /&gt;</ph>-Objekt Daten enthält, die noch nicht decodiert wurden.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="P:System.Text.Decoder.FallbackBuffer">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Text.DecoderFallbackBuffer" /&gt;</ph> object associated with the current <ph id="ph2">&lt;see cref="T:System.Text.Decoder" /&gt;</ph> object.</source>
          <target state="translated">Ruft das <ph id="ph1">&lt;see cref="T:System.Text.DecoderFallbackBuffer" /&gt;</ph>-Objekt ab, das dem aktuellen <ph id="ph2">&lt;see cref="T:System.Text.Decoder" /&gt;</ph>-Objekt zugeordnet ist.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Decoder.FallbackBuffer">
          <source>A <ph id="ph1">&lt;see cref="T:System.Text.DecoderFallbackBuffer" /&gt;</ph> object.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Text.DecoderFallbackBuffer" /&gt;</ph>-Objekt.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Decoder.FallbackBuffer">
          <source>The <ph id="ph1">&lt;xref:System.Text.DecoderFallbackBuffer&gt;</ph> object represents data used by the <ph id="ph2">&lt;xref:System.Text.DecoderFallback&gt;</ph> object.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Text.DecoderFallbackBuffer&gt;</ph> Objekt darstellt, vom verwendeten Daten der <ph id="ph2">&lt;xref:System.Text.DecoderFallback&gt;</ph> Objekt.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Decoder.FallbackBuffer">
          <source>The <ph id="ph1">&lt;xref:System.Text.DecoderFallback&gt;</ph> object represents an error handler that is invoked when an encoded byte sequence cannot be converted to a character.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Text.DecoderFallback&gt;</ph> -Objekt stellt einen Fehlerhandler, der aufgerufen wird, wenn eine codierte Bytefolge in Zeichen konvertiert werden kann.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="T:System.Text.Decoder">
          <source>When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes.</source>
          <target state="translated">Berechnet beim Überschreiben in einer abgeleiteten Klasse die Anzahl der Zeichen, die beim Decodieren einer Bytefolge erzeugt werden.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetCharCount(System.Byte*,System.Int32,System.Boolean)">
          <source>A pointer to the first byte to decode.</source>
          <target state="translated">Ein Zeiger auf das erste zu decodierende Byte.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetCharCount(System.Byte*,System.Int32,System.Boolean)">
          <source>The number of bytes to decode.</source>
          <target state="translated">Die Anzahl der zu decodierenden Bytes.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetCharCount(System.Byte*,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to simulate clearing the internal state of the encoder after the calculation; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, um das Löschen des internen Status des Encoders nach der Berechnung zu simulieren, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetCharCount(System.Byte*,System.Int32,System.Boolean)">
          <source>When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</source>
          <target state="translated">Berechnet beim Überschreiben in einer abgeleiteten Klasse die Anzahl der Zeichen, die beim Decodieren einer Bytefolge ab dem angegebenen Bytezeiger erzeugt werden.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetCharCount(System.Byte*,System.Int32,System.Boolean)">
          <source>A parameter indicates whether to clear the internal state of the decoder after the calculation.</source>
          <target state="translated">Ein Parameter gibt an, ob der interne Zustand des Decoders nach der Kalkulation gelöscht werden soll.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetCharCount(System.Byte*,System.Int32,System.Boolean)">
          <source>The number of characters produced by decoding the specified sequence of bytes and any bytes in the internal buffer.</source>
          <target state="translated">Die Anzahl der Zeichen, die beim Decodieren der angegebenen Bytesequenz erzeugt werden, und jeglicher Bytes im internen Puffer.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.GetCharCount(System.Byte*,System.Int32,System.Boolean)">
          <source>This method does not affect the state of the decoder.</source>
          <target state="translated">Diese Methode wirkt sich nicht auf den Zustand des Decoders aus.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.GetCharCount(System.Byte*,System.Int32,System.Boolean)">
          <source>To calculate the exact array size that <ph id="ph1">&lt;xref:System.Text.Decoder.GetChars%2A&gt;</ph> requires to store the resulting characters, the application should use <ph id="ph2">&lt;xref:System.Text.Decoder.GetCharCount%2A&gt;</ph>.</source>
          <target state="translated">Zum Berechnen der genauen Arraygröße <ph id="ph1">&lt;xref:System.Text.Decoder.GetChars%2A&gt;</ph> erfordert zum Speichern der resultierenden Zeichen, die Anwendung die zu verwendende <ph id="ph2">&lt;xref:System.Text.Decoder.GetCharCount%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.GetCharCount(System.Byte*,System.Int32,System.Boolean)">
          <source>If <ph id="ph1">`GetChars`</ph> is called with <ph id="ph2">`flush`</ph> set to <ph id="ph3">`false`</ph>, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation.</source>
          <target state="translated">Wenn <ph id="ph1">`GetChars`</ph> aufgerufen wird und <ph id="ph2">`flush`</ph> festgelegt <ph id="ph3">`false`</ph>, Decoders nachfolgende Bytes am Ende der Datenblöcke in einem internen Puffer gespeichert und verwendet diese im nächsten Decodierungsvorgang.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.GetCharCount(System.Byte*,System.Int32,System.Boolean)">
          <source>The application should call <ph id="ph1">`GetCharCount`</ph> on a block of data immediately before calling <ph id="ph2">`GetChars`</ph> on the same block, so that any trailing bytes from the previous block are included in the calculation.</source>
          <target state="translated">Die Anwendung sollte Aufrufen <ph id="ph1">`GetCharCount`</ph> auf einen Block von Daten unmittelbar vor dem Aufruf <ph id="ph2">`GetChars`</ph> auf den gleichen Block, damit nachfolgende Bytes aus dem vorherigen Block in die Berechnung eingeschlossen werden.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetCharCount(System.Byte*,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic .NET).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic .NET).</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetCharCount(System.Byte*,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> ist kleiner als Null.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetCharCount(System.Byte*,System.Int32,System.Boolean)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)</source>
          <target state="translated">Es ist ein Fallback aufgetreten (eine ausführliche Erläuterung finden Sie unter <bpt id="p1">[</bpt>Zeichencodierung in .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept>).</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetCharCount(System.Byte*,System.Int32,System.Boolean)">
          <source>-and-</source>
          <target state="translated">- und -</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetCharCount(System.Byte*,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Decoder.Fallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph>.</source>
          <target state="translated">Für <ph id="ph1">&lt;see cref="P:System.Text.Decoder.Fallback" /&gt;</ph> ist <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph> festgelegt.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.GetCharCount(System.Byte*,System.Int32,System.Boolean)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">erfordert volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.GetCharCount(System.Byte*,System.Int32,System.Boolean)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Dieser Member kann nicht von teilweise vertrauenswürdigem oder transparentem Code verwendet werden.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>The byte array containing the sequence of bytes to decode.</source>
          <target state="translated">Das Bytearray, das die zu decodierende Bytefolge enthält.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>The index of the first byte to decode.</source>
          <target state="translated">Der Index des ersten zu decodierenden Bytes.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes to decode.</source>
          <target state="translated">Die Anzahl der zu decodierenden Bytes.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</source>
          <target state="translated">Berechnet beim Überschreiben in einer abgeleiteten Klasse die Anzahl der Zeichen, die beim Decodieren einer Bytefolge aus dem angegebenen Bytearray erzeugt werden.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>The number of characters produced by decoding the specified sequence of bytes and any bytes in the internal buffer.</source>
          <target state="translated">Die Anzahl der Zeichen, die beim Decodieren der angegebenen Bytesequenz erzeugt werden, und jeglicher Bytes im internen Puffer.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>This method does not affect the state of the decoder.</source>
          <target state="translated">Diese Methode wirkt sich nicht auf den Zustand des Decoders aus.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>To calculate the exact array size that <ph id="ph1">&lt;xref:System.Text.Decoder.GetChars%2A&gt;</ph> requires to store the resulting characters, the application should use <ph id="ph2">&lt;xref:System.Text.Decoder.GetCharCount%2A&gt;</ph>.</source>
          <target state="translated">Zum Berechnen der genauen Arraygröße <ph id="ph1">&lt;xref:System.Text.Decoder.GetChars%2A&gt;</ph> erfordert zum Speichern der resultierenden Zeichen, die Anwendung die zu verwendende <ph id="ph2">&lt;xref:System.Text.Decoder.GetCharCount%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>If <ph id="ph1">`GetChars`</ph> is called with <ph id="ph2">`flush`</ph> set to <ph id="ph3">`false`</ph>, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation.</source>
          <target state="translated">Wenn <ph id="ph1">`GetChars`</ph> aufgerufen wird und <ph id="ph2">`flush`</ph> festgelegt <ph id="ph3">`false`</ph>, Decoders nachfolgende Bytes am Ende der Datenblöcke in einem internen Puffer gespeichert und verwendet diese im nächsten Decodierungsvorgang.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>The application should call <ph id="ph1">`GetCharCount`</ph> on a block of data immediately before calling <ph id="ph2">`GetChars`</ph> on the same block, so that any trailing bytes from the previous block are included in the calculation.</source>
          <target state="translated">Die Anwendung sollte Aufrufen <ph id="ph1">`GetCharCount`</ph> auf einen Block von Daten unmittelbar vor dem Aufruf <ph id="ph2">`GetChars`</ph> auf den gleichen Block, damit nachfolgende Bytes aus dem vorherigen Block in die Berechnung eingeschlossen werden.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>The following code example demonstrates how to use the <ph id="ph1">&lt;xref:System.Text.Decoder.GetCharCount%2A&gt;</ph> method to calculate the number of characters required to decode the specified range of bytes in the array.</source>
          <target state="translated">Im folgenden Codebeispiel wird veranschaulicht, wie die <ph id="ph1">&lt;xref:System.Text.Decoder.GetCharCount%2A&gt;</ph> Methode, um die erforderliche Anzahl von Zeichen decodiert den angegebenen Bereich von Bytes im Array zu berechnen.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>(<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="count" /&gt;</ph> ist kleiner als 0.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- oder - </target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> do not denote a valid range in <ph id="ph3">&lt;paramref name="bytes" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> und <ph id="ph2">&lt;paramref name="count" /&gt;</ph> geben keinen gültigen Bereich in <ph id="ph3">&lt;paramref name="bytes" /&gt;</ph> an.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)</source>
          <target state="translated">Es ist ein Fallback aufgetreten (eine ausführliche Erläuterung finden Sie unter <bpt id="p1">[</bpt>Zeichencodierung in .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept>).</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>-and-</source>
          <target state="translated">- und -</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Decoder.Fallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph>.</source>
          <target state="translated">Für <ph id="ph1">&lt;see cref="P:System.Text.Decoder.Fallback" /&gt;</ph> ist <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph> festgelegt.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)">
          <source>The byte array containing the sequence of bytes to decode.</source>
          <target state="translated">Das Bytearray, das die zu decodierende Bytefolge enthält.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)">
          <source>The index of the first byte to decode.</source>
          <target state="translated">Der Index des ersten zu decodierenden Bytes.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)">
          <source>The number of bytes to decode.</source>
          <target state="translated">Die Anzahl der zu decodierenden Bytes.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to simulate clearing the internal state of the encoder after the calculation; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, um das Löschen des internen Status des Encoders nach der Berechnung zu simulieren, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)">
          <source>When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</source>
          <target state="translated">Berechnet beim Überschreiben in einer abgeleiteten Klasse die Anzahl der Zeichen, die beim Decodieren einer Bytefolge aus dem angegebenen Bytearray erzeugt werden.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)">
          <source>A parameter indicates whether to clear the internal state of the decoder after the calculation.</source>
          <target state="translated">Ein Parameter gibt an, ob der interne Zustand des Decoders nach der Kalkulation gelöscht werden soll.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)">
          <source>The number of characters produced by decoding the specified sequence of bytes and any bytes in the internal buffer.</source>
          <target state="translated">Die Anzahl der Zeichen, die beim Decodieren der angegebenen Bytesequenz erzeugt werden, und jeglicher Bytes im internen Puffer.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)">
          <source>This method does not affect the state of the decoder.</source>
          <target state="translated">Diese Methode wirkt sich nicht auf den Zustand des Decoders aus.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)">
          <source>To calculate the exact array size that <ph id="ph1">&lt;xref:System.Text.Decoder.GetChars%2A&gt;</ph> requires to store the resulting characters, the application should use <ph id="ph2">&lt;xref:System.Text.Decoder.GetCharCount%2A&gt;</ph>.</source>
          <target state="translated">Zum Berechnen der genauen Arraygröße <ph id="ph1">&lt;xref:System.Text.Decoder.GetChars%2A&gt;</ph> erfordert zum Speichern der resultierenden Zeichen, die Anwendung die zu verwendende <ph id="ph2">&lt;xref:System.Text.Decoder.GetCharCount%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)">
          <source>If <ph id="ph1">`GetChars`</ph> is called with <ph id="ph2">`flush`</ph> set to <ph id="ph3">`false`</ph>, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation.</source>
          <target state="translated">Wenn <ph id="ph1">`GetChars`</ph> aufgerufen wird und <ph id="ph2">`flush`</ph> festgelegt <ph id="ph3">`false`</ph>, Decoders nachfolgende Bytes am Ende der Datenblöcke in einem internen Puffer gespeichert und verwendet diese im nächsten Decodierungsvorgang.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)">
          <source>The application should call <ph id="ph1">`GetCharCount`</ph> on a block of data immediately before calling <ph id="ph2">`GetChars`</ph> on the same block, so that any trailing bytes from the previous block are included in the calculation.</source>
          <target state="translated">Die Anwendung sollte Aufrufen <ph id="ph1">`GetCharCount`</ph> auf einen Block von Daten unmittelbar vor dem Aufruf <ph id="ph2">`GetChars`</ph> auf den gleichen Block, damit nachfolgende Bytes aus dem vorherigen Block in die Berechnung eingeschlossen werden.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>(<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="count" /&gt;</ph> ist kleiner als 0.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)">
          <source>-or-</source>
          <target state="translated">- oder - </target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> do not denote a valid range in <ph id="ph3">&lt;paramref name="bytes" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> und <ph id="ph2">&lt;paramref name="count" /&gt;</ph> geben keinen gültigen Bereich in <ph id="ph3">&lt;paramref name="bytes" /&gt;</ph> an.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)</source>
          <target state="translated">Es ist ein Fallback aufgetreten (eine ausführliche Erläuterung finden Sie unter <bpt id="p1">[</bpt>Zeichencodierung in .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept>).</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)">
          <source>-and-</source>
          <target state="translated">- und -</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Decoder.Fallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph>.</source>
          <target state="translated">Für <ph id="ph1">&lt;see cref="P:System.Text.Decoder.Fallback" /&gt;</ph> ist <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph> festgelegt.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="T:System.Text.Decoder">
          <source>When overridden in a derived class, decodes a sequence of bytes into a set of characters.</source>
          <target state="translated">Beim Überschreiben in einer abgeleiteten Klasse wird eine Bytefolge in Zeichen decodiert.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)">
          <source>A pointer to the first byte to decode.</source>
          <target state="translated">Ein Zeiger auf das erste zu decodierende Byte.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)">
          <source>The number of bytes to decode.</source>
          <target state="translated">Die Anzahl der zu decodierenden Bytes.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)">
          <source>A pointer to the location at which to start writing the resulting set of characters.</source>
          <target state="translated">Ein Zeiger auf die Position, an der mit dem Schreiben der sich ergebenden Zeichen begonnen werden soll.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)">
          <source>The maximum number of characters to write.</source>
          <target state="translated">Die maximale Anzahl der zu schreibenden Zeichen.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to clear the internal state of the decoder after the conversion; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> löscht nach der Konvertierung den internen Zustand des Decoders, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)">
          <source>When overridden in a derived class, decodes a sequence of bytes starting at the specified byte pointer and any bytes in the internal buffer into a set of characters that are stored starting at the specified character pointer.</source>
          <target state="translated">Beim Überschreiben in einer abgeleiteten Klasse wird eine Bytefolge beginnend am angegebenen Bytezeiger einschließlich aller Bytes im internen Puffer in Zeichen decodiert, die ab Beginn des angegebenen Zeichenzeigers gespeichert werden.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)">
          <source>A parameter indicates whether to clear the internal state of the decoder after the conversion.</source>
          <target state="translated">Ein Parameter gibt an, ob der interne Zustand des Decoders nach der Konvertierung zu löschen ist.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)">
          <source>The actual number of characters written at the location indicated by the <ph id="ph1">&lt;paramref name="chars" /&gt;</ph> parameter.</source>
          <target state="translated">Die tatsächliche Anzahl der Zeichen, die an der durch den <ph id="ph1">&lt;paramref name="chars" /&gt;</ph>-Parameter angegebenen Position geschrieben wurden.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)">
          <source>Remember that the <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> object saves state between calls to <ph id="ph2">&lt;xref:System.Text.Decoder.GetChars%2A&gt;</ph>.</source>
          <target state="translated">Beachten Sie, dass die <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> -Objekt speichert den Zustand zwischen Aufrufen von <ph id="ph2">&lt;xref:System.Text.Decoder.GetChars%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)">
          <source>When the application is done with a stream of data, it should set the <ph id="ph1">`flush`</ph> parameter to <ph id="ph2">`true`</ph> to make sure that the state information is flushed.</source>
          <target state="translated">Wenn die Anwendung einen Strom von Daten abgeschlossen ist, legen sie die <ph id="ph1">`flush`</ph> Parameter <ph id="ph2">`true`</ph> um sicherzustellen, dass die Zustandsinformationen geleert wird.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)">
          <source>With this setting, the decoder ignores invalid bytes at the end of the data block and clears the internal buffer.</source>
          <target state="translated">Mit dieser Einstellung wird vom Decoder ungültige Bytes am Ende des Datenblocks ignoriert und löscht den internen Puffer.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)">
          <source>To calculate the exact buffer size that <ph id="ph1">`GetChars`</ph> requires to store the resulting characters, the application should use <ph id="ph2">&lt;xref:System.Text.Decoder.GetCharCount%2A&gt;</ph>.</source>
          <target state="translated">Zum Berechnen der genauen Puffergröße <ph id="ph1">`GetChars`</ph> erfordert zum Speichern der resultierenden Zeichen, die Anwendung die zu verwendende <ph id="ph2">&lt;xref:System.Text.Decoder.GetCharCount%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)">
          <source>If <ph id="ph1">`GetChars`</ph> is called with <ph id="ph2">`flush`</ph> set to <ph id="ph3">`false`</ph>, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation.</source>
          <target state="translated">Wenn <ph id="ph1">`GetChars`</ph> aufgerufen wird und <ph id="ph2">`flush`</ph> festgelegt <ph id="ph3">`false`</ph>, Decoders nachfolgende Bytes am Ende der Datenblöcke in einem internen Puffer gespeichert und verwendet diese im nächsten Decodierungsvorgang.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)">
          <source>The application should call <ph id="ph1">`GetCharCount`</ph> on a block of data immediately before calling <ph id="ph2">`GetChars`</ph> on the same block, so that any trailing bytes from the previous block are included in the calculation.</source>
          <target state="translated">Die Anwendung sollte Aufrufen <ph id="ph1">`GetCharCount`</ph> auf einen Block von Daten unmittelbar vor dem Aufruf <ph id="ph2">`GetChars`</ph> auf den gleichen Block, damit nachfolgende Bytes aus dem vorherigen Block in die Berechnung eingeschlossen werden.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)">
          <source>If your application is to convert many segments of an input stream, consider using the <ph id="ph1">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph> method.</source>
          <target state="translated">Wenn Ihre Anwendung ist viele Segmente eines Eingabedatenstroms konvertieren, können Sie verwenden die <ph id="ph1">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Text.Decoder.GetChars%2A&gt;</ph> will throw an exception if the output buffer isn't large enough, but <ph id="ph2">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph> will fill as much space as possible and return the bytes read and chars written.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.Decoder.GetChars%2A&gt;</ph> löst eine Ausnahme aus, wenn die Ausgabepuffer nicht groß genug ist, aber <ph id="ph2">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph> wird so viel Speicherplatz wie möglich zu füllen und die gelesenen Bytes und geschriebenen Zeichen zurück.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)">
          <source>Also see the <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType&gt;</ph> topic for more comments.</source>
          <target state="translated">Siehe auch die <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType&gt;</ph> Thema weitere Kommentare.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>(<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)">
          <source>-or-</source>
          <target state="translated">- oder - </target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>(<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="byteCount" /&gt;</ph> or <ph id="ph2">&lt;paramref name="charCount" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="byteCount" /&gt;</ph> oder <ph id="ph2">&lt;paramref name="charCount" /&gt;</ph> ist kleiner als 0.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="charCount" /&gt;</ph> is less than the resulting number of characters.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="charCount" /&gt;</ph> ist niedriger als die sich ergebende Anzahl von Zeichen.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)</source>
          <target state="translated">Es ist ein Fallback aufgetreten (eine ausführliche Erläuterung finden Sie unter <bpt id="p1">[</bpt>Zeichencodierung in .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept>).</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)">
          <source>-and-</source>
          <target state="translated">- und -</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Decoder.Fallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph>.</source>
          <target state="translated">Für <ph id="ph1">&lt;see cref="P:System.Text.Decoder.Fallback" /&gt;</ph> ist <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph> festgelegt.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">erfordert volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Dieser Member kann nicht von teilweise vertrauenswürdigem oder transparentem Code verwendet werden.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The byte array containing the sequence of bytes to decode.</source>
          <target state="translated">Das Bytearray, das die zu decodierende Bytefolge enthält.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The index of the first byte to decode.</source>
          <target state="translated">Der Index des ersten zu decodierenden Bytes.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The number of bytes to decode.</source>
          <target state="translated">Die Anzahl der zu decodierenden Bytes.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The character array to contain the resulting set of characters.</source>
          <target state="translated">Das Zeichenarray, das die sich ergebenden Zeichen enthalten soll.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The index at which to start writing the resulting set of characters.</source>
          <target state="translated">Der Index, an dem mit dem Schreiben der sich ergebenden Zeichen begonnen werden soll.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>When overridden in a derived class, decodes a sequence of bytes from the specified byte array and any bytes in the internal buffer into the specified character array.</source>
          <target state="translated">Beim Überschreiben in einer abgeleiteten Klasse wird eine Bytefolge aus dem angegebenen Bytearray einschließlich aller Bytes im internen Puffer in das angegebene Zeichenarray decodiert.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The actual number of characters written into <ph id="ph1">&lt;paramref name="chars" /&gt;</ph>.</source>
          <target state="translated">Die tatsächliche Anzahl der Zeichen, die in <ph id="ph1">&lt;paramref name="chars" /&gt;</ph> geschrieben werden.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>Remember that the <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> object saves state between calls to <ph id="ph2">&lt;xref:System.Text.Decoder.GetChars%2A&gt;</ph>.</source>
          <target state="translated">Beachten Sie, dass die <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> -Objekt speichert den Zustand zwischen Aufrufen von <ph id="ph2">&lt;xref:System.Text.Decoder.GetChars%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>When the application is done with a stream of data, it should set the <ph id="ph1">`flush`</ph> parameter to <ph id="ph2">`true`</ph> to make sure that the state information is flushed.</source>
          <target state="translated">Wenn die Anwendung einen Strom von Daten abgeschlossen ist, legen sie die <ph id="ph1">`flush`</ph> Parameter <ph id="ph2">`true`</ph> um sicherzustellen, dass die Zustandsinformationen geleert wird.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>With this setting, the decoder ignores invalid bytes at the end of the data block and clears the internal buffer.</source>
          <target state="translated">Mit dieser Einstellung wird vom Decoder ungültige Bytes am Ende des Datenblocks ignoriert und löscht den internen Puffer.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>To calculate the exact array size that <ph id="ph1">`GetChars`</ph> requires to store the resulting characters, the application should use <ph id="ph2">&lt;xref:System.Text.Decoder.GetCharCount%2A&gt;</ph>.</source>
          <target state="translated">Zum Berechnen der genauen Arraygröße <ph id="ph1">`GetChars`</ph> erfordert zum Speichern der resultierenden Zeichen, die Anwendung die zu verwendende <ph id="ph2">&lt;xref:System.Text.Decoder.GetCharCount%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>If <ph id="ph1">`GetChars`</ph> is called with <ph id="ph2">`flush`</ph> set to <ph id="ph3">`false`</ph>, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation.</source>
          <target state="translated">Wenn <ph id="ph1">`GetChars`</ph> aufgerufen wird und <ph id="ph2">`flush`</ph> festgelegt <ph id="ph3">`false`</ph>, Decoders nachfolgende Bytes am Ende der Datenblöcke in einem internen Puffer gespeichert und verwendet diese im nächsten Decodierungsvorgang.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The application should call <ph id="ph1">`GetCharCount`</ph> on a block of data immediately before calling <ph id="ph2">`GetChars`</ph> on the same block, so that any trailing bytes from the previous block are included in the calculation.</source>
          <target state="translated">Die Anwendung sollte Aufrufen <ph id="ph1">`GetCharCount`</ph> auf einen Block von Daten unmittelbar vor dem Aufruf <ph id="ph2">`GetChars`</ph> auf den gleichen Block, damit nachfolgende Bytes aus dem vorherigen Block in die Berechnung eingeschlossen werden.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>If your application is to convert many segments of an input stream, consider using the <ph id="ph1">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph> method.</source>
          <target state="translated">Wenn Ihre Anwendung ist viele Segmente eines Eingabedatenstroms konvertieren, können Sie verwenden die <ph id="ph1">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Text.Decoder.GetChars%2A&gt;</ph> will throw an exception if the output buffer isn't large enough, but <ph id="ph2">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph> will fill as much space as possible and return the bytes read and chars written.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.Decoder.GetChars%2A&gt;</ph> löst eine Ausnahme aus, wenn die Ausgabepuffer nicht groß genug ist, aber <ph id="ph2">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph> wird so viel Speicherplatz wie möglich zu füllen und die gelesenen Bytes und geschriebenen Zeichen zurück.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>Also see the <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType&gt;</ph> topic for more comments.</source>
          <target state="translated">Siehe auch die <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType&gt;</ph> Thema weitere Kommentare.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The following example demonstrates how to decode a range of elements from a byte array and store them in a Unicode character array.</source>
          <target state="translated">Im folgenden Beispiel wird veranschaulicht, wie auf einen Bereich von Elementen aus einem Bytearray zu decodieren und in ein Array von Unicode-Zeichen zu speichern.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Decoder.GetCharCount%2A&gt;</ph> method is used to calculate the number of characters needed to store the decoded elements in the array <ph id="ph2">`bytes`</ph>.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Text.Decoder.GetCharCount%2A&gt;</ph> Methode wird verwendet, um die Anzahl der Zeichen, die zum Speichern der decodierten Elemente im Array zu berechnen <ph id="ph2">`bytes`</ph>.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Decoder.GetChars%2A&gt;</ph> method decodes the specified elements in the byte array and stores them in the new character array.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Text.Decoder.GetChars%2A&gt;</ph> Methode decodiert die angegebenen Elemente im Bytearray und speichert sie in das neue Array von Zeichen.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>(<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>-or-</source>
          <target state="translated">- oder - </target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>(<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="byteIndex" /&gt;</ph> or <ph id="ph2">&lt;paramref name="byteCount" /&gt;</ph> or <ph id="ph3">&lt;paramref name="charIndex" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="byteIndex" /&gt;</ph>, <ph id="ph2">&lt;paramref name="byteCount" /&gt;</ph> oder <ph id="ph3">&lt;paramref name="charIndex" /&gt;</ph> ist kleiner als 0 (null).</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>-or-</source>
          <target state="translated">- oder - </target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="byteindex" /&gt;</ph> and <ph id="ph2">&lt;paramref name="byteCount" /&gt;</ph> do not denote a valid range in <ph id="ph3">&lt;paramref name="bytes" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="byteindex" /&gt;</ph> und <ph id="ph2">&lt;paramref name="byteCount" /&gt;</ph> geben keinen gültigen Bereich in <ph id="ph3">&lt;paramref name="bytes" /&gt;</ph> an.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>-or-</source>
          <target state="translated">- oder - </target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="charIndex" /&gt;</ph> is not a valid index in <ph id="ph2">&lt;paramref name="chars" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="charIndex" /&gt;</ph> ist kein gültiger Index in <ph id="ph2">&lt;paramref name="chars" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> does not have enough capacity from <ph id="ph2">&lt;paramref name="charIndex" /&gt;</ph> to the end of the array to accommodate the resulting characters.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> hat von <ph id="ph2">&lt;paramref name="charIndex" /&gt;</ph> bis zum Ende des Arrays nicht genügend Kapazität, um die sich ergebenden Zeichen aufzunehmen.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)</source>
          <target state="translated">Es ist ein Fallback aufgetreten (eine ausführliche Erläuterung finden Sie unter <bpt id="p1">[</bpt>Zeichencodierung in .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept>).</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>-and-</source>
          <target state="translated">- und -</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Decoder.Fallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph>.</source>
          <target state="translated">Für <ph id="ph1">&lt;see cref="P:System.Text.Decoder.Fallback" /&gt;</ph> ist <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph> festgelegt.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)">
          <source>The byte array containing the sequence of bytes to decode.</source>
          <target state="translated">Das Bytearray, das die zu decodierende Bytefolge enthält.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)">
          <source>The index of the first byte to decode.</source>
          <target state="translated">Der Index des ersten zu decodierenden Bytes.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)">
          <source>The number of bytes to decode.</source>
          <target state="translated">Die Anzahl der zu decodierenden Bytes.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)">
          <source>The character array to contain the resulting set of characters.</source>
          <target state="translated">Das Zeichenarray, das die sich ergebenden Zeichen enthalten soll.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)">
          <source>The index at which to start writing the resulting set of characters.</source>
          <target state="translated">Der Index, an dem mit dem Schreiben der sich ergebenden Zeichen begonnen werden soll.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to clear the internal state of the decoder after the conversion; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> löscht nach der Konvertierung den internen Zustand des Decoders, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)">
          <source>When overridden in a derived class, decodes a sequence of bytes from the specified byte array and any bytes in the internal buffer into the specified character array.</source>
          <target state="translated">Beim Überschreiben in einer abgeleiteten Klasse wird eine Bytefolge aus dem angegebenen Bytearray einschließlich aller Bytes im internen Puffer in das angegebene Zeichenarray decodiert.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)">
          <source>A parameter indicates whether to clear the internal state of the decoder after the conversion.</source>
          <target state="translated">Ein Parameter gibt an, ob der interne Zustand des Decoders nach der Konvertierung zu löschen ist.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)">
          <source>The actual number of characters written into the <ph id="ph1">&lt;paramref name="chars" /&gt;</ph> parameter.</source>
          <target state="translated">Die tatsächliche Anzahl der Zeichen, die in den <ph id="ph1">&lt;paramref name="chars" /&gt;</ph>-Parameter geschrieben wird.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)">
          <source>Remember that the <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> object saves state between calls to <ph id="ph2">&lt;xref:System.Text.Decoder.GetChars%2A&gt;</ph>.</source>
          <target state="translated">Beachten Sie, dass die <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> -Objekt speichert den Zustand zwischen Aufrufen von <ph id="ph2">&lt;xref:System.Text.Decoder.GetChars%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)">
          <source>When the application is done with a stream of data, it should set the <ph id="ph1">`flush`</ph> parameter to <ph id="ph2">`true`</ph> to make sure that the state information is flushed.</source>
          <target state="translated">Wenn die Anwendung einen Strom von Daten abgeschlossen ist, legen sie die <ph id="ph1">`flush`</ph> Parameter <ph id="ph2">`true`</ph> um sicherzustellen, dass die Zustandsinformationen geleert wird.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)">
          <source>With this setting, the decoder ignores invalid bytes at the end of the data block and clears the internal buffer.</source>
          <target state="translated">Mit dieser Einstellung wird vom Decoder ungültige Bytes am Ende des Datenblocks ignoriert und löscht den internen Puffer.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)">
          <source>To calculate the exact array size that <ph id="ph1">`GetChars`</ph> requires to store the resulting characters, the application should use <ph id="ph2">&lt;xref:System.Text.Decoder.GetCharCount%2A&gt;</ph>.</source>
          <target state="translated">Zum Berechnen der genauen Arraygröße <ph id="ph1">`GetChars`</ph> erfordert zum Speichern der resultierenden Zeichen, die Anwendung die zu verwendende <ph id="ph2">&lt;xref:System.Text.Decoder.GetCharCount%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)">
          <source>If <ph id="ph1">`GetChars`</ph> is called with <ph id="ph2">`flush`</ph> set to <ph id="ph3">`false`</ph>, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation.</source>
          <target state="translated">Wenn <ph id="ph1">`GetChars`</ph> aufgerufen wird und <ph id="ph2">`flush`</ph> festgelegt <ph id="ph3">`false`</ph>, Decoders nachfolgende Bytes am Ende der Datenblöcke in einem internen Puffer gespeichert und verwendet diese im nächsten Decodierungsvorgang.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)">
          <source>The application should call <ph id="ph1">`GetCharCount`</ph> on a block of data immediately before calling <ph id="ph2">`GetChars`</ph> on the same block, so that any trailing bytes from the previous block are included in the calculation.</source>
          <target state="translated">Die Anwendung sollte Aufrufen <ph id="ph1">`GetCharCount`</ph> auf einen Block von Daten unmittelbar vor dem Aufruf <ph id="ph2">`GetChars`</ph> auf den gleichen Block, damit nachfolgende Bytes aus dem vorherigen Block in die Berechnung eingeschlossen werden.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)">
          <source>If your application is to convert many segments of an input stream, consider using the <ph id="ph1">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph> method.</source>
          <target state="translated">Wenn Ihre Anwendung ist viele Segmente eines Eingabedatenstroms konvertieren, können Sie verwenden die <ph id="ph1">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Text.Decoder.GetChars%2A&gt;</ph> will throw an exception if the output buffer isn't large enough, but <ph id="ph2">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph> will fill as much space as possible and return the bytes read and chars written.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.Decoder.GetChars%2A&gt;</ph> löst eine Ausnahme aus, wenn die Ausgabepuffer nicht groß genug ist, aber <ph id="ph2">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph> wird so viel Speicherplatz wie möglich zu füllen und die gelesenen Bytes und geschriebenen Zeichen zurück.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)">
          <source>Also see the <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType&gt;</ph> topic for more comments.</source>
          <target state="translated">Siehe auch die <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType&gt;</ph> Thema weitere Kommentare.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>(<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)">
          <source>-or-</source>
          <target state="translated">- oder - </target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> ist <ph id="ph2">&lt;see langword="null" /&gt;</ph>(<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="byteIndex" /&gt;</ph> or <ph id="ph2">&lt;paramref name="byteCount" /&gt;</ph> or <ph id="ph3">&lt;paramref name="charIndex" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="byteIndex" /&gt;</ph>, <ph id="ph2">&lt;paramref name="byteCount" /&gt;</ph> oder <ph id="ph3">&lt;paramref name="charIndex" /&gt;</ph> ist kleiner als 0 (null).</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)">
          <source>-or-</source>
          <target state="translated">- oder - </target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="byteindex" /&gt;</ph> and <ph id="ph2">&lt;paramref name="byteCount" /&gt;</ph> do not denote a valid range in <ph id="ph3">&lt;paramref name="bytes" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="byteindex" /&gt;</ph> und <ph id="ph2">&lt;paramref name="byteCount" /&gt;</ph> geben keinen gültigen Bereich in <ph id="ph3">&lt;paramref name="bytes" /&gt;</ph> an.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)">
          <source>-or-</source>
          <target state="translated">- oder - </target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="charIndex" /&gt;</ph> is not a valid index in <ph id="ph2">&lt;paramref name="chars" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="charIndex" /&gt;</ph> ist kein gültiger Index in <ph id="ph2">&lt;paramref name="chars" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> does not have enough capacity from <ph id="ph2">&lt;paramref name="charIndex" /&gt;</ph> to the end of the array to accommodate the resulting characters.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> hat von <ph id="ph2">&lt;paramref name="charIndex" /&gt;</ph> bis zum Ende des Arrays nicht genügend Kapazität, um die sich ergebenden Zeichen aufzunehmen.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)</source>
          <target state="translated">Es ist ein Fallback aufgetreten (eine ausführliche Erläuterung finden Sie unter <bpt id="p1">[</bpt>Zeichencodierung in .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept>).</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)">
          <source>-and-</source>
          <target state="translated">- und -</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Decoder.Fallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph>.</source>
          <target state="translated">Für <ph id="ph1">&lt;see cref="P:System.Text.Decoder.Fallback" /&gt;</ph> ist <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph> festgelegt.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.Text.Decoder.Reset">
          <source>When overridden in a derived class, sets the decoder back to its initial state.</source>
          <target state="translated">Beim Überschreiben in einer abgeleiteten Klasse wird der Decoder in den Anfangszustand zurückversetzt.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.Reset">
          <source>This method clears the internal state of the <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> object.</source>
          <target state="translated">Diese Methode löscht den internen Zustand des der <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> Objekt.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.Reset">
          <source>The method clears any state information preserved from a previous call to <ph id="ph1">&lt;xref:System.Text.Decoder.GetChars%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph>, including trailing bytes at the end of the previous data block.</source>
          <target state="translated">Die Methode löscht alle Zustandsinformationen, die in einem vorherigen Aufruf von aufgezeichneten <ph id="ph1">&lt;xref:System.Text.Decoder.GetChars%2A&gt;</ph> oder <ph id="ph2">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph>, einschließlich nachfolgende Bytes am Ende des vorherigen Datenblocks.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Decoder.Reset">
          <source>Your application should call the <ph id="ph1">&lt;xref:System.Text.Decoder.Reset%2A&gt;</ph> method if it wants to reuse the same decoder even after an exception is thrown by <ph id="ph2">&lt;xref:System.Text.Decoder.GetChars%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph>, or <ph id="ph4">&lt;xref:System.Text.Decoder.GetCharCount%2A&gt;</ph>, or if the decoder switches streams and begins to decode another stream.</source>
          <target state="translated">Rufen Sie Ihre Anwendung sollte die <ph id="ph1">&lt;xref:System.Text.Decoder.Reset%2A&gt;</ph> Methode, wenn es derselbe Decoder verwendet werden, selbst wenn eine Ausnahme ausgelöst wird, indem Sie möchte <ph id="ph2">&lt;xref:System.Text.Decoder.GetChars%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph>, oder <ph id="ph4">&lt;xref:System.Text.Decoder.GetCharCount%2A&gt;</ph>, oder wenn der Decoder Streams schaltet an und beginnt, einen anderen Stream zu decodieren.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>
<Type Name="EncoderExceptionFallbackBuffer" FullName="System.Text.EncoderExceptionFallbackBuffer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="69d8fb411cc504d881d170ec41df8b4e3862d8a0" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37548869" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class EncoderExceptionFallbackBuffer : System.Text.EncoderFallbackBuffer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit EncoderExceptionFallbackBuffer extends System.Text.EncoderFallbackBuffer" />
  <TypeSignature Language="DocId" Value="T:System.Text.EncoderExceptionFallbackBuffer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EncoderExceptionFallbackBuffer&#xA;Inherits EncoderFallbackBuffer" />
  <TypeSignature Language="C++ CLI" Value="public ref class EncoderExceptionFallbackBuffer sealed : System::Text::EncoderFallbackBuffer" />
  <TypeSignature Language="F#" Value="type EncoderExceptionFallbackBuffer = class&#xA;    inherit EncoderFallbackBuffer" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.EncoderFallbackBuffer</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Löst eine <see cref="T:System.Text.EncoderFallbackException" /> aus, wenn ein Eingabezeichen nicht in eine codierte Ausgabebytefolge konvertiert werden kann. Diese Klasse kann nicht vererbt werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine häufige Ursache für ein Codierungs- oder Decodierungsvorgang nicht ist, wenn der zugrunde liegenden Codierungsklasse keine Zuordnung zwischen einem Zeichen und eine entsprechende Bytesequenz bereitstellt. Wenn das Eingabezeichen nicht in eine Ausgabebytefolge konvertiert werden kann, ruft der Codierungsvorgang der <xref:System.Text.EncoderExceptionFallbackBuffer.Fallback%2A> -Methode, die löst <xref:System.Text.EncoderFallbackException>.  
  
 Die <xref:System.Text.EncoderFallbackBuffer?displayProperty=nameWithType> -Klasse, die in einem Codierungsvorgang verwendeten Datenpuffer darstellt, ist die Basisklasse für die <xref:System.Text.EncoderExceptionFallbackBuffer> Klasse. Anstatt einen Datenpuffer, jedoch die <xref:System.Text.EncoderExceptionFallbackBuffer> Klasse darstellt, ein Standardverhalten in wird eine Ausnahme ausgelöst, wenn ein Codierung-Vorgang fehlschlägt. Keine tatsächlichen Datenpuffer vorhanden ist, und die Elemente, die zum Bearbeiten eines solchen Puffers entworfen haben keine wesentliche Aufgabe.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EncoderExceptionFallbackBuffer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderExceptionFallbackBuffer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EncoderExceptionFallbackBuffer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Text.EncoderExceptionFallbackBuffer" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Fallback">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Löst eine Ausnahme aus, da das Eingabezeichen nicht codiert werden kann. Der nominelle Rückgabewert wird nicht verwendet.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fallback">
      <MemberSignature Language="C#" Value="public override bool Fallback (char charUnknown, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Fallback(char charUnknown, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderExceptionFallbackBuffer.Fallback(System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Fallback (charUnknown As Char, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Fallback(char charUnknown, int index);" />
      <MemberSignature Language="F#" Value="override this.Fallback : char * int -&gt; bool" Usage="encoderExceptionFallbackBuffer.Fallback (charUnknown, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charUnknown" Type="System.Char" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charUnknown">Ein Eingabezeichen.</param>
        <param name="index">Die Indexposition des Zeichens im Eingabepuffer.</param>
        <summary>Löst eine Ausnahme aus, da das Eingabezeichen nicht codiert werden kann. Parameter geben den Wert und die Indexposition des Zeichens an, das nicht konvertiert werden kann.</summary>
        <returns>Keine Es wird kein Wert zurückgegeben, da die <see cref="M:System.Text.EncoderExceptionFallbackBuffer.Fallback(System.Char,System.Int32)" />-Methode immer eine Ausnahme auslöst.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Text.Encoding.GetBytes%2A> und <xref:System.Text.Encoder.Convert%2A> Methoden <xref:System.Text.EncoderExceptionFallbackBuffer.Fallback%2A> Wenn sie feststellen, dass ein unbekanntes Zeichen in der Eingabe. Im Gegenzug <xref:System.Text.EncoderExceptionFallbackBuffer.Fallback%2A> löst immer eine <xref:System.Text.EncoderFallbackException>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Text.EncoderFallbackException">Der <paramref name="charUnknown" />-Parameter darf nicht codiert sein. Diese Methode löst immer eine Ausnahme aus, die den Wert des <paramref name="charUnknown" />-Parameters und des <paramref name="index" />-Parameters meldet.</exception>
      </Docs>
    </Member>
    <Member MemberName="Fallback">
      <MemberSignature Language="C#" Value="public override bool Fallback (char charUnknownHigh, char charUnknownLow, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Fallback(char charUnknownHigh, char charUnknownLow, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderExceptionFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Fallback (charUnknownHigh As Char, charUnknownLow As Char, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Fallback(char charUnknownHigh, char charUnknownLow, int index);" />
      <MemberSignature Language="F#" Value="override this.Fallback : char * char * int -&gt; bool" Usage="encoderExceptionFallbackBuffer.Fallback (charUnknownHigh, charUnknownLow, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charUnknownHigh" Type="System.Char" />
        <Parameter Name="charUnknownLow" Type="System.Char" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charUnknownHigh">Das hohe Ersatzzeichen des Eingabepaars.</param>
        <param name="charUnknownLow">Das niedrige Ersatzzeichen des Eingabepaars.</param>
        <param name="index">Die Indexposition des Ersatzzeichenpaars im Eingabepuffer.</param>
        <summary>Löst eine Ausnahme aus, da das Eingabezeichen nicht codiert werden kann. Die Parameter geben den Wert und die Indexposition des Ersatzzeichenpaars in der Eingabe an. Der nominelle Rückgabewert wird nicht verwendet.</summary>
        <returns>Keine Es wird kein Wert zurückgegeben, da die <see cref="M:System.Text.EncoderExceptionFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)" />-Methode immer eine Ausnahme auslöst.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Text.Encoding.GetBytes%2A> und <xref:System.Text.Encoder.Convert%2A> Methoden <xref:System.Text.EncoderExceptionFallbackBuffer.Fallback%2A> Wenn sie feststellen, dass ein Ersatzzeichenpaar in der Eingabe. Im Gegenzug <xref:System.Text.EncoderExceptionFallbackBuffer.Fallback%2A> löst immer eine Ausnahme aus.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Text.EncoderFallbackException">Das vom <paramref name="charUnknownHigh" />-Parameter und vom <paramref name="charUnknownLow" />-Parameter dargestellte Zeichen kann nicht codiert werden.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="charUnknownHigh" /> oder <paramref name="charUnknownLow" /> ist ungültig. <paramref name="charUnknownHigh" /> liegt nicht zwischen U+D800 und U+DBFF (einschließlich), oder <paramref name="charUnknownLow" /> liegt nicht zwischen U+DC00 und U+DFFF (einschließlich).</exception>
      </Docs>
    </Member>
    <Member MemberName="GetNextChar">
      <MemberSignature Language="C#" Value="public override char GetNextChar ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance char GetNextChar() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderExceptionFallbackBuffer.GetNextChar" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetNextChar () As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override char GetNextChar();" />
      <MemberSignature Language="F#" Value="override this.GetNextChar : unit -&gt; char" Usage="encoderExceptionFallbackBuffer.GetNextChar " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft das nächste Zeichen im Ausnahmefallbackpuffer ab.</summary>
        <returns>Der Rückgabewert ist immer das Unicode-Zeichen NULL (U+0000).  Es ist ein Rückgabewert definiert, der allerdings unveränderlich ist, da diese Methode eine abstrakte Methode implementiert.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Da <xref:System.Text.EncoderExceptionFallbackBuffer> verfügt über keinen tatsächlichen Datenpuffer, der <xref:System.Text.EncoderExceptionFallbackBuffer.GetNextChar%2A> Methode gibt immer das Unicode-Zeichen NULL zurück.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MovePrevious">
      <MemberSignature Language="C#" Value="public override bool MovePrevious ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MovePrevious() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderExceptionFallbackBuffer.MovePrevious" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MovePrevious () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MovePrevious();" />
      <MemberSignature Language="F#" Value="override this.MovePrevious : unit -&gt; bool" Usage="encoderExceptionFallbackBuffer.MovePrevious " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Hierdurch kann der nächste Aufruf der <see cref="M:System.Text.EncoderExceptionFallbackBuffer.GetNextChar" />-Methode auf die Zeichenposition im Ausnahmedatenpuffer vor der aktuellen Position zugreifen.</summary>
        <returns>Der Rückgabewert ist immer <see langword="false" />.  Es ist ein Rückgabewert definiert, der allerdings unveränderlich ist, da diese Methode eine abstrakte Methode implementiert.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Da <xref:System.Text.EncoderExceptionFallbackBuffer> verfügt über keinen tatsächlichen Datenpuffer, der <xref:System.Text.EncoderExceptionFallbackBuffer.MovePrevious%2A> Methode gibt immer `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remaining">
      <MemberSignature Language="C#" Value="public override int Remaining { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Remaining" />
      <MemberSignature Language="DocId" Value="P:System.Text.EncoderExceptionFallbackBuffer.Remaining" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Remaining As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Remaining { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Remaining : int" Usage="System.Text.EncoderExceptionFallbackBuffer.Remaining" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Anzahl von Zeichen im aktuellen <see cref="T:System.Text.EncoderExceptionFallbackBuffer" />-Objekt ab, das noch verarbeitet werden soll.</summary>
        <value>Der Rückgabewert ist immer 0 (null).  Es ist ein Rückgabewert definiert, der allerdings unveränderlich ist, da diese Methode eine abstrakte Methode implementiert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Da <xref:System.Text.EncoderExceptionFallbackBuffer> verfügt über keinen tatsächlichen Datenpuffer, der <xref:System.Text.EncoderExceptionFallbackBuffer.Remaining%2A> Eigenschaft gibt immer 0 (null) zurück.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
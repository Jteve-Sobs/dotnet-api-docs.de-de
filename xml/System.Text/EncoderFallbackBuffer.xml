<Type Name="EncoderFallbackBuffer" FullName="System.Text.EncoderFallbackBuffer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9d205cd4beadd478078e91614ff032738be663d8" /><Meta Name="ms.sourcegitcommit" Value="9506e50ec7beb4fa30206b9840dc546b035a6600" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/23/2020" /><Meta Name="ms.locfileid" Value="83978999" /></Metadata><TypeSignature Language="C#" Value="public abstract class EncoderFallbackBuffer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit EncoderFallbackBuffer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.EncoderFallbackBuffer" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class EncoderFallbackBuffer" />
  <TypeSignature Language="C++ CLI" Value="public ref class EncoderFallbackBuffer abstract" />
  <TypeSignature Language="F#" Value="type EncoderFallbackBuffer = class" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Text.Encoding" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Text.Encoding" FromVersion="4.1.0.0" To="System.Runtime" ToVersion="4.2.0.0" FrameworkAlternate="netcore-2.0" />
    <TypeForwarding From="System.Text.Encoding" FromVersion="4.1.1.0" To="System.Runtime" ToVersion="4.2.1.0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
    <TypeForwarding From="System.Text.Encoding" FromVersion="4.1.2.0" To="System.Runtime" ToVersion="4.2.2.0" FrameworkAlternate="netcore-3.1" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt einen Puffer bereit, der einen Fallback-Handler zulässt, der eine alternative Zeichenfolge an einen Encoder zurückzugibt, wenn eine Eingabezeichen nicht codiert werden kann.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Codierung definiert eine Zuordnung zwischen einem Unicode-Zeichen und einer codierten Bytefolge. Ein Codierungs Vorgang, der ein Eingabezeichen in eine Ausgabe Byte Sequenz konvertiert, schlägt fehl, wenn für ein bestimmtes Zeichen keine Zuordnung definiert ist.  
  
 Der .NET Framework bietet einen Fehler Behandlungs Mechanismus, der als Fallback bezeichnet wird, wenn keine Konvertierung ausgeführt werden kann. Alle encoderfallbackhandler müssen Folgendes implementieren:  
  
-   Ein EncoderFallback, der durch eine von der-Klasse abgeleitete Klasse dargestellt wird <xref:System.Text.EncoderFallback> .  
  
-   Ein Fall Back Puffer für einen Encoder, der durch einen von der-Klasse abgeleiteten Typ dargestellt wird <xref:System.Text.EncoderFallbackBuffer> , der eine Zeichenfolge an den Konvertierungs Vorgang zurückgeben kann.  
  
 Fallbacks können drei Strategien zur Behandlung von Konvertierungs Fehlern verwenden:  
  
-   Zuordnung mit einer optimalen Anpassung. Der Fall Back Puffer des Encoders kann eine Zeichenfolge zurückgeben, die eine nahe Näherung zum Eingabezeichen darstellt. Der .NET Framework stellt keine öffentliche Implementierung mit optimaler Anpassung bereit <xref:System.Text.EncoderFallbackBuffer> .  
  
-   Ersatz. Der Fall Back Puffer des Encoders kann eine Zeichenfolge zurückgeben, z. b. ein Fragezeichen ("?"), das angibt, dass ein Zeichen nicht codiert werden konnte. In der .NET Framework stellen die <xref:System.Text.EncoderReplacementFallback> -Klasse und die- <xref:System.Text.EncoderReplacementFallbackBuffer> Klasse eine öffentliche Ersatz Fall Back Puffer Implementierung bereit. Der Konstruktor der- <xref:System.Text.EncoderReplacementFallback> Klasse ermöglicht es Ihnen, die Ersetzungs Zeichenfolge zu definieren.  
  
-   Ausnahme. Die- <xref:System.Text.EncoderFallbackBuffer> Implementierung löst eine Ausnahme aus, die angibt, dass ein Zeichen nicht codiert werden kann, und beendet den Codierungs Vorgang. In diesem Fall muss der Fall Back Handler eine Implementierung bereitstellen <xref:System.Text.EncoderFallbackBuffer> , obwohl er keine Zeichenfolge an den Encoder zurückgibt. In der <xref:System.Text.EncoderExceptionFallback> -.NET Framework stellen die-Klasse und die- <xref:System.Text.EncoderExceptionFallbackBuffer> Klasse eine öffentliche Ausnahmefall Back Implementierung bereit, die eine auslöst, <xref:System.Text.EncoderFallbackException> Wenn ein Zeichen nicht codiert werden kann.  
  
 Der Puffer in einer- <xref:System.Text.EncoderFallbackBuffer> Implementierung stellt die gesamte Zeichenfolge dar, die als Reaktion auf einen EncoderFallback an den Encoder zurückgegeben werden soll. Im Allgemeinen enthalten Implementierungen auch Zustandsinformationen, z. b. den Index des nächsten Zeichens, das an den Encoder zurückgegeben werden soll, und die Anzahl der verbleibenden Zeichen, die zurückgegeben werden sollen. Da <xref:System.Text.EncoderFallbackBuffer> eine abstrakte Klasse ist, ist es erforderlich, dass abgeleitete Klassen mindestens die folgenden Member implementieren:  
  
-   Die <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> überladene-Methode, die vom Encoder aufgerufen wird, wenn ein Zeichen nicht codiert werden kann. Der Encoder übergibt zwei Informationen an die Implementierung des Fall Back Puffers: das Zeichen oder Ersatz Zeichenpaar, das nicht codiert werden konnte, und den Index des Zeichens in der Eingabe. In einem Ausnahmehandler für einen EncoderFallback wird die Ausnahme in dieser Methode ausgelöst. Andernfalls gibt die Methode zurück `true` , wenn Sie einen Fallback bereitstellt, andernfalls `false` .  
  
-   Die- <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> Methode, die wiederholt vom Encoder aufgerufen wird, wenn die- <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> Methode zurückgibt `true` . Bei aufeinander folgenden Aufrufen sollte der Handler jedes Zeichen im Puffer zurückgeben. Wenn alle Zeichen zurückgegeben wurden, sollte Sie U + 0000 zurückgeben. Ein Ausnahmehandler gibt immer U + 0000 zurück.  
  
-   Die <xref:System.Text.EncoderFallbackBuffer.MovePrevious%2A> -Methode, die versucht, den Zeiger auf die vorherige Position im Puffer zu verschieben und angibt, ob die Verschiebung erfolgreich war. Ein Ausnahmehandler gibt immer zurück `false` .  
  
-   Die- <xref:System.Text.EncoderFallbackBuffer.Remaining%2A> Eigenschaft, die die Anzahl der verbleibenden Zeichen angibt, die an den Encoder zurückgegeben werden sollen. Ein Ausnahmefall Back Handler gibt immer 0 (null) zurück.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.EncoderFallback" />
    <related type="Article" href="/dotnet/standard/base-types/character-encoding">Zeichencodierung in .NET Framework</related>
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/Cyrillic-to-Roman-f7e88b29">Beispiel: Cyrillic in Roman Transliterations Utility</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected EncoderFallbackBuffer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderFallbackBuffer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; EncoderFallbackBuffer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Text.EncoderFallbackBuffer" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Fallback">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt an, ob eine Ersatzzeichenfolge verfügbar ist, wenn die ursprüngliche Eingabe nicht codiert werden kann, oder ob die ursprüngliche Eingabe ignoriert werden soll.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fallback">
      <MemberSignature Language="C#" Value="public abstract bool Fallback (char charUnknown, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Fallback(char charUnknown, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Fallback (charUnknown As Char, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Fallback(char charUnknown, int index);" />
      <MemberSignature Language="F#" Value="abstract member Fallback : char * int -&gt; bool" Usage="encoderFallbackBuffer.Fallback (charUnknown, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charUnknown" Type="System.Char" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charUnknown">Ein Eingabezeichen.</param>
        <param name="index">Die Indexposition des Zeichens im Eingabepuffer.</param>
        <summary>Bereitet beim Überschreiben in einer abgeleiteten Klasse den Fallbackpuffer darauf vor, das angegebene Eingabezeichen zu behandeln.</summary>
        <returns><see langword="true" />, wenn der Fallbackpuffer <paramref name="charUnknown" /> verarbeiten kann; <see langword="false" />, wenn der Fallbackpuffer <paramref name="charUnknown" /> ignoriert.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType> -und- <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType> Methoden <xref:System.Text.DecoderFallbackBuffer.Fallback%28System.Byte%5B%5D%2CSystem.Int32%29> werden aufgerufen, wenn Sie ein unbekanntes Eingabezeichen bemerken, das nicht codiert werden kann. Der Rückgabewert gibt an, `true` dass der Fall Back Puffer das Eingabezeichen verarbeiten kann. Dies bewirkt, dass die aufrufende Methode die-Methode aufruft, <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> um jedes Zeichen des Fall Back Puffers abzurufen. Da keine einzelnen Zeichen verarbeitet werden, löst die- <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> Methode in einem Ausnahmefall Back Handler eine-Ausnahme aus.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fallback">
      <MemberSignature Language="C#" Value="public abstract bool Fallback (char charUnknownHigh, char charUnknownLow, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Fallback(char charUnknownHigh, char charUnknownLow, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Fallback (charUnknownHigh As Char, charUnknownLow As Char, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Fallback(char charUnknownHigh, char charUnknownLow, int index);" />
      <MemberSignature Language="F#" Value="abstract member Fallback : char * char * int -&gt; bool" Usage="encoderFallbackBuffer.Fallback (charUnknownHigh, charUnknownLow, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charUnknownHigh" Type="System.Char" />
        <Parameter Name="charUnknownLow" Type="System.Char" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charUnknownHigh">Das hohe Ersatzzeichen des Eingabepaars.</param>
        <param name="charUnknownLow">Das niedrige Ersatzzeichen des Eingabepaars.</param>
        <param name="index">Die Indexposition des Ersatzzeichenpaars im Eingabepuffer.</param>
        <summary>Bereitet beim Überschreiben in einer abgeleiteten Klasse den Fallbackpuffer darauf vor, das angegebene Ersatzzeichenpaar zu behandeln.</summary>
        <returns><see langword="true" />, wenn der Fallbackpuffer <paramref name="charUnknownHigh" /> und <paramref name="charUnknownLow" /> verarbeiten kann; <see langword="false" />, wenn der Fallbackpuffer das Ersatzzeichenpaar ignoriert.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType> -und- <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType> Methoden werden aufgerufen, <xref:System.Text.EncoderFallbackBuffer.Fallback%28System.Char%2CSystem.Char%2CSystem.Int32%29> Wenn Sie in Ihrer Eingabe ein Ersatz Zeichenpaar treffen. Der Rückgabewert gibt an, `true` dass der Fall Back Puffer das Ersatz Zeichenpaar verarbeiten kann. Dies bewirkt, dass die aufrufende Methode die-Methode aufruft, <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> um jedes Zeichen des Fall Back Puffers abzurufen.  Da keine einzelnen Zeichen verarbeitet werden, löst die- <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> Methode in einem Ausnahmefall Back Handler eine-Ausnahme aus.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNextChar">
      <MemberSignature Language="C#" Value="public abstract char GetNextChar ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance char GetNextChar() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderFallbackBuffer.GetNextChar" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetNextChar () As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract char GetNextChar();" />
      <MemberSignature Language="F#" Value="abstract member GetNextChar : unit -&gt; char" Usage="encoderFallbackBuffer.GetNextChar " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft beim Überschreiben in einer abgeleiteten Klasse das nächste Zeichen im Fallbackpuffer ab.</summary>
        <returns>Ruft das nächste Zeichen im Fallbackpuffer ab.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei einem Codierungs Vorgang wird die-Methode aufgerufen, <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> Wenn der Vorgang auf ein unbekanntes Zeichen oder Ersatz Zeichenpaar in der Eingabe stößt. Wenn die Methode z. b. einen Ersatz Fall Back zurückgibt, <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> `true` gibt es eine Ersatz Zeichenfolge, die anstelle der unbekannten Eingabe codiert werden kann. Der Codierungs Vorgang ruft die <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> -Methode wiederholt auf und ruft die Ersatz Zeichenfolge ein Zeichen gleichzeitig ab. Wenn alle Zeichen im Fall Back Puffer an den Encoder zurückgegeben wurden, sollte die <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> Methode U + 0000 zurückgeben.  
  
 Bei einem Ausnahmefall Back Handler sollte die <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> Methode U + 0000 zurückgeben.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MovePrevious">
      <MemberSignature Language="C#" Value="public abstract bool MovePrevious ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MovePrevious() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderFallbackBuffer.MovePrevious" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function MovePrevious () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool MovePrevious();" />
      <MemberSignature Language="F#" Value="abstract member MovePrevious : unit -&gt; bool" Usage="encoderFallbackBuffer.MovePrevious " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Veranlasst beim Überschreiben in einer abgeleiteten Klasse, dass der nächste Aufruf an die <see cref="M:System.Text.EncoderFallbackBuffer.GetNextChar" />-Methode auf die Datenpufferzeichenposition vor der aktuellen Zeichenposition zugreift.</summary>
        <returns><see langword="true" />, wenn die <see cref="M:System.Text.EncoderFallbackBuffer.MovePrevious" />-Operation erfolgreich war, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein Ausnahmefall Back Handler sollte zurückgeben `false` .  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remaining">
      <MemberSignature Language="C#" Value="public abstract int Remaining { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Remaining" />
      <MemberSignature Language="DocId" Value="P:System.Text.EncoderFallbackBuffer.Remaining" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Remaining As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property int Remaining { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Remaining : int" Usage="System.Text.EncoderFallbackBuffer.Remaining" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft beim Überschreiben in einer abgeleiteten Klasse die Anzahl der Zeichen im aktuellen <see cref="T:System.Text.EncoderFallbackBuffer" />-Objekt ab, die noch zu verarbeiten sind.</summary>
        <value>Die Anzahl der Zeichen im aktuellen Fallbackpuffer, die noch nicht verarbeitet worden sind.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> Methode gibt zurück, `true` Wenn <xref:System.Text.EncoderFallbackBuffer.Remaining%2A> ein Wert ungleich 0 (null) ist.  
  
 Bei einem Ausnahmefall Back Handler sollte die- <xref:System.Text.DecoderFallbackBuffer.Remaining%2A> Methode 0 (null) zurückgeben.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public virtual void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderFallbackBuffer.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="encoderFallbackBuffer.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Initialisiert alle Daten und Zustandsinformationen, die diesen Fallbackpuffer betreffen.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>Nach dem Aufrufen der- <see cref="M:System.Text.EncoderFallbackBuffer.Reset" /> Methode sollte die-Eigenschaft 0 (null) <see cref="P:System.Text.EncoderFallbackBuffer.Remaining" /> zurückgeben, die <see cref="M:System.Text.EncoderFallbackBuffer.GetNextChar" /> -Methode sollte U + 0000 zurückgeben, und die- <see cref="M:System.Text.EncoderFallbackBuffer.MovePrevious" /> Methode sollte zurückgeben <see langword="false" /></para></block>
      </Docs>
    </Member>
  </Members>
</Type>

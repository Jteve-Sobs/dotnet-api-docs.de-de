<Type Name="EncoderFallbackBuffer" FullName="System.Text.EncoderFallbackBuffer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e141f420e0edf6d758c8945e920a86ecdb9ac315" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58721558" /></Metadata><TypeSignature Language="C#" Value="public abstract class EncoderFallbackBuffer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit EncoderFallbackBuffer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.EncoderFallbackBuffer" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class EncoderFallbackBuffer" />
  <TypeSignature Language="C++ CLI" Value="public ref class EncoderFallbackBuffer abstract" />
  <TypeSignature Language="F#" Value="type EncoderFallbackBuffer = class" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt einen Puffer bereit, der einem Fallbackhandler ermöglicht, eine alternative Zeichenfolge an einen Encoder zurückzugeben, wenn keine Eingabezeichen codiert werden können.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Codierung definiert eine Zuordnung zwischen einem Unicodezeichen und eine codierte Bytefolge. Ein Codierungsvorgang, der ein eingegebenes Zeichen in eine Ausgabebytefolge konvertiert werden soll, schlägt fehl, wenn für ein bestimmtes Zeichen keine Zuordnung definiert ist.  
  
 .NET Framework bietet einen Mechanismus, der als Fallback bezeichneten, wenn eine Konvertierung nicht durchgeführt werden kann. Alle Encoder-fallback-Handler müssen Folgendes implementieren:  
  
-   Ein EncoderFallback, die durch eine Klasse dargestellt wird, die von abgeleiteten der <xref:System.Text.EncoderFallback> Klasse.  
  
-   Ein Encoderfallbackpuffer, die durch einen von abgeleiteten Typ dargestellt wird die <xref:System.Text.EncoderFallbackBuffer> -Klasse, die eine Zeichenfolge an den Konvertierungsvorgang zurückgeben kann.  
  
 Drei Strategien können Fallbacks Konvertierungsfehler behandelt:  
  
-   Zuordnung mit ähnlichen Zeichen. Der Encoderfallbackpuffer kann es sich um eine Zeichenfolge zurückgeben, die eine starke Annäherung an das eingegebene Zeichen darstellt. .NET Framework bietet eine öffentliche Fallback mit ähnlichen Zeichen keine <xref:System.Text.EncoderFallbackBuffer> Implementierung.  
  
-   Ersatz. Der Encoderfallbackpuffer kann eine Zeichenfolge zurückgeben, z. B. ein Fragezeichen ("?"), das angibt, dass ein Zeichen nicht codiert werden kann. In .NET Framework die <xref:System.Text.EncoderReplacementFallback> und <xref:System.Text.EncoderReplacementFallbackBuffer> Klassen eine öffentliche Ersatz Fallbackpuffer-Implementierung bereitstellen. Der Konstruktor, der die <xref:System.Text.EncoderReplacementFallback> -Klasse können Sie die Ersetzungszeichenfolge definieren.  
  
-   Ausnahme. Die <xref:System.Text.EncoderFallbackBuffer> Implementierung eine Ausnahme auslöst, der angibt, dass ein Zeichen nicht codiert werden kann, und den Vorgang zum Codieren beendet. In diesem Fall muss die fallback-Handler Bereitstellen einer <xref:System.Text.EncoderFallbackBuffer> Implementierung, obwohl er an den Encoder keine Zeichenfolge zurückgibt. In .NET Framework die <xref:System.Text.EncoderExceptionFallback> und <xref:System.Text.EncoderExceptionFallbackBuffer> Klassen bieten eine fallbackimplementierung öffentlichen Ausnahme, die auslöst, ein <xref:System.Text.EncoderFallbackException> Wenn ein Zeichen nicht codiert werden kann.  
  
 Der Puffer in einen <xref:System.Text.EncoderFallbackBuffer> -Implementierung dar, die gesamte Zeichenfolge, die an den Encoder als Reaktion auf einen Encoder fallback zurückgegeben werden. Implementierungen umfassen im Allgemeinen auch Statusinformationen, z. B. der Index der nächsten zurückzugebenden Zeichens an der Encoder und die Anzahl der verbleibenden Zeichen zurückgegeben werden. Da <xref:System.Text.EncoderFallbackBuffer> ist eine abstrakte Klasse, sie erfordert die abgeleitete Klassen, die mindestens die folgenden Member implementieren:  
  
-   Die überladene <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> -Methode, die vom Encoder aufgerufen wird, wenn ein Zeichen nicht codiert werden kann. Der Encoder übergibt zwei Angaben für die Implementierung Fallbackpuffer: Zeichens oder Ersatzzeichenpaars, das nicht codiert werden kann und der Index des Zeichens in der Eingabe. In einem Ausnahmehandler für den Encoder-fallback wird die Ausnahme bei dieser Methode ausgelöst. Andernfalls der Methodenrückgabe `true` , wenn es als Fallback bereitstellt oder `false` Wenn dies nicht der Fall.  
  
-   Die <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> -Methode, die wiederholt vom Encoder aufgerufen wird die <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> Methodenrückgabe `true`. In aufeinander folgenden Aufrufen sollte der Handler für jedes Zeichen in den Puffer zurück. Wenn sie alle Zeichen zurückgegeben wurde, sollte es U + 0000 zurückgeben. Ein Ausnahmehandler wird immer zurückgegeben, U + 0000.  
  
-   Die <xref:System.Text.EncoderFallbackBuffer.MovePrevious%2A> Methode, die versucht, verschieben den Zeiger der vorherigen Position im Puffer und gibt an, ob die Verschiebung erfolgreich war. Ein Ausnahmehandler immer gibt `false`.  
  
-   Die <xref:System.Text.EncoderFallbackBuffer.Remaining%2A> -Eigenschaft, die gibt die Anzahl der verbleibenden Zeichen, die an den Encoder zurückgegeben werden. Ein Ausnahmehandler fallback gibt immer 0 (null) zurück.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.EncoderFallback" />
    <related type="Article" href="~/docs/standard/base-types/character-encoding.md">Zeichencodierung in .NET Framework</related>
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/Cyrillic-to-Roman-f7e88b29">Beispiel: Kyrillisch, römische Transliteration Utility</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected EncoderFallbackBuffer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderFallbackBuffer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; EncoderFallbackBuffer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Text.EncoderFallbackBuffer" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Fallback">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gibt an, ob eine Ersatzzeichenfolge verfügbar ist, wenn die ursprüngliche Eingabe nicht codiert werden kann, oder ob die ursprüngliche Eingabe ignoriert werden soll.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fallback">
      <MemberSignature Language="C#" Value="public abstract bool Fallback (char charUnknown, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Fallback(char charUnknown, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Fallback (charUnknown As Char, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Fallback(char charUnknown, int index);" />
      <MemberSignature Language="F#" Value="abstract member Fallback : char * int -&gt; bool" Usage="encoderFallbackBuffer.Fallback (charUnknown, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charUnknown" Type="System.Char" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charUnknown">Ein Eingabezeichen.</param>
        <param name="index">Die Indexposition des Zeichens im Eingabepuffer.</param>
        <summary>Bereitet beim Überschreiben in einer abgeleiteten Klasse den Fallbackpuffer darauf vor, das angegebene Eingabezeichen zu behandeln.</summary>
        <returns><see langword="true" />, wenn der Fallbackpuffer <paramref name="charUnknown" /> verarbeiten kann; <see langword="false" />, wenn der Fallbackpuffer <paramref name="charUnknown" /> ignoriert.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType> und <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType> Methoden <xref:System.Text.DecoderFallbackBuffer.Fallback%28System.Byte%5B%5D%2CSystem.Int32%29> , wenn sie über eine unbekannte Eingabezeichen treffen, das nicht codiert werden kann. Der Rückgabewert `true` gibt an, dass der Fallbackpuffer das Eingabezeichen,, die bewirkt, die aufrufende Methode verarbeiten kann dass aufrufen, die <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> Methode, um jedes Zeichen dem Fallbackpuffer abzurufen. Da es keine einzelne Zeichen verarbeitet die <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> -Methode in der einen fallback Ausnahmehandler löst eine Ausnahme aus.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fallback">
      <MemberSignature Language="C#" Value="public abstract bool Fallback (char charUnknownHigh, char charUnknownLow, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Fallback(char charUnknownHigh, char charUnknownLow, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Fallback (charUnknownHigh As Char, charUnknownLow As Char, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Fallback(char charUnknownHigh, char charUnknownLow, int index);" />
      <MemberSignature Language="F#" Value="abstract member Fallback : char * char * int -&gt; bool" Usage="encoderFallbackBuffer.Fallback (charUnknownHigh, charUnknownLow, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charUnknownHigh" Type="System.Char" />
        <Parameter Name="charUnknownLow" Type="System.Char" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charUnknownHigh">Das hohe Ersatzzeichen des Eingabepaars.</param>
        <param name="charUnknownLow">Das niedrige Ersatzzeichen des Eingabepaars.</param>
        <param name="index">Die Indexposition des Ersatzzeichenpaars im Eingabepuffer.</param>
        <summary>Bereitet beim Überschreiben in einer abgeleiteten Klasse den Fallbackpuffer darauf vor, das angegebene Ersatzzeichenpaar zu behandeln.</summary>
        <returns><see langword="true" />, wenn der Fallbackpuffer <paramref name="charUnknownHigh" /> und <paramref name="charUnknownLow" /> verarbeiten kann; <see langword="false" />, wenn der Fallbackpuffer das Ersatzzeichenpaar ignoriert.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType> und <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType> Methoden <xref:System.Text.EncoderFallbackBuffer.Fallback%28System.Char%2CSystem.Char%2CSystem.Int32%29> Wenn sie feststellen, dass ein Ersatzzeichenpaar in der Eingabe. Der Rückgabewert `true` gibt an, dass der Fallbackpuffer das Ersatzzeichenpaar verarbeiten kann, die bewirkt, die aufrufende Methode zum Aufrufen dass der <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> Methode, um jedes Zeichen dem Fallbackpuffer abzurufen.  Da es keine einzelne Zeichen verarbeitet die <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> -Methode in der einen fallback Ausnahmehandler löst eine Ausnahme aus.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNextChar">
      <MemberSignature Language="C#" Value="public abstract char GetNextChar ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance char GetNextChar() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderFallbackBuffer.GetNextChar" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetNextChar () As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract char GetNextChar();" />
      <MemberSignature Language="F#" Value="abstract member GetNextChar : unit -&gt; char" Usage="encoderFallbackBuffer.GetNextChar " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft beim Überschreiben in einer abgeleiteten Klasse das nächste Zeichen im Fallbackpuffer ab.</summary>
        <returns>Ruft das nächste Zeichen im Fallbackpuffer ab.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ruft ein Codierungsvorgang der <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> Methode, wenn der Vorgang ein unbekanntes Zeichen oder Ersatzzeichenpaar in der Eingabe auftritt. Z. B. im Fall von ein Replacement fallback, wenn die <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> Methodenrückgabe `true`, besteht eine Ersatzzeichenfolge, die anstelle der unbekannten Eingabe codiert werden kann. Die Codierung Aufrufe der <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> Methode wiederholt und ruft Sie jeweils ein Zeichen der Ersatzzeichenfolge ab. Wenn alle Zeichen im Fallbackpuffer an den Encoder, zurückgegeben wurden die <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> Methode sollte U + 0000 zurückgeben.  
  
 Für die fallback-Handler eine Ausnahme die <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> Methode sollte U + 0000 zurückgeben.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MovePrevious">
      <MemberSignature Language="C#" Value="public abstract bool MovePrevious ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MovePrevious() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderFallbackBuffer.MovePrevious" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function MovePrevious () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool MovePrevious();" />
      <MemberSignature Language="F#" Value="abstract member MovePrevious : unit -&gt; bool" Usage="encoderFallbackBuffer.MovePrevious " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Veranlasst beim Überschreiben in einer abgeleiteten Klasse, dass der nächste Aufruf an die <see cref="M:System.Text.EncoderFallbackBuffer.GetNextChar" />-Methode auf die Datenpufferzeichenposition vor der aktuellen Zeichenposition zugreift.</summary>
        <returns><see langword="true" />, wenn die <see cref="M:System.Text.EncoderFallbackBuffer.MovePrevious" />-Operation erfolgreich war, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sollte ein fallback Ausnahmehandler zurückgeben `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remaining">
      <MemberSignature Language="C#" Value="public abstract int Remaining { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Remaining" />
      <MemberSignature Language="DocId" Value="P:System.Text.EncoderFallbackBuffer.Remaining" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Remaining As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property int Remaining { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Remaining : int" Usage="System.Text.EncoderFallbackBuffer.Remaining" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft beim Überschreiben in einer abgeleiteten Klasse die Anzahl der Zeichen im aktuellen <see cref="T:System.Text.EncoderFallbackBuffer" />-Objekt ab, die noch zu verarbeiten sind.</summary>
        <value>Die Anzahl der Zeichen im aktuellen Fallbackpuffer, die noch nicht verarbeitet worden sind.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> Methodenrückgabe `true` Wenn <xref:System.Text.EncoderFallbackBuffer.Remaining%2A> ein Wert ungleich NULL ist.  
  
 Für die fallback-Handler eine Ausnahme die <xref:System.Text.DecoderFallbackBuffer.Remaining%2A> Methode sollte 0 (null) zurückgeben.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public virtual void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderFallbackBuffer.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="encoderFallbackBuffer.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Initialisiert alle Daten und Zustandsinformationen, die diesen Fallbackpuffer betreffen.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>Nach dem Aufruf der <see cref="M:System.Text.EncoderFallbackBuffer.Reset" /> -Methode, die <see cref="P:System.Text.EncoderFallbackBuffer.Remaining" /> Eigenschaft sollte 0 (null) zurückgeben der <see cref="M:System.Text.EncoderFallbackBuffer.GetNextChar" /> Methode sollte U + 0000 zurückgeben und die <see cref="M:System.Text.EncoderFallbackBuffer.MovePrevious" /> Methode zurückgeben soll <see langword="false" />.</para></block>
      </Docs>
    </Member>
  </Members>
</Type>
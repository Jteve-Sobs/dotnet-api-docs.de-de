<Type Name="ConstReverseBidirectionalIterator&lt;TValue&gt;" FullName="Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator&lt;TValue&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8af7b56a51bd5bf8a95cf1d04894749fa5d8b820" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37709491" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ConstReverseBidirectionalIterator&lt;TValue&gt; : Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator&lt;TValue&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ConstReverseBidirectionalIterator`1&lt;TValue&gt; extends System.Object implements class Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1&lt;!TValue&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />
  <TypeSignature Language="VB.NET" Value="Public Class ConstReverseBidirectionalIterator(Of TValue)&#xA;Implements IBidirectionalIterator(Of TValue)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TValue&gt;&#xA;public ref class ConstReverseBidirectionalIterator : Microsoft::VisualC::StlClr::Generic::IBidirectionalIterator&lt;TValue&gt;" />
  <TypeSignature Language="F#" Value="type ConstReverseBidirectionalIterator&lt;'Value&gt; = class&#xA;    interface IBidirectionalIterator&lt;'Value&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TValue" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator&lt;TValue&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TValue">
      <span data-ttu-id="40da7-101">[! Include[cpp_iter_arg](~/Includes/cpp-iter-arg-MD.MD)]</span>
      <span class="sxs-lookup">
        <span data-stu-id="40da7-101">[!INCLUDE[cpp_iter_arg](~/includes/cpp-iter-arg-md.md)]</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="40da7-102">Definiert einen Iterator, der auf Elemente in einem Container in umgekehrter Richtung zugreift.</span>
      <span class="sxs-lookup">
        <span data-stu-id="40da7-102">Defines an iterator that accesses elements in a container in the reverse direction.</span>
      </span>
      <span data-ttu-id="40da7-103">Der Zugriff auf Elemente kann vorwärts unter Verwendung des Dekrementoperators und rückwärts unter Verwendung des Inkrementoperators erfolgen.</span>
      <span class="sxs-lookup">
        <span data-stu-id="40da7-103">Elements can be accessed in the forward direction by using the decrement operator and in the backward direction by using the increment operator.</span>
      </span>
      <span data-ttu-id="40da7-104">Das Element, auf das der Iterator zeigt, kann nicht geändert werden.</span>
      <span class="sxs-lookup">
        <span data-stu-id="40da7-104">The element that the iterator points to cannot be modified.</span>
      </span>
      <span data-ttu-id="40da7-105">Dauerhaft umgekehrte bidirektionale Iteratoren können überall dort verwendet werden, wo ein Iterator für die dauerhaft umgekehrte Eingabe oder ein Iterator für die dauerhaft umgekehrte Ausgabe erforderlich ist.</span>
      <span class="sxs-lookup">
        <span data-stu-id="40da7-105">Constant reverse bidirectional iterators can be used anywhere that a constant reverse input or constant reverse output iterator is required.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[unnamed_parm](~/includes/unnamed-parm-md.md)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="40da7-106">Weist ein neues <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />-Objekt zu und initialisiert es.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-106">Allocates and initializes a new <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConstReverseBidirectionalIterator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConstReverseBidirectionalIterator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="40da7-107">Weist ein neues <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />-Objekt zu und initialisiert es.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-107">Allocates and initializes a new <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConstReverseBidirectionalIterator (Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (_Right As ConstReverseBidirectionalIterator)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConstReverseBidirectionalIterator(Microsoft::VisualC::StlClr::Generic::ConstReverseBidirectionalIterator ^ _Right);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="40da7-108">Ein vorhandenes <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />-Objekt, das kopiert werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-108">An existing <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> object to copy.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="40da7-109">Ordnet ein neues <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />-Objekt aus einem vorhandenen <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />-Objekt zu und initialisiert dieses.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-109">Allocates and initializes a new <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> object from an existing <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConstReverseBidirectionalIterator (Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator&lt;TValue&gt; _Iter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1&lt;!TValue&gt; _Iter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (_Iter As IBidirectionalIterator(Of TValue))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConstReverseBidirectionalIterator(Microsoft::VisualC::StlClr::Generic::IBidirectionalIterator&lt;TValue&gt; ^ _Iter);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator&lt;'Value&gt; : Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator&lt;'Value&gt; -&gt; Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator&lt;'Value&gt;" Usage="new Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator&lt;'Value&gt; _Iter" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="_Iter" Type="Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Iter">
          <span data-ttu-id="40da7-110">Ein vorhandenes <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" />-Objekt, das kopiert werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-110">An existing <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" /> object to copy.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="40da7-111">Ordnet ein neues <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />-Objekt aus einem vorhandenen <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" />-Objekt zu und initialisiert dieses.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-111">Allocates and initializes a new <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> object from an existing <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" /> object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConstReverseBidirectionalIterator (Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator _Iter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Iter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (_Iter As ReverseBidirectionalIterator)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConstReverseBidirectionalIterator(Microsoft::VisualC::StlClr::Generic::ReverseBidirectionalIterator ^ _Iter);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="_Iter" Type="Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator" />
      </Parameters>
      <Docs>
        <param name="_Iter">
          <span data-ttu-id="40da7-112">Ein vorhandenes <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />-Objekt, das kopiert werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-112">An existing <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> object to copy.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="40da7-113">Ordnet ein neues <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />-Objekt aus einem vorhandenen <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />-Objekt zu und initialisiert dieses.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-113">Allocates and initializes a new <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> object from an existing <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="base">
      <MemberSignature Language="C#" Value="public Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator&lt;TValue&gt; base ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1&lt;!TValue&gt; base() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.base" />
      <MemberSignature Language="VB.NET" Value="Public Function base () As IBidirectionalIterator(Of TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::VisualC::StlClr::Generic::IBidirectionalIterator&lt;TValue&gt; ^ base();" />
      <MemberSignature Language="F#" Value="member this.base : unit -&gt; Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator&lt;'Value&gt;" Usage="constReverseBidirectionalIterator.base " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="40da7-114">Ruft den zugrunde liegenden Basisiterator für das <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />-Objekt ab.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-114">Gets the underlying base iterator for the <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="40da7-115">Der zugrunde liegende Basisiterator für das <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />-Objekt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-115">The underlying base iterator for the <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> object.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="constReverseBidirectionalIterator.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="40da7-116">Gibt eine Kopie des aktuellen <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />-Objekts zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-116">Returns a copy of the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="40da7-117">Eine Kopie des aktuellen <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />-Objekts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-117">A copy of the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> object.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="container">
      <MemberSignature Language="C#" Value="public virtual object container ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object container() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.container" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function container () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ container();" />
      <MemberSignature Language="F#" Value="abstract member container : unit -&gt; obj&#xA;override this.container : unit -&gt; obj" Usage="constReverseBidirectionalIterator.container " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="40da7-118">Ruft den Container ab, den der Iterator durchläuft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-118">Gets the container that the iterator is traversing.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="40da7-119">Der Container, den der Iterator durchläuft.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-119">The container that the iterator is traversing.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="equal_to">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="40da7-120">Bestimmt, ob zwei Iteratoren das gleiche Objekt darstellen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-120">Determines whether two iterators are the same object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="equal_to">
      <MemberSignature Language="C#" Value="public bool equal_to (Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool equal_to(class Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Function equal_to (_Right As ConstReverseBidirectionalIterator) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool equal_to(Microsoft::VisualC::StlClr::Generic::ConstReverseBidirectionalIterator ^ _Right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="40da7-121">Das <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />-Objekt, das mit dem aktuellen <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />-Objekt verglichen werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-121">The <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> object to compare with the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="40da7-122">Bestimmt, ob das angegebene <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />-Objekt mit dem aktuellen <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />-Objekt übereinstimmt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-122">Determines whether the given <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> object is the same as the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="40da7-123">
            <see langword="true" />, wenn die beiden <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />-Objekte das gleiche Objekt darstellen, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-123">
              <see langword="true" /> if the two <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> objects are the same object; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="equal_to">
      <MemberSignature Language="C#" Value="public virtual bool equal_to (Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool equal_to(class Microsoft.VisualC.StlClr.Generic.IInputIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function equal_to (_Right As IInputIterator(Of TValue)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool equal_to(Microsoft::VisualC::StlClr::Generic::IInputIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="abstract member equal_to : Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;'Value&gt; -&gt; bool&#xA;override this.equal_to : Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;'Value&gt; -&gt; bool" Usage="constReverseBidirectionalIterator.equal_to _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="40da7-124">Das <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" />-Objekt, das mit dem aktuellen <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />-Objekt verglichen werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-124">The <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> object to compare with the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="40da7-125">Bestimmt, ob das angegebene <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" />-Objekt mit dem aktuellen <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />-Objekt übereinstimmt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-125">Determines whether the given <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> object is the same as the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="40da7-126">
            <see langword="true" />, wenn beide Iteratoren dasselbe Objekt darstellen, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-126">
              <see langword="true" /> if the two iterators are the same object; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="get_bias">
      <MemberSignature Language="C#" Value="public virtual int get_bias ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 get_bias() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.get_bias" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function get_bias () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int get_bias();" />
      <MemberSignature Language="F#" Value="abstract member get_bias : unit -&gt; int&#xA;override this.get_bias : unit -&gt; int" Usage="constReverseBidirectionalIterator.get_bias " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="get_cref">
      <MemberSignature Language="C#" Value="public virtual TValue get_cref ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TValue get_cref() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.get_cref" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function get_cref () As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TValue % get_cref();" />
      <MemberSignature Language="F#" Value="abstract member get_cref : unit -&gt; &#xA;override this.get_cref : unit -&gt; " Usage="constReverseBidirectionalIterator.get_cref " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue@</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="get_node">
      <MemberSignature Language="C#" Value="public virtual object get_node ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object get_node() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.get_node" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function get_node () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ get_node();" />
      <MemberSignature Language="F#" Value="abstract member get_node : unit -&gt; obj&#xA;override this.get_node : unit -&gt; obj" Usage="constReverseBidirectionalIterator.get_node " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="get_ref">
      <MemberSignature Language="C#" Value="public virtual TValue get_ref ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TValue get_ref() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.get_ref" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function get_ref () As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TValue % get_ref();" />
      <MemberSignature Language="F#" Value="abstract member get_ref : unit -&gt; &#xA;override this.get_ref : unit -&gt; " Usage="constReverseBidirectionalIterator.get_ref " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue@</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="next">
      <MemberSignature Language="C#" Value="public virtual void next ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void next() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.next" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub next ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void next();" />
      <MemberSignature Language="F#" Value="abstract member next : unit -&gt; unit&#xA;override this.next : unit -&gt; unit" Usage="constReverseBidirectionalIterator.next " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="40da7-127">Verringert den umgekehrten Iterator zur vorherigen Position im zugrunde liegenden Container oder zur ersten Position vor dem Anfang des Containers, wenn der Container vollständig durchlaufen wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-127">Decrements the iterator to the previous position in the underlying container, or to the first position in front of the beginning of container if the container has been completely traversed.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Assign">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="40da7-128">Weist dem aktuellen Objekt ein angegebenes Objekt zu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-128">Assigns a given object to the current object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Assign">
      <MemberSignature Language="C#" Value="public Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator op_Assign (Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance class Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) op_Assign(class Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public op_Assign (_Right As ConstReverseBidirectionalIterator) As ConstReverseBidirectionalIterator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::VisualC::StlClr::Generic::ConstReverseBidirectionalIterator ^ op_Assign(Microsoft::VisualC::StlClr::Generic::ConstReverseBidirectionalIterator ^ _Right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="40da7-129">Das <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />-Objekt, das dem aktuellen Objekt zugewiesen werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-129">The <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> object to assign to the current object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="40da7-130">Weist dem aktuellen Objekt das angegebene <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />-Objekt zu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-130">Assigns the given <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> object to the current object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="40da7-131">Das aktuelle Objekt (<c>\*dies</c>).</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-131">The current object (<c>\*this</c>).</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Assign">
      <MemberSignature Language="C#" Value="public Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator op_Assign (Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance class Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) op_Assign(class Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public op_Assign (_Right As ReverseBidirectionalIterator) As ConstReverseBidirectionalIterator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::VisualC::StlClr::Generic::ConstReverseBidirectionalIterator ^ op_Assign(Microsoft::VisualC::StlClr::Generic::ReverseBidirectionalIterator ^ _Right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="40da7-132">Das <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />-Objekt, das dem aktuellen Objekt zugewiesen werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-132">The <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> object to assign to the current object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="40da7-133">Weist dem aktuellen Objekt das angegebene <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />-Objekt zu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-133">Assigns the given <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> object to the current object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="40da7-134">Das aktuelle Objekt (<c>\*dies</c>).</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-134">The current object (<c>\*this</c>).</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Decrement">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="40da7-135">Verringert den Iterator um ein Element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-135">Decrements the iterator by one element.</span>
          </span>
          <span data-ttu-id="40da7-136">Das Verringern eines umgekehrten Iterators entspricht dem Erhöhen eines regulären Iterators.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-136">Decrementing a reverse iterator is the same as incrementing a regular iterator.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Decrement">
      <MemberSignature Language="C#" Value="public void operator -- (ref Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator&lt;TValue&gt; );" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance class System.void op_Decrement(class Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1&lt;!TValue&gt;&amp; ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public op_Decrement (ByRef  As ConstReverseBidirectionalIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ operator --(Microsoft::VisualC::StlClr::Generic::ConstReverseBidirectionalIterator&lt;TValue&gt; ^ % );" />
      <MemberSignature Language="F#" Value="member this.op_Decrement :  -&gt; unit" Usage="constReverseBidirectionalIterator.op_Decrement " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator&lt;TValue&gt;&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="">To be added.</param>
        <summary>
          <span data-ttu-id="40da7-137">Verringert den Iterator um ein Element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-137">Decrements the iterator by one element.</span>
          </span>
          <span data-ttu-id="40da7-138">Das Verringern eines umgekehrten Iterators entspricht dem Erhöhen eines regulären Iterators.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-138">Decrementing a reverse iterator is the same as incrementing a regular iterator.</span>
          </span>
          <span data-ttu-id="40da7-139">Dies ist die Präfix-Version des Dekrementoperators.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-139">This is the prefix version of the decrement operator.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="40da7-140">Ein Iterator.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-140">An iterator.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Decrement">
      <MemberSignature Language="C#" Value="public void operator -- (ref Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator&lt;TValue&gt; , int A_0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance class System.void op_Decrement(class Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1&lt;!TValue&gt;&amp; , int32 A_0) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public op_Decrement (ByRef  As ConstReverseBidirectionalIterator(Of TValue), A_0 As Integer) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ operator --(Microsoft::VisualC::StlClr::Generic::ConstReverseBidirectionalIterator&lt;TValue&gt; ^ % , int A_0);" />
      <MemberSignature Language="F#" Value="member this.op_Decrement :  * int -&gt; unit" Usage="constReverseBidirectionalIterator.op_Decrement (, A_0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator&lt;TValue&gt;&amp;" RefType="ref" />
        <Parameter Name="A_0" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="">To be added.</param>
        <param name="A_0">
          <span data-ttu-id="40da7-141">Ein nicht verwendeter Parameter, der angibt, dass es sich um die Postfixversion des Operators handelt</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-141">An unused parameter that indicates this is the postfix version of the operator.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="40da7-142">Verringert den Iterator um ein Element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-142">Decrements the iterator by one element.</span>
          </span>
          <span data-ttu-id="40da7-143">Das Verringern eines umgekehrten Iterators entspricht dem Erhöhen eines regulären Iterators.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-143">Decrementing a reverse iterator is the same as incrementing a regular iterator.</span>
          </span>
          <span data-ttu-id="40da7-144">Dies ist die Postfixversion des Dekrementoperators.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-144">This is the postfix version of the decrement operator.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="40da7-145">Ein Iterator.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-145">An iterator.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Equality">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="40da7-146">Bestimmt, ob zwei Iteratoren das gleiche Objekt darstellen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-146">Determines whether two iterators are the same object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public bool operator == (Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance bool op_Equality(class Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Operator == (_Right As ConstReverseBidirectionalIterator) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool operator ==(Microsoft::VisualC::StlClr::Generic::ConstReverseBidirectionalIterator ^ _Right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="40da7-147">Das <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />-Objekt, das mit dem aktuellen <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />-Objekt verglichen werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-147">The <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> object to compare with the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="40da7-148">Bestimmt, ob das angegebene <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />-Objekt mit dem aktuellen <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />-Objekt übereinstimmt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-148">Determines whether the given <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> object is the same as the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="40da7-149">
            <see langword="true" />, wenn beide Iteratoren dasselbe Objekt darstellen, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-149">
              <see langword="true" /> if the two iterators are the same object; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public bool operator == (Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance bool op_Equality(class Microsoft.VisualC.StlClr.Generic.IInputIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Operator == (_Right As IInputIterator(Of TValue)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool operator ==(Microsoft::VisualC::StlClr::Generic::IInputIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="member this.( = ) : Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;'Value&gt; -&gt; bool" Usage="= _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="40da7-150">Das <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" />-Objekt, das mit dem aktuellen <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />-Objekt verglichen werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-150">The <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> object to compare with the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="40da7-151">Bestimmt, ob das angegebene <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" />-Objekt mit dem aktuellen <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />-Objekt übereinstimmt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-151">Determines whether the given <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> object is the same as the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="40da7-152">
            <see langword="true" />, wenn beide Iteratoren dasselbe Objekt darstellen, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-152">
              <see langword="true" /> if the two iterators are the same object; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public implicit operator Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator&lt;TValue&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance class Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1&lt;!TValue&gt; op_Implicit() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Widening Operator CType () As IBidirectionalIterator(Of TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; operator Microsoft::VisualC::StlClr::Generic::IBidirectionalIterator&lt;TValue&gt; ^();" />
      <MemberSignature Language="F#" Value="member this.op_Implicit : unit -&gt; Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator&lt;'Value&gt;" Usage="constReverseBidirectionalIterator.op_Implicit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="40da7-153">Konvertiert einen <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> in einen <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-153">Converts a <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> to an <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="40da7-154">Der aktuelle Iterator als <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-154">The current iterator as an <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Increment">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="40da7-155">Erhöht den Iterator um ein Element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-155">Increments the iterator by one element.</span>
          </span>
          <span data-ttu-id="40da7-156">Das Erhöhen eines umgekehrten Iterators entspricht dem Verringern eines regulären Iterators.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-156">Incrementing a reverse iterator is the same as decrementing a regular iterator.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Increment">
      <MemberSignature Language="C#" Value="public void operator ++ (ref Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator&lt;TValue&gt; );" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance class System.void op_Increment(class Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1&lt;!TValue&gt;&amp; ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public op_Increment (ByRef  As ConstReverseBidirectionalIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ operator ++(Microsoft::VisualC::StlClr::Generic::ConstReverseBidirectionalIterator&lt;TValue&gt; ^ % );" />
      <MemberSignature Language="F#" Value="member this.op_Increment :  -&gt; unit" Usage="constReverseBidirectionalIterator.op_Increment " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator&lt;TValue&gt;&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="">To be added.</param>
        <summary>
          <span data-ttu-id="40da7-157">Erhöht den Iterator um ein Element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-157">Increments the iterator by one element.</span>
          </span>
          <span data-ttu-id="40da7-158">Das Erhöhen eines umgekehrten Iterators entspricht dem Verringern eines regulären Iterators.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-158">Incrementing a reverse iterator is the same as decrementing a regular iterator.</span>
          </span>
          <span data-ttu-id="40da7-159">Dies ist die Präfix-Version des Inkrementoperators.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-159">This is the prefix version of the increment operator.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="40da7-160">Ein Iterator.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-160">An iterator.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Increment">
      <MemberSignature Language="C#" Value="public void operator ++ (ref Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator&lt;TValue&gt; , int A_0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance class System.void op_Increment(class Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1&lt;!TValue&gt;&amp; , int32 A_0) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public op_Increment (ByRef  As ConstReverseBidirectionalIterator(Of TValue), A_0 As Integer) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ operator ++(Microsoft::VisualC::StlClr::Generic::ConstReverseBidirectionalIterator&lt;TValue&gt; ^ % , int A_0);" />
      <MemberSignature Language="F#" Value="member this.op_Increment :  * int -&gt; unit" Usage="constReverseBidirectionalIterator.op_Increment (, A_0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator&lt;TValue&gt;&amp;" RefType="ref" />
        <Parameter Name="A_0" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="">To be added.</param>
        <param name="A_0">
          <span data-ttu-id="40da7-161">Gibt an, dass es sich um die Postfix-Version des Inkrementoperators handelt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-161">Indicates that this is the postfix version of the increment operator.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="40da7-162">Erhöht den Iterator um ein Element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-162">Increments the iterator by one element.</span>
          </span>
          <span data-ttu-id="40da7-163">Das Erhöhen eines umgekehrten Iterators entspricht dem Verringern eines regulären Iterators.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-163">Incrementing a reverse iterator is the same as decrementing a regular iterator.</span>
          </span>
          <span data-ttu-id="40da7-164">Dies ist die Postfixversion des Inkrementoperators.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-164">This is the postfix version of the increment operator.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="40da7-165">Ein Iterator.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-165">An iterator.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Inequality">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="40da7-166">Bestimmt, ob zwei Iteratoren nicht das gleiche Objekt darstellen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-166">Determines whether two iterators are not the same object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public bool operator != (Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance bool op_Inequality(class Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Operator != (_Right As ConstReverseBidirectionalIterator) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool operator !=(Microsoft::VisualC::StlClr::Generic::ConstReverseBidirectionalIterator ^ _Right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="40da7-167">Das <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />-Objekt, das mit dem aktuellen <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />-Objekt verglichen werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-167">The <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> object to compare with the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="40da7-168">Bestimmt, ob sich das angegebene <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />-Objekt vom aktuellen <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />-Objekt unterscheidet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-168">Determines whether the given <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> object differs from the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="40da7-169">
            <see langword="true" />, wenn es sich bei den beiden Iteratoren um unterschiedliche Objekte handelt, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-169">
              <see langword="true" /> if the two iterators are different objects; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public bool operator != (Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance bool op_Inequality(class Microsoft.VisualC.StlClr.Generic.IInputIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Operator != (_Right As IInputIterator(Of TValue)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool operator !=(Microsoft::VisualC::StlClr::Generic::IInputIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="member this.op_Inequality : Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;'Value&gt; -&gt; bool" Usage="constReverseBidirectionalIterator.op_Inequality _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="40da7-170">Das <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" />-Objekt, das mit dem aktuellen <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />-Objekt verglichen werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-170">The <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> object to compare with the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="40da7-171">Bestimmt, ob sich das angegebene <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" />-Objekt vom aktuellen <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />-Objekt unterscheidet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-171">Determines whether the given <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> object differs from the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="40da7-172">
            <see langword="true" />, wenn es sich bei den beiden Iteratoren um unterschiedliche Objekte handelt, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-172">
              <see langword="true" /> if the two iterators are different objects; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_MemberSelection">
      <MemberSignature Language="C#" Value="public static TValue op_MemberSelection (Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator _Left);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname !TValue op_MemberSelection(class Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Left) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Shared op_MemberSelection (_Left As ConstReverseBidirectionalIterator) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TValue % op_MemberSelection(Microsoft::VisualC::StlClr::Generic::ConstReverseBidirectionalIterator ^ _Left);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1000")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TValue@</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Left" Type="Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator" />
      </Parameters>
      <Docs>
        <param name="_Left">
          <span data-ttu-id="40da7-173">Der Iterator, auf den der Operator angewendet wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-173">The iterator that the operator is applied to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="40da7-174">Gibt das Element zurück, auf das der Iterator derzeit zeigt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-174">Returns the element that the iterator is currently pointing to.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="40da7-175">Das Element, auf das der Iterator derzeit zeigt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-175">The element that the iterator is currently pointing to.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_PointerDereference">
      <MemberSignature Language="C#" Value="public static TValue op_PointerDereference (Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator _Left);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname !TValue op_PointerDereference(class Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Left) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Shared op_PointerDereference (_Left As ConstReverseBidirectionalIterator) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TValue % op_PointerDereference(Microsoft::VisualC::StlClr::Generic::ConstReverseBidirectionalIterator ^ _Left);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1000")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TValue@</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Left" Type="Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator" />
      </Parameters>
      <Docs>
        <param name="_Left">
          <span data-ttu-id="40da7-176">Der Iterator, auf den der Operator angewendet wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-176">The iterator that the operator is applied to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="40da7-177">Gibt das Element zurück, auf das der Iterator derzeit zeigt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-177">Returns the element that the iterator is currently pointing to.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="40da7-178">Das Element, auf das der Iterator derzeit zeigt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-178">The element that the iterator is currently pointing to.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="prev">
      <MemberSignature Language="C#" Value="public virtual void prev ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void prev() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.prev" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub prev ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void prev();" />
      <MemberSignature Language="F#" Value="abstract member prev : unit -&gt; unit&#xA;override this.prev : unit -&gt; unit" Usage="constReverseBidirectionalIterator.prev " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1.prev</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="40da7-179">Inkrementiert den Iterator zur nächsten Position im zugrunde liegenden Container oder zur ersten Position nach dem Ende des Containers, wenn der Container vollständig durchlaufen wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-179">Increments the iterator to the next position in the underlying container, or to the first position beyond the end of container if the container has been completely traversed.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="valid">
      <MemberSignature Language="C#" Value="public virtual bool valid ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool valid() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.valid" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function valid () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool valid();" />
      <MemberSignature Language="F#" Value="abstract member valid : unit -&gt; bool&#xA;override this.valid : unit -&gt; bool" Usage="constReverseBidirectionalIterator.valid " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="40da7-180">Bestimmt, ob der Iterator gültig ist und verwendet werden kann, um den zugrunde liegenden Container sicher zu durchlaufen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-180">Determines whether the iterator is valid and can be safely used to traverse the underlying container.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="40da7-181">
            <see langword="true" />, wenn der Iterator gültig ist und sicher verwendet werden kann, andernfalls <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40da7-181">
              <see langword="true" /> if the iterator is valid and safe to use; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
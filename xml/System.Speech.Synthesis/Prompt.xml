<Type Name="Prompt" FullName="System.Speech.Synthesis.Prompt">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1a1e938e4997a30cf3a84dda695aa761446f13d0" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30527354" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Prompt" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Prompt extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.Prompt" />
  <TypeSignature Language="VB.NET" Value="Public Class Prompt" />
  <TypeSignature Language="C++ CLI" Value="public ref class Prompt" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{_text}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Enthält Informationen darüber, was gerendert werden kann, entweder Text oder eine Audiodatei, durch den <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.Speech.Synthesis.Prompt> Objekt kann nur-Text-Text mit Markup Language oder audio-Dateien enthalten.  
  
 Ein leeres <xref:System.Speech.Synthesis.Prompt> -Objekt wird erstellt, wobei jede neue Instanz von <xref:System.Speech.Synthesis.PromptBuilder>.  Die <xref:System.Speech.Synthesis.PromptBuilder> Klasse enthält Methoden zum Hinzufügen von Inhalt, einschließlich Text, SSML-Markup, Lesezeichen und aufgezeichnete audio-Dateien (z. B. wav-Dateien), auf die leere <xref:System.Speech.Synthesis.Prompt> -Objekt, das sie enthält. Anwendungen verwenden normalerweise <xref:System.Speech.Synthesis.PromptBuilder>, anstelle eines <xref:System.Speech.Synthesis.Prompt> Objekt, das Sie Abfragen erstellen und füllen diese mit Inhalt.  
  
 Zum Generieren von Sprache aus dem Inhalt einer <xref:System.Speech.Synthesis.Prompt> -Objekts die <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> Methode.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Erstellt eine neue Instanz der <see cref="T:System.Speech.Synthesis.Prompt" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Prompt (System.Speech.Synthesis.PromptBuilder promptBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Synthesis.PromptBuilder promptBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.Prompt.#ctor(System.Speech.Synthesis.PromptBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Prompt(System::Speech::Synthesis::PromptBuilder ^ promptBuilder);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="promptBuilder" Type="System.Speech.Synthesis.PromptBuilder" />
      </Parameters>
      <Docs>
        <param name="promptBuilder">Der zu sprechende Inhalt.</param>
        <summary>Erstellt eine neue Instanz der <see cref="T:System.Speech.Synthesis.Prompt" />-Klasse aus einem <see cref="T:System.Speech.Synthesis.PromptBuilder" />-Objekt.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Prompt (string textToSpeak);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string textToSpeak) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.Prompt.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (textToSpeak As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Prompt(System::String ^ textToSpeak);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">Der zu sprechende Text.</param>
        <summary>Erstellt eine neue Instanz der <see cref="T:System.Speech.Synthesis.Prompt" />-Klasse und gibt den Text an, der gesprochen werden soll.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Beispiel erstellt eine <xref:System.Speech.Synthesis.Prompt> Objekt aus einer Zeichenfolge und übergibt das Objekt als Argument an die <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> Methode.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a prompt from a string.  
        Prompt color = new Prompt("What is your favorite color?");  
  
        // Speak the contents of the prompt synchronously.  
        synth.Speak(color);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Prompt (string textToSpeak, System.Speech.Synthesis.SynthesisTextFormat media);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string textToSpeak, valuetype System.Speech.Synthesis.SynthesisTextFormat media) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.Prompt.#ctor(System.String,System.Speech.Synthesis.SynthesisTextFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (textToSpeak As String, media As SynthesisTextFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Prompt(System::String ^ textToSpeak, System::Speech::Synthesis::SynthesisTextFormat media);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="media" Type="System.Speech.Synthesis.SynthesisTextFormat" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">Der zu sprechende Text.</param>
        <param name="media">Ein Wert, der das Format des Texts angibt.</param>
        <summary>Erstellt eine neue Instanz der <see cref="T:System.Speech.Synthesis.Prompt" />-Klasse und gibt den Text an, der gesprochen werden soll und, ob das Format Nur-Text oder Markupsprache ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Den Inhalt der `textToSpeak` -Parameter enthalten muss eine `speak` Element und entsprechen der [Speech Sprachsynthese Markup Language (SSML) Version 1.0](http://go.microsoft.com/fwlink/?LinkId=201763). Weitere Informationen finden Sie unter [Spracherkennung Sprachsynthese Markup Language Reference](http://msdn.microsoft.com/library/0c51279e-84d2-4f73-a924-8832039abf94).  
  
   
  
## Examples  
 Das folgende Beispiel erstellt eine Zeichenfolge, die SSML-Markup enthält, erstellt eine <xref:System.Speech.Synthesis.Prompt> Objekt aus der Zeichenfolge und spricht aufgefordert.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Build an SSML prompt in a string.  
        string fileName = "<speak version=\"1.0\" ";  
        fileName += "xmlns=\"http://www.w3.org/2001/10/synthesis\" ";  
        fileName += "xml:lang=\"en-US\">";  
        fileName += "Say a name for the new file <mark name=\"fileName\" />.";  
        fileName += "</speak>";  
  
        // Create a Prompt object from the string.  
        Prompt ssmlFile = new Prompt(fileName, SynthesisTextFormat.Ssml);  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(ssmlFile);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCompleted">
      <MemberSignature Language="C#" Value="public bool IsCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompleted" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.Prompt.IsCompleted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompleted { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab, ob <see cref="T:System.Speech.Synthesis.Prompt" /> die Wiedergabe beendet hat.</summary>
        <value>Gibt <see langword="true" /> zurück, wenn die Eingabeaufforderung abgeschlossen ist; andernfalls <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
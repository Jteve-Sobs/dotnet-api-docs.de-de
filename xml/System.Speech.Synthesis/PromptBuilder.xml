<Type Name="PromptBuilder" FullName="System.Speech.Synthesis.PromptBuilder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d8ac9527f1d8390729cbce5c6e880473b70ec941" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78738188" /></Metadata><TypeSignature Language="C#" Value="public class PromptBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit PromptBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.PromptBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class PromptBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class PromptBuilder" />
  <TypeSignature Language="F#" Value="type PromptBuilder = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="830e3-101">Erstellt ein leeres <see cref="T:System.Speech.Synthesis.Prompt" />-Objekt und stellt Methoden zum Hinzufügen von Inhalt, Auswählen von Stimmen, das Steuern von Stimmenattributen und das Steuern der Aussprache der gesprochenen Wörter bereit.</span><span class="sxs-lookup"><span data-stu-id="830e3-101">Creates an empty <see cref="T:System.Speech.Synthesis.Prompt" /> object and provides methods for adding content, selecting voices, controlling voice attributes, and controlling the pronunciation of spoken words.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="830e3-102">Mit <xref:System.Speech.Synthesis.PromptBuilder>können Sie einer Eingabeaufforderung eine Vielzahl von Inhaltstypen hinzufügen, einschließlich Klartext, SSML-Markup (als Zeichenfolge oder Datei), aufgezeichnete Audiodaten oder sogar ein anderes <xref:System.Speech.Synthesis.PromptBuilder> Objekt.</span><span class="sxs-lookup"><span data-stu-id="830e3-102">With <xref:System.Speech.Synthesis.PromptBuilder>, you can add a variety of content types to a prompt, including plain text, SSML markup (as a string or a file), recorded audio, or even another <xref:System.Speech.Synthesis.PromptBuilder> object.</span></span>  
  
 <span data-ttu-id="830e3-103">Um Text an ein <xref:System.Speech.Synthesis.PromptBuilder> Objekt anzufügen und optional sprach Attribute wie Betonung, Rate und Volume zu steuern, verwenden Sie eine der <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> Methoden.</span><span class="sxs-lookup"><span data-stu-id="830e3-103">To append text to a <xref:System.Speech.Synthesis.PromptBuilder> object and optionally control voice attributes such as emphasis, rate, and volume, use one of the <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> methods.</span></span>  <span data-ttu-id="830e3-104">Sie können sprach Attribute auch als Gruppe mit den Methoden <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> und <xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A> steuern.</span><span class="sxs-lookup"><span data-stu-id="830e3-104">You can also control voice attributes as a group with the <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> and <xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A> methods.</span></span>  
  
 <span data-ttu-id="830e3-105">Mithilfe der Methoden <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A>oder <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A> können Sie Text anfügen und Steuern, was gesprochen wird, oder wie er ausgesprochen wird.</span><span class="sxs-lookup"><span data-stu-id="830e3-105">You can append text and control what is spoken or how it is pronounced using the <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A>,  <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A>, or <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A> methods.</span></span>  
  
 <span data-ttu-id="830e3-106">Ändern Sie die derzeit ausgewählte Sprechstimme in der Eingabeaufforderung mit einer der überladenen <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> Methoden, benennen Sie eine bestimmte Stimme für die Verwendung, oder geben Sie die erforderlichen Sprachmerkmale an, z. b. Alter und Geschlecht.</span><span class="sxs-lookup"><span data-stu-id="830e3-106">Change the currently selected speaking voice in the prompt using one of the overloaded <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> methods, naming a specific voice to use or specifying required voice characteristics, such as age and gender.</span></span>  
  
 <span data-ttu-id="830e3-107">Wenn Sie Sprache aus einem <xref:System.Speech.Synthesis.PromptBuilder> Objekt generieren möchten, können Sie Sie als Argument an die <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>-Methode übergeben.</span><span class="sxs-lookup"><span data-stu-id="830e3-107">To generate speech from a <xref:System.Speech.Synthesis.PromptBuilder> object, you can pass it as an argument to the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> method.</span></span>  
  
 <span data-ttu-id="830e3-108">Weitere Informationen finden Sie unter [Erstellen einer komplexen Eingabeaufforderung](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361616(v%3doffice.14)).</span><span class="sxs-lookup"><span data-stu-id="830e3-108">For more information, see [Constructing a Complex Prompt](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361616(v%3doffice.14)).</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="830e3-109">Erstellt eine neue Instanz der <see cref="T:System.Speech.Synthesis.PromptBuilder" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="830e3-109">Creates a new instance of the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PromptBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PromptBuilder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="830e3-110">Erstellt eine neue Instanz der <see cref="T:System.Speech.Synthesis.PromptBuilder" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="830e3-110">Creates a new instance of the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="830e3-111">Im folgenden Beispiel wird eine neue <xref:System.Speech.Synthesis.PromptBuilder>-Instanz erstellt und ihr eine Text Zeichenfolge hinzugefügt.</span><span class="sxs-lookup"><span data-stu-id="830e3-111">The following example creates a new <xref:System.Speech.Synthesis.PromptBuilder> instance and adds a text string to it.</span></span>  
  
```csharp  
using System.Speech.Synthesis;  
  
public void MySimpleText ()  
{  
    PromptBuilder builder = new PromptBuilder ();  
    builder.AppendText("Hello world!");  
}  
```  
  
 <span data-ttu-id="830e3-112">Das folgende Markup zeigt das Äquivalent in der Sprache Synthese Markup Language (SSML), (`xml:lang` ist ein erforderliches Attribut des `speak`-Elements):</span><span class="sxs-lookup"><span data-stu-id="830e3-112">The following markup shows the equivalent in Speech Synthesis Markup Language (SSML), (`xml:lang` is a required attribute of the `speak` element):</span></span>  
  
```xml  
<speak version="1.0"  
 xmlns="http://www.w3.org/2001/10/synthesis" xml:lang="en-US">  
  Hello world!  
</speak>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PromptBuilder (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.#ctor(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PromptBuilder(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="new System.Speech.Synthesis.PromptBuilder : System.Globalization.CultureInfo -&gt; System.Speech.Synthesis.PromptBuilder" Usage="new System.Speech.Synthesis.PromptBuilder culture" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture"><span data-ttu-id="830e3-113">Enthält Informationen über eine bestimmte Kultur, wie ihre Sprache, den Namen der Kultur, das Schreibsystem, den verwendeten Kalender und darüber, wie Datumsangaben formatiert und Zeichenfolgen sortiert werden.</span><span class="sxs-lookup"><span data-stu-id="830e3-113">Provides information about a specific culture, such as its language, the name of the culture, the writing system, the calendar used, and how to format dates and sort strings.</span></span></param>
        <summary><span data-ttu-id="830e3-114">Erstellt eine neue Instanz der <see cref="T:System.Speech.Synthesis.PromptBuilder" />-Klasse und gibt eine Kultur an.</span><span class="sxs-lookup"><span data-stu-id="830e3-114">Creates a new instance of the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> class and specifies a culture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="830e3-115">Dieser Konstruktor legt den Wert für die <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>-Eigenschaft fest.</span><span class="sxs-lookup"><span data-stu-id="830e3-115">This constructor sets the value for the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property.</span></span> <span data-ttu-id="830e3-116">Das <xref:System.Speech.Synthesis.SpeechSynthesizer> Objekt versucht, eine installierte Stimme auszuwählen, die die durch den `culture`-Parameter angegebene Sprache zum Verarbeiten der Eingabeaufforderung unterstützt.</span><span class="sxs-lookup"><span data-stu-id="830e3-116">The <xref:System.Speech.Synthesis.SpeechSynthesizer> object will attempt to select an installed voice that supports the language specified by the `culture` parameter to process the prompt.</span></span> <span data-ttu-id="830e3-117">Wenn eine Stimme mit der angegebenen Kultur gefunden wird, wird diese verwendet.</span><span class="sxs-lookup"><span data-stu-id="830e3-117">If a voice with the specified culture is found, it will be used.</span></span> <span data-ttu-id="830e3-118">Wenn eine Stimme mit der angegebenen Kultur nicht gefunden werden kann, wird die Standardsprache verwendet.</span><span class="sxs-lookup"><span data-stu-id="830e3-118">If a voice with the specified culture cannot be found, the default voice will be used.</span></span>  
  
 <span data-ttu-id="830e3-119">Zum ordnungsgemäßen aussprechen von Wörtern in der durch den `culture`-Parameter angegebenen Sprache muss eine Sprachsynthese-Engine (Text-zu-Sprache oder TTS) installiert sein, die die Sprache unterstützt.</span><span class="sxs-lookup"><span data-stu-id="830e3-119">To correctly pronounce words in the language specified by the `culture` parameter, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed.</span></span> <span data-ttu-id="830e3-120">Eine installierte TTS-Engine wird als Stimme bezeichnet.</span><span class="sxs-lookup"><span data-stu-id="830e3-120">An installed TTS engine is called a voice.</span></span> <span data-ttu-id="830e3-121">Verwenden Sie die <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>-Methode, um Informationen darüber zu erhalten, welche Stimmen für eine bestimmte Kultur installiert sind.</span><span class="sxs-lookup"><span data-stu-id="830e3-121">To get information about which voices are installed for a specific culture, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method.</span></span>  
  
 <span data-ttu-id="830e3-122">Microsoft Windows und die System. Speech-API akzeptieren alle gültigen Sprachen Ländercodes als Werte für `culture`.</span><span class="sxs-lookup"><span data-stu-id="830e3-122">Microsoft Windows and the System.Speech API accept all valid language-country codes as values for `culture`.</span></span> <span data-ttu-id="830e3-123">Die TTS-Engines, die mit Windows 7 ausgeliefert wurden, unterstützen die folgenden sprach Ländercodes:</span><span class="sxs-lookup"><span data-stu-id="830e3-123">The TTS engines that shipped with Windows 7 support the following language-country codes:</span></span>  
  
-   <span data-ttu-id="830e3-124">en-US.</span><span class="sxs-lookup"><span data-stu-id="830e3-124">en-US.</span></span> <span data-ttu-id="830e3-125">Englisch (USA)</span><span class="sxs-lookup"><span data-stu-id="830e3-125">English (United States)</span></span>  
  
-   <span data-ttu-id="830e3-126">zh-CN.</span><span class="sxs-lookup"><span data-stu-id="830e3-126">zh-CN.</span></span> <span data-ttu-id="830e3-127">Chinesisch (China)</span><span class="sxs-lookup"><span data-stu-id="830e3-127">Chinese (China)</span></span>  
  
-   <span data-ttu-id="830e3-128">zh-tw.</span><span class="sxs-lookup"><span data-stu-id="830e3-128">zh-TW.</span></span> <span data-ttu-id="830e3-129">Chinesisch (Taiwan)</span><span class="sxs-lookup"><span data-stu-id="830e3-129">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="830e3-130">Sprachcodes mit zwei Buchstaben, z. b. "en", sind ebenfalls zulässig.</span><span class="sxs-lookup"><span data-stu-id="830e3-130">Two-letter language codes such as "en" are also permitted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="830e3-131">Im folgenden Beispiel wird eine <xref:System.Speech.Synthesis.PromptBuilder> Instanz erstellt und deren <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>angegeben.</span><span class="sxs-lookup"><span data-stu-id="830e3-131">The example that follows creates a <xref:System.Speech.Synthesis.PromptBuilder> instance and specifies its <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>.</span></span>  
  
```csharp  
using System.Speech.Synthesis;  
  
public void MySimpleText ()  
{  
    PromptBuilder builder = new PromptBuilder(new System.Globalization.CultureInfo("en-US"));  
    builder.AppendText("Hello world!");  
}  
```  
  
 <span data-ttu-id="830e3-132">Das folgende Markup zeigt die entsprechende SSML-Datei:</span><span class="sxs-lookup"><span data-stu-id="830e3-132">The following markup shows the equivalent SSML:</span></span>  
  
```xml  
<speak version="1.0"  
 xmlns="http://www.w3.org/2001/10/synthesis" xml:lang="en-US">  
  Hello world!  
</speak>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendAudio">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="830e3-133">Fügt einem <see cref="T:System.Speech.Synthesis.PromptBuilder" />-Objekt eine angegebene Audiodatei an.</span><span class="sxs-lookup"><span data-stu-id="830e3-133">Appends a specified audio file to a <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendAudio">
      <MemberSignature Language="C#" Value="public void AppendAudio (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendAudio(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendAudio(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendAudio (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendAudio(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.AppendAudio : string -&gt; unit" Usage="promptBuilder.AppendAudio path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="830e3-134">Der voll qualifizierte Pfads einer Audiodatei.</span><span class="sxs-lookup"><span data-stu-id="830e3-134">A fully qualified path to the audio file.</span></span></param>
        <summary><span data-ttu-id="830e3-135">Fügt die angegebene Audiodatei dem <see cref="T:System.Speech.Synthesis.PromptBuilder" /> an.</span><span class="sxs-lookup"><span data-stu-id="830e3-135">Appends the specified audio file to the <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendAudio">
      <MemberSignature Language="C#" Value="public void AppendAudio (Uri audioFile);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendAudio(class System.Uri audioFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendAudio(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendAudio (audioFile As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendAudio(Uri ^ audioFile);" />
      <MemberSignature Language="F#" Value="member this.AppendAudio : Uri -&gt; unit" Usage="promptBuilder.AppendAudio audioFile" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioFile" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="audioFile"><span data-ttu-id="830e3-136">URI für die Audiodatei.</span><span class="sxs-lookup"><span data-stu-id="830e3-136">URI for the audio file.</span></span></param>
        <summary><span data-ttu-id="830e3-137">Fügt die Audio-Datei am angegebenen URI an das <see cref="T:System.Speech.Synthesis.PromptBuilder" />-Objekt an.</span><span class="sxs-lookup"><span data-stu-id="830e3-137">Appends the audio file at the specified URI to the <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="830e3-138">Im folgenden Beispiel wird eine neue Instanz der <xref:System.Speech.Synthesis.PromptBuilder>-Klasse initialisiert und anschließend Text hinzugefügt, gefolgt von einer Audiodatei.</span><span class="sxs-lookup"><span data-stu-id="830e3-138">The following example initializes a new instance of the <xref:System.Speech.Synthesis.PromptBuilder> class and then adds text to it, followed by an audio file.</span></span>  
  
```csharp  
using System.Speech.PromptBuilder;  
  
public void SimpleConcatenation()  
{  
    // Add a prompt fragment from a .wav file.  
    PromptBuilder builder = new PromptBuilder ();  
    builder.AppendText("How are you today?");  
    builder.AppendAudio(new Uri ("http://www.speech.microsoft.com/ding.wav"));  
}  
```  
  
 <span data-ttu-id="830e3-139">Das folgende Markup zeigt das entsprechende SSML-Markup.</span><span class="sxs-lookup"><span data-stu-id="830e3-139">The following markup shows the equivalent SSML markup.</span></span>  
  
```xml  
<speak xmlns="http://www.w3.org/2001/10/synthesis"  
       xmlns:ms="http://www.microsoft.com/speech/synthesis" xml:lang="en">  
  
  How are you today?  
  <audio src="http://www.speech.microsoft.com/ding.wav" />  
  
</speak>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendAudio">
      <MemberSignature Language="C#" Value="public void AppendAudio (Uri audioFile, string alternateText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendAudio(class System.Uri audioFile, string alternateText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendAudio(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendAudio (audioFile As Uri, alternateText As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendAudio(Uri ^ audioFile, System::String ^ alternateText);" />
      <MemberSignature Language="F#" Value="member this.AppendAudio : Uri * string -&gt; unit" Usage="promptBuilder.AppendAudio (audioFile, alternateText)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioFile" Type="System.Uri" />
        <Parameter Name="alternateText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="audioFile"><span data-ttu-id="830e3-140">URI für die Audiodatei.</span><span class="sxs-lookup"><span data-stu-id="830e3-140">URI for the audio file.</span></span></param>
        <param name="alternateText"><span data-ttu-id="830e3-141">Eine Zeichenfolge, die den alternativen Text enthält, der das Audio darstellt.</span><span class="sxs-lookup"><span data-stu-id="830e3-141">A string containing alternate text representing the audio.</span></span></param>
        <summary><span data-ttu-id="830e3-142">Fügt die angegebene Audiodatei und den alternativen Text an das <see cref="T:System.Speech.Synthesis.PromptBuilder" />-Objekt an.</span><span class="sxs-lookup"><span data-stu-id="830e3-142">Appends the specified audio file and alternate text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="830e3-143">Die Sprachsynthese-Engine spricht den alternativen Text, wenn die Audiodatei nicht wiedergegeben werden kann.</span><span class="sxs-lookup"><span data-stu-id="830e3-143">The speech synthesis engine will speak the alternate text if the audio file cannot be played.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="830e3-144">In den folgenden Beispielen wird eine Audiodatei zu einer <xref:System.Speech.Synthesis.PromptBuilder>-Instanz hinzugefügt und Text angegeben, um zu sprechen, wenn die Audiodatei nicht wiedergegeben werden kann.</span><span class="sxs-lookup"><span data-stu-id="830e3-144">The following examples adds an audio file to a <xref:System.Speech.Synthesis.PromptBuilder> instance and specifies text to speak if the audio file cannot be played.</span></span>  
  
```csharp  
using System.Speech.PromptBuilder;  
  
public void SimpleConcatenation()  
{  
  
    // Concatenate a prompt fragment from a .wav file.  
    PromptBuilder builder = new PromptBuilder ();  
    builder.AppendAudio(new Uri ("C:\\OnHold.wav"), "Your call will be answered in the order it was received");  
}  
```  
  
 <span data-ttu-id="830e3-145">Das folgende Markup zeigt das entsprechende SSML-Markup.</span><span class="sxs-lookup"><span data-stu-id="830e3-145">The following markup shows the equivalent SSML markup.</span></span>  
  
```xml  
<speak xmlns="http://www.w3.org/2001/10/synthesis"  
       xmlns:ms="http://www.microsoft.com/speech/synthesis" xml:lang="en">  
  
  <audio src="C:\OnHold.wav"> Your call will be answered in the order it was received. </audio>  
  
</speak>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendBookmark">
      <MemberSignature Language="C#" Value="public void AppendBookmark (string bookmarkName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendBookmark(string bookmarkName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendBookmark(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendBookmark (bookmarkName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendBookmark(System::String ^ bookmarkName);" />
      <MemberSignature Language="F#" Value="member this.AppendBookmark : string -&gt; unit" Usage="promptBuilder.AppendBookmark bookmarkName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bookmarkName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="bookmarkName"><span data-ttu-id="830e3-146">Eine Zeichenfolge mit dem Namen des angefügten Lesezeichens.</span><span class="sxs-lookup"><span data-stu-id="830e3-146">A string containing the name of the appended bookmark.</span></span></param>
        <summary><span data-ttu-id="830e3-147">Fügt ein Lesezeichen an das <see cref="T:System.Speech.Synthesis.PromptBuilder" />-Objekt an.</span><span class="sxs-lookup"><span data-stu-id="830e3-147">Appends a bookmark to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="830e3-148">Eine Sprachsynthese-Engine generiert ein <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached> Ereignis, wenn Sie ein Lesezeichen findet, wenn eine Eingabeaufforderung mit einer der Methoden <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>oder <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> angezeigt wird.</span><span class="sxs-lookup"><span data-stu-id="830e3-148">A speech synthesis engine will generate a <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached> event if it encounters a bookmark while speaking a prompt using any of the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, or <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="830e3-149">Im folgenden Beispiel wird eine Eingabeaufforderung erstellt, die zwei Lesezeichen enthält und die Ausgabe für die Wiedergabe an eine WAV-Datei sendet.</span><span class="sxs-lookup"><span data-stu-id="830e3-149">The following example creates a prompt that includes two bookmarks and sends the output to a WAV file for playback.</span></span> <span data-ttu-id="830e3-150">Der Handler für das <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>-Ereignis schreibt den Namen des Lesezeichens und seine Position in den Audiostream, wenn das Ereignis auf der Konsole ausgelöst wurde.</span><span class="sxs-lookup"><span data-stu-id="830e3-150">The handler for the <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached> event writes the name of the bookmark and its position in the audio stream when the event was raised to the console.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\test\weather.wav");  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =  
          new System.Media.SoundPlayer(@"C:\test\weather.wav");  
  
        // Build a prompt and append bookmarks.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.AppendText(  
          "The weather forecast for today is partly cloudy with some sun breaks.");  
        builder.AppendBookmark("Daytime forecast");  
        builder.AppendText(  
          "Tonight's weather will be cloudy with a 30% chance of showers.");  
        builder.AppendBookmark("Nighttime forecast");  
  
        // Add a handler for the BookmarkReached event.  
        synth.BookmarkReached +=  
          new EventHandler<BookmarkReachedEventArgs>(synth_BookmarkReached);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write the name and position of the bookmark to the console.  
    static void synth_BookmarkReached(object sender, BookmarkReachedEventArgs e)  
    {  
      Console.WriteLine("Bookmark ({0}) reached at: {1} ",  
        e.Bookmark, e.AudioPosition);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendBreak">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="830e3-151">Fügt eine Unterbrechung (Anhalten) im Inhalt eines <see cref="T:System.Speech.Synthesis.PromptBuilder" />-Objekts ein.</span><span class="sxs-lookup"><span data-stu-id="830e3-151">Inserts a break (pause) in the content of a <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendBreak">
      <MemberSignature Language="C#" Value="public void AppendBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendBreak" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendBreak ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendBreak();" />
      <MemberSignature Language="F#" Value="member this.AppendBreak : unit -&gt; unit" Usage="promptBuilder.AppendBreak " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="830e3-152">Fügt dem <see cref="T:System.Speech.Synthesis.PromptBuilder" />-Objekt eine Unterbrechung an.</span><span class="sxs-lookup"><span data-stu-id="830e3-152">Appends a break to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="830e3-153">Diese Methode gibt keine Dauer für die Unterbrechung an.</span><span class="sxs-lookup"><span data-stu-id="830e3-153">This method does not specify a duration for the break.</span></span> <span data-ttu-id="830e3-154">Der <xref:System.Speech.Synthesis.SpeechSynthesizer> bestimmt einen Duration-Wert basierend auf dem linguistischen Kontext.</span><span class="sxs-lookup"><span data-stu-id="830e3-154">The <xref:System.Speech.Synthesis.SpeechSynthesizer> will determine a duration value based on the linguistic context.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="830e3-155">Im folgenden Beispiel wird eine Eingabeaufforderung mit zwei Sätzen erstellt, die durch eine Unterbrechung getrennt sind, und die Eingabeaufforderung wird auf dem Standard Audiogerät des Computers angezeigt.</span><span class="sxs-lookup"><span data-stu-id="830e3-155">The following example builds a prompt containing two sentences separated by a break and speaks the prompt to the default audio device on the computer.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Build a prompt with two sentences separated by a break.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.AppendText(  
          "Tonight's movie showings in theater A are at 5:45, 7:15, and 8:45.");  
        builder.AppendBreak();  
        builder.AppendText(  
          "Tonight's movie showings in theater B are at 5:15, 7:30, and 9:15.");  
  
        // Speak the prompt.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendBreak">
      <MemberSignature Language="C#" Value="public void AppendBreak (System.Speech.Synthesis.PromptBreak strength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendBreak(valuetype System.Speech.Synthesis.PromptBreak strength) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendBreak(System.Speech.Synthesis.PromptBreak)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendBreak (strength As PromptBreak)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendBreak(System::Speech::Synthesis::PromptBreak strength);" />
      <MemberSignature Language="F#" Value="member this.AppendBreak : System.Speech.Synthesis.PromptBreak -&gt; unit" Usage="promptBuilder.AppendBreak strength" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strength" Type="System.Speech.Synthesis.PromptBreak" />
      </Parameters>
      <Docs>
        <param name="strength"><span data-ttu-id="830e3-156">Gibt die Dauer der Unterbrechung an, mit den folgenden Erhöhungswerten:</span><span class="sxs-lookup"><span data-stu-id="830e3-156">Indicates the duration of the break, with the following increasing values:</span></span></param>
        <summary><span data-ttu-id="830e3-157">Fügt dem <see cref="T:System.Speech.Synthesis.PromptBuilder" />-Objekt eine Unterbrechung an und gibt die Stärke (Dauer) an.</span><span class="sxs-lookup"><span data-stu-id="830e3-157">Appends a break to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies its strength (duration).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="830e3-158">Die Werte in der <xref:System.Speech.Synthesis.PromptBreak>-Enumeration stellen einen Bereich von Trennungs Intervallen (Pausen) zwischen Wortgrenzen dar.</span><span class="sxs-lookup"><span data-stu-id="830e3-158">The values in the <xref:System.Speech.Synthesis.PromptBreak> enumeration represent a range of separation intervals (pauses) between word boundaries.</span></span> <span data-ttu-id="830e3-159">Die Sprachsynthese-Engine bestimmt die genaue Dauer des Intervalls.</span><span class="sxs-lookup"><span data-stu-id="830e3-159">The speech synthesis engine determines the exact duration of the interval.</span></span> <span data-ttu-id="830e3-160">Wenn eine Unterbrechung angefordert wird, wird einer dieser Werte an das TTS-Modul (Text-to-Speech), das eine Zuordnung zwischen diesen Werten und den entsprechenden Millisekunden-Break-Werten enthält, übermittelt.</span><span class="sxs-lookup"><span data-stu-id="830e3-160">When a break is requested, one of these values is passed to the text-to-speech (TTS) engine, which contains a mapping between these values and the corresponding millisecond break values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="830e3-161">Im folgenden Beispiel wird eine Eingabeaufforderung mit zwei durch eine Unterbrechung getrennten Sätzen erstellt, und die Ausgabe wird zur Wiedergabe an eine WAV-Datei gesendet.</span><span class="sxs-lookup"><span data-stu-id="830e3-161">The following example builds a prompt containing two sentences separated by a break and sends the output to a WAV file for playback.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\test\weather.wav");  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =  
          new System.Media.SoundPlayer(@"C:\test\weather.wav");  
  
        // Build a prompt with two sentences separated by a break.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.AppendText(  
          "Tonight's movie showings in theater A are at 5:45, 7:15, and 8:45");  
        builder.AppendBreak(PromptBreak.Medium);  
        builder.AppendText(  
          "Tonight's movie showings in theater B are at 5:15, 7:15, and 9:15");  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendBreak">
      <MemberSignature Language="C#" Value="public void AppendBreak (TimeSpan duration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendBreak(valuetype System.TimeSpan duration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendBreak(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendBreak (duration As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendBreak(TimeSpan duration);" />
      <MemberSignature Language="F#" Value="member this.AppendBreak : TimeSpan -&gt; unit" Usage="promptBuilder.AppendBreak duration" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="duration" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="duration"><span data-ttu-id="830e3-162">Die Zeit in Ticks, wobei ein Tick 100 Nanosekunden entspricht.</span><span class="sxs-lookup"><span data-stu-id="830e3-162">The time in ticks, where one tick equals 100 nanoseconds.</span></span></param>
        <summary><span data-ttu-id="830e3-163">Fügt an das <see cref="T:System.Speech.Synthesis.PromptBuilder" />-Objekt eine Unterbrechung der angegebenen Dauer an.</span><span class="sxs-lookup"><span data-stu-id="830e3-163">Appends a break of the specified duration to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="830e3-164">Eine Unterbrechung kann verwendet werden, um Pausen oder andere prosodischen-Begrenzungen zwischen Wörtern zu steuern.</span><span class="sxs-lookup"><span data-stu-id="830e3-164">A break can be used to control pauses or other prosodic boundaries between words.</span></span> <span data-ttu-id="830e3-165">Eine Unterbrechung ist optional.</span><span class="sxs-lookup"><span data-stu-id="830e3-165">A break is optional.</span></span> <span data-ttu-id="830e3-166">Wenn keine Unterbrechung vorhanden ist, bestimmt der Synthesizer die Unterbrechung zwischen Wörtern abhängig vom linguistischen Kontext.</span><span class="sxs-lookup"><span data-stu-id="830e3-166">If a break is not present, the synthesizer determines the break between words depending on the linguistic context.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="830e3-167">Im folgenden Beispiel wird eine Eingabeaufforderung mit zwei Sätzen erstellt, die durch eine Unterbrechung von 15 Millionen Ticks (1,5 Sekunden) getrennt sind, und die Aufforderung wird an das Standardaudiogerät auf dem Computer ausgegeben.</span><span class="sxs-lookup"><span data-stu-id="830e3-167">The following example builds a prompt containing two sentences separated by a break of 15,000,000 ticks (1.5 seconds), and speaks the prompt to the default audio device on the computer.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Build a prompt with two sentences separated by a break.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.AppendText(  
          "Tonight's movie showings in theater A are at 5:45, 7:15, and 8:45");  
        builder.AppendBreak(new TimeSpan(15000000));  
        builder.AppendText(  
          "Tonight's movie showings in theater B are at 5:15, 7:15, and 9:15");  
  
        // Speak the prompt.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendPromptBuilder">
      <MemberSignature Language="C#" Value="public void AppendPromptBuilder (System.Speech.Synthesis.PromptBuilder promptBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendPromptBuilder(class System.Speech.Synthesis.PromptBuilder promptBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendPromptBuilder(System.Speech.Synthesis.PromptBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendPromptBuilder (promptBuilder As PromptBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendPromptBuilder(System::Speech::Synthesis::PromptBuilder ^ promptBuilder);" />
      <MemberSignature Language="F#" Value="member this.AppendPromptBuilder : System.Speech.Synthesis.PromptBuilder -&gt; unit" Usage="promptBuilder.AppendPromptBuilder promptBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="promptBuilder" Type="System.Speech.Synthesis.PromptBuilder" />
      </Parameters>
      <Docs>
        <param name="promptBuilder"><span data-ttu-id="830e3-168">Der Inhalt, der angefügt werden soll.</span><span class="sxs-lookup"><span data-stu-id="830e3-168">The content to append.</span></span></param>
        <summary><span data-ttu-id="830e3-169">Fügt ein <see cref="T:System.Speech.Synthesis.PromptBuilder" />-Objekt an ein anderes <see cref="T:System.Speech.Synthesis.PromptBuilder" />-Objekt an.</span><span class="sxs-lookup"><span data-stu-id="830e3-169">Appends a <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object to another <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="830e3-170">Im folgenden Beispiel werden zwei <xref:System.Speech.Synthesis.PromptBuilder> Instanzen erstellt und dann an ein drittes <xref:System.Speech.Synthesis.PromptBuilder>angefügt.</span><span class="sxs-lookup"><span data-stu-id="830e3-170">The example that follows creates two <xref:System.Speech.Synthesis.PromptBuilder> instances and then appends them to a third <xref:System.Speech.Synthesis.PromptBuilder>.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\test\showtimes.wav");  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =  
          new System.Media.SoundPlayer(@"C:\test\showtimes.wav");  
  
        // Build child prompts.  
        PromptBuilder theatreA = new PromptBuilder();  
        theatreA.AppendText(  
          "Tonight's movie showings in theater A are at 5:45, 7:15, and 9:30");  
        theatreA.AppendBreak(PromptBreak.Large);  
        PromptBuilder theatreB = new PromptBuilder();  
        theatreB.AppendText(  
          "Tonight's movie showings in theater B are at 5:15, 7:15, and 9:15");  
  
        // Build the parent prompt and append the two child prompts.  
        PromptBuilder showTimes = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        showTimes.AppendText(  
          "The following are the show times for tonight's movies:");  
        showTimes.AppendPromptBuilder(theatreA);  
        showTimes.AppendPromptBuilder(theatreB);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(showTimes);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendSsml">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="830e3-171">Fügt eine SSML-Datei an ein <see cref="T:System.Speech.Synthesis.PromptBuilder" />-Objekt an.</span><span class="sxs-lookup"><span data-stu-id="830e3-171">Appends an SSML file to a <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendSsml">
      <MemberSignature Language="C#" Value="public void AppendSsml (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendSsml(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendSsml(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendSsml (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendSsml(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.AppendSsml : string -&gt; unit" Usage="promptBuilder.AppendSsml path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="830e3-172">Ein voll qualifizierter Pfad, der der SSML-Datei anzufügen ist.</span><span class="sxs-lookup"><span data-stu-id="830e3-172">A fully qualified path to the SSML file to append.</span></span></param>
        <summary><span data-ttu-id="830e3-173">Fügt die SSML-Datei am angegebenen Pfad an das <see cref="T:System.Speech.Synthesis.PromptBuilder" />-Objekt an.</span><span class="sxs-lookup"><span data-stu-id="830e3-173">Appends the SSML file at the specified path to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="830e3-174">Bei der SSML-Datei muss es sich um eine XML-Format Datei handeln, die der Spezifikation der [Sprache Synthese Markup Language (SSML) Version 1,0](https://go.microsoft.com/fwlink/?LinkId=201763) entspricht.</span><span class="sxs-lookup"><span data-stu-id="830e3-174">The SSML file must be an XML-format file that conforms to the [Speech Synthesis Markup Language (SSML) Version 1.0](https://go.microsoft.com/fwlink/?LinkId=201763) specification.</span></span>  
  
 <span data-ttu-id="830e3-175">Sie können auch SSML-Markup als Zeichenfolge anfügen, indem Sie <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>verwenden.</span><span class="sxs-lookup"><span data-stu-id="830e3-175">You can also append SSML markup as a string using <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="830e3-176">Im folgenden Beispiel wird ein <xref:System.Speech.Synthesis.PromptBuilder>-Objekt erstellt und der Inhalt einer SSML-Datei mithilfe der <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A>-Methode angefügt.</span><span class="sxs-lookup"><span data-stu-id="830e3-176">The example that follows creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends the contents of an SSML file using the <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> method.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and append a file that defines an SSML prompt.  
        PromptBuilder ssmlFile = new PromptBuilder();  
        ssmlFile.AppendSsml("c:\\test\\Weather.ssml");  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(ssmlFile);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 <span data-ttu-id="830e3-177">Im folgenden finden Sie die SSML-Datei, auf die im vorherigen Beispiel verwiesen wird.</span><span class="sxs-lookup"><span data-stu-id="830e3-177">The following is the SSML file that the preceding example references.</span></span>  
  
```xml  
<?xml version="1.0" encoding="ISO-8859-1"?>  
<speak version="1.0"  
 xmlns="http://www.w3.org/2001/10/synthesis"  
 xml:lang="en-US">  
  
  <s> The weather forecast for today is partly cloudy with some sun breaks. </s>  
  
</speak>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendSsml">
      <MemberSignature Language="C#" Value="public void AppendSsml (Uri ssmlFile);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendSsml(class System.Uri ssmlFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendSsml(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendSsml (ssmlFile As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendSsml(Uri ^ ssmlFile);" />
      <MemberSignature Language="F#" Value="member this.AppendSsml : Uri -&gt; unit" Usage="promptBuilder.AppendSsml ssmlFile" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ssmlFile" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="ssmlFile"><span data-ttu-id="830e3-178">Ein vollqualifizierter URI zu der SSML-Datei, die angefügt werden soll.</span><span class="sxs-lookup"><span data-stu-id="830e3-178">A fully qualified URI to the SSML file to append.</span></span></param>
        <summary><span data-ttu-id="830e3-179">Fügt die SSML-Datei am angegebenen URI an das <see cref="T:System.Speech.Synthesis.PromptBuilder" />-Objekt an.</span><span class="sxs-lookup"><span data-stu-id="830e3-179">Appends the SSML file at the specified URI to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="830e3-180">Bei der SSML-Datei muss es sich um eine XML-Format Datei handeln, die der Spezifikation der [Sprache Synthese Markup Language (SSML) Version 1,0](https://www.w3.org/TR/speech-synthesis/) entspricht.</span><span class="sxs-lookup"><span data-stu-id="830e3-180">The SSML file must be an XML-format file that conforms to the [Speech Synthesis Markup Language (SSML) Version 1.0](https://www.w3.org/TR/speech-synthesis/) specification.</span></span>  
  
 <span data-ttu-id="830e3-181">Sie können auch SSML-Markup als Zeichenfolge anfügen, indem Sie <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>verwenden.</span><span class="sxs-lookup"><span data-stu-id="830e3-181">You can also append SSML markup as a string using <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="830e3-182">Im folgenden Beispiel wird ein <xref:System.Speech.Synthesis.PromptBuilder>-Objekt erstellt und der Inhalt einer SSML-Datei mithilfe der <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A>-Methode angefügt.</span><span class="sxs-lookup"><span data-stu-id="830e3-182">The example that follows creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends the contents of an SSML file using the <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> method.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and append a file that defines an SSML prompt.  
        PromptBuilder ssmlFile = new PromptBuilder();  
        ssmlFile.AppendSsml(new Uri("c:\\test\\Weather.ssml"));  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(ssmlFile);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 <span data-ttu-id="830e3-183">Im folgenden finden Sie die SSML-Datei, auf die im vorherigen Beispiel verwiesen wird.</span><span class="sxs-lookup"><span data-stu-id="830e3-183">The following is the SSML file that the preceding example references.</span></span>  
  
```xml  
<?xml version="1.0" encoding="ISO-8859-1"?>  
<speak version="1.0"  
 xmlns="http://www.w3.org/2001/10/synthesis"  
 xml:lang="en-US">  
  
  <s> The weather forecast for today is partly cloudy with some sun breaks. </s>  
  
</speak>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendSsml">
      <MemberSignature Language="C#" Value="public void AppendSsml (System.Xml.XmlReader ssmlFile);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendSsml(class System.Xml.XmlReader ssmlFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendSsml(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendSsml (ssmlFile As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendSsml(System::Xml::XmlReader ^ ssmlFile);" />
      <MemberSignature Language="F#" Value="member this.AppendSsml : System.Xml.XmlReader -&gt; unit" Usage="promptBuilder.AppendSsml ssmlFile" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ssmlFile" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="ssmlFile"><span data-ttu-id="830e3-184">Der vollqualifizierte Name der XML-Datei, die angefügt werden soll.</span><span class="sxs-lookup"><span data-stu-id="830e3-184">A fully qualified name to the XML file to append.</span></span></param>
        <summary><span data-ttu-id="830e3-185">Fügt ein <c>XMLReader</c>-Objekt an, das auf eine SSML-Eingabeaufforderung auf das <see cref="T:System.Speech.Synthesis.PromptBuilder" />-Objekt verweist.</span><span class="sxs-lookup"><span data-stu-id="830e3-185">Appends an <c>XMLReader</c> object that references an SSML prompt to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="830e3-186">Bei der SSML-Datei muss es sich um eine XML-Format Datei handeln, die der Spezifikation der [Sprache Synthese Markup Language (SSML) Version 1,0](https://www.w3.org/TR/speech-synthesis/) entspricht.</span><span class="sxs-lookup"><span data-stu-id="830e3-186">The SSML file must be an XML-format file that conforms to the [Speech Synthesis Markup Language (SSML) Version 1.0](https://www.w3.org/TR/speech-synthesis/) specification.</span></span>  
  
 <span data-ttu-id="830e3-187">Sie können auch SSML-Markup als Zeichenfolge anfügen, indem Sie <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>verwenden.</span><span class="sxs-lookup"><span data-stu-id="830e3-187">You can also append SSML markup as a string using <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="830e3-188">Im folgenden Beispiel wird ein <xref:System.Speech.Synthesis.PromptBuilder> Objekt aus einem <xref:System.Xml.XmlReader>-Objekt erstellt, das auf eine Datei verweist, die Sprachsynthese Markup Language (SSML)-Markup enthält.</span><span class="sxs-lookup"><span data-stu-id="830e3-188">The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object from an <xref:System.Xml.XmlReader> object that references a file containing Speech Synthesis Markup Language (SSML) markup.</span></span>  
  
```csharp  
using System;  
using System.Xml;  
using System.IO;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\test\weather.wav");  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =  
          new System.Media.SoundPlayer(@"C:\test\weather.wav");  
  
        // Create the path to the SSML file.  
        string weatherFile = Path.GetFullPath("c:\\test\\Weather.xml");  
        PromptBuilder builder = null;  
  
        // Create an XML Reader from the file, create a PromptBuilder and   
        // append the XmlReader.  
        if (File.Exists(weatherFile))  
        {  
          XmlReader reader = XmlReader.Create(weatherFile);  
          builder = new PromptBuilder();  
          builder.AppendSsml(reader);  
          reader.Close();  
        }  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendSsmlMarkup">
      <MemberSignature Language="C#" Value="public void AppendSsmlMarkup (string ssmlMarkup);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendSsmlMarkup(string ssmlMarkup) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendSsmlMarkup (ssmlMarkup As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendSsmlMarkup(System::String ^ ssmlMarkup);" />
      <MemberSignature Language="F#" Value="member this.AppendSsmlMarkup : string -&gt; unit" Usage="promptBuilder.AppendSsmlMarkup ssmlMarkup" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ssmlMarkup" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ssmlMarkup"><span data-ttu-id="830e3-189">Eine Zeichenfolge, die SSML-Code enthält.</span><span class="sxs-lookup"><span data-stu-id="830e3-189">A string containing SSML markup.</span></span></param>
        <summary><span data-ttu-id="830e3-190">Fügt die angegebene Zeichenfolge, die SSML-Code enthält, an das <see cref="T:System.Speech.Synthesis.PromptBuilder" />-Objekt an.</span><span class="sxs-lookup"><span data-stu-id="830e3-190">Appends the specified string containing SSML markup to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="830e3-191">Beim Anhängen von SSML-Markup müssen die entsprechenden Escapezeichen verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="830e3-191">You must use the appropriate escape characters when appending SSML markup.</span></span> <span data-ttu-id="830e3-192">Beachten Sie die rückwärts Schrägstriche vor den Anführungszeichen, die den Wert des `interpret-as` Attributs im folgenden Beispiel einschließen:</span><span class="sxs-lookup"><span data-stu-id="830e3-192">Notice the backward-slashes preceding the quotation marks enclosing the value of the `interpret-as` attribute in the following example:</span></span>  
  
```csharp  
builder.AppendSsmlMarkup("<say-as interpret-as = \"characters\"> chair </say-as>");  
```  
  
> [!NOTE]
>  <span data-ttu-id="830e3-193">Die als Argument für <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A> verwendete Zeichenfolge darf kein `speak` Element enthalten.</span><span class="sxs-lookup"><span data-stu-id="830e3-193">The string used as an argument to <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A> cannot include a `speak` element.</span></span>  
  
 <span data-ttu-id="830e3-194">Wenn Sie <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A> verwenden, um Inline-Ausdrücke in einem `phoneme` Element anzugeben, können Sie Smartphones von einem der folgenden Phonetischen Alphabets verwenden, vorausgesetzt, dass die aktuelle Sprach-Engine dies unterstützt:</span><span class="sxs-lookup"><span data-stu-id="830e3-194">When using <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A> to specify inline pronunciations in a `phoneme` element, you can use phones from any of the following phonetic alphabets, provided that the current speech engine supports it:</span></span>  
  
-   <span data-ttu-id="830e3-195">Internationales Phonetisches Alphabet (IPA)</span><span class="sxs-lookup"><span data-stu-id="830e3-195">International Phonetic Alphabet (IPA)</span></span>  
  
-   <span data-ttu-id="830e3-196">Universelles Telefon Satz (UPS)</span><span class="sxs-lookup"><span data-stu-id="830e3-196">Universal Phone Set (UPS)</span></span>  
  
-   <span data-ttu-id="830e3-197">SAPI-Telefon Satz</span><span class="sxs-lookup"><span data-stu-id="830e3-197">SAPI Phone Set</span></span>  
  
 <span data-ttu-id="830e3-198">Jede SSML-kompatible Sprach-Engine spricht Smartphones aus der IPA-Datei.</span><span class="sxs-lookup"><span data-stu-id="830e3-198">Any SSML-compliant speech engine will speak phones from the IPA.</span></span>  
  
 <span data-ttu-id="830e3-199">Sie können auch eine Datei mit dem SSML-Markup anfügen, indem Sie eine der <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> Methoden verwenden.</span><span class="sxs-lookup"><span data-stu-id="830e3-199">You can also append a file containing SSML markup using one of the <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> methods.</span></span> <span data-ttu-id="830e3-200">Um zu sprechenden Text anzufügen, der nicht mit Markup Sprache formatiert ist, verwenden Sie eine der Methoden <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>oder <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A>.</span><span class="sxs-lookup"><span data-stu-id="830e3-200">To append text to be spoken that is not formatted with markup language, use one of the <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>, or <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendText">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="830e3-201">Fügt Text an das <see cref="T:System.Speech.Synthesis.PromptBuilder" />-Objekt an.</span><span class="sxs-lookup"><span data-stu-id="830e3-201">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendText">
      <MemberSignature Language="C#" Value="public void AppendText (string textToSpeak);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendText(string textToSpeak) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendText (textToSpeak As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendText(System::String ^ textToSpeak);" />
      <MemberSignature Language="F#" Value="member this.AppendText : string -&gt; unit" Usage="promptBuilder.AppendText textToSpeak" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak"><span data-ttu-id="830e3-202">Eine Zeichenfolge, die den zu sprechenden Text enthält.</span><span class="sxs-lookup"><span data-stu-id="830e3-202">A string containing the text to be spoken.</span></span></param>
        <summary><span data-ttu-id="830e3-203">Bezeichnet Text, der an das Objekt <see cref="T:System.Speech.Synthesis.PromptBuilder" /> anzufügen ist.</span><span class="sxs-lookup"><span data-stu-id="830e3-203">Specifies text to append to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="830e3-204">Verwenden Sie <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>, um Text anzufügen, der als SSML-Markup Sprache formatiert ist.</span><span class="sxs-lookup"><span data-stu-id="830e3-204">To append text that is formatted as SSML markup language, use <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="830e3-205">Im folgenden Beispiel wird ein <xref:System.Speech.Synthesis.PromptBuilder> Objekt erstellt und mithilfe der <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A>-Methode eine Text Zeichenfolge angefügt.</span><span class="sxs-lookup"><span data-stu-id="830e3-205">The example that follows creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends a text string using the <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> method.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and append a text string.  
        PromptBuilder speakText = new PromptBuilder();  
        speakText.AppendText("Say the name of the song you want to hear");  
  
        // Speak the contents of the prompt.  
        synth.Speak(speakText);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendText">
      <MemberSignature Language="C#" Value="public void AppendText (string textToSpeak, System.Speech.Synthesis.PromptEmphasis emphasis);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendText(string textToSpeak, valuetype System.Speech.Synthesis.PromptEmphasis emphasis) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptEmphasis)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendText (textToSpeak As String, emphasis As PromptEmphasis)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendText(System::String ^ textToSpeak, System::Speech::Synthesis::PromptEmphasis emphasis);" />
      <MemberSignature Language="F#" Value="member this.AppendText : string * System.Speech.Synthesis.PromptEmphasis -&gt; unit" Usage="promptBuilder.AppendText (textToSpeak, emphasis)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="emphasis" Type="System.Speech.Synthesis.PromptEmphasis" />
      </Parameters>
      <Docs>
        <param name="textToSpeak"><span data-ttu-id="830e3-206">Eine Zeichenfolge, die den zu sprechenden Text enthält.</span><span class="sxs-lookup"><span data-stu-id="830e3-206">A string containing the text to be spoken.</span></span></param>
        <param name="emphasis"><span data-ttu-id="830e3-207">Der auf den Text anzuwendende Wert für Emphasis oder Stress.</span><span class="sxs-lookup"><span data-stu-id="830e3-207">The value for the emphasis or stress to apply to the text.</span></span></param>
        <summary><span data-ttu-id="830e3-208">Fügt Text an das <see cref="T:System.Speech.Synthesis.PromptBuilder" />-Objekt an und gibt den Grad der Betonung für den Text an.</span><span class="sxs-lookup"><span data-stu-id="830e3-208">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the degree of emphasis for the text.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="830e3-209">Die Sprachsynthese-Engines in Windows unterstützen zu diesem Zeitpunkt nicht den Schwerpunkt Parameter.</span><span class="sxs-lookup"><span data-stu-id="830e3-209">The speech synthesis engines in Windows do not support the emphasis parameter at this time.</span></span> <span data-ttu-id="830e3-210">Durch Festlegen von Werten für den Schwerpunkt Parameter wird keine akustische Änderung in der Ausgabe der synthetisierten Sprache erzeugt.</span><span class="sxs-lookup"><span data-stu-id="830e3-210">Setting values for the emphasis parameter will produce no audible change in the synthesized speech output.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendText">
      <MemberSignature Language="C#" Value="public void AppendText (string textToSpeak, System.Speech.Synthesis.PromptRate rate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendText(string textToSpeak, valuetype System.Speech.Synthesis.PromptRate rate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptRate)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendText (textToSpeak As String, rate As PromptRate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendText(System::String ^ textToSpeak, System::Speech::Synthesis::PromptRate rate);" />
      <MemberSignature Language="F#" Value="member this.AppendText : string * System.Speech.Synthesis.PromptRate -&gt; unit" Usage="promptBuilder.AppendText (textToSpeak, rate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="rate" Type="System.Speech.Synthesis.PromptRate" />
      </Parameters>
      <Docs>
        <param name="textToSpeak"><span data-ttu-id="830e3-211">Eine Zeichenfolge, die den zu sprechenden Text enthält.</span><span class="sxs-lookup"><span data-stu-id="830e3-211">A string containing the text to be spoken.</span></span></param>
        <param name="rate"><span data-ttu-id="830e3-212">Der auf den Text anzuwendende Wert für die Sprechrate.</span><span class="sxs-lookup"><span data-stu-id="830e3-212">The value for the speaking rate to apply to the text.</span></span></param>
        <summary><span data-ttu-id="830e3-213">Fügt Text an das <see cref="T:System.Speech.Synthesis.PromptBuilder" />-Objekt an und gibt die Sprechgeschwindigkeit für den Text an.</span><span class="sxs-lookup"><span data-stu-id="830e3-213">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the speaking rate for the text.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="830e3-214">Im folgenden Beispiel wird ein <xref:System.Speech.Synthesis.PromptBuilder> Objekt erstellt und Text Zeichenfolgen angehängt.</span><span class="sxs-lookup"><span data-stu-id="830e3-214">The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends text strings.</span></span> <span data-ttu-id="830e3-215">Im Beispiel wird die <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A>-Methode verwendet, um eine langsame Sprechgeschwindigkeit für die hinzugefügte Zeichenfolge anzugeben, die den Inhalt einer Bestellung auflistet.</span><span class="sxs-lookup"><span data-stu-id="830e3-215">The example uses the <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> method to specify a slow speaking rate for the string being added, which enumerates the contents of an order.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and add content.  
        PromptBuilder speakRate = new PromptBuilder();  
        speakRate.AppendText("Your order for");  
        speakRate.AppendText("one kitchen sink and one faucet", PromptRate.Slow);  
        speakRate.AppendText("has been confirmed.");  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(speakRate);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendText">
      <MemberSignature Language="C#" Value="public void AppendText (string textToSpeak, System.Speech.Synthesis.PromptVolume volume);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendText(string textToSpeak, valuetype System.Speech.Synthesis.PromptVolume volume) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptVolume)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendText (textToSpeak As String, volume As PromptVolume)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendText(System::String ^ textToSpeak, System::Speech::Synthesis::PromptVolume volume);" />
      <MemberSignature Language="F#" Value="member this.AppendText : string * System.Speech.Synthesis.PromptVolume -&gt; unit" Usage="promptBuilder.AppendText (textToSpeak, volume)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="volume" Type="System.Speech.Synthesis.PromptVolume" />
      </Parameters>
      <Docs>
        <param name="textToSpeak"><span data-ttu-id="830e3-216">Eine Zeichenfolge, die den zu sprechenden Text enthält.</span><span class="sxs-lookup"><span data-stu-id="830e3-216">A string containing the text to be spoken.</span></span></param>
        <param name="volume"><span data-ttu-id="830e3-217">Der auf den Text anzuwendende Wert für die Sprecherlautstärke.</span><span class="sxs-lookup"><span data-stu-id="830e3-217">The value for the speaking volume (loudness) to apply to the text.</span></span></param>
        <summary><span data-ttu-id="830e3-218">Fügt Text an das <see cref="T:System.Speech.Synthesis.PromptBuilder" />-Objekt an und gibt die Lautstärke an, mit der der Text gesprochen werden soll.</span><span class="sxs-lookup"><span data-stu-id="830e3-218">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the volume to speak the text.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="830e3-219">Die <xref:System.Speech.Synthesis.PromptVolume.Default> Einstellung für <xref:System.Speech.Synthesis.PromptVolume> ist ein vollständiges Volume, das dem <xref:System.Speech.Synthesis.PromptVolume.ExtraLoud>entspricht.</span><span class="sxs-lookup"><span data-stu-id="830e3-219">The <xref:System.Speech.Synthesis.PromptVolume.Default> setting for <xref:System.Speech.Synthesis.PromptVolume> is full volume, which is the same as <xref:System.Speech.Synthesis.PromptVolume.ExtraLoud>.</span></span> <span data-ttu-id="830e3-220">Die anderen Einstellungen verringern den Umfang der Sprachausgabe in Relation zum vollständigen Volume.</span><span class="sxs-lookup"><span data-stu-id="830e3-220">The other settings decrease the volume of speech output relative to full volume.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="830e3-221">Im folgenden Beispiel wird die <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A>-Methode verwendet, um die Volumeeinstellungen anzugeben, die die <xref:System.Speech.Synthesis.SpeechSynthesizer> auf die Sprachausgabe anwenden soll.</span><span class="sxs-lookup"><span data-stu-id="830e3-221">The following example uses the <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> method to specify volume settings that the <xref:System.Speech.Synthesis.SpeechSynthesizer> should apply to speech output.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Build a prompt that applies different volume settings.  
        PromptBuilder builder = new PromptBuilder();  
        builder.AppendText("This is the default speaking volume.", PromptVolume.Default);  
        builder.AppendBreak();  
        builder.AppendText("This is the extra loud speaking volume.", PromptVolume.ExtraLoud);  
        builder.AppendBreak();  
        builder.AppendText("This is the medium speaking volume.", PromptVolume.Medium);  
  
        // Speak the prompt.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendTextWithAlias">
      <MemberSignature Language="C#" Value="public void AppendTextWithAlias (string textToSpeak, string substitute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendTextWithAlias(string textToSpeak, string substitute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendTextWithAlias (textToSpeak As String, substitute As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendTextWithAlias(System::String ^ textToSpeak, System::String ^ substitute);" />
      <MemberSignature Language="F#" Value="member this.AppendTextWithAlias : string * string -&gt; unit" Usage="promptBuilder.AppendTextWithAlias (textToSpeak, substitute)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="substitute" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak"><span data-ttu-id="830e3-222">Eine Zeichenfolge, die die Textdarstellung enthält.</span><span class="sxs-lookup"><span data-stu-id="830e3-222">A string containing the text representation.</span></span></param>
        <param name="substitute"><span data-ttu-id="830e3-223">Eine Zeichenfolge, die den zu sprechenden Text enthält.</span><span class="sxs-lookup"><span data-stu-id="830e3-223">A string containing the text to be spoken.</span></span></param>
        <summary><span data-ttu-id="830e3-224">Fügt Text an das <see cref="T:System.Speech.Synthesis.PromptBuilder" />-Objekt an und gibt den Aliastext an, der anstelle des angefügten Texts gesprochen werden soll.</span><span class="sxs-lookup"><span data-stu-id="830e3-224">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the alias text to be spoken in place of the appended text.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="830e3-225">Dadurch kann ein Dokument sowohl eine gesprochene als auch ein geschriebenes Formular für eine Eingabeaufforderung enthalten.</span><span class="sxs-lookup"><span data-stu-id="830e3-225">This allows a document to contain both a spoken and a written form for a prompt.</span></span> <span data-ttu-id="830e3-226">Beispielsweise könnte das geschriebene Formular ein Akronym sein, z. b. SAPI, und das gesprochene Formular könnte der erweiterte Text für das Akronym sein, in diesem Fall sprach Programmierungs Schnittstelle.</span><span class="sxs-lookup"><span data-stu-id="830e3-226">For example, the written form could be an acronym, such as SAPI, and the spoken form could be the expanded text for the acronym, in this case Speech Application Programming Interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="830e3-227">Im folgenden Beispiel wird eine Text Zeichenfolge ("Sprachsynthese Markup Language") und Ihr Alias ("SSML") an ein <xref:System.Speech.Synthesis.PromptBuilder> Objekt angehängt.</span><span class="sxs-lookup"><span data-stu-id="830e3-227">The following example appends a text string ("Speech Synthesis Markup Language") and its alias ("SSML") to a <xref:System.Speech.Synthesis.PromptBuilder> object.</span></span> <span data-ttu-id="830e3-228">Der Synthesizer gibt "s s M L" aus.</span><span class="sxs-lookup"><span data-stu-id="830e3-228">The synthesizer will pronounce "S S M L".</span></span>  
  
```  
PromptBuilder alias = new PromptBuilder();  
alias.AppendTextWithAlias("Speech Synthesis Markup Language","SSML");   
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendTextWithHint">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="830e3-229">Fügt Text an das <see cref="T:System.Speech.Synthesis.PromptBuilder" />-Objekt an und gibt den Inhaltstyp des Texts an.</span><span class="sxs-lookup"><span data-stu-id="830e3-229">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the content type of the text.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendTextWithHint">
      <MemberSignature Language="C#" Value="public void AppendTextWithHint (string textToSpeak, System.Speech.Synthesis.SayAs sayAs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendTextWithHint(string textToSpeak, valuetype System.Speech.Synthesis.SayAs sayAs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(System.String,System.Speech.Synthesis.SayAs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendTextWithHint (textToSpeak As String, sayAs As SayAs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendTextWithHint(System::String ^ textToSpeak, System::Speech::Synthesis::SayAs sayAs);" />
      <MemberSignature Language="F#" Value="member this.AppendTextWithHint : string * System.Speech.Synthesis.SayAs -&gt; unit" Usage="promptBuilder.AppendTextWithHint (textToSpeak, sayAs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="sayAs" Type="System.Speech.Synthesis.SayAs" />
      </Parameters>
      <Docs>
        <param name="textToSpeak"><span data-ttu-id="830e3-230">Eine Zeichenfolge, die den zu sprechenden Text enthält.</span><span class="sxs-lookup"><span data-stu-id="830e3-230">A string containing the text to be spoken.</span></span></param>
        <param name="sayAs"><span data-ttu-id="830e3-231">Der Inhaltstyps des Texts.</span><span class="sxs-lookup"><span data-stu-id="830e3-231">The content type of the text.</span></span></param>
        <summary><span data-ttu-id="830e3-232">Fügt Text an das <see cref="T:System.Speech.Synthesis.PromptBuilder" />-Objekt an und gibt den Inhaltstyp mithilfe eines Members der <see cref="T:System.Speech.Synthesis.SayAs" />-Enumeration an.</span><span class="sxs-lookup"><span data-stu-id="830e3-232">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the content type using a member of the <see cref="T:System.Speech.Synthesis.SayAs" /> enumeration.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="830e3-233">Der durch `sayAs` angegebene Inhaltstyp kann die Sprachsynthese-Engine zum Angeben des Inhalts von `textToSpeak`bereitstellen.</span><span class="sxs-lookup"><span data-stu-id="830e3-233">The content type specified by `sayAs` can provide guidance to the speech synthesis engine about how to pronounce the contents of `textToSpeak`.</span></span>  
  
   
  
## Examples  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and define the data types for some of the added strings.  
        PromptBuilder sayAs = new PromptBuilder();  
        sayAs.AppendText("Your");  
        sayAs.AppendTextWithHint("1st", SayAs.NumberOrdinal);  
        sayAs.AppendText("request was for");  
        sayAs.AppendTextWithHint("1", SayAs.NumberCardinal);  
        sayAs.AppendText("room, on");  
        sayAs.AppendTextWithHint("10/19/2012,", SayAs.MonthDayYear);  
        sayAs.AppendText("with early arrival at");  
        sayAs.AppendTextWithHint("12:35pm", SayAs.Time12);  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(sayAs);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendTextWithHint">
      <MemberSignature Language="C#" Value="public void AppendTextWithHint (string textToSpeak, string sayAs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendTextWithHint(string textToSpeak, string sayAs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendTextWithHint (textToSpeak As String, sayAs As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendTextWithHint(System::String ^ textToSpeak, System::String ^ sayAs);" />
      <MemberSignature Language="F#" Value="member this.AppendTextWithHint : string * string -&gt; unit" Usage="promptBuilder.AppendTextWithHint (textToSpeak, sayAs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="sayAs" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak"><span data-ttu-id="830e3-234">Eine Zeichenfolge, die den zu sprechenden Text enthält.</span><span class="sxs-lookup"><span data-stu-id="830e3-234">A string containing the text to be spoken.</span></span></param>
        <param name="sayAs"><span data-ttu-id="830e3-235">Der Inhaltstyps des Texts.</span><span class="sxs-lookup"><span data-stu-id="830e3-235">The content type of the text.</span></span></param>
        <summary><span data-ttu-id="830e3-236">Fügt Text an das <see cref="T:System.Speech.Synthesis.PromptBuilder" />-Objekt an und eine <see cref="T:System.String" />, die den Inhaltstyp des Texts angibt.</span><span class="sxs-lookup"><span data-stu-id="830e3-236">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and a <see cref="T:System.String" /> that specifies the content type of the text.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="830e3-237">Mit dieser Methode können Sie einen Inhaltstyp angeben, der nicht in der <xref:System.Speech.Synthesis.SayAs> Enumeration enthalten ist.</span><span class="sxs-lookup"><span data-stu-id="830e3-237">You can use this method to specify a content type that is not included in the <xref:System.Speech.Synthesis.SayAs> enumeration.</span></span> <span data-ttu-id="830e3-238">Allerdings muss die TTS-Engine den von Ihnen angegebenen Parameter unterstützen.</span><span class="sxs-lookup"><span data-stu-id="830e3-238">However, the TTS engine must support the parameter that you specify.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendTextWithPronunciation">
      <MemberSignature Language="C#" Value="public void AppendTextWithPronunciation (string textToSpeak, string pronunciation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendTextWithPronunciation(string textToSpeak, string pronunciation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendTextWithPronunciation (textToSpeak As String, pronunciation As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendTextWithPronunciation(System::String ^ textToSpeak, System::String ^ pronunciation);" />
      <MemberSignature Language="F#" Value="member this.AppendTextWithPronunciation : string * string -&gt; unit" Usage="promptBuilder.AppendTextWithPronunciation (textToSpeak, pronunciation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="pronunciation" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak"><span data-ttu-id="830e3-239">Eine Zeichenfolge, die die im konventionellen Alphabet einer Sprache geschriebene Form des Worts enthält.</span><span class="sxs-lookup"><span data-stu-id="830e3-239">A string containing the written form of the word using the conventional alphabet for a language.</span></span></param>
        <param name="pronunciation"><span data-ttu-id="830e3-240">Eine Zeichenfolge, die die vom internationalen Lautalphabet (IPA) zu sprechenden Sprachlaute enthält.</span><span class="sxs-lookup"><span data-stu-id="830e3-240">A string containing phones to be spoken from the International Phonetic Alphabet (IPA).</span></span></param>
        <summary><span data-ttu-id="830e3-241">Fügt Text an das <see cref="T:System.Speech.Synthesis.PromptBuilder" />-Objekt an und gibt die Aussprache für den Text an.</span><span class="sxs-lookup"><span data-stu-id="830e3-241">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the pronunciation for the text.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="830e3-242">Der Synthesizer spricht den Inhalt des `pronunciation`-Parameters, nicht den Inhalt des `textToSpeak`-Parameters.</span><span class="sxs-lookup"><span data-stu-id="830e3-242">The synthesizer speaks the contents of the `pronunciation` parameter, not the contents of the `textToSpeak` parameter.</span></span>  
  
 <span data-ttu-id="830e3-243">In Eingabe Aufforderungen angegebene pronationen gelten nur für das einzelne Vorkommen eines Worts und überschreiben die Ausdrücke der Sprach-Engine oder eines der derzeit aktiven Lexicons.</span><span class="sxs-lookup"><span data-stu-id="830e3-243">Pronunciations specified inline in prompts apply only to the individual occurrence of a word and override pronunciations of the speech engine or any of its currently active lexicons.</span></span> <span data-ttu-id="830e3-244">In der Regel verwenden Sie Inline Ausdrücke für benutzerdefinierte Ausdrücke vorhandener Wörter oder für die Aussprache von ungewöhnlichen Wörtern, wie z. b. ordnungsgemäßen Namen, die von der Sprachsynthese-Engine möglicherweise nicht und erwartet werden.</span><span class="sxs-lookup"><span data-stu-id="830e3-244">Typically, you will use inline pronunciations for custom pronunciations of existing words or for pronunciation of uncommon words, such as proper names, which the speech synthesis engine may not pronounce as well as expected.</span></span>  
  
 <span data-ttu-id="830e3-245">Inline-pronationen müssen mithilfe von Telefonen aus dem internationalen phonetischen Alphabet (IPA) angegeben werden.</span><span class="sxs-lookup"><span data-stu-id="830e3-245">Inline pronunciations must be specified using phones from the International Phonetic Alphabet (IPA).</span></span> <span data-ttu-id="830e3-246">Ein Telefon ist ein Buchstabe oder ein Zeichen, das einen diskreten Ton der Sprache darstellt.</span><span class="sxs-lookup"><span data-stu-id="830e3-246">A phone is a letter or character that represents a discreet sound of speech.</span></span> <span data-ttu-id="830e3-247">Sprachmodule, die die Spezifikation der [Sprache Synthese Markup Language (SSML) Version 1,0](https://go.microsoft.com/fwlink/?LinkId=201763) erfüllen, werden Telefone aus der IPA-Datei angeben.</span><span class="sxs-lookup"><span data-stu-id="830e3-247">Speech engines that comply with the [Speech Synthesis Markup Language (SSML) Version 1.0](https://go.microsoft.com/fwlink/?LinkId=201763) specification will pronounce phones from the IPA.</span></span> <span data-ttu-id="830e3-248">Informationen zum Angeben von Inline-pronationen mit anderen phonetischen Alphabets finden Sie unter <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span><span class="sxs-lookup"><span data-stu-id="830e3-248">To specify inline pronunciations using other phonetic alphabets, see <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span></span>  
  
 <span data-ttu-id="830e3-249">Die IPA-Dateien veröffentlichen ein [Diagramm](https://go.microsoft.com/fwlink/?LinkId=58362) , das Ihre Telefone auflistet und Sie Unicode-Zahlen zuordnet.</span><span class="sxs-lookup"><span data-stu-id="830e3-249">The IPA publishes a [chart](https://go.microsoft.com/fwlink/?LinkId=58362) that lists its phones and maps them to Unicode numbers.</span></span>  
  
 <span data-ttu-id="830e3-250">Einige Telefone im IPA-Alphabet haben dieselben Darstellungen wie Buchstaben im lateinischen Alphabet.</span><span class="sxs-lookup"><span data-stu-id="830e3-250">Some phones in the IPA alphabet have the same representations as letters in the Latin alphabet.</span></span> <span data-ttu-id="830e3-251">In diesen Fällen ist es möglich, das lateinische Zeichen einzugeben und die richtige Darstellung für ein Telefon zu haben.</span><span class="sxs-lookup"><span data-stu-id="830e3-251">In those cases, it is possible to type the Latin character and have the proper representation for a phone.</span></span> <span data-ttu-id="830e3-252">Da die lateinischen Zeichen, die im Text häufig verwendet werden, mehrere Telefone des IPA-Telefons darstellen können, führt die einfache Eingabe des lateinischen Zeichens möglicherweise nicht zum exakten IPA-Telefon.</span><span class="sxs-lookup"><span data-stu-id="830e3-252">Because the Latin characters as commonly used in text may represent several phones of the IPA phone set, simply typing the Latin character might not result in the precise IPA phone desired.</span></span> <span data-ttu-id="830e3-253">Andere Telefone des IPA-Alphabets müssen im Code als Zeichen Verweise dargestellt werden, die aus einem kaufmännischen und-Zeichen (&), dem Nummern Zeichen (#) und einer Unicode-Nummer für das gewünschte Telefon im Hexadezimal-oder Dezimal Format bestehen, gefolgt von einem Semikolon (;).</span><span class="sxs-lookup"><span data-stu-id="830e3-253">Other phones of the IPA alphabet need to be represented in code as character references consisting of an ampersand (&), the number sign (#), and a Unicode number for the desired phone in hexadecimal or decimal, all followed by a semicolon (;).</span></span> <span data-ttu-id="830e3-254">Beispielsweise eine Schwa (&\#x0259;) wird durch `&#x0259;`dargestellt.</span><span class="sxs-lookup"><span data-stu-id="830e3-254">For example, a schwa (&\#x0259;) would be represented by `&#x0259;`.</span></span>  
  
 <span data-ttu-id="830e3-255">Um neue oder benutzerdefinierte Ausdrücke für mehrere Wörter hinzuzufügen, z. b. zum Ausdrücken regionaler Dialekte oder zum Hinzufügen von richtigen Namen oder vokabularzeichen, die für eine Ausbildung oder medizinische Disziplin spezifisch sind, erstellen Sie ein Lexikon, und fügen Sie es mithilfe <xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A>der <xref:System.Speech.Synthesis.SpeechSynthesizer> hinzu.</span><span class="sxs-lookup"><span data-stu-id="830e3-255">To add new or custom pronunciations for multiple words, for example to express regional dialects or to add proper names or vocabulary that is specific to an educational or medical discipline, build a lexicon and add it to the <xref:System.Speech.Synthesis.SpeechSynthesizer> using <xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="830e3-256">Im folgenden Beispiel wird eine neue Instanz der <xref:System.Speech.Synthesis.PromptBuilder>-Klasse initialisiert.</span><span class="sxs-lookup"><span data-stu-id="830e3-256">The following example initializes a new instance of the <xref:System.Speech.Synthesis.PromptBuilder> class.</span></span> <span data-ttu-id="830e3-257">Anschließend wird die Text Zeichenfolge "My Name is" an die Instanz angefügt.</span><span class="sxs-lookup"><span data-stu-id="830e3-257">It then appends the text string "My name is" to the instance.</span></span> <span data-ttu-id="830e3-258">Schließlich fügt Sie eine Zeichenfolge mit dem richtigen Namen "Dubois" an und gibt die Aussprache des Namens an.</span><span class="sxs-lookup"><span data-stu-id="830e3-258">Finally, it appends a string containing the proper name "DuBois" and specifies the pronunciation of the name.</span></span>  
  
```csharp  
public void ProperName()  
{  
    PromptBuilder builder = new PromptBuilder();  
    builder.AppendText("My name is");  
  
    // Add a proper name and its pronunciation.  
    builder.AppendTextWithPronunciation("DuBois", "duˈbwɑ");     
}  
```  
  
 <span data-ttu-id="830e3-259">Das folgende Markup zeigt die SSML-Datei, die von diesem <xref:System.Speech.Synthesis.PromptBuilder> Objekt generiert wird.</span><span class="sxs-lookup"><span data-stu-id="830e3-259">The following markup shows the SSML that this <xref:System.Speech.Synthesis.PromptBuilder> object generates.</span></span>  
  
```xml  
<speak xmlns="http://www.w3.org/2001/10/synthesis" xml:lang="en-us">  
  My name is <phoneme ph="duˈbwɑ"> DuBois </phoneme>  
</speak>  
```  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://www.internationalphoneticassociation.org/content/ipa-chart"><span data-ttu-id="830e3-260">Internationale Phonetische Zuordnung</span><span class="sxs-lookup"><span data-stu-id="830e3-260">International Phonetic Association</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ClearContent">
      <MemberSignature Language="C#" Value="public void ClearContent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearContent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.ClearContent" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearContent ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearContent();" />
      <MemberSignature Language="F#" Value="member this.ClearContent : unit -&gt; unit" Usage="promptBuilder.ClearContent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="830e3-261">Löscht den Inhalt des <see cref="T:System.Speech.Synthesis.PromptBuilder" />-Objekts.</span><span class="sxs-lookup"><span data-stu-id="830e3-261">Clears the content from the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Culture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Culture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Culture" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.PromptBuilder.Culture" />
      <MemberSignature Language="VB.NET" Value="Public Property Culture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Culture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Culture : System.Globalization.CultureInfo with get, set" Usage="System.Speech.Synthesis.PromptBuilder.Culture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="830e3-262">Ruft die Kulturinformationen für das <see cref="T:System.Speech.Synthesis.PromptBuilder" />-Objekt ab oder legt diese fest.</span><span class="sxs-lookup"><span data-stu-id="830e3-262">Gets or sets the culture information for the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="830e3-263">Das <xref:System.Speech.Synthesis.SpeechSynthesizer> Objekt versucht, eine installierte Stimme auszuwählen, die die von der <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>-Eigenschaft angegebene Sprache unterstützt, um die Eingabeaufforderung zu verarbeiten.</span><span class="sxs-lookup"><span data-stu-id="830e3-263">The <xref:System.Speech.Synthesis.SpeechSynthesizer> object will attempt to select an installed voice that supports the language specified by the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property to process the prompt.</span></span> <span data-ttu-id="830e3-264">Wenn eine Stimme mit der angegebenen Kultur gefunden wird, wird diese verwendet.</span><span class="sxs-lookup"><span data-stu-id="830e3-264">If a voice with the specified culture is found, it will be used.</span></span> <span data-ttu-id="830e3-265">Wenn eine Stimme mit der angegebenen Kultur nicht gefunden werden kann, wird die Standardsprache verwendet.</span><span class="sxs-lookup"><span data-stu-id="830e3-265">If a voice with the specified culture cannot be found, the default voice will be used.</span></span>  
  
 <span data-ttu-id="830e3-266">Eine Kultur kann auch in der Eingabeaufforderung für diskrete Inhalts Abschnitte mithilfe der Methoden <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>, <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>und <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A> angegeben werden.</span><span class="sxs-lookup"><span data-stu-id="830e3-266">A culture may also be specified within the prompt for discreet sections of content using the <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>, <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>, and <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A> methods.</span></span> <span data-ttu-id="830e3-267">Eine Kultur, die für einen Teil des Inhalts mit einer der oben genannten Methoden angegeben wird, überschreibt die <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>-Eigenschaft, und der <xref:System.Speech.Synthesis.SpeechSynthesizer> versucht, eine installierte Stimme auszuwählen, die die Sprache unterstützt, die vom `culture`-Parameter der Methode angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="830e3-267">A culture specified for a portion of content using one of the above methods will override the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property while in effect, and the <xref:System.Speech.Synthesis.SpeechSynthesizer> will attempt to select an installed voice that supports the language specified by the `culture` parameter of the method.</span></span>  
  
 <span data-ttu-id="830e3-268">Zum ordnungsgemäßen aussprechen von Wörtern in der durch die <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>-Eigenschaft angegebenen Sprache muss eine Sprachsynthese-Engine (Text-zu-Sprache oder TTS) installiert sein, die die Sprache unterstützt.</span><span class="sxs-lookup"><span data-stu-id="830e3-268">To correctly pronounce words in the language specified by the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed.</span></span> <span data-ttu-id="830e3-269">Eine installierte TTS-Engine wird als Stimme bezeichnet.</span><span class="sxs-lookup"><span data-stu-id="830e3-269">An installed TTS engine is called a voice.</span></span> <span data-ttu-id="830e3-270">Verwenden Sie die <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>-Methode, um Informationen darüber zu erhalten, welche Stimmen für eine bestimmte Kultur installiert sind.</span><span class="sxs-lookup"><span data-stu-id="830e3-270">To get information about which voices are installed for a specific culture, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method.</span></span>  
  
 <span data-ttu-id="830e3-271">Microsoft Windows und die System. Speech-API akzeptieren alle gültigen Sprachen Ländercodes als Werte für `culture`.</span><span class="sxs-lookup"><span data-stu-id="830e3-271">Microsoft Windows and the System.Speech API accept all valid language-country codes as values for `culture`.</span></span> <span data-ttu-id="830e3-272">Die TTS-Engines, die mit Windows 7 ausgeliefert wurden, unterstützen die folgenden sprach Ländercodes:</span><span class="sxs-lookup"><span data-stu-id="830e3-272">The TTS engines that shipped with Windows 7 support the following language-country codes:</span></span>  
  
-   <span data-ttu-id="830e3-273">en-US.</span><span class="sxs-lookup"><span data-stu-id="830e3-273">en-US.</span></span> <span data-ttu-id="830e3-274">Englisch (USA)</span><span class="sxs-lookup"><span data-stu-id="830e3-274">English (United States)</span></span>  
  
-   <span data-ttu-id="830e3-275">zh-CN.</span><span class="sxs-lookup"><span data-stu-id="830e3-275">zh-CN.</span></span> <span data-ttu-id="830e3-276">Chinesisch (China)</span><span class="sxs-lookup"><span data-stu-id="830e3-276">Chinese (China)</span></span>  
  
-   <span data-ttu-id="830e3-277">zh-tw.</span><span class="sxs-lookup"><span data-stu-id="830e3-277">zh-TW.</span></span> <span data-ttu-id="830e3-278">Chinesisch (Taiwan)</span><span class="sxs-lookup"><span data-stu-id="830e3-278">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="830e3-279">Sprachcodes mit zwei Buchstaben, z. b. "en", sind ebenfalls zulässig.</span><span class="sxs-lookup"><span data-stu-id="830e3-279">Two-letter language codes such as "en" are also permitted.</span></span>  <span data-ttu-id="830e3-280">Eine umfassende Liste der Sprachcodes finden Sie unter [sprach Bezeichner-Konstanten und-](https://msdn.microsoft.com/library/dd318693\(VS.85\).aspx) Zeichen folgen.</span><span class="sxs-lookup"><span data-stu-id="830e3-280">See [Language Identifier Constants and Strings](https://msdn.microsoft.com/library/dd318693\(VS.85\).aspx) for a comprehensive list of language codes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndParagraph">
      <MemberSignature Language="C#" Value="public void EndParagraph ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndParagraph() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.EndParagraph" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndParagraph ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndParagraph();" />
      <MemberSignature Language="F#" Value="member this.EndParagraph : unit -&gt; unit" Usage="promptBuilder.EndParagraph " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="830e3-281">Bezeichnet das Ende eines Absatzes im <see cref="T:System.Speech.Synthesis.PromptBuilder" />-Objekt.</span><span class="sxs-lookup"><span data-stu-id="830e3-281">Specifies the end of a paragraph in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="830e3-282">Lange Eingabe Aufforderungen können mehr als Menschen Sprache gerendert werden, wenn Sie in Sätze und Absätze aufgeteilt werden.</span><span class="sxs-lookup"><span data-stu-id="830e3-282">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span> <span data-ttu-id="830e3-283">Ein Beispiel finden Sie unter <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>.</span><span class="sxs-lookup"><span data-stu-id="830e3-283">See <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A> for an example.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndSentence">
      <MemberSignature Language="C#" Value="public void EndSentence ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndSentence() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.EndSentence" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndSentence ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndSentence();" />
      <MemberSignature Language="F#" Value="member this.EndSentence : unit -&gt; unit" Usage="promptBuilder.EndSentence " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="830e3-284">Bezeichnet das Ende eines Satzes im <see cref="T:System.Speech.Synthesis.PromptBuilder" />-Objekt.</span><span class="sxs-lookup"><span data-stu-id="830e3-284">Specifies the end of a sentence in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="830e3-285">Lange Eingabe Aufforderungen können mehr als Menschen Sprache gerendert werden, wenn Sie in Sätze und Absätze aufgeteilt werden.</span><span class="sxs-lookup"><span data-stu-id="830e3-285">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span> <span data-ttu-id="830e3-286">Ein Beispiel finden Sie unter <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A>.</span><span class="sxs-lookup"><span data-stu-id="830e3-286">See <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A> for an example.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndStyle">
      <MemberSignature Language="C#" Value="public void EndStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndStyle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.EndStyle" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndStyle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndStyle();" />
      <MemberSignature Language="F#" Value="member this.EndStyle : unit -&gt; unit" Usage="promptBuilder.EndStyle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="830e3-287">Bezeichnet das Ende eines Stils im <see cref="T:System.Speech.Synthesis.PromptBuilder" />-Objekt.</span><span class="sxs-lookup"><span data-stu-id="830e3-287">Specifies the end of a style in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="830e3-288">Die <xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A>-Methode beendet den aktuellen Sprachstil.</span><span class="sxs-lookup"><span data-stu-id="830e3-288">The <xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A> method stops the current speaking style.</span></span> <span data-ttu-id="830e3-289">Der Sprechstil kehrt auf die Einstellung zurück, die wirksam war, bevor die <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> Methode einen neuen Sprechstil initiiert hat.</span><span class="sxs-lookup"><span data-stu-id="830e3-289">The speaking style reverts to the setting that was in effect before the <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> method initiated a new speaking style.</span></span> <span data-ttu-id="830e3-290">Ein Beispiel finden Sie unter <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A>.</span><span class="sxs-lookup"><span data-stu-id="830e3-290">See <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> for an example.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndVoice">
      <MemberSignature Language="C#" Value="public void EndVoice ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndVoice() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.EndVoice" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndVoice ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndVoice();" />
      <MemberSignature Language="F#" Value="member this.EndVoice : unit -&gt; unit" Usage="promptBuilder.EndVoice " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="830e3-291">Bezeichnet das Ende der Verwendung einer Stimme im <see cref="T:System.Speech.Synthesis.PromptBuilder" />-Objekt.</span><span class="sxs-lookup"><span data-stu-id="830e3-291">Specifies the end of use of a voice in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="830e3-292">Die <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>-Methode beendet die Verwendung der aktuellen Stimme für die Sprachausgabe.</span><span class="sxs-lookup"><span data-stu-id="830e3-292">The <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A> method stops the use of the current voice for speech output.</span></span> <span data-ttu-id="830e3-293">Die Stimme kehrt zu der Einstellung zurück, die wirksam war, bevor die <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> Methode eine neue Stimme initiiert hat.</span><span class="sxs-lookup"><span data-stu-id="830e3-293">The voice reverts to the setting that was in effect before the <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> method initiated a new voice.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.PromptBuilder.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmpty : bool" Usage="System.Speech.Synthesis.PromptBuilder.IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="830e3-294">Ruft ab, ob das <see cref="T:System.Speech.Synthesis.PromptBuilder" />-Objekt leer ist.</span><span class="sxs-lookup"><span data-stu-id="830e3-294">Gets whether the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> is empty.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="StartParagraph">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="830e3-295">Bezeichnet den Anfang eines Absatzes im <see cref="T:System.Speech.Synthesis.PromptBuilder" />-Objekt; optional wird auch eine Sprache angegeben.</span><span class="sxs-lookup"><span data-stu-id="830e3-295">Specifies the start of a paragraph in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object, and optionally specifies a language.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="830e3-296">Lange Eingabe Aufforderungen können mehr als Menschen Sprache gerendert werden, wenn Sie in Sätze und Absätze aufgeteilt werden.</span><span class="sxs-lookup"><span data-stu-id="830e3-296">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="StartParagraph">
      <MemberSignature Language="C#" Value="public void StartParagraph ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartParagraph() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartParagraph" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartParagraph ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartParagraph();" />
      <MemberSignature Language="F#" Value="member this.StartParagraph : unit -&gt; unit" Usage="promptBuilder.StartParagraph " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="830e3-297">Bezeichnet das Anfang eines Absatzes im <see cref="T:System.Speech.Synthesis.PromptBuilder" />-Objekt.</span><span class="sxs-lookup"><span data-stu-id="830e3-297">Specifies the start of a paragraph in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="830e3-298">Lange Eingabe Aufforderungen können mehr als Menschen Sprache gerendert werden, wenn Sie in Sätze und Absätze aufgeteilt werden.</span><span class="sxs-lookup"><span data-stu-id="830e3-298">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="830e3-299">Im folgenden Beispiel wird ein <xref:System.Speech.Synthesis.PromptBuilder> Objekt erstellt, Inhalt angefügt und der Inhalt in Absätzen und Sätze organisiert.</span><span class="sxs-lookup"><span data-stu-id="830e3-299">The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object, appends content, and organizes the content into paragraphs and sentences.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and add content as paragraphs and sentences.  
        PromptBuilder parSent = new PromptBuilder();  
        parSent.StartParagraph();  
        parSent.StartSentence();  
        parSent.AppendText("Introducing the sentence element.");  
        parSent.EndSentence();  
        parSent.StartSentence();  
        parSent.AppendText("You can use it to mark individual sentences.");  
        parSent.EndSentence();  
        parSent.EndParagraph();  
        parSent.StartParagraph();  
        parSent.AppendText("Another simple paragraph. Sentence structure in this paragraph" +  
          "is not explicitly marked.");  
        parSent.EndParagraph();  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(parSent);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartParagraph">
      <MemberSignature Language="C#" Value="public void StartParagraph (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartParagraph(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartParagraph(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartParagraph (culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartParagraph(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.StartParagraph : System.Globalization.CultureInfo -&gt; unit" Usage="promptBuilder.StartParagraph culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture"><span data-ttu-id="830e3-300">Enthält Informationen über eine bestimmte Kultur, wie die Sprache, den Namen der Kultur, das Schreibsystem, den verwendeten Kalender und darüber, wie Datumsangaben formatiert und Zeichenfolgen sortiert werden.</span><span class="sxs-lookup"><span data-stu-id="830e3-300">Provides information about a specific culture, such as the language, the name of the culture, the writing system, the calendar used, and how to format dates and sort strings.</span></span></param>
        <summary><span data-ttu-id="830e3-301">Bezeichnet den Anfang eines Absatzes in der angegebenen Kultur im <see cref="T:System.Speech.Synthesis.PromptBuilder" />-Objekt.</span><span class="sxs-lookup"><span data-stu-id="830e3-301">Specifies the start of a paragraph in the specified culture in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="830e3-302">Lange Eingabe Aufforderungen können mehr als Menschen Sprache gerendert werden, wenn Sie in Sätze und Absätze aufgeteilt werden.</span><span class="sxs-lookup"><span data-stu-id="830e3-302">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span>  
  
 <span data-ttu-id="830e3-303">Der `culture`-Parameter für einen Absatz kann sich von der <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>-Eigenschaft des <xref:System.Speech.Synthesis.PromptBuilder> Objekts unterscheiden, in dem es enthalten ist.</span><span class="sxs-lookup"><span data-stu-id="830e3-303">The `culture` parameter for a paragraph can be different than the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property of the <xref:System.Speech.Synthesis.PromptBuilder> object that contains it.</span></span> <span data-ttu-id="830e3-304">Wenngleich der Wert des `culture`-Parameters die <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>-Eigenschaft überschreibt.</span><span class="sxs-lookup"><span data-stu-id="830e3-304">While in effect, the value of the `culture` parameter will override the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property.</span></span> <span data-ttu-id="830e3-305">Der <xref:System.Speech.Synthesis.SpeechSynthesizer> versucht, eine installierte Stimme auszuwählen, die die durch den `culture`-Parameter angegebene Sprache unterstützt, um den Absatz zu sprechen.</span><span class="sxs-lookup"><span data-stu-id="830e3-305">The <xref:System.Speech.Synthesis.SpeechSynthesizer> will attempt to select an installed voice that supports the language specified by the `culture` parameter to speak the paragraph.</span></span> <span data-ttu-id="830e3-306">Wenn eine Stimme mit der angegebenen Kultur gefunden wird, wird diese verwendet.</span><span class="sxs-lookup"><span data-stu-id="830e3-306">If a voice with the specified culture is found, it will be used.</span></span> <span data-ttu-id="830e3-307">Wenn eine Stimme mit der angegebenen Kultur nicht gefunden werden kann, wird die Standardsprache verwendet.</span><span class="sxs-lookup"><span data-stu-id="830e3-307">If a voice with the specified culture cannot be found, the default voice will be used.</span></span> <span data-ttu-id="830e3-308">Um die von <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>angegebene Stimme nicht mehr zu verwenden, wenden Sie <xref:System.Speech.Synthesis.PromptBuilder.EndParagraph%2A>an.</span><span class="sxs-lookup"><span data-stu-id="830e3-308">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>, call <xref:System.Speech.Synthesis.PromptBuilder.EndParagraph%2A>.</span></span>  
  
 <span data-ttu-id="830e3-309">Zum ordnungsgemäßen aussprechen von Wörtern in der durch den `culture`-Parameter angegebenen Sprache muss eine Sprachsynthese-Engine (Text-zu-Sprache oder TTS) installiert sein, die die Sprache unterstützt.</span><span class="sxs-lookup"><span data-stu-id="830e3-309">To correctly pronounce words in the language specified by the `culture` parameter, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed.</span></span> <span data-ttu-id="830e3-310">Eine installierte TTS-Engine wird als Stimme bezeichnet.</span><span class="sxs-lookup"><span data-stu-id="830e3-310">An installed TTS engine is called a voice.</span></span> <span data-ttu-id="830e3-311">Verwenden Sie die <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>-Methode, um Informationen darüber zu erhalten, welche Stimmen für eine bestimmte Kultur installiert sind.</span><span class="sxs-lookup"><span data-stu-id="830e3-311">To get information about which voices are installed for a specific culture, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method.</span></span>  
  
 <span data-ttu-id="830e3-312">Microsoft Windows und die System. Speech-API akzeptieren alle gültigen Sprachen Ländercodes als Werte für `culture`.</span><span class="sxs-lookup"><span data-stu-id="830e3-312">Microsoft Windows and the System.Speech API accept all valid language-country codes as values for `culture`.</span></span> <span data-ttu-id="830e3-313">Die TTS-Engines, die mit Windows 7 ausgeliefert wurden, unterstützen die folgenden sprach Ländercodes:</span><span class="sxs-lookup"><span data-stu-id="830e3-313">The TTS engines that shipped with Windows 7 support the following language-country codes:</span></span>  
  
-   <span data-ttu-id="830e3-314">en-US.</span><span class="sxs-lookup"><span data-stu-id="830e3-314">en-US.</span></span> <span data-ttu-id="830e3-315">Englisch (USA)</span><span class="sxs-lookup"><span data-stu-id="830e3-315">English (United States)</span></span>  
  
-   <span data-ttu-id="830e3-316">zh-CN.</span><span class="sxs-lookup"><span data-stu-id="830e3-316">zh-CN.</span></span> <span data-ttu-id="830e3-317">Chinesisch (China)</span><span class="sxs-lookup"><span data-stu-id="830e3-317">Chinese (China)</span></span>  
  
-   <span data-ttu-id="830e3-318">zh-tw.</span><span class="sxs-lookup"><span data-stu-id="830e3-318">zh-TW.</span></span> <span data-ttu-id="830e3-319">Chinesisch (Taiwan)</span><span class="sxs-lookup"><span data-stu-id="830e3-319">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="830e3-320">Sprachcodes mit zwei Buchstaben, z. b. "en", sind ebenfalls zulässig.</span><span class="sxs-lookup"><span data-stu-id="830e3-320">Two-letter language codes such as "en" are also permitted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="StartSentence">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="830e3-321">Bezeichnet den Anfang eines Satzes im <see cref="T:System.Speech.Synthesis.PromptBuilder" />-Objekt; optional wird auch eine Sprache angegeben.</span><span class="sxs-lookup"><span data-stu-id="830e3-321">Specifies the start of a sentence in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object, and optionally specifies a language.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="830e3-322">Lange Eingabe Aufforderungen können mehr als Menschen Sprache gerendert werden, wenn Sie in Sätze und Absätze aufgeteilt werden.</span><span class="sxs-lookup"><span data-stu-id="830e3-322">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="StartSentence">
      <MemberSignature Language="C#" Value="public void StartSentence ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartSentence() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartSentence" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartSentence ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartSentence();" />
      <MemberSignature Language="F#" Value="member this.StartSentence : unit -&gt; unit" Usage="promptBuilder.StartSentence " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="830e3-323">Bezeichnet den Anfang eines Satzes im <see cref="T:System.Speech.Synthesis.PromptBuilder" />-Objekt.</span><span class="sxs-lookup"><span data-stu-id="830e3-323">Specifies the start of a sentence in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="830e3-324">Lange Eingabe Aufforderungen können mehr als Menschen Sprache gerendert werden, wenn Sie in Sätze und Absätze aufgeteilt werden.</span><span class="sxs-lookup"><span data-stu-id="830e3-324">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="830e3-325">Im folgenden Beispiel wird ein <xref:System.Speech.Synthesis.PromptBuilder> Objekt erstellt, Inhalt angefügt und der Inhalt in Absätzen und Sätze organisiert.</span><span class="sxs-lookup"><span data-stu-id="830e3-325">The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object, appends content, and organizes the content into paragraphs and sentences.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and add content as paragraphs and sentences.  
        PromptBuilder parSent = new PromptBuilder();  
        parSent.StartParagraph();  
        parSent.StartSentence();  
        parSent.AppendText("Introducing the sentence element.");  
        parSent.EndSentence();  
        parSent.StartSentence();  
        parSent.AppendText("You can use it to mark individual sentences.");  
        parSent.EndSentence();  
        parSent.EndParagraph();  
        parSent.StartParagraph();  
        parSent.AppendText("Another simple paragraph. Sentence structure in this paragraph" +  
          "is not explicitly marked.");  
        parSent.EndParagraph();  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(parSent);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartSentence">
      <MemberSignature Language="C#" Value="public void StartSentence (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartSentence(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartSentence(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartSentence (culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartSentence(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.StartSentence : System.Globalization.CultureInfo -&gt; unit" Usage="promptBuilder.StartSentence culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture"><span data-ttu-id="830e3-326">Enthält Informationen über eine bestimmte Kultur, wie die Sprache, den Namen der Kultur, das Schreibsystem, den verwendeten Kalender und darüber, wie Datumsangaben formatiert und Zeichenfolgen sortiert werden.</span><span class="sxs-lookup"><span data-stu-id="830e3-326">Provides information about a specific culture, such as the language, the name of the culture, the writing system, the calendar used, and how to format dates and sort strings.</span></span></param>
        <summary><span data-ttu-id="830e3-327">Bezeichnet den Anfang eines Satzes in der angegebenen Kultur im <see cref="T:System.Speech.Synthesis.PromptBuilder" />-Objekt.</span><span class="sxs-lookup"><span data-stu-id="830e3-327">Specifies the start of a sentence in the specified culture in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="830e3-328">Lange Eingabe Aufforderungen können mehr als Menschen Sprache gerendert werden, wenn Sie in Sätze und Absätze aufgeteilt werden.</span><span class="sxs-lookup"><span data-stu-id="830e3-328">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span>  
  
 <span data-ttu-id="830e3-329">Der `culture`-Parameter für einen Satz kann sich vom `culture` Parameter für den Absatz unterscheiden, der den Satz oder die <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>-Eigenschaft des <xref:System.Speech.Synthesis.PromptBuilder> Objekts enthält, in dem Sie enthalten sind.</span><span class="sxs-lookup"><span data-stu-id="830e3-329">The `culture` parameter for a sentence can be different than the `culture` parameter for the paragraph that contains the sentence or the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property of the <xref:System.Speech.Synthesis.PromptBuilder> object that contains them.</span></span>  
  
 <span data-ttu-id="830e3-330">In der Tat überschreibt der Wert des `culture`-Parameters die <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>-Eigenschaft und den `culture`-Parameter für den Absatz, der den Satz enthält.</span><span class="sxs-lookup"><span data-stu-id="830e3-330">While in effect, the value of the `culture` parameter will override the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property and the `culture` parameter for the paragraph that contains the sentence.</span></span> <span data-ttu-id="830e3-331">Der <xref:System.Speech.Synthesis.SpeechSynthesizer> versucht, eine installierte Stimme auszuwählen, die die durch den `culture`-Parameter angegebene Sprache unterstützt, um den Satz zu sprechen.</span><span class="sxs-lookup"><span data-stu-id="830e3-331">The <xref:System.Speech.Synthesis.SpeechSynthesizer> will attempt to select an installed voice that supports the language specified by the `culture` parameter to speak the sentence.</span></span> <span data-ttu-id="830e3-332">Wenn eine Stimme mit der angegebenen Kultur gefunden wird, wird diese verwendet.</span><span class="sxs-lookup"><span data-stu-id="830e3-332">If a voice with the specified culture is found, it will be used.</span></span> <span data-ttu-id="830e3-333">Wenn eine Stimme mit der angegebenen Kultur nicht gefunden werden kann, wird die Standardsprache verwendet.</span><span class="sxs-lookup"><span data-stu-id="830e3-333">If a voice with the specified culture cannot be found, the default voice will be used.</span></span> <span data-ttu-id="830e3-334">Um die von <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A>angegebene Stimme nicht mehr zu verwenden, wenden Sie <xref:System.Speech.Synthesis.PromptBuilder.EndSentence%2A>an.</span><span class="sxs-lookup"><span data-stu-id="830e3-334">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A>, call <xref:System.Speech.Synthesis.PromptBuilder.EndSentence%2A>.</span></span>  
  
 <span data-ttu-id="830e3-335">Zum ordnungsgemäßen aussprechen von Wörtern in der durch den `culture`-Parameter angegebenen Sprache muss eine Sprachsynthese-Engine (Text-zu-Sprache oder TTS) installiert sein, die die Sprache unterstützt.</span><span class="sxs-lookup"><span data-stu-id="830e3-335">To correctly pronounce words in the language specified by the `culture` parameter, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed.</span></span> <span data-ttu-id="830e3-336">Eine installierte TTS-Engine wird als Stimme bezeichnet.</span><span class="sxs-lookup"><span data-stu-id="830e3-336">An installed TTS engine is called a voice.</span></span> <span data-ttu-id="830e3-337">Verwenden Sie die <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>-Methode, um Informationen darüber zu erhalten, welche Stimmen für eine bestimmte Kultur installiert sind.</span><span class="sxs-lookup"><span data-stu-id="830e3-337">To get information about which voices are installed for a specific culture, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method.</span></span>  
  
 <span data-ttu-id="830e3-338">Microsoft Windows und die System. Speech-API akzeptieren alle gültigen Sprachen Ländercodes als Werte für `culture`.</span><span class="sxs-lookup"><span data-stu-id="830e3-338">Microsoft Windows and the System.Speech API accept all valid language-country codes as values for `culture`.</span></span> <span data-ttu-id="830e3-339">Die TTS-Engines, die mit Windows 7 ausgeliefert wurden, unterstützen die folgenden sprach Ländercodes:</span><span class="sxs-lookup"><span data-stu-id="830e3-339">The TTS engines that shipped with Windows 7 support the following language-country codes:</span></span>  
  
-   <span data-ttu-id="830e3-340">en-US.</span><span class="sxs-lookup"><span data-stu-id="830e3-340">en-US.</span></span> <span data-ttu-id="830e3-341">Englisch (USA)</span><span class="sxs-lookup"><span data-stu-id="830e3-341">English (United States)</span></span>  
  
-   <span data-ttu-id="830e3-342">zh-CN.</span><span class="sxs-lookup"><span data-stu-id="830e3-342">zh-CN.</span></span> <span data-ttu-id="830e3-343">Chinesisch (China)</span><span class="sxs-lookup"><span data-stu-id="830e3-343">Chinese (China)</span></span>  
  
-   <span data-ttu-id="830e3-344">zh-tw.</span><span class="sxs-lookup"><span data-stu-id="830e3-344">zh-TW.</span></span> <span data-ttu-id="830e3-345">Chinesisch (Taiwan)</span><span class="sxs-lookup"><span data-stu-id="830e3-345">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="830e3-346">Sprachcodes mit zwei Buchstaben, z. b. "en", sind ebenfalls zulässig.</span><span class="sxs-lookup"><span data-stu-id="830e3-346">Two-letter language codes such as "en" are also permitted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartStyle">
      <MemberSignature Language="C#" Value="public void StartStyle (System.Speech.Synthesis.PromptStyle style);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartStyle(class System.Speech.Synthesis.PromptStyle style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartStyle(System.Speech.Synthesis.PromptStyle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartStyle (style As PromptStyle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartStyle(System::Speech::Synthesis::PromptStyle ^ style);" />
      <MemberSignature Language="F#" Value="member this.StartStyle : System.Speech.Synthesis.PromptStyle -&gt; unit" Usage="promptBuilder.StartStyle style" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Speech.Synthesis.PromptStyle" />
      </Parameters>
      <Docs>
        <param name="style"><span data-ttu-id="830e3-347">Der zu startende Stil.</span><span class="sxs-lookup"><span data-stu-id="830e3-347">The style to start.</span></span></param>
        <summary><span data-ttu-id="830e3-348">Bezeichnet den Anfang eines Stils im <see cref="T:System.Speech.Synthesis.PromptBuilder" />-Objekt.</span><span class="sxs-lookup"><span data-stu-id="830e3-348">Specifies the start of a style in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="830e3-349">Die <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A>-Methode nimmt ein <xref:System.Speech.Synthesis.PromptStyle>-Objekt als Argument an.</span><span class="sxs-lookup"><span data-stu-id="830e3-349">The <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> method takes a <xref:System.Speech.Synthesis.PromptStyle> object as its argument.</span></span> <span data-ttu-id="830e3-350">Mit den Eigenschaften des <xref:System.Speech.Synthesis.PromptStyle> Objekts können Sie den Fokus, die Sprechgeschwindigkeit und das Volume (Lautstärke) festlegen, die auf die Sprachausgabe angewendet werden sollen, während der Stil wirksam ist.</span><span class="sxs-lookup"><span data-stu-id="830e3-350">You can use the properties of the <xref:System.Speech.Synthesis.PromptStyle> object to set the emphasis, speaking rate, and volume (loudness) to apply to speech output while the style is in effect.</span></span> <span data-ttu-id="830e3-351">Um den aktuellen Stil nicht mehr zu verwenden, müssen Sie die <xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A>-Methode aufzurufen.</span><span class="sxs-lookup"><span data-stu-id="830e3-351">To stop using the current style, call the <xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A> method.</span></span>  
  
> [!NOTE]
> -   <span data-ttu-id="830e3-352">Die Sprachsynthese-Engines in Windows unterstützen zu diesem Zeitpunkt nicht den Schwerpunkt Parameter.</span><span class="sxs-lookup"><span data-stu-id="830e3-352">The speech synthesis engines in Windows do not support the emphasis parameter at this time.</span></span> <span data-ttu-id="830e3-353">Durch Festlegen von Werten für den Schwerpunkt Parameter wird keine akustische Änderung in der Ausgabe der synthetisierten Sprache erzeugt.</span><span class="sxs-lookup"><span data-stu-id="830e3-353">Setting values for the emphasis parameter will produce no audible change in the synthesized speech output.</span></span>  
> -   <span data-ttu-id="830e3-354">Die <xref:System.Speech.Synthesis.PromptVolume.Default> Einstellung für <xref:System.Speech.Synthesis.PromptVolume> ist ein vollständiges Volume, das dem <xref:System.Speech.Synthesis.PromptVolume.ExtraLoud>entspricht.</span><span class="sxs-lookup"><span data-stu-id="830e3-354">The <xref:System.Speech.Synthesis.PromptVolume.Default> setting for <xref:System.Speech.Synthesis.PromptVolume> is full volume, which is the same as <xref:System.Speech.Synthesis.PromptVolume.ExtraLoud>.</span></span> <span data-ttu-id="830e3-355">Die anderen Einstellungen verringern den Umfang der Sprachausgabe in Relation zum vollständigen Volume.</span><span class="sxs-lookup"><span data-stu-id="830e3-355">The other settings decrease the volume of speech output relative to full volume.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="830e3-356">Im folgenden Beispiel wird ein <xref:System.Speech.Synthesis.PromptBuilder> Objekt erstellt und Text Zeichenfolgen angehängt.</span><span class="sxs-lookup"><span data-stu-id="830e3-356">The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends text strings.</span></span> <span data-ttu-id="830e3-357">Im Beispiel wird die <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A>-Methode verwendet, um eine langsame Sprechgeschwindigkeit für die hinzugefügte Zeichenfolge anzugeben, die den Inhalt einer Bestellung auflistet.</span><span class="sxs-lookup"><span data-stu-id="830e3-357">The example uses the <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> method to specify a slow speaking rate for the string being added, which enumerates the contents of an order.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and add content.  
        PromptBuilder style = new PromptBuilder();  
        style.AppendText("Your order for");  
        style.StartStyle(new PromptStyle(PromptRate.Slow));  
        style.AppendText("one kitchen sink and one faucet");  
        style.EndStyle();  
        style.AppendText("has been confirmed.");  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(style);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="StartVoice">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="830e3-358">Weist den Synthesizer an, die Stimme in einem <see cref="T:System.Speech.Synthesis.PromptBuilder" />-Objekt zu ändern.</span><span class="sxs-lookup"><span data-stu-id="830e3-358">Instructs the synthesizer to change the voice in a <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="830e3-359">Eine Stimme stellt eine installierte TTS-Engine dar.</span><span class="sxs-lookup"><span data-stu-id="830e3-359">A voice represents an installed TTS engine.</span></span> <span data-ttu-id="830e3-360">Verwenden Sie die <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>-Methoden und <xref:System.Speech.Synthesis.VoiceInfo>-Klasse, um die Namen und Attribute der installierten TTS-Stimmen (Text-to-Speech) abzurufen, die Sie auswählen können.</span><span class="sxs-lookup"><span data-stu-id="830e3-360">Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select.</span></span>  
  
 <span data-ttu-id="830e3-361">Wenn eine Anwendung <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>aufruft, überprüft die Methode, ob jede der in der Registrierung gefundenen Stimmen bestimmte Mindestkriterien erfüllt.</span><span class="sxs-lookup"><span data-stu-id="830e3-361">When an application calls <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, the method verifies that each of the voices it finds in the registry meets certain minimum criteria.</span></span> <span data-ttu-id="830e3-362">Für jede Stimme, bei der die Überprüfung fehlschlägt, legt <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> die <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>-Eigenschaft auf `False`fest.</span><span class="sxs-lookup"><span data-stu-id="830e3-362">For any voice that fails verification, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> sets its <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property to `False`.</span></span> <span data-ttu-id="830e3-363">Eine Anwendung kann keine der <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> Methoden einer Stimme aufzurufen, deren <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>-Eigenschaft `False`ist.</span><span class="sxs-lookup"><span data-stu-id="830e3-363">An application cannot call any of the <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> methods on a voice whose <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property is `False`.</span></span> <span data-ttu-id="830e3-364">In der Regel wird die <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>-Eigenschaft einer Stimme von Anwendungen nicht festgelegt.</span><span class="sxs-lookup"><span data-stu-id="830e3-364">Typically, applications will not set a voice's <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="StartVoice">
      <MemberSignature Language="C#" Value="public void StartVoice (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartVoice(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartVoice (culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartVoice(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.StartVoice : System.Globalization.CultureInfo -&gt; unit" Usage="promptBuilder.StartVoice culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture"><span data-ttu-id="830e3-365">Enthält Informationen über eine bestimmte Kultur, wie die Sprache, den Namen der Kultur, das Schreibsystem, den verwendeten Kalender und darüber, wie Datumsangaben formatiert und Zeichenfolgen sortiert werden.</span><span class="sxs-lookup"><span data-stu-id="830e3-365">Provides information about a specific culture, such as the language, the name of the culture, the writing system, the calendar used, and how to format dates and sort strings.</span></span></param>
        <summary><span data-ttu-id="830e3-366">Weist den Synthesizer an, die Stimme im <see cref="T:System.Speech.Synthesis.PromptBuilder" />-Objekt zu ändern und gibt die Kultur der zu verwendenden Stimme an.</span><span class="sxs-lookup"><span data-stu-id="830e3-366">Instructs the synthesizer to change the voice in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the culture of the voice to use.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="830e3-367">Der `culture`-Parameter für <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> kann sich von der <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>-Eigenschaft des <xref:System.Speech.Synthesis.PromptBuilder> Objekts unterscheiden, in dem es enthalten ist.</span><span class="sxs-lookup"><span data-stu-id="830e3-367">The `culture` parameter for <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> can be different than the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property of the <xref:System.Speech.Synthesis.PromptBuilder> object that contains it.</span></span>  <span data-ttu-id="830e3-368">Wenngleich der Wert des `culture`-Parameters die <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>-Eigenschaft überschreibt.</span><span class="sxs-lookup"><span data-stu-id="830e3-368">While in effect, the value of the `culture` parameter will override the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property.</span></span> <span data-ttu-id="830e3-369">Der <xref:System.Speech.Synthesis.SpeechSynthesizer> versucht, eine installierte Stimme auszuwählen, die die durch den `culture`-Parameter angegebene Sprache unterstützt, um den von <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> und <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>eingeschlossenen Inhalt zu sprechen.</span><span class="sxs-lookup"><span data-stu-id="830e3-369">The <xref:System.Speech.Synthesis.SpeechSynthesizer> will attempt to select an installed voice that supports the language specified by the `culture` parameter to speak the content enclosed by <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> and <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span></span> <span data-ttu-id="830e3-370">Wenn eine Stimme mit der angegebenen Kultur gefunden wird, wird diese verwendet.</span><span class="sxs-lookup"><span data-stu-id="830e3-370">If a voice with the specified culture is found, it will be used.</span></span> <span data-ttu-id="830e3-371">Wenn eine Stimme mit der angegebenen Kultur nicht gefunden werden kann, wird die Standardsprache verwendet.</span><span class="sxs-lookup"><span data-stu-id="830e3-371">If a voice with the specified culture cannot be found, the default voice will be used.</span></span> <span data-ttu-id="830e3-372">Um die von <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>angegebene Stimme nicht mehr zu verwenden, wenden Sie <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>an.</span><span class="sxs-lookup"><span data-stu-id="830e3-372">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>, call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span></span>  
  
 <span data-ttu-id="830e3-373">Zum ordnungsgemäßen aussprechen von Wörtern in der durch den `culture`-Parameter angegebenen Sprache muss eine Sprachsynthese-Engine (Text-zu-Sprache oder TTS) installiert sein, die die Sprache unterstützt.</span><span class="sxs-lookup"><span data-stu-id="830e3-373">To correctly pronounce words in the language specified by the `culture` parameter, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed.</span></span> <span data-ttu-id="830e3-374">Eine installierte TTS-Engine wird als Stimme bezeichnet.</span><span class="sxs-lookup"><span data-stu-id="830e3-374">An installed TTS engine is called a voice.</span></span> <span data-ttu-id="830e3-375">Verwenden Sie die <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>-Methode, um Informationen darüber zu erhalten, welche Stimmen für eine bestimmte Kultur installiert sind.</span><span class="sxs-lookup"><span data-stu-id="830e3-375">To get information about which voices are installed for a specific culture, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method.</span></span>  
  
 <span data-ttu-id="830e3-376">Microsoft Windows und die System. Speech-API akzeptieren alle gültigen Sprachen Ländercodes als Werte für `culture`.</span><span class="sxs-lookup"><span data-stu-id="830e3-376">Microsoft Windows and the System.Speech API accept all valid language-country codes as values for `culture`.</span></span> <span data-ttu-id="830e3-377">Die TTS-Engines, die mit Windows 7 ausgeliefert wurden, unterstützen die folgenden sprach Ländercodes:</span><span class="sxs-lookup"><span data-stu-id="830e3-377">The TTS engines that shipped with Windows 7 support the following language-country codes:</span></span>  
  
-   <span data-ttu-id="830e3-378">en-US.</span><span class="sxs-lookup"><span data-stu-id="830e3-378">en-US.</span></span> <span data-ttu-id="830e3-379">Englisch (USA)</span><span class="sxs-lookup"><span data-stu-id="830e3-379">English (United States)</span></span>  
  
-   <span data-ttu-id="830e3-380">zh-CN.</span><span class="sxs-lookup"><span data-stu-id="830e3-380">zh-CN.</span></span> <span data-ttu-id="830e3-381">Chinesisch (China)</span><span class="sxs-lookup"><span data-stu-id="830e3-381">Chinese (China)</span></span>  
  
-   <span data-ttu-id="830e3-382">zh-tw.</span><span class="sxs-lookup"><span data-stu-id="830e3-382">zh-TW.</span></span> <span data-ttu-id="830e3-383">Chinesisch (Taiwan)</span><span class="sxs-lookup"><span data-stu-id="830e3-383">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="830e3-384">Sprachcodes mit zwei Buchstaben, z. b. "en", sind ebenfalls zulässig.</span><span class="sxs-lookup"><span data-stu-id="830e3-384">Two-letter language codes such as "en" are also permitted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartVoice">
      <MemberSignature Language="C#" Value="public void StartVoice (System.Speech.Synthesis.VoiceGender gender);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartVoice(valuetype System.Speech.Synthesis.VoiceGender gender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartVoice (gender As VoiceGender)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartVoice(System::Speech::Synthesis::VoiceGender gender);" />
      <MemberSignature Language="F#" Value="member this.StartVoice : System.Speech.Synthesis.VoiceGender -&gt; unit" Usage="promptBuilder.StartVoice gender" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
      </Parameters>
      <Docs>
        <param name="gender"><span data-ttu-id="830e3-385">Das Geschlecht der zu verwendenden Stimme.</span><span class="sxs-lookup"><span data-stu-id="830e3-385">The gender of the voice to use.</span></span></param>
        <summary><span data-ttu-id="830e3-386">Weist den Synthesizer an, die Stimme im <see cref="T:System.Speech.Synthesis.PromptBuilder" />-Objekt zu ändern und gibt das Geschlecht der zu verwendenden Stimme an.</span><span class="sxs-lookup"><span data-stu-id="830e3-386">Instructs the synthesizer to change the voice in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the gender of the voice to use.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="830e3-387">Verwenden Sie die <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>-Methoden und <xref:System.Speech.Synthesis.VoiceInfo>-Klasse, um die Namen und Attribute der installierten TTS-Stimmen (Text-to-Speech) abzurufen, die Sie auswählen können.</span><span class="sxs-lookup"><span data-stu-id="830e3-387">Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select.</span></span>  
  
 <span data-ttu-id="830e3-388">, Wenn die durch <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>-<xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>angegebene Stimme nicht mehr verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="830e3-388">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartVoice">
      <MemberSignature Language="C#" Value="public void StartVoice (System.Speech.Synthesis.VoiceInfo voice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartVoice(class System.Speech.Synthesis.VoiceInfo voice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartVoice (voice As VoiceInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartVoice(System::Speech::Synthesis::VoiceInfo ^ voice);" />
      <MemberSignature Language="F#" Value="member this.StartVoice : System.Speech.Synthesis.VoiceInfo -&gt; unit" Usage="promptBuilder.StartVoice voice" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="voice" Type="System.Speech.Synthesis.VoiceInfo" />
      </Parameters>
      <Docs>
        <param name="voice"><span data-ttu-id="830e3-389">Die Kriterien für die zu verwendende Stimme.</span><span class="sxs-lookup"><span data-stu-id="830e3-389">The criteria for the voice to use.</span></span></param>
        <summary><span data-ttu-id="830e3-390">Weist den Synthesizer an, die Stimme im <see cref="T:System.Speech.Synthesis.PromptBuilder" />-Objekt zu ändern und gibt Kriterien für die neue Stimme an.</span><span class="sxs-lookup"><span data-stu-id="830e3-390">Instructs the synthesizer to change the voice in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies criteria for the new voice.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="830e3-391">Verwenden Sie die <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>-Methoden und <xref:System.Speech.Synthesis.VoiceInfo>-Klasse, um die Namen und Attribute der installierten TTS-Stimmen (Text-to-Speech) abzurufen, die Sie auswählen können.</span><span class="sxs-lookup"><span data-stu-id="830e3-391">Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select.</span></span>  
  
 <span data-ttu-id="830e3-392">, Wenn die durch <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>-<xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>angegebene Stimme nicht mehr verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="830e3-392">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartVoice">
      <MemberSignature Language="C#" Value="public void StartVoice (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartVoice(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartVoice (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartVoice(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.StartVoice : string -&gt; unit" Usage="promptBuilder.StartVoice name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="830e3-393">Der Name der Stimme, die verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="830e3-393">The name of the voice to use.</span></span></param>
        <summary><span data-ttu-id="830e3-394">Weist den Synthesizer an, die Stimme im <see cref="T:System.Speech.Synthesis.PromptBuilder" />-Objekt zu ändern und gibt den Namen der zu verwendenden Stimme an.</span><span class="sxs-lookup"><span data-stu-id="830e3-394">Instructs the synthesizer to change the voice in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the name of the voice to use.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="830e3-395">Um Informationen darüber zu erhalten, welche Stimmen installiert sind, verwenden Sie eine der-<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> Methoden.</span><span class="sxs-lookup"><span data-stu-id="830e3-395">To get information about which voices are installed, use one of the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods.</span></span>  
  
 <span data-ttu-id="830e3-396">, Wenn die durch <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>-<xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>angegebene Stimme nicht mehr verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="830e3-396">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartVoice">
      <MemberSignature Language="C#" Value="public void StartVoice (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartVoice(valuetype System.Speech.Synthesis.VoiceGender gender, valuetype System.Speech.Synthesis.VoiceAge age) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartVoice (gender As VoiceGender, age As VoiceAge)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartVoice(System::Speech::Synthesis::VoiceGender gender, System::Speech::Synthesis::VoiceAge age);" />
      <MemberSignature Language="F#" Value="member this.StartVoice : System.Speech.Synthesis.VoiceGender * System.Speech.Synthesis.VoiceAge -&gt; unit" Usage="promptBuilder.StartVoice (gender, age)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
        <Parameter Name="age" Type="System.Speech.Synthesis.VoiceAge" />
      </Parameters>
      <Docs>
        <param name="gender"><span data-ttu-id="830e3-397">Das Geschlecht der neuen zu verwendenden Stimme.</span><span class="sxs-lookup"><span data-stu-id="830e3-397">The gender of the new voice to use.</span></span></param>
        <param name="age"><span data-ttu-id="830e3-398">Das Alter der zu verwendenden Stimme.</span><span class="sxs-lookup"><span data-stu-id="830e3-398">The age of the voice to use.</span></span></param>
        <summary><span data-ttu-id="830e3-399">Weist den Synthesizer an, die Stimme im <see cref="T:System.Speech.Synthesis.PromptBuilder" />-Objekt zu ändern und gibt das Geschlecht und das Alter der neuen Stimme an.</span><span class="sxs-lookup"><span data-stu-id="830e3-399">Instructs the synthesizer to change the voice in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the gender and the age of the new voice.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="830e3-400">Verwenden Sie die <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>-Methoden und <xref:System.Speech.Synthesis.VoiceInfo>-Klasse, um die Namen und Attribute der installierten TTS-Stimmen (Text-to-Speech) abzurufen, die Sie auswählen können.</span><span class="sxs-lookup"><span data-stu-id="830e3-400">Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select.</span></span>  
  
 <span data-ttu-id="830e3-401">, Wenn die durch <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>-<xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>angegebene Stimme nicht mehr verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="830e3-401">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartVoice">
      <MemberSignature Language="C#" Value="public void StartVoice (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age, int voiceAlternate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartVoice(valuetype System.Speech.Synthesis.VoiceGender gender, valuetype System.Speech.Synthesis.VoiceAge age, int32 voiceAlternate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartVoice (gender As VoiceGender, age As VoiceAge, voiceAlternate As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartVoice(System::Speech::Synthesis::VoiceGender gender, System::Speech::Synthesis::VoiceAge age, int voiceAlternate);" />
      <MemberSignature Language="F#" Value="member this.StartVoice : System.Speech.Synthesis.VoiceGender * System.Speech.Synthesis.VoiceAge * int -&gt; unit" Usage="promptBuilder.StartVoice (gender, age, voiceAlternate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
        <Parameter Name="age" Type="System.Speech.Synthesis.VoiceAge" />
        <Parameter Name="voiceAlternate" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="gender"><span data-ttu-id="830e3-402">Das Geschlecht der zu verwendenden Stimme.</span><span class="sxs-lookup"><span data-stu-id="830e3-402">The gender of the voice to use.</span></span></param>
        <param name="age"><span data-ttu-id="830e3-403">Das Alter der zu verwendenden Stimme.</span><span class="sxs-lookup"><span data-stu-id="830e3-403">The age of the voice to use.</span></span></param>
        <param name="voiceAlternate"><span data-ttu-id="830e3-404">Eine ganze Zahl, die eine bevorzugte Stimme angibt, wenn mehr als eine Stimme den <paramref name="gender" /> und <paramref name="age" />-Parametern entspricht.</span><span class="sxs-lookup"><span data-stu-id="830e3-404">An integer that specifies a preferred voice when more than one voice matches the <paramref name="gender" /> and <paramref name="age" /> parameters.</span></span></param>
        <summary><span data-ttu-id="830e3-405">Weist den Synthesizer an, die Stimme im <see cref="T:System.Speech.Synthesis.PromptBuilder" />-Objekt zu ändern und gibt ihr Geschlecht, Alter und eine bevorzugte Stimme an, die dem angegebenen Geschlecht und Alter entspricht.</span><span class="sxs-lookup"><span data-stu-id="830e3-405">Instructs the synthesizer to change the voice in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies its gender, age, and a preferred voice that matches the specified gender and age.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="830e3-406">Eine Sprachsynthese-Engine zählt die gefundenen Übereinstimmungen für die angegebenen Parameter und gibt die Stimme zurück, wenn die Anzahl gleich dem `voiceAlternate`-Parameter ist.</span><span class="sxs-lookup"><span data-stu-id="830e3-406">A speech synthesis engine counts the matches it finds for the specified parameters, and returns the voice when the count equals the `voiceAlternate` parameter.</span></span>  
  
 <span data-ttu-id="830e3-407">Verwenden Sie die <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>-Methoden und <xref:System.Speech.Synthesis.VoiceInfo>-Klasse, um die Namen und Attribute der installierten TTS-Stimmen (Text-to-Speech) abzurufen, die Sie auswählen können.</span><span class="sxs-lookup"><span data-stu-id="830e3-407">Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select.</span></span>  
  
 <span data-ttu-id="830e3-408">, Wenn die durch <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>-<xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>angegebene Stimme nicht mehr verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="830e3-408">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge)" />
      </Docs>
    </Member>
    <Member MemberName="ToXml">
      <MemberSignature Language="C#" Value="public string ToXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.ToXml" />
      <MemberSignature Language="VB.NET" Value="Public Function ToXml () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToXml();" />
      <MemberSignature Language="F#" Value="member this.ToXml : unit -&gt; string" Usage="promptBuilder.ToXml " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="830e3-409">Gibt das SSML zurück, das aus dem <see cref="T:System.Speech.Synthesis.PromptBuilder" />-Objekt generiert wird.</span><span class="sxs-lookup"><span data-stu-id="830e3-409">Returns the SSML generated from the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <returns><span data-ttu-id="830e3-410">Gibt das SSML zurück, das aus dem <see cref="T:System.Speech.Synthesis.PromptBuilder" />-Objekt als einzelne Zeile generiert wird.</span><span class="sxs-lookup"><span data-stu-id="830e3-410">Returns the SSML generated from the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object as a single line.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="830e3-411">Die <xref:System.Speech.Synthesis.PromptBuilder.ToXml%2A>-Methode versucht nicht, die zurückgegebene SSML in irgendeiner Weise zu formatieren.</span><span class="sxs-lookup"><span data-stu-id="830e3-411">The <xref:System.Speech.Synthesis.PromptBuilder.ToXml%2A> method makes no attempt to format the returned SSML in any way.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="830e3-412">Im folgenden Beispiel wird ein <xref:System.Speech.Synthesis.PromptBuilder> Objekt erstellt, Text angefügt und dann die SSML-Entsprechung der Eingabeaufforderung in die Konsole geschrieben, bevor der Inhalt der Eingabeaufforderung gesprochen wird.</span><span class="sxs-lookup"><span data-stu-id="830e3-412">The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object, appends text, and then writes the SSML equivalent of the prompt to the console before speaking the contents of the prompt.</span></span>  
  
```csharp  
  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and add content.  
        PromptBuilder style = new PromptBuilder();  
        style.AppendText("Your order for");  
        style.StartStyle(new PromptStyle(PromptRate.Slow));  
        style.AppendText("one kitchen sink and one faucet");  
        style.EndStyle();  
        style.AppendText("has been confirmed.");  
  
        // Write the contents of the PromptBuilder object to the console as  
        // an SSML-compatible XML file.  
        string myXml = style.ToXml();  
        Console.WriteLine("This is the SSML equivalent of the PromptBuilder: \n\n" + myXml);  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(style);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

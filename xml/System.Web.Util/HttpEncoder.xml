<Type Name="HttpEncoder" FullName="System.Web.Util.HttpEncoder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f87e4daf65dd7c0c3a1289bfb49564ffe1d3d0af" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86655474" /></Metadata><TypeSignature Language="C#" Value="public class HttpEncoder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HttpEncoder extends System.Object" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="DocId" Value="T:System.Web.Util.HttpEncoder" />
  <TypeSignature Language="VB.NET" Value="Public Class HttpEncoder" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpEncoder" />
  <TypeSignature Language="F#" Value="type HttpEncoder = class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi HttpEncoder extends System.Object" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt Codierungs- und Decodierungslogik bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die-Klasse enthält Codierungs-und Decodierungs Logik, die von Methoden in Klassen wie <xref:System.Web.HttpUtility> , und verwendet wird <xref:System.Web.HttpServerUtility> <xref:System.Net.HttpResponseHeader> .  
  
 Sie können von der <xref:System.Web.Util.HttpEncoder> -Klasse erben und das zugehörige Verhalten überschreiben, um das Standardverhalten für die Codierung und Decodierung von ASP.net anzupassen. Anschließend legen Sie die- <xref:System.Web.Configuration.HttpRuntimeSection.EncoderType%2A> Eigenschaft der- <xref:System.Web.Configuration.HttpRuntimeSection> Klasse fest, um die benutzerdefinierte Klasse zu konfigurieren.  
  
 Eine benutzerdefinierte Klasse zum Codieren und decodieren, die von abgeleitet wird, <xref:System.Web.Util.HttpEncoder> kann das integrierte ASP.net-Codierungs-und Decodierungs Verhalten überschreiben oder nur ausgewählte Aspekte ändern.  
  
 Sie können den benutzerdefinierten Codierungstyp für in ASP.net konfigurieren, um das folgende Codierungs Verhalten zu ersetzen oder zu ergänzen:  
  
-   HTML-Codierung  
  
-   HTML-Attribut Codierung  
  
-   URL-Codierung  
  
-   URL-Pfad Codierung  
  
-   HTTP-Header Name und Header Wert Codierung  
  
 Standardmäßig sind ASP.NET-Anwendungen so konfiguriert, dass Sie den- <xref:System.Web.Security.AntiXss.AntiXssEncoder> Typ für alle Ausgabe Codierungen verwenden.  
  
 Das folgende Beispiel aus einer Web.config Datei auf Anwendungsebene zeigt, wie der- <xref:System.Web.Security.AntiXss.AntiXssEncoder> Typ für eine ASP.NET-Anwendung festgelegt wird:  
  
 `<httpRuntime requestValidationMode="4.5" encoderType="System.Web.Security.AntiXss.AntiXssEncoder, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"/>`  
  
 Die-Konfigurationseinstellung im Beispiel legt die-Klasse so fest <xref:System.Web.Security.AntiXss.AntiXssEncoder> , dass alle Ausgabe Codierungen in der Anwendung durchgeführt werden. Weitere Informationen finden Sie in der <xref:System.Web.Security.AntiXss.AntiXssEncoder> Übersicht über die-Klasse.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Wenn Sie eine benutzerdefinierte encoderklasse erstellen und die Basis Methoden der Basisklasse überschreiben, löst der abgeleitete Encoder möglicherweise eine Ausnahme von einer der überschriebenen Methoden aus. In den folgenden Fällen kann das Auslösen einer solchen Ausnahme in ASP.net zu unerwartetem Verhalten führen:  
  
Wenn ASP.net eine Fehlerseite rendert, die durch eine nicht behandelte Ausnahme verursacht wird, die von einem benutzerdefinierten Encoder ausgelöst wurde, versucht ASP.net nicht, die Fehlerausgabe zu codieren, indem der benutzerdefinierte Encoder aufgerufen wird. Dadurch werden rekursive Fehlerzustände vermieden.  
  
-Wenn ASP.NET HTTP-Header an IIS sendet, verfügt ASP.net nicht über die Bereitstellung von nicht behandelten Ausnahmen. Daher wird die ASP.NET-Standard Fehlerseite gerendert (wenn die Konfigurationseinstellungen die Anzeige dieser Seite erlauben).</para></block>
    <altmember cref="T:System.Web.HttpUtility" />
    <altmember cref="T:System.Web.HttpServerUtility" />
    <altmember cref="T:System.Web.Configuration.HttpRuntimeSection" />
    <altmember cref="T:System.Web.Security.AntiXss.AntiXssEncoder" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpEncoder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.Util.HttpEncoder" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.Web.Util.HttpEncoder Current { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Util.HttpEncoder Current" />
      <MemberSignature Language="DocId" Value="P:System.Web.Util.HttpEncoder.Current" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Current As HttpEncoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Util::HttpEncoder ^ Current { System::Web::Util::HttpEncoder ^ get(); void set(System::Web::Util::HttpEncoder ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.Web.Util.HttpEncoder with get, set" Usage="System.Web.Util.HttpEncoder.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.HttpEncoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den <see cref="T:System.Web.Util.HttpEncoder" />-Typ ab, der in einer Anwendung verwendet wird, oder legt ihn fest.</summary>
        <value>Ein Verweis auf den Codierer-Decodierer-Typ, der verwendet wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn ein abgeleiteter <xref:System.Web.Util.HttpEncoder> Typ in der Konfigurationsdatei angegeben wird, gibt die- <xref:System.Web.Util.HttpEncoder.Current%2A> Eigenschaft einen Verweis auf den benutzerdefinierten Typ zurück. Wenn jedoch kein benutzerdefinierter Encoder verwendet wird, gibt die-Eigenschaft einen Verweis auf die standardmäßige ASP.net- <xref:System.Web.Util.HttpEncoder> Instanz zurück.  
  
 Die- <xref:System.Web.Util.HttpEncoder.Current%2A> Eigenschaft ist nicht Thread sicher. Legen Sie diese Eigenschaft nur in der-Methode der Anwendung fest `Application_Start` , da `Application_Start` in einem einzelnen Thread ausgeführt wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Encoderinstanz, die dieser Eigenschaft zugewiesen wird, ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static System.Web.Util.HttpEncoder Default { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Util.HttpEncoder Default" />
      <MemberSignature Language="DocId" Value="P:System.Web.Util.HttpEncoder.Default" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Default As HttpEncoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Util::HttpEncoder ^ Default { System::Web::Util::HttpEncoder ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Default : System.Web.Util.HttpEncoder" Usage="System.Web.Util.HttpEncoder.Default" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Util.HttpEncoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Verweis auf den Standardcodierer für ASP.NET ab.</summary>
        <value>Ein Verweis auf den Standardcodierer.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein häufiges Codierungs Problem ist, dass das Standardverhalten von ASP.net <xref:System.Web.Util.HttpEncoder.UrlEncode%2A> Leerzeichen in das Zeichen "+" konvertiert. In der Vergangenheit war das "+"-Zeichen eine Internet Konvention für das Codieren von Leerzeichen in einer URL in eine besser lesbare Weise. Gemäß den Standards sollte das Leerzeichen jedoch als "%20" und nicht als "+"-Zeichen codiert werden. Mit ASP.net können Sie einen besser kompatiblen Codierungs Algorithmus implementieren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HeaderNameValueEncode">
      <MemberSignature Language="C#" Value="protected internal virtual void HeaderNameValueEncode (string headerName, string headerValue, out string encodedHeaderName, out string encodedHeaderValue);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HeaderNameValueEncode(string headerName, string headerValue, [out] string&amp; encodedHeaderName, [out] string&amp; encodedHeaderValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HeaderNameValueEncode(System.String,System.String,System.String@,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HeaderNameValueEncode (headerName As String, headerValue As String, ByRef encodedHeaderName As String, ByRef encodedHeaderValue As String)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HeaderNameValueEncode(System::String ^ headerName, System::String ^ headerValue, [Runtime::InteropServices::Out] System::String ^ % encodedHeaderName, [Runtime::InteropServices::Out] System::String ^ % encodedHeaderValue);" />
      <MemberSignature Language="F#" Value="abstract member HeaderNameValueEncode : string * string * string * string -&gt; unit&#xA;override this.HeaderNameValueEncode : string * string * string * string -&gt; unit" Usage="httpEncoder.HeaderNameValueEncode (headerName, headerValue, encodedHeaderName, encodedHeaderValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="headerName" Type="System.String" />
        <Parameter Name="headerValue" Type="System.String" />
        <Parameter Name="encodedHeaderName" Type="System.String" RefType="out" />
        <Parameter Name="encodedHeaderValue" Type="System.String" RefType="out" />
      </Parameters>
      <Docs>
        <param name="headerName">Der Name des zu codierenden HTTP-Headers.</param>
        <param name="headerValue">Der Wert des zu codierenden HTTP-Headers.</param>
        <param name="encodedHeaderName">Enthält nach dem Beenden dieser Methode den codierten Namen, der für einen HTTP-Header verwendet werden soll. Dieser Parameter wird nicht initialisiert übergeben.</param>
        <param name="encodedHeaderValue">Enthält nach dem Beenden dieser Methode den codierten Wert, der für einen HTTP-Header verwendet werden soll. Dieser Parameter wird nicht initialisiert übergeben.</param>
        <summary>Codiert einen Headernamen und einen Wert in eine Zeichenfolge, die als HTTP-Header verwendet werden kann.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Util.HttpEncoder.HeaderNameValueEncode%2A> -Methode nimmt Eingabe Zeichenfolgen aus den `headerName` `headerValue` Parametern und an und codiert Sie. Die codierten Werte werden als out-Parameter zurückgegeben.  
  
 Die <xref:System.Web.Util.HttpEncoder.HeaderNameValueEncode%2A> -Methode verwendet die folgende Logik, um Header Namen und-Werte zu codieren:  
  
-   Alle Zeichen, deren Unicode-Wert kleiner ist als das ASCII-Zeichen 32, mit Ausnahme von ASCII-Zeichen 9, sind in einem Format von URL codiert, in dem `%NN` die `N` Zeichen hexadezimale Werte darstellen.  
  
-   Das ASCII-Zeichen 9 (das horizontale Tabstopp Zeichen) ist nicht URL-codiert.  
  
-   Das ASCII-Zeichen 127 wird als codiert `%7F` .  
  
-   Alle anderen Zeichen sind nicht codiert.  
  
    > [!NOTE]
    >  Obwohl diese Methode für Unicode-Werte verwendet werden kann, wird Sie in der Regel für Werte im ASCII-Bereich verwendet.  
  
 Die Standard Implementierung der- <xref:System.Web.Util.HttpEncoder.HeaderNameValueEncode%2A> Methode gibt den Wert von `headerValue` in zurück, `encodedHeaderValue` Wenn `headerValue` ist `null` oder eine leere Zeichenfolge ist. Entsprechend gibt die Standard Implementierung den Wert von in zurück, `headerName` `encodedHeaderName` Wenn `headerName` ist `null` oder eine leere Zeichenfolge ist.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HtmlAttributeEncode">
      <MemberSignature Language="C#" Value="protected internal virtual void HtmlAttributeEncode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HtmlAttributeEncode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HtmlAttributeEncode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HtmlAttributeEncode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="abstract member HtmlAttributeEncode : string * System.IO.TextWriter -&gt; unit&#xA;override this.HtmlAttributeEncode : string * System.IO.TextWriter -&gt; unit" Usage="httpEncoder.HtmlAttributeEncode (value, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">Die zu codierende Zeichenfolge.</param>
        <param name="output">Der TextWriter, in den der codierte Wert geschrieben werden soll.</param>
        <summary>Codiert einen eingehenden Wert in eine Zeichenfolge, die in ein HTML-Attribut eingefügt werden kann, das durch einfache oder doppelte Anführungszeichen getrennt wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die- <xref:System.Web.Util.HttpEncoder.HtmlAttributeEncode%2A> Methode codiert Zeichen mithilfe der HTML-Standard Entitäten. Beispielsweise wird die (öffnende Spitze `<` Klammer) als codiert `&lt;` und der (umgekehrter `\` Schrägstrich) als codiert `&#92;` .  
  
 Es ist sicher, dass <xref:System.Web.Util.HttpEncoder.HtmlAttributeEncode%2A> Attribute in einzelnen Anführungszeichen und in doppelten Anführungszeichen verwendet werden können. Die Werte müssen in Anführungszeichen eingeschlossen werden.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="output" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HtmlDecode">
      <MemberSignature Language="C#" Value="protected internal virtual void HtmlDecode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HtmlDecode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HtmlDecode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HtmlDecode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HtmlDecode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="abstract member HtmlDecode : string * System.IO.TextWriter -&gt; unit&#xA;override this.HtmlDecode : string * System.IO.TextWriter -&gt; unit" Usage="httpEncoder.HtmlDecode (value, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">Die zu decodierende Zeichenfolge.</param>
        <param name="output">Der TextWriter, in den der decodierte Wert geschrieben werden soll.</param>
        <summary>Hebt die Codierung eines Werts von einer HTML-codierten Zeichenfolge auf.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der folgenden Tabelle sind die Zeichen folgen aufgelistet, die von der ASP.net-Decodierungs Logik decodiert werden können  
  
|Zeichen Sequenz|Regel|  
|------------------------|----------|  
|`&#NNN;` (dezimal Codes für ASCII-Zeichen).|Decodiert als das angegebene ASCII-Zeichen. Die Zeichen Sequenz beginnt bei der ersten Ziffer nach dem #-Zeichen und endet am Semikolon.|  
|`&#xZZ;` (hexadezimale Codes für ASCII-Zeichen).|Decodiert als das angegebene ASCII-Zeichen. Das codierte Formular gibt das Zeichen an, indem hexadezimale Zeichen anstelle eines Dezimal Werts verwendet werden. Die Zeichen Sequenz beginnt bei der ersten Ziffer nach dem #-Zeichen und endet am Semikolon.|  
|Benannte HTML-Entitäten.|Decodiert als entsprechendes ASCII-Zeichen.|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="output" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="protected internal virtual void HtmlEncode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HtmlEncode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HtmlEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HtmlEncode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HtmlEncode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="abstract member HtmlEncode : string * System.IO.TextWriter -&gt; unit&#xA;override this.HtmlEncode : string * System.IO.TextWriter -&gt; unit" Usage="httpEncoder.HtmlEncode (value, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">Die zu codierende Zeichenfolge.</param>
        <param name="output">Der TextWriter, in den der codierte Wert geschrieben werden soll.</param>
        <summary>Codiert eine Zeichenfolge in eine HTML-codierte Zeichenfolge.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der folgenden Tabelle sind die Zeichen folgen aufgelistet, die von der ASP.net-Codierungs Logik decodiert werden können.  
  
|Zeichen|Codiert als|  
|---------------|----------------|  
|`<` (öffnende spitze Klammer)|`&lt;`|  
|`>` (schließende spitze Klammer)|`&gt;`|  
|`"` (doppelte Anführungszeichen)|`&quot;`|  
|`&` (kaufmännisches Und-Zeichen)|`&amp;`|  
|`\` umgekehrten Schrägstrich|`&#92;`|  
|ASCII-Zeichen von 160 bis 255|`&#NNN;`, wobei `NNN` der dreistellige Dezimalzeichen Code ist.|  
  
 Wenn Sie die- <xref:System.Web.Util.HttpEncoder.HtmlEncode%2A> Methode überschreiben, müssen Sie eine Ausgabe ausgeben, die auch in HTML-Attributen mit doppelten Anführungszeichen oder einem einzelnen Anführungszeichen sicher ist. Dies ermöglicht die Verarbeitung durch die Razor-Engine, bei der Markup und Code kombiniert werden können, z \<tag attr="@value"> . b.. Außerdem ist der @-Operator bei der Verarbeitung durch die Razor-Engine nicht Kontext fähig, daher wird <xref:System.Web.Util.HttpEncoder.HtmlEncode%2A> anstelle von aufgerufen <xref:System.Web.Util.HttpEncoder.HtmlAttributeEncode%2A> .  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="output" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="JavaScriptStringEncode">
      <MemberSignature Language="C#" Value="protected internal virtual string JavaScriptStringEncode (string value);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance string JavaScriptStringEncode(string value) cil managed" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.JavaScriptStringEncode(System.String)" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function JavaScriptStringEncode (value As String) As String" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::String ^ JavaScriptStringEncode(System::String ^ value);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="abstract member JavaScriptStringEncode : string -&gt; string&#xA;override this.JavaScriptStringEncode : string -&gt; string" Usage="httpEncoder.JavaScriptStringEncode value" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value">Die zu codierende Zeichenfolge.</param>
        <summary>Codiert eine Zeichenfolge.</summary>
        <returns>Eine codierte Zeichenfolge.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die URL-Codierung stellt sicher, dass alle Browser Text in URL-Zeichen folgen korrekt übertragen. Zeichen, z. b. ein Fragezeichen (?), kaufmännisches und-Zeichen (&), Schrägstrich (/) und Leerzeichen können von einigen Browsern abgeschnitten oder beschädigt werden. Daher müssen diese Zeichen codiert werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="protected internal virtual byte[] UrlEncode (byte[] bytes, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance unsigned int8[] UrlEncode(unsigned int8[] bytes, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.UrlEncode(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function UrlEncode (bytes As Byte(), offset As Integer, count As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ UrlEncode(cli::array &lt;System::Byte&gt; ^ bytes, int offset, int count);" />
      <MemberSignature Language="F#" Value="abstract member UrlEncode : byte[] * int * int -&gt; byte[]&#xA;override this.UrlEncode : byte[] * int * int -&gt; byte[]" Usage="httpEncoder.UrlEncode (bytes, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">Ein Array von zu codierenden Bytes.</param>
        <param name="offset">Die Position im <paramref name="bytes" />-Array, an der mit der Codierung begonnen werden soll.</param>
        <param name="count">Die zu codierende Anzahl der Elemente im <paramref name="bytes" />.</param>
        <summary>Codiert ein Array von Zeichen, die in einer URL nicht zulässig sind, in eine hexadezimale Zeichenentitätsentsprechung.</summary>
        <returns>Ein Array von codierten Zeichen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die- <xref:System.Web.Util.HttpEncoder.UrlEncode%2A> Methode wird von mehreren URL-Codierungs Methoden in der- <xref:System.Web.HttpUtility> Klasse aufgerufen.  
  
 Die <xref:System.Web.Util.HttpEncoder.UrlEncode%2A> Methode URL codiert alle Zeichen, die nicht in der Gruppe von ASCII-Zeichen enthalten sind, die als URL-sicher angesehen werden. Leerzeichen werden als ASCII-Zeichen codiert `+"` . URL-sichere ASCII-Zeichen enthalten die ASCII-Zeichen (a bis z und a bis z), Ziffern (0 bis 9) und einige Interpunktions Zeichen. In der folgenden Tabelle werden die Interpunktions Zeichen aufgelistet, die als URL-sichere ASCII-Zeichen angesehen werden.  
  
|Zeichen|Beschreibung|  
|---------------|-----------------|  
|-|Hyphen|  
|_|Unterstrich|  
|.|Zeitraum (Punkt)|  
|!|Ausrufezeichen|  
|*|Sternchen (Stern)|  
|(|Öffnende Klammer|  
|)|Schließende Klammer|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> ist kleiner als 0 (null) oder größer als die Länge des <paramref name="bytes" />-Arrays.  
  
- oder - 
 <paramref name="count" /> ist kleiner als 0 (null) oder <paramref name="count" /> plus <paramref name="offset" /> ist größer als die Länge des <paramref name="bytes" />-Arrays.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="bytes" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="UrlPathEncode">
      <MemberSignature Language="C#" Value="protected internal virtual string UrlPathEncode (string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance string UrlPathEncode(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.UrlPathEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function UrlPathEncode (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::String ^ UrlPathEncode(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member UrlPathEncode : string -&gt; string&#xA;override this.UrlPathEncode : string -&gt; string" Usage="httpEncoder.UrlPathEncode value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Die zu codierende Zeichenfolge.</param>
        <summary>Codiert einen Unterabschnitt einer URL.</summary>
        <returns>Eine URL-codierte Zeichenfolge.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Util.HttpEncoder.UrlPathEncode%2A>-Methode wird von der <xref:System.Web.HttpUtility.UrlPathEncode%2A>-Methode aufgerufen. Die- <xref:System.Web.HttpUtility.UrlPathEncode%2A> Methode führt die folgenden Schritte aus:  
  
-   Wendet die Codierungs Logik der <xref:System.Web.Util.HttpEncoder.UrlPathEncode%2A> Methode auf den Pfadteil der URL an (der die Abfrage Zeichenfolge ausschließt). Die-Methode geht davon aus, dass die URL als UTF-8-Zeichenfolge codiert ist.  
  
-   Codiert nicht-Leerzeichen, sodass nur eine Teilmenge der ersten 128 ASCII-Zeichen in der resultierenden codierten Zeichenfolge verwendet wird. Alle Zeichen bei Unicode-Wert 128 und höher oder 32 und kleiner sind URL-codiert.  
  
-   Codiert Leerzeichen als %20.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

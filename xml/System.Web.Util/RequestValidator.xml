<Type Name="RequestValidator" FullName="System.Web.Util.RequestValidator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="41951616ffed628bd8a26682453027515a6bfc3d" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73398968" /></Metadata><TypeSignature Language="C#" Value="public class RequestValidator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RequestValidator extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Util.RequestValidator" />
  <TypeSignature Language="VB.NET" Value="Public Class RequestValidator" />
  <TypeSignature Language="C++ CLI" Value="public ref class RequestValidator" />
  <TypeSignature Language="F#" Value="type RequestValidator = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Definiert Basismethoden für benutzerdefinierte Anforderungsvalidierung.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Standardmäßig überprüft ASP.NET keine Anforderungen, bis Code explizit einen Wert aus der Anforderung anfordert. Beispielsweise überprüft ASP.NET keine Abfrage Zeichen folgen Werte, bis der Code auf die <xref:System.Web.HttpRequest.QueryString%2A> Auflistung zugreift. Standardmäßig überprüft ASP.net auch einige Typen von Anforderungs Daten, z. b. Formular Werte, Cookies, Namen von Dateien, die mit http hochgeladen wurden, und den Wert der <xref:System.Web.HttpRequest.RawUrl%2A>-Eigenschaft.  
  
 Die <xref:System.Web.Util.RequestValidator>-Klasse ist eine Basisklasse, die Sie implementieren können, um eine benutzerdefinierte Anforderungs Validierung bereitzustellen. Wenn Sie diese Klasse implementieren, können Sie bestimmen, wann die Überprüfung stattfindet und welche Art von Anforderungs Daten für die Validierung ausgeführt werden.  
  
 Standardmäßig stellt ASP.net Cross-Site Scripting (XSS)-Überprüfungen bereit. Sie können jedoch die in ASP.NET bereitgestellte Anforderungs Validierungs Logik ergänzen oder ersetzen, indem Sie eine benutzerdefinierte XSS-Implementierung erstellen. Beispielsweise können Sie eine benutzerdefinierte Implementierung der Anforderungs Validierung schreiben, die zusätzlich zum Überprüfen von XSS-Angriffen auf SQL-einschleusungs Angriffe durchsucht.  
  
 Zum Erstellen einer benutzerdefinierten Anforderungs Validierung schreiben Sie eine benutzerdefinierte Klasse, die von der <xref:System.Web.Util.RequestValidator> Basisklasse abgeleitet wird. Anschließend konfigurieren Sie ASP.net, um das benutzerdefinierte Anforderungs Validierungs Steuerelement in der Web. config-Datei auf Anwendungsebene zu verwenden. Sie können die benutzerdefinierte Klasse in den Ordner App_Code, in eine kompilierte Klassenbibliothek im Ordner bin oder in eine kompilierte Klassenbibliothek im GAC einfügen.  
  
> [!NOTE]
>  Für eine Anwendung kann nur ein benutzerdefinierter Anforderungs Validierungstyp konfiguriert werden. Es ist nicht möglich, einen anderen Anforderungs Validierungstyp für einzelne virtuelle Pfade oder Seiten zu konfigurieren.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie ein benutzerdefiniertes Anforderungs Validierungs Steuerelement erstellt wird, das nur eine bestimmte Zeichenfolge für Abfrage Zeichenfolgen-Werte zulässt.  
  
 [!code-csharp[System.Web.Util.RequestValidator#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.util.requestvalidator/cs/requestvalidator.cs#1)]
 [!code-vb[System.Web.Util.RequestValidator#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.util.requestvalidator/vb/requestvalidator.vb#1)]  
  
 Im folgenden Beispiel wird gezeigt, wie ASP.net so konfiguriert wird, dass das benutzerdefinierte Validierungs Steuerelement in der Datei "Web. config" für eine Anwendung verwendet wird.  
  
```  
<system.web>  
  <httpRuntime requestValidationType="CustomRequestValidation" />  
</system.web>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Util.RequestValidationSource" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RequestValidator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.RequestValidator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RequestValidator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.Util.RequestValidator" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Util.RequestValidator>-Klasse verfügt über einen Parameter losen Konstruktor. Wenn eine neue Instanz der-Klasse initialisiert wird, ruft eine interne Methode benutzerdefinierte Validierungs Details aus den Konfigurationsinformationen der Anwendung ab. Die Konfigurationsdetails sind im Abschnitt <xref:System.Web.Configuration.HttpRuntimeSection> enthalten. Weitere Informationen finden Sie unter [httpRuntime-Element (ASP.NET Settings Schema)](https://msdn.microsoft.com/library/e9b81350-8aaf-47cc-9843-5f7d0c59f369) und <xref:System.Web.Configuration.HttpRuntimeSection.RequestValidationType%2A>-Attribut.  
  
 Während der Initialisierung wird eine einzelne Instanz der <xref:System.Web.Util.RequestValidator>-Klasse erstellt, und in der <xref:System.Web.Util.RequestValidator.Current%2A>-Eigenschaft wird ein Verweis auf die Instanz verwaltet. ASP.NET erstellt keine neue Anforderungs Validierungs Steuerelement-Instanz pro Anforderung. Daher müssen benutzerdefinierte Implementierungen der <xref:System.Web.Util.RequestValidator> Klasse Thread sicher sein.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.Web.Util.RequestValidator Current { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Util.RequestValidator Current" />
      <MemberSignature Language="DocId" Value="P:System.Web.Util.RequestValidator.Current" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Current As RequestValidator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Util::RequestValidator ^ Current { System::Web::Util::RequestValidator ^ get(); void set(System::Web::Util::RequestValidator ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.Web.Util.RequestValidator with get, set" Usage="System.Web.Util.RequestValidator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.RequestValidator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Verweis auf die aktuelle <see cref="T:System.Web.Util.RequestValidator" />-Instanz ab, die in einer Anwendung verwendet wird, ab oder legt ihn fest.</summary>
        <value>Eine Instanz der <see cref="T:System.Web.Util.RequestValidator" />-Klasse.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Util.RequestValidator.Current%2A>-Eigenschaft verwaltet einen Verweis auf die einzelne zulässige Instanz der <xref:System.Web.Util.RequestValidator>-Klasse. Wenn keine Instanz vorhanden ist, wird ein neuer erstellt. Wenn bereits eine Instanz vorhanden ist, wird die aktuelle Instanz zurückgegeben.  
  
 Während der Initialisierung wird eine einzelne Instanz der <xref:System.Web.Util.RequestValidator>-Klasse erstellt, und ein Verweis auf die Instanz wird in der <xref:System.Web.Util.RequestValidator.Current%2A>-Eigenschaft verfügbar gemacht. ASP.NET erstellt keine neue Anforderungs Validierungs Steuerelement-Instanz pro Anforderung. Daher müssen benutzerdefinierte Implementierungen der <xref:System.Web.Util.RequestValidator> Klasse Thread sicher sein.  
  
> [!NOTE]
>  Die <xref:System.Web.Util.RequestValidator.Current%2A>-Eigenschaft ist nicht Thread sicher, während die-Eigenschaft einen Verweis auf die aktuelle <xref:System.Web.Util.RequestValidator> Klasse festlegt.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Eigenschaft ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="InvokeIsValidRequestString">
      <MemberSignature Language="C#" Value="public bool InvokeIsValidRequestString (System.Web.HttpContext context, string value, System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, out int validationFailureIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool InvokeIsValidRequestString(class System.Web.HttpContext context, string value, valuetype System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, [out] int32&amp; validationFailureIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.RequestValidator.InvokeIsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool InvokeIsValidRequestString(System::Web::HttpContext ^ context, System::String ^ value, System::Web::Util::RequestValidationSource requestValidationSource, System::String ^ collectionKey, [Runtime::InteropServices::Out] int % validationFailureIndex);" />
      <MemberSignature Language="F#" Value="member this.InvokeIsValidRequestString : System.Web.HttpContext * string * System.Web.Util.RequestValidationSource * string * int -&gt; bool" Usage="requestValidator.InvokeIsValidRequestString (context, value, requestValidationSource, collectionKey, validationFailureIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="value" Type="System.String" Index="1" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="requestValidationSource" Type="System.Web.Util.RequestValidationSource" Index="2" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="collectionKey" Type="System.String" Index="3" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="validationFailureIndex" Type="System.Int32" RefType="out" Index="4" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="context">Der HTTP-Kontext der Anforderung.</param>
        <param name="value">Die zu überprüfenden HTTP-Anforderungsdaten.</param>
        <param name="requestValidationSource">Eine Enumeration, die die Quelle der überprüften Anforderungsdaten darstellt. Folgende Werte kommen für die Enumeration infrage: 
-   <see langword="QueryString" />  
  
-   <see langword="Form" />  
  
-   <see langword="Cookies" />  
  
-   <see langword="Files" />  
  
-   <see langword="Path" />  
  
-   <see langword="PathInfo" />  
  
-   <see langword="Headers" /></param>
        <param name="collectionKey">(Optional) Der Schlüssel in der Anforderungssammlung des zu überprüfenden Elements. Dieser Parameter wird verwendet, wenn die zu überprüfenden Daten aus einer Sammlung abgerufen werden. Wenn die zu überprüfenden Daten nicht aus einer Sammlung stammen, kann dieser Parameter <see langword="null" /> sein.</param>
        <param name="validationFailureIndex">Zeigt bei Rückgabe dieser Methode den auf 0 (null) basierenden Ausgangspunkt des problematischen oder ungültigen Texts in der Anforderungssammlung an. Dieser Parameter wird nicht initialisiert übergeben.</param>
        <summary>Bietet eine öffentliche Methode, die die geschützte <see cref="M:System.Web.Util.RequestValidator.IsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)" />-Methode aufruft , um HTTP-Anforderungsdaten zu überprüfen.</summary>
        <returns><see langword="true" />, wenn die zu validierende Zeichenfolge keine nicht codierten Zeichen enthält, die zu böswilligen Scripting-Angriffen verwendet werden könnten; andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Util.RequestValidator.InvokeIsValidRequestString%2A>-Methode ermöglicht den öffentlichen Zugriff auf die geschützte <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A>-Methode. Auf diese Weise können Sie eine benutzerdefinierte Wrapper Klasse für die <xref:System.Web.Util.RequestValidator>-Klasse erstellen und die <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A>-Methode aufrufen, ohne dass Sie von der <xref:System.Web.Util.RequestValidator>-Klasse erben müssen.  
  
 Weitere Informationen zur Anforderungs Validierung finden Sie unter <xref:System.Web.UnvalidatedRequestValues>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidRequestString">
      <MemberSignature Language="C#" Value="protected internal virtual bool IsValidRequestString (System.Web.HttpContext context, string value, System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, out int validationFailureIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool IsValidRequestString(class System.Web.HttpContext context, string value, valuetype System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, [out] int32&amp; validationFailureIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.RequestValidator.IsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool IsValidRequestString(System::Web::HttpContext ^ context, System::String ^ value, System::Web::Util::RequestValidationSource requestValidationSource, System::String ^ collectionKey, [Runtime::InteropServices::Out] int % validationFailureIndex);" />
      <MemberSignature Language="F#" Value="abstract member IsValidRequestString : System.Web.HttpContext * string * System.Web.Util.RequestValidationSource * string * int -&gt; bool&#xA;override this.IsValidRequestString : System.Web.HttpContext * string * System.Web.Util.RequestValidationSource * string * int -&gt; bool" Usage="requestValidator.IsValidRequestString (context, value, requestValidationSource, collectionKey, validationFailureIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="requestValidationSource" Type="System.Web.Util.RequestValidationSource" />
        <Parameter Name="collectionKey" Type="System.String" />
        <Parameter Name="validationFailureIndex" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="context">Der Kontext der aktuellen Anforderung.</param>
        <param name="value">Die zu überprüfenden HTTP-Anforderungsdaten.</param>
        <param name="requestValidationSource">Eine Enumeration, die die Quelle der überprüften Anforderungsdaten darstellt. Folgende Werte kommen für die Enumeration infrage: 
- <see langword="QueryString" />
- <see langword="Form " />
- <see langword="Cookies" />
- <see langword="Files" />
- <see langword="RawUrl" />
- <see langword="Path" />
- <see langword="PathInfo" />
- <see langword="Headers" /></param>
        <param name="collectionKey">Der Schlüssel in der Anforderungssammlung des zu überprüfenden Elements. Dieser Parameter ist optional. Dieser Parameter wird verwendet, wenn die zu überprüfenden Daten aus einer Sammlung abgerufen werden. Wenn die zu überprüfenden Daten nicht aus einer Sammlung stammen, kann <paramref name="collectionKey" /> <see langword="null" /> sein.</param>
        <param name="validationFailureIndex">Zeigt bei Rückgabe dieser Methode den auf 0 (null) basierenden Ausgangspunkt des problematischen oder ungültigen Texts in der Anforderungssammlung an. Dieser Parameter wird nicht initialisiert übergeben.</param>
        <summary>Überprüft eine Zeichenfolge, die HTTP-Anforderungsdaten enthält.</summary>
        <returns><see langword="true" />, wenn die zu überprüfende Zeichenfolge gültig ist; andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie implementieren diese Methode, um eine benutzerdefinierte Validierung der Anforderungs Daten auszuführen. Das Basis Verhalten der <xref:System.Web.Util.RequestValidator.IsValidRequestString%28System.Web.HttpContext%2CSystem.String%2CSystem.Web.Util.RequestValidationSource%2CSystem.String%2CSystem.Int32%40%29>-Methode ähnelt dem Verhalten, das von ASP.NET intern implementiert wird, um bei der Überprüfung auf gefährliche Zeichen folgen in der übergreifenden Skript Validierung zu suchen. Weitere Informationen finden Sie unter Gewusst [wie: verhindern von Site übergreifendem Skripting in ASP.net](https://go.microsoft.com/fwlink/?LinkID=178708).  
  
 Wenn eine benutzerdefinierte Validierungs Logik einen Fehler erkennt, sollte diese Methode `false` zurückgeben und einen Wert in `validationFailureIndex` bereitstellen, um den Ausgangspunkt des Texts anzugeben, der den Fehler verursacht hat. Der Wert in `validationFailureIndex` muss 0 oder eine positive ganze Zahl sein.  
  
 Die Logik in einer Überprüfung der Anforderungs Validierung verläuft wie folgt:  
  
-   Die <xref:System.Web.HttpRequest>-Klasse führt eine Überprüfung der eingehenden Daten mit NULL Zeichen aus.  
  
-   Die <xref:System.Web.HttpRequest>-Klasse ruft entweder die <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A>-Methode (die Standard Implementierung der Basis Methode) auf oder ruft eine abgeleitete Version der-Methode auf.  
  
-   Wenn <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> Methode `false` zurückgibt, um einen Validierungs Fehler anzugeben, erstellt ASP.net eine Fehler Zeichenfolge (falls erforderlich) und löst eine <xref:System.Web.HttpRequestValidationException> Ausnahme aus.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

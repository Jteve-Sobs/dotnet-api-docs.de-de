<Type Name="RequestValidator" FullName="System.Web.Util.RequestValidator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d88ccda7a61f7ed1b21be5b988dd4a612e29625d" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57940904" /></Metadata><TypeSignature Language="C#" Value="public class RequestValidator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RequestValidator extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Util.RequestValidator" />
  <TypeSignature Language="VB.NET" Value="Public Class RequestValidator" />
  <TypeSignature Language="C++ CLI" Value="public ref class RequestValidator" />
  <TypeSignature Language="F#" Value="type RequestValidator = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Definiert Basismethoden für benutzerdefinierte Anforderungsvalidierung.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Standardmäßig überprüft ASP.NET keine Anforderungen, bis der Code explizit einen Wert aus der Anforderung fordert. Z. B. ASP.NET überprüft keine Abfragezeichenfolgenwerte bis Code greift auf die <xref:System.Web.HttpRequest.QueryString%2A> Auflistung. Standardmäßig ASP.NET auch überprüft nicht, einige Arten von Daten, z. B. Formularwerte, Cookies, die Namen der Dateien, die über HTTP und den Wert des hochgeladen wurden die <xref:System.Web.HttpRequest.RawUrl%2A> Eigenschaft.  
  
 Die <xref:System.Web.Util.RequestValidator> Klasse ist eine Basisklasse, die Sie implementieren können, um benutzerdefinierte Anforderungsvalidierung bereitzustellen. Durch die Implementierung dieser Klasse können Sie ermitteln, bei einer Überprüfung und welche Art von Daten zur Validierung.  
  
 Standardmäßig bietet ASP.NET die siteübergreifende Skripterstellung (XSS) überprüft. Allerdings können Sie ergänzen oder ersetzen die Anforderungsvalidierungslogik, die in ASP.NET bereitgestellt wird, erstellen Sie eine benutzerdefinierte Implementierung der XSS. Beispielsweise können Sie eine benutzerdefinierte Anforderung Überprüfung Implementierung schreiben, die durch für SQL-Injection-Angriffe Scans neben der Überprüfung von XSS-Angriffe.  
  
 Um benutzerdefinierte Anforderungsvalidierung zu erstellen, Schreiben Sie eine benutzerdefinierte abgeleitete Klasse die <xref:System.Web.Util.RequestValidator> Basisklasse. Anschließend konfigurieren Sie ASP.NET so, dass das benutzerdefiniertes Validierungssteuerelement in der Web.config-Datei auf Anwendungsebene zu verwenden. Sie können die benutzerdefinierte Klasse im Ordner "App_Code" in einer kompilierten Klassenbibliothek im Ordner "Bin" oder in einer kompilierten Klassenbibliothek im globalen Assemblycache einfügen.  
  
> [!NOTE]
>  Nur eine benutzerdefinierte Validierung Anforderungstyp kann für eine Anwendung konfiguriert werden. Es ist nicht möglich, eine andere Anforderung Überprüfungstyp für einzelne virtuelle Pfade oder Seiten zu konfigurieren.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, wie Sie ein benutzerdefiniertes Validierungssteuerelement zu erstellen, die nur eine bestimmte Zeichenfolge, die für Abfragezeichenfolgen-Werte verwendet werden können.  
  
 [!code-csharp[System.Web.Util.RequestValidator#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.util.requestvalidator/cs/requestvalidator.cs#1)]
 [!code-vb[System.Web.Util.RequestValidator#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.util.requestvalidator/vb/requestvalidator.vb#1)]  
  
 Das folgende Beispiel zeigt, wie Sie ASP.NET so, dass das benutzerdefinierte Validierungssteuerelement verwenden Sie in der Datei "Web.config" für eine Anwendung zu konfigurieren.  
  
```  
<system.web>  
  <httpRuntime requestValidationType="CustomRequestValidation" />  
</system.web>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Util.RequestValidationSource" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RequestValidator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.RequestValidator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RequestValidator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.Util.RequestValidator" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Util.RequestValidator> -Klasse verfügt über einen Standardkonstruktor. Wenn eine neue Instanz der Klasse initialisiert wird, ruft eine interne Methode benutzerdefinierte überprüfungsdetails von Konfigurationsinformationen der Anwendung ab. Die Konfigurationsdetails befinden sich die <xref:System.Web.Configuration.HttpRuntimeSection> Abschnitt. Weitere Informationen finden Sie unter [HttpRuntime-Element ((ASP.NET Einstellungsschema)](https://msdn.microsoft.com/library/e9b81350-8aaf-47cc-9843-5f7d0c59f369) und <xref:System.Web.Configuration.HttpRuntimeSection.RequestValidationType%2A> Attribut.  
  
 Während der Initialisierung wird eine einzelne Instanz der <xref:System.Web.Util.RequestValidator> Klasse erstellt, und ein Verweis auf die Instanz werden in der <xref:System.Web.Util.RequestValidator.Current%2A> Eigenschaft. ASP.NET wird eine neue Anforderung Validierungssteuerelement-Instanz pro Anforderung nicht erstellt werden. Aus diesem Grund benutzerdefinierte Implementierungen der <xref:System.Web.Util.RequestValidator> Klasse muss threadsicher sein.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.Web.Util.RequestValidator Current { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Util.RequestValidator Current" />
      <MemberSignature Language="DocId" Value="P:System.Web.Util.RequestValidator.Current" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Current As RequestValidator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Util::RequestValidator ^ Current { System::Web::Util::RequestValidator ^ get(); void set(System::Web::Util::RequestValidator ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.Web.Util.RequestValidator with get, set" Usage="System.Web.Util.RequestValidator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.RequestValidator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Verweis auf die aktuelle <see cref="T:System.Web.Util.RequestValidator" />-Instanz ab, die in einer Anwendung verwendet wird, ab oder legt ihn fest.</summary>
        <value>Eine Instanz der <see cref="T:System.Web.Util.RequestValidator" />-Klasse.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Util.RequestValidator.Current%2A> Eigenschaft behält einen Verweis auf die einzelne zulässige Instanz des der <xref:System.Web.Util.RequestValidator> Klasse. Wenn keine Instanz vorhanden ist, wird ein neuer Benutzer erstellt. Wenn bereits eine Instanz vorhanden ist, wird die aktuelle Instanz zurückgegeben.  
  
 Während der Initialisierung wird eine einzelne Instanz der <xref:System.Web.Util.RequestValidator> Klasse erstellt, und ein Verweis auf die Instanz im verfügbar gemacht wurde die <xref:System.Web.Util.RequestValidator.Current%2A> Eigenschaft. ASP.NET wird eine neue Anforderung Validierungssteuerelement-Instanz pro Anforderung nicht erstellt werden. Aus diesem Grund benutzerdefinierte Implementierungen der <xref:System.Web.Util.RequestValidator> Klasse muss threadsicher sein.  
  
> [!NOTE]
>  Die <xref:System.Web.Util.RequestValidator.Current%2A> Eigenschaft ist nicht threadsicher, während die Eigenschaft einen Verweis auf die aktuelle Einstellung <xref:System.Web.Util.RequestValidator> Klasse.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Eigenschaft ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="InvokeIsValidRequestString">
      <MemberSignature Language="C#" Value="public bool InvokeIsValidRequestString (System.Web.HttpContext context, string value, System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, out int validationFailureIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool InvokeIsValidRequestString(class System.Web.HttpContext context, string value, valuetype System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, [out] int32&amp; validationFailureIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.RequestValidator.InvokeIsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool InvokeIsValidRequestString(System::Web::HttpContext ^ context, System::String ^ value, System::Web::Util::RequestValidationSource requestValidationSource, System::String ^ collectionKey, [Runtime::InteropServices::Out] int % validationFailureIndex);" />
      <MemberSignature Language="F#" Value="member this.InvokeIsValidRequestString : System.Web.HttpContext * string * System.Web.Util.RequestValidationSource * string *  -&gt; bool" Usage="requestValidator.InvokeIsValidRequestString (context, value, requestValidationSource, collectionKey, validationFailureIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="value" Type="System.String" Index="1" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="requestValidationSource" Type="System.Web.Util.RequestValidationSource" Index="2" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="collectionKey" Type="System.String" Index="3" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="validationFailureIndex" Type="System.Int32" RefType="out" Index="4" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="context">Der HTTP-Kontext der Anforderung.</param>
        <param name="value">Die zu überprüfenden HTTP-Anforderungsdaten.</param>
        <param name="requestValidationSource">Eine Enumeration, die die Quelle der überprüften Anforderungsdaten darstellt. Folgende Werte kommen für die Enumeration infrage: 
-   <see langword="QueryString" />  
  
-   <see langword="Form" />  
  
-   <see langword="Cookies" />  
  
-   <see langword="Files" />  
  
-   <see langword="Path" />  
  
-   <see langword="PathInfo" />  
  
-   <see langword="Headers" /></param>
        <param name="collectionKey">(Optional) Der Schlüssel in der Anforderungssammlung des zu überprüfenden Elements. Dieser Parameter wird verwendet, wenn die zu überprüfenden Daten aus einer Sammlung abgerufen werden. Wenn die zu überprüfenden Daten nicht aus einer Sammlung stammen, kann dieser Parameter <see langword="null" /> sein.</param>
        <param name="validationFailureIndex">Zeigt bei Rückgabe dieser Methode den auf 0 (null) basierenden Ausgangspunkt des problematischen oder ungültigen Texts in der Anforderungssammlung an. Dieser Parameter wird nicht initialisiert übergeben.</param>
        <summary>Bietet eine öffentliche Methode, die die geschützte <see cref="M:System.Web.Util.RequestValidator.IsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)" />-Methode aufruft , um HTTP-Anforderungsdaten zu überprüfen.</summary>
        <returns><see langword="true" />, wenn die zu validierende Zeichenfolge keine nicht codierten Zeichen enthält, die zu böswilligen Scripting-Angriffen verwendet werden könnten; andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Util.RequestValidator.InvokeIsValidRequestString%2A> Methode ermöglicht den öffentlichen Zugriff auf die geschützte <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> Methode. Dadurch können Sie erstellen eine benutzerdefinierte Wrapperklasse für die <xref:System.Web.Util.RequestValidator> -Klasse, und rufen die <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> Methode ohne erben die <xref:System.Web.Util.RequestValidator> Klasse.  
  
 Weitere Informationen zur anforderungsüberprüfung finden Sie unter <xref:System.Web.UnvalidatedRequestValues>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidRequestString">
      <MemberSignature Language="C#" Value="protected internal virtual bool IsValidRequestString (System.Web.HttpContext context, string value, System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, out int validationFailureIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool IsValidRequestString(class System.Web.HttpContext context, string value, valuetype System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, [out] int32&amp; validationFailureIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.RequestValidator.IsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool IsValidRequestString(System::Web::HttpContext ^ context, System::String ^ value, System::Web::Util::RequestValidationSource requestValidationSource, System::String ^ collectionKey, [Runtime::InteropServices::Out] int % validationFailureIndex);" />
      <MemberSignature Language="F#" Value="abstract member IsValidRequestString : System.Web.HttpContext * string * System.Web.Util.RequestValidationSource * string *  -&gt; bool&#xA;override this.IsValidRequestString : System.Web.HttpContext * string * System.Web.Util.RequestValidationSource * string *  -&gt; bool" Usage="requestValidator.IsValidRequestString (context, value, requestValidationSource, collectionKey, validationFailureIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="requestValidationSource" Type="System.Web.Util.RequestValidationSource" />
        <Parameter Name="collectionKey" Type="System.String" />
        <Parameter Name="validationFailureIndex" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="context">Der Kontext der aktuellen Anforderung.</param>
        <param name="value">Die zu überprüfenden HTTP-Anforderungsdaten.</param>
        <param name="requestValidationSource">Eine Enumeration, die die Quelle der überprüften Anforderungsdaten darstellt. Folgende Werte kommen für die Enumeration infrage: 
- <see langword="QueryString" />
- <see langword="Form " />
- <see langword="Cookies" />
- <see langword="Files" />
- <see langword="RawUrl" />
- <see langword="Path" />
- <see langword="PathInfo" />
- <see langword="Headers" /></param>
        <param name="collectionKey">Der Schlüssel in der Anforderungssammlung des zu überprüfenden Elements. Dieser Parameter ist optional. Dieser Parameter wird verwendet, wenn die zu überprüfenden Daten aus einer Sammlung abgerufen werden. Wenn die zu überprüfenden Daten nicht aus einer Sammlung stammen, kann <paramref name="collectionKey" /> <see langword="null" /> sein.</param>
        <param name="validationFailureIndex">Zeigt bei Rückgabe dieser Methode den auf 0 (null) basierenden Ausgangspunkt des problematischen oder ungültigen Texts in der Anforderungssammlung an. Dieser Parameter wird nicht initialisiert übergeben.</param>
        <summary>Überprüft eine Zeichenfolge, die HTTP-Anforderungsdaten enthält.</summary>
        <returns><see langword="true" />, wenn die zu überprüfende Zeichenfolge gültig ist; andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie implementieren diese Methode, um die benutzerdefinierte Validierung des Anforderungsdaten durchführen. Das grundlegende Verhalten von der <xref:System.Web.Util.RequestValidator.IsValidRequestString%28System.Web.HttpContext%2CSystem.String%2CSystem.Web.Util.RequestValidationSource%2CSystem.String%2CSystem.Int32%40%29> Methode entspricht das Verhalten, das ASP.NET intern implementiert, um gefährliche Zeichenfolgen in Cross-Site-scripting-Überprüfung überprüfen. Weitere Informationen finden Sie unter [so wird's gemacht: Verhindern von siteübergreifendem Skripting in ASP.NET](https://go.microsoft.com/fwlink/?LinkID=178708).  
  
 Diese Methode sollte zurückgeben, wenn benutzerdefinierte Validierungslogik einen Fehler erkennt, `false` und geben Sie einen Wert in `validationFailureIndex` um den Ausgangspunkt des Texts anzugeben, die den Fehler verursacht hat. Der Wert in `validationFailureIndex` muss 0 oder eine positive ganze Zahl sein.  
  
 Die Logik in einer validierungsüberprüfung Anforderung wird wie folgt aus:  
  
-   Die <xref:System.Web.HttpRequest> Klasse führt eine Überprüfung der eingehenden Daten Null-Zeichen entfernen.  
  
-   Die <xref:System.Web.HttpRequest> Klasse aufruft, entweder die <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> Methode (die standardmäßige Implementierung der Basismethode) oder eine abgeleitete Version der Methode aufruft.  
  
-   Wenn <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> Methodenrückgabe `false` zum Anzeigen ein Überprüfungsfehlers ASP.NET erstellt eine Zeichenfolge, (falls erforderlich) und löst eine <xref:System.Web.HttpRequestValidationException> Ausnahme.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
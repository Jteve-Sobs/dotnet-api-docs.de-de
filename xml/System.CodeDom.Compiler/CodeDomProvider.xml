<Type Name="CodeDomProvider" FullName="System.CodeDom.Compiler.CodeDomProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="abe8b8cb7979eb542b2f09ce96e8d75eb5fc2398" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78723364" /></Metadata><TypeSignature Language="C#" Value="public abstract class CodeDomProvider : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CodeDomProvider extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.CodeDom.Compiler.CodeDomProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class CodeDomProvider&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodeDomProvider abstract : System::ComponentModel::Component" />
  <TypeSignature Language="F#" Value="type CodeDomProvider = class&#xA;    inherit Component" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.CodeDom</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.ComponentModel.ToolboxItem(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt eine Basisklasse für <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Implementierungen bereit. Diese Klasse ist abstrakt.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine <xref:System.CodeDom.Compiler.CodeDomProvider> kann verwendet werden, um Instanzen von Code Generatoren und Code Compiler zu erstellen und abzurufen. Mit Code-Generatoren kann Code in bestimmten Sprachen erstellt werden. Mit Codecompilern kann Code in Assemblys kompiliert werden.  
  
> [!NOTE]
>  Im [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]sind die Methoden, die im Code Generator und Code Compiler verfügbar gemacht werden, direkt vom Code Anbieter verfügbar. Sie müssen <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> oder <xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A> nicht aufrufen, um auf die Methoden zuzugreifen, und diese Methoden werden als veraltet markiert. Dies gilt für bereits vorhandene und neue Code Anbieter Implementierungen.  
  
 Eine <xref:System.CodeDom.Compiler.CodeDomProvider> Implementierung stellt in der Regel Codegenerierung und/oder Code Kompilierungs Schnittstellen zum Generieren von Code und Verwalten der Kompilierung für eine einzelne Programmiersprache bereit. Mehrere Sprachen werden von <xref:System.CodeDom.Compiler.CodeDomProvider> Implementierungen unterstützt, die mit dem Windows SDK ausgeliefert werden. Zu diesen Sprachen C#gehören, Visual Basic C++, und JScript. Entwickler oder Compileranbieter können die <xref:System.CodeDom.Compiler.ICodeGenerator> und <xref:System.CodeDom.Compiler.ICodeCompiler> Schnittstellen implementieren und eine <xref:System.CodeDom.Compiler.CodeDomProvider> bereitstellen, die die CodeDom-Unterstützung auf andere Programmiersprachen erweitert.  
  
 Mit dem [&lt;System. CodeDom-&gt; Element](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) in der Computer Konfigurationsdatei (Machine. config) können Entwickler und Compileranbieter Konfigurationseinstellungen für weitere <xref:System.CodeDom.Compiler.CodeDomProvider>-Implementierungen hinzufügen.  
  
 Die <xref:System.CodeDom.Compiler.CodeDomProvider>-Klasse stellt statische Methoden bereit, um die <xref:System.CodeDom.Compiler.CodeDomProvider> Implementierungen auf einem Computer zu ermitteln und aufzuzählen. Die <xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A>-Methode gibt die Einstellungen für alle <xref:System.CodeDom.Compiler.CodeDomProvider> Implementierungen auf einem Computer zurück. Die <xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A>-Methode gibt die Einstellungen für eine bestimmte <xref:System.CodeDom.Compiler.CodeDomProvider> Implementierung basierend auf dem Namen der Programmiersprache zurück. Die <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A>-Methode gibt eine Instanz einer <xref:System.CodeDom.Compiler.CodeDomProvider> Implementierung für eine bestimmte Sprache zurück.  
  
 Weitere Informationen zu den Sprachanbieter Einstellungen in der Konfigurationsdatei finden Sie unter [Compiler-und Sprachanbieter Einstellungs Schema](~/docs/framework/configure-apps/file-schema/compiler/index.md).  
  
> [!NOTE]
>  Diese Klasse stellt einen Link Aufruf und eine Vererbungs Anforderung auf Klassenebene dar. Eine <xref:System.Security.SecurityException> wird ausgelöst, wenn der unmittelbare Aufrufer oder die abgeleitete Klasse nicht über die Berechtigung für volle Vertrauenswürdigkeit verfügt. Ausführliche Informationen zu Sicherheitsanforderungen finden Sie unter [Link](~/docs/framework/misc/link-demands.md) Aufrufe und [Vererbungs Anforderungen](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/x4yx82e6(v=vs.100)).  
  
   
  
## Examples  
 Das folgende Beispielprogramm kann Quellcode basierend auf einem CodeDOM-Modell eines Programms generieren und kompilieren, das mit der <xref:System.Console>-Klasse "Hallo Welt" ausgibt. Es wird eine Windows Forms Benutzeroberfläche bereitgestellt. Der Benutzer kann die Ziel Programmiersprache aus verschiedenen Auswahlmöglichkeiten auswählen C#:, Visual Basic und JScript.  
  
 [!code-cpp[CodeDomExample#1](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDomExample/CPP/source.cpp#1)]
 [!code-csharp[CodeDomExample#1](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDomExample/CS/source.cs#1)]
 [!code-vb[CodeDomExample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomExample/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>In den .NET Framework Versionen 1,0 und 1,1 bestehen Code Anbieter aus Implementierungen von <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />, <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />, <see cref="T:System.CodeDom.Compiler.ICodeParser" />und <see cref="T:System.CodeDom.Compiler.ICodeCompiler" />. In der [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]sind die Methoden <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />, <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser" />und <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> veraltet, und die Methoden von <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> und <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> sind direkt in der <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Klasse verfügbar. Sie sollten diese Methoden in der Implementierung des Code Anbieters überschreiben und die Basis Methoden nicht aufzurufen.</para></block>
    <altmember cref="T:System.CodeDom.Compiler.CompilerInfo" />
    <altmember cref="T:Microsoft.CSharp.CSharpCodeProvider" />
    <altmember cref="T:Microsoft.VisualBasic.VBCodeProvider" />
    <altmember cref="T:Microsoft.JScript.JScriptCodeProvider" />
    <related type="Article" href="~/docs/framework/configure-apps/file-schema/compiler/index.md">Schema für Compiler- und Sprachanbietereinstellungen</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CodeDomProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; CodeDomProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileAssemblyFromDom">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.CompilerResults CompileAssemblyFromDom (System.CodeDom.Compiler.CompilerParameters options, params System.CodeDom.CodeCompileUnit[] compilationUnits);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.CompilerResults CompileAssemblyFromDom(class System.CodeDom.Compiler.CompilerParameters options, class System.CodeDom.CodeCompileUnit[] compilationUnits) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CompileAssemblyFromDom (options As CompilerParameters, ParamArray compilationUnits As CodeCompileUnit()) As CompilerResults" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::CompilerResults ^ CompileAssemblyFromDom(System::CodeDom::Compiler::CompilerParameters ^ options, ... cli::array &lt;System::CodeDom::CodeCompileUnit ^&gt; ^ compilationUnits);" />
      <MemberSignature Language="F#" Value="abstract member CompileAssemblyFromDom : System.CodeDom.Compiler.CompilerParameters * System.CodeDom.CodeCompileUnit[] -&gt; System.CodeDom.Compiler.CompilerResults&#xA;override this.CompileAssemblyFromDom : System.CodeDom.Compiler.CompilerParameters * System.CodeDom.CodeCompileUnit[] -&gt; System.CodeDom.Compiler.CompilerResults" Usage="codeDomProvider.CompileAssemblyFromDom (options, compilationUnits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerResults</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.CodeDom.Compiler.CompilerParameters" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="compilationUnits" Type="System.CodeDom.CodeCompileUnit[]" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-plat-ext-2.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="options">Ein <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Objekt, das die Einstellungen für die Kompilierung angibt.</param>
        <param name="compilationUnits">Ein Array vom Typ <see cref="T:System.CodeDom.CodeCompileUnit" />, das den zu kompilierenden Code angibt.</param>
        <summary>Kompiliert eine Assembly auf Grundlage der <see cref="N:System.CodeDom" />-Strukturen im angegebenen Array von <see cref="T:System.CodeDom.CodeCompileUnit" />-Objekten mit den angegebenen Compilereinstellungen.</summary>
        <returns>Ein <see cref="T:System.CodeDom.Compiler.CompilerResults" />-Objekt, das die Ergebnisse der Kompilierung angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  In den .NET Framework Versionen 1,0 und 1,1 wird diese Methode von der <xref:System.CodeDom.Compiler.ICodeCompiler> Implementierung bereitgestellt, die von der <xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A>-Methode des Anbieters zurückgegeben wird. In Version 2,0 kann diese Methode direkt im Code Anbieter aufgerufen werden, auch wenn Sie vom Code Anbieter nicht überschrieben wird. Wenn der Code Anbieter diese Methode nicht außer Kraft setzt, wird die <xref:System.CodeDom.Compiler.ICodeCompiler> Implementierung von der Basisklasse aufgerufen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
        <block subset="none" type="overrides"><para>Wenn Sie diese Methode überschreiben, dürfen Sie nicht die entsprechende-Methode der-Basisklasse aufzurufen. Die Basisklassen Methode erstellt in der abgeleiteten Klasse einen Generator mithilfe der veralteten <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" />-Methode für die Kompatibilität mit bereits vorhandenen Anbietern, die Code Compiler verwenden. Die Basisklassen Methode ruft dann die entsprechende-Methode in der <see cref="T:System.CodeDom.Compiler.ICodeCompiler" />-Implementierung auf, um diese Funktion auszuführen. Sie erhalten eine <see cref="T:System.NotImplementedException" />, wenn Sie die Basisklassen Methode von einem Code Anbieter aus aufgerufen wird, der keinen Code Compiler verwendet.</para></block>
        <altmember cref="T:System.CodeDom.Compiler.CompilerParameters" />
        <altmember cref="T:System.CodeDom.CodeCompileUnit" />
        <altmember cref="T:System.CodeDom.Compiler.CompilerResults" />
      </Docs>
    </Member>
    <Member MemberName="CompileAssemblyFromFile">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.CompilerResults CompileAssemblyFromFile (System.CodeDom.Compiler.CompilerParameters options, params string[] fileNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.CompilerResults CompileAssemblyFromFile(class System.CodeDom.Compiler.CompilerParameters options, string[] fileNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CompileAssemblyFromFile (options As CompilerParameters, ParamArray fileNames As String()) As CompilerResults" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::CompilerResults ^ CompileAssemblyFromFile(System::CodeDom::Compiler::CompilerParameters ^ options, ... cli::array &lt;System::String ^&gt; ^ fileNames);" />
      <MemberSignature Language="F#" Value="abstract member CompileAssemblyFromFile : System.CodeDom.Compiler.CompilerParameters * string[] -&gt; System.CodeDom.Compiler.CompilerResults&#xA;override this.CompileAssemblyFromFile : System.CodeDom.Compiler.CompilerParameters * string[] -&gt; System.CodeDom.Compiler.CompilerResults" Usage="codeDomProvider.CompileAssemblyFromFile (options, fileNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerResults</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.CodeDom.Compiler.CompilerParameters" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="fileNames" Type="System.String[]" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-plat-ext-2.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="options">Ein <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Objekt, das die Einstellungen für die Kompilierung angibt.</param>
        <param name="fileNames">Ein Array mit den Namen der zu kompilierenden Dateien.</param>
        <summary>Kompiliert eine Assembly aus dem in den angegebenen Dateien enthaltenen Quellcode mit den angegebenen Compilereinstellungen.</summary>
        <returns>Ein <see cref="T:System.CodeDom.Compiler.CompilerResults" />-Objekt, das die Ergebnisse der Kompilierung angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  In den .NET Framework Versionen 1,0 und 1,1 wird diese Methode von der <xref:System.CodeDom.Compiler.ICodeCompiler> Implementierung bereitgestellt, die von der <xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A>-Methode des Anbieters zurückgegeben wird. In Version 2,0 kann diese Methode direkt im Code Anbieter aufgerufen werden, auch wenn Sie vom Code Anbieter nicht überschrieben wird. Wenn der Code Anbieter diese Methode nicht außer Kraft setzt, wird die <xref:System.CodeDom.Compiler.ICodeCompiler> Implementierung von der Basisklasse aufgerufen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
        <block subset="none" type="overrides"><para>Wenn Sie diese Methode überschreiben, dürfen Sie nicht die entsprechende-Methode der-Basisklasse aufzurufen. Die Basisklassen Methode erstellt in der abgeleiteten Klasse einen Generator mithilfe der veralteten <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" />-Methode für die Kompatibilität mit bereits vorhandenen Anbietern, die Code Compiler verwenden. Die Basisklassen Methode ruft dann die entsprechende-Methode in der <see cref="T:System.CodeDom.Compiler.ICodeCompiler" />-Implementierung auf, um diese Funktion auszuführen. Sie erhalten eine <see cref="T:System.NotImplementedException" />, wenn Sie die Basisklassen Methode von einem Code Anbieter aus aufgerufen wird, der keinen Code Compiler verwendet.</para></block>
        <altmember cref="T:System.CodeDom.Compiler.CompilerParameters" />
        <altmember cref="T:System.CodeDom.Compiler.CompilerResults" />
      </Docs>
    </Member>
    <Member MemberName="CompileAssemblyFromSource">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.CompilerResults CompileAssemblyFromSource (System.CodeDom.Compiler.CompilerParameters options, params string[] sources);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.CompilerResults CompileAssemblyFromSource(class System.CodeDom.Compiler.CompilerParameters options, string[] sources) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CompileAssemblyFromSource (options As CompilerParameters, ParamArray sources As String()) As CompilerResults" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::CompilerResults ^ CompileAssemblyFromSource(System::CodeDom::Compiler::CompilerParameters ^ options, ... cli::array &lt;System::String ^&gt; ^ sources);" />
      <MemberSignature Language="F#" Value="abstract member CompileAssemblyFromSource : System.CodeDom.Compiler.CompilerParameters * string[] -&gt; System.CodeDom.Compiler.CompilerResults&#xA;override this.CompileAssemblyFromSource : System.CodeDom.Compiler.CompilerParameters * string[] -&gt; System.CodeDom.Compiler.CompilerResults" Usage="codeDomProvider.CompileAssemblyFromSource (options, sources)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerResults</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.CodeDom.Compiler.CompilerParameters" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="sources" Type="System.String[]" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-plat-ext-2.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="options">Ein <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Objekt, das die Compilereinstellungen für die Kompilierung angibt.</param>
        <param name="sources">Ein Array von zu kompilierenden Quellcodezeichenfolgen.</param>
        <summary>Kompiliert eine Assembly aus dem angegebenen Array von Zeichenfolgen mit Quellcode und unter Verwendung der angegebenen Compilereinstellungen.</summary>
        <returns>Ein <see cref="T:System.CodeDom.Compiler.CompilerResults" />-Objekt, das die Ergebnisse der Kompilierung angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  In den .NET Framework Versionen 1,0 und 1,1 wird diese Methode von der <xref:System.CodeDom.Compiler.ICodeCompiler> Implementierung bereitgestellt, die von der <xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A>-Methode des Anbieters zurückgegeben wird. In Version 2,0 kann diese Methode direkt im Code Anbieter aufgerufen werden, auch wenn Sie vom Code Anbieter nicht überschrieben wird. Wenn der Code Anbieter diese Methode nicht außer Kraft setzt, wird die <xref:System.CodeDom.Compiler.ICodeCompiler> Implementierung von der Basisklasse aufgerufen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
        <block subset="none" type="overrides"><para>Wenn Sie diese Methode überschreiben, dürfen Sie nicht die entsprechende-Methode der-Basisklasse aufzurufen. Die Basisklassen Methode erstellt in der abgeleiteten Klasse einen Generator mithilfe der veralteten <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" />-Methode für die Kompatibilität mit bereits vorhandenen Anbietern, die Code Compiler verwenden. Die Basisklassen Methode ruft dann die entsprechende-Methode in der <see cref="T:System.CodeDom.Compiler.ICodeCompiler" />-Implementierung auf, um diese Funktion auszuführen. Sie erhalten eine <see cref="T:System.NotImplementedException" />, wenn Sie die Basisklassen Methode von einem Code Anbieter aus aufgerufen wird, der keinen Code Compiler verwendet.</para></block>
        <altmember cref="T:System.CodeDom.Compiler.CompilerParameters" />
        <altmember cref="T:System.CodeDom.Compiler.CompilerResults" />
      </Docs>
    </Member>
    <Member MemberName="CreateCompiler">
      <MemberSignature Language="C#" Value="public abstract System.CodeDom.Compiler.ICodeCompiler CreateCompiler ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.ICodeCompiler CreateCompiler() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function CreateCompiler () As ICodeCompiler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::CodeDom::Compiler::ICodeCompiler ^ CreateCompiler();" />
      <MemberSignature Language="F#" Value="abstract member CreateCompiler : unit -&gt; System.CodeDom.Compiler.ICodeCompiler" Usage="codeDomProvider.CreateCompiler " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.Obsolete("ICodeCompiler is obsolete")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netcore-2.1;netframework-4.8;dotnet-plat-ext-2.1;netcore-2.2;netcore-3.0;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.1">
          <AttributeName>System.Obsolete("Callers should not use the ICodeCompiler interface and should instead use the methods directly on the CodeDomProvider class. Those inheriting from CodeDomProvider must still implement this interface, and should exclude this warning or also obsolete this method.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.ICodeCompiler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erstellt beim Überschreiben in einer abgeleiteten Klasse einen neuen Codecompiler.</summary>
        <returns>Ein <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> zum Kompilieren von <see cref="N:System.CodeDom" />-basierten Quellcodedarstellungen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ist in der [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]veraltet. Die empfohlene Alternative besteht darin, die <xref:System.CodeDom.Compiler.ICodeCompiler> Methoden aufzurufen, die direkt im Code Anbieter verfügbar sind.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>In der [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]sollten Sie die <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> Member in der <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Klasse implementieren und eine <see cref="T:System.NotSupportedException" /> auslösen, wenn diese Methode aufgerufen wird.</para></block>
      </Docs>
    </Member>
    <Member MemberName="CreateEscapedIdentifier">
      <MemberSignature Language="C#" Value="public virtual string CreateEscapedIdentifier (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string CreateEscapedIdentifier(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateEscapedIdentifier (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ CreateEscapedIdentifier(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member CreateEscapedIdentifier : string -&gt; string&#xA;override this.CreateEscapedIdentifier : string -&gt; string" Usage="codeDomProvider.CreateEscapedIdentifier value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value">Die Zeichenfolge, für die ein mit einem Escapezeichen versehener Bezeichner generiert werden soll.</param>
        <summary>Erstellt einen mit einem Escapezeichen versehenen Bezeichner für den angegebenen Wert.</summary>
        <returns>Der mit einem Escapezeichen versehene Bezeichner für den Wert.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier%2A> testet, ob der Bezeichner mit reservierten oder sprach Schlüsselwörtern in Konflikt steht, und gibt in diesem Fall einen entsprechenden Namen mit sprachspezifischer escapecodeformatierung zurück. Dies wird als Escapebezeichner bezeichnet. Der mit Escapezeichen versehene Bezeichner enthält dieselbe `value` aber es wurde eine escapecodeformatierung hinzugefügt, um den Bezeichner vom Schlüsselwort Zwei Implementierungs Beispiele werden dem `value` mit "@" vorangestellt, oder die `value` werden mit "[" und "]" gebrackt.  
  
> [!NOTE]
>  In den .NET Framework Versionen 1,0 und 1,1 wird diese Methode von der <xref:System.CodeDom.Compiler.ICodeGenerator> Implementierung bereitgestellt, die von der <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>-Methode des Anbieters zurückgegeben wird. In Version 2,0 kann diese Methode direkt im Code Anbieter aufgerufen werden, auch wenn Sie vom Code Anbieter nicht überschrieben wird. Wenn der Code Anbieter diese Methode nicht außer Kraft setzt, wird die <xref:System.CodeDom.Compiler.ICodeGenerator> Implementierung von der Basisklasse aufgerufen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
        <block subset="none" type="overrides"><para>Wenn Sie diese Methode überschreiben, dürfen Sie nicht die entsprechende-Methode der-Basisklasse aufzurufen. Die Basisklassen Methode erstellt in der abgeleiteten Klasse einen Generator mithilfe der veralteten <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode für die Kompatibilität mit bereits vorhandenen Anbietern, die Code-Generatoren verwenden. Die Basisklassen Methode ruft dann die entsprechende-Methode in der <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />-Implementierung auf, um diese Funktion auszuführen. Sie erhalten eine <see cref="T:System.NotImplementedException" />, wenn Sie die Basisklassen Methode von einem Code Anbieter aus aufgerufen wird, der keinen Code-Generator verwendet.</para></block>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateGenerator">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Erstellt beim Überschreiben in einer abgeleiteten Klasse einen neuen Codegenerator.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateGenerator">
      <MemberSignature Language="C#" Value="public abstract System.CodeDom.Compiler.ICodeGenerator CreateGenerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.ICodeGenerator CreateGenerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function CreateGenerator () As ICodeGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::CodeDom::Compiler::ICodeGenerator ^ CreateGenerator();" />
      <MemberSignature Language="F#" Value="abstract member CreateGenerator : unit -&gt; System.CodeDom.Compiler.ICodeGenerator" Usage="codeDomProvider.CreateGenerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.Obsolete("ICodeGenerator is obsolete")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netcore-2.1;netframework-4.8;dotnet-plat-ext-2.1;netcore-2.2;netcore-3.0;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.1">
          <AttributeName>System.Obsolete("Callers should not use the ICodeGenerator interface and should instead use the methods directly on the CodeDomProvider class. Those inheriting from CodeDomProvider must still implement this interface, and should exclude this warning or also obsolete this method.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.ICodeGenerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erstellt beim Überschreiben in einer abgeleiteten Klasse einen neuen Codegenerator.</summary>
        <returns>Ein <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> zum Generieren von <see cref="N:System.CodeDom" />-basierten Quellcodedarstellungen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ist in der [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]veraltet. Die empfohlene Alternative besteht darin, die <xref:System.CodeDom.Compiler.ICodeGenerator> Methoden aufzurufen, die direkt in der <xref:System.CodeDom.Compiler.CodeDomProvider>-Klasse verfügbar sind.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>In der [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]sollten Sie die <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> Member in der <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Klasse implementieren und eine <see cref="T:System.NotSupportedException" /> auslösen, wenn diese Methode aufgerufen wird.</para></block>
      </Docs>
    </Member>
    <Member MemberName="CreateGenerator">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.ICodeGenerator CreateGenerator (System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.ICodeGenerator CreateGenerator(class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateGenerator (output As TextWriter) As ICodeGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::ICodeGenerator ^ CreateGenerator(System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="abstract member CreateGenerator : System.IO.TextWriter -&gt; System.CodeDom.Compiler.ICodeGenerator&#xA;override this.CreateGenerator : System.IO.TextWriter -&gt; System.CodeDom.Compiler.ICodeGenerator" Usage="codeDomProvider.CreateGenerator output" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.ICodeGenerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="output">Ein <see cref="T:System.IO.TextWriter" />, der für die Ausgabe verwendet werden soll.</param>
        <summary>Erstellt beim Überschreiben in einer abgeleiteten Klasse einen neuen Codegenerator unter Verwendung des angegebenen <see cref="T:System.IO.TextWriter" /> für die Ausgabe.</summary>
        <returns>Ein <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> zum Generieren von <see cref="N:System.CodeDom" />-basierten Quellcodedarstellungen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode verwendet die angegebene <xref:System.IO.TextWriter> für die Ausgabe. Diese Methode unterstützt eine optimierte Codegenerierung, die den Quellcode inkrementell aktualisiert.  
  
> [!NOTE]
>  Die Basisklassen Implementierung ruft die <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>-Methode auf, die in der [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)] veraltet ist, und führt zu einer <xref:System.NotSupportedException>, wenn ein <xref:System.CodeDom.Compiler.ICodeGenerator> Objekt nicht zurückgegeben wird.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="CreateGenerator">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.ICodeGenerator CreateGenerator (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.ICodeGenerator CreateGenerator(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateGenerator (fileName As String) As ICodeGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::ICodeGenerator ^ CreateGenerator(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="abstract member CreateGenerator : string -&gt; System.CodeDom.Compiler.ICodeGenerator&#xA;override this.CreateGenerator : string -&gt; System.CodeDom.Compiler.ICodeGenerator" Usage="codeDomProvider.CreateGenerator fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.ICodeGenerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">Der Dateiname für die Ausgabe.</param>
        <summary>Erstellt beim Überschreiben in einer abgeleiteten Klasse einen neuen Codegenerator unter Verwendung des angegebenen Dateinamens für die Ausgabe.</summary>
        <returns>Ein <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> zum Generieren von <see cref="N:System.CodeDom" />-basierten Quellcodedarstellungen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode verwendet den angegebenen Dateinamen für die Ausgabe.  
  
> [!NOTE]
>  Die Basisklassen Implementierung ruft die <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>-Methode auf, die in der [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)] veraltet ist, und führt zu einer <xref:System.NotSupportedException>, wenn ein <xref:System.CodeDom.Compiler.ICodeGenerator> Objekt nicht zurückgegeben wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateParser">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.ICodeParser CreateParser ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.ICodeParser CreateParser() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateParser () As ICodeParser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::ICodeParser ^ CreateParser();" />
      <MemberSignature Language="F#" Value="abstract member CreateParser : unit -&gt; System.CodeDom.Compiler.ICodeParser&#xA;override this.CreateParser : unit -&gt; System.CodeDom.Compiler.ICodeParser" Usage="codeDomProvider.CreateParser " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.Obsolete("ICodeParser is obsolete")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netcore-2.1;netframework-4.8;dotnet-plat-ext-2.1;netcore-2.2;netcore-3.0;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.1">
          <AttributeName>System.Obsolete("Callers should not use the ICodeParser interface and should instead use the methods directly on the CodeDomProvider class. Those inheriting from CodeDomProvider must still implement this interface, and should exclude this warning or also obsolete this method.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.ICodeParser</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erstellt beim Überschreiben in einer abgeleiteten Klasse einen neuen Codeparser.</summary>
        <returns>Ein <see cref="T:System.CodeDom.Compiler.ICodeParser" /> zum Analysieren von Quellcode. Die Basisimplementierung gibt immer <see langword="null" /> zurück.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateProvider">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ruft eine <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Instanz für die angegebene Sprache ab.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateProvider">
      <MemberSignature Language="C#" Value="public static System.CodeDom.Compiler.CodeDomProvider CreateProvider (string language);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.Compiler.CodeDomProvider CreateProvider(string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateProvider (language As String) As CodeDomProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::Compiler::CodeDomProvider ^ CreateProvider(System::String ^ language);" />
      <MemberSignature Language="F#" Value="static member CreateProvider : string -&gt; System.CodeDom.Compiler.CodeDomProvider" Usage="System.CodeDom.Compiler.CodeDomProvider.CreateProvider language" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CodeDomProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="language" Type="System.String" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="language">Der Sprachname.</param>
        <summary>Ruft eine <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Instanz für die angegebene Sprache ab.</summary>
        <returns>Ein CodeDOM-Anbieter, der für den angegebenen Sprachnamen implementiert wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Diese Methode wird am häufigsten verwendet, um eine Instanz eines Code Anbieters in einer Anwendung zu erstellen, die optional einen von mehreren Anbietern verwenden kann. <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> ermöglicht es Ihnen, zur Laufzeit den Code Anbieter anzugeben, den Sie instanziieren möchten. Wenn Sie zur Entwurfszeit wissen, welcher Code Anbieter verwendet werden soll, sollten Sie eine Instanz dieses Code Anbieters erstellen, anstatt die <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A>-Methode zu verwenden.  
  
 Die <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A>-Methode gibt eine <xref:System.CodeDom.Compiler.CodeDomProvider> Instanz für einen bestimmten Sprachnamen zurück. Dies ähnelt dem Aufrufen der <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType>-Methode mit dem-sprach Anbietertyp. Verwenden Sie <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A>, wenn Sie eine konfigurierte Anbieter Implementierung für einen Sprachnamen dynamisch finden möchten.  
  
 Wenn mehr als eine Anbieter Implementierung für den Namen der Sprache konfiguriert ist, gibt <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> eine Anbieter Instanz für das letzte übereinstimmende Konfigurationselement zurück.  
  
 Verwenden Sie die <xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29?displayProperty=nameWithType>-Methoden Überladung, wenn Sie eine bestimmte Sprachanbieter Implementierung verwenden möchten. Verwenden Sie z. b. die <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A>-Methode, um eine Anbieter Instanz zu erhalten, die den Sprachen Namen unterstützt `"CSharp"`; Verwenden Sie die <xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29?displayProperty=nameWithType>-Methoden Überladung, um eine Anbieter Instanz speziell für die <xref:Microsoft.CSharp.CSharpCodeProvider?displayProperty=nameWithType>-Implementierung zu erhalten. Verwenden Sie die [\], CultureInfo, Objekt\<Xref: System. Activator. kreateinstance% 28system. Type% 2csystem. Reflection. BindingFlags% 2csystem. Reflection. Binder% 2csystem. Object% 5B% 5D% 2csystem. Globalization. CultureInfo% 2csystem. Object% 5B% 5D %29? displayproperty = namewithtype >-Methode, wenn mehrere Code Anbieter für eine Sprache vorhanden sind und Sie einen bestimmten Code Anbieter instanziieren möchten.  
  
 Die <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A>-Methode überprüft, ob mindestens eine Anbieter Implementierung eine bestimmte Sprache unterstützt. Sie können einen Sprachnamen mithilfe von <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A> validieren, bevor Sie ihn an <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A>übergeben. Wenn Sie einen nicht unterstützten Sprachnamen an <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> übergeben, wird eine <xref:System.Configuration.ConfigurationException?displayProperty=nameWithType> ausgelöst.  
  
 Die <xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A>-Methode kann verwendet werden, um alle <xref:System.CodeDom.Compiler.CodeDomProvider> Implementierungen auf einem Computer zu ermitteln, einschließlich zusätzlicher Implementierungen, die von Entwicklern und compileranbietern bereitgestellt werden, die im [&lt;System. CodeDom-&gt; Element](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) in der Computer Konfigurationsdatei (Machine. config) identifiziert werden.  
  
 Die <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A>-Methode gibt eine Instanz einer <xref:System.CodeDom.Compiler.CodeDomProvider> Implementierung für eine bestimmte Sprache zurück.  
  
 Bei Sprachnamen wird Groß-/Kleinschreibung nicht beachtet.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die <xref:System.CodeDom.Compiler.CodeDomProvider> Implementierung für eine Eingabe Sprache bestimmt und die konfigurierten Einstellungen für den Sprachanbieter angezeigt. Dieses Codebeispiel ist Teil eines größeren Beispiels, das für die <xref:System.CodeDom.Compiler.CompilerInfo>-Klasse bereitgestellt wird.  
  
 [!code-cpp[CodeDom_CompilerInfo#6](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#6)]
 [!code-csharp[CodeDom_CompilerInfo#6](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#6)]
 [!code-vb[CodeDom_CompilerInfo#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException"><paramref name="language" /> verfügt auf diesem Computer über keinen konfigurierten Anbieter.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="language" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.Security.SecurityException">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</exception>
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateProvider">
      <MemberSignature Language="C#" Value="public static System.CodeDom.Compiler.CodeDomProvider CreateProvider (string language, System.Collections.Generic.IDictionary&lt;string,string&gt; providerOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.Compiler.CodeDomProvider CreateProvider(string language, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; providerOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateProvider (language As String, providerOptions As IDictionary(Of String, String)) As CodeDomProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::Compiler::CodeDomProvider ^ CreateProvider(System::String ^ language, System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ providerOptions);" />
      <MemberSignature Language="F#" Value="static member CreateProvider : string * System.Collections.Generic.IDictionary&lt;string, string&gt; -&gt; System.CodeDom.Compiler.CodeDomProvider" Usage="System.CodeDom.Compiler.CodeDomProvider.CreateProvider (language, providerOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CodeDomProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="language" Type="System.String" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="providerOptions" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="language">Der Sprachname.</param>
        <param name="providerOptions">Eine Auflistung der Anbieteroptionen aus der Konfigurationsdatei.</param>
        <summary>Ruft eine <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Instanz für die angegebenen Sprach- und Anbieteroptionen ab.</summary>
        <returns>Ein CodeDOM-Anbieter, der für den angegebenen Sprachnamen und die angegebenen Optionen implementiert wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Diese Methode wird am häufigsten verwendet, um eine Instanz eines Code Anbieters in einer Anwendung zu erstellen, die optional einen von mehreren Anbietern verwenden kann. <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29> ermöglicht es Ihnen, zur Laufzeit die Version des Code Anbieters anzugeben, den Sie instanziieren möchten. Wenn Sie zur Entwurfszeit wissen, welcher Code Anbieter verwendet werden soll, sollten Sie eine Instanz dieses Code Anbieters erstellen, anstatt die <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29>-Methode zu verwenden.  
  
 Verwenden Sie <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29>, wenn Sie eine konfigurierte Anbieter Implementierung für eine bestimmte Sprache und Optionen dynamisch finden möchten. Bei Sprachnamen wird Groß-/Kleinschreibung nicht beachtet. Informationen zu den unterstützten Anbieter Optionen finden Sie in der jeweiligen CodeDom-Anbieter Dokumentation.  
  
 Informationen zum Überprüfen eines Anbieters und Aufrufen eines Anbieters, wenn mehr als eine Anbieter Implementierung für den Sprachnamen konfiguriert ist, finden Sie im Abschnitt "Hinweise" der <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%29>-Methode.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie eine Instanz eines Anbieters mit dem `providerOptions`-Parameter erstellt wird.  
  
 [!code-csharp[CodeDomProvider.ProviderOptions#1](~/samples/snippets/csharp/VS_Snippets_CLR/codedomprovider.provideroptions/cs/program.cs#1)]
 [!code-vb[CodeDomProvider.ProviderOptions#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/codedomprovider.provideroptions/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateValidIdentifier">
      <MemberSignature Language="C#" Value="public virtual string CreateValidIdentifier (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string CreateValidIdentifier(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateValidIdentifier (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ CreateValidIdentifier(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member CreateValidIdentifier : string -&gt; string&#xA;override this.CreateValidIdentifier : string -&gt; string" Usage="codeDomProvider.CreateValidIdentifier value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value">Die Zeichenfolge, für die ein gültiger Bezeichner generiert werden soll.</param>
        <summary>Erstellt einen gültigen Bezeichner für den angegebenen Wert.</summary>
        <returns>Ein gültiger Bezeichner für den angegebenen Wert.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier%2A> testet, ob der Bezeichner mit reservierten oder sprach Schlüsselwörtern in Konflikt steht. wenn dies der Fall ist, versucht, einen gültigen Bezeichnernamen zurückzugeben, der keinen Konflikt verursacht Normalerweise wird der zurückgegebene Bezeichner nur leicht geändert, um den Bezeichner vom Schlüsselwort zu unterscheiden. Beispielsweise könnte dem Namen der Unterstrich ("_") vorangestellt sein.  
  
> [!NOTE]
>  In den .NET Framework Versionen 1,0 und 1,1 wird diese Methode von der <xref:System.CodeDom.Compiler.ICodeGenerator> Implementierung bereitgestellt, die von der <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>-Methode des Anbieters zurückgegeben wird. In Version 2,0 kann diese Methode direkt im Code Anbieter aufgerufen werden, auch wenn Sie vom Code Anbieter nicht überschrieben wird. Wenn der Code Anbieter diese Methode nicht außer Kraft setzt, wird die <xref:System.CodeDom.Compiler.ICodeGenerator> Implementierung von der Basisklasse aufgerufen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
        <block subset="none" type="overrides"><para>Wenn Sie diese Methode überschreiben, dürfen Sie nicht die entsprechende-Methode der-Basisklasse aufzurufen. Die Basisklassen Methode erstellt in der abgeleiteten Klasse einen Generator mithilfe der veralteten <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode für die Kompatibilität mit bereits vorhandenen Anbietern, die Code-Generatoren verwenden. Die Basisklassen Methode ruft dann die entsprechende-Methode in der <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />-Implementierung auf, um diese Funktion auszuführen. Sie erhalten eine <see cref="T:System.NotImplementedException" />, wenn Sie die Basisklassen Methode von einem Code Anbieter aus aufgerufen wird, der keinen Code-Generator verwendet.</para></block>
      </Docs>
    </Member>
    <Member MemberName="FileExtension">
      <MemberSignature Language="C#" Value="public virtual string FileExtension { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FileExtension" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CodeDomProvider.FileExtension" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property FileExtension As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ FileExtension { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FileExtension : string" Usage="System.CodeDom.Compiler.CodeDomProvider.FileExtension" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Standarddateinamenerweiterung ab, die für Quellcodedateien in der aktuellen Sprache verwendet werden soll.</summary>
        <value>Eine Dateinamenerweiterung, die der Erweiterung der Quelldateien für die aktuelle Sprache entspricht. Die Basisimplementierung gibt immer <see cref="F:System.String.Empty" /> zurück.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft wird von Code-Generatoren und Code Compiler verwendet, um anzugeben, welche Dateierweiterungen generiert oder verwendet werden sollen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird eine Instanz von <xref:Microsoft.VisualBasic.VBCodeProvider?displayProperty=nameWithType>erstellt. Im Beispiel werden der Anbieter Name, der Hashcode und die standardmäßige Dateinamenerweiterung für die neue Anbieter Instanz angezeigt.  
  
 [!code-cpp[CodeDom_CompilerInfo#3](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#3)]
 [!code-csharp[CodeDom_CompilerInfo#3](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#3)]
 [!code-vb[CodeDom_CompilerInfo#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromCompileUnit">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromCompileUnit (System.CodeDom.CodeCompileUnit compileUnit, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromCompileUnit(class System.CodeDom.CodeCompileUnit compileUnit, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromCompileUnit (compileUnit As CodeCompileUnit, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromCompileUnit(System::CodeDom::CodeCompileUnit ^ compileUnit, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCodeFromCompileUnit : System.CodeDom.CodeCompileUnit * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit&#xA;override this.GenerateCodeFromCompileUnit : System.CodeDom.CodeCompileUnit * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit" Usage="codeDomProvider.GenerateCodeFromCompileUnit (compileUnit, writer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="compileUnit" Type="System.CodeDom.CodeCompileUnit" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="writer" Type="System.IO.TextWriter" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="compileUnit">Eine <see cref="T:System.CodeDom.CodeCompileUnit" />, für die Code generiert werden soll.</param>
        <param name="writer">Der <see cref="T:System.IO.TextWriter" />, an den der Ausgabecode gesendet wird.</param>
        <param name="options">Ein <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />, das die Optionen angibt, die für das Generieren von Code verwendet werden sollen.</param>
        <summary>Generiert Code für die angegebene CodeDOM-Kompilierungseinheit (Code Document Object Model) und sendet diesen mit den angegebenen Optionen an den angegebenen Textwriter.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  In den .NET Framework Versionen 1,0 und 1,1 wird diese Methode von der <xref:System.CodeDom.Compiler.ICodeGenerator> Implementierung bereitgestellt, die von der <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>-Methode des Anbieters zurückgegeben wird. In Version 2,0 kann diese Methode direkt im Code Anbieter aufgerufen werden, auch wenn Sie vom Code Anbieter nicht überschrieben wird. Wenn der Code Anbieter diese Methode nicht außer Kraft setzt, wird die <xref:System.CodeDom.Compiler.ICodeGenerator> Implementierung von der Basisklasse aufgerufen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird gezeigt, wie die <xref:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit%2A>-Methode verwendet wird, um Code für eine "Hallo Welt"-Anwendung aus einem <xref:System.CodeDom.CodeCompileUnit>zu generieren. Dieses Beispiel ist Teil eines größeren Beispiels, das für die <xref:System.CodeDom.Compiler.CodeDomProvider>-Klasse bereitgestellt wird.  
  
 [!code-cpp[CodeDomExample#3](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDomExample/CPP/source.cpp#3)]
 [!code-csharp[CodeDomExample#3](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDomExample/CS/source.cs#3)]
 [!code-vb[CodeDomExample#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomExample/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
        <block subset="none" type="overrides"><para>Wenn Sie diese Methode überschreiben, dürfen Sie nicht die entsprechende-Methode der-Basisklasse aufzurufen. Die Basisklassen Methode erstellt in der abgeleiteten Klasse einen Generator mithilfe der veralteten <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode für die Kompatibilität mit bereits vorhandenen Anbietern, die Code-Generatoren verwenden. Die Basisklassen Methode ruft dann die entsprechende-Methode in der <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />-Implementierung auf, um diese Funktion auszuführen. Sie erhalten eine <see cref="T:System.NotImplementedException" />, wenn Sie die Basisklassen Methode von einem Code Anbieter aus aufgerufen wird, der keinen Code-Generator verwendet.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromExpression">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromExpression (System.CodeDom.CodeExpression expression, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromExpression(class System.CodeDom.CodeExpression expression, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromExpression (expression As CodeExpression, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromExpression(System::CodeDom::CodeExpression ^ expression, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCodeFromExpression : System.CodeDom.CodeExpression * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit&#xA;override this.GenerateCodeFromExpression : System.CodeDom.CodeExpression * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit" Usage="codeDomProvider.GenerateCodeFromExpression (expression, writer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.CodeDom.CodeExpression" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="writer" Type="System.IO.TextWriter" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="expression">Ein <see cref="T:System.CodeDom.CodeExpression" />-Objekt, dass den Ausdruck angibt, für den Code generiert werden soll.</param>
        <param name="writer">Der <see cref="T:System.IO.TextWriter" />, an den der Ausgabecode gesendet wird.</param>
        <param name="options">Ein <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />, das die Optionen angibt, die für das Generieren von Code verwendet werden sollen.</param>
        <summary>Generiert Code für den angegebenen CodeDOM-Ausdruck (Code Document Object Model) und sendet diesen mit den angegebenen Optionen an den angegebenen Textwriter.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  In den .NET Framework Versionen 1,0 und 1,1 wird diese Methode von der <xref:System.CodeDom.Compiler.ICodeGenerator> Implementierung bereitgestellt, die von der <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>-Methode des Anbieters zurückgegeben wird. In Version 2,0 kann diese Methode direkt im Code Anbieter aufgerufen werden, auch wenn Sie vom Code Anbieter nicht überschrieben wird. Wenn der Code Anbieter diese Methode nicht außer Kraft setzt, wird die <xref:System.CodeDom.Compiler.ICodeGenerator> Implementierung von der Basisklasse aufgerufen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
        <block subset="none" type="overrides"><para>Wenn Sie diese Methode überschreiben, dürfen Sie nicht die entsprechende-Methode der-Basisklasse aufzurufen. Die Basisklassen Methode erstellt in der abgeleiteten Klasse einen Generator mithilfe der veralteten <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode für die Kompatibilität mit bereits vorhandenen Anbietern, die Code-Generatoren verwenden. Die Basisklassen Methode ruft dann die entsprechende-Methode in der <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />-Implementierung auf, um diese Funktion auszuführen. Sie erhalten eine <see cref="T:System.NotImplementedException" />, wenn Sie die Basisklassen Methode von einem Code Anbieter aus aufgerufen wird, der keinen Code-Generator verwendet.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromMember">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromMember (System.CodeDom.CodeTypeMember member, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromMember(class System.CodeDom.CodeTypeMember member, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromMember (member As CodeTypeMember, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromMember(System::CodeDom::CodeTypeMember ^ member, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCodeFromMember : System.CodeDom.CodeTypeMember * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit&#xA;override this.GenerateCodeFromMember : System.CodeDom.CodeTypeMember * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit" Usage="codeDomProvider.GenerateCodeFromMember (member, writer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.CodeDom.CodeTypeMember" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="writer" Type="System.IO.TextWriter" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="member">Ein <see cref="T:System.CodeDom.CodeTypeMember" />, der den Member angibt, für den Code generiert werden soll.</param>
        <param name="writer">Der <see cref="T:System.IO.TextWriter" />, an den der Ausgabecode gesendet wird.</param>
        <param name="options">Ein <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />, das die Optionen angibt, die für das Generieren von Code verwendet werden sollen.</param>
        <summary>Generiert Code für die angegebene CodeDOM-Memberdeklaration (Code Document Object Model) und sendet diesen mit den angegebenen Optionen an den angegebenen Textwriter.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Basisklassen Implementierung löst eine <xref:System.NotImplementedException>aus. Unter <xref:Microsoft.CSharp.CSharpCodeProvider.GenerateCodeFromMember%2A?displayProperty=nameWithType> finden Sie eine Dokumentation, in der eine Implementierung dieser Methode beschrieben wird.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung der <xref:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember%2A>-Methode veranschaulicht, die von den Klassen <xref:Microsoft.CSharp.CSharpCodeProvider> und <xref:Microsoft.VisualBasic.VBCodeProvider> implementiert wird.  
  
 [!code-csharp[CodeDom_GenerateCodeFromMember#1](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_GenerateCodeFromMember/cs/program.cs#1)]
 [!code-vb[CodeDom_GenerateCodeFromMember#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_GenerateCodeFromMember/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Diese Methode wird in einer abgeleiteten Klasse nicht überschrieben.</exception>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeTypeMember" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromNamespace">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromNamespace (System.CodeDom.CodeNamespace codeNamespace, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromNamespace(class System.CodeDom.CodeNamespace codeNamespace, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromNamespace (codeNamespace As CodeNamespace, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromNamespace(System::CodeDom::CodeNamespace ^ codeNamespace, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCodeFromNamespace : System.CodeDom.CodeNamespace * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit&#xA;override this.GenerateCodeFromNamespace : System.CodeDom.CodeNamespace * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit" Usage="codeDomProvider.GenerateCodeFromNamespace (codeNamespace, writer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codeNamespace" Type="System.CodeDom.CodeNamespace" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="writer" Type="System.IO.TextWriter" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="codeNamespace">Ein <see cref="T:System.CodeDom.CodeNamespace" />-Objekt, das den Namespace angibt, für den Code generiert werden soll.</param>
        <param name="writer">Der <see cref="T:System.IO.TextWriter" />, an den der Ausgabecode gesendet wird.</param>
        <param name="options">Ein <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />, das die Optionen angibt, die für das Generieren von Code verwendet werden sollen.</param>
        <summary>Generiert Code für den angegebenen CodeDOM-Namespace (Code Document Object Model) und sendet diesen mit den angegebenen Optionen an den angegebenen Textwriter.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  In den .NET Framework Versionen 1,0 und 1,1 wird diese Methode von der <xref:System.CodeDom.Compiler.ICodeGenerator> Implementierung bereitgestellt, die von der <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>-Methode des Anbieters zurückgegeben wird. In Version 2,0 kann diese Methode direkt im Code Anbieter aufgerufen werden, auch wenn Sie vom Code Anbieter nicht überschrieben wird. Wenn der Code Anbieter diese Methode nicht außer Kraft setzt, wird die <xref:System.CodeDom.Compiler.ICodeGenerator> Implementierung von der Basisklasse aufgerufen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
        <block subset="none" type="overrides"><para>Wenn Sie diese Methode überschreiben, dürfen Sie nicht die entsprechende-Methode der-Basisklasse aufzurufen. Die Basisklassen Methode erstellt in der abgeleiteten Klasse einen Generator mithilfe der veralteten <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode für die Kompatibilität mit bereits vorhandenen Anbietern, die Code-Generatoren verwenden. Die Basisklassen Methode ruft dann die entsprechende-Methode in der <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />-Implementierung auf, um diese Funktion auszuführen. Sie erhalten eine <see cref="T:System.NotImplementedException" />, wenn Sie die Basisklassen Methode von einem Code Anbieter aus aufgerufen wird, der keinen Code-Generator verwendet.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeNamespace" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromStatement">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromStatement (System.CodeDom.CodeStatement statement, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromStatement(class System.CodeDom.CodeStatement statement, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromStatement (statement As CodeStatement, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromStatement(System::CodeDom::CodeStatement ^ statement, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCodeFromStatement : System.CodeDom.CodeStatement * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit&#xA;override this.GenerateCodeFromStatement : System.CodeDom.CodeStatement * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit" Usage="codeDomProvider.GenerateCodeFromStatement (statement, writer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="statement" Type="System.CodeDom.CodeStatement" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="writer" Type="System.IO.TextWriter" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="statement">Eine <see cref="T:System.CodeDom.CodeStatement" />, die die CodeDOM-Elemente enthält, für die Code generiert werden soll.</param>
        <param name="writer">Der <see cref="T:System.IO.TextWriter" />, an den der Ausgabecode gesendet wird.</param>
        <param name="options">Ein <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />, das die Optionen angibt, die für das Generieren von Code verwendet werden sollen.</param>
        <summary>Generiert Code für die angegebene CodeDOM-Anweisung (Code Document Object Model) und sendet diesen mit den angegebenen Optionen an den angegebenen Textwriter.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  In den .NET Framework Versionen 1,0 und 1,1 wird diese Methode von der <xref:System.CodeDom.Compiler.ICodeGenerator> Implementierung bereitgestellt, die von der <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>-Methode des Anbieters zurückgegeben wird. In Version 2,0 kann diese Methode direkt im Code Anbieter aufgerufen werden, auch wenn Sie vom Code Anbieter nicht überschrieben wird. Wenn der Code Anbieter diese Methode nicht außer Kraft setzt, wird die <xref:System.CodeDom.Compiler.ICodeGenerator> Implementierung von der Basisklasse aufgerufen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
        <block subset="none" type="overrides"><para>Wenn Sie diese Methode überschreiben, dürfen Sie nicht die entsprechende-Methode der-Basisklasse aufzurufen. Die Basisklassen Methode erstellt in der abgeleiteten Klasse einen Generator mithilfe der veralteten <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode für die Kompatibilität mit bereits vorhandenen Anbietern, die Code-Generatoren verwenden. Die Basisklassen Methode ruft dann die entsprechende-Methode in der <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />-Implementierung auf, um diese Funktion auszuführen. Sie erhalten eine <see cref="T:System.NotImplementedException" />, wenn Sie die Basisklassen Methode von einem Code Anbieter aus aufgerufen wird, der keinen Code-Generator verwendet.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeStatement" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromType">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromType (System.CodeDom.CodeTypeDeclaration codeType, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromType(class System.CodeDom.CodeTypeDeclaration codeType, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromType (codeType As CodeTypeDeclaration, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromType(System::CodeDom::CodeTypeDeclaration ^ codeType, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCodeFromType : System.CodeDom.CodeTypeDeclaration * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit&#xA;override this.GenerateCodeFromType : System.CodeDom.CodeTypeDeclaration * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit" Usage="codeDomProvider.GenerateCodeFromType (codeType, writer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codeType" Type="System.CodeDom.CodeTypeDeclaration" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="writer" Type="System.IO.TextWriter" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="codeType">Eine <see cref="T:System.CodeDom.CodeTypeDeclaration" />, die den Typ angibt, für den Code generiert werden soll.</param>
        <param name="writer">Der <see cref="T:System.IO.TextWriter" />, an den der Ausgabecode gesendet wird.</param>
        <param name="options">Ein <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />, das die Optionen angibt, die für das Generieren von Code verwendet werden sollen.</param>
        <summary>Generiert Code für die angegebene CodeDOM-Typdeklaration (Code Document Object Model) und sendet diesen mit den angegebenen Optionen an den angegebenen Textwriter.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  In den .NET Framework Versionen 1,0 und 1,1 wird diese Methode von der <xref:System.CodeDom.Compiler.ICodeGenerator> Implementierung bereitgestellt, die von der <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>-Methode des Anbieters zurückgegeben wird. In Version 2,0 kann diese Methode direkt im Code Anbieter aufgerufen werden, auch wenn Sie vom Code Anbieter nicht überschrieben wird. Wenn der Code Anbieter diese Methode nicht außer Kraft setzt, wird die <xref:System.CodeDom.Compiler.ICodeGenerator> Implementierung von der Basisklasse aufgerufen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
        <block subset="none" type="overrides"><para>Wenn Sie diese Methode überschreiben, dürfen Sie nicht die entsprechende-Methode der-Basisklasse aufzurufen. Die Basisklassen Methode erstellt in der abgeleiteten Klasse einen Generator mithilfe der veralteten <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode für die Kompatibilität mit bereits vorhandenen Anbietern, die Code-Generatoren verwenden. Die Basisklassen Methode ruft dann die entsprechende-Methode in der <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />-Implementierung auf, um diese Funktion auszuführen. Sie erhalten eine <see cref="T:System.NotImplementedException" />, wenn Sie die Basisklassen Methode von einem Code Anbieter aus aufgerufen wird, der keinen Code-Generator verwendet.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GetAllCompilerInfo">
      <MemberSignature Language="C#" Value="public static System.CodeDom.Compiler.CompilerInfo[] GetAllCompilerInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.Compiler.CompilerInfo[] GetAllCompilerInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAllCompilerInfo () As CompilerInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::CodeDom::Compiler::CompilerInfo ^&gt; ^ GetAllCompilerInfo();" />
      <MemberSignature Language="F#" Value="static member GetAllCompilerInfo : unit -&gt; System.CodeDom.Compiler.CompilerInfo[]" Usage="System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt den Sprachanbieter und die Compilerkonfigurationseinstellungen für diesen Computer zurück.</summary>
        <returns>Ein Array vom Typ <see cref="T:System.CodeDom.Compiler.CompilerInfo" />, das die Einstellungen aller konfigurierten <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Implementierungen darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie die <xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A>-Methode, um die Sprachanbieter Einstellungen auf einem Computer aufzulisten.  
  
> [!NOTE]
>  Im [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]werden die von der .NET Framework bereitgestellten Standard Sprachanbieter nicht im [&lt;System. CodeDom&gt; Element](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) -compilerkonfigurationsabschnitt angegeben und können nicht entfernt werden. Daher gibt diese Methode Informationen zu den Standard Anbietern und allen in der Konfigurationsdatei angegebenen Standard Anbietern zurück.  
  
   
  
## Examples  
 Im folgenden Codebeispiel werden die Sprachanbieter auf dem Computer aufgelistet und die Konfigurations-und Compilereinstellungen für die einzelnen Sprachanbieter angezeigt. Dieses Codebeispiel ist Teil eines größeren Beispiels, das für die <xref:System.CodeDom.Compiler.CompilerInfo>-Klasse bereitgestellt wird.  
  
 [!code-cpp[CodeDom_CompilerInfo#8](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#8)]
 [!code-csharp[CodeDom_CompilerInfo#8](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#8)]
 [!code-vb[CodeDom_CompilerInfo#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</exception>
        <altmember cref="T:System.CodeDom.Compiler.CompilerInfo" />
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/compiler/index.md">Schema für Compiler- und Sprachanbietereinstellungen</related>
      </Docs>
    </Member>
    <Member MemberName="GetCompilerInfo">
      <MemberSignature Language="C#" Value="public static System.CodeDom.Compiler.CompilerInfo GetCompilerInfo (string language);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.Compiler.CompilerInfo GetCompilerInfo(string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCompilerInfo (language As String) As CompilerInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::Compiler::CompilerInfo ^ GetCompilerInfo(System::String ^ language);" />
      <MemberSignature Language="F#" Value="static member GetCompilerInfo : string -&gt; System.CodeDom.Compiler.CompilerInfo" Usage="System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo language" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="language" Type="System.String" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="language">Der Name einer Sprache.</param>
        <summary>Gibt die Sprachanbieter- und Compilerkonfigurationseinstellungen für die angegebene Sprache zurück.</summary>
        <returns>Ein mit Einstellungen der konfigurierten <see cref="T:System.CodeDom.Compiler.CompilerInfo" />-Implementierung aufgefülltes <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das [&lt;System. CodeDom&gt;-Element](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) in der Computer Konfigurationsdatei enthält die Sprachanbieter-und Compilerkonfigurationseinstellungen für jede <xref:System.CodeDom.Compiler.CodeDomProvider>-Implementierung auf dem Computer. Weitere Informationen zu Computer Konfigurationsdateien finden Sie im Abschnitt Computer Konfigurationsdateien unter [Konfigurieren von apps](~/docs/framework/configure-apps/index.md). Mit der <xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A>-Methode werden die einzelnen Anbieter Konfigurationselemente nach dem angegebenen Sprachen Namen durchsucht. Die zurückgegebene <xref:System.CodeDom.Compiler.CompilerInfo> Instanz enthält den konfigurierten Sprachanbieter und die Compilereinstellungen.  
  
 Die <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A>-Methode überprüft, ob mindestens eine Anbieter Implementierung eine bestimmte Sprache unterstützt. Sie können einen Sprachnamen mithilfe von <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A> validieren, bevor Sie ihn an <xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A>übergeben. Dadurch wird verhindert, dass ein <xref:System.Configuration.ConfigurationException?displayProperty=nameWithType> ausgelöst wird, wenn Sie auf die <xref:System.CodeDom.Compiler.CompilerInfo> Instanz für einen nicht unterstützten Sprachnamen zugreifen.  
  
 Wenn mehr als eine Anbieter Implementierung für den Namen der Eingabe Sprache konfiguriert ist, gibt <xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A> die Einstellungen aus dem letzten übereinstimmenden Anbieter Konfigurationselement zurück.  
  
 Bei Sprachnamen wird Groß-/Kleinschreibung nicht beachtet.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die <xref:System.CodeDom.Compiler.CodeDomProvider> Implementierung für eine Eingabe Sprache bestimmt und die konfigurierten Einstellungen für den Sprachanbieter angezeigt. Dieses Codebeispiel ist Teil eines größeren Beispiels, das für die <xref:System.CodeDom.Compiler.CompilerInfo>-Klasse bereitgestellt wird.  
  
 [!code-cpp[CodeDom_CompilerInfo#6](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#6)]
 [!code-csharp[CodeDom_CompilerInfo#6](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#6)]
 [!code-vb[CodeDom_CompilerInfo#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationException"><paramref name="language" /> verfügt auf diesem Computer über keinen konfigurierten Anbieter.</exception>
        <exception cref="T:System.Configuration.ConfigurationErrorsException"><paramref name="language" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.Security.SecurityException">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</exception>
        <altmember cref="T:System.CodeDom.Compiler.CompilerInfo" />
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)" />
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/compiler/index.md">Schema für Compiler- und Sprachanbietereinstellungen</related>
      </Docs>
    </Member>
    <Member MemberName="GetConverter">
      <MemberSignature Language="C#" Value="public virtual System.ComponentModel.TypeConverter GetConverter (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ComponentModel.TypeConverter GetConverter(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GetConverter(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetConverter (type As Type) As TypeConverter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::ComponentModel::TypeConverter ^ GetConverter(Type ^ type);" />
      <MemberSignature Language="F#" Value="abstract member GetConverter : Type -&gt; System.ComponentModel.TypeConverter&#xA;override this.GetConverter : Type -&gt; System.ComponentModel.TypeConverter" Usage="codeDomProvider.GetConverter type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.TypeConverter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">Der Objekttyp, für den ein Typkonverter abgerufen werden soll.</param>
        <summary>Ruft einen <see cref="T:System.ComponentModel.TypeConverter" /> für den angegebenen Datentyp ab.</summary>
        <returns>Ein <see cref="T:System.ComponentModel.TypeConverter" /> für den angegebenen Typ oder <see langword="null" />, wenn für den angegebenen Typ kein <see cref="T:System.ComponentModel.TypeConverter" /> gefunden werden kann.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine abgeleitete Klasse kann diese Methode überschreiben, um bestimmte Typen von Typkonvertern für bestimmte Datentypen bereitzustellen.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.TypeConverter" />
      </Docs>
    </Member>
    <Member MemberName="GetLanguageFromExtension">
      <MemberSignature Language="C#" Value="public static string GetLanguageFromExtension (string extension);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetLanguageFromExtension(string extension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetLanguageFromExtension (extension As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetLanguageFromExtension(System::String ^ extension);" />
      <MemberSignature Language="F#" Value="static member GetLanguageFromExtension : string -&gt; string" Usage="System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension extension" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extension" Type="System.String" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="extension">Eine Dateinamenerweiterung.</param>
        <summary>Gibt, wie im <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Compilerkonfigurationsabschnitt konfiguriert, einen der angegebenen Dateinamenerweiterung zugeordneten Sprachnamen zurück.</summary>
        <returns>Ein der Dateinamenerweiterung zugeordneter Sprachname, wie in den <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Compilerkonfigurationseinstellungen konfiguriert.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das [&lt;System. CodeDom-&gt; Element](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) in der Computer Konfigurationsdatei (Machine. config) enthält die Sprachanbieter-und Compilerkonfigurationseinstellungen für jede <xref:System.CodeDom.Compiler.CodeDomProvider>-Implementierung auf dem Computer. Die <xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A>-Methode durchsucht jedes Anbieter Konfigurationselement nach der angegebenen Dateinamenerweiterung.  
  
 Die <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A>-Methode überprüft, ob mindestens eine Anbieter Implementierung eine bestimmte Dateinamenerweiterung unterstützt. Vor der Übergabe an <xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A>können Sie eine Dateinamenerweiterung mithilfe von <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A> überprüfen. Dadurch wird verhindert, dass <xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A> eine <xref:System.Configuration.ConfigurationException?displayProperty=nameWithType> für eine nicht unterstützte Dateinamenerweiterung auslöst.  
  
 Wenn eine Anbieter Implementierung die Namen Erweiterung der Eingabedatei unterstützt und mehrere unterstützte Sprachen für diesen Anbieter konfiguriert sind, gibt <xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A> den ersten Sprachnamen für diesen Anbieter zurück. Wenn mehr als eine Anbieter Implementierung für die Eingabe Dateiname-Erweiterung konfiguriert ist, gibt <xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A> den Namen der Sprache aus dem letzten übereinstimmenden Anbieter Konfigurationselement zurück.  
  
 Bei Sprachnamen und Dateinamen Erweiterungen wird Groß-/Kleinschreibung nicht beachtet.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Implementierung des <xref:System.CodeDom.Compiler.CodeDomProvider> für eine Eingabedatei Erweiterung bestimmt, und die konfigurierten Einstellungen für den Sprachanbieter werden angezeigt. Dieses Codebeispiel ist Teil eines größeren Beispiels, das für die <xref:System.CodeDom.Compiler.CompilerInfo>-Klasse bereitgestellt wird.  
  
 [!code-cpp[CodeDom_CompilerInfo#5](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#5)]
 [!code-csharp[CodeDom_CompilerInfo#5](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#5)]
 [!code-vb[CodeDom_CompilerInfo#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationException"><paramref name="extension" /> verfügt auf diesem Computer über keinen konfigurierten Sprachanbieter.</exception>
        <exception cref="T:System.Configuration.ConfigurationErrorsException"><paramref name="extension" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.Security.SecurityException">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</exception>
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)" />
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)" />
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/compiler/index.md">Schema für Compiler- und Sprachanbietereinstellungen</related>
      </Docs>
    </Member>
    <Member MemberName="GetTypeOutput">
      <MemberSignature Language="C#" Value="public virtual string GetTypeOutput (System.CodeDom.CodeTypeReference type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetTypeOutput(class System.CodeDom.CodeTypeReference type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTypeOutput (type As CodeTypeReference) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetTypeOutput(System::CodeDom::CodeTypeReference ^ type);" />
      <MemberSignature Language="F#" Value="abstract member GetTypeOutput : System.CodeDom.CodeTypeReference -&gt; string&#xA;override this.GetTypeOutput : System.CodeDom.CodeTypeReference -&gt; string" Usage="codeDomProvider.GetTypeOutput type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.CodeDom.CodeTypeReference" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="type">Eine <see cref="T:System.CodeDom.CodeTypeReference" />, die den zurückzugebenden Typ angibt.</param>
        <summary>Ruft den durch die angegebene <see cref="T:System.CodeDom.CodeTypeReference" /> angegebenen Typ ab.</summary>
        <returns>Eine Textdarstellung des angegebenen Typs, der für die Sprache formatiert ist, in der Code von diesem Codegenerator generiert wird. In Visual Basic wird z. B. beim Übergeben eines <see cref="T:System.CodeDom.CodeTypeReference" /> für den <see cref="T:System.Int32" />-Typ "Integer" zurückgegeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  In den .NET Framework Versionen 1,0 und 1,1 wird diese Methode von der <xref:System.CodeDom.Compiler.ICodeGenerator> Implementierung bereitgestellt, die von der <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>-Methode des Anbieters zurückgegeben wird. In Version 2,0 kann diese Methode direkt im Code Anbieter aufgerufen werden, auch wenn Sie vom Code Anbieter nicht überschrieben wird. Wenn der Code Anbieter diese Methode nicht außer Kraft setzt, wird die <xref:System.CodeDom.Compiler.ICodeGenerator> Implementierung von der Basisklasse aufgerufen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
        <block subset="none" type="overrides"><para>Wenn Sie diese Methode überschreiben, dürfen Sie nicht die entsprechende-Methode der-Basisklasse aufzurufen. Die Basisklassen Methode erstellt in der abgeleiteten Klasse einen Generator mithilfe der veralteten <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode für die Kompatibilität mit bereits vorhandenen Anbietern, die Code-Generatoren verwenden. Die Basisklassen Methode ruft dann die entsprechende-Methode in der <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />-Implementierung auf, um diese Funktion auszuführen. Sie erhalten eine <see cref="T:System.NotImplementedException" />, wenn Sie die Basisklassen Methode von einem Code Anbieter aus aufgerufen wird, der keinen Code-Generator verwendet.</para></block>
      </Docs>
    </Member>
    <Member MemberName="IsDefinedExtension">
      <MemberSignature Language="C#" Value="public static bool IsDefinedExtension (string extension);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefinedExtension(string extension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDefinedExtension (extension As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDefinedExtension(System::String ^ extension);" />
      <MemberSignature Language="F#" Value="static member IsDefinedExtension : string -&gt; bool" Usage="System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension extension" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extension" Type="System.String" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="extension">Eine Dateinamenerweiterung.</param>
        <summary>Testet, ob eine Dateinamenerweiterung über eine ihr zugeordnete, auf dem Computer konfigurierte <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Implementierung verfügt.</summary>
        <returns><see langword="true" />, wenn für die angegebene Dateinamenerweiterung eine <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Implementierung konfiguriert ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das [&lt;System. CodeDom-&gt; Element](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) in der Computer Konfigurationsdatei (Machine. config) enthält die Sprachanbieter-und Compilerkonfigurationseinstellungen für jede <xref:System.CodeDom.Compiler.CodeDomProvider>-Implementierung auf dem Computer. Die <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A>-Methode durchsucht die Anbieter Konfigurationselemente nach der angegebenen Dateinamenerweiterung.  
  
 Für Dateinamenerweiterungen wird die Groß-/Kleinschreibung nicht berücksichtigt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Implementierung des <xref:System.CodeDom.Compiler.CodeDomProvider> für eine Eingabedatei Erweiterung bestimmt, und die konfigurierten Einstellungen für den Sprachanbieter werden angezeigt. Dieses Codebeispiel ist Teil eines größeren Beispiels, das für die <xref:System.CodeDom.Compiler.CompilerInfo>-Klasse bereitgestellt wird.  
  
 [!code-cpp[CodeDom_CompilerInfo#5](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#5)]
 [!code-csharp[CodeDom_CompilerInfo#5](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#5)]
 [!code-vb[CodeDom_CompilerInfo#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="extension" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.Security.SecurityException">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</exception>
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)" />
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)" />
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/compiler/index.md">Schema für Compiler- und Sprachanbietereinstellungen</related>
      </Docs>
    </Member>
    <Member MemberName="IsDefinedLanguage">
      <MemberSignature Language="C#" Value="public static bool IsDefinedLanguage (string language);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefinedLanguage(string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDefinedLanguage (language As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDefinedLanguage(System::String ^ language);" />
      <MemberSignature Language="F#" Value="static member IsDefinedLanguage : string -&gt; bool" Usage="System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage language" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="language" Type="System.String" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="language">Der Sprachname.</param>
        <summary>Testet, ob eine Sprache über eine auf dem Computer konfigurierte <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Implementierung verfügt.</summary>
        <returns><see langword="true" />, wenn für die angegebene Sprache eine <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Implementierung konfiguriert ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das [&lt;System. CodeDom-&gt; Element](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) in der Computer Konfigurationsdatei (Machine. config) enthält die Sprachanbieter-und Compilerkonfigurationseinstellungen für jede <xref:System.CodeDom.Compiler.CodeDomProvider>-Implementierung auf dem Computer. Die <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A>-Methode durchsucht die Anbieter Konfigurationselemente nach dem angegebenen Sprachnamen.  
  
 Bei Sprachnamen wird Groß-/Kleinschreibung nicht beachtet.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die <xref:System.CodeDom.Compiler.CodeDomProvider> Implementierung für eine Eingabe Sprache bestimmt und die konfigurierten Einstellungen für den Sprachanbieter angezeigt. Dieses Codebeispiel ist Teil eines größeren Beispiels, das für die <xref:System.CodeDom.Compiler.CompilerInfo>-Klasse bereitgestellt wird.  
  
 [!code-cpp[CodeDom_CompilerInfo#6](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#6)]
 [!code-csharp[CodeDom_CompilerInfo#6](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#6)]
 [!code-vb[CodeDom_CompilerInfo#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="language" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.Security.SecurityException">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</exception>
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)" />
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/compiler/index.md">Schema für Compiler- und Sprachanbietereinstellungen</related>
      </Docs>
    </Member>
    <Member MemberName="IsValidIdentifier">
      <MemberSignature Language="C#" Value="public virtual bool IsValidIdentifier (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsValidIdentifier(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsValidIdentifier (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsValidIdentifier(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member IsValidIdentifier : string -&gt; bool&#xA;override this.IsValidIdentifier : string -&gt; bool" Usage="codeDomProvider.IsValidIdentifier value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value">Der Wert, der als gültiger Bezeichner validiert werden soll.</param>
        <summary>Gibt einen Wert zurück, der angibt, ob der angegebene Wert ein gültiger Bezeichner für die aktuelle Sprache ist.</summary>
        <returns><see langword="true" />, wenn der <paramref name="value" />-Parameter ein gültiger Bezeichner ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode testet, ob ein Bezeichner gültig ist. Die <xref:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier%2A>-Methode ist Anbieter spezifisch. Bezeichner, die für einen Anbieter gültig sind, sind möglicherweise für andere Anbieter nicht gültig. Wenn `value` Zeichen außerhalb des ASCII-Zeichen Bereichs enthält, überprüfen Sie den Bezeichner für alle Sprachen, die möglicherweise zum Kompilieren des Codes verwendet werden.  
  
> [!NOTE]
>  In den .NET Framework Versionen 1,0 und 1,1 wird diese Methode von der <xref:System.CodeDom.Compiler.ICodeGenerator> Implementierung bereitgestellt, die von der <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>-Methode des Anbieters zurückgegeben wird. In Version 2,0 kann diese Methode direkt im Code Anbieter aufgerufen werden, auch wenn Sie vom Code Anbieter nicht überschrieben wird. Wenn der Code Anbieter diese Methode nicht außer Kraft setzt, wird die <xref:System.CodeDom.Compiler.ICodeGenerator> Implementierung von der Basisklasse aufgerufen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
        <block subset="none" type="overrides"><para>Wenn Sie <see cref="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)" /> in einer abgeleiteten Klasse überschreiben, entwerfen Sie die Methode so, dass Sie nur dann <see langword="true" /> zurückgibt, wenn der Wert den Regeln der Sprache entspricht und nicht mit einem Schlüsselwort in Konflikt steht.  
  
Wenn Sie diese Methode überschreiben, dürfen Sie nicht die entsprechende-Methode der-Basisklasse aufzurufen. Die Basisklassen Methode erstellt in der abgeleiteten Klasse einen Generator mithilfe der veralteten <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode für die Kompatibilität mit bereits vorhandenen Anbietern, die Code-Generatoren verwenden. Die Basisklassen Methode ruft dann die entsprechende-Methode in der <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />-Implementierung auf, um diese Funktion auszuführen. Sie erhalten eine <see cref="T:System.NotImplementedException" />, wenn Sie die Basisklassen Methode von einem Code Anbieter aus aufgerufen wird, der keinen Code-Generator verwendet.</para></block>
      </Docs>
    </Member>
    <Member MemberName="LanguageOptions">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.LanguageOptions LanguageOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.CodeDom.Compiler.LanguageOptions LanguageOptions" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CodeDomProvider.LanguageOptions" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property LanguageOptions As LanguageOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::CodeDom::Compiler::LanguageOptions LanguageOptions { System::CodeDom::Compiler::LanguageOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.LanguageOptions : System.CodeDom.Compiler.LanguageOptions" Usage="System.CodeDom.Compiler.CodeDomProvider.LanguageOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.LanguageOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Bezeichner für Sprachfeatures ab.</summary>
        <value><see cref="T:System.CodeDom.Compiler.LanguageOptions" />, die bestimmte Features der Sprache angeben.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.CodeCompileUnit Parse (System.IO.TextReader codeStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.CodeCompileUnit Parse(class System.IO.TextReader codeStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Parse (codeStream As TextReader) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::CodeCompileUnit ^ Parse(System::IO::TextReader ^ codeStream);" />
      <MemberSignature Language="F#" Value="abstract member Parse : System.IO.TextReader -&gt; System.CodeDom.CodeCompileUnit&#xA;override this.Parse : System.IO.TextReader -&gt; System.CodeDom.CodeCompileUnit" Usage="codeDomProvider.Parse codeStream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codeStream" Type="System.IO.TextReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="codeStream">Ein <see cref="T:System.IO.TextReader" />-Objekt, das zum Lesen des zu analysierenden Codes verwendet wird.</param>
        <summary>Kompiliert den aus dem angegebenen Textstream gelesenen Code in einer <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
        <returns>Eine <see cref="T:System.CodeDom.CodeCompileUnit" />, die eine Darstellung des analysierten Code enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  In den .NET Framework Versionen 1,0 und 1,1 wird diese Methode von der <xref:System.CodeDom.Compiler.ICodeParser> Implementierung bereitgestellt, die von der <xref:System.CodeDom.Compiler.CodeDomProvider.CreateParser%2A>-Methode des Anbieters zurückgegeben wird. In Version 2,0 kann diese Methode direkt im Code Anbieter aufgerufen werden, auch wenn Sie vom Code Anbieter nicht überschrieben wird. Wenn der Code Anbieter diese Methode nicht außer Kraft setzt, wird die <xref:System.CodeDom.Compiler.ICodeParser> Implementierung von der Basisklasse aufgerufen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
        <block subset="none" type="overrides"><para>Wenn Sie diese Methode überschreiben, dürfen Sie nicht die entsprechende-Methode der-Basisklasse aufzurufen. Die Basisklassen Methode erstellt einen Parser in der abgeleiteten Klasse mithilfe der veralteten <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser" />-Methode für die Kompatibilität mit bereits vorhandenen Anbietern, die Code Parser verwenden. Die Basisklassen Methode ruft dann die entsprechende-Methode in der <see cref="T:System.CodeDom.Compiler.ICodeParser" />-Implementierung auf, um diese Funktion auszuführen. Sie erhalten eine <see cref="T:System.NotImplementedException" />, wenn Sie die Basisklassen Methode von einem Code Anbieter aus aufgerufen wird, der keinen Code Parser verwendet.</para></block>
        <altmember cref="T:System.CodeDom.CodeCompileUnit" />
        <altmember cref="T:System.IO.TextReader" />
      </Docs>
    </Member>
    <Member MemberName="Supports">
      <MemberSignature Language="C#" Value="public virtual bool Supports (System.CodeDom.Compiler.GeneratorSupport generatorSupport);" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Supports(valuetype System.CodeDom.Compiler.GeneratorSupport generatorSupport) cil managed" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Supports (generatorSupport As GeneratorSupport) As Boolean" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Supports(System::CodeDom::Compiler::GeneratorSupport generatorSupport);" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="abstract member Supports : System.CodeDom.Compiler.GeneratorSupport -&gt; bool&#xA;override this.Supports : System.CodeDom.Compiler.GeneratorSupport -&gt; bool" Usage="codeDomProvider.Supports generatorSupport" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C#" Value="public virtual bool Supports (System.CodeDom.Compiler.GeneratorSupport supports);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Supports(valuetype System.CodeDom.Compiler.GeneratorSupport supports) cil managed" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Supports (supports As GeneratorSupport) As Boolean" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Supports(System::CodeDom::Compiler::GeneratorSupport supports);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member Supports : System.CodeDom.Compiler.GeneratorSupport -&gt; bool&#xA;override this.Supports : System.CodeDom.Compiler.GeneratorSupport -&gt; bool" Usage="codeDomProvider.Supports supports" FrameworkAlternate="xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="generatorSupport" Type="System.CodeDom.Compiler.GeneratorSupport" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="supports" Type="System.CodeDom.Compiler.GeneratorSupport" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="generatorSupport">Ein <see cref="T:System.CodeDom.Compiler.GeneratorSupport" />-Objekt, das den Typ der Unterstützung für die Codegenerierung angibt, der geprüft werden soll.</param>
        <param name="supports">To be added.</param>
        <summary>Gibt einen Wert zurück, der angibt, ob die angegebene Unterstützung für die Codegenerierung verfügbar ist.</summary>
        <returns><see langword="true" />, wenn die angegebene Unterstützung für die Codegenerierung verfügbar ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode kann mit einer Reihe von <xref:System.CodeDom.Compiler.GeneratorSupport> Flags gleichzeitig aufgerufen werden, um eine Reihe von Funktionen zu testen, indem ein Satz geeigneter funktionsflags zusammen mit einem binären `OR` Operator&#124;() verknüpft wird.  
  
> [!NOTE]
>  In den .NET Framework Versionen 1,0 und 1,1 wird diese Methode von der <xref:System.CodeDom.Compiler.ICodeGenerator> Implementierung bereitgestellt, die von der <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>-Methode des Anbieters zurückgegeben wird. In Version 2,0 kann diese Methode direkt im Code Anbieter aufgerufen werden, auch wenn Sie vom Code Anbieter nicht überschrieben wird. Wenn der Code Anbieter diese Methode nicht außer Kraft setzt, wird die <xref:System.CodeDom.Compiler.ICodeGenerator> Implementierung von der Basisklasse aufgerufen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
        <block subset="none" type="overrides"><para>Wenn Sie diese Methode überschreiben, dürfen Sie nicht die entsprechende-Methode der-Basisklasse aufzurufen. Die Basisklassen Methode erstellt in der abgeleiteten Klasse einen Generator mithilfe der veralteten <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode für die Kompatibilität mit bereits vorhandenen Anbietern, die Code-Generatoren verwenden. Die Basisklassen Methode ruft dann die entsprechende-Methode in der <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />-Implementierung auf, um diese Funktion auszuführen. Sie erhalten eine <see cref="T:System.NotImplementedException" />, wenn Sie die Basisklassen Methode von einem Code Anbieter aus aufgerufen wird, der keinen Code-Generator verwendet.</para></block>
        <altmember cref="T:System.CodeDom.Compiler.GeneratorSupport" />
      </Docs>
    </Member>
  </Members>
</Type>

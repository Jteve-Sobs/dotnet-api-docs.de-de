<Type Name="CodeDomProvider" FullName="System.CodeDom.Compiler.CodeDomProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="10d65c2c6acb521c573e2db518ec80d92ba50400" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57960339" /></Metadata><TypeSignature Language="C#" Value="public abstract class CodeDomProvider : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CodeDomProvider extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.CodeDom.Compiler.CodeDomProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class CodeDomProvider&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodeDomProvider abstract : System::ComponentModel::Component" />
  <TypeSignature Language="F#" Value="type CodeDomProvider = class&#xA;    inherit Component" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.CodeDom</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.ComponentModel.ToolboxItem(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt eine Basisklasse für <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Implementierungen bereit. Diese Klasse ist abstrakt.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.CodeDom.Compiler.CodeDomProvider> kann zum Erstellen und Abrufen von Instanzen von Codegeneratoren und Codecompiler verwendet werden. Mit Code-Generatoren kann Code in bestimmten Sprachen erstellt werden. Mit Codecompilern kann Code in Assemblys kompiliert werden.  
  
> [!NOTE]
>  In der [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)], die Methoden in der Code-Generator zur Verfügung gestellt und -Codecompilers direkt aus dem Codeanbieter verfügbar sind. Sie müssen nicht aufrufen <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> oder <xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A> den Zugriff auf die Methoden und diese Methoden werden als veraltet markiert. Dies gilt für bereits vorhandene als auch der neue Code-Anbieter-Implementierungen.  
  
 Ein <xref:System.CodeDom.Compiler.CodeDomProvider> Implementierung bietet in der Regel Code und/oder den Code-Kompilierung Schnittstellen zum Generieren von Code und Verwalten der Kompilierung für eine einzelne Programmiersprache. Mehrere Sprachen werden von unterstützt <xref:System.CodeDom.Compiler.CodeDomProvider> Implementierungen, die im Lieferumfang der [!INCLUDE[winsdklong](~/includes/winsdklong-md.md)]. Diesen Sprachen gehören c#, Visual Basic, C++ und JScript. Entwickler oder Compileranbieter können implementieren die <xref:System.CodeDom.Compiler.ICodeGenerator> und <xref:System.CodeDom.Compiler.ICodeCompiler> -Schnittstellen, und geben Sie eine <xref:System.CodeDom.Compiler.CodeDomProvider> , die CodeDOM-Unterstützung für andere Programmiersprachen erweitert.  
  
 Die [ &lt;system.codedom&gt; Element](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) in der Computerkonfiguration-Datei (Machine.config) bietet einen Mechanismus für Entwickler und Compileranbieter, Hinzufügen von Konfigurationseinstellungen für zusätzliche <xref:System.CodeDom.Compiler.CodeDomProvider>Implementierungen.  
  
 Die <xref:System.CodeDom.Compiler.CodeDomProvider> -Klasse stellt statische Methoden zum Ermitteln und Auflisten der <xref:System.CodeDom.Compiler.CodeDomProvider> Implementierungen auf einem Computer. Die <xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A> Methode gibt die Einstellungen für alle <xref:System.CodeDom.Compiler.CodeDomProvider> Implementierungen auf einem Computer. Die <xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A> Methode gibt zurück, das die Einstellungen für einen bestimmten <xref:System.CodeDom.Compiler.CodeDomProvider> basierend auf den Namen der Programmiersprache Sprache-Implementierung. Die <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> Methode gibt eine Instanz einer <xref:System.CodeDom.Compiler.CodeDomProvider> Implementierung für eine bestimmte Sprache.  
  
 Weitere Einzelheiten sprachanbietereinstellungen in der Konfigurationsdatei finden Sie unter [Compiler und Language Provider Settings Schema](~/docs/framework/configure-apps/file-schema/compiler/index.md).  
  
> [!NOTE]
>  Diese Klasse stellt einen Linkaufruf und einer vererbungsanforderung auf Klassenebene. Ein <xref:System.Security.SecurityException> wird ausgelöst, wenn Sie entweder den unmittelbaren Aufrufer oder die abgeleitete Klasse volle Vertrauenswürdigkeit Berechtigung nicht besitzt. Weitere Informationen zu sicherheitsanforderungen, finden Sie unter [Verknüpfungsaufrufe](~/docs/framework/misc/link-demands.md) und [Vererbungsanforderungen](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/x4yx82e6(v=vs.100)).  
  
   
  
## Examples  
 Das folgende Beispielprogramm generieren und Kompilieren von Quellcode, die auf Grundlage eines CodeDOM-Modells eines Programms, der mit "Hello World" ausgibt, kann die <xref:System.Console> Klasse. Es wird eine Windows Forms-Benutzeroberfläche bereitgestellt. Der Benutzer kann das Ziel, die Programmiersprache aus mehreren auswählen: C#, Visual Basic und JScript.  
  
 [!code-cpp[CodeDomExample#1](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDomExample/CPP/source.cpp#1)]
 [!code-csharp[CodeDomExample#1](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDomExample/CS/source.cs#1)]
 [!code-vb[CodeDomExample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomExample/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">für volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer. Diese Klasse kann nicht von teilweise vertrauenswürdigem Code verwendet werden.</permission>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">für volle Vertrauenswürdigkeit für erben. Diese Klasse kann nicht von teilweise vertrauenswürdigem Code nicht geerbt werden.</permission>
    <block subset="none" type="overrides"><para>In der .NET Framework-Versionen 1.0 und 1.1 bestehen Codeanbieter Implementierungen von <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />, <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />, <see cref="T:System.CodeDom.Compiler.ICodeParser" />, und <see cref="T:System.CodeDom.Compiler.ICodeCompiler" />. In der [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />, <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser" />, und <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> Methoden sind veraltet, und die Methoden der <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> und <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> werden direkt in die <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> Klasse. Sie überschreiben die Methoden in der anbieterimplementierung Code, und die grundlegenden Methoden nicht aufrufen.</para></block>
    <altmember cref="T:System.CodeDom.Compiler.CompilerInfo" />
    <altmember cref="T:Microsoft.CSharp.CSharpCodeProvider" />
    <altmember cref="T:Microsoft.VisualBasic.VBCodeProvider" />
    <altmember cref="T:Microsoft.JScript.JScriptCodeProvider" />
    <related type="Article" href="~/docs/framework/configure-apps/file-schema/compiler/index.md">Schema für Compiler- und Sprachanbietereinstellungen</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CodeDomProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; CodeDomProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Klasse.</summary>
        <remarks>To be added.</remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">für volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer. Diese Klasse kann nicht von teilweise vertrauenswürdigem Code verwendet werden.</permission>
      </Docs>
    </Member>
    <Member MemberName="CompileAssemblyFromDom">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.CompilerResults CompileAssemblyFromDom (System.CodeDom.Compiler.CompilerParameters options, params System.CodeDom.CodeCompileUnit[] compilationUnits);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.CompilerResults CompileAssemblyFromDom(class System.CodeDom.Compiler.CompilerParameters options, class System.CodeDom.CodeCompileUnit[] compilationUnits) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CompileAssemblyFromDom (options As CompilerParameters, ParamArray compilationUnits As CodeCompileUnit()) As CompilerResults" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::CompilerResults ^ CompileAssemblyFromDom(System::CodeDom::Compiler::CompilerParameters ^ options, ... cli::array &lt;System::CodeDom::CodeCompileUnit ^&gt; ^ compilationUnits);" />
      <MemberSignature Language="F#" Value="abstract member CompileAssemblyFromDom : System.CodeDom.Compiler.CompilerParameters * System.CodeDom.CodeCompileUnit[] -&gt; System.CodeDom.Compiler.CompilerResults&#xA;override this.CompileAssemblyFromDom : System.CodeDom.Compiler.CompilerParameters * System.CodeDom.CodeCompileUnit[] -&gt; System.CodeDom.Compiler.CompilerResults" Usage="codeDomProvider.CompileAssemblyFromDom (options, compilationUnits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerResults</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.CodeDom.Compiler.CompilerParameters" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="compilationUnits" Type="System.CodeDom.CodeCompileUnit[]" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-plat-ext-2.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="options">Ein <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Objekt, das die Einstellungen für die Kompilierung angibt.</param>
        <param name="compilationUnits">Ein Array vom Typ <see cref="T:System.CodeDom.CodeCompileUnit" />, das den zu kompilierenden Code angibt.</param>
        <summary>Kompiliert eine Assembly auf Grundlage der <see cref="N:System.CodeDom" />-Strukturen im angegebenen Array von <see cref="T:System.CodeDom.CodeCompileUnit" />-Objekten mit den angegebenen Compilereinstellungen.</summary>
        <returns>Ein <see cref="T:System.CodeDom.Compiler.CompilerResults" />-Objekt, das die Ergebnisse der Kompilierung angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Diese Methode wird in der .NET Framework-Versionen 1.0 und 1.1 von bereitgestellt der <xref:System.CodeDom.Compiler.ICodeCompiler> -Implementierung, die von zurückgegeben wird das <xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A> -Methode des Anbieters. In Version 2.0 kann diese Methode direkt auf Code-Anbieters aufgerufen werden, auch wenn sie nicht vom Codeanbieter überschrieben wird. Wenn der Standardanbieter nicht mit dieser Methode überschreibt die <xref:System.CodeDom.Compiler.ICodeCompiler> -Implementierung von der Basisklasse aufgerufen wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
        <block subset="none" type="overrides"><para>Wenn Sie diese Methode überschreiben, müssen Sie nicht die entsprechende Methode der Basisklasse aufrufen. Die Methode der Basisklasse wird ein Generator erstellt, in der abgeleiteten Klasse, die mithilfe der veralteten <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> Methode für die Kompatibilität mit bereits vorhandenen Anbieter, die Codecompiler zu verwenden. Die Methode der Basisklasse ruft dann die entsprechende Methode der <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> Implementierung, die diese Funktion auszuführen. Sie erhalten eine <see cref="T:System.NotImplementedException" /> Wenn Sie die Methode der Basisklasse von einem Codeanbieter aufrufen, die einen Codecompiler nicht verwendet.</para></block>
        <altmember cref="T:System.CodeDom.Compiler.CompilerParameters" />
        <altmember cref="T:System.CodeDom.CodeCompileUnit" />
        <altmember cref="T:System.CodeDom.Compiler.CompilerResults" />
      </Docs>
    </Member>
    <Member MemberName="CompileAssemblyFromFile">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.CompilerResults CompileAssemblyFromFile (System.CodeDom.Compiler.CompilerParameters options, params string[] fileNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.CompilerResults CompileAssemblyFromFile(class System.CodeDom.Compiler.CompilerParameters options, string[] fileNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CompileAssemblyFromFile (options As CompilerParameters, ParamArray fileNames As String()) As CompilerResults" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::CompilerResults ^ CompileAssemblyFromFile(System::CodeDom::Compiler::CompilerParameters ^ options, ... cli::array &lt;System::String ^&gt; ^ fileNames);" />
      <MemberSignature Language="F#" Value="abstract member CompileAssemblyFromFile : System.CodeDom.Compiler.CompilerParameters * string[] -&gt; System.CodeDom.Compiler.CompilerResults&#xA;override this.CompileAssemblyFromFile : System.CodeDom.Compiler.CompilerParameters * string[] -&gt; System.CodeDom.Compiler.CompilerResults" Usage="codeDomProvider.CompileAssemblyFromFile (options, fileNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerResults</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.CodeDom.Compiler.CompilerParameters" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="fileNames" Type="System.String[]" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-plat-ext-2.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="options">Ein <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Objekt, das die Einstellungen für die Kompilierung angibt.</param>
        <param name="fileNames">Ein Array mit den Namen der zu kompilierenden Dateien.</param>
        <summary>Kompiliert eine Assembly aus dem in den angegebenen Dateien enthaltenen Quellcode mit den angegebenen Compilereinstellungen.</summary>
        <returns>Ein <see cref="T:System.CodeDom.Compiler.CompilerResults" />-Objekt, das die Ergebnisse der Kompilierung angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Diese Methode wird in der .NET Framework-Versionen 1.0 und 1.1 von bereitgestellt der <xref:System.CodeDom.Compiler.ICodeCompiler> -Implementierung, die von zurückgegeben wird das <xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A> -Methode des Anbieters. In Version 2.0 kann diese Methode direkt auf Code-Anbieters aufgerufen werden, auch wenn sie nicht vom Codeanbieter überschrieben wird. Wenn der Standardanbieter nicht mit dieser Methode überschreibt die <xref:System.CodeDom.Compiler.ICodeCompiler> -Implementierung von der Basisklasse aufgerufen wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
        <block subset="none" type="overrides"><para>Wenn Sie diese Methode überschreiben, müssen Sie nicht die entsprechende Methode der Basisklasse aufrufen. Die Methode der Basisklasse wird ein Generator erstellt, in der abgeleiteten Klasse, die mithilfe der veralteten <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> Methode für die Kompatibilität mit bereits vorhandenen Anbieter, die Codecompiler zu verwenden. Die Methode der Basisklasse ruft dann die entsprechende Methode der <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> Implementierung, die diese Funktion auszuführen. Sie erhalten eine <see cref="T:System.NotImplementedException" /> Wenn Sie die Methode der Basisklasse von einem Codeanbieter aufrufen, die einen Codecompiler nicht verwendet.</para></block>
        <altmember cref="T:System.CodeDom.Compiler.CompilerParameters" />
        <altmember cref="T:System.CodeDom.Compiler.CompilerResults" />
      </Docs>
    </Member>
    <Member MemberName="CompileAssemblyFromSource">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.CompilerResults CompileAssemblyFromSource (System.CodeDom.Compiler.CompilerParameters options, params string[] sources);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.CompilerResults CompileAssemblyFromSource(class System.CodeDom.Compiler.CompilerParameters options, string[] sources) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CompileAssemblyFromSource (options As CompilerParameters, ParamArray sources As String()) As CompilerResults" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::CompilerResults ^ CompileAssemblyFromSource(System::CodeDom::Compiler::CompilerParameters ^ options, ... cli::array &lt;System::String ^&gt; ^ sources);" />
      <MemberSignature Language="F#" Value="abstract member CompileAssemblyFromSource : System.CodeDom.Compiler.CompilerParameters * string[] -&gt; System.CodeDom.Compiler.CompilerResults&#xA;override this.CompileAssemblyFromSource : System.CodeDom.Compiler.CompilerParameters * string[] -&gt; System.CodeDom.Compiler.CompilerResults" Usage="codeDomProvider.CompileAssemblyFromSource (options, sources)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerResults</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.CodeDom.Compiler.CompilerParameters" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="sources" Type="System.String[]" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-plat-ext-2.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="options">Ein <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Objekt, das die Compilereinstellungen für die Kompilierung angibt.</param>
        <param name="sources">Ein Array von zu kompilierenden Quellcodezeichenfolgen.</param>
        <summary>Kompiliert eine Assembly aus dem angegebenen Array von Zeichenfolgen mit Quellcode und unter Verwendung der angegebenen Compilereinstellungen.</summary>
        <returns>Ein <see cref="T:System.CodeDom.Compiler.CompilerResults" />-Objekt, das die Ergebnisse der Kompilierung angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Diese Methode wird in der .NET Framework-Versionen 1.0 und 1.1 von bereitgestellt der <xref:System.CodeDom.Compiler.ICodeCompiler> -Implementierung, die von zurückgegeben wird das <xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A> -Methode des Anbieters. In Version 2.0 kann diese Methode direkt auf Code-Anbieters aufgerufen werden, auch wenn sie nicht vom Codeanbieter überschrieben wird. Wenn der Standardanbieter nicht mit dieser Methode überschreibt die <xref:System.CodeDom.Compiler.ICodeCompiler> -Implementierung von der Basisklasse aufgerufen wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
        <block subset="none" type="overrides"><para>Wenn Sie diese Methode überschreiben, müssen Sie nicht die entsprechende Methode der Basisklasse aufrufen. Die Methode der Basisklasse wird ein Generator erstellt, in der abgeleiteten Klasse, die mithilfe der veralteten <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> Methode für die Kompatibilität mit bereits vorhandenen Anbieter, die Codecompiler zu verwenden. Die Methode der Basisklasse ruft dann die entsprechende Methode der <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> Implementierung, die diese Funktion auszuführen. Sie erhalten eine <see cref="T:System.NotImplementedException" /> Wenn Sie die Methode der Basisklasse von einem Codeanbieter aufrufen, die einen Codecompiler nicht verwendet.</para></block>
        <altmember cref="T:System.CodeDom.Compiler.CompilerParameters" />
        <altmember cref="T:System.CodeDom.Compiler.CompilerResults" />
      </Docs>
    </Member>
    <Member MemberName="CreateCompiler">
      <MemberSignature Language="C#" Value="public abstract System.CodeDom.Compiler.ICodeCompiler CreateCompiler ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.ICodeCompiler CreateCompiler() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function CreateCompiler () As ICodeCompiler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::CodeDom::Compiler::ICodeCompiler ^ CreateCompiler();" />
      <MemberSignature Language="F#" Value="abstract member CreateCompiler : unit -&gt; System.CodeDom.Compiler.ICodeCompiler" Usage="codeDomProvider.CreateCompiler " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.Obsolete("ICodeCompiler is obsolete")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netcore-2.1;netframework-4.8;dotnet-plat-ext-2.1;netcore-2.2;netcore-3.0;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0">
          <AttributeName>System.Obsolete("Callers should not use the ICodeCompiler interface and should instead use the methods directly on the CodeDomProvider class. Those inheriting from CodeDomProvider must still implement this interface, and should exclude this warning or also obsolete this method.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.ICodeCompiler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erstellt beim Überschreiben in einer abgeleiteten Klasse einen neuen Codecompiler.</summary>
        <returns>Ein <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> zum Kompilieren von <see cref="N:System.CodeDom" />-basierten Quellcodedarstellungen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ist veraltet, in der [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Die empfohlene Alternative ist das Aufrufen der <xref:System.CodeDom.Compiler.ICodeCompiler> Methoden, die direkt im Codeanbieter verfügbar sind.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>In der [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], implementieren Sie die <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> Elemente in der <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> Klasse und löst eine <see cref="T:System.NotSupportedException" /> diese Methode wird aufgerufen, wenn.</para></block>
      </Docs>
    </Member>
    <Member MemberName="CreateEscapedIdentifier">
      <MemberSignature Language="C#" Value="public virtual string CreateEscapedIdentifier (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string CreateEscapedIdentifier(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateEscapedIdentifier (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ CreateEscapedIdentifier(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member CreateEscapedIdentifier : string -&gt; string&#xA;override this.CreateEscapedIdentifier : string -&gt; string" Usage="codeDomProvider.CreateEscapedIdentifier value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value">Die Zeichenfolge, für die ein mit einem Escapezeichen versehener Bezeichner generiert werden soll.</param>
        <summary>Erstellt einen mit einem Escapezeichen versehenen Bezeichner für den angegebenen Wert.</summary>
        <returns>Der mit einem Escapezeichen versehene Bezeichner für den Wert.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier%2A> Tests, ob der Bezeichner Konflikte mit reservierten oder sprachspezifischen Schlüsselwörtern, und wenn dies der Fall ist, gibt Sie einen äquivalenten Namen mit sprachspezifischen Escape-Code-Formatierung. Dies ist eine geschützte ID bezeichnet. Die geschützte ID enthält denselben `value` aber Escape-codeformatierung hinzugefügt, um den Bezeichner vom Schlüsselwort zu unterscheiden. Es sind zwei Beispiele für die schnittstellenimplementierung vorangehenden der `value` mit "@" oder Klammern die `value` mit "[" und "]".  
  
> [!NOTE]
>  Diese Methode wird in der .NET Framework-Versionen 1.0 und 1.1 von bereitgestellt der <xref:System.CodeDom.Compiler.ICodeGenerator> -Implementierung, die von zurückgegeben wird das <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> -Methode des Anbieters. In Version 2.0 kann diese Methode direkt auf Code-Anbieters aufgerufen werden, auch wenn sie nicht vom Codeanbieter überschrieben wird. Wenn der Standardanbieter nicht mit dieser Methode überschreibt die <xref:System.CodeDom.Compiler.ICodeGenerator> -Implementierung von der Basisklasse aufgerufen wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
        <block subset="none" type="overrides"><para>Wenn Sie diese Methode überschreiben, müssen Sie nicht die entsprechende Methode der Basisklasse aufrufen. Die Methode der Basisklasse wird ein Generator erstellt, in der abgeleiteten Klasse, die mithilfe der veralteten <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> Methode für die Kompatibilität mit bereits vorhandenen Anbieter, die Code-Generatoren zu verwenden. Die Methode der Basisklasse ruft dann die entsprechende Methode der <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> Implementierung, die diese Funktion auszuführen. Sie erhalten eine <see cref="T:System.NotImplementedException" /> Wenn Sie die Methode der Basisklasse von einem Codeanbieter aufrufen, die einen Code-Generator nicht verwendet.</para></block>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateGenerator">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Erstellt beim Überschreiben in einer abgeleiteten Klasse einen neuen Codegenerator.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateGenerator">
      <MemberSignature Language="C#" Value="public abstract System.CodeDom.Compiler.ICodeGenerator CreateGenerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.ICodeGenerator CreateGenerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function CreateGenerator () As ICodeGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::CodeDom::Compiler::ICodeGenerator ^ CreateGenerator();" />
      <MemberSignature Language="F#" Value="abstract member CreateGenerator : unit -&gt; System.CodeDom.Compiler.ICodeGenerator" Usage="codeDomProvider.CreateGenerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.Obsolete("ICodeGenerator is obsolete")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netcore-2.1;netframework-4.8;dotnet-plat-ext-2.1;netcore-2.2;netcore-3.0;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0">
          <AttributeName>System.Obsolete("Callers should not use the ICodeGenerator interface and should instead use the methods directly on the CodeDomProvider class. Those inheriting from CodeDomProvider must still implement this interface, and should exclude this warning or also obsolete this method.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.ICodeGenerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erstellt beim Überschreiben in einer abgeleiteten Klasse einen neuen Codegenerator.</summary>
        <returns>Ein <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> zum Generieren von <see cref="N:System.CodeDom" />-basierten Quellcodedarstellungen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ist veraltet, in der [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Die empfohlene Alternative ist das Aufrufen der <xref:System.CodeDom.Compiler.ICodeGenerator> Methoden, die direkt im verfügbar sind, sind die <xref:System.CodeDom.Compiler.CodeDomProvider> Klasse.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>In der [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], implementieren Sie die <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> Elemente in der <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> Klasse und löst eine <see cref="T:System.NotSupportedException" /> diese Methode wird aufgerufen, wenn.</para></block>
      </Docs>
    </Member>
    <Member MemberName="CreateGenerator">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.ICodeGenerator CreateGenerator (System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.ICodeGenerator CreateGenerator(class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateGenerator (output As TextWriter) As ICodeGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::ICodeGenerator ^ CreateGenerator(System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="abstract member CreateGenerator : System.IO.TextWriter -&gt; System.CodeDom.Compiler.ICodeGenerator&#xA;override this.CreateGenerator : System.IO.TextWriter -&gt; System.CodeDom.Compiler.ICodeGenerator" Usage="codeDomProvider.CreateGenerator output" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.ICodeGenerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="output">Ein <see cref="T:System.IO.TextWriter" />, der für die Ausgabe verwendet werden soll.</param>
        <summary>Erstellt beim Überschreiben in einer abgeleiteten Klasse einen neuen Codegenerator unter Verwendung des angegebenen <see cref="T:System.IO.TextWriter" /> für die Ausgabe.</summary>
        <returns>Ein <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> zum Generieren von <see cref="N:System.CodeDom" />-basierten Quellcodedarstellungen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode verwendet die angegebene <xref:System.IO.TextWriter> für die Ausgabe. Diese Methode unterstützt weitere optimierte codegenerierung, die inkrementell, den Quellcode aktualisiert.  
  
> [!NOTE]
>  Die Basisklasse Implementierung ruft die <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> Methode, die veraltete Elemente in der [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)] und führt eine <xref:System.NotSupportedException> Wenn ein <xref:System.CodeDom.Compiler.ICodeGenerator> Objekt wird nicht zurückgegeben.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="CreateGenerator">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.ICodeGenerator CreateGenerator (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.ICodeGenerator CreateGenerator(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateGenerator (fileName As String) As ICodeGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::ICodeGenerator ^ CreateGenerator(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="abstract member CreateGenerator : string -&gt; System.CodeDom.Compiler.ICodeGenerator&#xA;override this.CreateGenerator : string -&gt; System.CodeDom.Compiler.ICodeGenerator" Usage="codeDomProvider.CreateGenerator fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.ICodeGenerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">Der Dateiname für die Ausgabe.</param>
        <summary>Erstellt beim Überschreiben in einer abgeleiteten Klasse einen neuen Codegenerator unter Verwendung des angegebenen Dateinamens für die Ausgabe.</summary>
        <returns>Ein <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> zum Generieren von <see cref="N:System.CodeDom" />-basierten Quellcodedarstellungen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode verwendet den angegebenen Dateinamen für die Ausgabe an.  
  
> [!NOTE]
>  Die Basisklasse Implementierung ruft die <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> Methode, die veraltete Elemente in der [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)] und führt eine <xref:System.NotSupportedException> Wenn ein <xref:System.CodeDom.Compiler.ICodeGenerator> Objekt wird nicht zurückgegeben.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateParser">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.ICodeParser CreateParser ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.ICodeParser CreateParser() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateParser () As ICodeParser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::ICodeParser ^ CreateParser();" />
      <MemberSignature Language="F#" Value="abstract member CreateParser : unit -&gt; System.CodeDom.Compiler.ICodeParser&#xA;override this.CreateParser : unit -&gt; System.CodeDom.Compiler.ICodeParser" Usage="codeDomProvider.CreateParser " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.Obsolete("ICodeParser is obsolete")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netcore-2.1;netframework-4.8;dotnet-plat-ext-2.1;netcore-2.2;netcore-3.0;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0">
          <AttributeName>System.Obsolete("Callers should not use the ICodeParser interface and should instead use the methods directly on the CodeDomProvider class. Those inheriting from CodeDomProvider must still implement this interface, and should exclude this warning or also obsolete this method.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.ICodeParser</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erstellt beim Überschreiben in einer abgeleiteten Klasse einen neuen Codeparser.</summary>
        <returns>Ein <see cref="T:System.CodeDom.Compiler.ICodeParser" /> zum Analysieren von Quellcode. Die Basisimplementierung gibt immer <see langword="null" /> zurück.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateProvider">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ruft eine <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Instanz für die angegebene Sprache ab.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateProvider">
      <MemberSignature Language="C#" Value="public static System.CodeDom.Compiler.CodeDomProvider CreateProvider (string language);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.Compiler.CodeDomProvider CreateProvider(string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateProvider (language As String) As CodeDomProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::Compiler::CodeDomProvider ^ CreateProvider(System::String ^ language);" />
      <MemberSignature Language="F#" Value="static member CreateProvider : string -&gt; System.CodeDom.Compiler.CodeDomProvider" Usage="System.CodeDom.Compiler.CodeDomProvider.CreateProvider language" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CodeDomProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="language" Type="System.String" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="language">Der Sprachname.</param>
        <summary>Ruft eine <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Instanz für die angegebene Sprache ab.</summary>
        <returns>Ein CodeDOM-Anbieter, der für den angegebenen Sprachnamen implementiert wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Diese Methode wird am häufigsten verwendet, um eine Instanz eines Code-Anbieters in einer Anwendung zu erstellen, die optional einen von mehreren Anbietern verwenden können. <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> können Sie den Codeanbieter zur Laufzeit angeben, die, den Sie instanziieren möchten. Wenn Sie zur Entwurfszeit, welcher Code Anbieter wissen verwendet werden, sollten Sie erstellen eine Instanz dieses Codeanbieters anstatt verwenden die <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> Methode.  
  
 Die <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> Methode gibt eine <xref:System.CodeDom.Compiler.CodeDomProvider> -Instanz für einen bestimmten Sprachennamen; es ist vergleichbar mit einem Aufruf der <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> Methode mit dem Language-Anbietertyp. Verwendung <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> Wenn Sie eine konfigurierter Anbieter-Implementierung für einen Sprachennamen dynamisch suchen möchten.  
  
 Wenn mehr als eine Implementierung eines Anbieters, für den Sprachennamen konfiguriert ist <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> gibt eine Instanz des Ressourcenanbieters für das letzte Konfigurationselement der übereinstimmende.  
  
 Verwenden der <xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29?displayProperty=nameWithType> -methodenüberladung, wenn eine bestimmte sprachanbieterimplementierung werden sollen. Beispielsweise verwenden die <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> Methode, um eine Instanz des Ressourcenanbieters abzurufen, die Namen der Sprache unterstützt `"CSharp"`; verwenden Sie die <xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29?displayProperty=nameWithType> -methodenüberladung, um eine Instanz des Ressourcenanbieters speziell für die erste der <xref:Microsoft.CSharp.CSharpCodeProvider?displayProperty=nameWithType> Implementierung. Verwenden Sie die [\], CultureInfo, die das\<xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D% 2CSystem.Globalization.CultureInfo%2CSystem.Object%5B%5D%29?displayProperty=nameWithType >-Methode auf, wenn Sie mehrere Codeanbieter für eine Sprache haben aus, und Sie wünschen, instanziieren Sie einen Anbieter-spezifischen Code.  
  
 Die <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A> Methode überprüft, ob mindestens ein Anbieter-Implementierung eine bestimmte Sprache unterstützt. Sie können überprüfen, ob eine Sprache mit <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A> vor der Übergabe an <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A>. Wenn Sie den Namen eines nicht unterstützten Sprache, um übergeben <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> eine <xref:System.Configuration.ConfigurationException?displayProperty=nameWithType> ausgelöst.  
  
 Die <xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A> Methode kann verwendet werden, um zu bestimmen, alle <xref:System.CodeDom.Compiler.CodeDomProvider> Implementierungen auf einem Computer, einschließlich zusätzliche Implementierungen zur Verfügung gestellt, Entwickler und Compileranbieter, der im identifiziert werden die [ &lt;system.codedom &gt; Element](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) in der Computerkonfigurationsdatei (Machine.config).  
  
 Die <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> Methode gibt eine Instanz einer <xref:System.CodeDom.Compiler.CodeDomProvider> Implementierung für eine bestimmte Sprache.  
  
 Language-Namen wird die Groß-/Kleinschreibung.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird bestimmt die <xref:System.CodeDom.Compiler.CodeDomProvider> Implementierung für die Eingabesprache und zeigt die konfigurierten Einstellungen für den Sprachanbieter. Dieses Codebeispiel ist Teil eines umfangreicheren Beispiels für die <xref:System.CodeDom.Compiler.CompilerInfo> Klasse.  
  
 [!code-cpp[CodeDom_CompilerInfo#6](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#6)]
 [!code-csharp[CodeDom_CompilerInfo#6](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#6)]
 [!code-vb[CodeDom_CompilerInfo#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException"><paramref name="language" /> verfügt auf diesem Computer über keinen konfigurierten Anbieter.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="language" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.Security.SecurityException">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">für volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer. Dieser Member kann von nur teilweise vertrauenswürdigem Code nicht verwendet werden.</permission>
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateProvider">
      <MemberSignature Language="C#" Value="public static System.CodeDom.Compiler.CodeDomProvider CreateProvider (string language, System.Collections.Generic.IDictionary&lt;string,string&gt; providerOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.Compiler.CodeDomProvider CreateProvider(string language, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; providerOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateProvider (language As String, providerOptions As IDictionary(Of String, String)) As CodeDomProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::Compiler::CodeDomProvider ^ CreateProvider(System::String ^ language, System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ providerOptions);" />
      <MemberSignature Language="F#" Value="static member CreateProvider : string * System.Collections.Generic.IDictionary&lt;string, string&gt; -&gt; System.CodeDom.Compiler.CodeDomProvider" Usage="System.CodeDom.Compiler.CodeDomProvider.CreateProvider (language, providerOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CodeDomProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="language" Type="System.String" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="providerOptions" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="language">Der Sprachname.</param>
        <param name="providerOptions">Eine Auflistung der Anbieteroptionen aus der Konfigurationsdatei.</param>
        <summary>Ruft eine <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Instanz für die angegebenen Sprach- und Anbieteroptionen ab.</summary>
        <returns>Ein CodeDOM-Anbieter, der für den angegebenen Sprachnamen und die angegebenen Optionen implementiert wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Diese Methode wird am häufigsten verwendet, um eine Instanz eines Code-Anbieters in einer Anwendung zu erstellen, die optional einen von mehreren Anbietern verwenden können. <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29> können Sie die Version des Code-Anbieters zur Laufzeit angeben, die instanziiert werden soll. Wenn Sie zur Entwurfszeit, welcher Code Anbieter wissen verwendet werden, soll, erstellen Sie eine Instanz für diesen Codeanbieter anstelle der <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29> Methode.  
  
 Verwendung <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29> Wenn Sie dynamisch eine konfigurierter Anbieter-Implementierung für eine bestimmte Sprache und Optionen suchen möchten. Language-Namen wird die Groß-/Kleinschreibung. Informationen zu Anbieter unterstützt Optionen finden Sie unter der spezifischen Dokumentation der CodeDOM-Anbieter.  
  
 Informationen zum Überprüfen von eines Anbieters und einen Anbieter aufrufen, wenn mehr als eine Implementierung eines Anbieters für den Namen der Sprache konfiguriert ist, finden Sie im Abschnitt "Hinweise" der <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%29> Methode.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, wie zum Erstellen einer Instanz eines Anbieters mit dem `providerOptions` Parameter.  
  
 [!code-csharp[CodeDomProvider.ProviderOptions#1](~/samples/snippets/csharp/VS_Snippets_CLR/codedomprovider.provideroptions/cs/program.cs#1)]
 [!code-vb[CodeDomProvider.ProviderOptions#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/codedomprovider.provideroptions/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateValidIdentifier">
      <MemberSignature Language="C#" Value="public virtual string CreateValidIdentifier (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string CreateValidIdentifier(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateValidIdentifier (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ CreateValidIdentifier(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member CreateValidIdentifier : string -&gt; string&#xA;override this.CreateValidIdentifier : string -&gt; string" Usage="codeDomProvider.CreateValidIdentifier value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value">Die Zeichenfolge, für die ein gültiger Bezeichner generiert werden soll.</param>
        <summary>Erstellt einen gültigen Bezeichner für den angegebenen Wert.</summary>
        <returns>Ein gültiger Bezeichner für den angegebenen Wert.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier%2A> testet, ob der Bezeichner mit reservierten Konflikte oder sprachspezifischen Schlüsselwörtern, und wenn Sie also versuchen, einen gültigen Bezeichner zurückzugeben, die Namen nicht in Konflikt stehen. Der zurückgegebene Bezeichner ist in der Regel nur geringfügig geändert, um den Bezeichner vom Schlüsselwort zu unterscheiden. der Name kann z. B. den Unterstrich ("_") vorangestellt sein.  
  
> [!NOTE]
>  Diese Methode wird in der .NET Framework-Versionen 1.0 und 1.1 von bereitgestellt der <xref:System.CodeDom.Compiler.ICodeGenerator> -Implementierung, die von zurückgegeben wird das <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> -Methode des Anbieters. In Version 2.0 kann diese Methode direkt auf Code-Anbieters aufgerufen werden, auch wenn sie nicht vom Codeanbieter überschrieben wird. Wenn der Standardanbieter nicht mit dieser Methode überschreibt die <xref:System.CodeDom.Compiler.ICodeGenerator> -Implementierung von der Basisklasse aufgerufen wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
        <block subset="none" type="overrides"><para>Wenn Sie diese Methode überschreiben, müssen Sie nicht die entsprechende Methode der Basisklasse aufrufen. Die Methode der Basisklasse wird ein Generator erstellt, in der abgeleiteten Klasse, die mithilfe der veralteten <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> Methode für die Kompatibilität mit bereits vorhandenen Anbieter, die Code-Generatoren zu verwenden. Die Methode der Basisklasse ruft dann die entsprechende Methode der <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> Implementierung, die diese Funktion auszuführen. Sie erhalten eine <see cref="T:System.NotImplementedException" /> Wenn Sie die Methode der Basisklasse von einem Codeanbieter aufrufen, die einen Code-Generator nicht verwendet.</para></block>
      </Docs>
    </Member>
    <Member MemberName="FileExtension">
      <MemberSignature Language="C#" Value="public virtual string FileExtension { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FileExtension" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CodeDomProvider.FileExtension" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property FileExtension As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ FileExtension { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FileExtension : string" Usage="System.CodeDom.Compiler.CodeDomProvider.FileExtension" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Standarddateinamenerweiterung ab, die für Quellcodedateien in der aktuellen Sprache verwendet werden soll.</summary>
        <value>Eine Dateinamenerweiterung, die der Erweiterung der Quelldateien für die aktuelle Sprache entspricht. Die Basisimplementierung gibt immer <see cref="F:System.String.Empty" /> zurück.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft wird von Codegeneratoren und Codecompiler verwendet, um anzugeben, welche Dateierweiterungen generiert oder verwendet werden soll.  
  
   
  
## Examples  
 Das folgende Codebeispiel erstellt eine Instanz des <xref:Microsoft.VisualBasic.VBCodeProvider?displayProperty=nameWithType>. Im Beispiel wird der Name des Anbieters, Hash Code und die standardmäßige Dateinamenerweiterung für die neue Instanz des Ressourcenanbieters.  
  
 [!code-cpp[CodeDom_CompilerInfo#3](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#3)]
 [!code-csharp[CodeDom_CompilerInfo#3](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#3)]
 [!code-vb[CodeDom_CompilerInfo#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromCompileUnit">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromCompileUnit (System.CodeDom.CodeCompileUnit compileUnit, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromCompileUnit(class System.CodeDom.CodeCompileUnit compileUnit, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromCompileUnit (compileUnit As CodeCompileUnit, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromCompileUnit(System::CodeDom::CodeCompileUnit ^ compileUnit, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCodeFromCompileUnit : System.CodeDom.CodeCompileUnit * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit&#xA;override this.GenerateCodeFromCompileUnit : System.CodeDom.CodeCompileUnit * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit" Usage="codeDomProvider.GenerateCodeFromCompileUnit (compileUnit, writer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="compileUnit" Type="System.CodeDom.CodeCompileUnit" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="writer" Type="System.IO.TextWriter" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="compileUnit">Eine <see cref="T:System.CodeDom.CodeCompileUnit" />, für die Code generiert werden soll.</param>
        <param name="writer">Der <see cref="T:System.IO.TextWriter" />, an den der Ausgabecode gesendet wird.</param>
        <param name="options">Ein <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />, das die Optionen angibt, die für das Generieren von Code verwendet werden sollen.</param>
        <summary>Generiert Code für die angegebene CodeDOM-Kompilierungseinheit (Code Document Object Model) und sendet diesen mit den angegebenen Optionen an den angegebenen Textwriter.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Diese Methode wird in der .NET Framework-Versionen 1.0 und 1.1 von bereitgestellt der <xref:System.CodeDom.Compiler.ICodeGenerator> -Implementierung, die von zurückgegeben wird das <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> -Methode des Anbieters. In Version 2.0 kann diese Methode direkt auf Code-Anbieters aufgerufen werden, auch wenn sie nicht vom Codeanbieter überschrieben wird. Wenn der Standardanbieter nicht mit dieser Methode überschreibt die <xref:System.CodeDom.Compiler.ICodeGenerator> -Implementierung von der Basisklasse aufgerufen wird.  
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt die Verwendung der <xref:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit%2A> Methode zum Generieren von Code für eine "Hello World"-Anwendung aus einer <xref:System.CodeDom.CodeCompileUnit>. In diesem Beispiel ist Teil eines umfangreicheren Beispiels für die <xref:System.CodeDom.Compiler.CodeDomProvider> Klasse.  
  
 [!code-cpp[CodeDomExample#3](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDomExample/CPP/source.cpp#3)]
 [!code-csharp[CodeDomExample#3](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDomExample/CS/source.cs#3)]
 [!code-vb[CodeDomExample#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomExample/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
        <block subset="none" type="overrides"><para>Wenn Sie diese Methode überschreiben, müssen Sie nicht die entsprechende Methode der Basisklasse aufrufen. Die Methode der Basisklasse wird ein Generator erstellt, in der abgeleiteten Klasse, die mithilfe der veralteten <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> Methode für die Kompatibilität mit bereits vorhandenen Anbieter, die Code-Generatoren zu verwenden. Die Methode der Basisklasse ruft dann die entsprechende Methode der <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> Implementierung, die diese Funktion auszuführen. Sie erhalten eine <see cref="T:System.NotImplementedException" /> Wenn Sie die Methode der Basisklasse von einem Codeanbieter aufrufen, die einen Code-Generator nicht verwendet.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromExpression">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromExpression (System.CodeDom.CodeExpression expression, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromExpression(class System.CodeDom.CodeExpression expression, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromExpression (expression As CodeExpression, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromExpression(System::CodeDom::CodeExpression ^ expression, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCodeFromExpression : System.CodeDom.CodeExpression * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit&#xA;override this.GenerateCodeFromExpression : System.CodeDom.CodeExpression * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit" Usage="codeDomProvider.GenerateCodeFromExpression (expression, writer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.CodeDom.CodeExpression" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="writer" Type="System.IO.TextWriter" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="expression">Ein <see cref="T:System.CodeDom.CodeExpression" />-Objekt, dass den Ausdruck angibt, für den Code generiert werden soll.</param>
        <param name="writer">Der <see cref="T:System.IO.TextWriter" />, an den der Ausgabecode gesendet wird.</param>
        <param name="options">Ein <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />, das die Optionen angibt, die für das Generieren von Code verwendet werden sollen.</param>
        <summary>Generiert Code für den angegebenen CodeDOM-Ausdruck (Code Document Object Model) und sendet diesen mit den angegebenen Optionen an den angegebenen Textwriter.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Diese Methode wird in der .NET Framework-Versionen 1.0 und 1.1 von bereitgestellt der <xref:System.CodeDom.Compiler.ICodeGenerator> -Implementierung, die von zurückgegeben wird das <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> -Methode des Anbieters. In Version 2.0 kann diese Methode direkt auf Code-Anbieters aufgerufen werden, auch wenn sie nicht vom Codeanbieter überschrieben wird. Wenn der Standardanbieter nicht mit dieser Methode überschreibt die <xref:System.CodeDom.Compiler.ICodeGenerator> -Implementierung von der Basisklasse aufgerufen wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
        <block subset="none" type="overrides"><para>Wenn Sie diese Methode überschreiben, müssen Sie nicht die entsprechende Methode der Basisklasse aufrufen. Die Methode der Basisklasse wird ein Generator erstellt, in der abgeleiteten Klasse, die mithilfe der veralteten <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> Methode für die Kompatibilität mit bereits vorhandenen Anbieter, die Code-Generatoren zu verwenden. Die Methode der Basisklasse ruft dann die entsprechende Methode der <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> Implementierung, die diese Funktion auszuführen. Sie erhalten eine <see cref="T:System.NotImplementedException" /> Wenn Sie die Methode der Basisklasse von einem Codeanbieter aufrufen, die einen Code-Generator nicht verwendet.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromMember">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromMember (System.CodeDom.CodeTypeMember member, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromMember(class System.CodeDom.CodeTypeMember member, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromMember (member As CodeTypeMember, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromMember(System::CodeDom::CodeTypeMember ^ member, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCodeFromMember : System.CodeDom.CodeTypeMember * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit&#xA;override this.GenerateCodeFromMember : System.CodeDom.CodeTypeMember * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit" Usage="codeDomProvider.GenerateCodeFromMember (member, writer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.CodeDom.CodeTypeMember" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="writer" Type="System.IO.TextWriter" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="member">Ein <see cref="T:System.CodeDom.CodeTypeMember" />, der den Member angibt, für den Code generiert werden soll.</param>
        <param name="writer">Der <see cref="T:System.IO.TextWriter" />, an den der Ausgabecode gesendet wird.</param>
        <param name="options">Ein <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />, das die Optionen angibt, die für das Generieren von Code verwendet werden sollen.</param>
        <summary>Generiert Code für die angegebene CodeDOM-Memberdeklaration (Code Document Object Model) und sendet diesen mit den angegebenen Optionen an den angegebenen Textwriter.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementierung der Basisklasse löst eine <xref:System.NotImplementedException>. Finden Sie unter <xref:Microsoft.CSharp.CSharpCodeProvider.GenerateCodeFromMember%2A?displayProperty=nameWithType> Dokumentation, die eine Implementierung dieser Methode beschreibt.  
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt die Verwendung von der <xref:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember%2A> Methode von implementiert die <xref:Microsoft.CSharp.CSharpCodeProvider> und <xref:Microsoft.VisualBasic.VBCodeProvider> Klassen.  
  
 [!code-csharp[CodeDom_GenerateCodeFromMember#1](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_GenerateCodeFromMember/cs/program.cs#1)]
 [!code-vb[CodeDom_GenerateCodeFromMember#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_GenerateCodeFromMember/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Diese Methode wird in einer abgeleiteten Klasse nicht überschrieben.</exception>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeTypeMember" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromNamespace">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromNamespace (System.CodeDom.CodeNamespace codeNamespace, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromNamespace(class System.CodeDom.CodeNamespace codeNamespace, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromNamespace(System::CodeDom::CodeNamespace ^ codeNamespace, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCodeFromNamespace : System.CodeDom.CodeNamespace * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit&#xA;override this.GenerateCodeFromNamespace : System.CodeDom.CodeNamespace * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit" Usage="codeDomProvider.GenerateCodeFromNamespace (codeNamespace, writer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codeNamespace" Type="System.CodeDom.CodeNamespace" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="writer" Type="System.IO.TextWriter" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="codeNamespace">Ein <see cref="T:System.CodeDom.CodeNamespace" />-Objekt, das den Namespace angibt, für den Code generiert werden soll.</param>
        <param name="writer">Der <see cref="T:System.IO.TextWriter" />, an den der Ausgabecode gesendet wird.</param>
        <param name="options">Ein <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />, das die Optionen angibt, die für das Generieren von Code verwendet werden sollen.</param>
        <summary>Generiert Code für den angegebenen CodeDOM-Namespace (Code Document Object Model) und sendet diesen mit den angegebenen Optionen an den angegebenen Textwriter.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Diese Methode wird in der .NET Framework-Versionen 1.0 und 1.1 von bereitgestellt der <xref:System.CodeDom.Compiler.ICodeGenerator> -Implementierung, die von zurückgegeben wird das <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> -Methode des Anbieters. In Version 2.0 kann diese Methode direkt auf Code-Anbieters aufgerufen werden, auch wenn sie nicht vom Codeanbieter überschrieben wird. Wenn der Standardanbieter nicht mit dieser Methode überschreibt die <xref:System.CodeDom.Compiler.ICodeGenerator> -Implementierung von der Basisklasse aufgerufen wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
        <block subset="none" type="overrides"><para>Wenn Sie diese Methode überschreiben, müssen Sie nicht die entsprechende Methode der Basisklasse aufrufen. Die Methode der Basisklasse wird ein Generator erstellt, in der abgeleiteten Klasse, die mithilfe der veralteten <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> Methode für die Kompatibilität mit bereits vorhandenen Anbieter, die Code-Generatoren zu verwenden. Die Methode der Basisklasse ruft dann die entsprechende Methode der <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> Implementierung, die diese Funktion auszuführen. Sie erhalten eine <see cref="T:System.NotImplementedException" /> Wenn Sie die Methode der Basisklasse von einem Codeanbieter aufrufen, die einen Code-Generator nicht verwendet.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeNamespace" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromStatement">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromStatement (System.CodeDom.CodeStatement statement, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromStatement(class System.CodeDom.CodeStatement statement, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromStatement (statement As CodeStatement, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromStatement(System::CodeDom::CodeStatement ^ statement, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCodeFromStatement : System.CodeDom.CodeStatement * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit&#xA;override this.GenerateCodeFromStatement : System.CodeDom.CodeStatement * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit" Usage="codeDomProvider.GenerateCodeFromStatement (statement, writer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="statement" Type="System.CodeDom.CodeStatement" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="writer" Type="System.IO.TextWriter" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="statement">Eine <see cref="T:System.CodeDom.CodeStatement" />, die die CodeDOM-Elemente enthält, für die Code generiert werden soll.</param>
        <param name="writer">Der <see cref="T:System.IO.TextWriter" />, an den der Ausgabecode gesendet wird.</param>
        <param name="options">Ein <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />, das die Optionen angibt, die für das Generieren von Code verwendet werden sollen.</param>
        <summary>Generiert Code für die angegebene CodeDOM-Anweisung (Code Document Object Model) und sendet diesen mit den angegebenen Optionen an den angegebenen Textwriter.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Diese Methode wird in der .NET Framework-Versionen 1.0 und 1.1 von bereitgestellt der <xref:System.CodeDom.Compiler.ICodeGenerator> -Implementierung, die von zurückgegeben wird das <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> -Methode des Anbieters. In Version 2.0 kann diese Methode direkt auf Code-Anbieters aufgerufen werden, auch wenn sie nicht vom Codeanbieter überschrieben wird. Wenn der Standardanbieter nicht mit dieser Methode überschreibt die <xref:System.CodeDom.Compiler.ICodeGenerator> -Implementierung von der Basisklasse aufgerufen wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
        <block subset="none" type="overrides"><para>Wenn Sie diese Methode überschreiben, müssen Sie nicht die entsprechende Methode der Basisklasse aufrufen. Die Methode der Basisklasse wird ein Generator erstellt, in der abgeleiteten Klasse, die mithilfe der veralteten <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> Methode für die Kompatibilität mit bereits vorhandenen Anbieter, die Code-Generatoren zu verwenden. Die Methode der Basisklasse ruft dann die entsprechende Methode der <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> Implementierung, die diese Funktion auszuführen. Sie erhalten eine <see cref="T:System.NotImplementedException" /> Wenn Sie die Methode der Basisklasse von einem Codeanbieter aufrufen, die einen Code-Generator nicht verwendet.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeStatement" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromType">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromType (System.CodeDom.CodeTypeDeclaration codeType, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromType(class System.CodeDom.CodeTypeDeclaration codeType, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromType (codeType As CodeTypeDeclaration, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromType(System::CodeDom::CodeTypeDeclaration ^ codeType, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCodeFromType : System.CodeDom.CodeTypeDeclaration * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit&#xA;override this.GenerateCodeFromType : System.CodeDom.CodeTypeDeclaration * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit" Usage="codeDomProvider.GenerateCodeFromType (codeType, writer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codeType" Type="System.CodeDom.CodeTypeDeclaration" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="writer" Type="System.IO.TextWriter" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="codeType">Eine <see cref="T:System.CodeDom.CodeTypeDeclaration" />, die den Typ angibt, für den Code generiert werden soll.</param>
        <param name="writer">Der <see cref="T:System.IO.TextWriter" />, an den der Ausgabecode gesendet wird.</param>
        <param name="options">Ein <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />, das die Optionen angibt, die für das Generieren von Code verwendet werden sollen.</param>
        <summary>Generiert Code für die angegebene CodeDOM-Typdeklaration (Code Document Object Model) und sendet diesen mit den angegebenen Optionen an den angegebenen Textwriter.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Diese Methode wird in der .NET Framework-Versionen 1.0 und 1.1 von bereitgestellt der <xref:System.CodeDom.Compiler.ICodeGenerator> -Implementierung, die von zurückgegeben wird das <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> -Methode des Anbieters. In Version 2.0 kann diese Methode direkt auf Code-Anbieters aufgerufen werden, auch wenn sie nicht vom Codeanbieter überschrieben wird. Wenn der Standardanbieter nicht mit dieser Methode überschreibt die <xref:System.CodeDom.Compiler.ICodeGenerator> -Implementierung von der Basisklasse aufgerufen wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
        <block subset="none" type="overrides"><para>Wenn Sie diese Methode überschreiben, müssen Sie nicht die entsprechende Methode der Basisklasse aufrufen. Die Methode der Basisklasse wird ein Generator erstellt, in der abgeleiteten Klasse, die mithilfe der veralteten <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> Methode für die Kompatibilität mit bereits vorhandenen Anbieter, die Code-Generatoren zu verwenden. Die Methode der Basisklasse ruft dann die entsprechende Methode der <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> Implementierung, die diese Funktion auszuführen. Sie erhalten eine <see cref="T:System.NotImplementedException" /> Wenn Sie die Methode der Basisklasse von einem Codeanbieter aufrufen, die einen Code-Generator nicht verwendet.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GetAllCompilerInfo">
      <MemberSignature Language="C#" Value="public static System.CodeDom.Compiler.CompilerInfo[] GetAllCompilerInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.Compiler.CompilerInfo[] GetAllCompilerInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAllCompilerInfo () As CompilerInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::CodeDom::Compiler::CompilerInfo ^&gt; ^ GetAllCompilerInfo();" />
      <MemberSignature Language="F#" Value="static member GetAllCompilerInfo : unit -&gt; System.CodeDom.Compiler.CompilerInfo[]" Usage="System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt den Sprachanbieter und die Compilerkonfigurationseinstellungen für diesen Computer zurück.</summary>
        <returns>Ein Array vom Typ <see cref="T:System.CodeDom.Compiler.CompilerInfo" />, das die Einstellungen aller konfigurierten <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Implementierungen darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A> Methode, um die spracheinstellungen für die Anbieter auf einem Computer aufzulisten.  
  
> [!NOTE]
>  In der [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)], die Language-Standardanbieter vom .NET Framework sind nicht angegeben, der [ &lt;system.codedom&gt; Element](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) Compilerkonfiguration und kann nicht entfernt werden, also das Methode gibt Informationen zu den Standardanbieter und in der Konfigurationsdatei angegebenen zurück.  
  
   
  
## Examples  
 Das folgende Codebeispiel listet die Language-Anbieter auf dem Computer und zeigt die Konfigurations- und Compiler-Einstellungen für jeden Anbieter. Dieses Codebeispiel ist Teil eines umfangreicheren Beispiels für die <xref:System.CodeDom.Compiler.CompilerInfo> Klasse.  
  
 [!code-cpp[CodeDom_CompilerInfo#8](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#8)]
 [!code-csharp[CodeDom_CompilerInfo#8](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#8)]
 [!code-vb[CodeDom_CompilerInfo#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">für volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer. Dieser Member kann von nur teilweise vertrauenswürdigem Code nicht verwendet werden.</permission>
        <altmember cref="T:System.CodeDom.Compiler.CompilerInfo" />
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/compiler/index.md">Schema für Compiler- und Sprachanbietereinstellungen</related>
      </Docs>
    </Member>
    <Member MemberName="GetCompilerInfo">
      <MemberSignature Language="C#" Value="public static System.CodeDom.Compiler.CompilerInfo GetCompilerInfo (string language);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.Compiler.CompilerInfo GetCompilerInfo(string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCompilerInfo (language As String) As CompilerInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::Compiler::CompilerInfo ^ GetCompilerInfo(System::String ^ language);" />
      <MemberSignature Language="F#" Value="static member GetCompilerInfo : string -&gt; System.CodeDom.Compiler.CompilerInfo" Usage="System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo language" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="language" Type="System.String" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="language">Der Name einer Sprache.</param>
        <summary>Gibt die Sprachanbieter- und Compilerkonfigurationseinstellungen für die angegebene Sprache zurück.</summary>
        <returns>Ein mit Einstellungen der konfigurierten <see cref="T:System.CodeDom.Compiler.CompilerInfo" />-Implementierung aufgefülltes <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die [ &lt;system.codedom&gt; Element](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) in der Computerkonfiguration-Datei enthält Konfigurationseinstellungen für die Sprache und compilerkonfigurationseinstellungen für die einzelnen <xref:System.CodeDom.Compiler.CodeDomProvider> Implementierung auf dem Computer. Informationen zu Konfigurationsdateien finden Sie im Abschnitt Computerkonfigurationsdateien in [Konfigurieren von Apps](~/docs/framework/configure-apps/index.md). Die <xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A> sucht die Methode jedes Konfigurationselement für Anbieter für den angegebenen Sprachnamen. Das zurückgegebene <xref:System.CodeDom.Compiler.CompilerInfo> enthält Instanz die konfigurierten spracheinstellungen und compilerkonfigurationseinstellungen.  
  
 Die <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A> Methode überprüft, ob mindestens ein Anbieter-Implementierung eine bestimmte Sprache unterstützt. Sie können überprüfen, ob eine Sprache mit <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A> vor der Übergabe an <xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A>. Dies verhindert, dass Auslösen einer <xref:System.Configuration.ConfigurationException?displayProperty=nameWithType> beim Zugriff auf die <xref:System.CodeDom.Compiler.CompilerInfo> -Instanz für einen nicht unterstützten Sprachnamen.  
  
 Wenn mehr als eine Implementierung eines Anbieters, für den Namen Eingabesprache konfiguriert ist <xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A> gibt die Einstellungen aus den letzten übereinstimmenden Anbieter-Konfigurationselement.  
  
 Language-Namen wird die Groß-/Kleinschreibung.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird bestimmt die <xref:System.CodeDom.Compiler.CodeDomProvider> Implementierung für die Eingabesprache und zeigt die konfigurierten Einstellungen für den Sprachanbieter. Dieses Codebeispiel ist Teil eines umfangreicheren Beispiels für die <xref:System.CodeDom.Compiler.CompilerInfo> Klasse.  
  
 [!code-cpp[CodeDom_CompilerInfo#6](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#6)]
 [!code-csharp[CodeDom_CompilerInfo#6](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#6)]
 [!code-vb[CodeDom_CompilerInfo#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationException"><paramref name="language" /> verfügt auf diesem Computer über keinen konfigurierten Anbieter.</exception>
        <exception cref="T:System.Configuration.ConfigurationErrorsException"><paramref name="language" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.Security.SecurityException">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">für volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer. Dieser Member kann von nur teilweise vertrauenswürdigem Code nicht verwendet werden.</permission>
        <altmember cref="T:System.CodeDom.Compiler.CompilerInfo" />
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)" />
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/compiler/index.md">Schema für Compiler- und Sprachanbietereinstellungen</related>
      </Docs>
    </Member>
    <Member MemberName="GetConverter">
      <MemberSignature Language="C#" Value="public virtual System.ComponentModel.TypeConverter GetConverter (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ComponentModel.TypeConverter GetConverter(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GetConverter(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::ComponentModel::TypeConverter ^ GetConverter(Type ^ type);" />
      <MemberSignature Language="F#" Value="abstract member GetConverter : Type -&gt; System.ComponentModel.TypeConverter&#xA;override this.GetConverter : Type -&gt; System.ComponentModel.TypeConverter" Usage="codeDomProvider.GetConverter type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.TypeConverter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">Der Objekttyp, für den ein Typkonverter abgerufen werden soll.</param>
        <summary>Ruft einen <see cref="T:System.ComponentModel.TypeConverter" /> für den angegebenen Datentyp ab.</summary>
        <returns>Ein <see cref="T:System.ComponentModel.TypeConverter" /> für den angegebenen Typ oder <see langword="null" />, wenn für den angegebenen Typ kein <see cref="T:System.ComponentModel.TypeConverter" /> gefunden werden kann.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine abgeleitete Klasse kann diese Methode, um bestimmte Arten von Typkonvertern für bestimmte Datentypen bieten überschreiben.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.TypeConverter" />
      </Docs>
    </Member>
    <Member MemberName="GetLanguageFromExtension">
      <MemberSignature Language="C#" Value="public static string GetLanguageFromExtension (string extension);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetLanguageFromExtension(string extension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetLanguageFromExtension (extension As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetLanguageFromExtension(System::String ^ extension);" />
      <MemberSignature Language="F#" Value="static member GetLanguageFromExtension : string -&gt; string" Usage="System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension extension" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extension" Type="System.String" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="extension">Eine Dateinamenerweiterung.</param>
        <summary>Gibt, wie im <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Compilerkonfigurationsabschnitt konfiguriert, einen der angegebenen Dateinamenerweiterung zugeordneten Sprachnamen zurück.</summary>
        <returns>Ein der Dateinamenerweiterung zugeordneter Sprachname, wie in den <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Compilerkonfigurationseinstellungen konfiguriert.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die [ &lt;system.codedom&gt; Element](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) in der Computerkonfiguration-Datei (Machine.config) enthält Konfigurationseinstellungen für die Sprache und compilerkonfigurationseinstellungen für die einzelnen <xref:System.CodeDom.Compiler.CodeDomProvider> -Implementierung auf die Computer, auf. Die <xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A> sucht die Methode jeden Anbieter-Konfigurationselement für die angegebene Dateinamenerweiterung.  
  
 Die <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A> Methode überprüft, ob mindestens ein Anbieter-Implementierung eine bestimmten Dateierweiterung unterstützt. Sie können überprüfen, ob eine Datei namens Erweiterung mit <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A> vor der Übergabe an <xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A>. Dies verhindert, dass <xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A> aus Auslösen einer <xref:System.Configuration.ConfigurationException?displayProperty=nameWithType> für eine nicht unterstützte Dateierweiterung.  
  
 Wenn eine anbieterimplementierung die Eingabe Dateinamenerweiterung unterstützt ein, und es mehrere unterstützte Sprachen für diesen Anbieter konfiguriert sind, klicken Sie dann gibt <xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A> gibt den Namen der ersten Sprache für den ausgewählten Anbieter. Wenn mehr als eine Implementierung eines Anbieters, für die Eingabe Dateinamenerweiterung konfiguriert ist <xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A> gibt der Name der Sprache aus dem letzten übereinstimmenden Anbieter Konfigurationselement zurück.  
  
 Sprachennamen und -Erweiterungen werden Groß-/Kleinschreibung.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird bestimmt die <xref:System.CodeDom.Compiler.CodeDomProvider> Implementierung für eine Eingabe Dateinamenerweiterung und zeigt die konfigurierten Einstellungen für den Sprachanbieter. Dieses Codebeispiel ist Teil eines umfangreicheren Beispiels für die <xref:System.CodeDom.Compiler.CompilerInfo> Klasse.  
  
 [!code-cpp[CodeDom_CompilerInfo#5](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#5)]
 [!code-csharp[CodeDom_CompilerInfo#5](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#5)]
 [!code-vb[CodeDom_CompilerInfo#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationException"><paramref name="extension" /> verfügt auf diesem Computer über keinen konfigurierten Sprachanbieter.</exception>
        <exception cref="T:System.Configuration.ConfigurationErrorsException"><paramref name="extension" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.Security.SecurityException">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">für volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer. Dieser Member kann von nur teilweise vertrauenswürdigem Code nicht verwendet werden.</permission>
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)" />
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)" />
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/compiler/index.md">Schema für Compiler- und Sprachanbietereinstellungen</related>
      </Docs>
    </Member>
    <Member MemberName="GetTypeOutput">
      <MemberSignature Language="C#" Value="public virtual string GetTypeOutput (System.CodeDom.CodeTypeReference type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetTypeOutput(class System.CodeDom.CodeTypeReference type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTypeOutput (type As CodeTypeReference) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetTypeOutput(System::CodeDom::CodeTypeReference ^ type);" />
      <MemberSignature Language="F#" Value="abstract member GetTypeOutput : System.CodeDom.CodeTypeReference -&gt; string&#xA;override this.GetTypeOutput : System.CodeDom.CodeTypeReference -&gt; string" Usage="codeDomProvider.GetTypeOutput type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.CodeDom.CodeTypeReference" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="type">Eine <see cref="T:System.CodeDom.CodeTypeReference" />, die den zurückzugebenden Typ angibt.</param>
        <summary>Ruft den durch die angegebene <see cref="T:System.CodeDom.CodeTypeReference" /> angegebenen Typ ab.</summary>
        <returns>Eine Textdarstellung des angegebenen Typs, der für die Sprache formatiert ist, in der Code von diesem Codegenerator generiert wird. In Visual Basic wird z. B. beim Übergeben eines <see cref="T:System.CodeDom.CodeTypeReference" /> für den <see cref="T:System.Int32" />-Typ "Integer" zurückgegeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Diese Methode wird in der .NET Framework-Versionen 1.0 und 1.1 von bereitgestellt der <xref:System.CodeDom.Compiler.ICodeGenerator> -Implementierung, die von zurückgegeben wird das <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> -Methode des Anbieters. In Version 2.0 kann diese Methode direkt auf Code-Anbieters aufgerufen werden, auch wenn sie nicht vom Codeanbieter überschrieben wird. Wenn der Standardanbieter nicht mit dieser Methode überschreibt die <xref:System.CodeDom.Compiler.ICodeGenerator> -Implementierung von der Basisklasse aufgerufen wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
        <block subset="none" type="overrides"><para>Wenn Sie diese Methode überschreiben, müssen Sie nicht die entsprechende Methode der Basisklasse aufrufen. Die Methode der Basisklasse wird ein Generator erstellt, in der abgeleiteten Klasse, die mithilfe der veralteten <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> Methode für die Kompatibilität mit bereits vorhandenen Anbieter, die Code-Generatoren zu verwenden. Die Methode der Basisklasse ruft dann die entsprechende Methode der <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> Implementierung, die diese Funktion auszuführen. Sie erhalten eine <see cref="T:System.NotImplementedException" /> Wenn Sie die Methode der Basisklasse von einem Codeanbieter aufrufen, die einen Code-Generator nicht verwendet.</para></block>
      </Docs>
    </Member>
    <Member MemberName="IsDefinedExtension">
      <MemberSignature Language="C#" Value="public static bool IsDefinedExtension (string extension);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefinedExtension(string extension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDefinedExtension (extension As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDefinedExtension(System::String ^ extension);" />
      <MemberSignature Language="F#" Value="static member IsDefinedExtension : string -&gt; bool" Usage="System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension extension" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extension" Type="System.String" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="extension">Eine Dateinamenerweiterung.</param>
        <summary>Testet, ob eine Dateinamenerweiterung über eine ihr zugeordnete, auf dem Computer konfigurierte <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Implementierung verfügt.</summary>
        <returns><see langword="true" />, wenn für die angegebene Dateinamenerweiterung eine <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Implementierung konfiguriert ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die [ &lt;system.codedom&gt; Element](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) in der Computerkonfiguration-Datei (Machine.config) enthält Konfigurationseinstellungen für die Sprache und compilerkonfigurationseinstellungen für die einzelnen <xref:System.CodeDom.Compiler.CodeDomProvider> -Implementierung auf die Computer, auf. Die <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A> sucht die Methode die anbieterkonfigurationselementen für die angegebene Dateinamenerweiterung.  
  
 Dateinamenerweiterungen werden Groß-/Kleinschreibung.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird bestimmt die <xref:System.CodeDom.Compiler.CodeDomProvider> Implementierung für eine Eingabe Dateinamenerweiterung und zeigt die konfigurierten Einstellungen für den Sprachanbieter. Dieses Codebeispiel ist Teil eines umfangreicheren Beispiels für die <xref:System.CodeDom.Compiler.CompilerInfo> Klasse.  
  
 [!code-cpp[CodeDom_CompilerInfo#5](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#5)]
 [!code-csharp[CodeDom_CompilerInfo#5](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#5)]
 [!code-vb[CodeDom_CompilerInfo#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="extension" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.Security.SecurityException">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">für volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer. Dieser Member kann von nur teilweise vertrauenswürdigem Code nicht verwendet werden.</permission>
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)" />
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)" />
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/compiler/index.md">Schema für Compiler- und Sprachanbietereinstellungen</related>
      </Docs>
    </Member>
    <Member MemberName="IsDefinedLanguage">
      <MemberSignature Language="C#" Value="public static bool IsDefinedLanguage (string language);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefinedLanguage(string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDefinedLanguage (language As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDefinedLanguage(System::String ^ language);" />
      <MemberSignature Language="F#" Value="static member IsDefinedLanguage : string -&gt; bool" Usage="System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage language" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="language" Type="System.String" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="language">Der Sprachname.</param>
        <summary>Testet, ob eine Sprache über eine auf dem Computer konfigurierte <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Implementierung verfügt.</summary>
        <returns><see langword="true" />, wenn für die angegebene Sprache eine <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Implementierung konfiguriert ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die [ &lt;system.codedom&gt; Element](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) in der Computerkonfiguration-Datei (Machine.config) enthält Konfigurationseinstellungen für die Sprache und compilerkonfigurationseinstellungen für die einzelnen <xref:System.CodeDom.Compiler.CodeDomProvider> -Implementierung auf die Computer, auf. Die <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A> sucht die Methode die anbieterkonfigurationselementen für den angegebenen Sprachnamen.  
  
 Language-Namen wird die Groß-/Kleinschreibung.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird bestimmt die <xref:System.CodeDom.Compiler.CodeDomProvider> Implementierung für die Eingabesprache und zeigt die konfigurierten Einstellungen für den Sprachanbieter. Dieses Codebeispiel ist Teil eines umfangreicheren Beispiels für die <xref:System.CodeDom.Compiler.CompilerInfo> Klasse.  
  
 [!code-cpp[CodeDom_CompilerInfo#6](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#6)]
 [!code-csharp[CodeDom_CompilerInfo#6](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#6)]
 [!code-vb[CodeDom_CompilerInfo#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="language" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.Security.SecurityException">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">für volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer. Dieser Member kann von nur teilweise vertrauenswürdigem Code nicht verwendet werden.</permission>
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)" />
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/compiler/index.md">Schema für Compiler- und Sprachanbietereinstellungen</related>
      </Docs>
    </Member>
    <Member MemberName="IsValidIdentifier">
      <MemberSignature Language="C#" Value="public virtual bool IsValidIdentifier (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsValidIdentifier(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsValidIdentifier (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsValidIdentifier(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member IsValidIdentifier : string -&gt; bool&#xA;override this.IsValidIdentifier : string -&gt; bool" Usage="codeDomProvider.IsValidIdentifier value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value">Der Wert, der als gültiger Bezeichner validiert werden soll.</param>
        <summary>Gibt einen Wert zurück, der angibt, ob der angegebene Wert ein gültiger Bezeichner für die aktuelle Sprache ist.</summary>
        <returns><see langword="true" />, wenn der <paramref name="value" />-Parameter ein gültiger Bezeichner ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode überprüft, ob ein Bezeichner gültig ist. Die <xref:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier%2A> Methode ist anbieterspezifisch. Bezeichner, die für einen Anbieter gelten möglicherweise nicht gültig für andere Anbieter. Wenn `value` enthält Zeichen außerhalb des ASCII-Zeichenbereichs, überprüfen Sie den Bezeichner für alle Sprachen, die zum Kompilieren des Codes verwendet werden können.  
  
> [!NOTE]
>  Diese Methode wird in der .NET Framework-Versionen 1.0 und 1.1 von bereitgestellt der <xref:System.CodeDom.Compiler.ICodeGenerator> -Implementierung, die von zurückgegeben wird das <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> -Methode des Anbieters. In Version 2.0 kann diese Methode direkt auf Code-Anbieters aufgerufen werden, auch wenn sie nicht vom Codeanbieter überschrieben wird. Wenn der Standardanbieter nicht mit dieser Methode überschreibt die <xref:System.CodeDom.Compiler.ICodeGenerator> -Implementierung von der Basisklasse aufgerufen wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
        <block subset="none" type="overrides"><para>Beim Überschreiben von <see cref="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)" /> entwerfen Sie in einer abgeleiteten Klasse die Methode zurückgibt <see langword="true" /> nur, wenn der Wert der Regeln der Sprache entspricht und nicht in mit einem Schlüsselwort Konflikt.  
  
Wenn Sie diese Methode überschreiben, müssen Sie nicht die entsprechende Methode der Basisklasse aufrufen. Die Methode der Basisklasse wird ein Generator erstellt, in der abgeleiteten Klasse, die mithilfe der veralteten <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> Methode für die Kompatibilität mit bereits vorhandenen Anbieter, die Code-Generatoren zu verwenden. Die Methode der Basisklasse ruft dann die entsprechende Methode der <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> Implementierung, die diese Funktion auszuführen. Sie erhalten eine <see cref="T:System.NotImplementedException" /> Wenn Sie die Methode der Basisklasse von einem Codeanbieter aufrufen, die einen Code-Generator nicht verwendet.</para></block>
      </Docs>
    </Member>
    <Member MemberName="LanguageOptions">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.LanguageOptions LanguageOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.CodeDom.Compiler.LanguageOptions LanguageOptions" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CodeDomProvider.LanguageOptions" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property LanguageOptions As LanguageOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::CodeDom::Compiler::LanguageOptions LanguageOptions { System::CodeDom::Compiler::LanguageOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.LanguageOptions : System.CodeDom.Compiler.LanguageOptions" Usage="System.CodeDom.Compiler.CodeDomProvider.LanguageOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.LanguageOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Bezeichner für Sprachfeatures ab.</summary>
        <value><see cref="T:System.CodeDom.Compiler.LanguageOptions" />, die bestimmte Features der Sprache angeben.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.CodeCompileUnit Parse (System.IO.TextReader codeStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.CodeCompileUnit Parse(class System.IO.TextReader codeStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Parse (codeStream As TextReader) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::CodeCompileUnit ^ Parse(System::IO::TextReader ^ codeStream);" />
      <MemberSignature Language="F#" Value="abstract member Parse : System.IO.TextReader -&gt; System.CodeDom.CodeCompileUnit&#xA;override this.Parse : System.IO.TextReader -&gt; System.CodeDom.CodeCompileUnit" Usage="codeDomProvider.Parse codeStream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codeStream" Type="System.IO.TextReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="codeStream">Ein <see cref="T:System.IO.TextReader" />-Objekt, das zum Lesen des zu analysierenden Codes verwendet wird.</param>
        <summary>Kompiliert den aus dem angegebenen Textstream gelesenen Code in einer <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
        <returns>Eine <see cref="T:System.CodeDom.CodeCompileUnit" />, die eine Darstellung des analysierten Code enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Diese Methode wird in der .NET Framework-Versionen 1.0 und 1.1 von bereitgestellt der <xref:System.CodeDom.Compiler.ICodeParser> -Implementierung, die von zurückgegeben wird das <xref:System.CodeDom.Compiler.CodeDomProvider.CreateParser%2A> -Methode des Anbieters. In Version 2.0 kann diese Methode direkt auf Code-Anbieters aufgerufen werden, auch wenn sie nicht vom Codeanbieter überschrieben wird. Wenn der Standardanbieter nicht mit dieser Methode überschreibt die <xref:System.CodeDom.Compiler.ICodeParser> -Implementierung von der Basisklasse aufgerufen wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
        <block subset="none" type="overrides"><para>Wenn Sie diese Methode überschreiben, müssen Sie nicht die entsprechende Methode der Basisklasse aufrufen. Die Basisklasse-Methode erstellt einen Parser in der abgeleiteten Klasse, die mithilfe der veralteten <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser" /> Methode für die Kompatibilität mit bereits vorhandenen Anbieter, die Codeparser zu verwenden. Die Methode der Basisklasse ruft dann die entsprechende Methode der <see cref="T:System.CodeDom.Compiler.ICodeParser" /> Implementierung, die diese Funktion auszuführen. Sie erhalten eine <see cref="T:System.NotImplementedException" /> Wenn Sie die Methode der Basisklasse von einem Codeanbieter aufrufen, die einen Codeparser nicht verwendet.</para></block>
        <altmember cref="T:System.CodeDom.CodeCompileUnit" />
        <altmember cref="T:System.IO.TextReader" />
      </Docs>
    </Member>
    <Member MemberName="Supports">
      <MemberSignature Language="C#" Value="public virtual bool Supports (System.CodeDom.Compiler.GeneratorSupport generatorSupport);" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netcore-2.1;netframework-4.8;dotnet-plat-ext-2.1;netcore-2.2;netcore-3.0;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Supports(valuetype System.CodeDom.Compiler.GeneratorSupport generatorSupport) cil managed" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netcore-2.1;netframework-4.8;dotnet-plat-ext-2.1;netcore-2.2;netcore-3.0;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Supports(System::CodeDom::Compiler::GeneratorSupport generatorSupport);" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netcore-2.1;netframework-4.8;dotnet-plat-ext-2.1;netcore-2.2;netcore-3.0;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0" />
      <MemberSignature Language="C#" Value="public virtual bool Supports (System.CodeDom.Compiler.GeneratorSupport supports);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Supports(valuetype System.CodeDom.Compiler.GeneratorSupport supports) cil managed" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Supports (supports As GeneratorSupport) As Boolean" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Supports(System::CodeDom::Compiler::GeneratorSupport supports);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member Supports : System.CodeDom.Compiler.GeneratorSupport -&gt; bool&#xA;override this.Supports : System.CodeDom.Compiler.GeneratorSupport -&gt; bool" Usage="codeDomProvider.Supports generatorSupport" FrameworkAlternate="netframework-1.1;netcore-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Supports (supports As GeneratorSupport) As Boolean" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member Supports : System.CodeDom.Compiler.GeneratorSupport -&gt; bool&#xA;override this.Supports : System.CodeDom.Compiler.GeneratorSupport -&gt; bool" Usage="codeDomProvider.Supports supports" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)" FrameworkAlternate="xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="generatorSupport" Type="System.CodeDom.Compiler.GeneratorSupport" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="supports" Type="System.CodeDom.Compiler.GeneratorSupport" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="generatorSupport">Ein <see cref="T:System.CodeDom.Compiler.GeneratorSupport" />-Objekt, das den Typ der Unterstützung für die Codegenerierung angibt, der geprüft werden soll.</param>
        <param name="supports">To be added.</param>
        <summary>Gibt einen Wert zurück, der angibt, ob die angegebene Unterstützung für die Codegenerierung verfügbar ist.</summary>
        <returns><see langword="true" />, wenn die angegebene Unterstützung für die Codegenerierung verfügbar ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode kann aufgerufen werden, mit einer Reihe von <xref:System.CodeDom.Compiler.GeneratorSupport> Flags, die gleichzeitig für eine Reihe von Funktionen zu testen, indem Sie einen Satz von Flags der entsprechende Funktion zusammen mit einer Binärdatei verknüpfen `OR` Operator (&#124;).  
  
> [!NOTE]
>  Diese Methode wird in der .NET Framework-Versionen 1.0 und 1.1 von bereitgestellt der <xref:System.CodeDom.Compiler.ICodeGenerator> -Implementierung, die von zurückgegeben wird das <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> -Methode des Anbieters. In Version 2.0 kann diese Methode direkt auf Code-Anbieters aufgerufen werden, auch wenn sie nicht vom Codeanbieter überschrieben wird. Wenn der Standardanbieter nicht mit dieser Methode überschreibt die <xref:System.CodeDom.Compiler.ICodeGenerator> -Implementierung von der Basisklasse aufgerufen wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
        <block subset="none" type="overrides"><para>Wenn Sie diese Methode überschreiben, müssen Sie nicht die entsprechende Methode der Basisklasse aufrufen. Die Methode der Basisklasse wird ein Generator erstellt, in der abgeleiteten Klasse, die mithilfe der veralteten <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> Methode für die Kompatibilität mit bereits vorhandenen Anbieter, die Code-Generatoren zu verwenden. Die Methode der Basisklasse ruft dann die entsprechende Methode der <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> Implementierung, die diese Funktion auszuführen. Sie erhalten eine <see cref="T:System.NotImplementedException" /> Wenn Sie die Methode der Basisklasse von einem Codeanbieter aufrufen, die einen Code-Generator nicht verwendet.</para></block>
        <altmember cref="T:System.CodeDom.Compiler.GeneratorSupport" />
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="ClaimsPrincipalPermission" FullName="System.IdentityModel.Services.ClaimsPrincipalPermission">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="dcac3f06155284f05d1a9975094ead1ced45fd01" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39983462" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ClaimsPrincipalPermission : System.Security.IPermission, System.Security.ISecurityEncodable, System.Security.Permissions.IUnrestrictedPermission" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit ClaimsPrincipalPermission extends System.Object implements class System.Security.IPermission, class System.Security.ISecurityEncodable, class System.Security.Permissions.IUnrestrictedPermission" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ClaimsPrincipalPermission&#xA;Implements IPermission, ISecurityEncodable, IUnrestrictedPermission" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClaimsPrincipalPermission sealed : System::Security::IPermission, System::Security::ISecurityEncodable, System::Security::Permissions::IUnrestrictedPermission" />
  <TypeSignature Language="F#" Value="type ClaimsPrincipalPermission = class&#xA;    interface IPermission&#xA;    interface ISecurityEncodable&#xA;    interface IUnrestrictedPermission" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel.Services</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Security.IPermission</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Security.ISecurityEncodable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Security.Permissions.IUnrestrictedPermission</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Stellt eine Berechtigung dar, die eine <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" />-Implementierung verwendet, mit der bestimmt wird, ob dem aktiven Prinzipal der Zugriff auf eine Ressource gewährt werden sollte. Diese Klasse kann nicht vererbt werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> Klasse bietet die Möglichkeit, führen Sie imperative zugriffsüberprüfungen mithilfe der <xref:System.Security.Claims.ClaimsAuthorizationManager> , die für eine Anwendung konfiguriert ist. Durch Aufrufen der <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> oder die statische <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A> Methode können Sie Schutz auf Ressourcen in den Ausführungspfad des Codes entsprechend die Autorisierungsrichtlinie, die für Ihre anspruchsauthentifizierungs-Manager definierten bereit. Deklarative zugriffsüberprüfungen ausgeführt werden können, mit der <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> Klasse.  
  
> [!IMPORTANT]
>  Die <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> Klasse verwendet den anspruchsautorisierungs-Manager konfiguriert die <xref:System.IdentityModel.Configuration.IdentityConfiguration> , festgelegt ist, unter der <xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration%2A?displayProperty=nameWithType> Eigenschaft. Dies ist in allen Fällen auch in Szenarien, in denen WS-Verbund nicht verwendet wird; z. B. aktive Webdienste (WCF)-Anwendungen und konsolenanwendungen. Sie können den anspruchsautorisierungs-Manager in der Konfiguration oder programmgesteuert festlegen. Um den anspruchsautorisierungs-Manager in einer Konfigurationsdatei anzugeben, legen die [ &lt;"claimsauthorizationmanager"&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md) Element unter einer [ &lt;IdentityConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/identityconfiguration.md) Element und stellen Sie sicher, dass dieser identitätskonfiguration, durch verwiesen wird die [ &lt;FederationConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/federationconfiguration.md) -Element, das von der Laufzeit geladen wird (z. B. durch Festlegen der `identityConfigurationName` Attribut). Um den anspruchsautorisierungs-Manager programmgesteuert festzulegen, geben Sie einen Handler für die <xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfigurationCreated?displayProperty=nameWithType> Ereignis.  
  
 Auf einer Ebene, die Funktionalität von bereitgestellten <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> ist vergleichbar mit der rollenbasierte zugriffsüberprüfungen (RBAC) über bereitgestellt, die <xref:System.Security.Permissions.PrincipalPermission> -Klasse jedoch die <xref:System.Security.Claims.ClaimsAuthorizationManager> Klasse überprüft basierend auf den Ansprüchen, die von den aktiven Prinzipal. Dies ermöglicht wesentlich mehr Granularität als reine RBAC erhältlich ist, in denen viele Berechtigungen unter einer einzigen Rolle in der Regel gesammelt werden. Vielleicht, wichtiger ist, ermöglicht anspruchsbasierte Autorisierung eine bessere Trennung der Unternehmensrichtlinie Logik und die Autorisierung, da Berechtigungen für eine bestimmte Aktion für eine Ressource im Code gefordert werden kann, und Back-End-Richtlinie verwendet werden, kann welche Ansprüche konfigurieren die Darstellung der Entität muss besitzen, um die Anforderung zu erfüllen. Wie Sie RBAC, <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> überprüft, benutzerbasierte, d. h., im Gegensatz zu der Codezugriffssicherheit durch abgeleitete Klassen implementiert die <xref:System.Security.CodeAccessPermission> Klasse, und verwenden Sie einen Stapeldurchlauf, um sicherzustellen, dass alle Aufrufer des Codes eine Berechtigung gewährt wurde, haben <xref:System.IdentityModel.Services.ClaimsPrincipalPermission>führt die Überprüfung nur auf den aktuellen Prinzipal.  
  
 Die statische <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A> Methode prüft den Zugriff für eine angegebene Aktion auf einer angegebenen Ressource. Die Ressource und der Aktion sind Zeichenfolgen, und sind in der Regel URIs. Sie können auch eine Instanz von initialisieren <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> mit einer Aktion und eine Ressource und der Aufruf der <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> Methode. Obwohl der Konstruktor nur eine einzelne Ressource und einer Aktion nimmt <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> Objekten kombiniert werden können, über die <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A> und <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A> Methoden. Eine Berechtigung, erstellt mit diesen Methoden kann mehrere Ressourcen-Aktionspaare enthalten.  
  
 Beide Methoden steuern den Zugriff durch den Aufruf der <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType> Methode von den konfigurierten anspruchsautorisierungs-Manager mit einer <xref:System.Security.Claims.AuthorizationContext> bestehend aus dem aktiven Prinzipal (<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType>), die Ressource und die Aktion. Sie lösen eine <xref:System.Security.SecurityException> Wenn der aktuelle Prinzipal zum Ausführen der Aktion auf die Ressource nicht autorisiert ist, andernfalls die Ausführung erfolgt.  
  
 Im Fall von einem <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> , mehrere Ressourcen-Aktionspaare, enthält die <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType> Methode wird aufgerufen, für die einzelnen von der Ressource / Aktion-Paare in der Berechtigung.  Für den Aufruf von <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> damit dies gelingt, muss für alle von der Ressource / Aktion-Paare in der Berechtigung der aktive Prinzipal autorisiert werden.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, wie zum Schützen einer Ressource mit der <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> -Methode, die <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A> -Methode oder ein <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> Deklaration. In jedem Fall die konfigurierte <xref:System.Security.Claims.ClaimsAuthorizationManager> wird aufgerufen, um den aktuellen Prinzipal für die angegebene Ressource und die Aktion ausgewertet. Wenn der aktuelle Prinzipal für die angegebene Aktion auf die angegebene Ressource nicht autorisiert ist eine <xref:System.Security.SecurityException> ausgelöst wird; andernfalls, Ausführung wird fortgesetzt.  
  
 [!code-csharp[WifCppWithCam#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifcppwithcam/cs/wifcppwithcam/program.cs#1)]  
  
 Das folgende XML zeigt die minimale Konfiguration erforderlich, um eine benutzerdefinierte Ansprüche-Autorisierung verwenden Manager mit der <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> Klasse. Zumindest, deklarieren Sie sowohl die `system.identityModel` und `system.identityModel.services` Abschnitte in der `<configSection>` Element und geben Sie dann Ihre Autorisierungs-Manager in einer [ &lt;"claimsauthorizationmanager"&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)Element in der Standardkonfiguration für die Identität. Dadurch wird sichergestellt, dass Ihre Autorisierungs-Manager aus der Standardkonfiguration für den Verbund verwiesen wird. Alternativ können Sie angeben, den Namen der identitätskonfiguration, unter dem Ihre Autorisierungs-Manager, in angegeben ist, der `identityConfigurationName` Attribut der [ &lt;FederationConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/federationconfiguration.md) Element.  
  
```xml  
<?xml version="1.0" encoding="utf-8" ?>  
<configuration>  
  <configSections>  
    <!-- WIF configuration sections -->  
    <section name="system.identityModel" type="System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
    <section name="system.identityModel.services" type="System.IdentityModel.Services.Configuration.SystemIdentityModelServicesSection, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
  </configSections>  
  
  <startup>  
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5" />  
  </startup>  
  
  <system.identityModel>  
    <identityConfiguration>  
      <claimsAuthorizationManager type ="MyClaimsAuthorizationManager.MyClaimsAuthorizationManager, MyClaimsAuthorizationManager"/>  
    </identityConfiguration>  
  </system.identityModel>  
  
</configuration>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute" />
    <altmember cref="P:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration" />
    <altmember cref="T:System.Security.Claims.ClaimsAuthorizationManager" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClaimsPrincipalPermission (string resource, string action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string resource, string action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (resource As String, action As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ClaimsPrincipalPermission(System::String ^ resource, System::String ^ action);" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.Services.ClaimsPrincipalPermission : string * string -&gt; System.IdentityModel.Services.ClaimsPrincipalPermission" Usage="new System.IdentityModel.Services.ClaimsPrincipalPermission (resource, action)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="resource" Type="System.String" />
        <Parameter Name="action" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">Die Ressource, auf der der Prinzipal autorisiert werden soll.</param>
        <param name="action">Die Aktion, für die der Prinzipal autorisiert werden soll.</param>
        <summary>Erstellt eine neue Instanz der <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> -Objekt initialisiert wird, mit der angegebenen Ressource / Aktion-Paar. Rufen Sie die <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> Methode, um eine zugriffsprüfung durchzuführen.  
  
 Obwohl der Konstruktor nur eine einzelne Ressource und einer Aktion nimmt <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> Objekten kombiniert werden können, über die <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A> und <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A> Methoden. Die Berechtigung, die über diese Methoden erstellt wurden, kann mehrere Ressourcen-Aktionspaare enthalten.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der <paramref name="resource" /> ist <see langword="null" /> oder eine leere Zeichenfolge.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="action" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public static void CheckAccess (string resource, string action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CheckAccess(string resource, string action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CheckAccess (resource As String, action As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CheckAccess(System::String ^ resource, System::String ^ action);" />
      <MemberSignature Language="F#" Value="static member CheckAccess : string * string -&gt; unit" Usage="System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess (resource, action)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2103:ReviewImperativeSecurity", Justification="It is expected that the runtime’s behavior would rely on changing data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resource" Type="System.String" />
        <Parameter Name="action" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">Die Ressource, auf der der Prinzipal autorisiert werden soll.</param>
        <param name="action">Die Aktion, für die der Prinzipal autorisiert werden soll.</param>
        <summary>Überprüft, ob der aktuelle Prinzipal berechtigt ist, um die angegebene Aktion für die angegebene Ressource auszuführen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Prinzipal muss für die angegebene Aktion für die angegebene Ressource autorisiert werden oder die <xref:System.Security.SecurityException> Ausnahme ausgelöst.  
  
 Die <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType> Methode von den konfigurierten anspruchsautorisierungs-Manager wird aufgerufen, mit einer <xref:System.Security.Claims.AuthorizationContext> bestehend aus dem aktiven Prinzipal (<xref:System.Threading.Thread.CurrentPrincipal%2A>), die Ressource und die Aktion.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, wie zum Schützen einer Ressource mit der <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A> Methode. Die konfigurierten anspruchsautorisierungs-Manager wird aufgerufen, um den aktuellen Prinzipal für die angegebene Ressource und die Aktion zu evaluieren. Wenn der aktuelle Prinzipal für die angegebene Aktion auf die angegebene Ressource nicht autorisiert ist eine <xref:System.Security.SecurityException> ausgelöst wird; andernfalls, Ausführung wird fortgesetzt.  
  
 [!code-csharp[WifCppWithCam#2](~/samples/snippets/csharp/VS_Snippets_Misc/wifcppwithcam/cs/wifcppwithcam/program.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Der aktuelle Prinzipal ist nicht von <see cref="T:System.Security.Claims.ClaimsPrincipal" /> zuweisbar.  Oder:  Es ist kein <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /> konfiguriert.</exception>
        <exception cref="T:System.Security.SecurityException">Die Autorisierungsprüfung ist fehlgeschlagen.</exception>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Function Copy () As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::IPermission ^ Copy();" />
      <MemberSignature Language="F#" Value="abstract member Copy : unit -&gt; System.Security.IPermission&#xA;override this.Copy : unit -&gt; System.Security.IPermission" Usage="claimsPrincipalPermission.Copy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2103:ReviewImperativeSecurity", Justification="It is expected that the runtime’s behavior would rely on changing data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt eine Kopie der aktuellen <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />-Instanz zurück.</summary>
        <returns>Eine <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />, die aus der aktuellen Instanz kopiert wurde.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Demand">
      <MemberSignature Language="C#" Value="public void Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand" />
      <MemberSignature Language="VB.NET" Value="Public Sub Demand ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Demand();" />
      <MemberSignature Language="F#" Value="abstract member Demand : unit -&gt; unit&#xA;override this.Demand : unit -&gt; unit" Usage="claimsPrincipalPermission.Demand " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Überprüft, ob der aktuelle Prinzipal für die Ressourcen-Aktionspaare autorisiert ist, die der aktuellen Instanz zugeordnet sind.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der aktuelle Prinzipal muss für alle von dieser Instanz zugeordneten Ressourcen-Aktionspaare autorisiert werden oder die <xref:System.Security.SecurityException> Ausnahme ausgelöst.  
  
 Obwohl der Konstruktor nur eine einzelne Ressource und einer Aktion nimmt <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> Objekten kombiniert werden können, über die <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A> und <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A> Methoden. Die Berechtigung, die über diese Methoden erstellt wurden, kann mehrere Ressourcen-Aktionspaare enthalten.  
  
 Die <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> Methode aufruft der <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType> Methode von den konfigurierten anspruchsautorisierungs-Manager mit einer <xref:System.Security.Claims.AuthorizationContext> bestehend aus dem aktiven Prinzipal (<xref:System.Threading.Thread.CurrentPrincipal%2A>), die Ressource und die Aktion für jede der enthaltenen Ressource / Aktion-Paare in den Berechtigungssatz. Für die <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> erfolgreich ausgeführt werden, kann die aktive Prinzipal autorisiert werden muss, für alle Ressource / Aktion-Paare, die in den Berechtigungssatz enthalten sind.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, wie zum Schützen einer Ressource mit der <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> Methode. Die konfigurierten anspruchsautorisierungs-Manager wird aufgerufen, um den aktuellen Prinzipal für die angegebene Ressource und die Aktion zu evaluieren. Wenn der aktuelle Prinzipal für die angegebene Aktion auf die angegebene Ressource nicht autorisiert ist eine <xref:System.Security.SecurityException> ausgelöst wird; andernfalls, Ausführung wird fortgesetzt.  
  
 [!code-csharp[WifCppWithCam#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifcppwithcam/cs/wifcppwithcam/program.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Der aktuelle Prinzipal ist nicht von <see cref="T:System.Security.Claims.ClaimsPrincipal" /> zuweisbar.  Oder:  Es ist kein <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /> konfiguriert.</exception>
        <exception cref="T:System.Security.SecurityException">Die Autorisierungsprüfung ist fehlgeschlagen.</exception>
      </Docs>
    </Member>
    <Member MemberName="FromXml">
      <MemberSignature Language="C#" Value="public void FromXml (System.Security.SecurityElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FromXml(class System.Security.SecurityElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml(System.Security.SecurityElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FromXml (element As SecurityElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void FromXml(System::Security::SecurityElement ^ element);" />
      <MemberSignature Language="F#" Value="abstract member FromXml : System.Security.SecurityElement -&gt; unit&#xA;override this.FromXml : System.Security.SecurityElement -&gt; unit" Usage="claimsPrincipalPermission.FromXml element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Security.SecurityElement" />
      </Parameters>
      <Docs>
        <param name="element">Die XML-Codierung zur Wiederherstellung der Berechtigung.</param>
        <summary>Erstellt die aktuelle Berechtigung und ihren Zustand aus der angegebenen XML-Codierung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rekonstruiert eine Berechtigung aus der XML-Codierung, die durch einen Aufruf von erstellt die <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml%2A> Methode.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Die Codierung enthält nicht erkannte Elemente oder Attribute oder nicht ordnungsgemäß gebildetes XML.</exception>
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Intersect (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Intersect(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Function Intersect (target As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::IPermission ^ Intersect(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="abstract member Intersect : System.Security.IPermission -&gt; System.Security.IPermission&#xA;override this.Intersect : System.Security.IPermission -&gt; System.Security.IPermission" Usage="claimsPrincipalPermission.Intersect target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">Eine Berechtigung, deren Schnittmenge mit der aktuellen Berechtigung gebildet wird. Muss eine Instanz von <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> sein.</param>
        <summary>Gibt eine neue Berechtigung zurück, die den Kreuzungspunkt der aktuellen und der angegebenen Berechtigung ist.</summary>
        <returns>Eine neue <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />, die die Schnittmenge der aktuellen und der angegeben Berechtigung darstellt, oder <see langword="null" />, wenn <paramref name="target" /> gleich <paramref name="null" /> oder keine Instanz von <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Berechtigung, die zurückgegeben wird hat nur die Ressource / Aktion-Paare, die in der aktuellen Berechtigung und in die angegebene Berechtigung vorhanden waren. Ressource / Aktion-Paare, die nur eine oder andere Berechtigungen vorhanden waren, sind nicht enthalten. Für eine <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> um auf die neue Berechtigung erfolgreich ausgeführt werden, der aktuelle Prinzipal muss nur für die Ressourcen-Aktionspaare autorisiert werden, die für die aktuelle Berechtigung und die angegebene Berechtigung.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSubsetOf">
      <MemberSignature Language="C#" Value="public bool IsSubsetOf (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSubsetOf(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.IsSubsetOf(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsSubsetOf (target As IPermission) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSubsetOf(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="abstract member IsSubsetOf : System.Security.IPermission -&gt; bool&#xA;override this.IsSubsetOf : System.Security.IPermission -&gt; bool" Usage="claimsPrincipalPermission.IsSubsetOf target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">Die Berechtigung, für die geprüft werden soll, ob sie eine Teilmenge einer anderen Berechtigung ist. Muss eine Instanz von <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> sein.</param>
        <summary>Gibt einen Wert zurück, der angibt, ob die aktuelle Berechtigung eine Teilmenge der angegebenen Berechtigung ist.</summary>
        <returns>
          <see langword="true" />, wenn die aktuelle Berechtigung eine Teilmenge der angegebenen Berechtigung darstellt, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die aktuelle Berechtigung ist eine Teilmenge der angegebenen Berechtigung, wenn alle von der Ressource / Aktion-Paare in der aktuellen Berechtigung auch in der angegebenen Berechtigung vorhanden sind. Wenn `target` ist `null` oder ist keine Instanz des <xref:System.IdentityModel.Services.ClaimsPrincipalPermission>, <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.IsSubsetOf%2A> gibt `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnrestricted">
      <MemberSignature Language="C#" Value="public bool IsUnrestricted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsUnrestricted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.IsUnrestricted" />
      <MemberSignature Language="VB.NET" Value="Public Function IsUnrestricted () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsUnrestricted();" />
      <MemberSignature Language="F#" Value="abstract member IsUnrestricted : unit -&gt; bool&#xA;override this.IsUnrestricted : unit -&gt; bool" Usage="claimsPrincipalPermission.IsUnrestricted " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt einen Wert zurück, der angibt, ob die Berechtigung uneingeschränkt ist.</summary>
        <returns>
          <see langword="true" />, wenn die Berechtigung uneingeschränkt ist, andernfalls <see langword="false" />. Gibt immer <see langword="true" /> zurück, was angibt, dass die Berechtigung uneingeschränkt ist.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToXml">
      <MemberSignature Language="C#" Value="public System.Security.SecurityElement ToXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.SecurityElement ToXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml" />
      <MemberSignature Language="VB.NET" Value="Public Function ToXml () As SecurityElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::SecurityElement ^ ToXml();" />
      <MemberSignature Language="F#" Value="abstract member ToXml : unit -&gt; System.Security.SecurityElement&#xA;override this.ToXml : unit -&gt; System.Security.SecurityElement" Usage="claimsPrincipalPermission.ToXml " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.SecurityElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt die XML-codierte Form der aktuellen Berechtigung und ihren Zustand zurück.</summary>
        <returns>Die XML-codierte Form der aktuellen Berechtigung und ihr Zustand.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Prinzipal kann durch Aufrufen von der XML-codierten Form rekonstruiert die <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml%2A> Methode.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Union (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Union(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Union(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Function Union (target As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::IPermission ^ Union(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="abstract member Union : System.Security.IPermission -&gt; System.Security.IPermission&#xA;override this.Union : System.Security.IPermission -&gt; System.Security.IPermission" Usage="claimsPrincipalPermission.Union target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">Eine Berechtigung, die mit der aktuellen Berechtigung kombiniert werden soll. Das Objekt muss vom Typ <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> sein.</param>
        <summary>Gibt eine neue Berechtigung zurück, die die Union der aktuellen und der angegebenen Berechtigung ist. <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />-Objekt, das über alle Ressource/Aktion-Paare verfügt, die in der aktuellen Instanz und in der Zielinstanz vorhanden sind.</summary>
        <returns>Eine neue <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />, die die Union der aktuellen und der angegeben Berechtigung darstellt, oder <see langword="null" />, wenn <paramref name="target" /> gleich <paramref name="null" /> oder keine Instanz von <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Berechtigung, die zurückgegeben wird verfügt über alle Ressource / Aktion-Paare, die in der aktuellen Berechtigung vorhanden sind, und alle Ressource / Aktion-Paare, die die angegebene Berechtigung vorhanden. Für eine <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> um auf die neue Berechtigung erfolgreich ausgeführt werden, muss der aktuelle Prinzipal autorisiert werden für alle Ressource / Aktion-Paare, die in der aktuellen Berechtigung vorhanden und alle Ressource / Aktion-Paare, die in der angegebenen Berechtigung vorhanden waren.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
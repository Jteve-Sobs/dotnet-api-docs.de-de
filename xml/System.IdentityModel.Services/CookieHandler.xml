<Type Name="CookieHandler" FullName="System.IdentityModel.Services.CookieHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d23e5774bf0f999d5f53db9d0abae109f03d3d70" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30420054" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class CookieHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CookieHandler extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Services.CookieHandler" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class CookieHandler" />
  <TypeSignature Language="C++ CLI" Value="public ref class CookieHandler abstract" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel.Services</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt eine abstrakte Basisklasse zum Lesen, Schreiben und Löschen von Sitzungscookies auf einem HTTP-Client bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.IdentityModel.Services.SessionAuthenticationModule> (SAM) verwendet eine Instanz der <xref:System.IdentityModel.Services.CookieHandler> -Klasse zum Lesen, schreiben und löschen Sie die Cookies oder Cookies, die enthalten die <xref:System.IdentityModel.Tokens.SessionSecurityToken> auf dem HTTP-Client. Das Cookie (oder Cookies, in dem Fall, in dem das Sitzungstoken in mehrere Cookies aufgeteilt ist), enthält die Sitzung Token wird als das Sitzungscookie bezeichnet.  
  
 Windows Identity Foundation (WIF) ausgeliefert wird, mit einem Cookie-Handler die aufgeteilte Cookie-Handler aufgerufen, die von implementiert ist die <xref:System.IdentityModel.Services.ChunkedCookieHandler> Klasse. Das aufgeteilte Cookie Handler teilt das Sitzungstoken über eine oder mehrere Cookies entsprechend einer angegebenen Größe. Dies ist zum Erfüllen von größenbeschränkungen von einzelnen Cookies durch viele Browser auferlegt werden.  
  
 Sie können aus ableiten <xref:System.IdentityModel.Services.CookieHandler> Cookie-Handler zu erstellen. Wenn Sie dies tun, müssen Sie überschreiben die <xref:System.IdentityModel.Services.CookieHandler.DeleteCore%2A>, <xref:System.IdentityModel.Services.CookieHandler.ReadCore%2A>, und <xref:System.IdentityModel.Services.CookieHandler.WriteCore%2A> Methoden, um die tatsächlichen Aufgaben löschen, lesen und schreiben das Sitzungscookie auszuführen. Diese Methoden lesen in der Regel das Cookie aus der <xref:System.Web.HttpRequest.Cookies%2A?displayProperty=nameWithType> Auflistung und schreiben oder Löschen von Cookies durch den <xref:System.Web.HttpResponse.Cookies%2A?displayProperty=nameWithType> Auflistung. Die <xref:System.Web.HttpContext> Objekt über die Sie erreichen die Anforderung und Antwort wird als Parameter für jede dieser Methoden bereitgestellt. Zusätzlich zu den erforderlichen Methoden können Sie optional andere virtuelle Methoden Eigenschaften verfügbar gemacht werden, durch Überschreiben der <xref:System.IdentityModel.Services.CookieHandler> Klasse zum Anpassen des Verhaltens von den Handler.  
  
 Mehrere Eigenschaften verfügbar gemacht werden die <xref:System.IdentityModel.Services.CookieHandler> Klasse, die Eigenschaften für das Sitzungscookie und Standardverhalten angeben. Die <xref:System.IdentityModel.Services.CookieHandler.Name%2A>, <xref:System.IdentityModel.Services.CookieHandler.Domain%2A>, und <xref:System.IdentityModel.Services.CookieHandler.Path%2A> Eigenschaften geben Sie den Basisnamen für das Cookie, der Domäne, in denen sie gültig sind, und der Pfad, unter dem sie auf dem Client gespeichert ist. Die <xref:System.IdentityModel.Services.CookieHandler.HideFromClientScript%2A> Eigenschaft gibt an, ob das Cookie für die clientseitige Skripts zugänglich ist. Die <xref:System.IdentityModel.Services.CookieHandler.RequireSsl%2A> Eigenschaft gibt an, ob das Cookie nur über secure (HTTPS)-Verbindungen übertragen werden soll. Wenn festgelegt, die <xref:System.IdentityModel.Services.CookieHandler.PersistentSessionLifetime%2A> Eigenschaft wird verwendet, um die Ablaufzeit für permanente Sitzungen festgelegt werden, die für Sitzungen gültig bleiben, selbst wenn der Browser geschlossen wird. Alle diese Eigenschaften verfügen über entsprechende Eigenschaften, die in der Regel für den zugrunde liegenden festgelegt werden <xref:System.Web.HttpCookie> Objekt (oder Objekte) von den Methoden "Core" des Handlers. Weitere Informationen finden Sie in der Dokumentation für jede Eigenschaft.  
  
 Der Cookie-Handler, der von der Sicherheitskontenverwaltung verwendet wird, kann angegeben werden, in der Konfiguration über die [ &lt;"cookiehandler"&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/cookiehandler.md) Element. Der Cookie-Handler, die von diesem Element festlegen kann geändert werden, in einen Delegaten für die <xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfigurationCreated?displayProperty=nameWithType> Ereignis oder es festlegen oder direkt über zugegriffen werden kann die <xref:System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler%2A?displayProperty=nameWithType> Eigenschaft.  
  
   
  
## Examples  
 Das folgende Beispiel konfiguriert die SAM um einen benutzerdefinierten Cookie-Handler des Typs verwenden `MyNamespace.MyCustomCookieHandler`.  
  
```xml  
<cookieHandler mode="Custom">  
    <customCookieHandler type="MyNamespace.MyCustomCookieHandler, MyAssembly" />  
</cookieHandler>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IdentityModel.Services.ChunkedCookieHandler" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CookieHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; CookieHandler();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Wird von Konstruktoren in abgeleiteten Klassen aufgerufen, um die <see cref="T:System.IdentityModel.Services.CookieHandler" />-Klasse zu initialisieren.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Delete">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Löscht ein Cookie.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public void Delete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Delete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.Delete" />
      <MemberSignature Language="VB.NET" Value="Public Sub Delete ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Delete();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Löscht den Cookie, der der aktuellen Anforderung zugeordnet wird, die über den Standardnamen, die Domäne und den Pfad verfügt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Name, Domäne und Pfad angegeben, durch die <xref:System.IdentityModel.Services.CookieHandler.Name%2A>, <xref:System.IdentityModel.Services.CookieHandler.Domain%2A>, und <xref:System.IdentityModel.Services.CookieHandler.Path%2A> Eigenschaften. Die Anforderung wird durch angegeben. <xref:System.Web.HttpContext.Current%2A?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public void Delete (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Delete(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.Delete(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Delete (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Delete(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Der Name des Cookies.</param>
        <summary>löscht den Cookie, der der aktuellen Anforderung zugeordnet ist, die über den angegebenen Namen sowie die Standarddomäne und den Pfad verfügt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Domäne und den Pfad von angegeben sind die <xref:System.IdentityModel.Services.CookieHandler.Domain%2A> und <xref:System.IdentityModel.Services.CookieHandler.Path%2A> Eigenschaften. Die Anforderung wird durch angegeben. <xref:System.Web.HttpContext.Current%2A?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> hat den Wert <see langword="null" /> oder ist leer.</exception>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public void Delete (System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Delete(class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.Delete(System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Delete (context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Delete(System::Web::HttpContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="context">Der <see cref="T:System.Web.HttpContext" /> für die Anforderung.</param>
        <summary>Löscht den Cookie, der der aktuellen Anforderung zugeordnet wird, die über den Standardnamen, die Domäne und den Pfad verfügt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Name, Domäne und Pfad angegeben, durch die <xref:System.IdentityModel.Services.CookieHandler.Name%2A>, <xref:System.IdentityModel.Services.CookieHandler.Domain%2A>, und <xref:System.IdentityModel.Services.CookieHandler.Path%2A> Eigenschaften.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public void Delete (string name, System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Delete(string name, class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.Delete(System.String,System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Delete (name As String, context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Delete(System::String ^ name, System::Web::HttpContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="name">Der Name des Cookies.</param>
        <param name="context">Der <see cref="T:System.Web.HttpContext" /> für die Anforderung.</param>
        <summary>Löscht den Cookie, der der angegebenen Anforderung zugeordnet ist, die über den angegebenen Namen sowie die Standarddomäne und den Pfad verfügt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Domäne und den Pfad von angegeben sind die <xref:System.IdentityModel.Services.CookieHandler.Domain%2A> und <xref:System.IdentityModel.Services.CookieHandler.Path%2A> Eigenschaften.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> hat den Wert <see langword="null" /> oder ist leer.</exception>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public void Delete (string name, string path, string domain, System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Delete(string name, string path, string domain, class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.Delete(System.String,System.String,System.String,System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Delete (name As String, path As String, domain As String, context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Delete(System::String ^ name, System::String ^ path, System::String ^ domain, System::Web::HttpContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="domain" Type="System.String" />
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="name">Der Name des Cookies.</param>
        <param name="path">Der Pfad den Cookie.</param>
        <param name="domain">Die Domäne für den Cookie fest.</param>
        <param name="context">Der <see cref="T:System.Web.HttpContext" /> für die Anforderung.</param>
        <summary>Löscht den Cookie, der der angegebenen Anforderung zugeordnet wird, die über den angegebenen Namen, die Domäne und den Pfad verfügt.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> hat den Wert <see langword="null" /> oder ist leer.</exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteCore">
      <MemberSignature Language="C#" Value="protected abstract void DeleteCore (string name, string path, string domain, System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DeleteCore(string name, string path, string domain, class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.DeleteCore(System.String,System.String,System.String,System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub DeleteCore (name As String, path As String, domain As String, context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void DeleteCore(System::String ^ name, System::String ^ path, System::String ^ domain, System::Web::HttpContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="domain" Type="System.String" />
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="name">Der Name des Cookies.</param>
        <param name="path">Der Pfad den Cookie.</param>
        <param name="domain">Die Domäne für den Cookie fest.</param>
        <param name="context">Der <see cref="T:System.Web.HttpContext" /> für die Anforderung.</param>
        <summary>Löscht beim Überschreiben in einer abgeleiteten Klasse das Cookie, das der angegebenen Anforderung zugeordnet ist, die den angegebenen Namen und die Domäne und den Pfad besitzt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aufgerufen von überladenen <xref:System.IdentityModel.Services.CookieHandler.Delete%2A> Methoden, um die eigentliche Arbeit der Cookies zu löschen. Die <xref:System.IdentityModel.Services.CookieHandler.Delete%2A> Methoden werden sichergestellt, dass Name und Pfad nicht leere Zeichenfolgen.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Sie müssen diese Methode überschreiben. Die Implementierung ist vollständig Aufgabe des Entwicklers. Ersetzen Sie in der Normalfall Implementierungen der angegebene Cookie in der <see cref="P:System.Web.HttpResponse.Cookies" /> Auflistung und ein Cookie, ist <see langword="null" /> Daten und eine Ablaufzeit, die älter als die aktuelle Uhrzeit; Dies ist jedoch nicht zwingend festgelegt ist.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Domain">
      <MemberSignature Language="C#" Value="public virtual string Domain { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Domain" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Services.CookieHandler.Domain" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Domain As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Domain { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Domäne, die für Cookies verwendet wird ab, bzw. legt diese fest.</summary>
        <value>Die Domäne für Cookies. Der Standardwert ist <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Entspricht der <xref:System.Web.HttpCookie.Domain%2A?displayProperty=nameWithType>-Eigenschaft.  
  
 Die Eigenschaft initialisiert werden kann, durch Angabe der `domain` -Attribut auf die [ &lt;"cookiehandler"&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/cookiehandler.md) Element in der Konfiguration.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HideFromClientScript">
      <MemberSignature Language="C#" Value="public virtual bool HideFromClientScript { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HideFromClientScript" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Services.CookieHandler.HideFromClientScript" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property HideFromClientScript As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool HideFromClientScript { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob das Cookie aus dem Clientskript ausgeblendet werden soll, oder legt diesen Wert fest.</summary>
        <value>
          <see langword="true" />, wenn das Cookie aus dem Clientskript ausgeblendet werden soll; andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Steuert, ob das Flag "HttpOnly", in der Set-Cookie-Header für Cookies, die vom Handler geschrieben ausgegeben wird. Einige Webbrowser berücksichtigen diese Kennzeichnung durch Speicherung der Zugriff auf den Cookiewert Skriptdatei auf Clientseite.  
  
 Diese Eigenschaft entspricht der <xref:System.Web.HttpCookie.HttpOnly%2A?displayProperty=nameWithType> Eigenschaft.  
  
 Die Eigenschaft initialisiert werden kann, durch Angabe der `hideFromScript` -Attribut auf die [ &lt;"cookiehandler"&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/cookiehandler.md) Element in der Konfiguration.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchCookiePath">
      <MemberSignature Language="C#" Value="public virtual string MatchCookiePath (Uri baseUri, Uri targetUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string MatchCookiePath(class System.Uri baseUri, class System.Uri targetUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.MatchCookiePath(System.Uri,System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MatchCookiePath (baseUri As Uri, targetUri As Uri) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ MatchCookiePath(Uri ^ baseUri, Uri ^ targetUri);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseUri" Type="System.Uri" />
        <Parameter Name="targetUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="baseUri">Die Basis-URL der Anforderung.</param>
        <param name="targetUri">Die URL, mit der eine Übereinstimmung gefunden werden soll.</param>
        <summary>Wenn die Zieldomäne innerhalb der Cookiedomäne und der Zielpfad im Cookiepfad liegt, müssen Sie die Groß-/Kleinschreibung für die Angabe des Cookiepfads beachten.</summary>
        <returns>Gibt <see cref="T:System.String" />zurück.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Services.CookieHandler.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Basisnamen für Cookies ab, die vom Handler geschrieben wurden, oder legt diesen fest.</summary>
        <value>Der Basisname, der für Cookies zu verwenden ist. Der Standardwert ist "FedAuth".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft entspricht der <xref:System.Web.HttpCookie.Name%2A?displayProperty=nameWithType> Eigenschaft.  
  
 Die Eigenschaft initialisiert werden kann, durch Angabe der `name` -Attribut auf die [ &lt;"cookiehandler"&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/cookiehandler.md) Element in der Konfiguration.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ein Versuch tritt auf, einen <see langword="null" /> oder leeren -Wert oder einen leeren Wert festzulegen.</exception>
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public virtual string Path { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Path" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Services.CookieHandler.Path" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Path As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Path { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den virtuellen Pfad für vom Handler geschriebene Cookies ab oder legt diesen fest.</summary>
        <value>Der virtuelle Pfad. Standardwerte zum Stamm der ASP.NET-Anwendung.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft entspricht der <xref:System.Web.HttpCookie.Path%2A?displayProperty=nameWithType> Eigenschaft.  
  
 Die Eigenschaft initialisiert werden kann, durch Angabe der `path` -Attribut auf die [ &lt;"cookiehandler"&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/cookiehandler.md) Element in der Konfiguration.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ein Versuch tritt auf, einen <see langword="null" /> oder leeren -Wert oder einen leeren Wert festzulegen.</exception>
      </Docs>
    </Member>
    <Member MemberName="PersistentSessionLifetime">
      <MemberSignature Language="C#" Value="public virtual Nullable&lt;TimeSpan&gt; PersistentSessionLifetime { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype System.TimeSpan&gt; PersistentSessionLifetime" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Services.CookieHandler.PersistentSessionLifetime" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property PersistentSessionLifetime As Nullable(Of TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Nullable&lt;TimeSpan&gt; PersistentSessionLifetime { Nullable&lt;TimeSpan&gt; get(); void set(Nullable&lt;TimeSpan&gt; value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.TimeSpan&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Die Lebensdauer permanenter Sitzungen. Bei Null werden immer flüchtige Sitzungen verwendet.</summary>
        <value>Die Sitzungslebensdauer. Der Standardwert ist <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tickets für permanente Sitzungen werden gespeichert, in einem dateibasierten Cookies, was bedeutet, dass die Sitzung fortgesetzt werden kann, nachdem Webbrowser geschlossen und erneut geöffnet wird.  
  
 Diese Eigenschaft wird zum Festlegen der <xref:System.Web.HttpCookie.Expires%2A?displayProperty=nameWithType> Eigenschaft.  
  
 Die Eigenschaft initialisiert werden kann, durch Angabe der `persistentSessionLifetime` -Attribut auf die [ &lt;"cookiehandler"&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/cookiehandler.md) Element in der Konfiguration.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Ein Wert, der kleiner als NULL ist, wird angegeben.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Read">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Liest einen Cookie.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public byte[] Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.Read" />
      <MemberSignature Language="VB.NET" Value="Public Function Read () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ Read();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Liest den Cookie, der der aktuellen Anforderung zugeordnet wird, die über den Standardnamen verfügt.</summary>
        <returns>Der Cookiewert oder <see langword="null" />, wenn das Cookie nicht gefunden wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Name des Cookies wird angegeben, durch die <xref:System.IdentityModel.Services.CookieHandler.Name%2A> Eigenschaft. Die Anforderung wird angegeben, indem <xref:System.Web.HttpContext.Current%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public byte[] Read (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] Read(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.Read(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Read (name As String) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ Read(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Der Name des zu lesenden Cookies.</param>
        <summary>Liest den Cookie, der der aktuellen Anforderung zugeordnet wird, die über den angegebenen Namen verfügt.</summary>
        <returns>Der Cookiewert oder <see langword="null" />, wenn das Cookie nicht gefunden wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Anforderung wird durch angegeben. <xref:System.Web.HttpContext.Current%2A?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> hat den Wert <see langword="null" /> oder ist leer.</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public byte[] Read (System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] Read(class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.Read(System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function Read (context As HttpContext) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ Read(System::Web::HttpContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="context">Der <see cref="T:System.Web.HttpContext" /> für die Anforderung.</param>
        <summary>Liest den Cookie, der der aktuellen Anforderung zugeordnet wird, die über den Standardnamen, die Domäne und den Pfad verfügt.</summary>
        <returns>Der Cookiewert oder <see langword="null" />, wenn das Cookie nicht gefunden wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Name des Cookies wird angegeben, durch die <xref:System.IdentityModel.Services.CookieHandler.Name%2A> Eigenschaft.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public byte[] Read (string name, System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] Read(string name, class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.Read(System.String,System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function Read (name As String, context As HttpContext) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ Read(System::String ^ name, System::Web::HttpContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="name">Der Name des zu lesenden Cookies.</param>
        <param name="context">Der <see cref="T:System.Web.HttpContext" /> für die Anforderung.</param>
        <summary>Liest den Cookie, der der angegebenen Anforderung zugeordnet ist, die über den angegebenen Namen sowie die Standarddomäne und den Pfad verfügt.</summary>
        <returns>Der Cookiewert oder <see langword="null" />, wenn das Cookie nicht gefunden wurde.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> hat den Wert <see langword="null" /> oder ist leer.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadCore">
      <MemberSignature Language="C#" Value="protected abstract byte[] ReadCore (string name, System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance unsigned int8[] ReadCore(string name, class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.ReadCore(System.String,System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function ReadCore (name As String, context As HttpContext) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract cli::array &lt;System::Byte&gt; ^ ReadCore(System::String ^ name, System::Web::HttpContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="name">Der Name des Cookies.</param>
        <param name="context">Der <see cref="T:System.Web.HttpContext" /> für die Anforderung.</param>
        <summary>Liest beim Überschreiben in einer abgeleiteten Klasse das Cookie, das den angegebenen Namen hat und welches der angegebenen Anforderung zugeordnet ist.</summary>
        <returns>Der Cookiewert oder <see langword="null" />, wenn das Cookie nicht gefunden wurde</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aufgerufen von überladenen <xref:System.IdentityModel.Services.CookieHandler.Read%2A> Methoden, um die eigentliche Arbeit des Cookies zu lesen. Die <xref:System.IdentityModel.Services.CookieHandler.Read%2A> Methoden werden sichergestellt, dass `name` ist eine nicht leere Zeichenfolge.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Sie müssen diese Methode überschreiben. Die Implementierung ist vollständig Aufgabe des Entwicklers. Im typischen Fall lesen Implementierungen die Cookiedaten aus der <see cref="P:System.Web.HttpRequest.Cookies" /> -Auflistung, dies ist jedoch nicht zwingend.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="RequireSsl">
      <MemberSignature Language="C#" Value="public virtual bool RequireSsl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RequireSsl" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Services.CookieHandler.RequireSsl" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property RequireSsl As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool RequireSsl { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob das Cookie nur mit SSL verwendet werden soll, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />, wenn das Cookie nur über eine SSL-Verbindung verwendet werden soll; andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Steuert, ob das Kennzeichen "Secure" in der Set-Cookie-Header für geschrieben Cookies ausgegeben werden. Wenn dieser Wert ist `true`, die Cookies nur über HTTPS stehen-Sitzung.  
  
 Diese Eigenschaft entspricht der <xref:System.Web.HttpCookie.Secure%2A?displayProperty=nameWithType> Eigenschaft.  
  
 Die Eigenschaft initialisiert werden kann, durch Angabe der `requireSSL` -Attribut auf die [ &lt;"cookiehandler"&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/cookiehandler.md) Element in der Konfiguration.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Write">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Schreibt ein Cookie.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (byte[] value, bool isPersistent, DateTime tokenExpirationTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Write(unsigned int8[] value, bool isPersistent, valuetype System.DateTime tokenExpirationTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.Write(System.Byte[],System.Boolean,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (value As Byte(), isPersistent As Boolean, tokenExpirationTime As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(cli::array &lt;System::Byte&gt; ^ value, bool isPersistent, DateTime tokenExpirationTime);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte[]" />
        <Parameter Name="isPersistent" Type="System.Boolean" />
        <Parameter Name="tokenExpirationTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">Der Cookiewert.</param>
        <param name="isPersistent">
          <see langword="true" />, wenn das Cookie persistent ist; <see langword="false" />, wenn das Cookie sich auf die Sitzung beschränkt, das heißt, es ist nur gültig bis der Browser auf der Clientseite geschlossen wird.</param>
        <param name="tokenExpirationTime">Die Ablaufzeit für das zugrunde liegende Token.</param>
        <summary>Schreibt ein Cookie, das der aktuellen Anforderung zugeordnet ist, die den angegebenen Wert, die angegebene Dauerhaftigkeit und die angegebene Ablaufzeit hat.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die `isPersistent` Parameter ist `false`, die Ablaufzeit Cookie wird festgelegt, um <xref:System.DateTime.MinValue?displayProperty=nameWithType>. Wenn die `isPersistent` Parameter ist `true`, die Ablaufzeit Cookie wird festgelegt, auf den Wert des der <xref:System.IdentityModel.Services.CookieHandler.PersistentSessionLifetime%2A> Eigenschaft ist er nicht `null` oder, wenn die <xref:System.IdentityModel.Services.CookieHandler.PersistentSessionLifetime%2A> Eigenschaft ist `null`, die Ablaufzeit wird auf den Wert, der die festgelegt`tokenExpirationTime` Parameter.  
  
 Der Name des Cookies Domäne Pfad angegeben sind, und durch die <xref:System.IdentityModel.Services.CookieHandler.Name%2A>, <xref:System.IdentityModel.Services.CookieHandler.Domain%2A>, und <xref:System.IdentityModel.Services.CookieHandler.Path%2A> Eigenschaften. Die Anforderung wird angegeben, indem <xref:System.Web.HttpContext.Current%2A>. Durch angegeben wird, ob das Cookie nur über SSL gesendet werden sollen die <xref:System.IdentityModel.Services.CookieHandler.RequireSsl%2A> Eigenschaft und gibt an, ob das Cookie aus einer clientseitigen Skripts ausgeblendet werden soll wird angegeben, indem die <xref:System.IdentityModel.Services.CookieHandler.HideFromClientScript%2A> Eigenschaft.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> hat den Wert <see langword="null" /> oder ist leer.</exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (byte[] value, string name, DateTime expirationTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Write(unsigned int8[] value, string name, valuetype System.DateTime expirationTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.Write(System.Byte[],System.String,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (value As Byte(), name As String, expirationTime As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(cli::array &lt;System::Byte&gt; ^ value, System::String ^ name, DateTime expirationTime);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte[]" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="expirationTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">Der Cookiewert.</param>
        <param name="name">Der Name des Cookies.</param>
        <param name="expirationTime">Die Ablaufzeit für das Cookie oder <see cref="F:System.DateTime.MinValue" /> für ein Sitzungscookie (auf die Sitzung beschränktes Cookie).</param>
        <summary>Schreibt ein Cookie, das der aktuellen Anforderung zugeordnet ist, die den angegebenen Namen, den angegebenen Wert und die angegebene Ablaufzeit hat.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Cookiedomäne und den Pfad von angegeben sind die <xref:System.IdentityModel.Services.CookieHandler.Domain%2A> und <xref:System.IdentityModel.Services.CookieHandler.Path%2A> Eigenschaften. Die Anforderung wird angegeben, indem <xref:System.Web.HttpContext.Current%2A?displayProperty=nameWithType>.  Die Anforderung wird angegeben, indem <xref:System.Web.HttpContext.Current%2A>. Durch angegeben wird, ob das Cookie nur über SSL gesendet werden sollen die <xref:System.IdentityModel.Services.CookieHandler.RequireSsl%2A> Eigenschaft und gibt an, ob das Cookie aus einer clientseitigen Skripts ausgeblendet werden soll wird angegeben, indem die <xref:System.IdentityModel.Services.CookieHandler.HideFromClientScript%2A> Eigenschaft.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> hat den Wert <see langword="null" /> oder ist leer.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> hat den Wert <see langword="null" /> oder ist leer.</exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (byte[] value, string name, DateTime expirationTime, System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Write(unsigned int8[] value, string name, valuetype System.DateTime expirationTime, class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.Write(System.Byte[],System.String,System.DateTime,System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (value As Byte(), name As String, expirationTime As DateTime, context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(cli::array &lt;System::Byte&gt; ^ value, System::String ^ name, DateTime expirationTime, System::Web::HttpContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte[]" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="expirationTime" Type="System.DateTime" />
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="value">Der Cookiewert.</param>
        <param name="name">Der Name des Cookies.</param>
        <param name="expirationTime">Die Ablaufzeit für das Cookie oder <see cref="F:System.DateTime.MinValue" /> für ein Sitzungscookie (auf die Sitzung beschränktes Cookie).</param>
        <param name="context">Der <see cref="T:System.Web.HttpContext" /> für die Anforderung.</param>
        <summary>Schreibt ein Cookie, das der angegebenen Anforderung zugeordnet ist, die den angegebenen Namen, den angegebenen Wert und die angegebene Ablaufzeit hat.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Cookiedomäne und den Pfad von angegeben sind die <xref:System.IdentityModel.Services.CookieHandler.Domain%2A> und <xref:System.IdentityModel.Services.CookieHandler.Path%2A> Eigenschaften. Die Anforderung wird angegeben, indem <xref:System.Web.HttpContext.Current%2A>. Durch angegeben wird, ob das Cookie nur über SSL gesendet werden sollen die <xref:System.IdentityModel.Services.CookieHandler.RequireSsl%2A> Eigenschaft und gibt an, ob das Cookie aus einer clientseitigen Skripts ausgeblendet werden soll wird angegeben, indem die <xref:System.IdentityModel.Services.CookieHandler.HideFromClientScript%2A> Eigenschaft.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> hat den Wert <see langword="null" /> oder ist leer.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> hat den Wert <see langword="null" /> oder ist leer.</exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (byte[] value, string name, string path, string domain, DateTime expirationTime, bool requiresSsl, bool hideFromClientScript, System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Write(unsigned int8[] value, string name, string path, string domain, valuetype System.DateTime expirationTime, bool requiresSsl, bool hideFromClientScript, class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.Write(System.Byte[],System.String,System.String,System.String,System.DateTime,System.Boolean,System.Boolean,System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (value As Byte(), name As String, path As String, domain As String, expirationTime As DateTime, requiresSsl As Boolean, hideFromClientScript As Boolean, context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(cli::array &lt;System::Byte&gt; ^ value, System::String ^ name, System::String ^ path, System::String ^ domain, DateTime expirationTime, bool requiresSsl, bool hideFromClientScript, System::Web::HttpContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte[]" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="domain" Type="System.String" />
        <Parameter Name="expirationTime" Type="System.DateTime" />
        <Parameter Name="requiresSsl" Type="System.Boolean" />
        <Parameter Name="hideFromClientScript" Type="System.Boolean" />
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="value">Der Cookiewert.</param>
        <param name="name">Der Name des Cookies.</param>
        <param name="path">Der Pfad den Cookie.</param>
        <param name="domain">Die Domäne für den Cookie fest.</param>
        <param name="expirationTime">Die Ablaufzeit für das Cookie oder <see cref="F:System.DateTime.MinValue" /> für ein Sitzungscookie (auf die Sitzung beschränktes Cookie).</param>
        <param name="requiresSsl">
          <see langword="true" />, wenn das Cookie nur über eine SSL-Verbindung verwendet werden soll; andernfalls <see langword="false" />.</param>
        <param name="hideFromClientScript">
          <see langword="true" />, wenn das Cookie aus dem Clientskript ausgeblendet werden soll; andernfalls <see langword="false" />.</param>
        <param name="context">Der <see cref="T:System.Web.HttpContext" /> für die Anforderung.</param>
        <summary>Schreibt ein Cookie, das der angegebenen Anforderung zugeordnet ist, die den angegebenen Namen, den angegebenen Wert, Domäne, Pfad und die angegebene Ablaufzeit und Sichtbarkeit hat.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> hat den Wert <see langword="null" /> oder ist leer.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> hat den Wert <see langword="null" /> oder ist leer.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCore">
      <MemberSignature Language="C#" Value="protected abstract void WriteCore (byte[] value, string name, string path, string domain, DateTime expirationTime, bool secure, bool httpOnly, System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void WriteCore(unsigned int8[] value, string name, string path, string domain, valuetype System.DateTime expirationTime, bool secure, bool httpOnly, class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.WriteCore(System.Byte[],System.String,System.String,System.String,System.DateTime,System.Boolean,System.Boolean,System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub WriteCore (value As Byte(), name As String, path As String, domain As String, expirationTime As DateTime, secure As Boolean, httpOnly As Boolean, context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void WriteCore(cli::array &lt;System::Byte&gt; ^ value, System::String ^ name, System::String ^ path, System::String ^ domain, DateTime expirationTime, bool secure, bool httpOnly, System::Web::HttpContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte[]" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="domain" Type="System.String" />
        <Parameter Name="expirationTime" Type="System.DateTime" />
        <Parameter Name="secure" Type="System.Boolean" />
        <Parameter Name="httpOnly" Type="System.Boolean" />
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="value">Der Cookiewert.</param>
        <param name="name">Der Name des Cookies.</param>
        <param name="path">Der Pfad den Cookie.</param>
        <param name="domain">Die Domäne für den Cookie fest.</param>
        <param name="expirationTime">Die Ablaufzeit für das Cookie oder <see cref="F:System.DateTime.MinValue" /> für ein Sitzungscookie (auf die Sitzung beschränktes Cookie).</param>
        <param name="secure">
          <see langword="true" />, wenn das Cookie nur über eine SSL-Verbindung verwendet werden soll; andernfalls <see langword="false" />.</param>
        <param name="httpOnly">
          <see langword="true" />, wenn das Cookie aus dem Clientskript ausgeblendet werden soll; andernfalls <see langword="false" />.</param>
        <param name="context">Der <see cref="T:System.Web.HttpContext" /> für die Anforderung.</param>
        <summary>Schreibt beim Überschreiben in einer abgeleiteten Klasse ein Cookie, das der angegebenen Anforderung zugeordnet ist, die den angegebenen Namen, Wert, Domäne, Pfad und Ablaufzeit, Dauerhaftigkeit und Sichtbarkeit besitzt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aufgerufen von überladenen <xref:System.IdentityModel.Services.CookieHandler.Write%2A> Methoden, um die eigentliche Arbeit des Schreibens von Cookies. Die <xref:System.IdentityModel.Services.CookieHandler.Write%2A> Methoden werden sichergestellt, dass `value` ein nicht leeres Bytearray wurde und dass `name` und `path` nicht leere Zeichenfolgen sind.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Sie müssen diese Methode überschreiben. Die Implementierung ist vollständig Aufgabe des Entwicklers. In der Normalfall Implementierungen die Cookiedaten zum Schreiben der <see cref="P:System.Web.HttpResponse.Cookies" /> -Auflistung, dies ist jedoch nicht zwingend. Die meisten Parameter der Methode werden in der Regel zum Festlegen der entsprechenden Eigenschaften auf einem oder mehreren <see cref="T:System.Web.HttpCookie" /> Objekte.</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>
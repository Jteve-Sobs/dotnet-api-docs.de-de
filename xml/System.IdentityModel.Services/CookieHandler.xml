<Type Name="CookieHandler" FullName="System.IdentityModel.Services.CookieHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="49e905b4f08895e7e417f071da994d3d15460894" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78823728" /></Metadata><TypeSignature Language="C#" Value="public abstract class CookieHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CookieHandler extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Services.CookieHandler" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class CookieHandler" />
  <TypeSignature Language="C++ CLI" Value="public ref class CookieHandler abstract" />
  <TypeSignature Language="F#" Value="type CookieHandler = class" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel.Services</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt eine abstrakte Basisklasse zum Lesen, Schreiben und Löschen von Sitzungscookies auf einem HTTP-Client bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der <xref:System.IdentityModel.Services.SessionAuthenticationModule> (Sam) verwendet eine Instanz der <xref:System.IdentityModel.Services.CookieHandler>-Klasse zum Lesen, schreiben und Löschen von Cookies oder Cookies, die die <xref:System.IdentityModel.Tokens.SessionSecurityToken> auf dem HTTP-Client enthalten. Das Cookie (oder Cookies), bei dem das Sitzungs Token auf mehrere Cookies aufgeteilt wird, das das Sitzungs Token enthält, wird als Sitzungs Cookie bezeichnet.  
  
 Windows Identity Foundation (WIF) enthält einen cookiehandler, der als segmentierter cookiehandler bezeichnet wird, der von der <xref:System.IdentityModel.Services.ChunkedCookieHandler> Klasse implementiert wird Der segmentierte cookiehandler teilt das Sitzungs Token auf eine oder mehrere Cookies entsprechend einer angegebenen Segmentgröße auf. Dies dient zum erfüllen der Größenbeschränkungen von einzelnen Cookies, die von vielen Browsern auferlegt werden.  
  
 Sie können von <xref:System.IdentityModel.Services.CookieHandler> ableiten, um einen eigenen cookiehandler zu erstellen. Wenn Sie dies tun, müssen Sie die Methoden <xref:System.IdentityModel.Services.CookieHandler.DeleteCore%2A>, <xref:System.IdentityModel.Services.CookieHandler.ReadCore%2A>und <xref:System.IdentityModel.Services.CookieHandler.WriteCore%2A> überschreiben, damit das Sitzungs Cookie tatsächlich gelöscht, gelesen und geschrieben werden kann. Diese Methoden lesen in der Regel das Cookie aus der <xref:System.Web.HttpRequest.Cookies%2A?displayProperty=nameWithType> Auflistung und schreiben oder löschen Cookies über die <xref:System.Web.HttpResponse.Cookies%2A?displayProperty=nameWithType> Auflistung. Das <xref:System.Web.HttpContext> Objekt, über das Sie auf die Anforderung und die Antwort zugreifen können, wird für jede dieser Methoden als Parameter bereitgestellt. Zusätzlich zu den erforderlichen Methoden können Sie optional auch andere Eigenschaften von virtuellen Methoden überschreiben, die von der <xref:System.IdentityModel.Services.CookieHandler>-Klasse verfügbar gemacht werden, um das Verhalten des Handlers anzupassen.  
  
 Mehrere Eigenschaften werden durch die <xref:System.IdentityModel.Services.CookieHandler>-Klasse verfügbar gemacht, die das Standardverhalten und die Eigenschaften für das Sitzungs Cookie angeben. Die Eigenschaften <xref:System.IdentityModel.Services.CookieHandler.Name%2A>, <xref:System.IdentityModel.Services.CookieHandler.Domain%2A>und <xref:System.IdentityModel.Services.CookieHandler.Path%2A> stellen den Basis Namen für das Cookie, die Domäne, in der Sie gültig ist, und den Pfad, unter dem Sie auf dem Client gespeichert ist, bereit. Die <xref:System.IdentityModel.Services.CookieHandler.HideFromClientScript%2A>-Eigenschaft gibt an, ob Client seitige Skripts auf das Cookie zugreifen können. Die <xref:System.IdentityModel.Services.CookieHandler.RequireSsl%2A>-Eigenschaft gibt an, ob das Cookie nur über sichere Verbindungen (HTTPS) übertragen werden soll. Wenn festgelegt, wird die <xref:System.IdentityModel.Services.CookieHandler.PersistentSessionLifetime%2A>-Eigenschaft verwendet, um die Ablaufzeit für persistente Sitzungen festzulegen, d. h. für Sitzungen, die auch nach dem Schließen des Browsers gültig bleiben. Alle diese Eigenschaften verfügen über äquivalente Eigenschaften, die in der Regel für die zugrunde liegenden <xref:System.Web.HttpCookie> Objekte (oder Objekte) durch die "Core"-Methoden des Handlers festgelegt werden. Weitere Informationen finden Sie in der Dokumentation zu den einzelnen Eigenschaften.  
  
 Der von Sam verwendete cookiehandler kann in der Konfiguration über das [&lt;cookiehandler-&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/cookiehandler.md) Element angegeben werden. Der von diesem Element festgelegte cookiehandler kann in einem Ereignis Delegaten für das <xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfigurationCreated?displayProperty=nameWithType> Ereignis geändert werden, oder er kann direkt über die <xref:System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler%2A?displayProperty=nameWithType>-Eigenschaft festgelegt oder darauf zugegriffen werden.  
  
   
  
## Examples  
 Im folgenden Beispiel wird Sam für die Verwendung eines benutzerdefinierten cookiehandlers vom Typ `MyNamespace.MyCustomCookieHandler`konfiguriert.  
  
```xml  
<cookieHandler mode="Custom">  
    <customCookieHandler type="MyNamespace.MyCustomCookieHandler, MyAssembly" />  
</cookieHandler>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IdentityModel.Services.ChunkedCookieHandler" />
    <related type="Article" href="https://msdn.microsoft.com/library/bfdc127f-8d94-4566-8bef-f583c6ae7398">&lt;cookiehandler&gt;</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CookieHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; CookieHandler();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Wird von Konstruktoren in abgeleiteten Klassen aufgerufen, um die <see cref="T:System.IdentityModel.Services.CookieHandler" />-Klasse zu initialisieren.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Delete">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Löscht ein Cookie.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public void Delete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Delete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.Delete" />
      <MemberSignature Language="VB.NET" Value="Public Sub Delete ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Delete();" />
      <MemberSignature Language="F#" Value="member this.Delete : unit -&gt; unit" Usage="cookieHandler.Delete " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Löscht den Cookie, der der aktuellen Anforderung zugeordnet wird, die über den Standardnamen, die Domäne und den Pfad verfügt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Name, Domäne und Pfad werden durch die Eigenschaften <xref:System.IdentityModel.Services.CookieHandler.Name%2A>, <xref:System.IdentityModel.Services.CookieHandler.Domain%2A>und <xref:System.IdentityModel.Services.CookieHandler.Path%2A> angegeben. Die Anforderung wird durch <xref:System.Web.HttpContext.Current%2A?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public void Delete (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Delete(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.Delete(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Delete (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Delete(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.Delete : string -&gt; unit" Usage="cookieHandler.Delete name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Der Name des Cookies.</param>
        <summary>löscht den Cookie, der der aktuellen Anforderung zugeordnet ist, die über den angegebenen Namen sowie die Standarddomäne und den Pfad verfügt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Domäne und der Pfad werden durch die Eigenschaften <xref:System.IdentityModel.Services.CookieHandler.Domain%2A> und <xref:System.IdentityModel.Services.CookieHandler.Path%2A> angegeben. Die Anforderung wird durch <xref:System.Web.HttpContext.Current%2A?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> hat den Wert <see langword="null" /> oder ist leer.</exception>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public void Delete (System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Delete(class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.Delete(System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Delete (context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Delete(System::Web::HttpContext ^ context);" />
      <MemberSignature Language="F#" Value="member this.Delete : System.Web.HttpContext -&gt; unit" Usage="cookieHandler.Delete context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="context">Der <see cref="T:System.Web.HttpContext" /> für die Anforderung.</param>
        <summary>Löscht den Cookie, der der aktuellen Anforderung zugeordnet wird, die über den Standardnamen, die Domäne und den Pfad verfügt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Name, Domäne und Pfad werden durch die Eigenschaften <xref:System.IdentityModel.Services.CookieHandler.Name%2A>, <xref:System.IdentityModel.Services.CookieHandler.Domain%2A>und <xref:System.IdentityModel.Services.CookieHandler.Path%2A> angegeben.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public void Delete (string name, System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Delete(string name, class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.Delete(System.String,System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Delete (name As String, context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Delete(System::String ^ name, System::Web::HttpContext ^ context);" />
      <MemberSignature Language="F#" Value="member this.Delete : string * System.Web.HttpContext -&gt; unit" Usage="cookieHandler.Delete (name, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="name">Der Name des Cookies.</param>
        <param name="context">Der <see cref="T:System.Web.HttpContext" /> für die Anforderung.</param>
        <summary>Löscht den Cookie, der der angegebenen Anforderung zugeordnet ist, die über den angegebenen Namen sowie die Standarddomäne und den Pfad verfügt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Domäne und der Pfad werden durch die Eigenschaften <xref:System.IdentityModel.Services.CookieHandler.Domain%2A> und <xref:System.IdentityModel.Services.CookieHandler.Path%2A> angegeben.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> hat den Wert <see langword="null" /> oder ist leer.</exception>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public void Delete (string name, string path, string domain, System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Delete(string name, string path, string domain, class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.Delete(System.String,System.String,System.String,System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Delete (name As String, path As String, domain As String, context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Delete(System::String ^ name, System::String ^ path, System::String ^ domain, System::Web::HttpContext ^ context);" />
      <MemberSignature Language="F#" Value="member this.Delete : string * string * string * System.Web.HttpContext -&gt; unit" Usage="cookieHandler.Delete (name, path, domain, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="domain" Type="System.String" />
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="name">Der Name des Cookies.</param>
        <param name="path">Der Pfad den Cookie.</param>
        <param name="domain">Die Domäne für den Cookie fest.</param>
        <param name="context">Der <see cref="T:System.Web.HttpContext" /> für die Anforderung.</param>
        <summary>Löscht den Cookie, der der angegebenen Anforderung zugeordnet wird, die über den angegebenen Namen, die Domäne und den Pfad verfügt.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> hat den Wert <see langword="null" /> oder ist leer.</exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteCore">
      <MemberSignature Language="C#" Value="protected abstract void DeleteCore (string name, string path, string domain, System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DeleteCore(string name, string path, string domain, class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.DeleteCore(System.String,System.String,System.String,System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub DeleteCore (name As String, path As String, domain As String, context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void DeleteCore(System::String ^ name, System::String ^ path, System::String ^ domain, System::Web::HttpContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member DeleteCore : string * string * string * System.Web.HttpContext -&gt; unit" Usage="cookieHandler.DeleteCore (name, path, domain, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="domain" Type="System.String" />
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="name">Der Name des Cookies.</param>
        <param name="path">Der Pfad den Cookie.</param>
        <param name="domain">Die Domäne für den Cookie fest.</param>
        <param name="context">Der <see cref="T:System.Web.HttpContext" /> für die Anforderung.</param>
        <summary>Löscht beim Überschreiben in einer abgeleiteten Klasse das Cookie, das der angegebenen Anforderung zugeordnet ist, die den angegebenen Namen und die Domäne und den Pfad besitzt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wird von den überladenen <xref:System.IdentityModel.Services.CookieHandler.Delete%2A>-Methoden aufgerufen, um das Löschen des Cookies zu erledigen. Mit den <xref:System.IdentityModel.Services.CookieHandler.Delete%2A>-Methoden wird sichergestellt, dass Name und Pfad nicht leere Zeichen folgen sind.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Sie müssen diese Methode überschreiben. Die Implementierung ist vollständig für den Entwickler. Im Normalfall ersetzen-Implementierungen das angegebene Cookie in der <see cref="P:System.Web.HttpResponse.Cookies" />-Auflistung durch ein Cookie, das <see langword="null" /> Daten und eine Ablaufzeit hat, die vor der aktuellen Uhrzeit festgelegt ist. Dies ist jedoch keine Voraussetzung.</para></block>
      </Docs>
    </Member>
    <Member MemberName="Domain">
      <MemberSignature Language="C#" Value="public virtual string Domain { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Domain" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Services.CookieHandler.Domain" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Domain As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Domain { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Domain : string with get, set" Usage="System.IdentityModel.Services.CookieHandler.Domain" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Domäne, die für Cookies verwendet wird ab, bzw. legt diese fest.</summary>
        <value>Die Domäne für Cookies. Der Standardwert ist <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Entspricht der <xref:System.Web.HttpCookie.Domain%2A?displayProperty=nameWithType>-Eigenschaft.  
  
 Die-Eigenschaft kann initialisiert werden, indem das `domain`-Attribut für das [&lt;cookiehandler-&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/cookiehandler.md) -Element in der Konfiguration angegeben wird.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/bfdc127f-8d94-4566-8bef-f583c6ae7398">&lt;cookiehandler&gt;</related>
      </Docs>
    </Member>
    <Member MemberName="HideFromClientScript">
      <MemberSignature Language="C#" Value="public virtual bool HideFromClientScript { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HideFromClientScript" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Services.CookieHandler.HideFromClientScript" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property HideFromClientScript As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool HideFromClientScript { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.HideFromClientScript : bool with get, set" Usage="System.IdentityModel.Services.CookieHandler.HideFromClientScript" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob das Cookie aus dem Clientskript ausgeblendet werden soll, oder legt diesen Wert fest.</summary>
        <value><see langword="true" />, wenn das Cookie aus dem Clientskript ausgeblendet werden soll; andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Steuert, ob das Flag "HttpOnly" im Set-Cookie-Header für vom Handler geschriebene Cookies ausgegeben wird. Einige Webbrowser berücksichtigen dieses Flag, indem das Client seitige Skript keinen Zugriff auf den Cookie-Wert hat.  
  
 Diese Eigenschaft entspricht der <xref:System.Web.HttpCookie.HttpOnly%2A?displayProperty=nameWithType>-Eigenschaft.  
  
 Die-Eigenschaft kann initialisiert werden, indem das `hideFromScript`-Attribut für das [&lt;cookiehandler-&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/cookiehandler.md) -Element in der Konfiguration angegeben wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchCookiePath">
      <MemberSignature Language="C#" Value="public virtual string MatchCookiePath (Uri baseUri, Uri targetUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string MatchCookiePath(class System.Uri baseUri, class System.Uri targetUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.MatchCookiePath(System.Uri,System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MatchCookiePath (baseUri As Uri, targetUri As Uri) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ MatchCookiePath(Uri ^ baseUri, Uri ^ targetUri);" />
      <MemberSignature Language="F#" Value="abstract member MatchCookiePath : Uri * Uri -&gt; string&#xA;override this.MatchCookiePath : Uri * Uri -&gt; string" Usage="cookieHandler.MatchCookiePath (baseUri, targetUri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseUri" Type="System.Uri" />
        <Parameter Name="targetUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="baseUri">Die Basis-URL der Anforderung.</param>
        <param name="targetUri">Die URL, mit der eine Übereinstimmung gefunden werden soll.</param>
        <summary>Wenn die Zieldomäne innerhalb der Cookiedomäne und der Zielpfad im Cookiepfad liegt, müssen Sie die Groß-/Kleinschreibung für die Angabe des Cookiepfads beachten.</summary>
        <returns>Gibt <see cref="T:System.String" />zurück.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Services.CookieHandler.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.IdentityModel.Services.CookieHandler.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Basisnamen für Cookies ab, die vom Handler geschrieben wurden, oder legt diesen fest.</summary>
        <value>Der Basisname, der für Cookies zu verwenden ist. Der Standardwert ist "fedauth".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft entspricht der <xref:System.Web.HttpCookie.Name%2A?displayProperty=nameWithType>-Eigenschaft.  
  
 Die-Eigenschaft kann initialisiert werden, indem das `name`-Attribut für das [&lt;cookiehandler-&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/cookiehandler.md) -Element in der Konfiguration angegeben wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ein Versuch tritt auf, einen <see langword="null" /> oder leeren -Wert oder einen leeren Wert festzulegen.</exception>
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public virtual string Path { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Path" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Services.CookieHandler.Path" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Path As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Path { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Path : string with get, set" Usage="System.IdentityModel.Services.CookieHandler.Path" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den virtuellen Pfad für vom Handler geschriebene Cookies ab oder legt diesen fest.</summary>
        <value>Der virtuelle Pfad. Standardwerte zum Stamm der ASP.NET-Anwendung.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft entspricht der <xref:System.Web.HttpCookie.Path%2A?displayProperty=nameWithType>-Eigenschaft.  
  
 Die-Eigenschaft kann initialisiert werden, indem das `path`-Attribut für das [&lt;cookiehandler-&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/cookiehandler.md) -Element in der Konfiguration angegeben wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ein Versuch tritt auf, einen <see langword="null" /> oder leeren -Wert oder einen leeren Wert festzulegen.</exception>
      </Docs>
    </Member>
    <Member MemberName="PersistentSessionLifetime">
      <MemberSignature Language="C#" Value="public virtual TimeSpan? PersistentSessionLifetime { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype System.TimeSpan&gt; PersistentSessionLifetime" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Services.CookieHandler.PersistentSessionLifetime" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property PersistentSessionLifetime As Nullable(Of TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Nullable&lt;TimeSpan&gt; PersistentSessionLifetime { Nullable&lt;TimeSpan&gt; get(); void set(Nullable&lt;TimeSpan&gt; value); };" />
      <MemberSignature Language="F#" Value="member this.PersistentSessionLifetime : Nullable&lt;TimeSpan&gt; with get, set" Usage="System.IdentityModel.Services.CookieHandler.PersistentSessionLifetime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.TimeSpan&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Die Lebensdauer permanenter Sitzungen. Bei Null werden immer flüchtige Sitzungen verwendet.</summary>
        <value>Die Sitzungslebensdauer. Der Standardwert ist <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tickets für persistente Sitzungen werden in dateibasierten Cookies gespeichert. Dies bedeutet, dass die Anmelde Sitzung nach dem Schließen und erneuten Öffnen des Webbrowsers fortgesetzt werden kann.  
  
 Diese Eigenschaft wird verwendet, um die <xref:System.Web.HttpCookie.Expires%2A?displayProperty=nameWithType>-Eigenschaft festzulegen.  
  
 Die-Eigenschaft kann initialisiert werden, indem das `persistentSessionLifetime`-Attribut für das [&lt;cookiehandler-&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/cookiehandler.md) -Element in der Konfiguration angegeben wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Ein Wert, der kleiner als NULL ist, wird angegeben.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Read">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Liest einen Cookie.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public byte[] Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.Read" />
      <MemberSignature Language="VB.NET" Value="Public Function Read () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ Read();" />
      <MemberSignature Language="F#" Value="member this.Read : unit -&gt; byte[]" Usage="cookieHandler.Read " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Liest den Cookie, der der aktuellen Anforderung zugeordnet wird, die über den Standardnamen verfügt.</summary>
        <returns>Der Cookiewert oder <see langword="null" />, wenn das Cookie nicht gefunden wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Name des Cookies wird durch die <xref:System.IdentityModel.Services.CookieHandler.Name%2A>-Eigenschaft angegeben. Die Anforderung wird durch <xref:System.Web.HttpContext.Current%2A?displayProperty=nameWithType>angegeben.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public byte[] Read (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] Read(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.Read(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Read (name As String) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ Read(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.Read : string -&gt; byte[]" Usage="cookieHandler.Read name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Der Name des zu lesenden Cookies.</param>
        <summary>Liest den Cookie, der der aktuellen Anforderung zugeordnet wird, die über den angegebenen Namen verfügt.</summary>
        <returns>Der Cookiewert oder <see langword="null" />, wenn das Cookie nicht gefunden wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Anforderung wird durch <xref:System.Web.HttpContext.Current%2A?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="name" /> hat den Wert <see langword="null" /> oder ist leer.</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public byte[] Read (System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] Read(class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.Read(System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function Read (context As HttpContext) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ Read(System::Web::HttpContext ^ context);" />
      <MemberSignature Language="F#" Value="member this.Read : System.Web.HttpContext -&gt; byte[]" Usage="cookieHandler.Read context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="context">Der <see cref="T:System.Web.HttpContext" /> für die Anforderung.</param>
        <summary>Liest den Cookie, der der aktuellen Anforderung zugeordnet wird, die über den Standardnamen, die Domäne und den Pfad verfügt.</summary>
        <returns>Der Cookiewert oder <see langword="null" />, wenn das Cookie nicht gefunden wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Name des Cookies wird durch die <xref:System.IdentityModel.Services.CookieHandler.Name%2A>-Eigenschaft angegeben.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public byte[] Read (string name, System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] Read(string name, class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.Read(System.String,System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function Read (name As String, context As HttpContext) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ Read(System::String ^ name, System::Web::HttpContext ^ context);" />
      <MemberSignature Language="F#" Value="member this.Read : string * System.Web.HttpContext -&gt; byte[]" Usage="cookieHandler.Read (name, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="name">Der Name des zu lesenden Cookies.</param>
        <param name="context">Der <see cref="T:System.Web.HttpContext" /> für die Anforderung.</param>
        <summary>Liest den Cookie, der der angegebenen Anforderung zugeordnet ist, die über den angegebenen Namen sowie die Standarddomäne und den Pfad verfügt.</summary>
        <returns>Der Cookiewert oder <see langword="null" />, wenn das Cookie nicht gefunden wurde.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="name" /> hat den Wert <see langword="null" /> oder ist leer.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadCore">
      <MemberSignature Language="C#" Value="protected abstract byte[] ReadCore (string name, System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance unsigned int8[] ReadCore(string name, class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.ReadCore(System.String,System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function ReadCore (name As String, context As HttpContext) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract cli::array &lt;System::Byte&gt; ^ ReadCore(System::String ^ name, System::Web::HttpContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ReadCore : string * System.Web.HttpContext -&gt; byte[]" Usage="cookieHandler.ReadCore (name, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="name">Der Name des Cookies.</param>
        <param name="context">Der <see cref="T:System.Web.HttpContext" /> für die Anforderung.</param>
        <summary>Liest beim Überschreiben in einer abgeleiteten Klasse das Cookie, das den angegebenen Namen hat und welches der angegebenen Anforderung zugeordnet ist.</summary>
        <returns>Der Cookiewert oder <see langword="null" />, wenn das Cookie nicht gefunden wurde</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wird von den überladenen <xref:System.IdentityModel.Services.CookieHandler.Read%2A>-Methoden aufgerufen, um die eigentliche Arbeit beim Lesen des Cookies zu erledigen. Mit den <xref:System.IdentityModel.Services.CookieHandler.Read%2A>-Methoden wird sichergestellt, dass `name` eine nicht leere Zeichenfolge ist.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Sie müssen diese Methode überschreiben. Die Implementierung ist vollständig für den Entwickler. Im Normalfall lesen Implementierungen die Cookie-Daten aus der <see cref="P:System.Web.HttpRequest.Cookies" /> Collection, dies ist jedoch nicht zwingend erforderlich.</para></block>
      </Docs>
    </Member>
    <Member MemberName="RequireSsl">
      <MemberSignature Language="C#" Value="public virtual bool RequireSsl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RequireSsl" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Services.CookieHandler.RequireSsl" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property RequireSsl As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool RequireSsl { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.RequireSsl : bool with get, set" Usage="System.IdentityModel.Services.CookieHandler.RequireSsl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob das Cookie nur mit SSL verwendet werden soll, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn das Cookie nur über eine SSL-Verbindung verwendet werden soll; andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Steuert, ob das "sichere" Flag im Set-Cookie-Header für geschriebene Cookies ausgegeben wird. Wenn dieser Wert `true`ist, werden die Sitzungs Cookies nur über HTTPS verfügbar gemacht.  
  
 Diese Eigenschaft entspricht der <xref:System.Web.HttpCookie.Secure%2A?displayProperty=nameWithType>-Eigenschaft.  
  
 Die-Eigenschaft kann initialisiert werden, indem das `requireSSL`-Attribut für das [&lt;cookiehandler-&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/cookiehandler.md) -Element in der Konfiguration angegeben wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Write">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Schreibt ein Cookie.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (byte[] value, bool isPersistent, DateTime tokenExpirationTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Write(unsigned int8[] value, bool isPersistent, valuetype System.DateTime tokenExpirationTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.Write(System.Byte[],System.Boolean,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (value As Byte(), isPersistent As Boolean, tokenExpirationTime As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(cli::array &lt;System::Byte&gt; ^ value, bool isPersistent, DateTime tokenExpirationTime);" />
      <MemberSignature Language="F#" Value="member this.Write : byte[] * bool * DateTime -&gt; unit" Usage="cookieHandler.Write (value, isPersistent, tokenExpirationTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte[]" />
        <Parameter Name="isPersistent" Type="System.Boolean" />
        <Parameter Name="tokenExpirationTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">Der Cookiewert.</param>
        <param name="isPersistent"><see langword="true" />, wenn das Cookie persistent ist; <see langword="false" />, wenn das Cookie sich auf die Sitzung beschränkt, das heißt, es ist nur gültig bis der Browser auf der Clientseite geschlossen wird.</param>
        <param name="tokenExpirationTime">Die Ablaufzeit für das zugrunde liegende Token.</param>
        <summary>Schreibt ein Cookie, das der aktuellen Anforderung zugeordnet ist, die den angegebenen Wert, die angegebene Dauerhaftigkeit und die angegebene Ablaufzeit hat.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn der `isPersistent`-Parameter `false`ist, wird die Ablaufzeit des Cookies auf <xref:System.DateTime.MinValue?displayProperty=nameWithType>festgelegt. Wenn der `isPersistent`-Parameter `true`ist, wird die cookieablaufzeit auf den Wert der <xref:System.IdentityModel.Services.CookieHandler.PersistentSessionLifetime%2A>-Eigenschaft festgelegt, wenn Sie nicht `null` ist, oder wenn die <xref:System.IdentityModel.Services.CookieHandler.PersistentSessionLifetime%2A>-Eigenschaft `null`ist, wird die Ablaufzeit auf den Wert des `tokenExpirationTime`-Parameters festgelegt.  
  
 Der Name, die Domäne und der Pfad des Cookies werden durch die Eigenschaften <xref:System.IdentityModel.Services.CookieHandler.Name%2A>, <xref:System.IdentityModel.Services.CookieHandler.Domain%2A>und <xref:System.IdentityModel.Services.CookieHandler.Path%2A> angegeben. Die Anforderung wird durch <xref:System.Web.HttpContext.Current%2A>angegeben. Ob das Cookie nur über SSL gesendet werden soll, wird durch die <xref:System.IdentityModel.Services.CookieHandler.RequireSsl%2A>-Eigenschaft angegeben, und ob das Cookie aus Client seitigen Skripts ausgeblendet werden soll, wird durch die <xref:System.IdentityModel.Services.CookieHandler.HideFromClientScript%2A>-Eigenschaft angegeben.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="value" /> hat den Wert <see langword="null" /> oder ist leer.</exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (byte[] value, string name, DateTime expirationTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Write(unsigned int8[] value, string name, valuetype System.DateTime expirationTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.Write(System.Byte[],System.String,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (value As Byte(), name As String, expirationTime As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(cli::array &lt;System::Byte&gt; ^ value, System::String ^ name, DateTime expirationTime);" />
      <MemberSignature Language="F#" Value="member this.Write : byte[] * string * DateTime -&gt; unit" Usage="cookieHandler.Write (value, name, expirationTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte[]" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="expirationTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">Der Cookiewert.</param>
        <param name="name">Der Name des Cookies.</param>
        <param name="expirationTime">Die Ablaufzeit für das Cookie oder <see cref="F:System.DateTime.MinValue" /> für ein Sitzungscookie (auf die Sitzung beschränktes Cookie).</param>
        <summary>Schreibt ein Cookie, das der aktuellen Anforderung zugeordnet ist, die den angegebenen Namen, den angegebenen Wert und die angegebene Ablaufzeit hat.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Cookie-Domäne und der Cookie-Pfad werden durch die Eigenschaften <xref:System.IdentityModel.Services.CookieHandler.Domain%2A> und <xref:System.IdentityModel.Services.CookieHandler.Path%2A> angegeben. Die Anforderung wird durch <xref:System.Web.HttpContext.Current%2A?displayProperty=nameWithType>angegeben.  Die Anforderung wird durch <xref:System.Web.HttpContext.Current%2A>angegeben. Ob das Cookie nur über SSL gesendet werden soll, wird durch die <xref:System.IdentityModel.Services.CookieHandler.RequireSsl%2A>-Eigenschaft angegeben, und ob das Cookie aus Client seitigen Skripts ausgeblendet werden soll, wird durch die <xref:System.IdentityModel.Services.CookieHandler.HideFromClientScript%2A>-Eigenschaft angegeben.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="value" /> hat den Wert <see langword="null" /> oder ist leer.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="name" /> hat den Wert <see langword="null" /> oder ist leer.</exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (byte[] value, string name, DateTime expirationTime, System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Write(unsigned int8[] value, string name, valuetype System.DateTime expirationTime, class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.Write(System.Byte[],System.String,System.DateTime,System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (value As Byte(), name As String, expirationTime As DateTime, context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(cli::array &lt;System::Byte&gt; ^ value, System::String ^ name, DateTime expirationTime, System::Web::HttpContext ^ context);" />
      <MemberSignature Language="F#" Value="member this.Write : byte[] * string * DateTime * System.Web.HttpContext -&gt; unit" Usage="cookieHandler.Write (value, name, expirationTime, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte[]" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="expirationTime" Type="System.DateTime" />
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="value">Der Cookiewert.</param>
        <param name="name">Der Name des Cookies.</param>
        <param name="expirationTime">Die Ablaufzeit für das Cookie oder <see cref="F:System.DateTime.MinValue" /> für ein Sitzungscookie (auf die Sitzung beschränktes Cookie).</param>
        <param name="context">Der <see cref="T:System.Web.HttpContext" /> für die Anforderung.</param>
        <summary>Schreibt ein Cookie, das der angegebenen Anforderung zugeordnet ist, die den angegebenen Namen, den angegebenen Wert und die angegebene Ablaufzeit hat.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Cookie-Domäne und der Cookie-Pfad werden durch die Eigenschaften <xref:System.IdentityModel.Services.CookieHandler.Domain%2A> und <xref:System.IdentityModel.Services.CookieHandler.Path%2A> angegeben. Die Anforderung wird durch <xref:System.Web.HttpContext.Current%2A>angegeben. Ob das Cookie nur über SSL gesendet werden soll, wird durch die <xref:System.IdentityModel.Services.CookieHandler.RequireSsl%2A>-Eigenschaft angegeben, und ob das Cookie aus Client seitigen Skripts ausgeblendet werden soll, wird durch die <xref:System.IdentityModel.Services.CookieHandler.HideFromClientScript%2A>-Eigenschaft angegeben.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="value" /> hat den Wert <see langword="null" /> oder ist leer.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="name" /> hat den Wert <see langword="null" /> oder ist leer.</exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (byte[] value, string name, string path, string domain, DateTime expirationTime, bool requiresSsl, bool hideFromClientScript, System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Write(unsigned int8[] value, string name, string path, string domain, valuetype System.DateTime expirationTime, bool requiresSsl, bool hideFromClientScript, class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.Write(System.Byte[],System.String,System.String,System.String,System.DateTime,System.Boolean,System.Boolean,System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (value As Byte(), name As String, path As String, domain As String, expirationTime As DateTime, requiresSsl As Boolean, hideFromClientScript As Boolean, context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(cli::array &lt;System::Byte&gt; ^ value, System::String ^ name, System::String ^ path, System::String ^ domain, DateTime expirationTime, bool requiresSsl, bool hideFromClientScript, System::Web::HttpContext ^ context);" />
      <MemberSignature Language="F#" Value="member this.Write : byte[] * string * string * string * DateTime * bool * bool * System.Web.HttpContext -&gt; unit" Usage="cookieHandler.Write (value, name, path, domain, expirationTime, requiresSsl, hideFromClientScript, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte[]" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="domain" Type="System.String" />
        <Parameter Name="expirationTime" Type="System.DateTime" />
        <Parameter Name="requiresSsl" Type="System.Boolean" />
        <Parameter Name="hideFromClientScript" Type="System.Boolean" />
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="value">Der Cookiewert.</param>
        <param name="name">Der Name des Cookies.</param>
        <param name="path">Der Pfad den Cookie.</param>
        <param name="domain">Die Domäne für den Cookie fest.</param>
        <param name="expirationTime">Die Ablaufzeit für das Cookie oder <see cref="F:System.DateTime.MinValue" /> für ein Sitzungscookie (auf die Sitzung beschränktes Cookie).</param>
        <param name="requiresSsl"><see langword="true" />, wenn das Cookie nur über eine SSL-Verbindung verwendet werden soll; andernfalls <see langword="false" />.</param>
        <param name="hideFromClientScript"><see langword="true" />, wenn das Cookie aus dem Clientskript ausgeblendet werden soll; andernfalls <see langword="false" />.</param>
        <param name="context">Der <see cref="T:System.Web.HttpContext" /> für die Anforderung.</param>
        <summary>Schreibt ein Cookie, das der angegebenen Anforderung zugeordnet ist, die den angegebenen Namen, den angegebenen Wert, Domäne, Pfad und die angegebene Ablaufzeit und Sichtbarkeit hat.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="value" /> hat den Wert <see langword="null" /> oder ist leer.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="name" /> hat den Wert <see langword="null" /> oder ist leer.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCore">
      <MemberSignature Language="C#" Value="protected abstract void WriteCore (byte[] value, string name, string path, string domain, DateTime expirationTime, bool secure, bool httpOnly, System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void WriteCore(unsigned int8[] value, string name, string path, string domain, valuetype System.DateTime expirationTime, bool secure, bool httpOnly, class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.CookieHandler.WriteCore(System.Byte[],System.String,System.String,System.String,System.DateTime,System.Boolean,System.Boolean,System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub WriteCore (value As Byte(), name As String, path As String, domain As String, expirationTime As DateTime, secure As Boolean, httpOnly As Boolean, context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void WriteCore(cli::array &lt;System::Byte&gt; ^ value, System::String ^ name, System::String ^ path, System::String ^ domain, DateTime expirationTime, bool secure, bool httpOnly, System::Web::HttpContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member WriteCore : byte[] * string * string * string * DateTime * bool * bool * System.Web.HttpContext -&gt; unit" Usage="cookieHandler.WriteCore (value, name, path, domain, expirationTime, secure, httpOnly, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte[]" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="domain" Type="System.String" />
        <Parameter Name="expirationTime" Type="System.DateTime" />
        <Parameter Name="secure" Type="System.Boolean" />
        <Parameter Name="httpOnly" Type="System.Boolean" />
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="value">Der Cookiewert.</param>
        <param name="name">Der Name des Cookies.</param>
        <param name="path">Der Pfad den Cookie.</param>
        <param name="domain">Die Domäne für den Cookie fest.</param>
        <param name="expirationTime">Die Ablaufzeit für das Cookie oder <see cref="F:System.DateTime.MinValue" /> für ein Sitzungscookie (auf die Sitzung beschränktes Cookie).</param>
        <param name="secure"><see langword="true" />, wenn das Cookie nur über eine SSL-Verbindung verwendet werden soll; andernfalls <see langword="false" />.</param>
        <param name="httpOnly"><see langword="true" />, wenn das Cookie aus dem Clientskript ausgeblendet werden soll; andernfalls <see langword="false" />.</param>
        <param name="context">Der <see cref="T:System.Web.HttpContext" /> für die Anforderung.</param>
        <summary>Schreibt beim Überschreiben in einer abgeleiteten Klasse ein Cookie, das der angegebenen Anforderung zugeordnet ist, die den angegebenen Namen, Wert, Domäne, Pfad und Ablaufzeit, Dauerhaftigkeit und Sichtbarkeit besitzt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wird von den überladenen <xref:System.IdentityModel.Services.CookieHandler.Write%2A>-Methoden aufgerufen, um die eigentliche Arbeit beim Schreiben des Cookies zu erledigen. Mit den <xref:System.IdentityModel.Services.CookieHandler.Write%2A>-Methoden wird sichergestellt, dass `value` ein nicht leeres Bytearray ist und dass `name` und `path` nicht leere Zeichen folgen sind.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Sie müssen diese Methode überschreiben. Die Implementierung ist vollständig für den Entwickler. Im Normalfall schreiben Implementierungen die Cookie-Daten in die <see cref="P:System.Web.HttpResponse.Cookies" /> Auflistung, dies ist jedoch nicht zwingend erforderlich. Die meisten Parameter der-Methode werden normalerweise verwendet, um äquivalente Eigenschaften für ein oder mehrere <see cref="T:System.Web.HttpCookie" /> Objekte festzulegen.</para></block>
      </Docs>
    </Member>
  </Members>
</Type>

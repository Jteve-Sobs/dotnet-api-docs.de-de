<Type Name="IntranetZoneCredentialPolicy" FullName="Microsoft.Win32.IntranetZoneCredentialPolicy">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cf9f57bdf65a6f26cf1e2965c02261fbb922b20d" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37707524" /></Metadata><TypeSignature Language="C#" Value="public class IntranetZoneCredentialPolicy : System.Net.ICredentialPolicy" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit IntranetZoneCredentialPolicy extends System.Object implements class System.Net.ICredentialPolicy" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Win32.IntranetZoneCredentialPolicy" />
  <TypeSignature Language="VB.NET" Value="Public Class IntranetZoneCredentialPolicy&#xA;Implements ICredentialPolicy" />
  <TypeSignature Language="C++ CLI" Value="public ref class IntranetZoneCredentialPolicy : System::Net::ICredentialPolicy" />
  <TypeSignature Language="F#" Value="type IntranetZoneCredentialPolicy = class&#xA;    interface ICredentialPolicy" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Net.ICredentialPolicy</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Definiert eine Anmeldeinformationsrichtlinie für Ressourcenanforderungen, die mithilfe von <see cref="T:System.Net.WebRequest" /> und den daraus abgeleiteten Klassen erstellt werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Richtlinie werden die Anmeldeinformationen nur gesendet werden, wenn die angeforderte Ressource in der gleichen Domäne wie der Client ist, die die Anforderung stammt. Für viele Anwendungen ist dies die optimale Richtlinie, da verhindert, dass Anmeldeinformationen für das Netzwerk mit Anforderungen gesendet werden, die für Ressourcen, die nicht im Intranet befinden.  
  
> [!NOTE]
>  <xref:System.Net.ICredentialPolicy> Richtlinien werden nur aufgerufen, wenn die <xref:System.Net.WebRequest> oder <xref:System.Net.WebProxy> verknüpft hat Sie Anmeldeinformationen, die nicht mit der Anforderung `null`. Das Festlegen dieser Richtlinie hat keine Auswirkungen auf Anforderungen, die keine Anmeldeinformationen angeben.  
  
 Verwenden der <xref:System.Net.AuthenticationManager.CredentialPolicy%2A?displayProperty=nameWithType> -Eigenschaft zum Festlegen der <xref:Microsoft.Win32.IntranetZoneCredentialPolicy> Richtlinie. Die <xref:System.Net.IAuthenticationModule> , führt die Authentifizierung für die Anforderung Ruft die <xref:Microsoft.Win32.IntranetZoneCredentialPolicy.ShouldSendCredential%2A> Methode vor dem Ausführen der Authentifizierung. Wenn die angeforderte Ressource in einer anderen Domäne als der Client, der <xref:Microsoft.Win32.IntranetZoneCredentialPolicy.ShouldSendCredential%2A> Methodenrückgabe `false`, und die Authentifizierung wird nicht ausgeführt.  
  
 Diese Richtlinie wirkt sich auf alle Instanzen von <xref:System.Net.WebRequest> mit nicht-Null-Anmeldeinformationen in der aktuellen Anwendungsdomäne. Die Richtlinie kann nicht für einzelne Anforderungen überschrieben werden.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Erstellen einer Instanz von <xref:Microsoft.Win32.IntranetZoneCredentialPolicy> und verwenden, um die Anmeldeinformationsrichtlinie für die Anwendungsdomäne festgelegt.  
  
 [!code-cpp[NclCredPolicy#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCredPolicy/CPP/NCLCredPolicy.cpp#2)]
 [!code-csharp[NclCredPolicy#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCredPolicy/CS/websample.cs#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IntranetZoneCredentialPolicy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Win32.IntranetZoneCredentialPolicy.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntranetZoneCredentialPolicy();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:Microsoft.Win32.IntranetZoneCredentialPolicy" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Anwendungen verwenden Sie diesen Konstruktor zum Erstellen von Objekten, die verwendet werden können, Festlegen der <xref:System.Net.AuthenticationManager.CredentialPolicy%2A> Eigenschaft.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Erstellen einer Instanz dieser Klasse.  
  
 [!code-cpp[NclCredPolicy#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCredPolicy/CPP/NCLCredPolicy.cpp#2)]
 [!code-csharp[NclCredPolicy#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCredPolicy/CS/websample.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSendCredential">
      <MemberSignature Language="C#" Value="public virtual bool ShouldSendCredential (Uri challengeUri, System.Net.WebRequest request, System.Net.NetworkCredential credential, System.Net.IAuthenticationModule authModule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldSendCredential(class System.Uri challengeUri, class System.Net.WebRequest request, class System.Net.NetworkCredential credential, class System.Net.IAuthenticationModule authModule) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Win32.IntranetZoneCredentialPolicy.ShouldSendCredential(System.Uri,System.Net.WebRequest,System.Net.NetworkCredential,System.Net.IAuthenticationModule)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ShouldSendCredential (challengeUri As Uri, request As WebRequest, credential As NetworkCredential, authModule As IAuthenticationModule) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ShouldSendCredential(Uri ^ challengeUri, System::Net::WebRequest ^ request, System::Net::NetworkCredential ^ credential, System::Net::IAuthenticationModule ^ authModule);" />
      <MemberSignature Language="F#" Value="abstract member ShouldSendCredential : Uri * System.Net.WebRequest * System.Net.NetworkCredential * System.Net.IAuthenticationModule -&gt; bool&#xA;override this.ShouldSendCredential : Uri * System.Net.WebRequest * System.Net.NetworkCredential * System.Net.IAuthenticationModule -&gt; bool" Usage="intranetZoneCredentialPolicy.ShouldSendCredential (challengeUri, request, credential, authModule)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Net.ICredentialPolicy.ShouldSendCredential(System.Uri,System.Net.WebRequest,System.Net.NetworkCredential,System.Net.IAuthenticationModule)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="challengeUri" Type="System.Uri" />
        <Parameter Name="request" Type="System.Net.WebRequest" />
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="authModule" Type="System.Net.IAuthenticationModule" />
      </Parameters>
      <Docs>
        <param name="challengeUri">Der <see cref="T:System.Uri" />, der die Anforderung erhalten soll.</param>
        <param name="request">Die <see cref="T:System.Net.WebRequest" />, die die angeforderte Ressource darstellt.</param>
        <param name="credential">Die <see cref="T:System.Net.NetworkCredential" />, die mit der Anforderung gesendet wird, wenn diese Methode <see langword="true" /> zurückgibt.</param>
        <param name="authModule">Das <see cref="T:System.Net.IAuthenticationModule" />, das die Authentifizierung durchführt, wenn eine Authentifizierung erforderlich ist.</param>
        <summary>Gibt einen <see cref="T:System.Boolean" /> zurück, der angibt, ob die Anmeldeinformationen des Clients mit einer Ressourcenanforderung gesendet werden, die anhand eines <see cref="T:System.Net.WebRequest" /> erstellt wurde.</summary>
        <returns><see langword="true" />, wenn sich die angeforderte Ressource in derselben Domäne befindet wie der Client, der die Anforderung erstellt, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Anwendungen rufen diese Methode nicht direkt. durch Aufruf von der <xref:System.Net.IAuthenticationModule> , die zum Ausführen der Authentifizierung mit dem Server verantwortlich ist. Wenn diese Methode zurückgibt `false`, <xref:System.Net.IAuthenticationModule> authentifiziert den Client an den Server nicht.  
  
 Diese Methode wird aufgerufen, nur für Anforderungen, die Anmeldeinformationen angeben, oder verwenden eine <xref:System.Net.WebProxy> -Objekt, das Anmeldeinformationen angibt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, ableiten von <xref:Microsoft.Win32.IntranetZoneCredentialPolicy> können Sie die Anmeldeinformationen für die Anforderungen gesendet werden, die Secure Hypertext Transfer Protocol (HTTPS) mit Standardauthentifizierung zu verwenden. Verwenden HTTPS und die Standardauthentifizierung, ist das Kennwort des Benutzers verschlüsselt, bevor Sie über das Netzwerk gesendet werden.  
  
 [!code-cpp[NclCredPolicy#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCredPolicy/CPP/NCLCredPolicy.cpp#4)]
 [!code-csharp[NclCredPolicy#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCredPolicy/CS/websample.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="SoapHttpClientProtocol" FullName="System.Web.Services.Protocols.SoapHttpClientProtocol">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d074397b6e73e9390192ca3db33fa95f08a0c408" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48728382" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SoapHttpClientProtocol : System.Web.Services.Protocols.HttpWebClientProtocol" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SoapHttpClientProtocol extends System.Web.Services.Protocols.HttpWebClientProtocol" />
  <TypeSignature Language="DocId" Value="T:System.Web.Services.Protocols.SoapHttpClientProtocol" />
  <TypeSignature Language="VB.NET" Value="Public Class SoapHttpClientProtocol&#xA;Inherits HttpWebClientProtocol" />
  <TypeSignature Language="C++ CLI" Value="public ref class SoapHttpClientProtocol : System::Web::Services::Protocols::HttpWebClientProtocol" />
  <TypeSignature Language="F#" Value="type SoapHttpClientProtocol = class&#xA;    inherit HttpWebClientProtocol" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Services.Protocols.HttpWebClientProtocol</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Gibt den Klassenclient an, von dem Proxys bei Verwendung von SOAP abgeleitet werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie einen XML-Webdienstclient erstellen, klicken Sie dann eine Proxy-Klasse abgeleitet wird direkt oder indirekt von <xref:System.Web.Services.Protocols.WebClientProtocol> muss für den XML-Webdienst erstellt werden. Wenn die XML-Webdienstclient unter Verwendung von SOAP Ruft, die Proxyklasse muss abgeleitet <xref:System.Web.Services.Protocols.SoapHttpClientProtocol>, die sich daraus ableitet <xref:System.Web.Services.Protocols.HttpWebClientProtocol>. <xref:System.Web.Services.Protocols.HttpWebClientProtocol>, leitet sich wiederum von <xref:System.Web.Services.Protocols.WebClientProtocol>.  
  
 Mit einem XML-Webdienst kommunizieren kann, erstellen Sie eine Proxyklasse, die direkt oder indirekt von abgeleitet <xref:System.Web.Services.Protocols.WebClientProtocol> für den XML-Webdienst aufgerufen werden soll. Verwenden Sie anstelle die Proxyklasse manuell erstellen, das Web Services Description Language Tool (Wsdl.exe), um eine Proxyklasse für einen angegebenen XML-Webdienst die dienstbeschreibung zu erstellen. Beim Generieren einer Proxyklasse für den SOAP-Protokoll erfolgen über synchrone Aufrufe an die XML-Webdienstmethoden der <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke%2A> -Methode, während asynchrone Aufrufe werden mithilfe der <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke%2A> Methode und die <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke%2A> Methode.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird eine von Wsdl.exe für die generierte Proxyklasse den `Math` XML-Webdienst. Die Proxy-Klasse leitet sich von <xref:System.Web.Services.Protocols.SoapHttpClientProtocol>, die abgeleitet wird von der abstrakten <xref:System.Web.Services.Protocols.WebClientProtocol> Klasse.  
  
 [!code-cpp[Classic SoapHttpClientProtocol Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapHttpClientProtocol Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol Example/CS/source.cs#1)]
 [!code-vb[Classic SoapHttpClientProtocol Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapHttpClientProtocol Example/VB/source.vb#1)]  
  
 Im folgenden Codebeispiel wird die `Math` XML-Webdienst, von dem die vorherige Proxyklasse generiert wurde.  
  
> [!IMPORTANT]
>  Dieses Beispiel umfasst ein Textfeld, das Benutzereingaben akzeptiert, die ein potenzielles Sicherheitsrisiko darstellen. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Übersicht über Skriptangriffe](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
  
  
 ]]></format>
    </remarks>
    <threadsafe>Dieser Typ ist threadsicher.</threadsafe>
    <block subset="none" type="overrides">
      <para>Wenn Sie diese Klasse überschreiben, können Sie Methoden in der abgeleiteten Klasse einführen, die für einen bestimmten Typ von XML-Webdienst spezifisch sind. Die Methoden, erfassen die Parameter und der Basisklasse zur Durchführung der Aufgaben für die Kommunikation mit den XML-Webdienst aufrufen. Wenn die eingeführten Methoden asynchron sind, rufen Sie die <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" /> Methode und die <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)" /> Methode. Wenn die eingeführten Methoden synchron sind, rufen Sie die <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])" /> Methode. Der überschriebene Konstruktor in der Regel legt die <see cref="P:System.Web.Services.Protocols.WebClientProtocol.Url" /> Eigenschaft, um die URL des XML-Webdienstmethode.</para>
    </block>
    <altmember cref="T:System.Web.Services.Protocols.HttpSimpleClientProtocol" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SoapHttpClientProtocol ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SoapHttpClientProtocol();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="protected IAsyncResult BeginInvoke (string methodName, object[] parameters, AsyncCallback callback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.IAsyncResult BeginInvoke(string methodName, object[] parameters, class System.AsyncCallback callback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Function BeginInvoke (methodName As String, parameters As Object(), callback As AsyncCallback, asyncState As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; IAsyncResult ^ BeginInvoke(System::String ^ methodName, cli::array &lt;System::Object ^&gt; ^ parameters, AsyncCallback ^ callback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : string * obj[] * AsyncCallback * obj -&gt; IAsyncResult" Usage="soapHttpClientProtocol.BeginInvoke (methodName, parameters, callback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="methodName">Der Name der XML-Webdienstmethode in der abgeleiteten Klasse, die die <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" />-Methode aufruft.</param>
        <param name="parameters">Ein Array von Objekten mit den Parametern, die an den XML-Webdienst übergeben werden sollen. Die Reihenfolge der Werte im Array entspricht der Reihenfolge der Parameter in der Aufrufmethode der abgeleiteten Klasse.</param>
        <param name="callback">Der Delegat, der aufgerufen werden soll, wenn der asynchrone Aufruf abgeschlossen ist. Wenn <c>callback</c> auf <see langword="null" /> festgelegt ist, wird der Delegat nicht aufgerufen.</param>
        <param name="asyncState">Zusätzliche vom Aufrufer bereitgestellte Informationen.</param>
        <summary>Startet den asynchronen Aufruf einer XML-Webdienstmethode unter Verwendung von SOAP.</summary>
        <returns>Ein <see cref="T:System.IAsyncResult" />, das an die <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)" />-Methode übergeben wird, um die Rückgabewerte des Remotemethodenaufrufs abzurufen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der Regel würden Sie nicht Aufrufen der <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> -Methode direkt, es sei denn, Sie Ihre eigenen Proxyklasse für einen XML-Webdienst erstellen.  
  
 Eine Proxyklasse, die vom Web Services Description Language Tool (Wsdl.exe) aus einer Dienstbeschreibung generierten macht die XML-Webdienstmethoden verfügbar, als Namen abgeleitet von der Proxyklasse, die XML-Webdienstmethoden synchron aufzurufen. Um die XML-Webdienstmethoden asynchron aufzurufen, werden zwei zusätzliche Methoden hinzugefügt, an die Proxyklasse für jede XML-Webdienstmethode, mit der `Begin` Präfix hinzugefügt, die auf den Namen der XML-Webdienstmethode und eine mit der `End` Präfix hinzugefügt.  
  
 Die Proxyklasse ruft die <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> Methode zum Starten eines asynchronen Aufrufs an die XML-Webdienstmethode. Angenommen, ein XML-Webdienst eine XML-Webdienstmethode mit dem Namen verfügbar macht `Add`, die Proxyklasse enthält eine Methode namens `BeginAdd`, zum Starten eines Aufrufs der XML-Webdienstmethode-Dienstmethode. Im Code für die `BeginAdd`, wird ein Aufruf ausgelöst, um die <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> -Methode und die Ergebnisse werden in den erwarteten Rückgabetyp für platziert `Add`.  
  
 Die `methodName` wird verwendet, um die benutzerdefinierten Attribute zu finden, die an die Methode, wie z. B. hinzugefügt wurden möglicherweise <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>. <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute> enthält zusätzliche Informationen zu den abgeleiteten Methode, die für das SOAP-Protokoll erforderlich ist.  
  
 `asyncState` übergeben wird `callback` und steht in der <xref:System.IAsyncResult> zurückgegeben, die von der <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> Methode. Die `asyncState` Parameter kann verwendet werden, um die Übergabe von Informationen über den Kontext des asynchronen Aufrufs, angegeben der `callback` Parameter, um der Delegat, der das Ergebnis verarbeitet.  
  
   
  
## Examples  
 Das folgende Codebeispiel ist eine Proxyklasse, die vom Web Services Description Language Tool (Wsdl.exe) generiert, für die `Math` XML-Webdienst. In der `BeginAdd` Methode der Proxyklasse, die <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> Methode startet einen asynchronen Aufruf an die `Add` XML-Webdienstmethode.  
  
 [!code-cpp[Classic SoapHttpClientProtocol.BeginInvoke Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.BeginInvoke Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapHttpClientProtocol.BeginInvoke Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.BeginInvoke Example/CS/source.cs#1)]
 [!code-vb[Classic SoapHttpClientProtocol.BeginInvoke Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.BeginInvoke Example/VB/source.vb#1)]  
  
 Im folgenden Codebeispiel wird die `Math` XML-Webdienst, mit dem die vorherige Proxyklasse erstellt wurde.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.Services.Protocols.SoapException">Die Anforderung hat den Servercomputer erreicht, wurde jedoch nicht erfolgreich verarbeitet.</exception>
        <exception cref="T:System.InvalidOperationException">Die Anforderung war nicht gültig für den aktuellen Zustand des Objekts.</exception>
        <exception cref="T:System.Net.WebException">Fehler beim Zugriff auf das Netzwerk.</exception>
        <altmember cref="T:System.IAsyncResult" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)" />
        <altmember cref="T:System.Web.Services.Protocols.SoapDocumentMethodAttribute" />
        <altmember cref="T:System.Web.Services.Protocols.WebClientProtocol" />
      </Docs>
    </Member>
    <Member MemberName="Discover">
      <MemberSignature Language="C#" Value="public void Discover ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Discover() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover" />
      <MemberSignature Language="VB.NET" Value="Public Sub Discover ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Discover();" />
      <MemberSignature Language="F#" Value="member this.Discover : unit -&gt; unit" Usage="soapHttpClientProtocol.Discover " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wird dynamisch an einen im Discoverydokument unter <see cref="P:System.Web.Services.Protocols.WebClientProtocol.Url" /> beschriebenen XML-Webdienst gebunden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein XML-Webdienstclient kann dynamische Bindung an eine XML-Webdienst als dem verwiesen wird, in die Proxy-Klasse mit dem <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover%2A> Methode. In der Regel die <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> Eigenschaft bezieht sich auf die Basisadresse des XML-Webdiensts. Allerdings vor dem Aufrufen der <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover%2A> legen Sie die Methode, die <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> Eigenschaft an eine URL eines Discovery-Dokuments. Die <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover%2A> Methode versucht, eine Übereinstimmung gefunden, im Discovery-Dokument für die in der Proxyklasse definierte Bindung, und binden dann dynamisch zuzuweisen. Bei erfolgreicher Ausführung werden die nachfolgenden Methodenaufrufe an den XML-Webdienst, der im Discovery-Dokument beschriebenen weitergeleitet.  
  
 Wenn die Proxy-Klasse mit dem Web Services Description Language Tool (Wsdl.exe) erstellt wird, definiert die Proxy-Klasse die Bindung implementiert wird, durch die XML-Webdienstmethoden Ruft mithilfe der <xref:System.Web.Services.WebServiceBindingAttribute>. Wenn ein XML-Webdienst mehrere Bindungen implementiert, erstellt Wsdl.exe eine Proxyklasse für jede Bindung. Angewendet auf jede Proxyklasse ist eine <xref:System.Web.Services.WebServiceBindingAttribute> , die den Namen der Bindung und den Namespace definiert. Das Discovery-Dokument, das Festlegen der <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> Eigenschaft muss einen Verweis auf einen XML-Webdienst, die dem gleichen Namen und Namespace implementiert enthalten oder eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird eine Proxyklasse generiert mithilfe des Hilfsprogramms Wsdl.exe für die `Math` XML-Webdienst. Ein <xref:System.Web.Services.WebServiceBindingAttribute> gilt, an die `Math` Proxyklasse, die auf den Bindungsnamen festlegen `MathSoap` und dessen Namespace um `http://tempuri.org/`.  
  
 [!code-cpp[SoapHttpClientProtocol.Discover Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SoapHttpClientProtocol.Discover Example/CPP/source.cpp#1)]
 [!code-csharp[SoapHttpClientProtocol.Discover Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapHttpClientProtocol.Discover Example/CS/source.cs#1)]
 [!code-vb[SoapHttpClientProtocol.Discover Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapHttpClientProtocol.Discover Example/VB/source.vb#1)]  
  
 Im folgenden Codebeispiel wird ein Webdienstclient mithilfe der vorherigen Proxyklasse. In der `EnterBtn_Click` -Ereignis des Webformulars, die XML-Webdienstclient Ruft die <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover%2A> Methode, die dynamisch an die URL, die vom Benutzer bereitgestellten binden möchten.  
  
> [!IMPORTANT]
>  Dieses Beispiel umfasst ein Textfeld, das Benutzereingaben akzeptiert, die ein potenzielles Sicherheitsrisiko darstellen. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Übersicht über Skriptangriffe](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-csharp[SoapHttpClientProtocol.Discover Example#2](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapHttpClientProtocol.Discover Example/CS/sourcecs.aspx#2)]
 [!code-vb[SoapHttpClientProtocol.Discover Example#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapHttpClientProtocol.Discover Example/VB/sourcevb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Für die Proxyklasse wurde keine Bindung definiert.</exception>
        <altmember cref="T:System.Web.Services.WebServiceBindingAttribute" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/fxx6cfx2(v=vs.100)">XML-Webdienstsuche</related>
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="protected object[] EndInvoke (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object[] EndInvoke(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Protected Function EndInvoke (asyncResult As IAsyncResult) As Object()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; cli::array &lt;System::Object ^&gt; ^ EndInvoke(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndInvoke : IAsyncResult -&gt; obj[]" Usage="soapHttpClientProtocol.EndInvoke asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">Das von der <see cref="T:System.IAsyncResult" />-Methode zurückgegebene <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" />.</param>
        <summary>Beendet den asynchronen Aufruf einer XML-Webdienstmethode unter Verwendung von SOAP.</summary>
        <returns>Ein Array von Objekten mit dem Rückgabewert und allen durch Verweis übergebenen Parametern oder <see langword="out" />-Parametern der abgeleiteten Klassenmethode.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der Regel würden Sie nicht Aufrufen der <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A> -Methode direkt, es sei denn, Sie Ihre eigenen Proxyklasse für einen XML-Webdienst erstellen.  
  
 Eine Proxyklasse, die von der Web Services Description Language Tool (Wsdl.exe) für einen XML-Webdienst generierten macht die XML-Webdienstmethoden verfügbar, als Namen aus der Proxyklasse für den XML-Webdienstmethoden synchron aufrufen. Zum asynchronen Aufrufen der XML-Webdienstmethoden werden zwei zusätzliche Methoden hinzugefügt, an die Proxyklasse für jede XML-Webdienstmethode, mit der `Begin` Präfix hinzugefügt, die auf den Namen der XML-Webdienstmethode und eine mit der `End` Präfix hinzugefügt.  
  
 Die Proxyklasse ruft die <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A> -Methode zum Abschließen eines asynchronen Aufrufs an die XML-Webdienstmethode. Angenommen, ein XML-Webdienst eine XML-Webdienstmethode mit dem Namen verfügbar macht `Add`, die Proxyklasse enthält eine Methode namens `EndAdd`, für den Abschluss des asynchronen Aufrufs einer XML-Webdienstmethode-Dienstmethode. Im Code für die `EndAdd` wird ein Aufruf ausgelöst, um die <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A> -Methode, und klicken Sie dann die Ergebnisse werden in den erwarteten Rückgabetyp für platziert `Add`.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird eine von Wsdl.exe für die generierte Proxyklasse den `Math` XML-Webdienst. In der `EndAdd` Methode der Proxyklasse, die <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A> Methode schließt den asynchronen Aufruf an die `Add` XML-Webdienstmethode.  
  
 [!code-cpp[Classic SoapHttpClientProtocol.EndInvoke Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.EndInvoke Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapHttpClientProtocol.EndInvoke Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.EndInvoke Example/CS/source.cs#1)]
 [!code-vb[Classic SoapHttpClientProtocol.EndInvoke Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.EndInvoke Example/VB/source.vb#1)]  
  
 Im folgenden Codebeispiel wird die `Math` XML-Webdienst, mit dem die vorherige Proxyklasse erstellt wurde.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> ist nicht der Rückgabewert aus der <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" />-Methode.</exception>
        <exception cref="T:System.Web.Services.Protocols.SoapException">Die Anforderung hat den Servercomputer erreicht, wurde jedoch nicht erfolgreich verarbeitet.</exception>
        <exception cref="T:System.InvalidOperationException">Die Anforderung war nicht gültig für den aktuellen Zustand des Objekts.</exception>
        <exception cref="T:System.Net.WebException">Fehler beim Zugriff auf das Netzwerk.</exception>
        <altmember cref="T:System.IAsyncResult" />
        <altmember cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" />
        <altmember cref="T:System.Web.Services.Protocols.WebClientProtocol" />
      </Docs>
    </Member>
    <Member MemberName="GetReaderForMessage">
      <MemberSignature Language="C#" Value="protected virtual System.Xml.XmlReader GetReaderForMessage (System.Web.Services.Protocols.SoapClientMessage message, int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xml.XmlReader GetReaderForMessage(class System.Web.Services.Protocols.SoapClientMessage message, int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetReaderForMessage (message As SoapClientMessage, bufferSize As Integer) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xml::XmlReader ^ GetReaderForMessage(System::Web::Services::Protocols::SoapClientMessage ^ message, int bufferSize);" />
      <MemberSignature Language="F#" Value="abstract member GetReaderForMessage : System.Web.Services.Protocols.SoapClientMessage * int -&gt; System.Xml.XmlReader&#xA;override this.GetReaderForMessage : System.Web.Services.Protocols.SoapClientMessage * int -&gt; System.Xml.XmlReader" Usage="soapHttpClientProtocol.GetReaderForMessage (message, bufferSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Web.Services.Protocols.SoapClientMessage" />
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">Eine <see cref="T:System.Web.Services.Protocols.SoapClientMessage" />, die den <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /> zum Initialisieren des <see cref="T:System.Xml.XmlReader" /> zur Verfügung stellt.</param>
        <param name="bufferSize">Die ursprüngliche Puffergröße des vom <see cref="T:System.IO.StreamReader" /> verwendeten <see cref="T:System.Xml.XmlReader" />.</param>
        <summary>Gibt einen mit der <see cref="T:System.Xml.XmlReader" />-Eigenschaft des <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" />-Parameters initialisierten <see cref="T:System.Web.Services.Protocols.SoapClientMessage" /> zurück.</summary>
        <returns>Ein mit der <see cref="T:System.Xml.XmlReader" />-Eigenschaft des <paramref name="message" />-Parameters initialisierter <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWebRequest">
      <MemberSignature Language="C#" Value="protected override System.Net.WebRequest GetWebRequest (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Net.WebRequest GetWebRequest(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest(System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Net::WebRequest ^ GetWebRequest(Uri ^ uri);" />
      <MemberSignature Language="F#" Value="override this.GetWebRequest : Uri -&gt; System.Net.WebRequest" Usage="soapHttpClientProtocol.GetWebRequest uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebRequest</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">Der beim Erstellen der <see cref="T:System.Uri" /> zu verwendende <see cref="T:System.Net.WebRequest" />.</param>
        <summary>Erstellt einen <see cref="T:System.Net.WebRequest" /> für das angegebene <paramref name="uri" />.</summary>
        <returns>Die <see cref="T:System.Net.WebRequest" /> für die angegebene URI.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode kann überschrieben werden, zum Anpassen der <xref:System.Net.WebRequest> bevor Sie die XML-Webdienstmethode Dienst angefordert wird. Beispielsweise können Sie einen benutzerdefinierten Header der Anforderung hinzufügen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Der <paramref name="uri" />-Parameter ist <see langword="null" />.</exception>
        <altmember cref="T:System.Net.WebRequest" />
        <altmember cref="T:System.Web.Services.Protocols.WebClientProtocol" />
        <altmember cref="M:System.Web.Services.Protocols.WebClientProtocol.GetWebResponse(System.Net.WebRequest)" />
        <altmember cref="T:System.Net.HttpWebRequest" />
        <altmember cref="T:System.Uri" />
      </Docs>
    </Member>
    <Member MemberName="GetWriterForMessage">
      <MemberSignature Language="C#" Value="protected virtual System.Xml.XmlWriter GetWriterForMessage (System.Web.Services.Protocols.SoapClientMessage message, int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xml.XmlWriter GetWriterForMessage(class System.Web.Services.Protocols.SoapClientMessage message, int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetWriterForMessage (message As SoapClientMessage, bufferSize As Integer) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xml::XmlWriter ^ GetWriterForMessage(System::Web::Services::Protocols::SoapClientMessage ^ message, int bufferSize);" />
      <MemberSignature Language="F#" Value="abstract member GetWriterForMessage : System.Web.Services.Protocols.SoapClientMessage * int -&gt; System.Xml.XmlWriter&#xA;override this.GetWriterForMessage : System.Web.Services.Protocols.SoapClientMessage * int -&gt; System.Xml.XmlWriter" Usage="soapHttpClientProtocol.GetWriterForMessage (message, bufferSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Web.Services.Protocols.SoapClientMessage" />
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">Eine <see cref="T:System.Web.Services.Protocols.SoapClientMessage" />, die den <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /> zum Initialisieren des <see cref="T:System.Xml.XmlWriter" /> zur Verfügung stellt.</param>
        <param name="bufferSize">Die ursprüngliche Puffergröße des vom <see cref="T:System.IO.StreamWriter" /> verwendeten <see cref="T:System.Xml.XmlWriter" />.</param>
        <summary>Gibt einen mit der <see cref="T:System.Xml.XmlWriter" />-Eigenschaft des <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" />-Parameters initialisierten <see cref="T:System.Web.Services.Protocols.SoapClientMessage" /> zurück.</summary>
        <returns>Ein mit der <see cref="T:System.Xml.XmlWriter" />-Eigenschaft des <paramref name="message" />-Parameters initialisierter <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="protected object[] Invoke (string methodName, object[] parameters);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object[] Invoke(string methodName, object[] parameters) cil managed" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Protected Function Invoke (methodName As String, parameters As Object()) As Object()" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; cli::array &lt;System::Object ^&gt; ^ Invoke(System::String ^ methodName, cli::array &lt;System::Object ^&gt; ^ parameters);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="C#" Value="protected object[] Invoke (string method_name, object[] parameters);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object[] Invoke(string method_name, object[] parameters) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])" FrameworkAlternate="xamarinandroid-7.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinios-10.8;xamarinmac-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Protected Function Invoke (method_name As String, parameters As Object()) As Object()" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; cli::array &lt;System::Object ^&gt; ^ Invoke(System::String ^ method_name, cli::array &lt;System::Object ^&gt; ^ parameters);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.Invoke : string * obj[] -&gt; obj[]" Usage="soapHttpClientProtocol.Invoke (method_name, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
        <Parameter Name="method_name" Type="System.String" Index="0" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="parameters" Type="System.Object[]" Index="1" />
      </Parameters>
      <Docs>
        <param name="methodName">Der Name der XML-Webdienstmethode.</param>
        <param name="method_name">Der Name der XML-Webdienstmethode.</param>
        <param name="parameters">Ein Array von Objekten mit den Parametern, die an den XML-Webdienst übergeben werden sollen. Die Reihenfolge der Werte im Array entspricht der Reihenfolge der Parameter in der Aufrufmethode der abgeleiteten Klasse.</param>
        <summary>Ruft eine XML-Webdienstmethode unter Verwendung von SOAP synchron auf.</summary>
        <returns>Ein Array von Objekten mit dem Rückgabewert und allen <see langword="reference" />-Parametern bzw. <see langword="out" />-Parametern der abgeleiteten Klassenmethode.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der Regel nicht Aufrufen der <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke%2A> -Methode direkt, es sei denn, Sie Ihre eigenen Proxyklasse für einen XML-Webdienst erstellen.  
  
 Eine Proxyklasse generiert, die vom Web Services Description Language Tool (Wsdl.exe) für einen XML-Webdienst macht die XML-Webdienstmethoden als Namen aus der Proxyklasse verfügbar. Die Proxyklasse ruft die <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke%2A> ein XML-Webdienst-Methodenaufruf aufzurufende Methode. Angenommen, ein XML-Webdienst eine XML-Webdienstmethode mit dem Namen verfügbar macht `Add`, die Proxyklasse enthält auch eine Methode namens `Add`. Im Code für die `Add` -Methode in der Proxyklasse, erfolgt ein synchroner Aufruf, der XML-Webdienstmethode durch den <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke%2A> -Methode, und klicken Sie dann die Ergebnisse werden in den erwarteten Rückgabetyp für platziert `Add`.  
  
 Die `methodName` Parameter wird verwendet, um die benutzerdefinierten Attribute zu finden, die an die Methode, wie z. B. hinzugefügt wurden möglicherweise <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>. <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute> enthält zusätzliche Informationen zu der abgeleiteten Methode, die für das SOAP-Protokoll erforderlich ist.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird eine von Wsdl.exe für die generierte Proxyklasse den `Math` XML-Webdienst. In der `Add` Methode der Proxyklasse, die <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke%2A> Methode ist der Aufruf der `Add` XML-Webdienstmethode.  
  
 [!code-cpp[Classic SoapHttpClientProtocol.Invoke Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.Invoke Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapHttpClientProtocol.Invoke Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.Invoke Example/CS/source.cs#1)]
 [!code-vb[Classic SoapHttpClientProtocol.Invoke Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.Invoke Example/VB/source.vb#1)]  
  
 Im folgenden Codebeispiel wird die `Math` XML-Webdienst, mit dem die vorherige Proxyklasse erstellt wurde.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.Services.Protocols.SoapException">Die Anforderung hat den Servercomputer erreicht, wurde jedoch nicht erfolgreich verarbeitet.</exception>
        <exception cref="T:System.InvalidOperationException">Die Anforderung war nicht gültig für den aktuellen Zustand des Objekts.</exception>
        <exception cref="T:System.Net.WebException">Fehler beim Zugriff auf das Netzwerk.</exception>
        <altmember cref="T:System.Web.Services.Protocols.SoapDocumentMethodAttribute" />
        <altmember cref="T:System.Web.Services.Protocols.WebClientProtocol" />
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ruft die angegebene Methode asynchron auf.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="protected void InvokeAsync (string methodName, object[] parameters, System.Threading.SendOrPostCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokeAsync(string methodName, object[] parameters, class System.Threading.SendOrPostCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InvokeAsync (methodName As String, parameters As Object(), callback As SendOrPostCallback)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InvokeAsync(System::String ^ methodName, cli::array &lt;System::Object ^&gt; ^ parameters, System::Threading::SendOrPostCallback ^ callback);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : string * obj[] * System.Threading.SendOrPostCallback -&gt; unit" Usage="soapHttpClientProtocol.InvokeAsync (methodName, parameters, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="callback" Type="System.Threading.SendOrPostCallback" />
      </Parameters>
      <Docs>
        <param name="methodName">Der Name der aufzurufenden Methode.</param>
        <param name="parameters">Die an die Methode zu übergebenden Parameter.</param>
        <param name="callback">Der nach Abschluss des Methodenaufrufs aufgerufene Delegat.</param>
        <summary>Ruft die angegebene Methode asynchron auf.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="protected void InvokeAsync (string methodName, object[] parameters, System.Threading.SendOrPostCallback callback, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokeAsync(string methodName, object[] parameters, class System.Threading.SendOrPostCallback callback, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InvokeAsync (methodName As String, parameters As Object(), callback As SendOrPostCallback, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InvokeAsync(System::String ^ methodName, cli::array &lt;System::Object ^&gt; ^ parameters, System::Threading::SendOrPostCallback ^ callback, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : string * obj[] * System.Threading.SendOrPostCallback * obj -&gt; unit" Usage="soapHttpClientProtocol.InvokeAsync (methodName, parameters, callback, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="callback" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="methodName">Der Name der aufzurufenden Methode.</param>
        <param name="parameters">Die an die Methode zu übergebenden Parameter.</param>
        <param name="callback">Der nach Abschluss des Methodenaufrufs aufgerufene Delegat.</param>
        <param name="userState">Ein Objekt, mit dem Zustandsinformationen an den <c>callback</c>-Delegaten übergeben werden.</param>
        <summary>Ruft die angegebene Methode asynchron auf.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SoapVersion">
      <MemberSignature Language="C#" Value="public System.Web.Services.Protocols.SoapProtocolVersion SoapVersion { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.Services.Protocols.SoapProtocolVersion SoapVersion" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion" />
      <MemberSignature Language="VB.NET" Value="Public Property SoapVersion As SoapProtocolVersion" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::Services::Protocols::SoapProtocolVersion SoapVersion { System::Web::Services::Protocols::SoapProtocolVersion get(); void set(System::Web::Services::Protocols::SoapProtocolVersion value); };" />
      <MemberSignature Language="F#" Value="member this.SoapVersion : System.Web.Services.Protocols.SoapProtocolVersion with get, set" Usage="System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Services.Protocols.SoapProtocolVersion</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Version des SOAP-Protokolls ab, mit dem die SOAP-Anforderung an den XML-Webdienst ausgeführt wird, oder legt diese fest.</summary>
        <value>Einer der <see cref="T:System.Web.Services.Protocols.SoapProtocolVersion" />-Werte. Der Standardwert ist <see cref="F:System.Web.Services.Protocols.SoapProtocolVersion.Soap11" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion%2A> Eigenschaft festgelegt ist, in der Proxyklasse, die vom Web Services Description Language Tool (Wsdl.exe) generiert werden, um <xref:System.Web.Services.Protocols.SoapProtocolVersion.Soap11> standardmäßig ein WSDL-Dokument für einen XML-Webdienst SOAP, Version 1.1 unterstützt. Allerdings bei ein XML-Webdienst unterstützt nur SOAP 1.2, Wsdl.exe legt die <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion%2A> Eigenschaft <xref:System.Web.Services.Protocols.SoapProtocolVersion.Soap12>. Mit die Version des SOAP-Protokolls wählen beim Generieren der Proxyklasse mit Wsdl.exe die `/protocol` wechseln Sie mit der `SOAP` oder `SOAP12` Einstellungen Festlegen der <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion%2A> Eigenschaft <xref:System.Web.Services.Protocols.SoapProtocolVersion.Soap11> und <xref:System.Web.Services.Protocols.SoapProtocolVersion.Soap12>bzw. .  
  
   
  
## Examples  
 Das folgende Codebeispiel legt fest, die Version des Protokolls für die Kommunikation mit einem XML-Webdienst auf SOAP 1.2 verwendet wird.  
  
 [!code-aspx-csharp[SoapHttpClientProtocol.SoapVersion#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapHttpClientProtocol.SoapVersion/CS/serverusageclientcs.aspx#1)]
 [!code-aspx-vb[SoapHttpClientProtocol.SoapVersion#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapHttpClientProtocol.SoapVersion/VB/serverusageclientvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Services.Protocols.SoapProtocolVersion" />
        <altmember cref="P:System.Web.HttpContext.Items" />
      </Docs>
    </Member>
  </Members>
</Type>
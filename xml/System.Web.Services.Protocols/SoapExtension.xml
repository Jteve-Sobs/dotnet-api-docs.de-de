<Type Name="SoapExtension" FullName="System.Web.Services.Protocols.SoapExtension">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6008300f656bd87ea908aa7d27145052c96e4607" /><Meta Name="ms.sourcegitcommit" Value="397961a0164281b579f68064c3bb66c071f374d9" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/14/2020" /><Meta Name="ms.locfileid" Value="78771039" /></Metadata><TypeSignature Language="C#" Value="public abstract class SoapExtension" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SoapExtension extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Services.Protocols.SoapExtension" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class SoapExtension" />
  <TypeSignature Language="C++ CLI" Value="public ref class SoapExtension abstract" />
  <TypeSignature Language="F#" Value="type SoapExtension = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Die Basisklasse für SOAP-Erweiterungen für XML-Webdienste, die unter Verwendung von ASP.NET erstellt wurden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET ermöglicht die Erstellung einer SOAP-bezogenen Infrastruktur mithilfe eines Erweiterbarkeits Mechanismus. Die Architektur der SOAP-Erweiterung ASP.net dreht sich um eine Erweiterung, mit der eine Nachricht in bestimmten Phasen der Nachrichtenverarbeitung auf dem Client oder dem Server überprüft oder geändert werden kann.  
  
 ASP.NET SOAP-Erweiterungen werden von der- <xref:System.Web.Services.Protocols.SoapExtension> Klasse abgeleitet. Die <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> -Methode und die- <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> Methode bieten alternative Mechanismen für die Initialisierung der SOAP-Erweiterung zur Verbesserung der Leistung. <xref:System.Web.Services.Protocols.SoapExtension.ProcessMessage%2A>Das Herzstück der meisten SOAP-Erweiterungen, da die-Methode in jeder Phase aufgerufen wird, die in definiert ist <xref:System.Web.Services.Protocols.SoapMessageStage> , sodass die SOAP-Erweiterung das gewünschte Verhalten dieser bestimmten SOAP-Erweiterung ausführen kann. Für SOAP-Erweiterungen, die die SOAP-Anforderung oder SOAP-Antwort ändern müssen, <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A> bietet die Möglichkeit, die vorgeschlagenen Daten zu empfangen, die über das Netzwerk gesendet werden sollen.  
  
   
  
## Examples  
 Die folgende `TraceExtension` SOAP-Erweiterung gibt die SOAP-Anforderung und die SOAP-Antwort an eine angegebene Datei aus, wenn Sie auf eine XML-Webdienst Methode angewendet wird. Wenn die folgende SOAP-Erweiterung zum Ausführen mit einem XML-Webdienst installiert ist, muss das ASPNET-Benutzerkonto über die Berechtigung zum Schreiben in das Verzeichnis verfügen, in das die Protokolldatei geschrieben wird.  
  
 [!code-cpp[Classic SoapExtension Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapExtension Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapExtension Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapExtension Example/CS/source.cs#1)]
 [!code-vb[Classic SoapExtension Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapExtension Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Services.Protocols.SoapMessageStage" />
    <altmember cref="T:System.Web.Services.Protocols.SoapExtensionAttribute" />
    <altmember cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SoapExtension ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapExtension.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SoapExtension();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.Services.Protocols.SoapExtension" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChainStream">
      <MemberSignature Language="C#" Value="public virtual System.IO.Stream ChainStream (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Stream ChainStream(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapExtension.ChainStream(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ChainStream (stream As Stream) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IO::Stream ^ ChainStream(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="abstract member ChainStream : System.IO.Stream -&gt; System.IO.Stream&#xA;override this.ChainStream : System.IO.Stream -&gt; System.IO.Stream" Usage="soapExtension.ChainStream stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">Ein Speicherpuffer mit der SOAP-Anforderung oder -Antwort.</param>
        <summary>Ermöglicht beim Überschreiben in einer abgeleiteten Klasse, dass eine SOAP-Erweiterung auf den Speicherpuffer mit der SOAP-Anforderung oder -Antwort zugreifen kann.</summary>
        <returns>Ein <see cref="T:System.IO.Stream" />, der einen neuen Speicherpuffer darstellt, den diese SOAP-Erweiterung ändern kann.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A>stellt sicher, dass SOAP-Erweiterungen mit der höchsten Priorität die tatsächlichen Daten ändern können, die der gesendeten oder zurückgegebenen SOAP-Nachricht am nächsten sind.  
  
 SOAP-Erweiterungen sollten Verweise von, die <xref:System.IO.Stream> in <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A> und der <xref:System.IO.Stream> von zurückgegeben werden, speichern <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A> . Wenn die SOAP-Erweiterung so konfiguriert ist, dass Sie mit einer XML-Webdienst Methode ausgeführt wird, enthält das, das <xref:System.IO.Stream> in die <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A> serialisierte SOAP-Anforderung an den <xref:System.Web.Services.Protocols.SoapMessageStage.BeforeDeserialize> <xref:System.Web.Services.Protocols.SoapMessageStage> . Entsprechend wird der <xref:System.IO.Stream> von zurückgegebene Verweis <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A> in geschrieben, wenn die Serialisierung stattfindet und somit die serialisierte SOAP-Antwort in der enthält <xref:System.Web.Services.Protocols.SoapMessageStage.AfterSerialize> <xref:System.Web.Services.Protocols.SoapMessageStage> .  
  
   
  
## Examples  
 Im folgenden Beispiel wird sowohl die <xref:System.IO.Stream> übergebenen <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A> und <xref:System.IO.Stream> Merry <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A> in die Membervariablen `oldStream` und `newStream`bzw.  
  
 [!code-cpp[Classic SoapExtension.ChainStream Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapExtension.ChainStream Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapExtension.ChainStream Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapExtension.ChainStream Example/CS/source.cs#1)]
 [!code-vb[Classic SoapExtension.ChainStream Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapExtension.ChainStream Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetInitializer">
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ermöglicht beim Überschreiben in einer abgeleiteten Klasse, dass eine SOAP-Erweiterung unter einmaligen Leistungseinbußen Daten einer XML-Webdienstmethode initialisiert.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInitializer">
      <MemberSignature Language="C#" Value="public abstract object GetInitializer (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetInitializer(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapExtension.GetInitializer(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetInitializer (serviceType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ GetInitializer(Type ^ serviceType);" />
      <MemberSignature Language="F#" Value="abstract member GetInitializer : Type -&gt; obj" Usage="soapExtension.GetInitializer serviceType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType">Der Typ der Klasse, die den XML-Webdienst implementiert, auf den die SOAP-Erweiterung angewendet wird.</param>
        <summary>Ermöglicht beim Überschreiben in einer abgeleiteten Klasse, dass eine SOAP-Erweiterung unter einmaligen Leistungseinbußen Daten einer Klasse initialisiert, die einen XML-Webdienst implementiert.</summary>
        <returns>Das <see cref="T:System.Object" />, das die SOAP-Erweiterung für das Zwischenspeichern initialisiert.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Überladung von <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> , die von ASP.NET aufgerufen wird, hängt davon ab, wie die SOAP-Erweiterung angegeben wurde. Es gibt zwei Methoden zum Angeben einer SOAP-Erweiterung:  
  
-   Wenden Sie ein benutzerdefiniertes Attribut, das von abgeleitet <xref:System.Web.Services.Protocols.SoapExtensionAttribute> wird, an die jeweilige XML-Webdienst Methode an.  
  
-   Fügen Sie einen Verweis entweder in den Konfigurationsdateien web.config oder app.config hinzu.  
  
 Wenn Sie einen Verweis auf eine der Konfigurationsdateien hinzufügen, wird die SOAP-Erweiterung für alle XML-Webdienste innerhalb des Gültigkeits Bereichs der Konfigurationsdatei ausgeführt. Wenn eine SOAP-Erweiterung durch Verweis auf eine Konfigurationsdatei angegeben wird, ruft ASP.net die-Überladung auf, die <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> in einem übergibt <xref:System.Type> . Wenn Sie eine Erweiterung durch Anwenden eines benutzerdefinierten Attributs angeben, ruft ASP.NET den auf, der <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> in einem <xref:System.Web.Services.Protocols.LogicalMethodInfo> und einem übergibt <xref:System.Web.Services.Protocols.SoapExtensionAttribute> .  
  
 Ausführliche Informationen zum Hinzufügen von SOAP-Erweiterungen zu einer Konfigurationsdatei finden [Sie unter Konfigurationsoptionen für XML-Webdienste, die mit ASP.NET erstellt wurden](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/b2c0ew36(v=vs.100)).  
  
   
  
## Examples  
 Der folgende Code veranschaulicht, wie Sie SOAP-Erweiterungs spezifische Daten auf einem pro XML-Webdienst speichern können. Wenn die SOAP-Erweiterung anstelle eines Attributs mithilfe einer Konfigurationsdatei konfiguriert wird, kann die SOAP-Erweiterung Daten für jede Klasse speichern, auf die die SOAP-Erweiterung angewendet wird. In diesem Beispiel wird der Name einer Datei gespeichert, in der die SOAP-Nachrichten, die an die XML-Webdienst Methode gesendet werden, basierend auf dem Namen der Klasse, die den XML-Webdienst implementiert, in den Cache protokolliert werden. Dieses Codebeispiel ist Teil eines vollständigen Code Beispiels für eine TraceExtension-SOAP-Erweiterung, die in der <xref:System.Web.Services.Protocols.SoapExtension> Klassen Übersicht zu finden ist.  
  
 [!code-cpp[SoapExtension.GetInitializer-Type#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SoapExtension.GetInitializer-Type/CPP/traceextension.cpp#1)]
 [!code-csharp[SoapExtension.GetInitializer-Type#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapExtension.GetInitializer-Type/CS/traceextension.cs#1)]
 [!code-vb[SoapExtension.GetInitializer-Type#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapExtension.GetInitializer-Type/VB/traceextension.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInitializer">
      <MemberSignature Language="C#" Value="public abstract object GetInitializer (System.Web.Services.Protocols.LogicalMethodInfo methodInfo, System.Web.Services.Protocols.SoapExtensionAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetInitializer(class System.Web.Services.Protocols.LogicalMethodInfo methodInfo, class System.Web.Services.Protocols.SoapExtensionAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapExtension.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetInitializer (methodInfo As LogicalMethodInfo, attribute As SoapExtensionAttribute) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ GetInitializer(System::Web::Services::Protocols::LogicalMethodInfo ^ methodInfo, System::Web::Services::Protocols::SoapExtensionAttribute ^ attribute);" />
      <MemberSignature Language="F#" Value="abstract member GetInitializer : System.Web.Services.Protocols.LogicalMethodInfo * System.Web.Services.Protocols.SoapExtensionAttribute -&gt; obj" Usage="soapExtension.GetInitializer (methodInfo, attribute)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodInfo" Type="System.Web.Services.Protocols.LogicalMethodInfo" />
        <Parameter Name="attribute" Type="System.Web.Services.Protocols.SoapExtensionAttribute" />
      </Parameters>
      <Docs>
        <param name="methodInfo">Eine <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />, die den entsprechenden Funktionsprototyp für die XML-Webdienstmethode darstellt, auf die die SOAP-Erweiterung angewendet wird.</param>
        <param name="attribute">Das auf die XML-Webdienstmethode angewendete <see cref="T:System.Web.Services.Protocols.SoapExtensionAttribute" />.</param>
        <summary>Ermöglicht beim Überschreiben in einer abgeleiteten Klasse, dass eine SOAP-Erweiterung unter einmaligen Leistungseinbußen Daten einer XML-Webdienstmethode unter Verwendung eines Attributs initialisiert, das auf die XML-Webdienstmethode angewendet wird.</summary>
        <returns>Das <see cref="T:System.Object" />, das die SOAP-Erweiterung für das Zwischenspeichern initialisiert.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die SOAP-Erweiterung mithilfe einer Konfigurationsdatei konfiguriert wird, sehen Sie die Überladung <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> , die eine akzeptiert <xref:System.Type> .  
  
 Eine SOAP-Erweiterung bietet drei Möglichkeiten, Daten zu initialisieren, und Sie haben unterschiedliche Zwecke:  
  
-   Klassenkonstruktor: der Klassenkonstruktor wird jedes Mal aufgerufen, wenn eine SOAP-Erweiterung instanziiert wird, und wird normalerweise verwendet, um Member-Variablen zu initialisieren.  
  
-   <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> - <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A>wird jedoch nur einmal aufgerufen, wenn eine SOAP-Anforderung zum ersten Mal an eine XML-Webdienst Methode gerichtet wird. Wenn ein benutzerdefiniertes Attribut auf die XML-Webdienst Methode angewendet wird, wird die- <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> Methode aufgerufen. Dadurch kann die SOAP-Erweiterung die <xref:System.Web.Services.Protocols.LogicalMethodInfo> einer XML-Webdienst Methode nach Prototypinformationen Abfragen oder auf Erweiterungs spezifische Daten zugreifen, die von einer von abgeleiteten Klasse geleitet werden <xref:System.Web.Services.Protocols.SoapExtensionAttribute> . Der Rückgabewert wird von ASP.NET zwischengespeichert und an nachfolgende Methoden übermittelt <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> . Aus diesem Grund wird die Initialisierung, die in ausgeführt wird, im <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> wesentlichen in einen einmaligen Leistungs Treffer gekapselt.  
  
-   <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> - <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A>wird jedes Mal aufgerufen, wenn eine SOAP-Anforderung an eine XML-Webdienst Methode gerichtet ist, aber einen Vorteil gegenüber dem Klassenkonstruktor hat, da die <xref:System.Object> initialisierte in <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> an Sie übergeben wird.  
  
   
  
## Examples  
 Der folgende Code veranschaulicht, wie Sie SOAP-Erweiterungs spezifische Daten abrufen können, die mit einer von abgeleiteten Klasse weitergeleitet <xref:System.Web.Services.Protocols.SoapExtensionAttribute> werden, und diese Daten dann in Zwischenspeichern <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> . Dieses Codebeispiel ist Teil eines vollständigen Code Beispiels für eine `TraceExtension` SOAP-Erweiterung, die in der Klassen Übersicht zu finden ist <xref:System.Web.Services.Protocols.SoapExtension> . Dieses Codebeispiel basiert darauf `TraceExtensionAttribute` , dass ein an den-Parameter übergeben wird `attribute` . Im vollständigen Codebeispiel wird `TraceExtensionAttribute` von abgeleitet, <xref:System.Web.Services.Protocols.SoapExtensionAttribute> und es wird eine-Eigenschaft hinzugefügt `Filename` , die <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> im Cache speichert.  
  
 [!code-cpp[Classic SoapExtension.GetInitializer Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapExtension.GetInitializer Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapExtension.GetInitializer Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapExtension.GetInitializer Example/CS/source.cs#1)]
 [!code-vb[Classic SoapExtension.GetInitializer Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapExtension.GetInitializer Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.Services.Protocols.SoapExtension.Initialize(System.Object)" />
        <altmember cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
        <altmember cref="T:System.Web.Services.Protocols.SoapExtensionAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public abstract void Initialize (object initializer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Initialize(object initializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapExtension.Initialize(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Initialize (initializer As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Initialize(System::Object ^ initializer);" />
      <MemberSignature Language="F#" Value="abstract member Initialize : obj -&gt; unit" Usage="soapExtension.Initialize initializer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="initializer" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="initializer">Das von <see cref="T:System.Object" /> zurückgegebene <see cref="M:System.Web.Services.Protocols.SoapExtension.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)" />, das in ASP.NET zwischengespeichert wurde.</param>
        <summary>Ermöglicht beim Überschreiben in einer abgeleiteten Klasse, dass eine SOAP-Erweiterung sich selbst mit den in der <see cref="M:System.Web.Services.Protocols.SoapExtension.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)" />-Methode zwischengespeicherten Daten initialisiert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine SOAP-Erweiterung bietet drei Möglichkeiten, Daten zu initialisieren, und Sie haben unterschiedliche Zwecke:  
  
-   Klassenkonstruktor: der Klassenkonstruktor wird jedes Mal aufgerufen, wenn eine SOAP-Erweiterung instanziiert wird, und wird normalerweise verwendet, um Member-Variablen zu initialisieren.  
  
-   <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A>-Diese Methode wird nur einmal aufgerufen, wenn eine SOAP-Anforderung zum ersten Mal an eine XML-Webdienst Methode gerichtet wird. Wenn ein benutzerdefiniertes Attribut auf die XML-Webdienst Methode angewendet wird, wird die- <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> Methode aufgerufen. Dadurch kann die SOAP-Erweiterung die <xref:System.Web.Services.Protocols.LogicalMethodInfo> einer XML-Webdienst Methode nach Prototypinformationen Abfragen oder auf Erweiterungs spezifische Daten zugreifen, die von einer von abgeleiteten Klasse geleitet werden <xref:System.Web.Services.Protocols.SoapExtensionAttribute> . Der Rückgabewert wird von ASP.NET zwischengespeichert und an nachfolgende Methoden übermittelt <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> . Aus diesem Grund wird die Initialisierung, die in ausgeführt wird, im <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> wesentlichen in einen einmaligen Leistungs Treffer gekapselt.  
  
-   <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A>-Diese Methode wird immer dann aufgerufen, wenn eine SOAP-Anforderung an eine XML-Webdienst Methode gerichtet wird, aber einen Vorteil gegenüber dem Klassenkonstruktor hat, da der <xref:System.Object> initialisierte in <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> an ihn übergeben wird.
  
> [!NOTE]
>  Sie können auch eine SOAP-Erweiterung ohne Ableitung von hinzufügen, <xref:System.Web.Services.Protocols.SoapExtensionAttribute> indem Sie das- [ \<soapExtensionTypes> Element](https://msdn.microsoft.com/library/7a373a98-6d82-4f8d-a6fc-2996da3fd54c) in einer Konfigurationsdatei verwenden. Weitere Informationen finden Sie unter Ändern von [ \<soapExtensionTypes> Elementen](https://msdn.microsoft.com/library/7a373a98-6d82-4f8d-a6fc-2996da3fd54c) und SOAP-nach [richten mithilfe von SOAP-Erweiterungen](https://msdn.microsoft.com/library/97d81ace-95e7-4acc-ae39-9692a0021e95).  
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie Sie die während der-Methode zwischengespeicherten Daten verwenden können <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> .  
  
 [!code-cpp[Classic SoapExtension.Initialize Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapExtension.Initialize Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapExtension.Initialize Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapExtension.Initialize Example/CS/source.cs#1)]
 [!code-vb[Classic SoapExtension.Initialize Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapExtension.Initialize Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessMessage">
      <MemberSignature Language="C#" Value="public abstract void ProcessMessage (System.Web.Services.Protocols.SoapMessage message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessMessage(class System.Web.Services.Protocols.SoapMessage message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapExtension.ProcessMessage(System.Web.Services.Protocols.SoapMessage)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub ProcessMessage (message As SoapMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void ProcessMessage(System::Web::Services::Protocols::SoapMessage ^ message);" />
      <MemberSignature Language="F#" Value="abstract member ProcessMessage : System.Web.Services.Protocols.SoapMessage -&gt; unit" Usage="soapExtension.ProcessMessage message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Web.Services.Protocols.SoapMessage" />
      </Parameters>
      <Docs>
        <param name="message">Der zu verarbeitende <see cref="T:System.Web.Services.Protocols.SoapMessage" />.</param>
        <summary>Ermöglicht beim Überschreiben in einer abgeleiteten Klasse, dass eine SOAP-Erweiterung eine <see cref="T:System.Web.Services.Protocols.SoapMessage" /> für die Verarbeitung auf jeder <see cref="T:System.Web.Services.Protocols.SoapMessageStage" /> empfängt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Services.Protocols.SoapExtension.ProcessMessage%2A>wird in allen <xref:System.Web.Services.Protocols.SoapMessageStage> Phasen für SOAP-Erweiterungen aufgerufen, die auf beide mit ASP.net und ihren Clients erstellten XML-Webdiensten angewendet werden. An jedem <xref:System.Web.Services.Protocols.SoapMessageStage> wird eine Instanz einer von abgeleiteten Klasse <xref:System.Web.Services.Protocols.SoapMessage> an den Wert übermittelt <xref:System.Web.Services.Protocols.SoapExtension.ProcessMessage%2A> . Wenn die SOAP-Erweiterung auf dem XML-Webdienst Client ausgeführt wird, <xref:System.Web.Services.Protocols.SoapClientMessage> wird ein-Objekt an weitergegeben <xref:System.Web.Services.Protocols.SoapExtension.ProcessMessage%2A> ; andernfalls wird ein- <xref:System.Web.Services.Protocols.SoapServerMessage> Objekt weitergegeben.  
  
   
  
## Examples  
 Das folgende Beispiel ist der <xref:System.Web.Services.Protocols.SoapExtension.ProcessMessage%2A> Teil einer SOAP-Erweiterung, die SOAP-Anforderungen und SOAP-Antworten protokolliert. Durch die Protokollierung von auf die- <xref:System.Web.Services.Protocols.SoapMessage> <xref:System.Web.Services.Protocols.SoapMessageStage.AfterSerialize> <xref:System.Web.Services.Protocols.SoapMessageStage> SOAP-Erweiterung greift auf den zu, der <xref:System.Web.Services.Protocols.SoapMessage.Stream%2A> über das Netzwerk gesendet wird. Wenn die SOAP-Erweiterung auf eine XML-Webdienst Methode angewendet wird, die mit ASP.NET erstellt wurde, <xref:System.Web.Services.Protocols.SoapMessage.Stream%2A> enthält die SOAP-Antwort von der XML-Webdienst Methode. Wenn die SOAP-Erweiterung auf einen XML-Webdienst Client angewendet wird, <xref:System.Web.Services.Protocols.SoapMessage.Stream%2A> enthält die SOAP-Anforderung an eine XML-Webdienst Methode.  
  
 Klassisches SoapExtension. ProcessMessage-Beispiel 1  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="X509Store" FullName="System.Security.Cryptography.X509Certificates.X509Store">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="76edd5273f2ce3ec815ef6ecd91e26e4d41c6c26" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39733784" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class X509Store : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit X509Store extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.X509Certificates.X509Store" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class X509Store&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class X509Store sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type X509Store = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Stellt einen X.509-Speicher dar, der ein physikalischer Speicher ist, in dem Zertifikate erhalten bleiben und verwaltet werden. Diese Klasse kann nicht vererbt werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie diese Klasse zum Arbeiten mit einem x. 509-Store.  
  
> [!IMPORTANT]
>  Beginnend mit der [!INCLUDE[net_v46](~/includes/net-v46-md.md)]wird in diesem Typ implementiert die <xref:System.IDisposable> Schnittstelle. Wenn Sie mit dem Typ haben, sollten Sie es entweder direkt oder indirekt freigeben. Damit des Typs direkt freigegeben werden, rufen Sie die <xref:System.IDisposable.Dispose%2A> -Methode in einer `try` / `catch` Block. Um sie indirekt löschen, verwenden Sie ein Sprachkonstrukt wie `using` (in c#) oder `Using` (in Visual Basic). Weitere Informationen finden Sie im Abschnitt "mithilfe von ein-Objekt, das implementiert" IDisposable "" in der <xref:System.IDisposable> schnittstellenthema.  
>   
>  Für apps, die als Ziel der [!INCLUDE[net_v452](~/includes/net-v452-md.md)] und früheren Versionen der <xref:System.Security.Cryptography.X509Certificates.X509Store> -Klasse implementiert nicht die <xref:System.IDisposable> Schnittstelle, und daher keinen keine `Dispose` Methode.  
  
   
  
## Examples  
 Dieser Abschnitt enthält zwei Beispiele. Im erste Beispiel wird veranschaulicht, wie Sie standardmäßige x. 509-Speicher und eine Liste der Anzahl der Zertifikate in den einzelnen öffnen können.  
  
 Im zweite Beispiel wird veranschaulicht, wie Sie hinzufügen und Entfernen von einzelnen Zertifikate und Bereiche von Zertifikaten.  
  
 **Beispiel 1**  
  
 In diesem Beispiel wird versucht, jeden standard-Speicher in jeder standardmäßigen Speicherort auf dem aktuellen Computer zu öffnen. Es gibt eine Zusammenfassung, die anzeigt, ob jedes Geschäft vorhanden ist, und wenn also die Anzahl der sie Zertifikate enthält.  
  
 Das Beispiel erstellt eine <xref:System.Security.Cryptography.X509Certificates.X509Store> Objekt für jede Kombination von standard-Namen und den standardmäßigen Speicherort. Ruft die <xref:System.Security.Cryptography.X509Certificates.X509Store.Open%2A> -Methode mit dem <xref:System.Security.Cryptography.X509Certificates.OpenFlags.OpenExistingOnly?displayProperty=nameWithType> -Flag, das den physischen Speicher wird geöffnet, nur dann, wenn sie bereits vorhanden ist. Wenn der physische Speicher vorhanden ist, wird im Beispiel wird die <xref:System.Security.Cryptography.X509Certificates.X509Store.Name%2A>, <xref:System.Security.Cryptography.X509Certificates.X509Store.Location%2A>, und <xref:System.Security.Cryptography.X509Certificates.X509Store.Certificates%2A> Eigenschaften, die die Anzahl der Zertifikate im Speicher angezeigt.  
  
 [!code-csharp[x509store2#2](~/samples/snippets/csharp/VS_Snippets_CLR/x509store2/CS/storenames1.cs#2)]
 [!code-vb[x509store2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/x509store2/vb/storenames1.vb#2)]  
  
 **Beispiel 2**  
  
 In diesem Beispiel öffnet ein x. 509-Zertifikatspeicher, fügt Löscht Zertifikate und schließt dann den Speicher. Es wird davon ausgegangen, dass Sie die drei Zertifikate hinzufügen und entfernen Sie aus einem lokalen Speicher verfügen.  
  
 [!code-cpp[x509store2#1](~/samples/snippets/cpp/VS_Snippets_CLR/x509store2/CPP/x509store2.cpp#1)]
 [!code-csharp[x509store2#1](~/samples/snippets/csharp/VS_Snippets_CLR/x509store2/CS/x509store2.cs#1)]
 [!code-vb[x509store2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/x509store2/vb/x509store2.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Security.Cryptography.X509Certificates.X509Store" />-Klasse.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public X509Store ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509Store.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; X509Store();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Security.Cryptography.X509Certificates.X509Store" />-Klasse mithilfe der persönlichen Zertifikate des aktuellen Benutzerspeichers.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie diesen Konstruktor zum Erstellen einer <xref:System.Security.Cryptography.X509Certificates.X509Store> -Objekt unter Verwendung der persönlichen x. 509-Zertifikatspeicher für den aktuellen Benutzer.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird ein x. 509-Zertifikatspeicher öffnet, fügt Löscht Zertifikate und schließt dann den Speicher. Es wird davon ausgegangen, dass Sie die drei Zertifikate hinzufügen und entfernen Sie aus einem lokalen Speicher verfügen.  
  
 [!code-cpp[x509store2#1](~/samples/snippets/cpp/VS_Snippets_CLR/x509store2/CPP/x509store2.cpp#1)]
 [!code-csharp[x509store2#1](~/samples/snippets/csharp/VS_Snippets_CLR/x509store2/CS/x509store2.cs#1)]
 [!code-vb[x509store2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/x509store2/vb/x509store2.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.StorePermission">Öffnen ein x. 509-Zertifikat speichern. Sicherheitsaktion: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />. Zugeordnete Enumerationen: <see cref="F:System.Security.Permissions.StorePermissionFlags.OpenStore" />, <see cref="F:System.Security.Permissions.StorePermissionFlags.EnumerateCertificates" /></permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public X509Store (IntPtr storeHandle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int storeHandle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509Store.#ctor(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (storeHandle As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; X509Store(IntPtr storeHandle);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.X509Certificates.X509Store : nativeint -&gt; System.Security.Cryptography.X509Certificates.X509Store" Usage="new System.Security.Cryptography.X509Certificates.X509Store storeHandle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO("Mono's stores are fully managed. All handles are invalid.")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="storeHandle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="storeHandle">Ein Handle für einen <see langword="HCERTSTORE" />-Speicher.</param>
        <summary>Initialisiert mithilfe eines Intptr-Handles für einen <see cref="T:System.Security.Cryptography.X509Certificates.X509Store" />-Speicher eine neue Instanz der <see langword="HCERTSTORE" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie diesen Konstruktor, um Kompatibilität mit der nicht verwaltete Microsoft Cryptographic API (CAPI) bereitzustellen.  
  
 Weitere Informationen zu der `HCERTSTORE` behandelt, finden Sie in der Dokumentation zur nicht verwalteten CAPI in im Plattform-SDK-Abschnitt, der die [MSDN-Bibliothek](http://go.microsoft.com/fwlink/?linkid=37118).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="storeHandle" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Der <paramref name="storeHandle" />-Parameter zeigt auf einen ungültigen Kontext.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">für nicht verwalteten Code. Sicherheitsaktion: <see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" />. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public X509Store (System.Security.Cryptography.X509Certificates.StoreLocation storeLocation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Security.Cryptography.X509Certificates.StoreLocation storeLocation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509Store.#ctor(System.Security.Cryptography.X509Certificates.StoreLocation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; X509Store(System::Security::Cryptography::X509Certificates::StoreLocation storeLocation);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.X509Certificates.X509Store : System.Security.Cryptography.X509Certificates.StoreLocation -&gt; System.Security.Cryptography.X509Certificates.X509Store" Usage="new System.Security.Cryptography.X509Certificates.X509Store storeLocation" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="storeLocation" Type="System.Security.Cryptography.X509Certificates.StoreLocation" />
      </Parameters>
      <Docs>
        <param name="storeLocation">Einer der Enumerationswerte, der die Position des X.509-Zertifikatspeichers angibt.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Security.Cryptography.X509Certificates.X509Store" />-Klasse unter Verwendung des angegebenen <see cref="T:System.Security.Cryptography.X509Certificates.StoreLocation" />-Werts.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie diesen Konstruktor zum Erstellen einer <xref:System.Security.Cryptography.X509Certificates.X509Store> -Objekt, wobei den Speicherort, der entweder den Speicherort für den aktuellen Benutzer oder dem lokalen Computer ist.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird ein x. 509-Zertifikatspeicher öffnet, fügt Löscht Zertifikate und schließt dann den Speicher. Es wird davon ausgegangen, dass Sie die drei Zertifikate hinzufügen und entfernen Sie aus einem lokalen Speicher verfügen.  
  
 [!code-cpp[x509store2#1](~/samples/snippets/cpp/VS_Snippets_CLR/x509store2/CPP/x509store2.cpp#1)]
 [!code-csharp[x509store2#1](~/samples/snippets/csharp/VS_Snippets_CLR/x509store2/CS/x509store2.cs#1)]
 [!code-vb[x509store2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/x509store2/vb/x509store2.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.StorePermission">Öffnen ein x. 509-Zertifikat speichern. Sicherheitsaktion: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />. Zugeordnete Enumerationen: <see cref="F:System.Security.Permissions.StorePermissionFlags.OpenStore" />, <see cref="F:System.Security.Permissions.StorePermissionFlags.EnumerateCertificates" /></permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public X509Store (System.Security.Cryptography.X509Certificates.StoreName storeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Security.Cryptography.X509Certificates.StoreName storeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509Store.#ctor(System.Security.Cryptography.X509Certificates.StoreName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; X509Store(System::Security::Cryptography::X509Certificates::StoreName storeName);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.X509Certificates.X509Store : System.Security.Cryptography.X509Certificates.StoreName -&gt; System.Security.Cryptography.X509Certificates.X509Store" Usage="new System.Security.Cryptography.X509Certificates.X509Store storeName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="storeName" Type="System.Security.Cryptography.X509Certificates.StoreName" />
      </Parameters>
      <Docs>
        <param name="storeName">Einer der Enumerationswerte, der den Namen des X.509-Zertifikatspeichers angibt.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Security.Cryptography.X509Certificates.X509Store" />-Klasse unter Verwendung des angegebenen <see cref="T:System.Security.Cryptography.X509Certificates.StoreName" />-Werts.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie diesen Konstruktor, um ein x. 509-Speicher für den aktuellen Benutzer zu erstellen, die von aufgelisteten Werte entsprechen <xref:System.Security.Cryptography.X509Certificates.StoreName>.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird ein x. 509-Zertifikatspeicher öffnet, fügt Löscht Zertifikate und schließt dann den Speicher. Es wird davon ausgegangen, dass Sie die drei Zertifikate hinzufügen und entfernen Sie aus einem lokalen Speicher verfügen.  
  
 [!code-cpp[x509store2#1](~/samples/snippets/cpp/VS_Snippets_CLR/x509store2/CPP/x509store2.cpp#1)]
 [!code-csharp[x509store2#1](~/samples/snippets/csharp/VS_Snippets_CLR/x509store2/CS/x509store2.cs#1)]
 [!code-vb[x509store2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/x509store2/vb/x509store2.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.StorePermission">Öffnen ein x. 509-Zertifikat speichern. Sicherheitsaktion: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />. Zugeordnete Enumerationen: <see cref="F:System.Security.Permissions.StorePermissionFlags.OpenStore" />, <see cref="F:System.Security.Permissions.StorePermissionFlags.EnumerateCertificates" /></permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public X509Store (string storeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string storeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509Store.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (storeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; X509Store(System::String ^ storeName);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.X509Certificates.X509Store : string -&gt; System.Security.Cryptography.X509Certificates.X509Store" Usage="new System.Security.Cryptography.X509Certificates.X509Store storeName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="storeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="storeName">Ein Zeichenfolgenwert, der den Speichernamen darstellt. Weitere Informationen finden Sie unter <see cref="T:System.Security.Cryptography.X509Certificates.StoreName" />.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Security.Cryptography.X509Certificates.X509Store" />-Klasse mithilfe des angegebenen Speichernamens.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie diesen Konstruktor zum Erstellen einer <xref:System.Security.Cryptography.X509Certificates.X509Store> -Objekt mit einem bestimmten x. 509-Store-Namen für den aktuellen Benutzer. Um einen neuen Speicher zu erstellen, geben Sie einen Namen, der nicht vorhanden ist. Ein neuer Speicher wird mit diesem Namen erstellt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird ein x. 509-Zertifikatspeicher öffnet, fügt Löscht Zertifikate und schließt dann den Speicher. Es wird davon ausgegangen, dass Sie die drei Zertifikate hinzufügen und entfernen Sie aus einem lokalen Speicher verfügen.  
  
 [!code-cpp[x509store2#1](~/samples/snippets/cpp/VS_Snippets_CLR/x509store2/CPP/x509store2.cpp#1)]
 [!code-csharp[x509store2#1](~/samples/snippets/csharp/VS_Snippets_CLR/x509store2/CS/x509store2.cs#1)]
 [!code-vb[x509store2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/x509store2/vb/x509store2.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.StorePermission">Öffnen ein x. 509-Zertifikat speichern. Sicherheitsaktion: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />. Zugeordnete Enumerationen: <see cref="F:System.Security.Permissions.StorePermissionFlags.OpenStore" />, <see cref="F:System.Security.Permissions.StorePermissionFlags.EnumerateCertificates" /></permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public X509Store (System.Security.Cryptography.X509Certificates.StoreName storeName, System.Security.Cryptography.X509Certificates.StoreLocation storeLocation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Security.Cryptography.X509Certificates.StoreName storeName, valuetype System.Security.Cryptography.X509Certificates.StoreLocation storeLocation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509Store.#ctor(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; X509Store(System::Security::Cryptography::X509Certificates::StoreName storeName, System::Security::Cryptography::X509Certificates::StoreLocation storeLocation);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.X509Certificates.X509Store : System.Security.Cryptography.X509Certificates.StoreName * System.Security.Cryptography.X509Certificates.StoreLocation -&gt; System.Security.Cryptography.X509Certificates.X509Store" Usage="new System.Security.Cryptography.X509Certificates.X509Store (storeName, storeLocation)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="storeName" Type="System.Security.Cryptography.X509Certificates.StoreName" />
        <Parameter Name="storeLocation" Type="System.Security.Cryptography.X509Certificates.StoreLocation" />
      </Parameters>
      <Docs>
        <param name="storeName">Einer der Enumerationswerte, der den Namen des X.509-Zertifikatspeichers angibt.</param>
        <param name="storeLocation">Einer der Enumerationswerte, der die Position des X.509-Zertifikatspeichers angibt.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Security.Cryptography.X509Certificates.X509Store" />-Klasse mithilfe des angegebenen <see cref="T:System.Security.Cryptography.X509Certificates.StoreName" />-Werts und des <see cref="T:System.Security.Cryptography.X509Certificates.StoreLocation" />-Werts.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie diesen Konstruktor zum Erstellen einer <xref:System.Security.Cryptography.X509Certificates.X509Store> Objekt, das angibt, sowohl den Speichernamen und Speicherort des Speichers.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird ein x. 509-Zertifikatspeicher öffnet, fügt Löscht Zertifikate und schließt dann den Speicher. Es wird davon ausgegangen, dass Sie die drei Zertifikate hinzufügen und entfernen Sie aus einem lokalen Speicher verfügen.  
  
 [!code-cpp[x509store2#1](~/samples/snippets/cpp/VS_Snippets_CLR/x509store2/CPP/x509store2.cpp#1)]
 [!code-csharp[x509store2#1](~/samples/snippets/csharp/VS_Snippets_CLR/x509store2/CS/x509store2.cs#1)]
 [!code-vb[x509store2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/x509store2/vb/x509store2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="storeLocation" /> ist kein gültiger Speicherort oder <paramref name="storeName" /> kein gültiger Name.</exception>
        <permission cref="T:System.Security.Permissions.StorePermission">Öffnen ein x. 509-Zertifikat speichern. Sicherheitsaktion: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />. Zugeordnete Enumerationen: <see cref="F:System.Security.Permissions.StorePermissionFlags.OpenStore" />, <see cref="F:System.Security.Permissions.StorePermissionFlags.EnumerateCertificates" /></permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public X509Store (string storeName, System.Security.Cryptography.X509Certificates.StoreLocation storeLocation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string storeName, valuetype System.Security.Cryptography.X509Certificates.StoreLocation storeLocation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509Store.#ctor(System.String,System.Security.Cryptography.X509Certificates.StoreLocation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; X509Store(System::String ^ storeName, System::Security::Cryptography::X509Certificates::StoreLocation storeLocation);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.X509Certificates.X509Store : string * System.Security.Cryptography.X509Certificates.StoreLocation -&gt; System.Security.Cryptography.X509Certificates.X509Store" Usage="new System.Security.Cryptography.X509Certificates.X509Store (storeName, storeLocation)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="storeName" Type="System.String" />
        <Parameter Name="storeLocation" Type="System.Security.Cryptography.X509Certificates.StoreLocation" />
      </Parameters>
      <Docs>
        <param name="storeName">Eine Zeichenfolge, die einen Wert aus der <see cref="T:System.Security.Cryptography.X509Certificates.StoreName" />-Enumeration darstellt.</param>
        <param name="storeLocation">Einer der Enumerationswerte, der die Position des X.509-Zertifikatspeichers angibt.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Security.Cryptography.X509Certificates.X509Store" />-Klasse mithilfe einer Zeichenfolge, die einen Wert aus der <see cref="T:System.Security.Cryptography.X509Certificates.StoreName" />- und einen Wert aus der <see cref="T:System.Security.Cryptography.X509Certificates.StoreLocation" />-Enumeration darstellt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie diesen Konstruktor zum Erstellen einer <xref:System.Security.Cryptography.X509Certificates.X509Store> Objekt mit einem Speichername und Speicherort. Um einen neuen Speicher zu erstellen, geben Sie einen Namen, der nicht vorhanden ist. Ein neuer Speicher wird mit diesem Namen erstellt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird ein x. 509-Zertifikatspeicher öffnet, fügt Löscht Zertifikate und schließt dann den Speicher. Es wird davon ausgegangen, dass Sie die drei Zertifikate hinzufügen und entfernen Sie aus einem lokalen Speicher verfügen.  
  
 [!code-cpp[x509store2#1](~/samples/snippets/cpp/VS_Snippets_CLR/x509store2/CPP/x509store2.cpp#1)]
 [!code-csharp[x509store2#1](~/samples/snippets/csharp/VS_Snippets_CLR/x509store2/CS/x509store2.cs#1)]
 [!code-vb[x509store2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/x509store2/vb/x509store2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="storeLocation" /> enthält ein ungültige Werte.</exception>
        <permission cref="T:System.Security.Permissions.StorePermission">Öffnen ein x. 509-Zertifikat speichern. Sicherheitsaktion: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />. Zugeordnete Enumerationen: <see cref="F:System.Security.Permissions.StorePermissionFlags.OpenStore" />, <see cref="F:System.Security.Permissions.StorePermissionFlags.EnumerateCertificates" /></permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public X509Store (System.Security.Cryptography.X509Certificates.StoreName storeName, System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, System.Security.Cryptography.X509Certificates.OpenFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Security.Cryptography.X509Certificates.StoreName storeName, valuetype System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, valuetype System.Security.Cryptography.X509Certificates.OpenFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509Store.#ctor(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.OpenFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; X509Store(System::Security::Cryptography::X509Certificates::StoreName storeName, System::Security::Cryptography::X509Certificates::StoreLocation storeLocation, System::Security::Cryptography::X509Certificates::OpenFlags flags);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.X509Certificates.X509Store : System.Security.Cryptography.X509Certificates.StoreName * System.Security.Cryptography.X509Certificates.StoreLocation * System.Security.Cryptography.X509Certificates.OpenFlags -&gt; System.Security.Cryptography.X509Certificates.X509Store" Usage="new System.Security.Cryptography.X509Certificates.X509Store (storeName, storeLocation, flags)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="storeName" Type="System.Security.Cryptography.X509Certificates.StoreName" />
        <Parameter Name="storeLocation" Type="System.Security.Cryptography.X509Certificates.StoreLocation" />
        <Parameter Name="flags" Type="System.Security.Cryptography.X509Certificates.OpenFlags" />
      </Parameters>
      <Docs>
        <param name="storeName">To be added.</param>
        <param name="storeLocation">To be added.</param>
        <param name="flags">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public X509Store (string storeName, System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, System.Security.Cryptography.X509Certificates.OpenFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string storeName, valuetype System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, valuetype System.Security.Cryptography.X509Certificates.OpenFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509Store.#ctor(System.String,System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.OpenFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; X509Store(System::String ^ storeName, System::Security::Cryptography::X509Certificates::StoreLocation storeLocation, System::Security::Cryptography::X509Certificates::OpenFlags flags);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.X509Certificates.X509Store : string * System.Security.Cryptography.X509Certificates.StoreLocation * System.Security.Cryptography.X509Certificates.OpenFlags -&gt; System.Security.Cryptography.X509Certificates.X509Store" Usage="new System.Security.Cryptography.X509Certificates.X509Store (storeName, storeLocation, flags)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="storeName" Type="System.String" />
        <Parameter Name="storeLocation" Type="System.Security.Cryptography.X509Certificates.StoreLocation" />
        <Parameter Name="flags" Type="System.Security.Cryptography.X509Certificates.OpenFlags" />
      </Parameters>
      <Docs>
        <param name="storeName">To be added.</param>
        <param name="storeLocation">To be added.</param>
        <param name="flags">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Security.Cryptography.X509Certificates.X509Certificate2 certificate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Security.Cryptography.X509Certificates.X509Certificate2 certificate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509Store.Add(System.Security.Cryptography.X509Certificates.X509Certificate2)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (certificate As X509Certificate2)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Security::Cryptography::X509Certificates::X509Certificate2 ^ certificate);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Security.Cryptography.X509Certificates.X509Certificate2 -&gt; unit" Usage="x509Store.Add certificate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="certificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate2" />
      </Parameters>
      <Docs>
        <param name="certificate">Das hinzuzufügende Zertifikat.</param>
        <summary>Fügt dem X.509-Zertifikatsspeicher ein Zertifikat hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie diese Methode, um ein einzelnes Zertifikat für einen x. 509-Speicher hinzuzufügen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird ein x. 509-Zertifikatspeicher öffnet, fügt Löscht Zertifikate und schließt dann den Speicher. Es wird davon ausgegangen, dass Sie die drei Zertifikate hinzufügen und entfernen Sie aus einem lokalen Speicher verfügen.  
  
 [!code-cpp[x509store2#1](~/samples/snippets/cpp/VS_Snippets_CLR/x509store2/CPP/x509store2.cpp#1)]
 [!code-csharp[x509store2#1](~/samples/snippets/csharp/VS_Snippets_CLR/x509store2/CS/x509store2.cs#1)]
 [!code-vb[x509store2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/x509store2/vb/x509store2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="certificate" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Das Zertifikat konnte dem Speicher nicht hinzugefügt werden.</exception>
        <permission cref="T:System.Security.Permissions.StorePermission">zum Hinzufügen von Zertifikaten auf einem x. 509-Zertifikatsspeicher. Sicherheitsaktion: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />. Zugeordnete Enumerationen: <see cref="F:System.Security.Permissions.StorePermissionFlags.AddToStore" />, <see cref="F:System.Security.Permissions.StorePermissionFlags.EnumerateCertificates" /></permission>
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (System.Security.Cryptography.X509Certificates.X509Certificate2Collection certificates);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(class System.Security.Cryptography.X509Certificates.X509Certificate2Collection certificates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509Store.AddRange(System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange (certificates As X509Certificate2Collection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRange(System::Security::Cryptography::X509Certificates::X509Certificate2Collection ^ certificates);" />
      <MemberSignature Language="F#" Value="member this.AddRange : System.Security.Cryptography.X509Certificates.X509Certificate2Collection -&gt; unit" Usage="x509Store.AddRange certificates" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO("Method isn't transactional (like documented)")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="certificates" Type="System.Security.Cryptography.X509Certificates.X509Certificate2Collection" />
      </Parameters>
      <Docs>
        <param name="certificates">Die Auflistung der hinzuzufügenden Zertifikate.</param>
        <summary>Fügt einem X.509-Zertifikatsspeicher eine Auflistung von Zertifikaten hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode fügt mehr als ein Zertifikat auf einem x. 509-Zertifikatsspeicher; Wenn Hinzufügen eines Zertifikats ein Fehler auftritt, wird der Vorgang wird rückgängig gemacht, und werden keine Zertifikate hinzugefügt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird ein x. 509-Zertifikatspeicher öffnet, fügt Löscht Zertifikate und schließt dann den Speicher. Es wird davon ausgegangen, dass Sie die drei Zertifikate hinzufügen und entfernen Sie aus einem lokalen Speicher verfügen.  
  
 [!code-cpp[x509store2#1](~/samples/snippets/cpp/VS_Snippets_CLR/x509store2/CPP/x509store2.cpp#1)]
 [!code-csharp[x509store2#1](~/samples/snippets/csharp/VS_Snippets_CLR/x509store2/CS/x509store2.cs#1)]
 [!code-vb[x509store2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/x509store2/vb/x509store2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="certificates" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.Security.SecurityException">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</exception>
        <permission cref="T:System.Security.Permissions.StorePermission">zum Hinzufügen von Zertifikaten auf einem x. 509-Zertifikatsspeicher. Sicherheitsaktion: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />. Zugeordnete Enumerationen: <see cref="F:System.Security.Permissions.StorePermissionFlags.AddToStore" />, <see cref="F:System.Security.Permissions.StorePermissionFlags.EnumerateCertificates" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Certificates">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.X509Certificates.X509Certificate2Collection Certificates { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.X509Certificates.X509Certificate2Collection Certificates" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.X509Certificates.X509Store.Certificates" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Certificates As X509Certificate2Collection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::X509Certificates::X509Certificate2Collection ^ Certificates { System::Security::Cryptography::X509Certificates::X509Certificate2Collection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Certificates : System.Security.Cryptography.X509Certificates.X509Certificate2Collection" Usage="System.Security.Cryptography.X509Certificates.X509Store.Certificates" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.X509Certificates.X509Certificate2Collection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt eine Auflistung von Zertifikaten in einem X.509-Zertifikatsspeicher zurück.</summary>
        <value>Eine Auflistung mit Zertifikaten.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode gibt eine Momentaufnahme des x. 509-Zertifikatsspeichers an. Beachten Sie, dass bei nachfolgenden <xref:System.Security.Cryptography.X509Certificates.X509Store.Add%2A> oder <xref:System.Security.Cryptography.X509Certificates.X509Store.Remove%2A> Vorgänge für den Store werden keine Auswirkung für die Sammlung, die zurückgegeben wird. Diese Momentaufnahme wird jedes Mal, wenn die Eigenschaft aufgerufen wird, in neu berechnet, sodass die Verwendung dieser Eigenschaft in einer iterativen Funktion nicht empfohlen wird.  
  
   
  
## Examples  
 Dieser Abschnitt enthält zwei Beispiele. Im erste Beispiel wird veranschaulicht, wie Sie standardmäßige x. 509-Speicher und eine Liste der Anzahl der Zertifikate in den einzelnen öffnen können.  
  
 Im zweite Beispiel wird veranschaulicht, wie Sie hinzufügen und Entfernen von einzelnen Zertifikate und Bereiche von Zertifikaten.  
  
 **Beispiel 1**  
  
 In diesem Beispiel wird versucht, jeden standard-Speicher in jeder standardmäßigen Speicherort auf dem aktuellen Computer zu öffnen. Es gibt eine Zusammenfassung, die anzeigt, ob jedes Geschäft vorhanden ist, und wenn also die Anzahl der sie Zertifikate enthält.  
  
 Das Beispiel erstellt eine <xref:System.Security.Cryptography.X509Certificates.X509Store> Objekt für jede Kombination von standard-Namen und den standardmäßigen Speicherort. Ruft die <xref:System.Security.Cryptography.X509Certificates.X509Store.Open%2A> -Methode mit dem <xref:System.Security.Cryptography.X509Certificates.OpenFlags.OpenExistingOnly?displayProperty=nameWithType> -Flag, das den physischen Speicher wird geöffnet, nur dann, wenn sie bereits vorhanden ist. Wenn der physische Speicher vorhanden ist, wird im Beispiel wird die <xref:System.Security.Cryptography.X509Certificates.X509Store.Name%2A>, <xref:System.Security.Cryptography.X509Certificates.X509Store.Location%2A>, und <xref:System.Security.Cryptography.X509Certificates.X509Store.Certificates%2A> Eigenschaften, die die Anzahl der Zertifikate im Speicher angezeigt.  
  
 [!code-csharp[x509store2#2](~/samples/snippets/csharp/VS_Snippets_CLR/x509store2/CS/storenames1.cs#2)]
 [!code-vb[x509store2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/x509store2/vb/storenames1.vb#2)]  
  
 **Beispiel 2**  
  
 In diesem Beispiel öffnet ein x. 509-Zertifikatspeicher, fügt Löscht Zertifikate und schließt dann den Speicher. Es wird davon ausgegangen, dass Sie die drei Zertifikate hinzufügen und entfernen Sie aus einem lokalen Speicher verfügen.  
  
 [!code-cpp[x509store2#1](~/samples/snippets/cpp/VS_Snippets_CLR/x509store2/CPP/x509store2.cpp#1)]
 [!code-csharp[x509store2#1](~/samples/snippets/csharp/VS_Snippets_CLR/x509store2/CS/x509store2.cs#1)]
 [!code-vb[x509store2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/x509store2/vb/x509store2.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.StorePermission">für das Auflisten der Zertifikate in einem x. 509-Zertifikat zu speichern. Sicherheitsaktion: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.StorePermissionFlags.EnumerateCertificates" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509Store.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="x509Store.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schließt einen X.509-Zertifikatsspeicher.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode gibt alle Ressourcen, die dem Speicher zugeordnet. Sie sollten immer ein x. 509-Zertifikatspeicher nach der Verwendung schließen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird ein x. 509-Zertifikatspeicher öffnet, fügt Löscht Zertifikate und schließt dann den Speicher. Es wird davon ausgegangen, dass Sie die drei Zertifikate hinzufügen und entfernen Sie aus einem lokalen Speicher verfügen.  
  
 [!code-cpp[x509store2#1](~/samples/snippets/cpp/VS_Snippets_CLR/x509store2/CPP/x509store2.cpp#1)]
 [!code-csharp[x509store2#1](~/samples/snippets/csharp/VS_Snippets_CLR/x509store2/CS/x509store2.cs#1)]
 [!code-vb[x509store2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/x509store2/vb/x509store2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509Store.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="x509Store.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt die von dieser <see cref="T:System.Security.Cryptography.X509Certificates.X509Store" /> verwendeten Ressourcen frei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Security.Cryptography.X509Certificates.X509Store> implementiert die <xref:System.IDisposable> Schnittstelle ab der [!INCLUDE[net_v46](~/includes/net-v46-md.md)]; in früheren Versionen von .NET Framework, die <xref:System.Security.Cryptography.X509Certificates.X509Store> Klasse implementiert diese Schnittstelle nicht und somit die `Dispose` Methode ist nicht vorhanden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOpen">
      <MemberSignature Language="C#" Value="public bool IsOpen { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOpen" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.X509Certificates.X509Store.IsOpen" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOpen As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOpen { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsOpen : bool" Usage="System.Security.Cryptography.X509Certificates.X509Store.IsOpen" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Location">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.X509Certificates.StoreLocation Location { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Cryptography.X509Certificates.StoreLocation Location" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.X509Certificates.X509Store.Location" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Location As StoreLocation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::X509Certificates::StoreLocation Location { System::Security::Cryptography::X509Certificates::StoreLocation get(); };" />
      <MemberSignature Language="F#" Value="member this.Location : System.Security.Cryptography.X509Certificates.StoreLocation" Usage="System.Security.Cryptography.X509Certificates.X509Store.Location" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.X509Certificates.StoreLocation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Speicherort des X.509-Zertifikatsspeichers ab.</summary>
        <value>Der Speicherort des Zertifikatspeichers.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft gibt den Speicherort des x. 509-Zertifikatspeichers entweder den Speicher für den aktuellen Benutzer oder der Speicher für den lokalen Computer.  
  
   
  
## Examples  
 Dieser Abschnitt enthält zwei Beispiele. Im erste Beispiel wird veranschaulicht, wie Sie standardmäßige x. 509-Speicher und eine Liste der Anzahl der Zertifikate in den einzelnen öffnen können.  
  
 Im zweite Beispiel wird veranschaulicht, wie Sie hinzufügen und Entfernen von einzelnen Zertifikate und Bereiche von Zertifikaten.  
  
 **Beispiel 1**  
  
 In diesem Beispiel wird versucht, jeden standard-Speicher in jeder standardmäßigen Speicherort auf dem aktuellen Computer zu öffnen. Es gibt eine Zusammenfassung, die anzeigt, ob jedes Geschäft vorhanden ist, und wenn also die Anzahl der sie Zertifikate enthält.  
  
 Das Beispiel erstellt eine <xref:System.Security.Cryptography.X509Certificates.X509Store> Objekt für jede Kombination von standard-Namen und den standardmäßigen Speicherort. Ruft die <xref:System.Security.Cryptography.X509Certificates.X509Store.Open%2A> -Methode mit dem <xref:System.Security.Cryptography.X509Certificates.OpenFlags.OpenExistingOnly?displayProperty=nameWithType> -Flag, das den physischen Speicher wird geöffnet, nur dann, wenn sie bereits vorhanden ist. Wenn der physische Speicher vorhanden ist, wird im Beispiel wird die <xref:System.Security.Cryptography.X509Certificates.X509Store.Name%2A>, <xref:System.Security.Cryptography.X509Certificates.X509Store.Location%2A>, und <xref:System.Security.Cryptography.X509Certificates.X509Store.Certificates%2A> Eigenschaften, die die Anzahl der Zertifikate im Speicher angezeigt.  
  
 [!code-csharp[x509store2#2](~/samples/snippets/csharp/VS_Snippets_CLR/x509store2/CS/storenames1.cs#2)]
 [!code-vb[x509store2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/x509store2/vb/storenames1.vb#2)]  
  
 **Beispiel 2**  
  
 In diesem Beispiel öffnet ein x. 509-Zertifikatspeicher, fügt Löscht Zertifikate und schließt dann den Speicher. Es wird davon ausgegangen, dass Sie die drei Zertifikate hinzufügen und entfernen Sie aus einem lokalen Speicher verfügen.  
  
 [!code-cpp[x509store2#1](~/samples/snippets/cpp/VS_Snippets_CLR/x509store2/CPP/x509store2.cpp#1)]
 [!code-csharp[x509store2#1](~/samples/snippets/csharp/VS_Snippets_CLR/x509store2/CS/x509store2.cs#1)]
 [!code-vb[x509store2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/x509store2/vb/x509store2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.X509Certificates.X509Store.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Security.Cryptography.X509Certificates.X509Store.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen des X.509-Zertifikatsspeichers ab.</summary>
        <value>Der Name des Zertifikatspeichers.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft gibt den Namen des x. 509-Zertifikatspeichers an. Dieser Wert kann es sich um den Typ der Zertifikate, die gespeichert werden, z. B. Zertifikate oder Zertifikate von vertrauenswürdigen Herausgebern angeben.  
  
   
  
## Examples  
 Dieser Abschnitt enthält zwei Beispiele. Im erste Beispiel wird veranschaulicht, wie Sie standardmäßige x. 509-Speicher und eine Liste der Anzahl der Zertifikate in den einzelnen öffnen können.  
  
 Im zweite Beispiel wird veranschaulicht, wie Sie hinzufügen und Entfernen von einzelnen Zertifikate und Bereiche von Zertifikaten.  
  
 **Beispiel 1**  
  
 In diesem Beispiel wird versucht, jeden standard-Speicher in jeder standardmäßigen Speicherort auf dem aktuellen Computer zu öffnen. Es gibt eine Zusammenfassung, die anzeigt, ob jedes Geschäft vorhanden ist, und wenn also die Anzahl der sie Zertifikate enthält.  
  
 Das Beispiel erstellt eine <xref:System.Security.Cryptography.X509Certificates.X509Store> Objekt für jede Kombination von standard-Namen und den standardmäßigen Speicherort. Ruft die <xref:System.Security.Cryptography.X509Certificates.X509Store.Open%2A> -Methode mit dem <xref:System.Security.Cryptography.X509Certificates.OpenFlags.OpenExistingOnly?displayProperty=nameWithType> -Flag, das den physischen Speicher wird geöffnet, nur dann, wenn sie bereits vorhanden ist. Wenn der physische Speicher vorhanden ist, wird im Beispiel wird die <xref:System.Security.Cryptography.X509Certificates.X509Store.Name%2A>, <xref:System.Security.Cryptography.X509Certificates.X509Store.Location%2A>, und <xref:System.Security.Cryptography.X509Certificates.X509Store.Certificates%2A> Eigenschaften, die die Anzahl der Zertifikate im Speicher angezeigt.  
  
 [!code-csharp[x509store2#2](~/samples/snippets/csharp/VS_Snippets_CLR/x509store2/CS/storenames1.cs#2)]
 [!code-vb[x509store2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/x509store2/vb/storenames1.vb#2)]  
  
 **Beispiel 2**  
  
 In diesem Beispiel öffnet ein x. 509-Zertifikatspeicher, fügt Löscht Zertifikate und schließt dann den Speicher. Es wird davon ausgegangen, dass Sie die drei Zertifikate hinzufügen und entfernen Sie aus einem lokalen Speicher verfügen.  
  
 [!code-cpp[x509store2#1](~/samples/snippets/cpp/VS_Snippets_CLR/x509store2/CPP/x509store2.cpp#1)]
 [!code-csharp[x509store2#1](~/samples/snippets/csharp/VS_Snippets_CLR/x509store2/CS/x509store2.cs#1)]
 [!code-vb[x509store2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/x509store2/vb/x509store2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public void Open (System.Security.Cryptography.X509Certificates.OpenFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Open(valuetype System.Security.Cryptography.X509Certificates.OpenFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509Store.Open(System.Security.Cryptography.X509Certificates.OpenFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Open (flags As OpenFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Open(System::Security::Cryptography::X509Certificates::OpenFlags flags);" />
      <MemberSignature Language="F#" Value="member this.Open : System.Security.Cryptography.X509Certificates.OpenFlags -&gt; unit" Usage="x509Store.Open flags" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flags" Type="System.Security.Cryptography.X509Certificates.OpenFlags" />
      </Parameters>
      <Docs>
        <param name="flags">Eine bitweise Kombination von Enumerationswerten, die das Verfahren zum Öffnen des X.509-Zertifikatspeichers angibt.</param>
        <summary>Öffnet je nach <see cref="T:System.Security.Cryptography.X509Certificates.OpenFlags" />-Flageinstellungen einen X.509-Zertifikatsspeicher oder erstellt einen neuen Speicher.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie diese Methode, um einen vorhandenen x. 509-Speicher zu öffnen. Beachten Sie, dass Sie zusätzliche Berechtigungen, die anhand des <xref:System.Security.Permissions.StorePermissionFlags>, um die Zertifikate im Speicher aufzulisten. Sie können einen neuen Speicher erstellen, indem ein Store-Name, der nicht der Fall ist an den Klassenkonstruktor übergeben, und klicken Sie dann mit einer der der <xref:System.Security.Cryptography.X509Certificates.OpenFlags> flags außer <xref:System.Security.Cryptography.X509Certificates.OpenFlags.OpenExistingOnly>.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird ein x. 509-Zertifikatspeicher öffnet, fügt Löscht Zertifikate und schließt dann den Speicher. Es wird davon ausgegangen, dass Sie die drei Zertifikate hinzufügen und entfernen Sie aus einem lokalen Speicher verfügen.  
  
 [!code-cpp[x509store2#1](~/samples/snippets/cpp/VS_Snippets_CLR/x509store2/CPP/x509store2.cpp#1)]
 [!code-csharp[x509store2#1](~/samples/snippets/csharp/VS_Snippets_CLR/x509store2/CS/x509store2.cs#1)]
 [!code-vb[x509store2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/x509store2/vb/x509store2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Der Speicher ist nicht lesbar.</exception>
        <exception cref="T:System.Security.SecurityException">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</exception>
        <exception cref="T:System.ArgumentException">Der Speicher enthält ungültige Werte.</exception>
        <permission cref="T:System.Security.Permissions.StorePermission">Öffnen ein x. 509-Zertifikat speichern. Sicherheitsaktion: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />. Zugeordnete Enumerationen: <see cref="F:System.Security.Permissions.StorePermissionFlags.OpenStore" />, <see cref="F:System.Security.Permissions.StorePermissionFlags.CreateStore" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.Security.Cryptography.X509Certificates.X509Certificate2 certificate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Security.Cryptography.X509Certificates.X509Certificate2 certificate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509Store.Remove(System.Security.Cryptography.X509Certificates.X509Certificate2)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (certificate As X509Certificate2)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::Security::Cryptography::X509Certificates::X509Certificate2 ^ certificate);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.Security.Cryptography.X509Certificates.X509Certificate2 -&gt; unit" Usage="x509Store.Remove certificate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="certificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate2" />
      </Parameters>
      <Docs>
        <param name="certificate">Das zu entfernende Zertifikat.</param>
        <summary>Entfernt ein Zertifikat aus dem X.509-Zertifikatsspeicher.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie diese Methode, um ein einzelnes Zertifikat aus einem x. 509-Speicher zu entfernen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird ein x. 509-Zertifikatspeicher öffnet, fügt Löscht Zertifikate und schließt dann den Speicher. Es wird davon ausgegangen, dass Sie die drei Zertifikate hinzufügen und entfernen Sie aus einem lokalen Speicher verfügen.  
  
 [!code-cpp[x509store2#1](~/samples/snippets/cpp/VS_Snippets_CLR/x509store2/CPP/x509store2.cpp#1)]
 [!code-csharp[x509store2#1](~/samples/snippets/csharp/VS_Snippets_CLR/x509store2/CS/x509store2.cs#1)]
 [!code-vb[x509store2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/x509store2/vb/x509store2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="certificate" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.Security.SecurityException">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</exception>
        <permission cref="T:System.Security.Permissions.StorePermission">zum Entfernen von Zertifikaten aus einem x. 509-Zertifikat zu speichern. Sicherheitsaktion: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />. Zugeordnete Enumerationen: <see cref="F:System.Security.Permissions.StorePermissionFlags.RemoveFromStore" />, <see cref="F:System.Security.Permissions.StorePermissionFlags.EnumerateCertificates" /></permission>
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public void RemoveRange (System.Security.Cryptography.X509Certificates.X509Certificate2Collection certificates);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveRange(class System.Security.Cryptography.X509Certificates.X509Certificate2Collection certificates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509Store.RemoveRange(System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveRange (certificates As X509Certificate2Collection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveRange(System::Security::Cryptography::X509Certificates::X509Certificate2Collection ^ certificates);" />
      <MemberSignature Language="F#" Value="member this.RemoveRange : System.Security.Cryptography.X509Certificates.X509Certificate2Collection -&gt; unit" Usage="x509Store.RemoveRange certificates" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO("Method isn't transactional (like documented)")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="certificates" Type="System.Security.Cryptography.X509Certificates.X509Certificate2Collection" />
      </Parameters>
      <Docs>
        <param name="certificates">Ein zu entfernender Bereich von Zertifikaten.</param>
        <summary>Entfernt einen Bereich von Zertifikaten aus einem X.509-Zertifikatsspeicher.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Dieser Typ implementiert die <xref:System.IDisposable> Schnittstelle. Wenn Sie mit dem Typ haben, sollten Sie es entweder direkt oder indirekt freigeben. Damit des Typs direkt freigegeben werden, rufen Sie die <xref:System.IDisposable.Dispose%2A> -Methode in einer `try` / `catch` Block. Um sie indirekt löschen, verwenden Sie ein Sprachkonstrukt wie `using` (in c#) oder `Using` (in Visual Basic). Weitere Informationen finden Sie im Abschnitt "mithilfe von ein-Objekt, das implementiert" IDisposable "" in der <xref:System.IDisposable> schnittstellenthema.  
  
 Diese Methode entfernt mehrere Zertifikate aus einem x. 509-Zertifikatsspeicher; Wenn das Entfernen eines Zertifikats ein Fehler auftritt, der Vorgang rückgängig gemacht, und werden keine Zertifikate entfernt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird ein x. 509-Zertifikatspeicher öffnet, fügt Löscht Zertifikate und schließt dann den Speicher. Es wird davon ausgegangen, dass Sie die drei Zertifikate hinzufügen und entfernen Sie aus einem lokalen Speicher verfügen.  
  
 [!code-cpp[x509store2#1](~/samples/snippets/cpp/VS_Snippets_CLR/x509store2/CPP/x509store2.cpp#1)]
 [!code-csharp[x509store2#1](~/samples/snippets/csharp/VS_Snippets_CLR/x509store2/CS/x509store2.cs#1)]
 [!code-vb[x509store2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/x509store2/vb/x509store2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="certificates" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.Security.SecurityException">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</exception>
        <permission cref="T:System.Security.Permissions.StorePermission">zum Entfernen von Zertifikaten aus einem x. 509-Zertifikat zu speichern. Sicherheitsaktion: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />. Zugeordnete Enumerationen: <see cref="F:System.Security.Permissions.StorePermissionFlags.RemoveFromStore" />, <see cref="F:System.Security.Permissions.StorePermissionFlags.EnumerateCertificates" /></permission>
      </Docs>
    </Member>
    <Member MemberName="StoreHandle">
      <MemberSignature Language="C#" Value="public IntPtr StoreHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int StoreHandle" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.X509Certificates.X509Store.StoreHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StoreHandle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr StoreHandle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.StoreHandle : nativeint" Usage="System.Security.Cryptography.X509Certificates.X509Store.StoreHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO("Mono's stores are fully managed. Always returns IntPtr.Zero.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen <see cref="T:System.IntPtr" />-Handle für einen <see langword="HCERTSTORE" />-Speicher ab.</summary>
        <value>Ein Handle für einen <see langword="HCERTSTORE" />-Speicher.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Security.Cryptography.X509Certificates.X509Store.StoreHandle%2A> Eigenschaft, um Kompatibilität mit der nicht verwaltete Microsoft Cryptographic API (CAPI) bereitzustellen.  
  
 Weitere Informationen zu der `HCERTSTORE` behandelt, finden Sie in der Dokumentation zur nicht verwalteten CAPI in im Plattform-SDK-Abschnitt, der die [MSDN-Bibliothek](http://go.microsoft.com/fwlink/?linkid=37118).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Der Speicher ist nicht geöffnet.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">für nicht verwalteten Code. Sicherheitsaktion: <see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" />. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
  </Members>
</Type>
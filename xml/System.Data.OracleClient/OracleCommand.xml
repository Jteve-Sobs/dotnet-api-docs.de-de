<Type Name="OracleCommand" FullName="System.Data.OracleClient.OracleCommand">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0741287590ae9b00bd3d13597a55e243ce8c84b0" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69125612" /></Metadata><TypeSignature Language="C#" Value="public sealed class OracleCommand : System.Data.Common.DbCommand, ICloneable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit OracleCommand extends System.Data.Common.DbCommand implements class System.ICloneable" />
  <TypeSignature Language="DocId" Value="T:System.Data.OracleClient.OracleCommand" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class OracleCommand&#xA;Inherits DbCommand&#xA;Implements ICloneable" />
  <TypeSignature Language="C++ CLI" Value="public ref class OracleCommand sealed : System::Data::Common::DbCommand, ICloneable" />
  <TypeSignature Language="F#" Value="type OracleCommand = class&#xA;    inherit DbCommand&#xA;    interface ICloneable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.OracleClient</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DbCommand</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.DefaultEvent("RecordsAffected")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.OracleCommandDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Obsolete("OracleCommand has been deprecated. http://go.microsoft.com/fwlink/?LinkID=144260", false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.OracleCommandDesigner, Microsoft.VSDesigner, Version=7.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.OracleCommandDesigner, Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt eine SQL-Anweisung oder eine gespeicherte Prozedur dar, die für eine Datenbank ausgeführt werden soll. Diese Klasse kann nicht vererbt werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Typ ist veraltet und wird in einer zukünftigen Version des .NET Framework entfernt. Weitere Informationen finden Sie unter [Oracle und ADO.net](~/docs/framework/data/adonet/oracle-and-adonet.md).  
  
 Die <xref:System.Data.OracleClient.OracleCommand> -Klasse stellt die folgenden Methoden zum Ausführen von Befehlen für eine Datenquelle bereit:  
  
|Element|Beschreibung|  
|----------|-----------------|  
|<xref:System.Data.OracleClient.OracleCommand.ExecuteReader%2A>|Führt Befehle aus, die Zeilen zurückgeben.|  
|<xref:System.Data.OracleClient.OracleCommand.ExecuteOracleNonQuery%2A>|Führt eine SQL-Anweisung für die <xref:System.Data.OracleClient.OracleCommand.Connection%2A> aus und gibt die Anzahl der betroffenen Zeilen zurück.|  
|<xref:System.Data.OracleClient.OracleCommand.ExecuteNonQuery%2A>|Führt Befehle wie INSERT-, DELETE-, Update-und SET-Anweisungen in SQL aus.|  
|<xref:System.Data.OracleClient.OracleCommand.ExecuteScalar%2A>|Ruft einen einzelnen Wert (z. b. einen Aggregatwert) aus einer Datenbank als .NET Framework Datentyp ab.|  
|<xref:System.Data.OracleClient.OracleCommand.ExecuteOracleScalar%2A>|Ruft einen einzelnen Wert (z. b. einen Aggregatwert) aus einer Datenbank als Oracle-spezifischen Datentyp ab.|  
  
 Sie können die <xref:System.Data.OracleClient.OracleCommand.CommandText%2A> -Eigenschaft zurücksetzen und <xref:System.Data.OracleClient.OracleCommand> das-Objekt wieder verwenden.  
  
 Wenn die Ausführung des Befehls zu einem <xref:System.Data.OracleClient.OracleException>schwerwiegenden Ergebnis führt <xref:System.Data.OracleClient.OracleConnection> , wird möglicherweise geschlossen. Die Benutzer können die Verbindung aber erneut öffnen und fortfahren.  
  
> [!NOTE]
>  Anders als das **Command** -Objekt in den anderen .NET Framework-Datenanbietern (SQL Server, OLE DB und ODBC) <xref:System.Data.OracleClient.OracleCommand> unterstützt <xref:System.Data.OracleClient.OracleCommand.CommandTimeout%2A> das-Objekt keine-Eigenschaft. Das Festlegen eines Befehls Timeouts hat keine Auswirkung, und der zurückgegebene Wert ist immer 0 (null).  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Data.OracleClient.OracleCommand.ExecuteReader%2A> -Methode <xref:System.Data.OracleClient.OracleCommand>von zusammen mit <xref:System.Data.OracleClient.OracleDataReader> und <xref:System.Data.OracleClient.OracleConnection>verwendet, um Zeilen aus einer Tabelle auszuwählen.  
  
 [!code-csharp[Classic WebData OracleCommand#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OracleCommand/CS/source.cs#1)]
 [!code-vb[Classic WebData OracleCommand#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OracleCommand/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/framework/data/adonet/commands-and-parameters.md">Arbeiten mit Befehlen</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz des <see cref="T:System.Data.OracleClient.OracleCommand" />.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/commands-and-parameters.md">Arbeiten mit Befehlen</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OracleCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleCommand.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OracleCommand();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz des <see cref="T:System.Data.OracleClient.OracleCommand" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Basiskonstruktor initialisiert alle Felder mit ihren Standardwerten. In der folgenden Tabelle werden die anfänglichen Eigenschaftswerte für <xref:System.Data.OracleClient.OracleCommand>eine Instanz von angezeigt.  
  
|Eigenschaften|Anfangswert|  
|----------------|-------------------|  
|<xref:System.Data.OracleClient.OracleCommand.CommandText%2A>|leere Zeichenfolge ("")|  
|<xref:System.Data.OracleClient.OracleCommand.CommandType%2A>|`Text`|  
|<xref:System.Data.OracleClient.OracleCommand.Connection%2A>|NULL|  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein <xref:System.Data.OracleClient.OracleCommand> erstellt, und einige der zugehörigen Eigenschaften werden festgelegt.  
  
 [!code-csharp[Classic WebData OracleCommand.OracleCommand#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OracleCommand.OracleCommand/CS/source.cs#1)]
 [!code-vb[Classic WebData OracleCommand.OracleCommand#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OracleCommand.OracleCommand/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/commands-and-parameters.md">Arbeiten mit Befehlen</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OracleCommand (string commandText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string commandText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleCommand.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (commandText As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OracleCommand(System::String ^ commandText);" />
      <MemberSignature Language="F#" Value="new System.Data.OracleClient.OracleCommand : string -&gt; System.Data.OracleClient.OracleCommand" Usage="new System.Data.OracleClient.OracleCommand commandText" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="commandText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="commandText">Der Text der Abfrage.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.OracleClient.OracleCommand" />-Klasse mit dem Text der Abfrage.</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/framework/data/adonet/commands-and-parameters.md">Arbeiten mit Befehlen</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OracleCommand (string commandText, System.Data.OracleClient.OracleConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string commandText, class System.Data.OracleClient.OracleConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleCommand.#ctor(System.String,System.Data.OracleClient.OracleConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (commandText As String, connection As OracleConnection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OracleCommand(System::String ^ commandText, System::Data::OracleClient::OracleConnection ^ connection);" />
      <MemberSignature Language="F#" Value="new System.Data.OracleClient.OracleCommand : string * System.Data.OracleClient.OracleConnection -&gt; System.Data.OracleClient.OracleCommand" Usage="new System.Data.OracleClient.OracleCommand (commandText, connection)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="commandText" Type="System.String" />
        <Parameter Name="connection" Type="System.Data.OracleClient.OracleConnection" />
      </Parameters>
      <Docs>
        <param name="commandText">Der Text der Abfrage.</param>
        <param name="connection">Ein <see cref="T:System.Data.OracleClient.OracleConnection" />-Objekt, das die Verbindung mit einer Datenbank darstellt.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.OracleClient.OracleCommand" />-Klasse mit dem Text der Abfrage und ein <see cref="T:System.Data.OracleClient.OracleConnection" />-Objekt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird ein <xref:System.Data.OracleClient.OracleCommand>erstellt.  
  
 [!code-csharp[Classic WebData OracleCommand.OracleCommand2#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OracleCommand.OracleCommand2/CS/source.cs#1)]
 [!code-vb[Classic WebData OracleCommand.OracleCommand2#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OracleCommand.OracleCommand2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/commands-and-parameters.md">Arbeiten mit Befehlen</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OracleCommand (string commandText, System.Data.OracleClient.OracleConnection connection, System.Data.OracleClient.OracleTransaction tx);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string commandText, class System.Data.OracleClient.OracleConnection connection, class System.Data.OracleClient.OracleTransaction tx) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleCommand.#ctor(System.String,System.Data.OracleClient.OracleConnection,System.Data.OracleClient.OracleTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (commandText As String, connection As OracleConnection, tx As OracleTransaction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OracleCommand(System::String ^ commandText, System::Data::OracleClient::OracleConnection ^ connection, System::Data::OracleClient::OracleTransaction ^ tx);" />
      <MemberSignature Language="F#" Value="new System.Data.OracleClient.OracleCommand : string * System.Data.OracleClient.OracleConnection * System.Data.OracleClient.OracleTransaction -&gt; System.Data.OracleClient.OracleCommand" Usage="new System.Data.OracleClient.OracleCommand (commandText, connection, tx)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="commandText" Type="System.String" />
        <Parameter Name="connection" Type="System.Data.OracleClient.OracleConnection" />
        <Parameter Name="tx" Type="System.Data.OracleClient.OracleTransaction" />
      </Parameters>
      <Docs>
        <param name="commandText">Der Text der Abfrage.</param>
        <param name="connection">Ein <see cref="T:System.Data.OracleClient.OracleConnection" />-Objekt, das die Verbindung mit einer Datenbank darstellt.</param>
        <param name="tx">Die <see cref="T:System.Data.OracleClient.OracleTransaction" />, in der der <see cref="T:System.Data.OracleClient.OracleCommand" /> ausgeführt wird.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.OracleClient.OracleCommand" />-Klasse mit dem Text der Abfrage, ein <see cref="T:System.Data.OracleClient.OracleConnection" />-Objekt und eine <see cref="T:System.Data.OracleClient.OracleTransaction" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der folgenden Tabelle werden die anfänglichen Eigenschaftswerte für eine Instanz dieser Implementierung <xref:System.Data.OracleClient.OracleCommand>von angezeigt.  
  
|Eigenschaften|Anfangswert|  
|----------------|-------------------|  
|<xref:System.Data.OracleClient.OracleCommand.CommandText%2A>|`cmdText`|  
|<xref:System.Data.OracleClient.OracleCommand.CommandType%2A>|`Text`|  
|<xref:System.Data.OracleClient.OracleCommand.Connection%2A>|Ein neues <xref:System.Data.OracleClient.OracleConnection> , das den Wert für den `connection` -Parameter ist.|  
  
 Sie können den Wert für jeden dieser Parameter ändern, indem Sie die zugehörige Eigenschaft festlegen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein <xref:System.Data.OracleClient.OracleCommand> erstellt, und einige der zugehörigen Eigenschaften werden festgelegt.  
  
 [!code-csharp[Classic WebData OracleCommand.OracleCommand3#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OracleCommand.OracleCommand3/CS/mysample.cs#1)]
 [!code-vb[Classic WebData OracleCommand.OracleCommand3#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OracleCommand.OracleCommand3/VB/mysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/commands-and-parameters.md">Arbeiten mit Befehlen</related>
      </Docs>
    </Member>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public override void Cancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Cancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleCommand.Cancel" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Cancel ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Cancel();" />
      <MemberSignature Language="F#" Value="override this.Cancel : unit -&gt; unit" Usage="oracleCommand.Cancel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Versucht die Ausführung eines <see cref="T:System.Data.OracleClient.OracleCommand" /> abzubrechen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn nichts abzubrechen ist, passiert nichts. Wenn jedoch das Abbrechen für einen aktuell ausgeführten Befehl fehlschlägt, wird keine Ausnahme ausgelöst.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein <xref:System.Data.OracleClient.OracleCommand>erstellt, ausgeführt und dann die Ausführung abgebrochen. Um dies zu erreichen, wird der Methode eine Zeichenfolge mit einer SQL-SELECT-Anweisung und einer Zeichenfolge für die Verbindung mit der Datenbank übermittelt.  
  
 [!code-csharp[Classic WebData OracleCommand.Cancel#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OracleCommand.Cancel/CS/source.cs#1)]
 [!code-vb[Classic WebData OracleCommand.Cancel#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OracleCommand.Cancel/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/commands-and-parameters.md">Arbeiten mit Befehlen</related>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleCommand.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="oracleCommand.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erstellt eine Kopie dieses <see cref="T:System.Data.OracleClient.OracleCommand" />-Objekts.</summary>
        <returns>Ein neues <see cref="T:System.Data.OracleClient.OracleCommand" />-Objekt, in dem alle Eigenschaftswerte mit dem Original übereinstimmen.</returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/framework/data/adonet/commands-and-parameters.md">Arbeiten mit Befehlen</related>
      </Docs>
    </Member>
    <Member MemberName="CommandText">
      <MemberSignature Language="C#" Value="public override string CommandText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CommandText" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleCommand.CommandText" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property CommandText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CommandText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CommandText : string with get, set" Usage="System.Data.OracleClient.OracleCommand.CommandText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Oracle.Design.OracleCommandTextEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Oracle.Design.OracleCommandTextEditor, Microsoft.VSDesigner, Version=7.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Oracle.Design.OracleCommandTextEditor, Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die SQL-Anweisung oder gespeicherte Prozedur ab, die für die Datenbank ausgeführt werden soll, oder legt diese fest.</summary>
        <value>Die SQL-Anweisung oder gespeicherte Prozedur, die ausgeführt werden soll. Der Standardwert ist eine leere Zeichenfolge („“).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Data.OracleClient.OracleCommand.CommandType%2A> -Eigenschaft auf `StoredProcedure`festgelegt ist <xref:System.Data.OracleClient.OracleCommand.CommandText%2A> , sollte die-Eigenschaft auf den Namen der gespeicherten Prozedur festgelegt werden. Der Benutzer muss möglicherweise die Escapezeichensyntax verwenden, wenn der Name der gespeicherten Prozedur Sonderzeichen enthält. Der-Befehl führt diese gespeicherte Prozedur aus, wenn Sie eine der Execute-Methoden aufruft.  
  
 Der .NET Framework Datenanbieter für Oracle unterstützt den Platzhalter für Fragezeichen (?) nicht zum Übergeben von Parametern an eine SQL- <xref:System.Data.OracleClient.OracleCommand> Anweisung `CommandType.Text`, die von einem von aufgerufen wird. In diesem Fall müssen benannte Parameter verwendet werden. Beispiel:  
  
```  
SELECT * FROM Customers WHERE CustomerID = :pCustomerID  
```  
  
 Wenn Sie benannte Parameter in einer SQL-Anweisung verwenden, <xref:System.Data.OracleClient.OracleCommand> die `CommandType.Text`von einem von aufgerufen wird, müssen Sie dem Parameternamen einen Doppelpunkt (:). In einer gespeicherten Prozedur oder beim Verweis auf einen benannten Parameter an anderer Stelle im Code (z. b. beim Hinzufügen <xref:System.Data.OracleClient.OracleParameter> von Objekten <xref:System.Data.OracleClient.OracleCommand.Parameters%2A> zur-Eigenschaft) ist der benannte Parameter nicht mit einem Doppelpunkt (:). Der .NET Framework Datenanbieter für Oracle liefert den Doppelpunkt automatisch.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein <xref:System.Data.OracleClient.OracleCommand> erstellt, und einige der zugehörigen Eigenschaften werden festgelegt.  
  
 [!code-csharp[Classic WebData OracleCommand.CommandText#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OracleCommand.CommandText/CS/source.cs#1)]
 [!code-vb[Classic WebData OracleCommand.CommandText#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OracleCommand.CommandText/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/commands-and-parameters.md">Arbeiten mit Befehlen</related>
      </Docs>
    </Member>
    <Member MemberName="CommandTimeout">
      <MemberSignature Language="C#" Value="public override int CommandTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CommandTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleCommand.CommandTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property CommandTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int CommandTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CommandTimeout : int with get, set" Usage="System.Data.OracleClient.OracleCommand.CommandTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Zeit ab, die gewartet werden soll, bis der Versuch einer Befehlsausführung beendet und ein Fehler generiert wird, oder legt diese fest.</summary>
        <value>Die Zeit in Sekunden, während der auf die Ausführung des Befehls gewartet werden soll. Der Standardwert ist 30 Sekunden.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine <xref:System.ArgumentException> wird generiert, wenn der <xref:System.Data.OracleClient.OracleCommand.CommandTimeout%2A> zugewiesene Eigenschafts Wert kleiner als 0 (null) ist.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/commands-and-parameters.md">Arbeiten mit Befehlen</related>
      </Docs>
    </Member>
    <Member MemberName="CommandType">
      <MemberSignature Language="C#" Value="public override System.Data.CommandType CommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.CommandType CommandType" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleCommand.CommandType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property CommandType As CommandType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Data::CommandType CommandType { System::Data::CommandType get(); void set(System::Data::CommandType value); };" />
      <MemberSignature Language="F#" Value="member this.CommandType : System.Data.CommandType with get, set" Usage="System.Data.OracleClient.OracleCommand.CommandType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.CommandType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, wie die <see cref="P:System.Data.OracleClient.OracleCommand.CommandText" />-Eigenschaft interpretiert werden soll, oder legt diesen fest.</summary>
        <value>Einer der <see cref="T:System.Data.CommandType" />-Werte. Die Standardeinstellung ist <see langword="Text" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Data.OracleClient.OracleCommand.CommandType%2A> -Eigenschaft auf `StoredProcedure`festgelegt ist, sollten Sie <xref:System.Data.OracleClient.OracleCommand.CommandText%2A> die-Eigenschaft auf die vollständige Oracle-aufrufssyntax festlegen. Der Befehl führt dann diese gespeicherte Prozedur aus, <xref:System.Data.OracleClient.OracleCommand.ExecuteReader%2A> Wenn Sie eine der Execute-Methoden (z. b. oder <xref:System.Data.OracleClient.OracleCommand.ExecuteNonQuery%2A>) aufruft.  
  
 Die <xref:System.Data.OracleClient.OracleCommand.Connection%2A>Eigenschaften <xref:System.Data.OracleClient.OracleCommand.CommandType%2A> , und<xref:System.Data.OracleClient.OracleCommand.CommandText%2A> können nicht festgelegt werden, wenn die aktuelle Verbindung einen Execute-oder Fetch-Vorgang ausführt.  
  
 Der .NET Framework Datenanbieter für Oracle unterstützt den Platzhalter für Fragezeichen (?) nicht zum Übergeben von Parametern an eine SQL- <xref:System.Data.OracleClient.OracleCommand> Anweisung `CommandType.Text`, die von einem von aufgerufen wird. In diesem Fall müssen benannte Parameter verwendet werden. Beispiel:  
  
```  
SELECT * FROM Customers WHERE CustomerID = :pCustomerID  
```  
  
 Wenn Sie benannte Parameter in einer SQL-Anweisung verwenden, <xref:System.Data.OracleClient.OracleCommand> die `CommandType.Text`von einem von aufgerufen wird, müssen Sie dem Parameternamen einen Doppelpunkt (:). In einer gespeicherten Prozedur oder beim Verweis auf einen benannten Parameter an anderer Stelle im Code (z. b. beim Hinzufügen <xref:System.Data.OracleClient.OracleParameter> von Objekten <xref:System.Data.OracleClient.OracleCommand.Parameters%2A> zur-Eigenschaft) ist der benannte Parameter nicht mit einem Doppelpunkt (:). Der .NET Framework Datenanbieter für Oracle liefert den Doppelpunkt automatisch.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine Instanz einer abgeleiteten Klasse <xref:System.Data.OracleClient.OracleCommand> erstellt und einige ihrer Eigenschaften festgelegt.  
  
 [!code-csharp[Classic WebData OracleCommand.CommandType#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OracleCommand.CommandType/CS/source.cs#1)]
 [!code-vb[Classic WebData OracleCommand.CommandType#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OracleCommand.CommandType/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der Wert war kein gültiger <see cref="T:System.Data.CommandType" />.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/commands-and-parameters.md">Arbeiten mit Befehlen</related>
      </Docs>
    </Member>
    <Member MemberName="Connection">
      <MemberSignature Language="C#" Value="public System.Data.OracleClient.OracleConnection Connection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.OracleClient.OracleConnection Connection" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleCommand.Connection" />
      <MemberSignature Language="VB.NET" Value="Public Property Connection As OracleConnection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::OracleClient::OracleConnection ^ Connection { System::Data::OracleClient::OracleConnection ^ get(); void set(System::Data::OracleClient::OracleConnection ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Connection : System.Data.OracleClient.OracleConnection with get, set" Usage="System.Data.OracleClient.OracleCommand.Connection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DbConnectionEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DbConnectionEditor, Microsoft.VSDesigner, Version=7.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DbConnectionEditor, Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.OracleClient.OracleConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die <see cref="T:System.Data.OracleClient.OracleConnection" /> ab, die von dieser Instanz des <see cref="T:System.Data.OracleClient.OracleCommand" /> verwendet wird, oder legt diese fest.</summary>
        <value>Die Verbindung mit einer Datenquelle. Der Standard ist ein NULL-Wert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.OracleClient.OracleCommand.Connection%2A>Eigenschaften, und können <xref:System.Data.OracleClient.OracleCommand.CommandType%2A>nicht fest <xref:System.Data.OracleClient.OracleCommand.CommandText%2A> gelegt werden, wenn die aktuelle Verbindung einen Execute-oder Fetch-Vorgang ausführt.  
  
 Wenn Sie <xref:System.Data.OracleClient.OracleCommand.Connection%2A> festlegen, während eine Transaktion ausgeführt wird und die <xref:System.Data.OracleClient.OracleCommand.Transaction%2A>-Eigenschaft nicht NULL ist, wird eine <xref:System.InvalidOperationException> ausgelöst. Wenn Sie festlegen <xref:System.Data.OracleClient.OracleCommand.Connection%2A> , nachdem für die Transaktion ein Commit oder Rollback ausgeführt wurde <xref:System.Data.OracleClient.OracleCommand.Transaction%2A> und die-Eigenschaft nicht NULL <xref:System.Data.OracleClient.OracleCommand.Transaction%2A> ist, wird die-Eigenschaft auf einen NULL-Wert festgelegt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein <xref:System.Data.OracleClient.OracleCommand> erstellt, und einige der zugehörigen Eigenschaften werden festgelegt.  
  
 [!code-csharp[Classic WebData OracleCommand.Connection#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OracleCommand.Connection/CS/source.cs#1)]
 [!code-vb[Classic WebData OracleCommand.Connection#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OracleCommand.Connection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die <see cref="P:System.Data.OracleClient.OracleCommand.Connection" />-Eigenschaft wurde beim Ausführen einer Transaktion geändert.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/commands-and-parameters.md">Arbeiten mit Befehlen</related>
      </Docs>
    </Member>
    <Member MemberName="CreateDbParameter">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbParameter CreateDbParameter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.DbParameter CreateDbParameter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleCommand.CreateDbParameter" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateDbParameter () As DbParameter" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Data::Common::DbParameter ^ CreateDbParameter();" />
      <MemberSignature Language="F#" Value="override this.CreateDbParameter : unit -&gt; System.Data.Common.DbParameter" Usage="oracleCommand.CreateDbParameter " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbParameter</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateParameter">
      <MemberSignature Language="C#" Value="public System.Data.OracleClient.OracleParameter CreateParameter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.OracleClient.OracleParameter CreateParameter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleCommand.CreateParameter" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateParameter () As OracleParameter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::OracleClient::OracleParameter ^ CreateParameter();" />
      <MemberSignature Language="F#" Value="override this.CreateParameter : unit -&gt; System.Data.OracleClient.OracleParameter" Usage="oracleCommand.CreateParameter " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OracleClient.OracleParameter</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erstellt eine neue Instanz eines <see cref="T:System.Data.OracleClient.OracleParameter" />-Objekts.</summary>
        <returns>Ein <see cref="T:System.Data.OracleClient.OracleParameter" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei <xref:System.Data.OracleClient.OracleCommand.CreateParameter%2A> der-Methode handelt es sich um eine <xref:System.Data.IDbCommand.CreateParameter%2A>stark typisierte Version von.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/commands-and-parameters.md">Arbeiten mit Befehlen</related>
      </Docs>
    </Member>
    <Member MemberName="DbConnection">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbConnection DbConnection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbConnection DbConnection" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleCommand.DbConnection" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Property DbConnection As DbConnection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Data::Common::DbConnection ^ DbConnection { System::Data::Common::DbConnection ^ get(); void set(System::Data::Common::DbConnection ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DbConnection : System.Data.Common.DbConnection with get, set" Usage="System.Data.OracleClient.OracleCommand.DbConnection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DbParameterCollection">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbParameterCollection DbParameterCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbParameterCollection DbParameterCollection" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleCommand.DbParameterCollection" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property DbParameterCollection As DbParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Data::Common::DbParameterCollection ^ DbParameterCollection { System::Data::Common::DbParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DbParameterCollection : System.Data.Common.DbParameterCollection" Usage="System.Data.OracleClient.OracleCommand.DbParameterCollection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DbTransaction">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbTransaction DbTransaction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbTransaction DbTransaction" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleCommand.DbTransaction" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Property DbTransaction As DbTransaction" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Data::Common::DbTransaction ^ DbTransaction { System::Data::Common::DbTransaction ^ get(); void set(System::Data::Common::DbTransaction ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DbTransaction : System.Data.Common.DbTransaction with get, set" Usage="System.Data.OracleClient.OracleCommand.DbTransaction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbTransaction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DesignTimeVisible">
      <MemberSignature Language="C#" Value="public override bool DesignTimeVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DesignTimeVisible" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleCommand.DesignTimeVisible" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property DesignTimeVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool DesignTimeVisible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DesignTimeVisible : bool with get, set" Usage="System.Data.OracleClient.OracleCommand.DesignTimeVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignOnly(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob das Befehlsobjekt in einem benutzerdefinierten Schnittstellensteuerelement sichtbar sein soll, oder legt diesen fest.</summary>
        <value><see langword="true" />, wenn das Befehlsobjekt in einem Steuerelement sichtbar sein soll, andernfalls <see langword="false" />. Die Standardeinstellung ist <see langword="true" />.</value>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/framework/data/adonet/commands-and-parameters.md">Arbeiten mit Befehlen</related>
      </Docs>
    </Member>
    <Member MemberName="ExecuteDbDataReader">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbDataReader ExecuteDbDataReader (System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.DbDataReader ExecuteDbDataReader(valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleCommand.ExecuteDbDataReader(System.Data.CommandBehavior)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ExecuteDbDataReader (behavior As CommandBehavior) As DbDataReader" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Data::Common::DbDataReader ^ ExecuteDbDataReader(System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.ExecuteDbDataReader : System.Data.CommandBehavior -&gt; System.Data.Common.DbDataReader" Usage="oracleCommand.ExecuteDbDataReader behavior" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbDataReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="behavior">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteNonQuery">
      <MemberSignature Language="C#" Value="public override int ExecuteNonQuery ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ExecuteNonQuery() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleCommand.ExecuteNonQuery" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ExecuteNonQuery () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int ExecuteNonQuery();" />
      <MemberSignature Language="F#" Value="override this.ExecuteNonQuery : unit -&gt; int" Usage="oracleCommand.ExecuteNonQuery " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Führt eine SQL-Anweisung für die <see cref="P:System.Data.OracleClient.OracleCommand.Connection" /> aus und gibt die Anzahl der betroffenen Zeilen zurück.</summary>
        <returns>Bei den Anweisungen UPDATE, INSERT und DELETE ist der Rückgabewert die Anzahl der vom Befehl betroffenen Zeilen. Bei CREATE TABLE- oder DROP TABLE-Anweisungen ist der Rückgabewert 0. Bei allen anderen Anweisungstypen ist der Rückgabewert -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können verwenden <xref:System.Data.OracleClient.OracleCommand.ExecuteNonQuery%2A> , um Katalog Vorgänge auszuführen (z. b. Abfragen der Struktur einer Datenbank oder des Erstellens von Datenbankobjekten wie Tabellen) oder um die Daten in einer Datenbank ohne <xref:System.Data.DataSet>Verwendung von zu ändern, indem Sie Update, INSERT oder DELETE ausführen. Äußerungen.  
  
 Obwohl <xref:System.Data.OracleClient.OracleCommand.ExecuteNonQuery%2A> keine Zeilen zurückgibt, werden alle Ausgabeparameter oder Rückgabewerte, die Parametern zugeordnet sind, mit Daten aufgefüllt.  
  
 Bei den Anweisungen UPDATE, INSERT und DELETE ist der Rückgabewert die Anzahl der vom Befehl betroffenen Zeilen. Bei CREATE TABLE- oder DROP TABLE-Anweisungen ist der Rückgabewert 0. Bei allen anderen Anweisungstypen ist der Rückgabewert -1. Wenn ein Rollback durchgeführt wird, ist auch der Rückgabewert-1.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein <xref:System.Data.OracleClient.OracleCommand> erstellt und dann mithilfe <xref:System.Data.OracleClient.OracleCommand.ExecuteNonQuery%2A>von ausgeführt. Im Beispiel wird eine Zeichenfolge, die eine SQL-Anweisung ist (z. b. Update, INSERT oder DELETE), und eine Zeichenfolge, die zum Herstellen einer Verbindung mit der Datenbank verwendet wird,  
  
 [!code-csharp[Classic WebData OracleCommand.ExecuteNonQuery#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OracleCommand.ExecuteNonQuery/CS/source.cs#1)]
 [!code-vb[Classic WebData OracleCommand.ExecuteNonQuery#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OracleCommand.ExecuteNonQuery/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die Verbindung ist nicht vorhanden.  
  
 - oder -  
  
 Die Verbindung ist nicht geöffnet.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/commands-and-parameters.md">Arbeiten mit Befehlen</related>
      </Docs>
    </Member>
    <Member MemberName="ExecuteOracleNonQuery">
      <MemberSignature Language="C#" Value="public int ExecuteOracleNonQuery (out System.Data.OracleClient.OracleString rowid);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ExecuteOracleNonQuery([out] valuetype System.Data.OracleClient.OracleString&amp; rowid) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleCommand.ExecuteOracleNonQuery(System.Data.OracleClient.OracleString@)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteOracleNonQuery (ByRef rowid As OracleString) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ExecuteOracleNonQuery([Runtime::InteropServices::Out] System::Data::OracleClient::OracleString % rowid);" />
      <MemberSignature Language="F#" Value="member this.ExecuteOracleNonQuery :  -&gt; int" Usage="oracleCommand.ExecuteOracleNonQuery rowid" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowid" Type="System.Data.OracleClient.OracleString" RefType="out" />
      </Parameters>
      <Docs>
        <param name="rowid">Eine Base64-Zeichenfolgendarstellung der tatsächlichen Zeilen-ID auf dem Server.</param>
        <summary>Führt eine SQL-Anweisung für die <see cref="P:System.Data.OracleClient.OracleCommand.Connection" /> aus und gibt die Anzahl der betroffenen Zeilen zurück.</summary>
        <returns>Bei den Anweisungen UPDATE, INSERT und DELETE ist der Rückgabewert die Anzahl der vom Befehl betroffenen Zeilen. Bei CREATE TABLE- oder DROP TABLE-Anweisungen ist der Rückgabewert 0. Bei allen anderen Anweisungstypen ist der Rückgabewert -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können verwenden <xref:System.Data.OracleClient.OracleCommand.ExecuteOracleNonQuery%2A> , um Katalog Vorgänge auszuführen (z. b. Abfragen der Struktur einer Datenbank oder des Erstellens von Datenbankobjekten wie Tabellen) oder um die Daten in einer Datenbank ohne <xref:System.Data.DataSet>Verwendung von zu ändern, indem Sie Update, INSERT oder DELETE ausführen. Äußerungen.  
  
 <xref:System.Data.OracleClient.OracleCommand.ExecuteOracleNonQuery%2A>unterscheidet <xref:System.Data.OracleClient.OracleCommand.ExecuteNonQuery%2A> sich von darin, `rowid` dass es als Output-Parameter zurückgegeben wird, wenn Sie eine INSERT-, DELETE-oder Update-Anweisung ausführen, die genau eine Zeile betrifft. Dies ermöglicht es Ihnen, eine Zeile in der Oracle-Datenbank eindeutig zu identifizieren, die es Ihnen ermöglicht, die Leistung in nachfolgenden, zugehörigen Abfragen zu erhöhen.  
  
 Obwohl <xref:System.Data.OracleClient.OracleCommand.ExecuteOracleNonQuery%2A> keine Zeilen zurückgibt, werden alle Ausgabeparameter oder Rückgabewerte, die Parametern zugeordnet sind, mit Daten aufgefüllt.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die Verbindung ist nicht vorhanden.  
  
 - oder -  
  
 Die Verbindung ist nicht geöffnet.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/commands-and-parameters.md">Arbeiten mit Befehlen</related>
      </Docs>
    </Member>
    <Member MemberName="ExecuteOracleScalar">
      <MemberSignature Language="C#" Value="public object ExecuteOracleScalar ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ExecuteOracleScalar() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleCommand.ExecuteOracleScalar" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteOracleScalar () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ExecuteOracleScalar();" />
      <MemberSignature Language="F#" Value="member this.ExecuteOracleScalar : unit -&gt; obj" Usage="oracleCommand.ExecuteOracleScalar " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Führt die Abfrage aus und gibt die erste Spalte der ersten Zeile im Resultset zurück, das durch die Abfrage als Oracle-Datentyp zurückgegeben wird. Zusätzliche Spalten oder Zeilen werden ignoriert.</summary>
        <returns>Die erste Spalte der ersten Zeile im Resultset als Oracle-Datentyp oder ein NULL-Verweis, wenn das Ergebnis ein <see langword="REF CURSOR" /> ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie <xref:System.Data.OracleClient.OracleCommand.ExecuteOracleScalar%2A> die-Methode, um einen einzelnen Wert (z. b. einen Aggregatwert) aus einer Datenbank abzurufen. Hierfür ist weniger Code erforderlich als bei <xref:System.Data.OracleClient.OracleCommand.ExecuteReader%2A> der Verwendung der-Methode, und dann werden die erforderlichen Vorgänge zum Generieren des einzelnen Werts aus den <xref:System.Data.OracleClient.OracleDataReader>von zurückgegebenen Daten durchgeführt.  
  
 Eine typische <xref:System.Data.OracleClient.OracleCommand.ExecuteOracleScalar%2A> Abfrage kann wie im folgenden C# Beispiel formatiert werden:  
  
```  
command.CommandText = "SELECT COUNT(*) AS NumberOfRegions FROM Region";  
count = command.ExecuteOracleScalar();  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/commands-and-parameters.md">Arbeiten mit Befehlen</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExecuteReader">
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Sendet den <see cref="P:System.Data.OracleClient.OracleCommand.CommandText" /> an die <see cref="P:System.Data.OracleClient.OracleCommand.Connection" /> und erstellt einen <see cref="T:System.Data.OracleClient.OracleDataReader" />.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/commands-and-parameters.md">Arbeiten mit Befehlen</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExecuteReader">
      <MemberSignature Language="C#" Value="public System.Data.OracleClient.OracleDataReader ExecuteReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.OracleClient.OracleDataReader ExecuteReader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleCommand.ExecuteReader" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteReader () As OracleDataReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::OracleClient::OracleDataReader ^ ExecuteReader();" />
      <MemberSignature Language="F#" Value="override this.ExecuteReader : unit -&gt; System.Data.OracleClient.OracleDataReader" Usage="oracleCommand.ExecuteReader " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OracleClient.OracleDataReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sendet den <see cref="P:System.Data.OracleClient.OracleCommand.CommandText" /> an die <see cref="P:System.Data.OracleClient.OracleCommand.Connection" /> und erstellt einen <see cref="T:System.Data.OracleClient.OracleDataReader" />.</summary>
        <returns>Ein <see cref="T:System.Data.OracleClient.OracleDataReader" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Data.OracleClient.OracleCommand.CommandType%2A> -Eigenschaft auf `StoredProcedure`festgelegt ist <xref:System.Data.OracleClient.OracleCommand.CommandText%2A> , sollte die-Eigenschaft auf den Namen der gespeicherten Prozedur festgelegt werden. Der Befehl führt dann diese gespeicherte Prozedur aus, wenn <xref:System.Data.OracleClient.OracleCommand.ExecuteReader%2A>aufgerufen wird.  
  
 Es können jederzeit <xref:System.Data.OracleClient.OracleDataReader> mehrere zu einem beliebigen Zeitpunkt geöffnet werden.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein <xref:System.Data.OracleClient.OracleCommand>erstellt und dann ausgeführt, indem eine Zeichenfolge, die eine SQL-SELECT-Anweisung ist, und eine Zeichenfolge übergeben wird, mit der eine Verbindung mit der Datenquelle hergestellt wird.  
  
 [!code-csharp[Classic WebData OracleCommand.ExecuteReader1#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OracleCommand.ExecuteReader1/CS/source.cs#1)]
 [!code-vb[Classic WebData OracleCommand.ExecuteReader1#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OracleCommand.ExecuteReader1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/commands-and-parameters.md">Arbeiten mit Befehlen</related>
      </Docs>
    </Member>
    <Member MemberName="ExecuteReader">
      <MemberSignature Language="C#" Value="public System.Data.OracleClient.OracleDataReader ExecuteReader (System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.OracleClient.OracleDataReader ExecuteReader(valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleCommand.ExecuteReader(System.Data.CommandBehavior)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteReader (behavior As CommandBehavior) As OracleDataReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::OracleClient::OracleDataReader ^ ExecuteReader(System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.ExecuteReader : System.Data.CommandBehavior -&gt; System.Data.OracleClient.OracleDataReader" Usage="oracleCommand.ExecuteReader behavior" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OracleClient.OracleDataReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="behavior">Einer der <see cref="T:System.Data.CommandBehavior" />-Werte.</param>
        <summary>Sendet den <see cref="P:System.Data.OracleClient.OracleCommand.CommandText" /> an die <see cref="P:System.Data.OracleClient.OracleCommand.Connection" /> und erstellt mithilfe eines der <see cref="T:System.Data.CommandBehavior" />-Werte einen <see cref="T:System.Data.OracleClient.OracleDataReader" />.</summary>
        <returns>Ein <see cref="T:System.Data.OracleClient.OracleDataReader" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie davon ausgehen, dass die SQL-Anweisung nur eine einzelne Zeile `SingleRow` zurückgibt <xref:System.Data.CommandBehavior> , kann durch die Angabe von als Wert die Anwendungsleistung verbessert werden.  
  
 Wenn die <xref:System.Data.OracleClient.OracleCommand.CommandType%2A> -Eigenschaft auf `StoredProcedure`festgelegt ist <xref:System.Data.OracleClient.OracleCommand.CommandText%2A> , sollte die-Eigenschaft auf den Namen der gespeicherten Prozedur festgelegt werden. Der Befehl führt dann diese gespeicherte Prozedur aus, wenn <xref:System.Data.OracleClient.OracleCommand.ExecuteReader%2A>aufgerufen wird.  
  
 Unter <xref:System.Data.OracleClient.OracleDataReader> stützt einen speziellen Modus, der das effiziente Lesen großer Binär Werte ermöglicht. Weitere Informationen finden Sie unter der `SequentialAccess` -Einstellung <xref:System.Data.CommandBehavior>für.  
  
 Es können jederzeit <xref:System.Data.OracleClient.OracleDataReader> mehrere zu einem beliebigen Zeitpunkt geöffnet werden.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein <xref:System.Data.OracleClient.OracleCommand>erstellt und dann ausgeführt, indem eine Zeichenfolge, die eine SQL-SELECT-Anweisung ist, und eine Zeichenfolge übergeben wird, mit der eine Verbindung mit der Datenbank hergestellt wird. <xref:System.Data.CommandBehavior>wird dann auf <xref:System.Data.CommandBehavior.CloseConnection>festgelegt.  
  
 [!code-csharp[Classic WebData OracleCommand.ExecuteReader2#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OracleCommand.ExecuteReader2/CS/mysample.cs#1)]
 [!code-vb[Classic WebData OracleCommand.ExecuteReader2#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OracleCommand.ExecuteReader2/VB/mysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/commands-and-parameters.md">Arbeiten mit Befehlen</related>
      </Docs>
    </Member>
    <Member MemberName="ExecuteScalar">
      <MemberSignature Language="C#" Value="public override object ExecuteScalar ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ExecuteScalar() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleCommand.ExecuteScalar" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ExecuteScalar () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ ExecuteScalar();" />
      <MemberSignature Language="F#" Value="override this.ExecuteScalar : unit -&gt; obj" Usage="oracleCommand.ExecuteScalar " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Führt die Abfrage aus und gibt die erste Spalte der ersten Zeile im Resultset zurück, das durch die Abfrage als .NET Framework-Datentyp zurückgegeben wird. Zusätzliche Spalten oder Zeilen werden ignoriert.</summary>
        <returns>Die erste Spalte der ersten Zeile im Resultset als .NET Framework-Datentyp oder ein NULL-Verweis, wenn das Resultset leer oder ein <see langword="REF CURSOR" /> ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie <xref:System.Data.OracleClient.OracleCommand.ExecuteScalar%2A> die-Methode, um einen einzelnen Wert (z. b. einen Aggregatwert) aus einer Datenbank abzurufen. Hierfür ist weniger Code erforderlich als bei <xref:System.Data.OracleClient.OracleCommand.ExecuteReader%2A> der Verwendung der-Methode, und dann werden die erforderlichen Vorgänge zum Generieren des einzelnen Werts aus den <xref:System.Data.OracleClient.OracleDataReader>von zurückgegebenen Daten durchgeführt.  
  
 Eine typische <xref:System.Data.OracleClient.OracleCommand.ExecuteScalar%2A> Abfrage kann wie im folgenden C# Beispiel formatiert werden:  
  
```  
CommandText = "SELECT COUNT(*) FROM Region";  
Int32 count = (int32) ExecuteScalar();  
```  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein <xref:System.Data.OracleClient.OracleCommand> erstellt und dann mit <xref:System.Data.OracleClient.OracleCommand.ExecuteScalar%2A>ausgeführt. Im Beispiel wird eine Zeichenfolge, die eine SQL-Anweisung ist, die ein Aggregat Ergebnis zurückgibt, und eine Zeichenfolge, die zum Herstellen einer Verbindung mit der Datenbank verwendet werden soll.  
  
 [!code-csharp[Classic WebData OracleCommand.ExecuteScalar#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OracleCommand.ExecuteScalar/CS/mysample.cs#1)]
 [!code-vb[Classic WebData OracleCommand.ExecuteScalar#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OracleCommand.ExecuteScalar/VB/mysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/commands-and-parameters.md">Arbeiten mit Befehlen</related>
      </Docs>
    </Member>
    <Member MemberName="Parameters">
      <MemberSignature Language="C#" Value="public System.Data.OracleClient.OracleParameterCollection Parameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.OracleClient.OracleParameterCollection Parameters" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleCommand.Parameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parameters As OracleParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::OracleClient::OracleParameterCollection ^ Parameters { System::Data::OracleClient::OracleParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parameters : System.Data.OracleClient.OracleParameterCollection" Usage="System.Data.OracleClient.OracleCommand.Parameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.OracleClient.OracleParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das <see cref="T:System.Data.OracleClient.OracleParameterCollection" /> ab.</summary>
        <value>Die Parameter der SQL-Anweisung bzw. der gespeicherten Prozedur. Der Standard ist eine leere Auflistung.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Data.OracleClient.OracleCommand.CommandType%2A> -Eigenschaft auf `StoredProcedure`festgelegt ist <xref:System.Data.OracleClient.OracleCommand.CommandText%2A> , sollte die-Eigenschaft auf den Namen der gespeicherten Prozedur festgelegt werden. Der Benutzer muss möglicherweise die Escapezeichensyntax verwenden, wenn der Name der gespeicherten Prozedur Sonderzeichen enthält. Der-Befehl führt diese gespeicherte Prozedur aus, wenn Sie eine der Execute-Methoden aufruft.  
  
 Der .NET Framework Datenanbieter für Oracle unterstützt den Platzhalter für Fragezeichen (?) nicht zum Übergeben von Parametern an eine SQL- <xref:System.Data.OracleClient.OracleCommand> Anweisung `CommandType.Text`, die von einem von aufgerufen wird. In diesem Fall müssen benannte Parameter verwendet werden. Beispiel:  
  
```  
SELECT * FROM Customers WHERE CustomerID = :pCustomerID  
```  
  
 Wenn Sie benannte Parameter in einer SQL-Anweisung verwenden, <xref:System.Data.OracleClient.OracleCommand> die `CommandType.Text`von einem von aufgerufen wird, müssen Sie dem Parameternamen einen Doppelpunkt (:). In einer gespeicherten Prozedur oder beim Verweis auf einen benannten Parameter an anderer Stelle im Code (z. b. beim Hinzufügen <xref:System.Data.OracleClient.OracleParameter> von Objekten <xref:System.Data.OracleClient.OracleCommand.Parameters%2A> zur-Eigenschaft) ist der benannte Parameter nicht mit einem Doppelpunkt (:). Der .NET Framework Datenanbieter für Oracle liefert den Doppelpunkt automatisch.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein <xref:System.Data.OracleClient.OracleCommand> erstellt und die zugehörigen Parameter angezeigt. Um dies zu erreichen, wird an die- <xref:System.Data.OracleClient.OracleConnection>Methode ein, eine Abfrage Zeichenfolge, die eine SQL SELECT-Anweisung <xref:System.Data.OracleClient.OracleParameter> ist, und ein Array von-Objekten übermittelt.  
  
 [!code-csharp[Classic WebData OracleCommand.Parameters#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OracleCommand.Parameters/CS/source.cs#1)]
 [!code-vb[Classic WebData OracleCommand.Parameters#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OracleCommand.Parameters/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/commands-and-parameters.md">Arbeiten mit Befehlen</related>
      </Docs>
    </Member>
    <Member MemberName="Prepare">
      <MemberSignature Language="C#" Value="public override void Prepare ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Prepare() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleCommand.Prepare" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Prepare ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Prepare();" />
      <MemberSignature Language="F#" Value="override this.Prepare : unit -&gt; unit" Usage="oracleCommand.Prepare " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erstellt eine vorbereitete (oder kompilierte) Version des Befehls an der Datenquelle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bevor Sie aufrufen <xref:System.Data.OracleClient.OracleCommand.Prepare%2A>, geben Sie den Datentyp der einzelnen Parameter in der Anweisung an, die vorbereitet werden soll.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Data.OracleClient.OracleCommand.Connection" /> ist nicht festgelegt.  
  
- oder - 
<see cref="P:System.Data.OracleClient.OracleCommand.Connection" /> ist nicht <see cref="M:System.Data.OracleClient.OracleConnection.Open" />.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/commands-and-parameters.md">Arbeiten mit Befehlen</related>
      </Docs>
    </Member>
    <Member MemberName="ResetCommandTimeout">
      <MemberSignature Language="C#" Value="public void ResetCommandTimeout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetCommandTimeout() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleCommand.ResetCommandTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetCommandTimeout ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetCommandTimeout();" />
      <MemberSignature Language="F#" Value="member this.ResetCommandTimeout : unit -&gt; unit" Usage="oracleCommand.ResetCommandTimeout " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Setzt die <see cref="P:System.Data.OracleClient.OracleCommand.CommandTimeout" />-Eigenschaft auf den Standardwert zurück.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Standardwert von <xref:System.Data.OracleClient.OracleCommand.CommandTimeout%2A> ist 30 Sekunden.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/commands-and-parameters.md">Arbeiten mit Befehlen</related>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbCommand.CreateParameter">
      <MemberSignature Language="C#" Value="System.Data.IDbDataParameter IDbCommand.CreateParameter ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Data.IDbDataParameter System.Data.IDbCommand.CreateParameter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleCommand.System#Data#IDbCommand#CreateParameter" />
      <MemberSignature Language="VB.NET" Value="Function CreateParameter () As IDbDataParameter Implements IDbCommand.CreateParameter" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Data::IDbDataParameter ^ System.Data.IDbCommand.CreateParameter() = System::Data::IDbCommand::CreateParameter;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDbCommand.CreateParameter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbDataParameter</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erstellt eine neue Instanz eines <see cref="T:System.Data.IDbDataParameter" />-Objekts.</summary>
        <returns>Ein IDbDataParameter-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Weitere Informationen finden Sie unter <xref:System.Data.IDbCommand.CreateParameter>.

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbCommand.ExecuteReader">
      <MemberSignature Language="C#" Value="System.Data.IDataReader IDbCommand.ExecuteReader ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Data.IDataReader System.Data.IDbCommand.ExecuteReader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleCommand.System#Data#IDbCommand#ExecuteReader" />
      <MemberSignature Language="VB.NET" Value="Function ExecuteReader () As IDataReader Implements IDbCommand.ExecuteReader" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Data::IDataReader ^ System.Data.IDbCommand.ExecuteReader() = System::Data::IDbCommand::ExecuteReader;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDbCommand.ExecuteReader</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDataReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Führt den <see cref="P:System.Data.IDbCommand.CommandText" /> für die <see cref="P:System.Data.IDbCommand.Connection" /> aus und erstellt einen <see cref="P:System.Data.IDataReader" />.</summary>
        <returns>Ein <see cref="P:System.Data.IDataReader" />-Objekt.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbCommand.ExecuteReader">
      <MemberSignature Language="C#" Value="System.Data.IDataReader IDbCommand.ExecuteReader (System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Data.IDataReader System.Data.IDbCommand.ExecuteReader(valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleCommand.System#Data#IDbCommand#ExecuteReader(System.Data.CommandBehavior)" />
      <MemberSignature Language="VB.NET" Value="Function ExecuteReader (behavior As CommandBehavior) As IDataReader Implements IDbCommand.ExecuteReader" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Data::IDataReader ^ System.Data.IDbCommand.ExecuteReader(System::Data::CommandBehavior behavior) = System::Data::IDbCommand::ExecuteReader;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDataReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" Index="0" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="behavior">Einer der <see cref="P:System.Data.CommandBehavior" />-Werte.</param>
        <summary>Führt den <see cref="P:System.Data.IDbCommand.CommandText" /> für die <see cref="P:System.Data.IDbCommand.Connection" /> aus und erstellt mit einem der <see cref="P:System.Data.IDataReader" />-Werte einen <see cref="P:System.Data.CommandBehavior" />.</summary>
        <returns>Ein <see cref="P:System.Data.IDataReader" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Weitere Informationen finden Sie unter <xref:System.Data.IDbCommand.ExecuteReader%2A>.

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transaction">
      <MemberSignature Language="C#" Value="public System.Data.OracleClient.OracleTransaction Transaction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.OracleClient.OracleTransaction Transaction" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleCommand.Transaction" />
      <MemberSignature Language="VB.NET" Value="Public Property Transaction As OracleTransaction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::OracleClient::OracleTransaction ^ Transaction { System::Data::OracleClient::OracleTransaction ^ get(); void set(System::Data::OracleClient::OracleTransaction ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Transaction : System.Data.OracleClient.OracleTransaction with get, set" Usage="System.Data.OracleClient.OracleCommand.Transaction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.OracleClient.OracleTransaction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die <see cref="T:System.Data.OracleClient.OracleTransaction" /> ab, in der der <see cref="T:System.Data.OracleClient.OracleCommand" /> ausgeführt wird, bzw. legt diese fest.</summary>
        <value>Eine <see cref="T:System.Data.OracleClient.OracleTransaction" />. Der Standard ist ein NULL-Wert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.OracleClient.OracleCommand.Transaction%2A> -Eigenschaft kann nicht festgelegt werden, wenn Sie bereits auf einen bestimmten Wert festgelegt ist, und der Befehl wird gerade ausgeführt. Wenn Sie die Transaction-Eigenschaft auf ein <xref:System.Data.OracleClient.OracleTransaction> Objekt festlegen, das nicht mit <xref:System.Data.OracleClient.OracleConnection> dem <xref:System.Data.OracleClient.OracleCommand> -Objekt verbunden ist, wird beim nächsten Versuch, eine-Anweisung auszuführen, eine Ausnahme ausgelöst.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/commands-and-parameters.md">Arbeiten mit Befehlen</related>
      </Docs>
    </Member>
    <Member MemberName="UpdatedRowSource">
      <MemberSignature Language="C#" Value="public override System.Data.UpdateRowSource UpdatedRowSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.UpdateRowSource UpdatedRowSource" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleCommand.UpdatedRowSource" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property UpdatedRowSource As UpdateRowSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Data::UpdateRowSource UpdatedRowSource { System::Data::UpdateRowSource get(); void set(System::Data::UpdateRowSource value); };" />
      <MemberSignature Language="F#" Value="member this.UpdatedRowSource : System.Data.UpdateRowSource with get, set" Usage="System.Data.OracleClient.OracleCommand.UpdatedRowSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.UpdateRowSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, wie die <see langword="Update" />-Methode Befehlsergebnisse auf die <see cref="T:System.Data.DataRow" /> anwendet, oder legt diesen fest.</summary>
        <value>Einer der <see cref="T:System.Data.UpdateRowSource" />-Werte.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Standard <xref:System.Data.UpdateRowSource> Wert ist `Both` , es sei denn, der Befehl wird automatisch generiert (wie <xref:System.Data.OracleClient.OracleCommandBuilder>im Fall von). in diesem Fall ist `None`der Standardwert.  
  
 Weitere Informationen zur Verwendung der <xref:System.Data.UpdateRowSource> -Eigenschaft finden Sie unter [DataAdapter-Parameter](~/docs/framework/data/adonet/dataadapter-parameters.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der eingegebene Wert war keiner der <see cref="T:System.Data.UpdateRowSource" />-Werte.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/commands-and-parameters.md">Arbeiten mit Befehlen</related>
      </Docs>
    </Member>
  </Members>
</Type>

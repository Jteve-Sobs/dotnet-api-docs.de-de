<Type Name="ParallelLoopResult" FullName="System.Threading.Tasks.ParallelLoopResult">
  <Metadata><Meta Name="ms.openlocfilehash" Value="db5a1070ba6e82fdce3d052a968473767887f853" /><Meta Name="ms.sourcegitcommit" Value="9506e50ec7beb4fa30206b9840dc546b035a6600" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/23/2020" /><Meta Name="ms.locfileid" Value="83960271" /></Metadata><TypeSignature Language="C#" Value="public struct ParallelLoopResult" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit ParallelLoopResult extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.ParallelLoopResult" />
  <TypeSignature Language="VB.NET" Value="Public Structure ParallelLoopResult" />
  <TypeSignature Language="C++ CLI" Value="public value class ParallelLoopResult" />
  <TypeSignature Language="F#" Value="type ParallelLoopResult = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Threading.Tasks.Parallel" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Threading.Tasks.Parallel" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Gibt den Status der Ausführung einer <see cref="T:System.Threading.Tasks.Parallel" />-Schleife an.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn <xref:System.Threading.Tasks.ParallelLoopResult.IsCompleted%2A> true zurückgibt, wurde die Schleife bis zum Abschluss ausgeführt, sodass alle Iterationen der Schleife ausgeführt wurden. Wenn <xref:System.Threading.Tasks.ParallelLoopResult.IsCompleted%2A> false zurückgibt und <xref:System.Threading.Tasks.ParallelLoopResult.LowestBreakIteration%2A> NULL zurückgibt, wurde ein-Befehl zum <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> vorzeitigen Beenden der Schleife verwendet. Wenn <xref:System.Threading.Tasks.ParallelLoopResult.IsCompleted%2A> false zurückgibt und einen ganzzahligen <xref:System.Threading.Tasks.ParallelLoopResult.LowestBreakIteration%2A> Wert ungleich NULL zurückgibt, <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> wurde verwendet, um die Schleife vorzeitig zu beenden.  
  
 ]]></format>
    </remarks>
    <threadsafe>Alle öffentlichen Member von <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> sind Thread sicher und können von mehreren Threads gleichzeitig aufgerufen werden.</threadsafe>
    <related type="Article" href="/dotnet/standard/parallel-programming/data-parallelism-task-parallel-library">Datenparallelität (Task Parallel Library)</related>
  </Docs>
  <Members>
    <Member MemberName="IsCompleted">
      <MemberSignature Language="C#" Value="public bool IsCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompleted" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopResult.IsCompleted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompleted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCompleted : bool" Usage="System.Threading.Tasks.ParallelLoopResult.IsCompleted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab, ob die Schleife bis zum Abschluss ausgeführt wurde, das heißt, dass alle Iterationen der Schleife ausgeführt wurden und keine Anforderung eines vorzeitigen Abbruchs an die Schleife gesendet wurde.</summary>
        <value>True, wenn die Schleife zum Abschluss ausgeführt wurde, andernfalls false.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LowestBreakIteration">
      <MemberSignature Language="C#" Value="public long? LowestBreakIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int64&gt; LowestBreakIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopResult.LowestBreakIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LowestBreakIteration As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;long&gt; LowestBreakIteration { Nullable&lt;long&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.LowestBreakIteration : Nullable&lt;int64&gt;" Usage="System.Threading.Tasks.ParallelLoopResult.LowestBreakIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Indes der niedrigsten Iteration ab, von der <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> aufgerufen wurde.</summary>
        <value>Gibt eine ganze Zahl zurück, die die niedrigste Iteration darstellt, aus der die Break-Anweisung aufgerufen wurde.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> nicht verwendet wurde, gibt diese Eigenschaft NULL zurück.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

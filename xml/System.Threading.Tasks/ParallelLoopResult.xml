<Type Name="ParallelLoopResult" FullName="System.Threading.Tasks.ParallelLoopResult">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1ed720f5f001b0b71b9da302182749c4837ee8a3" />
    <Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="09/22/2018" />
    <Meta Name="ms.locfileid" Value="46679665" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct ParallelLoopResult" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit ParallelLoopResult extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.ParallelLoopResult" />
  <TypeSignature Language="VB.NET" Value="Public Structure ParallelLoopResult" />
  <TypeSignature Language="C++ CLI" Value="public value class ParallelLoopResult" />
  <TypeSignature Language="F#" Value="type ParallelLoopResult = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="c37fe-101">Gibt den Status der Ausführung einer <see cref="T:System.Threading.Tasks.Parallel" />-Schleife an.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c37fe-101">Provides completion status on the execution of a <see cref="T:System.Threading.Tasks.Parallel" /> loop.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c37fe-102">Wenn <xref:System.Threading.Tasks.ParallelLoopResult.IsCompleted%2A> gibt "true" zurück, und klicken Sie dann die Schleife zum Abschluss ausgeführt wurde, so, dass alle Iterationen der Schleife ausgeführt wurden.</span><span class="sxs-lookup"><span data-stu-id="c37fe-102">If <xref:System.Threading.Tasks.ParallelLoopResult.IsCompleted%2A> returns true, then the loop ran to completion, such that all iterations of the loop were executed.</span></span> <span data-ttu-id="c37fe-103">Wenn <xref:System.Threading.Tasks.ParallelLoopResult.IsCompleted%2A> "false" zurückgibt und <xref:System.Threading.Tasks.ParallelLoopResult.LowestBreakIteration%2A> gibt null zurück, einen Aufruf von <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> wurde verwendet, um die Schleife vorzeitig beendet.</span><span class="sxs-lookup"><span data-stu-id="c37fe-103">If <xref:System.Threading.Tasks.ParallelLoopResult.IsCompleted%2A> returns false and <xref:System.Threading.Tasks.ParallelLoopResult.LowestBreakIteration%2A> returns null, a call to <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> was used to end the loop prematurely.</span></span> <span data-ttu-id="c37fe-104">Wenn <xref:System.Threading.Tasks.ParallelLoopResult.IsCompleted%2A> "false" zurückgibt und <xref:System.Threading.Tasks.ParallelLoopResult.LowestBreakIteration%2A> gibt einen ganzzahligen Wert ungleich Null, <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> wurde verwendet, um die Schleife vorzeitig beendet.</span><span class="sxs-lookup"><span data-stu-id="c37fe-104">If <xref:System.Threading.Tasks.ParallelLoopResult.IsCompleted%2A> returns false and <xref:System.Threading.Tasks.ParallelLoopResult.LowestBreakIteration%2A> returns a non-null integral value, <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> was used to end the loop prematurely.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="c37fe-105">Alle öffentlichen Member der <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> sind threadsicher und können von mehreren Threads gleichzeitig aufgerufen werden.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c37fe-105">All public members of <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> are thread safe and may be called from multiple threads concurrently.</span>
      </span>
    </threadsafe>
    <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">
      <span data-ttu-id="c37fe-106">Datenparallelität (Task Parallel Library)</span>
      <span class="sxs-lookup">
        <span data-stu-id="c37fe-106">Data Parallelism (Task Parallel Library)</span>
      </span>
    </related>
  </Docs>
  <Members>
    <Member MemberName="IsCompleted">
      <MemberSignature Language="C#" Value="public bool IsCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompleted" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopResult.IsCompleted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompleted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCompleted : bool" Usage="System.Threading.Tasks.ParallelLoopResult.IsCompleted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c37fe-107">Ruft ab, ob die Schleife bis zum Abschluss ausgeführt wurde, das heißt, dass alle Iterationen der Schleife ausgeführt wurden und keine Anforderung eines vorzeitigen Abbruchs an die Schleife gesendet wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c37fe-107">Gets whether the loop ran to completion, such that all iterations of the loop were executed and the loop didn't receive a request to end prematurely.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c37fe-108">True, wenn die Schleife zum Abschluss ausgeführt wurde, andernfalls false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c37fe-108">true if the loop ran to completion; otherwise false;</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LowestBreakIteration">
      <MemberSignature Language="C#" Value="public Nullable&lt;long&gt; LowestBreakIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int64&gt; LowestBreakIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopResult.LowestBreakIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LowestBreakIteration As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;long&gt; LowestBreakIteration { Nullable&lt;long&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.LowestBreakIteration : Nullable&lt;int64&gt;" Usage="System.Threading.Tasks.ParallelLoopResult.LowestBreakIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c37fe-109">Ruft den Indes der niedrigsten Iteration ab, von der <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> aufgerufen wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c37fe-109">Gets the index of the lowest iteration from which <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> was called.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c37fe-110">Gibt eine ganze Zahl zurück, die die niedrigste Iteration darstellt, aus der die Break-Anweisung aufgerufen wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c37fe-110">Returns an integer that represents the lowest iteration from which the Break statement was called.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c37fe-111">Wenn <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> wurde nicht beschäftigt, diese Eigenschaft gibt null zurück.</span><span class="sxs-lookup"><span data-stu-id="c37fe-111">If <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> was not employed, this property will return null.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
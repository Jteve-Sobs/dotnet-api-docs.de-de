<Type Name="UnobservedTaskExceptionEventArgs" FullName="System.Threading.Tasks.UnobservedTaskExceptionEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5cd01a456422280ddd9938a468a8dd21616fc4c6" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83522922" /></Metadata><TypeSignature Language="C#" Value="public class UnobservedTaskExceptionEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UnobservedTaskExceptionEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.UnobservedTaskExceptionEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class UnobservedTaskExceptionEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class UnobservedTaskExceptionEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type UnobservedTaskExceptionEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Threading.Tasks" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Threading.Tasks" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Threading.Tasks" FromVersion="4.1.0.0" To="System.Runtime" ToVersion="4.2.0.0" FrameworkAlternate="netcore-2.0" />
    <TypeForwarding From="System.Threading.Tasks" FromVersion="4.1.1.0" To="System.Runtime" ToVersion="4.2.1.0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
    <TypeForwarding From="System.Threading.Tasks" FromVersion="4.1.2.0" To="System.Runtime" ToVersion="4.2.2.0" FrameworkAlternate="netcore-3.1" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="35321-101">Stellt Daten für das Ereignis bereit, das ausgelöst wird, wenn die Ausnahme eines fehlerhaften bemängelte <see cref="T:System.Threading.Tasks.Task" />-Objekts nicht beobachtet wird.</span><span class="sxs-lookup"><span data-stu-id="35321-101">Provides data for the event that is raised when a faulted <see cref="T:System.Threading.Tasks.Task" />'s exception goes unobserved.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="35321-102">Die Exception-Eigenschaft wird verwendet, um die Ausnahme zu untersuchen, ohne Sie als "beobachtet" zu markieren, wohingegen die <xref:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.SetObserved%2A>-Methode verwendet wird, um die Ausnahme als beobachtet zu markieren</span><span class="sxs-lookup"><span data-stu-id="35321-102">The Exception property is used to examine the exception without marking it as observed, whereas the <xref:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.SetObserved%2A> method is used to mark the exception as observed.</span></span> <span data-ttu-id="35321-103">Durch das Markieren der Ausnahme als beobachtet wird verhindert, dass eine Ausnahme Eskalations Richtlinie ausgelöst wird, die den Prozessstandard mäßig beendet.</span><span class="sxs-lookup"><span data-stu-id="35321-103">Marking the exception as observed prevents it from triggering exception escalation policy which, by default, terminates the process.</span></span>  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md"><span data-ttu-id="35321-104">Aufgabenbasierte asynchrone Programmierung</span><span class="sxs-lookup"><span data-stu-id="35321-104">Task-based Asynchronous Programming</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UnobservedTaskExceptionEventArgs (AggregateException exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.AggregateException exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.#ctor(System.AggregateException)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (exception As AggregateException)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UnobservedTaskExceptionEventArgs(AggregateException ^ exception);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.UnobservedTaskExceptionEventArgs : AggregateException -&gt; System.Threading.Tasks.UnobservedTaskExceptionEventArgs" Usage="new System.Threading.Tasks.UnobservedTaskExceptionEventArgs exception" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="exception" Type="System.AggregateException" />
      </Parameters>
      <Docs>
        <param name="exception"><span data-ttu-id="35321-105">Die Ausnahme, deren Überwachung eingestellt wurde.</span><span class="sxs-lookup"><span data-stu-id="35321-105">The Exception that has gone unobserved.</span></span></param>
        <summary><span data-ttu-id="35321-106">Initialisiert eine neue Instanz der <see cref="T:System.Threading.Tasks.UnobservedTaskExceptionEventArgs" />-Klasse mit der nicht überwachten Ausnahme.</span><span class="sxs-lookup"><span data-stu-id="35321-106">Initializes a new instance of the <see cref="T:System.Threading.Tasks.UnobservedTaskExceptionEventArgs" /> class with the unobserved exception.</span></span></summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md"><span data-ttu-id="35321-107">Aufgabenbasierte asynchrone Programmierung</span><span class="sxs-lookup"><span data-stu-id="35321-107">Task-based Asynchronous Programming</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public AggregateException Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.AggregateException Exception" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.Exception" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Exception As AggregateException" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property AggregateException ^ Exception { AggregateException ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Exception : AggregateException" Usage="System.Threading.Tasks.UnobservedTaskExceptionEventArgs.Exception" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AggregateException</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="35321-108">Die Ausnahme, deren Überwachung eingestellt wurde.</span><span class="sxs-lookup"><span data-stu-id="35321-108">The Exception that went unobserved.</span></span></summary>
        <value><span data-ttu-id="35321-109">Die Ausnahme, deren Überwachung eingestellt wurde.</span><span class="sxs-lookup"><span data-stu-id="35321-109">The Exception that went unobserved.</span></span></value>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md"><span data-ttu-id="35321-110">Aufgabenbasierte asynchrone Programmierung</span><span class="sxs-lookup"><span data-stu-id="35321-110">Task-based Asynchronous Programming</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Observed">
      <MemberSignature Language="C#" Value="public bool Observed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Observed" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.Observed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Observed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Observed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Observed : bool" Usage="System.Threading.Tasks.UnobservedTaskExceptionEventArgs.Observed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="35321-111">Ruft ab, ob diese Ausnahme als "überwacht" gekennzeichnet wurde.</span><span class="sxs-lookup"><span data-stu-id="35321-111">Gets whether this exception has been marked as "observed."</span></span></summary>
        <value><span data-ttu-id="35321-112">True, wenn diese Ausnahme als "überwacht" markiert wurde, andernfalls false.</span><span class="sxs-lookup"><span data-stu-id="35321-112">true if this exception has been marked as "observed"; otherwise false.</span></span></value>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md"><span data-ttu-id="35321-113">Aufgabenbasierte asynchrone Programmierung</span><span class="sxs-lookup"><span data-stu-id="35321-113">Task-based Asynchronous Programming</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SetObserved">
      <MemberSignature Language="C#" Value="public void SetObserved ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetObserved() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.SetObserved" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetObserved ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetObserved();" />
      <MemberSignature Language="F#" Value="member this.SetObserved : unit -&gt; unit" Usage="unobservedTaskExceptionEventArgs.SetObserved " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="35321-114">Markiert die <see cref="P:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.Exception" />-Eigenschaft als "überwacht". Dadurch wird verhindert, dass eine Ausnahmeneskalierungsrichtlinie ausgelöst wird, durch die der Prozess standardmäßig beendet wird.</span><span class="sxs-lookup"><span data-stu-id="35321-114">Marks the <see cref="P:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.Exception" /> as "observed," thus preventing it from triggering exception escalation policy which, by default, terminates the process.</span></span></summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md"><span data-ttu-id="35321-115">Aufgabenbasierte asynchrone Programmierung</span><span class="sxs-lookup"><span data-stu-id="35321-115">Task-based Asynchronous Programming</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="ParallelLoopState" FullName="System.Threading.Tasks.ParallelLoopState">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1fa515512b9633e5ad5b66b6c8129d6ccdb243b4" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86620180" /></Metadata><TypeSignature Language="C#" Value="public class ParallelLoopState" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ParallelLoopState extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.ParallelLoopState" />
  <TypeSignature Language="VB.NET" Value="Public Class ParallelLoopState" />
  <TypeSignature Language="C++ CLI" Value="public ref class ParallelLoopState" />
  <TypeSignature Language="F#" Value="type ParallelLoopState = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Threading.Tasks.Parallel" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Threading.Tasks.Parallel" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Diagnostics.DebuggerDisplay("ShouldExitCurrentIteration = {ShouldExitCurrentIteration}")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerDisplay("ShouldExitCurrentIteration = {ShouldExitCurrentIteration}")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="23274-101">Ermöglicht Iterationen von parallelen Schleifen die Interaktion mit anderen Iterationen.</span><span class="sxs-lookup"><span data-stu-id="23274-101">Enables iterations of parallel loops to interact with other iterations.</span></span> <span data-ttu-id="23274-102">Eine Instanz dieser Klasse wird von der <see cref="T:System.Threading.Tasks.Parallel" />-Klasse für jede Schleife bereitgestellt. Sie können keine Instanzen im Code erstellen.</span><span class="sxs-lookup"><span data-stu-id="23274-102">An instance of this class is provided by the <see cref="T:System.Threading.Tasks.Parallel" /> class to each loop; you can not create instances in your code.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23274-103">Beachten Sie, dass Sie eine Instanz dieser Klasse nicht instanziieren können.</span><span class="sxs-lookup"><span data-stu-id="23274-103">Note that you cannot instantiate an instance of this class.</span></span> <span data-ttu-id="23274-104">Sie wird automatisch vom Compiler als Argument in einem Rückruf der- <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> oder-Methode generiert <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> .</span><span class="sxs-lookup"><span data-stu-id="23274-104">It is automatically generated by the compiler as an argument in a call to the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> or <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="23274-105">Dies wird im Beispiel veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="23274-105">The example provides an illustration.</span></span>  
  
 <span data-ttu-id="23274-106">Konstrukte wie `for` und `foreach` (in c#) und `For` und `For Each` (in Visual Basic) werden sequenziell vom niedrigsten Index bis zum höchsten oder vom ersten-Objekt in einem-Objekt auf das letzte-Objekt ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="23274-106">Constructs such as `for` and `foreach` (in C#) and `For` and `For Each` (in Visual Basic) execute sequentially from the lowest index to the highest or from the first object in a set to the last.</span></span> <span data-ttu-id="23274-107">Im Gegensatz dazu ist die <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> -Methode und die- <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> Methode nicht.</span><span class="sxs-lookup"><span data-stu-id="23274-107">In contrast, the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> and <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> methods do not.</span></span> <span data-ttu-id="23274-108">Da einzelne Iterationen der-Schleife parallel ausgeführt werden, können Sie in beliebiger Reihenfolge starten und beenden.</span><span class="sxs-lookup"><span data-stu-id="23274-108">Because individual iterations of the loop run in parallel, they can begin and end in any order.</span></span> <span data-ttu-id="23274-109">Die- <xref:System.Threading.Tasks.ParallelLoopState> Klasse ermöglicht die Interaktion einzelner Iterationen paralleler Schleifen untereinander.</span><span class="sxs-lookup"><span data-stu-id="23274-109">The <xref:System.Threading.Tasks.ParallelLoopState> class allows individual iterations of parallel loops to interact with one another.</span></span> <span data-ttu-id="23274-110">Die- <xref:System.Threading.Tasks.ParallelLoopState> Klasse ermöglicht Folgendes:</span><span class="sxs-lookup"><span data-stu-id="23274-110">The <xref:System.Threading.Tasks.ParallelLoopState> class allows you to:</span></span>  
  
-   <span data-ttu-id="23274-111">Beenden Sie die aktuelle Iteration, und verhindern Sie, dass zusätzliche Iterationen gestartet werden, indem Sie die- <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> Methode aufrufen.</span><span class="sxs-lookup"><span data-stu-id="23274-111">Exit the current iteration and prevent any additional iterations from starting by calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="23274-112">Dies hat keine Auswirkungen auf Iterationen, die bereits mit der Ausführung begonnen haben.</span><span class="sxs-lookup"><span data-stu-id="23274-112">This does not affect iterations that have already begun execution.</span></span>  
  
-   <span data-ttu-id="23274-113">Verhindern Sie, dass Iterationen mit einem Index, der größer ist als der aktuelle Index, durch Aufrufen der-Methode ausgeführt wird <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> .</span><span class="sxs-lookup"><span data-stu-id="23274-113">Prevent any iterations with an index greater than the current index from executing by calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="23274-114">Dies hat keine Auswirkungen auf Iterationen, die bereits mit der Ausführung begonnen haben.</span><span class="sxs-lookup"><span data-stu-id="23274-114">This does not affect iterations that have already begun execution.</span></span>  
  
-   <span data-ttu-id="23274-115">Bestimmen Sie, ob eine Ausnahme in Schleifen Iterationen aufgetreten ist, indem Sie den Wert der- <xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A> Eigenschaft abrufen.</span><span class="sxs-lookup"><span data-stu-id="23274-115">Determine whether an exception has occurred in any loop iteration by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A> property.</span></span>  
  
-   <span data-ttu-id="23274-116">Bestimmen Sie, ob eine Iterations Schleife die-Methode aufgerufen hat, <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> indem Sie den Wert der- <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> Eigenschaft abrufen.</span><span class="sxs-lookup"><span data-stu-id="23274-116">Determine whether any iteration of the loop has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property.</span></span> <span data-ttu-id="23274-117">Sie können diese Eigenschaft verwenden, um von Iterationen der Schleife zurückzukehren, die vor dem aufrufungs Vorgang der-Methode gestartet wurde, <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> aber noch ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="23274-117">You can use this property to return from iterations of the loop that started before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method but are still executing.</span></span>  
  
-   <span data-ttu-id="23274-118">Bestimmen Sie, ob eine Iterations Schleife die-oder-Methode aufgerufen hat <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> oder eine Ausnahme ausgelöst hat, indem Sie den Wert der- <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> Eigenschaft abrufen.</span><span class="sxs-lookup"><span data-stu-id="23274-118">Determine whether any iteration of the loop has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> or <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method or has thrown an exception by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property.</span></span>  
  
-   <span data-ttu-id="23274-119">Beenden Sie eine Iterationen mit langer Laufzeit, deren Index größer ist als der Index einer Iterationen, in der die Unterbrechung durch Abrufen des Werts der- <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> Eigenschaft aufgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="23274-119">Exit from a long-running iteration whose index is greater than the index of an iteration in which Break was called by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="23274-120">Im folgenden Beispiel werden bis zu 100 Iterationen einer Schleife parallel ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="23274-120">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="23274-121">Jede Iterations Pause wird für ein zufälliges Intervall von 1 bis 1.000 Millisekunden angehalten.</span><span class="sxs-lookup"><span data-stu-id="23274-121">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="23274-122">Ein zufällig generierter Wert bestimmt, in welcher Iterations Schleife die <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="23274-122">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="23274-123">Wie die Ausgabe des Beispiels zeigt, werden keine Iterationen, deren Index größer ist als der- <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> Eigenschafts Wert, nach dem aufrufungs aufrufungs <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> Methode gestartet.</span><span class="sxs-lookup"><span data-stu-id="23274-123">As the output from the example shows, no iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value start after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="23274-124">Da Iterationen der Schleife wahrscheinlich beim Aufrufen der-Methode ausgeführt werden <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> , ruft jede Iteration die- <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> Eigenschaft auf, um zu überprüfen, ob die-Methode von einer anderen Iteration aufgerufen wurde <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> .</span><span class="sxs-lookup"><span data-stu-id="23274-124">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="23274-125">Wenn der-Eigenschafts Wert ist `true` , überprüft die Iterations Werte den Wert der <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> -Eigenschaft, und wenn dieser größer als der Indexwert der aktuellen Iterations ist, wird sofort zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="23274-125">If  the property value is `true`, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="23274-126">Eine- <see cref="T:System.Threading.Tasks.ParallelLoopState" /> Instanz soll nur innerhalb des Texts der-Schleife verwendet werden, für die eine-Instanz bereitgestellt wurde.</span><span class="sxs-lookup"><span data-stu-id="23274-126">A <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance is meant to be used only within the body of the loop to which an instance was provided.</span></span>  <span data-ttu-id="23274-127">Es ist nicht sicher, eine angegebene- <see cref="T:System.Threading.Tasks.ParallelLoopState" /> Instanz zu verwenden, nachdem die zugehörige Schleife beendet wurde, und es ist nicht sicher, Sie explizit an andere Threads zu übergeben, und diese Threads können jederzeit darauf zugreifen.</span><span class="sxs-lookup"><span data-stu-id="23274-127">It is not safe to use a provided <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance after the associated loop ends, nor is it safe to explicitly hand it off to other threads and have those threads access it at any time.</span></span>  <span data-ttu-id="23274-128"><see cref="T:System.Threading.Tasks.ParallelLoopState" />Jedem Thread, der an einer-Schleife beteiligt ist, wird eine andere-Instanz bereitgestellt.</span><span class="sxs-lookup"><span data-stu-id="23274-128">A different <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance will be provided to each thread involved in a loop.</span></span></threadsafe>
    <related type="Article" href="/dotnet/standard/parallel-programming/data-parallelism-task-parallel-library"><span data-ttu-id="23274-129">Datenparallelität (Task Parallel Library)</span><span class="sxs-lookup"><span data-stu-id="23274-129">Data Parallelism (Task Parallel Library)</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public void Break ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Break() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Break" />
      <MemberSignature Language="VB.NET" Value="Public Sub Break ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Break();" />
      <MemberSignature Language="F#" Value="member this.Break : unit -&gt; unit" Usage="parallelLoopState.Break " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="23274-130">Gibt an, dass die <see cref="T:System.Threading.Tasks.Parallel" />-Schleife die Ausführung von Iterationen nach der aktuellen Iteration beenden soll, sobald dies dem System möglich ist.</span><span class="sxs-lookup"><span data-stu-id="23274-130">Communicates that the <see cref="T:System.Threading.Tasks.Parallel" /> loop should cease execution of iterations beyond the current iteration at the system's earliest convenience.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23274-131"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A>Gibt an, dass keine Iterationen nach der aktuellen Iteration ausgeführt werden sollen.</span><span class="sxs-lookup"><span data-stu-id="23274-131"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> indicates that no iterations after the current iteration should be run.</span></span> <span data-ttu-id="23274-132">Dadurch werden alle zusätzlichen Iterationen der Schleife faktisch abgebrochen.</span><span class="sxs-lookup"><span data-stu-id="23274-132">It effectively cancels any additional iterations of the loop.</span></span> <span data-ttu-id="23274-133">Es werden jedoch keine Iterationen angehalten, die bereits mit der Ausführung begonnen haben.</span><span class="sxs-lookup"><span data-stu-id="23274-133">However, it does not stop any iterations that have already begun execution.</span></span> <span data-ttu-id="23274-134">Wenn z. b <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> . von der 100. Iteration einer parallelen Schleife aufgerufen wird, die von 0 bis 1.000 iteriert, sollten alle Iterationen kleiner als 100 weiterhin ausgeführt werden, aber die Iterationen von 101 bis 1000, die noch nicht gestartet wurden, werden nicht ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="23274-134">For example, if <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is called from the 100th iteration of a parallel loop iterating from 0 to 1,000, all iterations less than 100 should still be run, but the iterations from 101 through to 1000 that have not yet started are not executed.</span></span>  
  
 <span data-ttu-id="23274-135">Bei Iterationen mit langer Laufzeit, die möglicherweise bereits ausgeführt werden, wird <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> die <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> -Eigenschaft auf den Index der aktuellen Iteration festgelegt, wenn der aktuelle Index kleiner ist als der aktuelle Wert von <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> .</span><span class="sxs-lookup"><span data-stu-id="23274-135">For long-running iterations that may already be executing, <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> sets the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property to the current iteration's index if the current index is less than the current value of <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>.</span></span> <span data-ttu-id="23274-136">Führen Sie die folgenden Schritte aus, um Iterationen zu verhindern, deren Index größer als die niedrigste Unterbrechung bei der Ausführung der konkurrierenden Ausführung ist:</span><span class="sxs-lookup"><span data-stu-id="23274-136">To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:</span></span>  
  
1.  <span data-ttu-id="23274-137">Überprüfen Sie, ob die- <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> Eigenschaft ist `true` .</span><span class="sxs-lookup"><span data-stu-id="23274-137">Check whether the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is `true`.</span></span>  
  
2.  <span data-ttu-id="23274-138">Beenden Sie die Iterations, wenn Ihr Index größer als der- <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> Eigenschafts Wert ist.</span><span class="sxs-lookup"><span data-stu-id="23274-138">Exit from the iteration if its index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value.</span></span>  
  
 <span data-ttu-id="23274-139">Dies wird im Beispiel veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="23274-139">The example provides an illustration.</span></span>  
  
 <span data-ttu-id="23274-140"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A>wird in der Regel in suchbasierten Algorithmen verwendet, bei denen eine Reihenfolge in der Datenquelle vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="23274-140"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is typically employed in search-based algorithms where an ordering is present in the data source.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="23274-141">Im folgenden Beispiel werden bis zu 100 Iterationen einer Schleife parallel ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="23274-141">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="23274-142">Jede Iterations Pause wird für ein zufälliges Intervall von 1 bis 1.000 Millisekunden angehalten.</span><span class="sxs-lookup"><span data-stu-id="23274-142">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="23274-143">Ein zufällig generierter Wert bestimmt, in welcher Iterations Schleife die <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="23274-143">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="23274-144">Wie die Ausgabe des Beispiels zeigt, werden keine Iterationen, deren Index größer ist als der- <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> Eigenschafts Wert, nach dem aufrufungs aufrufungs <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> Methode gestartet.</span><span class="sxs-lookup"><span data-stu-id="23274-144">As the output from the example shows, no iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value start after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="23274-145">Da Iterationen der Schleife wahrscheinlich beim Aufrufen der-Methode ausgeführt werden <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> , ruft jede Iteration die- <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> Eigenschaft auf, um zu überprüfen, ob die-Methode von einer anderen Iteration aufgerufen wurde <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> .</span><span class="sxs-lookup"><span data-stu-id="23274-145">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="23274-146">Wenn der-Eigenschafts Wert ist `true` , überprüft die Iterations Werte den Wert der <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> -Eigenschaft, und wenn dieser größer als der Indexwert der aktuellen Iterations ist, wird sofort zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="23274-146">If  the property value is `true`, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="23274-147">Die <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />-Methode wurde bereits zuvor aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="23274-147">The <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method was previously called.</span></span> <span data-ttu-id="23274-148"><see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> und <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> können von Iterationen derselben Schleife nicht in Kombination verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="23274-148"><see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> and <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> may not be used in combination by iterations of the same loop.</span></span></exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <related type="Article" href="/dotnet/standard/parallel-programming/data-parallelism-task-parallel-library"><span data-ttu-id="23274-149">Datenparallelität (Task Parallel Library)</span><span class="sxs-lookup"><span data-stu-id="23274-149">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsExceptional">
      <MemberSignature Language="C#" Value="public bool IsExceptional { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExceptional" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExceptional As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExceptional { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsExceptional : bool" Usage="System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23274-150">Ruft einen Wert ab, der angibt, ob eine Iteration der Schleife eine Ausnahme ausgelöst hat, die nicht durch diese Iteration behandelt wurde.</span><span class="sxs-lookup"><span data-stu-id="23274-150">Gets whether any iteration of the loop has thrown an exception that went unhandled by that iteration.</span></span></summary>
        <value><span data-ttu-id="23274-151"><see langword="true" />, wenn eine nicht behandelte Ausnahme ausgelöst wurde. andernfalls <see langword="false" /> .</span><span class="sxs-lookup"><span data-stu-id="23274-151"><see langword="true" /> if an unhandled exception was thrown; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/standard/parallel-programming/data-parallelism-task-parallel-library"><span data-ttu-id="23274-152">Datenparallelität (Task Parallel Library)</span><span class="sxs-lookup"><span data-stu-id="23274-152">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsStopped">
      <MemberSignature Language="C#" Value="public bool IsStopped { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStopped" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStopped As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStopped { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStopped : bool" Usage="System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23274-153">Ruft einen Wert ab, der angibt, ob eine Iteration der Schleife die <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />-Methode aufgerufen hat.</span><span class="sxs-lookup"><span data-stu-id="23274-153">Gets whether any iteration of the loop has called the <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method.</span></span></summary>
        <value><span data-ttu-id="23274-154"><see langword="true" />, wenn die Schleife durch Aufrufen der-Methode durch eine Iterations Schleife beendet wurde, <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> andernfalls <see langword="false" /> .</span><span class="sxs-lookup"><span data-stu-id="23274-154"><see langword="true" /> if any iteration has stopped the loop by calling the <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23274-155">Für Iterationen mit langer Ausführungszeit können Sie den Wert der-Eigenschaft abrufen, <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> um zu bestimmen, ob Iterationen der Schleife, die vor dem Aufrufen der-Methode gestartet wurden, <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> noch ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="23274-155">For long-running iterations of the loop, you can retrieve the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to determine whether any iterations of the loop that began execution before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method are still executing.</span></span> <span data-ttu-id="23274-156">Anschließend können Sie den Wert der- <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> Eigenschaft verwenden, um zu bestimmen, ob Sie sofort zurückkehren oder ordnungsgemäß ausgeführt werden sollen.</span><span class="sxs-lookup"><span data-stu-id="23274-156">You can then use the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to determine whether they should return immediately or execute normally.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="23274-157">Im folgenden Beispiel werden bis zu 10.000 Iterationen einer Schleife parallel ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="23274-157">The following example executes up to 10,000 iterations of a loop in parallel.</span></span> <span data-ttu-id="23274-158">Jede Iterations Pause wird für ein zufälliges Intervall von 1 bis 1.000 Millisekunden angehalten.</span><span class="sxs-lookup"><span data-stu-id="23274-158">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="23274-159">Ein zufällig generierter Wert bestimmt, in welcher Iterations Schleife die <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="23274-159">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called.</span></span> <span data-ttu-id="23274-160">Da Iterationen der Schleife wahrscheinlich beim Aufrufen der-Methode ausgeführt werden <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> , ruft der Lambda-Ausdruck die- <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> Methode auf, um zu überprüfen, ob die-Methode von einer anderen Iteration aufgerufen wurde <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> .</span><span class="sxs-lookup"><span data-stu-id="23274-160">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called, the lambda expression calls the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="23274-161">Wenn zurückgegeben `true` wird, wird die Iterationen sofort zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="23274-161">If it returns `true`, the iteration returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/parallel-programming/data-parallelism-task-parallel-library"><span data-ttu-id="23274-162">Datenparallelität (Task Parallel Library)</span><span class="sxs-lookup"><span data-stu-id="23274-162">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LowestBreakIteration">
      <MemberSignature Language="C#" Value="public long? LowestBreakIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int64&gt; LowestBreakIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LowestBreakIteration As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;long&gt; LowestBreakIteration { Nullable&lt;long&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.LowestBreakIteration : Nullable&lt;int64&gt;" Usage="System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23274-163">Ruft die niedrigste Iteration der Schleife ab, aus der <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> aufgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="23274-163">Gets the lowest iteration of the loop from which <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> was called.</span></span></summary>
        <value><span data-ttu-id="23274-164">Die niedrigste Iteration, aus der <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> aufgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="23274-164">The lowest iteration from which <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> was called.</span></span> <span data-ttu-id="23274-165">Bei einer <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" />-Schleife basiert der Wert auf einem intern generierten Index.</span><span class="sxs-lookup"><span data-stu-id="23274-165">In the case of a <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" /> loop, the value is based on an internally-generated index.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23274-166">Es ist möglich, dass mehrere Iterationen einer parallelen Schleife die- <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> Methode aufruft.</span><span class="sxs-lookup"><span data-stu-id="23274-166">It is possible for multiple iterations of a parallel loop to call the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="23274-167">Wenn dies der Fall ist, ist dieser Wert der kleinste Index einer Iterationen, die aufgerufen hat <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> .</span><span class="sxs-lookup"><span data-stu-id="23274-167">If they do, this value is the smallest index of an iteration that called <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.</span></span> <span data-ttu-id="23274-168">Wenn keine Iterations Schleife aufgerufen <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> wird, gibt diese Eigenschaft zurück `null` .</span><span class="sxs-lookup"><span data-stu-id="23274-168">If no iteration of the loop called <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, this property returns `null`.</span></span> <span data-ttu-id="23274-169">Beachten Sie, dass der-Eigenschafts Wert durch Aufrufe der-Methode nicht beeinträchtigt wird <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> .</span><span class="sxs-lookup"><span data-stu-id="23274-169">Note that the property value is unaffected by calls to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span>  
  
 <span data-ttu-id="23274-170">In Iterationen mit langer Laufzeit, in denen alle Iterationen nach der Iteration, die die- <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> Methode aufruft, nicht ausgeführt werden müssen, wird die- <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> Eigenschaft verwendet, um Iterationen zu beenden, die vor dem Aufruf der-Methode gestartet wurden <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> .</span><span class="sxs-lookup"><span data-stu-id="23274-170">In long-running iterations in which all iterations after the iteration that calls the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method need not run, the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property is used to terminate iterations that began execution before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="23274-171">Führen Sie die folgenden Schritte aus, um Iterationen zu verhindern, deren Index größer als die niedrigste Unterbrechung bei der Ausführung der konkurrierenden Ausführung ist:</span><span class="sxs-lookup"><span data-stu-id="23274-171">To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:</span></span>  
  
1.  <span data-ttu-id="23274-172">Überprüfen Sie, ob die- <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> Eigenschaft ist `true` .</span><span class="sxs-lookup"><span data-stu-id="23274-172">Check whether the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is `true`.</span></span>  
  
2.  <span data-ttu-id="23274-173">Beenden Sie die Iterations, wenn Ihr Index größer als der- <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> Eigenschafts Wert ist.</span><span class="sxs-lookup"><span data-stu-id="23274-173">Exit from the iteration if its index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value.</span></span>  
  
 <span data-ttu-id="23274-174">Dies wird im Beispiel veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="23274-174">The example provides an illustration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="23274-175">Im folgenden Beispiel werden bis zu 100 Iterationen einer Schleife parallel ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="23274-175">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="23274-176">Jede Iterations Pause wird für ein zufälliges Intervall von 1 bis 1.000 Millisekunden angehalten.</span><span class="sxs-lookup"><span data-stu-id="23274-176">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="23274-177">Ein zufällig generierter Wert bestimmt, in welcher Iterations Schleife die <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="23274-177">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="23274-178">Dadurch wird verhindert, dass Iterationen, deren Index größer ist als der- <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> Eigenschafts Wert, beginnend nach dem aufzurufenden- <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> Methode, jedoch keine Auswirkungen auf Iterationen haben, die bereits mit der Ausführung begonnen haben.</span><span class="sxs-lookup"><span data-stu-id="23274-178">This prevents iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value from starting after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method, but it does not affect any iterations that have already begun executing.</span></span> <span data-ttu-id="23274-179">Um dies zu verhindern, ruft jede Iterations Methode die- <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> Methode auf, um zu überprüfen, ob die Methode von einer anderen Iterations Methode aufgerufen wurde <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> .</span><span class="sxs-lookup"><span data-stu-id="23274-179">To prevent these from completing, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="23274-180">Wenn dies der Fall ist, überprüft die Iterations Werte den Wert der <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> -Eigenschaft und, wenn er größer als der Indexwert der aktuellen Iterationen ist, sofort.</span><span class="sxs-lookup"><span data-stu-id="23274-180">If so, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="23274-181">Beachten Sie Folgendes: da der Wert außerhalb des Gültigkeits <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> Bereichs außerhalb der parallelen Schleife liegt, müssen Sie ihn einer Variablen zuweisen, die außerhalb der Schleife sichtbar ist, wenn Sie den Wert beibehalten möchten.</span><span class="sxs-lookup"><span data-stu-id="23274-181">Note that, because the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> value is out of scope outside of the parallel loop, you must assign it to a variable that is visible outside of the loop if you want to preserve its value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <related type="Article" href="/dotnet/standard/parallel-programming/data-parallelism-task-parallel-library"><span data-ttu-id="23274-182">Datenparallelität (Task Parallel Library)</span><span class="sxs-lookup"><span data-stu-id="23274-182">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ShouldExitCurrentIteration">
      <MemberSignature Language="C#" Value="public bool ShouldExitCurrentIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldExitCurrentIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ShouldExitCurrentIteration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShouldExitCurrentIteration { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ShouldExitCurrentIteration : bool" Usage="System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23274-183">Ruft einen Wert ab, der angibt, ob die aktuelle Iteration der Schleife basierend auf Anforderungen dieser oder anderer Iterationen beendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="23274-183">Gets whether the current iteration of the loop should exit based on requests made by this or other iterations.</span></span></summary>
        <value><span data-ttu-id="23274-184"><see langword="true" />, wenn die aktuelle Iteration beendet werden soll, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="23274-184"><see langword="true" /> if the current iteration should exit; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23274-185">Die- <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> Eigenschaft wird `true` unter den folgenden Bedingungen auf festgelegt:</span><span class="sxs-lookup"><span data-stu-id="23274-185">The <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is set to `true` under any of the following conditions:</span></span>  
  
-   <span data-ttu-id="23274-186">Eine Iterations Schleife ruft oder auf <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> .</span><span class="sxs-lookup"><span data-stu-id="23274-186">An iteration of the loop calls <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> or <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>.</span></span>  
  
-   <span data-ttu-id="23274-187">Eine Iterations Schleife löst eine Ausnahme aus.</span><span class="sxs-lookup"><span data-stu-id="23274-187">An iteration of the loop throws an exception.</span></span>  
  
-   <span data-ttu-id="23274-188">Die Schleife wird abgebrochen.</span><span class="sxs-lookup"><span data-stu-id="23274-188">The loop is canceled.</span></span>  
  
 <span data-ttu-id="23274-189">Wenn diese Eigenschaft ist `true` , versucht die- <xref:System.Threading.Tasks.Parallel> Klasse proaktiv, zusätzliche Iterationen der Schleife zu verhindern, dass die Ausführung gestartet wird.</span><span class="sxs-lookup"><span data-stu-id="23274-189">When this property is `true`, the <xref:System.Threading.Tasks.Parallel> class will proactively attempt to prohibit additional iterations of the loop from starting execution.</span></span> <span data-ttu-id="23274-190">In manchen Fällen kann es jedoch vorkommen, dass keine weiteren Iterationen gestartet werden können.</span><span class="sxs-lookup"><span data-stu-id="23274-190">However, there may be cases where it is unable to prevent additional iterations from starting.</span></span>  
  
 <span data-ttu-id="23274-191">Dies kann auch der Fall sein, wenn die Ausführung einer Iterations Zeit mit langer Laufzeit bereits begonnen hat.</span><span class="sxs-lookup"><span data-stu-id="23274-191">It may also be the case that a long-running iteration has already begun execution.</span></span> <span data-ttu-id="23274-192">In solchen Fällen können Iterationen die Eigenschaft explizit überprüfen <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> und die Ausführung beenden, wenn die-Eigenschaft zurückgibt `true` .</span><span class="sxs-lookup"><span data-stu-id="23274-192">In such cases, iterations may explicitly check the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property and cease execution if the property returns `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="23274-193">Im folgenden Beispiel werden bis zu 100 Iterationen einer Schleife parallel ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="23274-193">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="23274-194">Jede Iterations Pause wird für ein zufälliges Intervall von 1 bis 1.000 Millisekunden angehalten.</span><span class="sxs-lookup"><span data-stu-id="23274-194">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="23274-195">Ein zufällig generierter Wert bestimmt, in welcher Iterations Schleife die <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="23274-195">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="23274-196">Dadurch wird verhindert, dass Iterationen, deren Index größer ist als der- <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> Eigenschafts Wert, beginnend nach dem aufzurufenden- <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> Methode, jedoch keine Auswirkungen auf Iterationen haben, die bereits mit der Ausführung begonnen haben.</span><span class="sxs-lookup"><span data-stu-id="23274-196">This prevents iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value from starting after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method, but it does not affect any iterations that have already begun executing.</span></span> <span data-ttu-id="23274-197">Um dies zu verhindern, ruft jede Iterations Methode die- <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> Methode auf, um zu überprüfen, ob die Methode von einer anderen Iterations Methode aufgerufen wurde <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> .</span><span class="sxs-lookup"><span data-stu-id="23274-197">To prevent these from completing, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="23274-198">Wenn dies der Fall ist, überprüft die Iterations Werte den Wert der <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> -Eigenschaft und, wenn er größer als der Indexwert der aktuellen Iterationen ist, sofort.</span><span class="sxs-lookup"><span data-stu-id="23274-198">If so, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />
        <related type="Article" href="/dotnet/standard/parallel-programming/data-parallelism-task-parallel-library"><span data-ttu-id="23274-199">Datenparallelität (Task Parallel Library)</span><span class="sxs-lookup"><span data-stu-id="23274-199">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="parallelLoopState.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="23274-200">Gibt an, dass die <see cref="T:System.Threading.Tasks.Parallel" />-Schleife die Ausführung beenden soll, sobald dies dem System möglich ist.</span><span class="sxs-lookup"><span data-stu-id="23274-200">Communicates that the <see cref="T:System.Threading.Tasks.Parallel" /> loop should cease execution at the system's earliest convenience.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23274-201">Das Aufrufen der- <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> Methode gibt an, dass alle Iterationen der Schleife, die noch nicht gestartet wurden, nicht ausgeführt werden müssen.</span><span class="sxs-lookup"><span data-stu-id="23274-201">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method indicates that any iterations of the loop that have not yet started need not be run.</span></span> <span data-ttu-id="23274-202">Dadurch werden alle zusätzlichen Iterationen der Schleife faktisch abgebrochen.</span><span class="sxs-lookup"><span data-stu-id="23274-202">It effectively cancels any additional iterations of the loop.</span></span> <span data-ttu-id="23274-203">Es werden jedoch keine Iterationen angehalten, die bereits mit der Ausführung begonnen haben.</span><span class="sxs-lookup"><span data-stu-id="23274-203">However, it does not stop any iterations that have already begun execution.</span></span>  
  
 <span data-ttu-id="23274-204">Das Aufrufen der- <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> Methode bewirkt <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> , dass die-Eigenschaft `true` für jede Iterationen der Schleife zurückgibt, die noch ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="23274-204">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method causes the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to return `true` for any iteration of the loop that is still executing.</span></span> <span data-ttu-id="23274-205">Dies ist besonders nützlich für Iterationen mit langer Laufzeit, die die Eigenschaft überprüfen <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> und vorzeitig beenden können, wenn ihr Wert ist `true` .</span><span class="sxs-lookup"><span data-stu-id="23274-205">This is particularly useful for long-running iterations, which can check the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property and exit early if its value is `true`.</span></span>  
  
 <span data-ttu-id="23274-206"><xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>wird in der Regel in suchbasierten Algorithmen verwendet. Wenn ein Ergebnis gefunden wird, müssen keine anderen Iterationen ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="23274-206"><xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> is typically employed in search-based algorithms, where once a result is found, no other iterations need be executed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="23274-207">Im folgenden Beispiel werden bis zu 10.000 Iterationen einer Schleife parallel ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="23274-207">The following example executes up to 10,000 iterations of a loop in parallel.</span></span> <span data-ttu-id="23274-208">Jede Iterations Pause wird für ein zufälliges Intervall von 1 bis 1.000 Millisekunden angehalten.</span><span class="sxs-lookup"><span data-stu-id="23274-208">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="23274-209">Ein zufällig generierter Wert bestimmt, in welcher Iterations Schleife die <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> Methode aufgerufen wird.</span><span class="sxs-lookup"><span data-stu-id="23274-209">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called.</span></span> <span data-ttu-id="23274-210">Wie die Ausgabe des Beispiels zeigt, werden nach dem Aufrufder-Methode keine Iterationen ausgeführt <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> .</span><span class="sxs-lookup"><span data-stu-id="23274-210">As the output from the example shows, no iterations execute after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 <span data-ttu-id="23274-211">Da Iterationen der Schleife wahrscheinlich beim Aufrufen der-Methode ausgeführt werden <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> , ruft jede Iteration die- <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> Methode auf, um zu überprüfen, ob die-Methode von einer anderen Iteration aufgerufen wurde <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> .</span><span class="sxs-lookup"><span data-stu-id="23274-211">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="23274-212">Wenn zurückgegeben `true` wird, wird die Iterationen sofort zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="23274-212">If it returns `true`, the iteration returns immediately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="23274-213">Die <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" />-Methode wurde zuvor aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="23274-213">The <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> method was called previously.</span></span> <span data-ttu-id="23274-214"><see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> und <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> können von Iterationen derselben Schleife nicht in Kombination verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="23274-214"><see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> and <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> may not be used in combination by iterations of the same loop.</span></span></exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
        <related type="Article" href="/dotnet/standard/parallel-programming/data-parallelism-task-parallel-library"><span data-ttu-id="23274-215">Datenparallelität (Task Parallel Library)</span><span class="sxs-lookup"><span data-stu-id="23274-215">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>

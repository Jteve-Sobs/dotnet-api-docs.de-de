<Type Name="ParallelLoopState" FullName="System.Threading.Tasks.ParallelLoopState">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d3b07afddc935be0926bc23b1edf4117d5a410bf" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39873099" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ParallelLoopState" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ParallelLoopState extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.ParallelLoopState" />
  <TypeSignature Language="VB.NET" Value="Public Class ParallelLoopState" />
  <TypeSignature Language="C++ CLI" Value="public ref class ParallelLoopState" />
  <TypeSignature Language="F#" Value="type ParallelLoopState = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Diagnostics.DebuggerDisplay("ShouldExitCurrentIteration = {ShouldExitCurrentIteration}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Ermöglicht Iterationen von parallelen Schleifen die Interaktion mit anderen Iterationen. Eine Instanz dieser Klasse wird von der <see cref="T:System.Threading.Tasks.Parallel" />-Klasse für jede Schleife bereitgestellt. Sie können keine Instanzen im Code erstellen.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beachten Sie, dass Sie eine Instanz dieser Klasse nicht instanziieren können. Sie wird automatisch vom Compiler generiert, als Argument in einem Aufruf der <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> oder <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> Methode. Dies wird im Beispiel veranschaulicht.  
  
 Konstrukte wie `for` und `foreach` (in c#) und `For` und `For Each` (in Visual Basic) sequenziell aus dem niedrigsten Index bis zur höchsten oder Ausführen des ersten Objekts in einem Satz mit dem letzten. Im Gegensatz dazu die <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> und <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> Methoden nicht. Da der einzelnen Iterationen der Schleife parallel ausgeführt werden, können sie beginnen und enden, die in beliebiger Reihenfolge. Die <xref:System.Threading.Tasks.ParallelLoopState> Klasse ermöglicht, einzelne Iterationen von parallelen Schleifen miteinander interagieren. Die <xref:System.Threading.Tasks.ParallelLoopState> Klasse können Sie:  
  
-   Die aktuelle Iteration zu beenden und zu verhindern, dass zusätzlichen Iterationen starten durch Aufrufen der <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> Methode. Dies betrifft nicht Iterationen, die bereits die Ausführung gestartet wurde.  
  
-   Verhindert, dass alle Iterationen mit einem Index, der größer als der aktuelle Index ausgeführt wird, durch den Aufruf der <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> Methode. Dies betrifft nicht Iterationen, die bereits die Ausführung gestartet wurde.  
  
-   Bestimmen, ob eine Ausnahme in jeder Schleifeniteration aufgetreten ist, durch Abrufen des Werts der <xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A> Eigenschaft.  
  
-   Zu bestimmen, ob es sich bei jeder Iteration der Schleife aufgerufen hat die <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> Methode durch Abrufen des Werts der <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> Eigenschaft. Sie können diese Eigenschaft von Iterationen der Schleife zurückgeben, die vor dem Aufruf von gestartet der <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> Methode aber immer noch ausgeführt werden.  
  
-   Zu bestimmen, ob es sich bei jeder Iteration der Schleife aufgerufen hat die <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> oder <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> Methode oder eine Ausnahme ausgelöst wurde, durch Abrufen des Werts der <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> Eigenschaft.  
  
-   Beenden einer lang andauernden Iteration, dessen Index größer als der Index einer Iteration in der Break aufgerufen wurde ist, durch Abrufen des Werts von, der <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> Eigenschaft.  
  
   
  
## Examples  
 Im folgende Beispiel wird bis zu 100 Iterationen einer Schleife parallel ausgeführt. Jede Iteration hält für einen zufälligen Intervallen von 1 auf 1000 Millisekunden. Ein zufällig generierter Wert wird bestimmt, auf die Iteration der Schleife die <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> Methode wird aufgerufen. Wie die Ausgabe des Beispiels zeigt, die keine Iterationen, deren Index größer als ist, die <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> Anfang des Wertes Eigenschaft nach dem Aufruf der <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> Methode.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 Da Iterationen der Schleife wahrscheinlich weiterhin ausgeführt wird, wenn sind die <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> -Methode aufgerufen wird, ruft jede Iteration der <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> Eigenschaft zu überprüfen, ob eine andere Iteration aufgerufen hat die <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> Methode. Wenn der Eigenschaftswert ist `true`, die Iteration überprüft den Wert des der <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> Eigenschaft und, wenn er größer als die aktuelle Iteration Indexwert ist, wird sofort zurückgegeben.  
  
 ]]></format>
    </remarks>
    <threadsafe>Ein <see cref="T:System.Threading.Tasks.ParallelLoopState" /> Instanz sollte nur im Text der Schleife verwendet werden, der eine Instanz bereitgestellt wurde.  Es ist nicht sicher ist, verwenden Sie eine bereitgestellte <see cref="T:System.Threading.Tasks.ParallelLoopState" /> Instanz nach der zugeordneten Schleife beendet wird, noch ist es sicher ist, übergeben es explizit, für andere Threads und festlegen, dass diese Threads zu einem beliebigen Zeitpunkt auf diese zugreifen.  Eine andere <see cref="T:System.Threading.Tasks.ParallelLoopState" /> Instanz wird für jeden Thread eine Schleife beteiligt bereitgestellt werden.</threadsafe>
  </Docs>
  <Members>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public void Break ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Break() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Break" />
      <MemberSignature Language="VB.NET" Value="Public Sub Break ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Break();" />
      <MemberSignature Language="F#" Value="member this.Break : unit -&gt; unit" Usage="parallelLoopState.Break " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt an, dass die <see cref="T:System.Threading.Tasks.Parallel" />-Schleife die Ausführung von Iterationen nach der aktuellen Iteration beenden soll, sobald dies dem System möglich ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> Gibt an, dass keine Iterationen nach der aktuellen Iteration ausgeführt werden soll. Jede zusätzlichen Iterationen der Schleife effektiv abgebrochen. Es wird jedoch keine Iterationen beendet, die bereits die Ausführung gestartet wurde. Z. B. wenn <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> wird aufgerufen, von der 100. Iteration einer parallelen Schleife durchlaufen von 0 auf 1.000 alle Iterationen kleiner als 100 sollte weiterhin ausgeführt, aber die Iterationen von 101 bis 1000, die noch nicht gestartet werden, nicht ausgeführt werden.  
  
 Für lang andauernde Iterationen, die bereits ausgeführt werden können, <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> legt die <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> Eigenschaft, um die aktuelle Iteration Index für der aktuelle Index kleiner als der aktuelle Wert der <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>. Um Iterationen zu beenden, dessen Index größer als die niedrigste Iteration der Unterbrechung von konkurrierenden Ausführung ist, sollten Sie Folgendes tun:  
  
1.  Überprüfen Sie, ob die <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> Eigenschaft `true`.  
  
2.  Aus der Iteration zu beenden, wenn der Index größer ist die <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> -Eigenschaftswert.  
  
 Dies wird im Beispiel veranschaulicht.  
  
 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> wird in der Regel in Algorithmen verwendet, in denen eine Sortierung, die in der Datenquelle vorhanden ist.  
  
   
  
## Examples  
 Im folgende Beispiel wird bis zu 100 Iterationen einer Schleife parallel ausgeführt. Jede Iteration hält für einen zufälligen Intervallen von 1 auf 1000 Millisekunden. Ein zufällig generierter Wert wird bestimmt, auf die Iteration der Schleife die <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> Methode wird aufgerufen. Wie die Ausgabe des Beispiels zeigt, die keine Iterationen, deren Index größer als ist, die <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> Anfang des Wertes Eigenschaft nach dem Aufruf der <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> Methode.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 Da Iterationen der Schleife wahrscheinlich weiterhin ausgeführt wird, wenn sind die <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> -Methode aufgerufen wird, ruft jede Iteration der <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> Eigenschaft zu überprüfen, ob eine andere Iteration aufgerufen hat die <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> Methode. Wenn der Eigenschaftswert ist `true`, die Iteration überprüft den Wert des der <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> Eigenschaft und, wenn er größer als die aktuelle Iteration Indexwert ist, wird sofort zurückgegeben.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />-Methode wurde bereits zuvor aufgerufen. <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> und <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> können von Iterationen derselben Schleife nicht in Kombination verwendet werden.</exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      </Docs>
    </Member>
    <Member MemberName="IsExceptional">
      <MemberSignature Language="C#" Value="public bool IsExceptional { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExceptional" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExceptional As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExceptional { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsExceptional : bool" Usage="System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob eine Iteration der Schleife eine Ausnahme ausgelöst hat, die nicht durch diese Iteration behandelt wurde.</summary>
        <value>
          <see langword="true" />, wenn eine nicht behandelte Ausnahme ausgelöst wurde, andernfalls <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStopped">
      <MemberSignature Language="C#" Value="public bool IsStopped { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStopped" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStopped As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStopped { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStopped : bool" Usage="System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob eine Iteration der Schleife die <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />-Methode aufgerufen hat.</summary>
        <value>
          <see langword="true" />, wenn die Schleife beendet wurde, indem in einer Iteration die <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />-Methode aufgerufen wurde, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei lang andauernden Iterationen der Schleife können Sie den Wert der Abrufen der <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> Eigenschaft um zu bestimmen, ob alle Iterationen der Schleife, die die Ausführung vor dem Aufruf gestartet hat die <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> Methode weiterhin ausgeführt werden. Anschließend können Sie den Wert des der <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> Eigenschaft, um zu bestimmen, ob sie sofort zurückgegeben oder normal ausgeführt werden soll.  
  
   
  
## Examples  
 Im folgende Beispiel wird bis zu 10.000 Iterationen einer Schleife parallel ausgeführt. Jede Iteration hält für einen zufälligen Intervallen von 1 auf 1000 Millisekunden. Ein zufällig generierter Wert wird bestimmt, auf die Iteration der Schleife die <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> Methode wird aufgerufen. Da Iterationen der Schleife wahrscheinlich weiterhin ausgeführt wird, wenn sind die <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> -Methode aufgerufen wird, ruft die Lambda-Ausdruck die <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> -Methode überprüft, ob eine andere Iteration aufgerufen hat die <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> Methode. Wenn sie zurückgibt `true`, die Iteration wird sofort zurückgegeben.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LowestBreakIteration">
      <MemberSignature Language="C#" Value="public Nullable&lt;long&gt; LowestBreakIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int64&gt; LowestBreakIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LowestBreakIteration As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;long&gt; LowestBreakIteration { Nullable&lt;long&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.LowestBreakIteration : Nullable&lt;int64&gt;" Usage="System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die niedrigste Iteration der Schleife ab, von der <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> aufgerufen wurde.</summary>
        <value>Die niedrigste Iteration, aus der <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> aufgerufen wurde. Bei einer <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" />-Schleife basiert der Wert auf einem intern generierten Index.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Es ist möglich, dass mehrere Iterationen einer parallelen Schleife zum Aufrufen der <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> Methode. Wenn dies der Fall ist, wird dieser Wert ist der kleinste Index einer Iteration, die aufgerufen <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>. Wenn keine Iteration der Schleife aufgerufen <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, gibt diese Eigenschaft `null`. Beachten Sie, dass der Eigenschaftswert nicht betroffen von Aufrufen an die <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> Methode.  
  
 In lang andauernden Iterationen in der alle Iterationen nach der Iteration, die Aufrufe der <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> Methode muss nicht ausgeführt werden, die <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> Eigenschaft wird verwendet, um Iterationen zu beenden, die die Ausführung vor dem Aufruf gestartet hat die <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> Methode. Um Iterationen zu beenden, dessen Index größer als die niedrigste Iteration der Unterbrechung von konkurrierenden Ausführung ist, sollten Sie Folgendes tun:  
  
1.  Überprüfen Sie, ob die <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> Eigenschaft `true`.  
  
2.  Aus der Iteration zu beenden, wenn der Index größer ist die <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> -Eigenschaftswert.  
  
 Dies wird im Beispiel veranschaulicht.  
  
   
  
## Examples  
 Im folgende Beispiel wird bis zu 100 Iterationen einer Schleife parallel ausgeführt. Jede Iteration hält für einen zufälligen Intervallen von 1 auf 1000 Millisekunden. Ein zufällig generierter Wert wird bestimmt, auf die Iteration der Schleife die <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> Methode wird aufgerufen. Dies verhindert, dass Iterationen, deren Index größer als ist, die <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> Eigenschaftswert ab, nach dem Aufruf von der <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> -Methode, sondern wirkt sich keine Iterationen, deren Ausführung bereits gestartet wurde. Um diese abgeschlossen zu verhindern, ruft jede Iteration der <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> -Methode überprüft, ob eine andere Iteration aufgerufen hat die <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> Methode. Wenn Sie also den Wert der von die Iteration überprüft die <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> Eigenschaft und, wenn er größer als die aktuelle Iteration Indexwert ist, wird sofort zurückgegeben.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 Beachten Sie, dass, weil die <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> Wert außerhalb des gültigen Bereichs außerhalb der parallelen Schleife ist, müssen Sie sie zuweisen, um eine Variable, die außerhalb der Schleife sichtbar ist, wenn den Wert beibehalten werden sollen.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
      </Docs>
    </Member>
    <Member MemberName="ShouldExitCurrentIteration">
      <MemberSignature Language="C#" Value="public bool ShouldExitCurrentIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldExitCurrentIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ShouldExitCurrentIteration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShouldExitCurrentIteration { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ShouldExitCurrentIteration : bool" Usage="System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die aktuelle Iteration der Schleife basierend auf Anforderungen dieser oder anderer Iterationen beendet werden soll.</summary>
        <value>
          <see langword="true" />, wenn die aktuelle Iteration beendet werden soll, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> -Eigenschaftensatz auf `true` unter einer der folgenden Bedingungen:  
  
-   Eine Iteration der Schleife Aufrufe <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> oder <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>.  
  
-   Eine Iteration der Schleife eine Ausnahme ausgelöst.  
  
-   Die Schleife wird abgebrochen.  
  
 Wenn diese Eigenschaft ist `true`, <xref:System.Threading.Tasks.Parallel> Klasse versucht nämlich proaktiv zu verhindern, dass zusätzliche Iterationen der Schleife Ausführung wird gestartet. Allerdings gibt es möglicherweise Fälle, in dem sie zu verhindern, dass zusätzliche Iterationen starten kann.  
  
 Es kann auch der Fall sein, dass eine Iteration langer Ausführung bereits begonnen hat. In solchen Fällen Iterationen können explizit überprüfen die <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> -Eigenschaft und die Ausführung beenden, wenn die Eigenschaft zurückgibt `true`.  
  
   
  
## Examples  
 Im folgende Beispiel wird bis zu 100 Iterationen einer Schleife parallel ausgeführt. Jede Iteration hält für einen zufälligen Intervallen von 1 auf 1000 Millisekunden. Ein zufällig generierter Wert wird bestimmt, auf die Iteration der Schleife die <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> Methode wird aufgerufen. Dies verhindert, dass Iterationen, deren Index größer als ist, die <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> Eigenschaftswert ab, nach dem Aufruf von der <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> -Methode, sondern wirkt sich keine Iterationen, deren Ausführung bereits gestartet wurde. Um diese abgeschlossen zu verhindern, ruft jede Iteration der <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> -Methode überprüft, ob eine andere Iteration aufgerufen hat die <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> Methode. Wenn Sie also den Wert der von die Iteration überprüft die <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> Eigenschaft und, wenn er größer als die aktuelle Iteration Indexwert ist, wird sofort zurückgegeben.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="parallelLoopState.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt an, dass die <see cref="T:System.Threading.Tasks.Parallel" />-Schleife die Ausführung beenden soll, sobald es dem System möglich ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aufrufen der <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> -Methode gibt an, dass alle Iterationen der Schleife, die noch nicht gestartet wurden, nicht ausgeführt werden müssen. Jede zusätzlichen Iterationen der Schleife effektiv abgebrochen. Es wird jedoch keine Iterationen beendet, die bereits die Ausführung gestartet wurde.  
  
 Aufrufen der <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> Methode bewirkt, dass die <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> zurückzugebende Eigenschaft `true` für jede Iteration der Schleife, die noch ausgeführt wird. Dies ist besonders nützlich für lang andauernde Iterationen, die prüft, können die <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> -Eigenschaft, und beenden, die einem frühen Zeitpunkt an, wenn der Wert ist `true`.  
  
 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> ist in Algorithmen, in der Regel verwendet, in denen nach der ein Ergebnis gefunden wurde, sind keine anderen Iterationen ausgeführt werden müssen.  
  
   
  
## Examples  
 Im folgende Beispiel wird bis zu 10.000 Iterationen einer Schleife parallel ausgeführt. Jede Iteration hält für einen zufälligen Intervallen von 1 auf 1000 Millisekunden. Ein zufällig generierter Wert wird bestimmt, auf die Iteration der Schleife die <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> Methode wird aufgerufen. Wie die Ausgabe des Beispiels zeigt, führen Sie keine Iterationen nach dem Aufruf der <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> Methode.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 Da Iterationen der Schleife wahrscheinlich weiterhin ausgeführt wird, wenn sind die <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> -Methode aufgerufen wird, ruft jede Iteration der <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> -Methode überprüft, ob eine andere Iteration aufgerufen hat die <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> Methode. Wenn sie zurückgibt `true`, die Iteration wird sofort zurückgegeben.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" />-Methode wurde zuvor aufgerufen. <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> und <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> können von Iterationen derselben Schleife nicht in Kombination verwendet werden.</exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
      </Docs>
    </Member>
  </Members>
</Type>
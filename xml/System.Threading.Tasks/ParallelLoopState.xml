<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ParallelLoopState.xml" source-language="en-US" target-language="de-DE">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac53e4244160069333f5d930b81c7b54173c2ad6d6a.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3e4244160069333f5d930b81c7b54173c2ad6d6a</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>Enables iterations of parallel loops to interact with other iterations.</source>
          <target state="translated">Ermöglicht Iterationen von parallelen Schleifen die Interaktion mit anderen Iterationen.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>An instance of this class is provided by the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Parallel" /&gt;</ph> class to each loop; you can not create instances in your code.</source>
          <target state="translated">Eine Instanz dieser Klasse wird von der <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Parallel" /&gt;</ph>-Klasse für jede Schleife bereitgestellt. Sie können keine Instanzen im Code erstellen.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>Note that you cannot instantiate an instance of this class.</source>
          <target state="translated">Beachten Sie, dass Sie eine Instanz dieser Klasse nicht instanziieren können.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>It is automatically generated by the compiler as an argument in a call to the <ph id="ph1">&lt;xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Er wird automatisch vom Compiler generiert, als Argument in einem Aufruf der <ph id="ph1">&lt;xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType&gt;</ph> oder <ph id="ph2">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>The example provides an illustration.</source>
          <target state="translated">Dies wird im Beispiel veranschaulicht.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>Constructs such as <ph id="ph1">`for`</ph> and <ph id="ph2">`foreach`</ph> (in C#) and <ph id="ph3">`For`</ph> and <ph id="ph4">`For Each`</ph> (in Visual Basic) execute sequentially from the lowest index to the highest or from the first object in a set to the last.</source>
          <target state="translated">Erstellt z. B. <ph id="ph1">`for`</ph> und <ph id="ph2">`foreach`</ph> (in c#) und <ph id="ph3">`For`</ph> und <ph id="ph4">`For Each`</ph> (in Visual Basic) führen Sie nacheinander aus dem niedrigsten Index bis zur höchsten Ebene oder das erste Objekt in einem Satz bis zum letzten.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>In contrast, the <ph id="ph1">&lt;xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType&gt;</ph> methods do not.</source>
          <target state="translated">Im Gegensatz dazu die <ph id="ph1">&lt;xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType&gt;</ph> und <ph id="ph2">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType&gt;</ph> Methoden nicht.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>Because individual iterations of the loop run in parallel, they can begin and end in any order.</source>
          <target state="translated">Da der einzelnen Iterationen der Schleife parallel ausgeführt werden, können sie beginnen und enden in beliebiger Reihenfolge.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState&gt;</ph> class allows individual iterations of parallel loops to interact with one another.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState&gt;</ph> -Klasse ermöglicht es einzelnen Iterationen von parallelen Schleifen miteinander interagieren.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState&gt;</ph> class allows you to:</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState&gt;</ph> -Klasse können Sie:</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>Exit the current iteration and prevent any additional iterations from starting by calling the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method.</source>
          <target state="translated">Die aktuelle Iteration zu beenden und zu verhindern, dass jeder zusätzlichen Iterationen gestartet werden, durch Aufrufen der <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>This does not affect iterations that have already begun execution.</source>
          <target state="translated">Dies beeinflusst nicht Iterationen, die bereits mit der Ausführung begonnen haben.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>Prevent any iterations with an index greater than the current index from executing by calling the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method.</source>
          <target state="translated">Verhindern, dass alle Iterationen mit einem Index größer als der aktuelle Index ausgeführt werden, durch Aufrufen der <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>This does not affect iterations that have already begun execution.</source>
          <target state="translated">Dies beeinflusst nicht Iterationen, die bereits mit der Ausführung begonnen haben.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>Determine whether an exception has occurred in any loop iteration by retrieving the value of the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A&gt;</ph> property.</source>
          <target state="translated">Bestimmen, ob eine Ausnahme in jeder Schleifeniteration aufgetreten ist, durch das Abrufen des Werts der <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A&gt;</ph> Eigenschaft.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>Determine whether any iteration of the loop has called the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method by retrieving the value of the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> property.</source>
          <target state="translated">Bestimmen, ob eine Iteration der Schleife aufgerufen hat die <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> Methode durch das Abrufen des Werts der <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> Eigenschaft.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>You can use this property to return from iterations of the loop that started before the call to the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method but are still executing.</source>
          <target state="translated">Sie können diese Eigenschaft von Iterationen der Schleife zurückgeben, die vor dem Aufruf gestartet die <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> Methode jedoch weiterhin ausgeführt werden.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>Determine whether any iteration of the loop has called the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method or has thrown an exception by retrieving the value of the <ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> property.</source>
          <target state="translated">Bestimmen, ob eine Iteration der Schleife aufgerufen hat die <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> oder <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> Methode oder eine Ausnahme ausgelöst wurde, durch das Abrufen des Werts der <ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> Eigenschaft.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>Exit from a long-running iteration whose index is greater than the index of an iteration in which Break was called by retrieving the value of the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property.</source>
          <target state="translated">Beenden einer lang andauernden Iteration, dessen Index größer als der Index einer Iteration in der Break aufgerufen wurde ist, durch das Abrufen des Werts, der <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> Eigenschaft.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>The following example executes up to 100 iterations of a loop in parallel.</source>
          <target state="translated">Im folgenden Beispiel werden bis zu 100 Iterationen einer Schleife parallel ausgeführt.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</source>
          <target state="translated">Jede Iteration hält für einem zufällig gewählten Zeitpunkt zwischen 1 und 1.000 Millisekunden steht.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>A randomly generated value determines on which iteration of the loop the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method is called.</source>
          <target state="translated">Ein zufällig generierter Wert wird bestimmt, auf welche Iteration der Schleife die <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> -Methode aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>As the output from the example shows, no iterations whose index is greater than the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property value start after the call to the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method.</source>
          <target state="translated">Wie die Ausgabe des Beispiels zeigt, keine Iterationen, deren Index größer als ist, die <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> Start des Eigenschaft-Wert nach dem Aufruf der <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>Because iterations of the loop are still likely to be executing when the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method is called, each iteration calls the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> property to check whether another iteration has called the <ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method.</source>
          <target state="translated">Da Iterationen der Schleife, die wahrscheinlich weiterhin ausgeführt wird, wenn sind die <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> -Methode aufgerufen wird, werden Aufrufe von jeder Iteration der <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> Eigenschaft zu überprüfen, ob eine andere Iteration aufgerufen hat die <ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>If  the property value is <ph id="ph1">`true`</ph>, the iteration checks the value of the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property and, if it is greater than the current iteration's index value, returns immediately.</source>
          <target state="translated">Wenn der Eigenschaftswert ist <ph id="ph1">`true`</ph>, Iteration überprüft den Wert der die <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> Eigenschaft und, wenn sie größer als die aktuelle Iteration Indexwert ist, kehrt sofort zurück.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.ParallelLoopState" /&gt;</ph> instance is meant to be used only within the body of the loop to which an instance was provided.</source>
          <target state="translated">Ein <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.ParallelLoopState" /&gt;</ph> Instanz sollte nur im Text der Schleife verwendet werden, zu dem eine Instanz bereitgestellt wurde.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>It is not safe to use a provided <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.ParallelLoopState" /&gt;</ph> instance after the associated loop ends, nor is it safe to explicitly hand it off to other threads and have those threads access it at any time.</source>
          <target state="translated">Es ist nicht sicher ist, verwenden Sie eine bereitgestellte <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.ParallelLoopState" /&gt;</ph> Instanz nach der zugehörigen Schleife beendet, noch ist es sicher ist, übergeben sie explizit, für andere Threads und diese Threads zu einem beliebigen Zeitpunkt die Zugriffsberechtigung haben.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>A different <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.ParallelLoopState" /&gt;</ph> instance will be provided to each thread involved in a loop.</source>
          <target state="translated">Ein anderes <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.ParallelLoopState" /&gt;</ph> Instanz wird für jeden Thread in einer Schleife beteiligten bereitgestellt.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>Communicates that the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Parallel" /&gt;</ph> loop should cease execution of iterations beyond the current iteration at the system's earliest convenience.</source>
          <target state="translated">Gibt an, dass die <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Parallel" /&gt;</ph>-Schleife die Ausführung von Iterationen nach der aktuellen Iteration beenden soll, sobald dies dem System möglich ist.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source><ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> indicates that no iterations after the current iteration should be run.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> Gibt an, dass keine Iterationen nach der aktuellen Iteration ausgeführt werden soll.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>It effectively cancels any additional iterations of the loop.</source>
          <target state="translated">Es wird effektiv zusätzlichen Iterationen der Schleife abgebrochen.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>However, it does not stop any iterations that have already begun execution.</source>
          <target state="translated">Es wird jedoch keine Iterationen beendet, die bereits mit der Ausführung begonnen haben.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>For example, if <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> is called from the 100th iteration of a parallel loop iterating from 0 to 1,000, all iterations less than 100 should still be run, but the iterations from 101 through to 1000 that have not yet started are not executed.</source>
          <target state="translated">Z. B. wenn <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> aufgerufen wird, von der 100. Iteration einer parallelen Schleife durchlaufen von 0 auf 1.000, alle Iterationen kleiner als 100 sollten weiterhin ausgeführt, aber die Iterationen von 101 bis 1000, die noch nicht gestartet werden, nicht ausgeführt werden.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>For long-running iterations that may already be executing, <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> sets the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property to the current iteration's index if the current index is less than the current value of <ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph>.</source>
          <target state="translated">Für lang andauernde Iterationen, die möglicherweise bereits ausgeführt werden, <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> legt die <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> Eigenschaft, um die aktuelle Iteration Index, wenn der aktuelle Index kleiner als der aktuelle Wert der ist <ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:</source>
          <target state="translated">Um die Iterationen zu beenden, dessen Index größer als die niedrigste Iteration der Unterbrechung von konkurrierenden Ausführung ist, sollten Sie Folgendes tun:</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>Check whether the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> property is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Überprüfen Sie, ob die <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> Eigenschaft ist <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>Exit from the iteration if its index is greater than the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property value.</source>
          <target state="translated">Der Iteration zu beenden, ist dessen Index größer als die <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> Eigenschaftswert.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>The example provides an illustration.</source>
          <target state="translated">Dies wird im Beispiel veranschaulicht.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source><ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> is typically employed in search-based algorithms where an ordering is present in the data source.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> in der Regel in der Suche basierende Algorithmen eingesetzt, in denen eine Sortierung, die in der Datenquelle vorhanden ist.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>The following example executes up to 100 iterations of a loop in parallel.</source>
          <target state="translated">Im folgenden Beispiel werden bis zu 100 Iterationen einer Schleife parallel ausgeführt.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</source>
          <target state="translated">Jede Iteration hält für einem zufällig gewählten Zeitpunkt zwischen 1 und 1.000 Millisekunden steht.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>A randomly generated value determines on which iteration of the loop the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method is called.</source>
          <target state="translated">Ein zufällig generierter Wert wird bestimmt, auf welche Iteration der Schleife die <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> -Methode aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>As the output from the example shows, no iterations whose index is greater than the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property value start after the call to the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method.</source>
          <target state="translated">Wie die Ausgabe des Beispiels zeigt, keine Iterationen, deren Index größer als ist, die <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> Start des Eigenschaft-Wert nach dem Aufruf der <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>Because iterations of the loop are still likely to be executing when the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method is called, each iteration calls the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> property to check whether another iteration has called the <ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method.</source>
          <target state="translated">Da Iterationen der Schleife, die wahrscheinlich weiterhin ausgeführt wird, wenn sind die <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> -Methode aufgerufen wird, werden Aufrufe von jeder Iteration der <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> Eigenschaft zu überprüfen, ob eine andere Iteration aufgerufen hat die <ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>If  the property value is <ph id="ph1">`true`</ph>, the iteration checks the value of the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property and, if it is greater than the current iteration's index value, returns immediately.</source>
          <target state="translated">Wenn der Eigenschaftswert ist <ph id="ph1">`true`</ph>, Iteration überprüft den Wert der die <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> Eigenschaft und, wenn sie größer als die aktuelle Iteration Indexwert ist, kehrt sofort zurück.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>The <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /&gt;</ph> method was previously called.</source>
          <target state="translated">Die <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /&gt;</ph>-Methode wurde bereits zuvor aufgerufen.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source><ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /&gt;</ph> may not be used in combination by iterations of the same loop.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /&gt;</ph> und <ph id="ph2">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /&gt;</ph> können von Iterationen derselben Schleife nicht in Kombination verwendet werden.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.ParallelLoopState.IsExceptional">
          <source>Gets whether any iteration of the loop has thrown an exception that went unhandled by that iteration.</source>
          <target state="translated">Ruft einen Wert ab, der angibt, ob eine Iteration der Schleife eine Ausnahme ausgelöst hat, die nicht durch diese Iteration behandelt wurde.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.IsExceptional">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if an unhandled exception was thrown; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn eine nicht behandelte Ausnahme ausgelöst wurde, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.ParallelLoopState.IsStopped">
          <source>Gets whether any iteration of the loop has called the <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /&gt;</ph> method.</source>
          <target state="translated">Ruft einen Wert ab, der angibt, ob eine Iteration der Schleife die <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /&gt;</ph>-Methode aufgerufen hat.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.IsStopped">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if any iteration has stopped the loop by calling the <ph id="ph2">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /&gt;</ph> method; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn die Schleife beendet wurde, indem in einer Iteration die <ph id="ph2">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /&gt;</ph>-Methode aufgerufen wurde, andernfalls <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.IsStopped">
          <source>For long-running iterations of the loop, you can retrieve the value of the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> property to determine whether any iterations of the loop that began execution before the call to the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method are still executing.</source>
          <target state="translated">Für lang andauernde Iterationen der Schleife, rufen Sie den Wert von der <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> -Eigenschaft können Sie bestimmen, ob alle Iterationen der Schleife, die die Ausführung vor dem Aufruf gestartet hat die <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> Methode weiterhin ausgeführt werden.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.IsStopped">
          <source>You can then use the value of the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> property to determine whether they should return immediately or execute normally.</source>
          <target state="translated">Anschließend können Sie den Wert des der <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> -Eigenschaft können Sie bestimmen, ob sie sollten sofort zurückgegeben oder normal ausgeführt.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.IsStopped">
          <source>The following example executes up to 10,000 iterations of a loop in parallel.</source>
          <target state="translated">Im folgenden Beispiel werden bis zu 10.000 Iteration einer Schleife parallel ausgeführt.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.IsStopped">
          <source>Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</source>
          <target state="translated">Jede Iteration hält für einem zufällig gewählten Zeitpunkt zwischen 1 und 1.000 Millisekunden steht.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.IsStopped">
          <source>A randomly generated value determines on which iteration of the loop the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method is called.</source>
          <target state="translated">Ein zufällig generierter Wert wird bestimmt, auf welche Iteration der Schleife die <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> -Methode aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.IsStopped">
          <source>Because iterations of the loop are still likely to be executing when the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method is called, the lambda expression calls the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> method to check whether another iteration has called the <ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method.</source>
          <target state="translated">Da Iterationen der Schleife, die wahrscheinlich weiterhin ausgeführt wird, wenn sind die <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> -Methode aufgerufen wird, ruft die Lambda-Ausdruck die <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> -Methode überprüft, ob eine andere Iteration aufgerufen hat die <ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.IsStopped">
          <source>If it returns <ph id="ph1">`true`</ph>, the iteration returns immediately.</source>
          <target state="translated">Wenn zurückgegeben <ph id="ph1">`true`</ph>, die Iteration wird sofort zurückgegeben.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>Gets the lowest iteration of the loop from which <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /&gt;</ph> was called.</source>
          <target state="translated">Ruft die niedrigste Iteration der Schleife ab, aus der <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /&gt;</ph> aufgerufen wurde.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>The lowest iteration from which <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /&gt;</ph> was called.</source>
          <target state="translated">Die niedrigste Iteration, aus der <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /&gt;</ph> aufgerufen wurde.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>In the case of a <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" /&gt;</ph> loop, the value is based on an internally-generated index.</source>
          <target state="translated">Bei einer <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" /&gt;</ph>-Schleife basiert der Wert auf einem intern generierten Index.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>It is possible for multiple iterations of a parallel loop to call the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method.</source>
          <target state="translated">Es ist möglich, dass mehrere Iterationen einer parallelen Schleife zum Aufrufen der <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>If they do, this value is the smallest index of an iteration that called <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph>.</source>
          <target state="translated">Wenn dies der Fall ist, wird dieser Wert ist der kleinste Index einer Iteration, die aufgerufen <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>If no iteration of the loop called <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph>, this property returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Wenn keine Iteration der Schleife aufgerufen <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph>, gibt diese Eigenschaft <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>Note that the property value is unaffected by calls to the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method.</source>
          <target state="translated">Beachten Sie, dass der Eigenschaftswert nicht betroffen von Aufrufen an die <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>In long-running iterations in which all iterations after the iteration that calls the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method need not run, the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property is used to terminate iterations that began execution before the call to the <ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method.</source>
          <target state="translated">Langer Iterationen in der alle Iterationen nach Iteration, die Aufrufe der <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> Methode muss nicht ausgeführt wird, die <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> Eigenschaft wird verwendet, um die Iterationen zu terminieren, der die Ausführung vor dem Aufruf gestartet hat die <ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:</source>
          <target state="translated">Um die Iterationen zu beenden, dessen Index größer als die niedrigste Iteration der Unterbrechung von konkurrierenden Ausführung ist, sollten Sie Folgendes tun:</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>Check whether the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> property is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Überprüfen Sie, ob die <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> Eigenschaft ist <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>Exit from the iteration if its index is greater than the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property value.</source>
          <target state="translated">Der Iteration zu beenden, ist dessen Index größer als die <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> Eigenschaftswert.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>The example provides an illustration.</source>
          <target state="translated">Dies wird im Beispiel veranschaulicht.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>The following example executes up to 100 iterations of a loop in parallel.</source>
          <target state="translated">Im folgenden Beispiel werden bis zu 100 Iterationen einer Schleife parallel ausgeführt.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</source>
          <target state="translated">Jede Iteration hält für einem zufällig gewählten Zeitpunkt zwischen 1 und 1.000 Millisekunden steht.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>A randomly generated value determines on which iteration of the loop the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method is called.</source>
          <target state="translated">Ein zufällig generierter Wert wird bestimmt, auf welche Iteration der Schleife die <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> -Methode aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>This prevents iterations whose index is greater than the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property value from starting after the call to the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method, but it does not affect any iterations that have already begun executing.</source>
          <target state="translated">Dies verhindert, dass Iterationen, deren Index größer als ist, die <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> Eigenschaftswert gestartet werden, nach dem Aufruf der <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> -Methode, aber sie wirkt sich keine Iterationen, deren Ausführung bereits gestartet wurde.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>To prevent these from completing, each iteration calls the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> method to check whether another iteration has called the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method.</source>
          <target state="translated">Um zu verhindern, dass diese vom abschließen, ruft jede Iteration der <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> -Methode überprüft, ob eine andere Iteration aufgerufen hat die <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>If so, the iteration checks the value of the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property and, if it is greater than the current iteration's index value, returns immediately.</source>
          <target state="translated">Deshalb den Wert der in die Iteration überprüft wird die <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> Eigenschaft und, wenn sie größer als die aktuelle Iteration Indexwert ist, kehrt sofort zurück.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>Note that, because the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> value is out of scope outside of the parallel loop, you must assign it to a variable that is visible outside of the loop if you want to preserve its value.</source>
          <target state="translated">Beachten Sie Folgendes: Da die <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> Wert liegt außerhalb des Bereichs außerhalb der parallelen Schleife, müssen Sie sie einer Variablen, die außerhalb der Schleife sichtbar ist, wenn Sie den Wert beibehalten möchten zuweisen.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>Gets whether the current iteration of the loop should exit based on requests made by this or other iterations.</source>
          <target state="translated">Ruft einen Wert ab, der angibt, ob die aktuelle Iteration der Schleife basierend auf Anforderungen dieser oder anderer Iterationen beendet werden soll.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current iteration should exit; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, wenn die aktuelle Iteration beendet werden soll, andernfalls <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> property is set to <ph id="ph2">`true`</ph> under any of the following conditions:</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> -Eigenschaftensatz auf <ph id="ph2">`true`</ph> unter einer der folgenden Bedingungen:</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>An iteration of the loop calls <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph>.</source>
          <target state="translated">Eine Iteration der Schleife Aufrufe <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> oder <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>An iteration of the loop throws an exception.</source>
          <target state="translated">Eine Iteration der Schleife eine Ausnahme ausgelöst.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>The loop is canceled.</source>
          <target state="translated">Die Schleife abgebrochen wird.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>When this property is <ph id="ph1">`true`</ph>, the <ph id="ph2">&lt;xref:System.Threading.Tasks.Parallel&gt;</ph> class will proactively attempt to prohibit additional iterations of the loop from starting execution.</source>
          <target state="translated">Wenn diese Eigenschaft den Wert <ph id="ph1">`true`</ph>die <ph id="ph2">&lt;xref:System.Threading.Tasks.Parallel&gt;</ph> Klasse versucht proaktiv zu verhindern, dass zusätzliche Iterationen der Schleife Ausführung wird gestartet.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>However, there may be cases where it is unable to prevent additional iterations from starting.</source>
          <target state="translated">Möglicherweise gibt es jedoch Fälle, in denen sie zusätzliche Iterationen gestartet werden, verhindern kann.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>It may also be the case that a long-running iteration has already begun execution.</source>
          <target state="translated">Auch die Groß-/Kleinschreibung möglicherweise, dass eine lang andauernde Iteration Ausführung bereits begonnen wurde.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>In such cases, iterations may explicitly check the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> property and cease execution if the property returns <ph id="ph2">`true`</ph>.</source>
          <target state="translated">In solchen Fällen Iterationen können explizit Überprüfen der <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> -Eigenschaft und die Ausführung beenden, wenn die Eigenschaft zurückgibt <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>The following example executes up to 100 iterations of a loop in parallel.</source>
          <target state="translated">Im folgenden Beispiel werden bis zu 100 Iterationen einer Schleife parallel ausgeführt.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</source>
          <target state="translated">Jede Iteration hält für einem zufällig gewählten Zeitpunkt zwischen 1 und 1.000 Millisekunden steht.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>A randomly generated value determines on which iteration of the loop the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method is called.</source>
          <target state="translated">Ein zufällig generierter Wert wird bestimmt, auf welche Iteration der Schleife die <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> -Methode aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>This prevents iterations whose index is greater than the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property value from starting after the call to the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method, but it does not affect any iterations that have already begun executing.</source>
          <target state="translated">Dies verhindert, dass Iterationen, deren Index größer als ist, die <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> Eigenschaftswert gestartet werden, nach dem Aufruf der <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> -Methode, aber sie wirkt sich keine Iterationen, deren Ausführung bereits gestartet wurde.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>To prevent these from completing, each iteration calls the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> method to check whether another iteration has called the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method.</source>
          <target state="translated">Um zu verhindern, dass diese vom abschließen, ruft jede Iteration der <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> -Methode überprüft, ob eine andere Iteration aufgerufen hat die <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>If so, the iteration checks the value of the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property and, if it is greater than the current iteration's index value, returns immediately.</source>
          <target state="translated">Deshalb den Wert der in die Iteration überprüft wird die <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> Eigenschaft und, wenn sie größer als die aktuelle Iteration Indexwert ist, kehrt sofort zurück.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source>Communicates that the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Parallel" /&gt;</ph> loop should cease execution at the system's earliest convenience.</source>
          <target state="translated">Gibt an, dass die <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Parallel" /&gt;</ph>-Schleife die Ausführung beenden soll, sobald dies dem System möglich ist.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source>Calling the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method indicates that any iterations of the loop that have not yet started need not be run.</source>
          <target state="translated">Aufrufen der <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> -Methode gibt an, dass alle Iterationen der Schleife, die noch nicht gestartet wurden, nicht ausgeführt werden müssen.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source>It effectively cancels any additional iterations of the loop.</source>
          <target state="translated">Es wird effektiv zusätzlichen Iterationen der Schleife abgebrochen.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source>However, it does not stop any iterations that have already begun execution.</source>
          <target state="translated">Es wird jedoch keine Iterationen beendet, die bereits mit der Ausführung begonnen haben.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source>Calling the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method causes the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> property to return <ph id="ph3">`true`</ph> for any iteration of the loop that is still executing.</source>
          <target state="translated">Aufrufen der <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> -Methode nimmt die <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> -Eigenschaft zum Zurückgeben von <ph id="ph3">`true`</ph> für jede Iteration der Schleife, die noch ausgeführt wird.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source>This is particularly useful for long-running iterations, which can check the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> property and exit early if its value is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Dies ist besonders nützlich für lang andauernde Iterationen, die prüfen können, ob die <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> -Eigenschaft, und beenden Sie frühzeitig, wenn der Wert ist <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source><ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> is typically employed in search-based algorithms, where once a result is found, no other iterations need be executed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> in der Regel in der Suche basierende Algorithmen eingesetzt, in dem nach der ein Ergebnis gefunden wurde, sind keine anderen Iterationen ausgeführt werden müssen.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source>The following example executes up to 10,000 iterations of a loop in parallel.</source>
          <target state="translated">Im folgenden Beispiel werden bis zu 10.000 Iteration einer Schleife parallel ausgeführt.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source>Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</source>
          <target state="translated">Jede Iteration hält für einem zufällig gewählten Zeitpunkt zwischen 1 und 1.000 Millisekunden steht.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source>A randomly generated value determines on which iteration of the loop the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method is called.</source>
          <target state="translated">Ein zufällig generierter Wert wird bestimmt, auf welche Iteration der Schleife die <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> -Methode aufgerufen wird.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source>As the output from the example shows, no iterations execute after the call to the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method.</source>
          <target state="translated">Wie die Ausgabe des Beispiels zeigt, keine Iterationen ausgeführt wird, nachdem der Aufruf der <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source>Because iterations of the loop are still likely to be executing when the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method is called, each iteration calls the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> method to check whether another iteration has called the <ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method.</source>
          <target state="translated">Da Iterationen der Schleife, die wahrscheinlich weiterhin ausgeführt wird, wenn sind die <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> -Methode aufgerufen wird, werden Aufrufe von jeder Iteration der <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> -Methode überprüft, ob eine andere Iteration aufgerufen hat die <ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source>If it returns <ph id="ph1">`true`</ph>, the iteration returns immediately.</source>
          <target state="translated">Wenn zurückgegeben <ph id="ph1">`true`</ph>, die Iteration wird sofort zurückgegeben.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source>The <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /&gt;</ph> method was called previously.</source>
          <target state="translated">Die <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /&gt;</ph>-Methode wurde zuvor aufgerufen.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source><ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /&gt;</ph> may not be used in combination by iterations of the same loop.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /&gt;</ph> und <ph id="ph2">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /&gt;</ph> können von Iterationen derselben Schleife nicht in Kombination verwendet werden.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>
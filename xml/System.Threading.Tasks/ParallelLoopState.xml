<Type Name="ParallelLoopState" FullName="System.Threading.Tasks.ParallelLoopState">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9f0237c0ab6a5df247c24cc0cab4d856a2a5ef27" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58690528" /></Metadata><TypeSignature Language="C#" Value="public class ParallelLoopState" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ParallelLoopState extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.ParallelLoopState" />
  <TypeSignature Language="VB.NET" Value="Public Class ParallelLoopState" />
  <TypeSignature Language="C++ CLI" Value="public ref class ParallelLoopState" />
  <TypeSignature Language="F#" Value="type ParallelLoopState = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("ShouldExitCurrentIteration = {ShouldExitCurrentIteration}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="d3fa8-101">Ermöglicht Iterationen von parallelen Schleifen die Interaktion mit anderen Iterationen.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-101">Enables iterations of parallel loops to interact with other iterations.</span></span> <span data-ttu-id="d3fa8-102">Eine Instanz dieser Klasse wird von der <see cref="T:System.Threading.Tasks.Parallel" />-Klasse für jede Schleife bereitgestellt. Sie können keine Instanzen im Code erstellen.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-102">An instance of this class is provided by the <see cref="T:System.Threading.Tasks.Parallel" /> class to each loop; you can not create instances in your code.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3fa8-103">Beachten Sie, dass Sie eine Instanz dieser Klasse nicht instanziieren können.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-103">Note that you cannot instantiate an instance of this class.</span></span> <span data-ttu-id="d3fa8-104">Sie wird automatisch vom Compiler generiert, als Argument in einem Aufruf der <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> oder <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> Methode.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-104">It is automatically generated by the compiler as an argument in a call to the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> or <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="d3fa8-105">Dies wird im Beispiel veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-105">The example provides an illustration.</span></span>  
  
 <span data-ttu-id="d3fa8-106">Konstrukte wie `for` und `foreach` (in c#) und `For` und `For Each` (in Visual Basic) sequenziell aus dem niedrigsten Index bis zur höchsten oder Ausführen des ersten Objekts in einem Satz mit dem letzten.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-106">Constructs such as `for` and `foreach` (in C#) and `For` and `For Each` (in Visual Basic) execute sequentially from the lowest index to the highest or from the first object in a set to the last.</span></span> <span data-ttu-id="d3fa8-107">Im Gegensatz dazu die <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> und <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> Methoden nicht.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-107">In contrast, the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> and <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> methods do not.</span></span> <span data-ttu-id="d3fa8-108">Da der einzelnen Iterationen der Schleife parallel ausgeführt werden, können sie beginnen und enden, die in beliebiger Reihenfolge.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-108">Because individual iterations of the loop run in parallel, they can begin and end in any order.</span></span> <span data-ttu-id="d3fa8-109">Die <xref:System.Threading.Tasks.ParallelLoopState> Klasse ermöglicht, einzelne Iterationen von parallelen Schleifen miteinander interagieren.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-109">The <xref:System.Threading.Tasks.ParallelLoopState> class allows individual iterations of parallel loops to interact with one another.</span></span> <span data-ttu-id="d3fa8-110">Die <xref:System.Threading.Tasks.ParallelLoopState> Klasse können Sie:</span><span class="sxs-lookup"><span data-stu-id="d3fa8-110">The <xref:System.Threading.Tasks.ParallelLoopState> class allows you to:</span></span>  
  
-   <span data-ttu-id="d3fa8-111">Die aktuelle Iteration zu beenden und zu verhindern, dass zusätzlichen Iterationen starten durch Aufrufen der <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-111">Exit the current iteration and prevent any additional iterations from starting by calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="d3fa8-112">Dies betrifft nicht Iterationen, die bereits die Ausführung gestartet wurde.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-112">This does not affect iterations that have already begun execution.</span></span>  
  
-   <span data-ttu-id="d3fa8-113">Verhindert, dass alle Iterationen mit einem Index, der größer als der aktuelle Index ausgeführt wird, durch den Aufruf der <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-113">Prevent any iterations with an index greater than the current index from executing by calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="d3fa8-114">Dies betrifft nicht Iterationen, die bereits die Ausführung gestartet wurde.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-114">This does not affect iterations that have already begun execution.</span></span>  
  
-   <span data-ttu-id="d3fa8-115">Bestimmen, ob eine Ausnahme in jeder Schleifeniteration aufgetreten ist, durch Abrufen des Werts der <xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-115">Determine whether an exception has occurred in any loop iteration by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A> property.</span></span>  
  
-   <span data-ttu-id="d3fa8-116">Zu bestimmen, ob es sich bei jeder Iteration der Schleife aufgerufen hat die <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> Methode durch Abrufen des Werts der <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-116">Determine whether any iteration of the loop has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property.</span></span> <span data-ttu-id="d3fa8-117">Sie können diese Eigenschaft von Iterationen der Schleife zurückgeben, die vor dem Aufruf von gestartet der <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> Methode aber immer noch ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-117">You can use this property to return from iterations of the loop that started before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method but are still executing.</span></span>  
  
-   <span data-ttu-id="d3fa8-118">Zu bestimmen, ob es sich bei jeder Iteration der Schleife aufgerufen hat die <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> oder <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> Methode oder eine Ausnahme ausgelöst wurde, durch Abrufen des Werts der <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-118">Determine whether any iteration of the loop has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> or <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method or has thrown an exception by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property.</span></span>  
  
-   <span data-ttu-id="d3fa8-119">Beenden einer lang andauernden Iteration, dessen Index größer als der Index einer Iteration in der Break aufgerufen wurde ist, durch Abrufen des Werts von, der <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-119">Exit from a long-running iteration whose index is greater than the index of an iteration in which Break was called by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d3fa8-120">Im folgende Beispiel wird bis zu 100 Iterationen einer Schleife parallel ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-120">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="d3fa8-121">Jede Iteration hält für einen zufälligen Intervallen von 1 auf 1000 Millisekunden.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-121">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="d3fa8-122">Ein zufällig generierter Wert wird bestimmt, auf die Iteration der Schleife die <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> Methode wird aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-122">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="d3fa8-123">Wie die Ausgabe des Beispiels zeigt, die keine Iterationen, deren Index größer als ist, die <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> Anfang des Wertes Eigenschaft nach dem Aufruf der <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-123">As the output from the example shows, no iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value start after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="d3fa8-124">Da Iterationen der Schleife wahrscheinlich weiterhin ausgeführt wird, wenn sind die <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> -Methode aufgerufen wird, ruft jede Iteration der <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> Eigenschaft zu überprüfen, ob eine andere Iteration aufgerufen hat die <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-124">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="d3fa8-125">Wenn der Eigenschaftswert ist `true`, die Iteration überprüft den Wert des der <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> Eigenschaft und, wenn er größer als die aktuelle Iteration Indexwert ist, wird sofort zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-125">If  the property value is `true`, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="d3fa8-126">Ein <see cref="T:System.Threading.Tasks.ParallelLoopState" /> Instanz sollte nur im Text der Schleife verwendet werden, der eine Instanz bereitgestellt wurde.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-126">A <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance is meant to be used only within the body of the loop to which an instance was provided.</span></span>  <span data-ttu-id="d3fa8-127">Es ist nicht sicher ist, verwenden Sie eine bereitgestellte <see cref="T:System.Threading.Tasks.ParallelLoopState" /> Instanz nach der zugeordneten Schleife beendet wird, noch ist es sicher ist, übergeben es explizit, für andere Threads und festlegen, dass diese Threads zu einem beliebigen Zeitpunkt auf diese zugreifen.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-127">It is not safe to use a provided <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance after the associated loop ends, nor is it safe to explicitly hand it off to other threads and have those threads access it at any time.</span></span>  <span data-ttu-id="d3fa8-128">Eine andere <see cref="T:System.Threading.Tasks.ParallelLoopState" /> Instanz wird für jeden Thread eine Schleife beteiligt bereitgestellt werden.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-128">A different <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance will be provided to each thread involved in a loop.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="d3fa8-129">Datenparallelität (Task Parallel Library)</span><span class="sxs-lookup"><span data-stu-id="d3fa8-129">Data Parallelism (Task Parallel Library)</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public void Break ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Break() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Break" />
      <MemberSignature Language="VB.NET" Value="Public Sub Break ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Break();" />
      <MemberSignature Language="F#" Value="member this.Break : unit -&gt; unit" Usage="parallelLoopState.Break " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d3fa8-130">Gibt an, dass die <see cref="T:System.Threading.Tasks.Parallel" />-Schleife die Ausführung von Iterationen nach der aktuellen Iteration beenden soll, sobald dies dem System möglich ist.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-130">Communicates that the <see cref="T:System.Threading.Tasks.Parallel" /> loop should cease execution of iterations beyond the current iteration at the system's earliest convenience.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3fa8-131"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> Gibt an, dass keine Iterationen nach der aktuellen Iteration ausgeführt werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-131"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> indicates that no iterations after the current iteration should be run.</span></span> <span data-ttu-id="d3fa8-132">Jede zusätzlichen Iterationen der Schleife effektiv abgebrochen.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-132">It effectively cancels any additional iterations of the loop.</span></span> <span data-ttu-id="d3fa8-133">Es wird jedoch keine Iterationen beendet, die bereits die Ausführung gestartet wurde.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-133">However, it does not stop any iterations that have already begun execution.</span></span> <span data-ttu-id="d3fa8-134">Z. B. wenn <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> wird aufgerufen, von der 100. Iteration einer parallelen Schleife durchlaufen von 0 auf 1.000 alle Iterationen kleiner als 100 sollte weiterhin ausgeführt, aber die Iterationen von 101 bis 1000, die noch nicht gestartet werden, nicht ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-134">For example, if <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is called from the 100th iteration of a parallel loop iterating from 0 to 1,000, all iterations less than 100 should still be run, but the iterations from 101 through to 1000 that have not yet started are not executed.</span></span>  
  
 <span data-ttu-id="d3fa8-135">Für lang andauernde Iterationen, die bereits ausgeführt werden können, <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> legt die <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> Eigenschaft, um die aktuelle Iteration Index für der aktuelle Index kleiner als der aktuelle Wert der <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-135">For long-running iterations that may already be executing, <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> sets the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property to the current iteration's index if the current index is less than the current value of <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>.</span></span> <span data-ttu-id="d3fa8-136">Um Iterationen zu beenden, dessen Index größer als die niedrigste Iteration der Unterbrechung von konkurrierenden Ausführung ist, sollten Sie Folgendes tun:</span><span class="sxs-lookup"><span data-stu-id="d3fa8-136">To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:</span></span>  
  
1.  <span data-ttu-id="d3fa8-137">Überprüfen Sie, ob die <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> Eigenschaft `true`.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-137">Check whether the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is `true`.</span></span>  
  
2.  <span data-ttu-id="d3fa8-138">Aus der Iteration zu beenden, wenn der Index größer ist die <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> -Eigenschaftswert.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-138">Exit from the iteration if its index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value.</span></span>  
  
 <span data-ttu-id="d3fa8-139">Dies wird im Beispiel veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-139">The example provides an illustration.</span></span>  
  
 <span data-ttu-id="d3fa8-140"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> wird in der Regel in Algorithmen verwendet, in denen eine Sortierung, die in der Datenquelle vorhanden ist.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-140"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is typically employed in search-based algorithms where an ordering is present in the data source.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d3fa8-141">Im folgende Beispiel wird bis zu 100 Iterationen einer Schleife parallel ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-141">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="d3fa8-142">Jede Iteration hält für einen zufälligen Intervallen von 1 auf 1000 Millisekunden.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-142">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="d3fa8-143">Ein zufällig generierter Wert wird bestimmt, auf die Iteration der Schleife die <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> Methode wird aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-143">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="d3fa8-144">Wie die Ausgabe des Beispiels zeigt, die keine Iterationen, deren Index größer als ist, die <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> Anfang des Wertes Eigenschaft nach dem Aufruf der <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-144">As the output from the example shows, no iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value start after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="d3fa8-145">Da Iterationen der Schleife wahrscheinlich weiterhin ausgeführt wird, wenn sind die <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> -Methode aufgerufen wird, ruft jede Iteration der <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> Eigenschaft zu überprüfen, ob eine andere Iteration aufgerufen hat die <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-145">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="d3fa8-146">Wenn der Eigenschaftswert ist `true`, die Iteration überprüft den Wert des der <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> Eigenschaft und, wenn er größer als die aktuelle Iteration Indexwert ist, wird sofort zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-146">If  the property value is `true`, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3fa8-147">Die <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />-Methode wurde bereits zuvor aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-147">The <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method was previously called.</span></span> <span data-ttu-id="d3fa8-148"><see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> und <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> können von Iterationen derselben Schleife nicht in Kombination verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-148"><see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> and <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> may not be used in combination by iterations of the same loop.</span></span></exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="d3fa8-149">Datenparallelität (Task Parallel Library)</span><span class="sxs-lookup"><span data-stu-id="d3fa8-149">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsExceptional">
      <MemberSignature Language="C#" Value="public bool IsExceptional { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExceptional" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExceptional As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExceptional { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsExceptional : bool" Usage="System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d3fa8-150">Ruft einen Wert ab, der angibt, ob eine Iteration der Schleife eine Ausnahme ausgelöst hat, die nicht durch diese Iteration behandelt wurde.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-150">Gets whether any iteration of the loop has thrown an exception that went unhandled by that iteration.</span></span></summary>
        <value><span data-ttu-id="d3fa8-151"><see langword="true" />, wenn eine nicht behandelte Ausnahme ausgelöst wurde, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-151"><see langword="true" /> if an unhandled exception was thrown; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="d3fa8-152">Datenparallelität (Task Parallel Library)</span><span class="sxs-lookup"><span data-stu-id="d3fa8-152">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsStopped">
      <MemberSignature Language="C#" Value="public bool IsStopped { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStopped" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStopped As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStopped { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStopped : bool" Usage="System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d3fa8-153">Ruft einen Wert ab, der angibt, ob eine Iteration der Schleife die <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />-Methode aufgerufen hat.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-153">Gets whether any iteration of the loop has called the <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method.</span></span></summary>
        <value><span data-ttu-id="d3fa8-154"><see langword="true" />, wenn die Schleife beendet wurde, indem in einer Iteration die <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />-Methode aufgerufen wurde, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-154"><see langword="true" /> if any iteration has stopped the loop by calling the <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3fa8-155">Bei lang andauernden Iterationen der Schleife können Sie den Wert der Abrufen der <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> Eigenschaft um zu bestimmen, ob alle Iterationen der Schleife, die die Ausführung vor dem Aufruf gestartet hat die <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> Methode weiterhin ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-155">For long-running iterations of the loop, you can retrieve the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to determine whether any iterations of the loop that began execution before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method are still executing.</span></span> <span data-ttu-id="d3fa8-156">Anschließend können Sie den Wert des der <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> Eigenschaft, um zu bestimmen, ob sie sofort zurückgegeben oder normal ausgeführt werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-156">You can then use the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to determine whether they should return immediately or execute normally.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d3fa8-157">Im folgende Beispiel wird bis zu 10.000 Iterationen einer Schleife parallel ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-157">The following example executes up to 10,000 iterations of a loop in parallel.</span></span> <span data-ttu-id="d3fa8-158">Jede Iteration hält für einen zufälligen Intervallen von 1 auf 1000 Millisekunden.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-158">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="d3fa8-159">Ein zufällig generierter Wert wird bestimmt, auf die Iteration der Schleife die <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> Methode wird aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-159">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called.</span></span> <span data-ttu-id="d3fa8-160">Da Iterationen der Schleife wahrscheinlich weiterhin ausgeführt wird, wenn sind die <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> -Methode aufgerufen wird, ruft die Lambda-Ausdruck die <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> -Methode überprüft, ob eine andere Iteration aufgerufen hat die <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-160">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called, the lambda expression calls the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="d3fa8-161">Wenn sie zurückgibt `true`, die Iteration wird sofort zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-161">If it returns `true`, the iteration returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="d3fa8-162">Datenparallelität (Task Parallel Library)</span><span class="sxs-lookup"><span data-stu-id="d3fa8-162">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LowestBreakIteration">
      <MemberSignature Language="C#" Value="public Nullable&lt;long&gt; LowestBreakIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int64&gt; LowestBreakIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LowestBreakIteration As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;long&gt; LowestBreakIteration { Nullable&lt;long&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.LowestBreakIteration : Nullable&lt;int64&gt;" Usage="System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d3fa8-163">Ruft die niedrigste Iteration der Schleife ab, von der <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> aufgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-163">Gets the lowest iteration of the loop from which <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> was called.</span></span></summary>
        <value><span data-ttu-id="d3fa8-164">Die niedrigste Iteration, aus der <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> aufgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-164">The lowest iteration from which <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> was called.</span></span> <span data-ttu-id="d3fa8-165">Bei einer <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" />-Schleife basiert der Wert auf einem intern generierten Index.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-165">In the case of a <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" /> loop, the value is based on an internally-generated index.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3fa8-166">Es ist möglich, dass mehrere Iterationen einer parallelen Schleife zum Aufrufen der <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-166">It is possible for multiple iterations of a parallel loop to call the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="d3fa8-167">Wenn dies der Fall ist, wird dieser Wert ist der kleinste Index einer Iteration, die aufgerufen <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-167">If they do, this value is the smallest index of an iteration that called <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.</span></span> <span data-ttu-id="d3fa8-168">Wenn keine Iteration der Schleife aufgerufen <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, gibt diese Eigenschaft `null`.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-168">If no iteration of the loop called <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, this property returns `null`.</span></span> <span data-ttu-id="d3fa8-169">Beachten Sie, dass der Eigenschaftswert nicht betroffen von Aufrufen an die <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-169">Note that the property value is unaffected by calls to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span>  
  
 <span data-ttu-id="d3fa8-170">In lang andauernden Iterationen in der alle Iterationen nach der Iteration, die Aufrufe der <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> Methode muss nicht ausgeführt werden, die <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> Eigenschaft wird verwendet, um Iterationen zu beenden, die die Ausführung vor dem Aufruf gestartet hat die <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-170">In long-running iterations in which all iterations after the iteration that calls the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method need not run, the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property is used to terminate iterations that began execution before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="d3fa8-171">Um Iterationen zu beenden, dessen Index größer als die niedrigste Iteration der Unterbrechung von konkurrierenden Ausführung ist, sollten Sie Folgendes tun:</span><span class="sxs-lookup"><span data-stu-id="d3fa8-171">To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:</span></span>  
  
1.  <span data-ttu-id="d3fa8-172">Überprüfen Sie, ob die <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> Eigenschaft `true`.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-172">Check whether the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is `true`.</span></span>  
  
2.  <span data-ttu-id="d3fa8-173">Aus der Iteration zu beenden, wenn der Index größer ist die <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> -Eigenschaftswert.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-173">Exit from the iteration if its index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value.</span></span>  
  
 <span data-ttu-id="d3fa8-174">Dies wird im Beispiel veranschaulicht.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-174">The example provides an illustration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d3fa8-175">Im folgende Beispiel wird bis zu 100 Iterationen einer Schleife parallel ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-175">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="d3fa8-176">Jede Iteration hält für einen zufälligen Intervallen von 1 auf 1000 Millisekunden.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-176">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="d3fa8-177">Ein zufällig generierter Wert wird bestimmt, auf die Iteration der Schleife die <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> Methode wird aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-177">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="d3fa8-178">Dies verhindert, dass Iterationen, deren Index größer als ist, die <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> Eigenschaftswert ab, nach dem Aufruf von der <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> -Methode, sondern wirkt sich keine Iterationen, deren Ausführung bereits gestartet wurde.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-178">This prevents iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value from starting after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method, but it does not affect any iterations that have already begun executing.</span></span> <span data-ttu-id="d3fa8-179">Um diese abgeschlossen zu verhindern, ruft jede Iteration der <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> -Methode überprüft, ob eine andere Iteration aufgerufen hat die <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-179">To prevent these from completing, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="d3fa8-180">Wenn Sie also den Wert der von die Iteration überprüft die <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> Eigenschaft und, wenn er größer als die aktuelle Iteration Indexwert ist, wird sofort zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-180">If so, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="d3fa8-181">Beachten Sie, dass, weil die <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> Wert außerhalb des gültigen Bereichs außerhalb der parallelen Schleife ist, müssen Sie sie zuweisen, um eine Variable, die außerhalb der Schleife sichtbar ist, wenn den Wert beibehalten werden sollen.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-181">Note that, because the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> value is out of scope outside of the parallel loop, you must assign it to a variable that is visible outside of the loop if you want to preserve its value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="d3fa8-182">Datenparallelität (Task Parallel Library)</span><span class="sxs-lookup"><span data-stu-id="d3fa8-182">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ShouldExitCurrentIteration">
      <MemberSignature Language="C#" Value="public bool ShouldExitCurrentIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldExitCurrentIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ShouldExitCurrentIteration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShouldExitCurrentIteration { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ShouldExitCurrentIteration : bool" Usage="System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d3fa8-183">Ruft einen Wert ab, der angibt, ob die aktuelle Iteration der Schleife basierend auf Anforderungen dieser oder anderer Iterationen beendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-183">Gets whether the current iteration of the loop should exit based on requests made by this or other iterations.</span></span></summary>
        <value><span data-ttu-id="d3fa8-184"><see langword="true" />, wenn die aktuelle Iteration beendet werden soll, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-184"><see langword="true" /> if the current iteration should exit; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3fa8-185">Die <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> -Eigenschaftensatz auf `true` unter einer der folgenden Bedingungen:</span><span class="sxs-lookup"><span data-stu-id="d3fa8-185">The <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is set to `true` under any of the following conditions:</span></span>  
  
-   <span data-ttu-id="d3fa8-186">Eine Iteration der Schleife Aufrufe <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> oder <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-186">An iteration of the loop calls <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> or <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>.</span></span>  
  
-   <span data-ttu-id="d3fa8-187">Eine Iteration der Schleife eine Ausnahme ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-187">An iteration of the loop throws an exception.</span></span>  
  
-   <span data-ttu-id="d3fa8-188">Die Schleife wird abgebrochen.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-188">The loop is canceled.</span></span>  
  
 <span data-ttu-id="d3fa8-189">Wenn diese Eigenschaft ist `true`, <xref:System.Threading.Tasks.Parallel> Klasse versucht nämlich proaktiv zu verhindern, dass zusätzliche Iterationen der Schleife Ausführung wird gestartet.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-189">When this property is `true`, the <xref:System.Threading.Tasks.Parallel> class will proactively attempt to prohibit additional iterations of the loop from starting execution.</span></span> <span data-ttu-id="d3fa8-190">Allerdings gibt es möglicherweise Fälle, in dem sie zu verhindern, dass zusätzliche Iterationen starten kann.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-190">However, there may be cases where it is unable to prevent additional iterations from starting.</span></span>  
  
 <span data-ttu-id="d3fa8-191">Es kann auch der Fall sein, dass eine Iteration langer Ausführung bereits begonnen hat.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-191">It may also be the case that a long-running iteration has already begun execution.</span></span> <span data-ttu-id="d3fa8-192">In solchen Fällen Iterationen können explizit überprüfen die <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> -Eigenschaft und die Ausführung beenden, wenn die Eigenschaft zurückgibt `true`.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-192">In such cases, iterations may explicitly check the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property and cease execution if the property returns `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d3fa8-193">Im folgende Beispiel wird bis zu 100 Iterationen einer Schleife parallel ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-193">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="d3fa8-194">Jede Iteration hält für einen zufälligen Intervallen von 1 auf 1000 Millisekunden.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-194">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="d3fa8-195">Ein zufällig generierter Wert wird bestimmt, auf die Iteration der Schleife die <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> Methode wird aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-195">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="d3fa8-196">Dies verhindert, dass Iterationen, deren Index größer als ist, die <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> Eigenschaftswert ab, nach dem Aufruf von der <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> -Methode, sondern wirkt sich keine Iterationen, deren Ausführung bereits gestartet wurde.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-196">This prevents iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value from starting after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method, but it does not affect any iterations that have already begun executing.</span></span> <span data-ttu-id="d3fa8-197">Um diese abgeschlossen zu verhindern, ruft jede Iteration der <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> -Methode überprüft, ob eine andere Iteration aufgerufen hat die <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-197">To prevent these from completing, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="d3fa8-198">Wenn Sie also den Wert der von die Iteration überprüft die <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> Eigenschaft und, wenn er größer als die aktuelle Iteration Indexwert ist, wird sofort zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-198">If so, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="d3fa8-199">Datenparallelität (Task Parallel Library)</span><span class="sxs-lookup"><span data-stu-id="d3fa8-199">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="parallelLoopState.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d3fa8-200">Gibt an, dass die <see cref="T:System.Threading.Tasks.Parallel" />-Schleife die Ausführung beenden soll, sobald es dem System möglich ist.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-200">Communicates that the <see cref="T:System.Threading.Tasks.Parallel" /> loop should cease execution at the system's earliest convenience.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3fa8-201">Aufrufen der <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> -Methode gibt an, dass alle Iterationen der Schleife, die noch nicht gestartet wurden, nicht ausgeführt werden müssen.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-201">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method indicates that any iterations of the loop that have not yet started need not be run.</span></span> <span data-ttu-id="d3fa8-202">Jede zusätzlichen Iterationen der Schleife effektiv abgebrochen.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-202">It effectively cancels any additional iterations of the loop.</span></span> <span data-ttu-id="d3fa8-203">Es wird jedoch keine Iterationen beendet, die bereits die Ausführung gestartet wurde.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-203">However, it does not stop any iterations that have already begun execution.</span></span>  
  
 <span data-ttu-id="d3fa8-204">Aufrufen der <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> Methode bewirkt, dass die <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> zurückzugebende Eigenschaft `true` für jede Iteration der Schleife, die noch ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-204">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method causes the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to return `true` for any iteration of the loop that is still executing.</span></span> <span data-ttu-id="d3fa8-205">Dies ist besonders nützlich für lang andauernde Iterationen, die prüft, können die <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> -Eigenschaft, und beenden, die einem frühen Zeitpunkt an, wenn der Wert ist `true`.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-205">This is particularly useful for long-running iterations, which can check the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property and exit early if its value is `true`.</span></span>  
  
 <span data-ttu-id="d3fa8-206"><xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> ist in Algorithmen, in der Regel verwendet, in denen nach der ein Ergebnis gefunden wurde, sind keine anderen Iterationen ausgeführt werden müssen.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-206"><xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> is typically employed in search-based algorithms, where once a result is found, no other iterations need be executed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d3fa8-207">Im folgende Beispiel wird bis zu 10.000 Iterationen einer Schleife parallel ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-207">The following example executes up to 10,000 iterations of a loop in parallel.</span></span> <span data-ttu-id="d3fa8-208">Jede Iteration hält für einen zufälligen Intervallen von 1 auf 1000 Millisekunden.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-208">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="d3fa8-209">Ein zufällig generierter Wert wird bestimmt, auf die Iteration der Schleife die <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> Methode wird aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-209">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called.</span></span> <span data-ttu-id="d3fa8-210">Wie die Ausgabe des Beispiels zeigt, führen Sie keine Iterationen nach dem Aufruf der <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-210">As the output from the example shows, no iterations execute after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 <span data-ttu-id="d3fa8-211">Da Iterationen der Schleife wahrscheinlich weiterhin ausgeführt wird, wenn sind die <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> -Methode aufgerufen wird, ruft jede Iteration der <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> -Methode überprüft, ob eine andere Iteration aufgerufen hat die <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-211">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="d3fa8-212">Wenn sie zurückgibt `true`, die Iteration wird sofort zurückgegeben.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-212">If it returns `true`, the iteration returns immediately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d3fa8-213">Die <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" />-Methode wurde zuvor aufgerufen.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-213">The <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> method was called previously.</span></span> <span data-ttu-id="d3fa8-214"><see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> und <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> können von Iterationen derselben Schleife nicht in Kombination verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="d3fa8-214"><see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> and <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> may not be used in combination by iterations of the same loop.</span></span></exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="d3fa8-215">Datenparallelität (Task Parallel Library)</span><span class="sxs-lookup"><span data-stu-id="d3fa8-215">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
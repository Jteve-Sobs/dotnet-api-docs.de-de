<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="TaskFactory`1.xml" source-language="en-US" target-language="de-DE">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5ac256f08add3803f1dba5244ff8fa5e37774f807.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ac256f08add3803f1dba5244ff8fa5e37774f807</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>The return value of the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> objects that the methods of this class create.</source>
          <target state="translated">Der Rückgabewert der <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>-Objekte, die von den Methoden dieser Klasse erstellt werden.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>Provides support for creating and scheduling <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> objects.</source>
          
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>The .NET Framework provides two factories for creating and scheduling tasks:</source>
          <target state="translated">.NET Framework stellt zwei Factorys zum Erstellen und Planen von Aufgaben bereit:</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> class, which creates <ph id="ph2">&lt;xref:System.Threading.Tasks.Task&gt;</ph> and <ph id="ph3">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> objects.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> -Klasse, die erstellt <ph id="ph2">&lt;xref:System.Threading.Tasks.Task&gt;</ph> und <ph id="ph3">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> Objekte.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> class, which creates <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> objects.</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> -Klasse, die erstellt <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> Objekte.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> class allows you to do the following:</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> -Klasse können Sie die folgenden Schritte ausführen:</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>Create a task and start it immediately by calling the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> method.</source>
          <target state="translated">Eine Aufgabe erstellt, und starten Sie ihn sofort durch Aufrufen der <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>You can call the overloads of this method to create and execute a task that requires non-default arguments.</source>
          <target state="translated">Sie können die Überladungen dieser Methode zum Erstellen und Ausführen eines Tasks, das nicht standardmäßigen Argumente erfordert aufrufen.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType&gt;</ph> method provides the easiest way to create a task with default configuration values and start it immediately.</source>
          <target state="translated">Beginnend mit der <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>die <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType&gt;</ph> Methode bietet die einfachste Möglichkeit zum Erstellen einer Aufgabe mit Konfigurationswerte, und starten Sie ihn sofort.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>Create a task that starts when any one of the tasks in an array has completed by calling the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A&gt;</ph> or   <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A&gt;</ph> method.</source>
          <target state="translated">Erstellen Sie eine Aufgabe, die beginnt, wenn eine der Aufgaben in einem Array, durch Aufrufen abgeschlossen wurde der <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A&gt;</ph> oder <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>Create a task that starts when all the tasks in an array have completed by calling the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A&gt;</ph> method.</source>
          <target state="translated">Erstellen Sie eine Aufgabe, die beginnt, wenn alle Aufgaben in einem Array, durch Aufrufen abgeschlossen wurden der <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A&gt;</ph> oder <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>The static <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=nameWithType&gt;</ph> property returns a default <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> object.</source>
          <target state="translated">Die statische <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=nameWithType&gt;</ph> Eigenschaft gibt den Standardwert <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> Objekt.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>You can also call one of the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> class constructors to configure the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> objects that  the <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> class creates.</source>
          <target state="translated">Sie können auch rufen Sie eine der der <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> Klassenkonstruktoren so konfigurieren Sie die <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> Objekte, die <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> Klasse erstellt.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>The following example configures a new <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> object to create tasks that have a specified cancellation token, task creation options, continuation options, and a customized task scheduler.</source>
          <target state="translated">Das folgende Beispiel konfiguriert eine neue <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> Objekt, das Aufgaben zu erstellen, die einem angegebenen Abbruchtoken, Aufgabenerstellungsoptionen Fortsetzungsoptionen und eines benutzerdefinierten Taskplaners verfügen.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>In most cases, you do not have to instantiate a new <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> instance.</source>
          <target state="translated">In den meisten Fällen, Sie müssen keine zum Instanziieren einer neuen <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> Instanz.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>Instead, you can use the static <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=nameWithType&gt;</ph> property, which returns a factory object that uses default values.</source>
          <target state="translated">Stattdessen können Sie die statische <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=nameWithType&gt;</ph> Eigenschaft, die ein Factoryobjekt zurückgibt, die Standardwerte verwendet.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>You can then call its methods to start new tasks or define task continuations.</source>
          <target state="translated">Sie können dann Aufrufen ihrer Methoden zu den neue Aufgaben gestartet oder aufgabenfortsetzungen definieren.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>For an illustration, see the example.</source>
          <target state="translated">Eine Veranschaulichung finden Sie im Beispiel.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>The following example uses the static <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.Factory%2A&gt;</ph> property to make two calls to the <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory%601.StartNew%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Im folgenden Beispiel wird die statische <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.Factory%2A&gt;</ph> Eigenschaft zwei Aufrufe an die <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory%601.StartNew%2A?displayProperty=nameWithType&gt;</ph> Methode.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>The first task returns a string array that is populated with the names of files in the user's MyDocuments directory, while the second returns a string array that is populated with the names of subdirectories of the user's MyDocuments directory.</source>
          <target state="translated">Die erste Aufgabe gibt ein Array von Zeichenfolgen, die mit den Namen der Dateien im Verzeichnis Eigene Dateien des Benutzers, aufgefüllt wird, während das zweite ein Array von Zeichenfolgen zurückgibt, das die Namen von Unterverzeichnissen des Verzeichnisses für die Benutzer eigene Dateien enthält.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>It then calls the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%29?displayProperty=nameWithType&gt;</ph> method, which displays information about the number of files and directories in the arrays returned by the two tasks after they have completed execution.</source>
          <target state="translated">Er ruft dann die <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%29?displayProperty=nameWithType&gt;</ph> -Methode, die zeigt Informationen über die Anzahl von Dateien und Verzeichnissen in den Arrays, die von den beiden Tasks zurückgegeben wird, nachdem sie die Ausführung abgeschlossen ist.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>All public and protected members of <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory`1" /&gt;</ph> are thread-safe and may be used concurrently from multiple threads.</source>
          <target state="translated">Alle öffentlichen und geschützten Member der <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory`1" /&gt;</ph> sind threadsicher und können von mehreren Threads gleichzeitig verwendet werden.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>Initializes a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory`1" /&gt;</ph> instance.</source>
          
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.#ctor">
          <source>Initializes a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory`1" /&gt;</ph> instance with the default configuration.</source>
          
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.#ctor">
          <source>This constructor creates a <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> instance with a default configuration.</source>
          <target state="translated">Dieser Konstruktor erstellt ein <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> Instanz mit einer Standardkonfiguration.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.#ctor">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCreationOptions&gt;</ph> property is initialized to <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCreationOptions.None&gt;</ph>, the <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph> property is initialized to <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskContinuationOptions.None&gt;</ph>, and the <ph id="ph5">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> property is initialized to the current scheduler (see <ph id="ph6">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A&gt;</ph>).</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCreationOptions&gt;</ph> -Eigenschaft wird mit initialisiert <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCreationOptions.None&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph> -Eigenschaft wird mit initialisiert <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskContinuationOptions.None&gt;</ph>, und die <ph id="ph5">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> -Eigenschaft wird auf den aktuellen Planer initialisiert (finden Sie unter <ph id="ph6">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken)">
          <source>The default cancellation token that will be assigned to tasks created by this <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory" /&gt;</ph> unless another cancellation token is explicitly specified when calling the factory methods.</source>
          
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken)">
          <source>Initializes a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory`1" /&gt;</ph> instance with the default configuration.</source>
          
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken)">
          <source>This constructor creates a <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> instance with a default configuration.</source>
          <target state="translated">Dieser Konstruktor erstellt ein <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> Instanz mit einer Standardkonfiguration.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCreationOptions&gt;</ph> property is initialized to <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCreationOptions.None&gt;</ph>, the <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph> property is initialized to <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskContinuationOptions.None&gt;</ph>, and the <ph id="ph5">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> property is initialized to the current scheduler (see <ph id="ph6">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A&gt;</ph>).</source>
          <target state="translated">Die <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCreationOptions&gt;</ph> -Eigenschaft wird mit initialisiert <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCreationOptions.None&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph> -Eigenschaft wird mit initialisiert <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskContinuationOptions.None&gt;</ph>, und die <ph id="ph5">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> -Eigenschaft wird auf den aktuellen Planer initialisiert (finden Sie unter <ph id="ph6">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskScheduler)">
          <source>The scheduler to use to schedule any tasks created with this <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory`1" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskScheduler)">
          <source>A null value indicates that the current <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> should be used.</source>
          
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskScheduler)">
          <source>Initializes a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory`1" /&gt;</ph> instance with the specified configuration.</source>
          
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskScheduler)">
          <source>With this constructor, the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCreationOptions&gt;</ph> property is initialized to <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCreationOptions.None&gt;</ph>, the <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph> property is initialized to <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskContinuationOptions.None&gt;</ph>, and the <ph id="ph5">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> property is initialized to <ph id="ph6">`scheduler`</ph>, unless it's <ph id="ph7">`null`</ph>, in which case the property is initialized to the current scheduler (see <ph id="ph8">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A&gt;</ph>).</source>
          <target state="translated">Mit diesem Konstruktor die <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCreationOptions&gt;</ph> -Eigenschaft wird mit initialisiert <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCreationOptions.None&gt;</ph>, die <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph> -Eigenschaft wird mit initialisiert <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskContinuationOptions.None&gt;</ph>, und die <ph id="ph5">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> -Eigenschaft wird mit initialisiert <ph id="ph6">`scheduler`</ph>, es sei denn, es <ph id="ph7">`null`</ph>in wobei die Eigenschaft auf den aktuellen Planer initialisiert werden (siehe <ph id="ph8">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)">
          <source>The default options to use when creating tasks with this <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory`1" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)">
          <source>The default options to use when creating continuation tasks with this <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory`1" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)">
          <source>Initializes a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory`1" /&gt;</ph> instance with the specified configuration.</source>
          
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)">
          <source>With this constructor, the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCreationOptions&gt;</ph> property is initialized to <ph id="ph2">`creationOptions`</ph>, the <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph> property is initialized to <ph id="ph4">`continuationOptions`</ph>, and the <ph id="ph5">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> property is initialized to the current scheduler (see <ph id="ph6">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A&gt;</ph>).</source>
          <target state="translated">Mit diesem Konstruktor die <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCreationOptions&gt;</ph> -Eigenschaft wird mit initialisiert <ph id="ph2">`creationOptions`</ph>, <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph> -Eigenschaft wird mit initialisiert <ph id="ph4">`continuationOptions`</ph>, und die <ph id="ph5">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> -Eigenschaft wird auf den aktuellen Planer initialisiert (finden Sie unter <ph id="ph6">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)">
          <source><ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> or <ph id="ph2">&lt;paramref name="continuationOptions" /&gt;</ph> specifies an invalid value.</source>
          
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The default cancellation token that will be assigned to tasks created by this <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory" /&gt;</ph> unless another cancellation token is explicitly specified when calling the factory methods.</source>
          
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The default options to use when creating tasks with this <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory`1" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The default options to use when creating continuation tasks with this <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory`1" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The default scheduler to use to schedule any tasks created with this <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory`1" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>A null value indicates that <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.TaskScheduler.Current" /&gt;</ph> should be used.</source>
          
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Initializes a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskFactory`1" /&gt;</ph> instance with the specified configuration.</source>
          
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>With this constructor, the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCreationOptions&gt;</ph> property is initialized to <ph id="ph2">`creationOptions`</ph>, the <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph> property is initialized to <ph id="ph4">`continuationOptions`</ph>, and the <ph id="ph5">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> property is initialized to <ph id="ph6">`scheduler`</ph>, unless it's <ph id="ph7">`null`</ph>, in which case the property is initialized to the current scheduler (see <ph id="ph8">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A&gt;</ph>).</source>
          <target state="translated">Mit diesem Konstruktor die <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCreationOptions&gt;</ph> -Eigenschaft wird mit initialisiert <ph id="ph2">`creationOptions`</ph>, die <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskContinuationOptions&gt;</ph> -Eigenschaft wird mit initialisiert <ph id="ph4">`continuationOptions`</ph>, und die <ph id="ph5">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> -Eigenschaft wird mit initialisiert <ph id="ph6">`scheduler`</ph>, es sei denn, es <ph id="ph7">`null`</ph>in wobei die Eigenschaft auf den aktuellen Planer initialisiert werden (siehe <ph id="ph8">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source><ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> or <ph id="ph2">&lt;paramref name="continuationOptions" /&gt;</ph> specifies an invalid value.</source>
          
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.TaskFactory`1.CancellationToken">
          <source>Gets the default cancellation token for this task factory.</source>
          
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.TaskFactory`1.CancellationToken">
          <source>The default cancellation token for this task factory.</source>
          <target state="translated">Das Standardabbruchtoken für diese Aufgabenfactory.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.TaskFactory`1.CancellationToken">
          <source>This property returns the default cancellation token that will be assigned to all tasks created by this factory unless another cancellation token value is explicitly specified during the call to the task factory methods.</source>
          <target state="translated">Diese Eigenschaft gibt das Standardabbruchtoken, das zugewiesen werden soll, für alle Aufgaben, die von dieser Factory erstellt werden, es sei denn, eine andere Abbruch Tokenwert beim Aufrufen der Factorymethoden Vorgang explizit angegeben wird.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.TaskFactory`1.ContinuationOptions">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph> enumeration value for this task factory.</source>
          
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.TaskFactory`1.ContinuationOptions">
          <source>One of the enumeration values that specifies the default continuation options for this task factory.</source>
          <target state="translated">Einer der Enumerationswerte, die die Standardfortsetzungsoptionen für diese Aufgabenfactory angibt.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.TaskFactory`1.ContinuationOptions">
          <source>This property returns the default continuation options for this factory.</source>
          <target state="translated">Diese Eigenschaft gibt die Standardfortsetzungsoptionen für diese Factory zurück.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.TaskFactory`1.ContinuationOptions">
          <source>They will be used to create all continuation tasks unless other options are explicitly specified during calls to this factory's methods.</source>
          <target state="translated">Sie werden verwendet werden, um alle Fortsetzungsaufgaben zu erstellen, es sei denn, andere Optionen während Aufrufen der Methoden dieser Factory explizit angegeben werden.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>Creates a continuation task that will be started upon the completion of a set of provided tasks.</source>
          
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})">
          <source>The array of tasks from which to continue.</source>
          
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})">
          <source>The function delegate to execute asynchronously when all tasks in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array have completed.</source>
          
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})">
          <source>Creates a continuation task that will be started upon the completion of a set of provided tasks.</source>
          
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})">
          <source>The new continuation task.</source>
          
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})">
          <source>After completion, a task is in one of these states: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> states.</source>
          <target state="translated">Nach Abschluss des Vorgangs ist eine Aufgabe in einem dieser Zustände: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, oder <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> Status.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})">
          <source>One of the elements in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})">
          <source><ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contains a null value or is empty.</source>
          
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)">
          <source>The array of tasks from which to continue.</source>
          
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)">
          <source>The function delegate to execute asynchronously when all tasks in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array have completed.</source>
          
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)">
          <source>The cancellation token that will be assigned to the new continuation task.</source>
          
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)">
          <source>Creates a continuation task that will be started upon the completion of a set of provided tasks.</source>
          
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)">
          <source>The new continuation task.</source>
          
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)">
          <source>After completion, a task is in one of these states: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> states.</source>
          <target state="translated">Nach Abschluss des Vorgangs ist eine Aufgabe in einem dieser Zustände: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, oder <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> Status.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)">
          <source>One of the elements in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> has already been disposed.</source>
          
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contains a null value or is empty.</source>
          
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The array of tasks from which to continue.</source>
          
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The function delegate to execute asynchronously when all tasks in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array have completed.</source>
          
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>One of the enumeration values that controls the behavior of the created continuation task.</source>
          
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The NotOn* or OnlyOn* values are not valid.</source>
          
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>Creates a continuation task that will be started upon the completion of a set of provided Tasks.</source>
          
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The new continuation task.</source>
          
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>After completion, a task is in one of these states: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> states.</source>
          <target state="translated">Nach Abschluss des Vorgangs ist eine Aufgabe in einem dieser Zustände: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, oder <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> Status.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>One of the elements in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> argument specifies an invalid value.</source>
          
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contains a null value or is empty.</source>
          
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The array of tasks from which to continue.</source>
          
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The function delegate to execute asynchronously when all tasks in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array have completed.</source>
          
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The cancellation token that will be assigned to the new continuation task.</source>
          
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>One of the enumeration values that controls the behavior of the created continuation task.</source>
          
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The NotOn* or OnlyOn* values are not valid.</source>
          
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The scheduler that is used to schedule the created continuation task.</source>
          
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Creates a continuation task that will be started upon the completion of a set of provided Tasks.</source>
          
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The new continuation task.</source>
          
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>After completion, a task is in one of these states: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> states.</source>
          <target state="translated">Nach Abschluss des Vorgangs ist eine Aufgabe in einem dieser Zustände: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, oder <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> Status.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contains a null value or is empty.</source>
          
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source><ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> specifies an invalid value.</source>
          
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>One of the elements in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> has already been disposed.</source>
          
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})">
          <source>The type of the result of the antecedent <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Ergebnisses des Vorgängers <bpt id="p1">&lt;c&gt;</bpt>Aufgaben<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})">
          <source>The array of tasks from which to continue.</source>
          
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})">
          <source>The function delegate to execute asynchronously when all tasks in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array have completed.</source>
          
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})">
          <source>Creates a continuation task that will be started upon the completion of a set of provided tasks.</source>
          
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})">
          <source>The new continuation task.</source>
          
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})">
          <source>After completion, a task is in one of these states: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> states.</source>
          <target state="translated">Nach Abschluss des Vorgangs ist eine Aufgabe in einem dieser Zustände: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, oder <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> Status.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})">
          <source>One of the elements in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contains a null value or is empty.</source>
          
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)">
          <source>The type of the result of the antecedent <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Ergebnisses des Vorgängers <bpt id="p1">&lt;c&gt;</bpt>Aufgaben<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)">
          <source>The array of tasks from which to continue.</source>
          
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)">
          <source>The function delegate to execute asynchronously when all tasks in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array have completed.</source>
          
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)">
          <source>The cancellation token that will be assigned to the new continuation task.</source>
          
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)">
          <source>Creates a continuation task that will be started upon the completion of a set of provided tasks.</source>
          
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)">
          <source>The new continuation task.</source>
          
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)">
          <source>After completion, a task is in one of these states: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> states.</source>
          <target state="translated">Nach Abschluss des Vorgangs ist eine Aufgabe in einem dieser Zustände: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, oder <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> Status.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)">
          <source>One of the elements in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> has already been disposed.</source>
          
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contains a null value or is empty.</source>
          
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The type of the result of the antecedent <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Ergebnisses des Vorgängers <bpt id="p1">&lt;c&gt;</bpt>Aufgaben<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The array of tasks from which to continue.</source>
          
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The function delegate to execute asynchronously when all tasks in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array have completed.</source>
          
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>One of the enumeration values that controls the behavior of the created continuation task.</source>
          
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The NotOn* or OnlyOn* values are not valid.</source>
          
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>Creates a continuation task that will be started upon the completion of a set of provided tasks.</source>
          
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The new continuation task.</source>
          
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>After completion, a task is in one of these states: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> states.</source>
          <target state="translated">Nach Abschluss des Vorgangs ist eine Aufgabe in einem dieser Zustände: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, oder <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> Status.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>One of the elements in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> argument specifies an invalid value.</source>
          
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contains a null value or is empty.</source>
          
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The type of the result of the antecedent <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Ergebnisses des Vorgängers <bpt id="p1">&lt;c&gt;</bpt>Aufgaben<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The array of tasks from which to continue.</source>
          
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The function delegate to execute asynchronously when all tasks in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array have completed.</source>
          
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The cancellation token that will be assigned to the new continuation task.</source>
          
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>One of the enumeration values that controls the behavior of the created continuation task.</source>
          
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The NotOn* or OnlyOn* values are not valid.</source>
          
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The scheduler that is used to schedule the created continuation task.</source>
          
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Creates a continuation task that will be started upon the completion of a set of provided tasks.</source>
          
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The new continuation task.</source>
          
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>After completion, a task is in one of these states: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> states.</source>
          <target state="translated">Nach Abschluss des Vorgangs ist eine Aufgabe in einem dieser Zustände: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, oder <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> Status.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contains a null value or is empty.</source>
          
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> argument specifies an invalid value.</source>
          
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>One of the elements in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> has already been disposed.</source>
          
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>Creates a continuation task that will be started upon the completion of any task in the provided set.</source>
          
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})">
          <source>The array of tasks from which to continue when one task completes.</source>
          
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})">
          <source>The function delegate to execute asynchronously when one task in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array completes.</source>
          
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})">
          <source>Creates a continuation task that will be started upon the completion of any task in the provided set.</source>
          
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})">
          <source>The new continuation task.</source>
          
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})">
          <source>After completion, a task is in one of these states: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> states.</source>
          <target state="translated">Nach Abschluss des Vorgangs ist eine Aufgabe in einem dieser Zustände: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, oder <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> Status.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})">
          <source>One of the elements in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contains a null value or is empty.</source>
          
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)">
          <source>The array of tasks from which to continue when one task completes.</source>
          
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)">
          <source>The function delegate to execute asynchronously when one task in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array completes.</source>
          
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)">
          <source>The cancellation token that will be assigned to the new continuation task.</source>
          
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)">
          <source>Creates a continuation task that will be started upon the completion of any task in the provided set.</source>
          
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)">
          <source>The new continuation task.</source>
          
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)">
          <source>After completion, a task is in one of these states: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> states.</source>
          <target state="translated">Nach Abschluss des Vorgangs ist eine Aufgabe in einem dieser Zustände: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, oder <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> Status.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)">
          <source>One of the elements in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> has already been disposed.</source>
          
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is null.</source>
          
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is null.</source>
          
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contains a null value.</source>
          
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is empty.</source>
          
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The array of tasks from which to continue when one task completes.</source>
          
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The function delegate to execute asynchronously when one task in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array completes.</source>
          
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>One of the enumeration values that controls the behavior of the created continuation task.</source>
          
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;see langword="NotOn*" /&gt;</ph> or <ph id="ph2">&lt;see langword="OnlyOn*" /&gt;</ph> values are not valid.</source>
          
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>Creates a continuation task that will be started upon the completion of any task in the provided set.</source>
          
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The new continuation task.</source>
          
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>After completion, a task is in one of these states: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> states.</source>
          <target state="translated">Nach Abschluss des Vorgangs ist eine Aufgabe in einem dieser Zustände: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, oder <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> Status.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>One of the elements in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> argument specifies an invalid enumeration value.</source>
          
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contains a null value.</source>
          
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is empty.</source>
          
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The array of tasks from which to continue when one task completes.</source>
          
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The function delegate to execute asynchronously when one task in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array completes.</source>
          
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The cancellation token that will be assigned to the new continuation task.</source>
          
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>One of the enumeration values that controls the behavior of the created continuation task.</source>
          
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see langword="NotOn*" /&gt;</ph> or <ph id="ph2">&lt;see langword="OnlyOn*" /&gt;</ph> values are not valid.</source>
          
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The task scheduler that is used to schedule the created continuation task.</source>
          
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Creates a continuation task that will be started upon the completion of any task in the provided set.</source>
          
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The new continuation task.</source>
          
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>After completion, a task is in one of these states: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> states.</source>
          <target state="translated">Nach Abschluss des Vorgangs ist eine Aufgabe in einem dieser Zustände: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, oder <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> Status.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contains a null value.</source>
          
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is empty.</source>
          
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> argument specifies an invalid <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph> value.</source>
          
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>One of the elements in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> has already been disposed.</source>
          
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})">
          <source>The type of the result of the antecedent <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Ergebnisses des Vorgängers <bpt id="p1">&lt;c&gt;</bpt>Aufgaben<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})">
          <source>The array of tasks from which to continue when one task completes.</source>
          
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})">
          <source>The function delegate to execute asynchronously when one task in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array completes.</source>
          
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})">
          <source>Creates a continuation task that will be started upon the completion of any task in the provided set.</source>
          
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})">
          <source>The new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})">
          <source>After completion, a task is in one of these states: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> states.</source>
          <target state="translated">Nach Abschluss des Vorgangs ist eine Aufgabe in einem dieser Zustände: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, oder <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> Status.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})">
          <source>One of the elements in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contains a null value.</source>
          
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is empty.</source>
          
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)">
          <source>The type of the result of the antecedent <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Ergebnisses des Vorgängers <bpt id="p1">&lt;c&gt;</bpt>Aufgaben<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)">
          <source>The array of tasks from which to continue when one task completes.</source>
          
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)">
          <source>The function delegate to execute asynchronously when one task in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array completes.</source>
          
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)">
          <source>The cancellation token that will be assigned to the new continuation task.</source>
          
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)">
          <source>Creates a continuation task that will be started upon the completion of any task in the provided set.</source>
          
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)">
          <source>The new continuation task.</source>
          
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)">
          <source>After completion, a task is in one of these states: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> states.</source>
          <target state="translated">Nach Abschluss des Vorgangs ist eine Aufgabe in einem dieser Zustände: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, oder <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> Status.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)">
          <source>One of the elements in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> has already been disposed.</source>
          
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contains a null value.</source>
          
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is empty.</source>
          
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The type of the result of the antecedent <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Ergebnisses des Vorgängers <bpt id="p1">&lt;c&gt;</bpt>Aufgaben<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The array of tasks from which to continue when one task completes.</source>
          
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The function delegate to execute asynchronously when one task in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array completes.</source>
          
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>One of the enumeration values that controls the behavior of the created continuation task.</source>
          
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;see langword="NotOn*" /&gt;</ph> or <ph id="ph2">&lt;see langword="OnlyOn*" /&gt;</ph> values are not valid.</source>
          
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>Creates a continuation task that will be started upon the completion of any task in the provided set.</source>
          
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>After completion, a task is in one of these states: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> states.</source>
          <target state="translated">Nach Abschluss des Vorgangs ist eine Aufgabe in einem dieser Zustände: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, oder <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> Status.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>One of the elements in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> argument specifies an invalid enumeration value.</source>
          
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contains a null value.</source>
          
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is empty.</source>
          
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The type of the result of the antecedent <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Der Typ des Ergebnisses des Vorgängers <bpt id="p1">&lt;c&gt;</bpt>Aufgaben<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The array of tasks from which to continue when one task completes.</source>
          
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The function delegate to execute asynchronously when one task in the <bpt id="p1">&lt;c&gt;</bpt>tasks<ept id="p1">&lt;/c&gt;</ept> array completes.</source>
          
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The cancellation token that will be assigned to the new continuation task.</source>
          
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>One of the enumeration values that controls the behavior of the created continuation task.</source>
          
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see langword="NotOn*" /&gt;</ph> or <ph id="ph2">&lt;see langword="OnlyOn*" /&gt;</ph> values are not valid.</source>
          
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> that is used to schedule the created continuation <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Creates a continuation task that will be started upon the completion of any task in the provided set.</source>
          
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>After completion, a task is in one of these states: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> states.</source>
          <target state="translated">Nach Abschluss des Vorgangs ist eine Aufgabe in einem dieser Zustände: <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, oder <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> Status.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> argument is null.</source>
          
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array contains a null value.</source>
          
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array is empty.</source>
          
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> argument specifies an invalid TaskContinuationOptions value.</source>
          
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>One of the elements in the <ph id="ph1">&lt;paramref name="tasks" /&gt;</ph> array has been disposed.</source>
          
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> has already been disposed.</source>
          
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.TaskFactory`1.CreationOptions">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCreationOptions" /&gt;</ph> enumeration value for this task factory.</source>
          
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.TaskFactory`1.CreationOptions">
          <source>One of the enumeration values that specifies the default creation options for this task factory.</source>
          <target state="translated">Einer der Enumerationswerte, die die Standarderstellungsoptionen für diese Aufgabenfactory angibt.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.TaskFactory`1.CreationOptions">
          <source>This property returns the default creation options for this factory.</source>
          <target state="translated">Diese Eigenschaft gibt die schemaerstellungsoptionen für diese Factory zurück.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.TaskFactory`1.CreationOptions">
          <source>They will be used to create all tasks unless other options are explicitly specified during calls to this factory's methods.</source>
          <target state="translated">Sie werden verwendet werden, um alle Aufgaben zu erstellen, es sei denn, andere Optionen während Aufrufen der Methoden dieser Factory explizit angegeben werden.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>Creates a task instance.</source>
          
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> whose completion should trigger the processing of the <bpt id="p1">&lt;c&gt;</bpt>endMethod<ept id="p1">&lt;/c&gt;</ept>.</source>
          
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})">
          <source>The function delegate that processes the completed <bpt id="p1">&lt;c&gt;</bpt>asyncResult<ept id="p1">&lt;/c&gt;</ept>.</source>
          
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})">
          <source>Creates a task that executes an end method function when a specified <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> completes.</source>
          
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> that represents the asynchronous operation.</source>
          
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})">
          <source>The <ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})">
          <source>The <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)">
          <source>The delegate that begins the asynchronous operation.</source>
          
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)">
          <source>The delegate that ends the asynchronous operation.</source>
          
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)">
          <source>An object containing data to be used by the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)">
          <source>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</source>
          
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)">
          <source>The created task that represents the asynchronous operation.</source>
          
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)">
          <source>This method throws any exceptions thrown by the <ph id="ph1">`beginMethod`</ph>.</source>
          <target state="translated">Diese Methode löst keine Ausnahmen auslöst der <ph id="ph1">`beginMethod`</ph>.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)">
          <source>Exceptions for <ph id="ph1">`endmethod`</ph> are thrown when waiting on the returned task.</source>
          <target state="translated">Ausnahmen für <ph id="ph1">`endmethod`</ph> ausgelöst werden, wenn für die zurückgegebene Aufgabe gewartet wird.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> whose completion should trigger the processing of the <bpt id="p1">&lt;c&gt;</bpt>endMethod<ept id="p1">&lt;/c&gt;</ept>.</source>
          
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)">
          <source>The function delegate that processes the completed <bpt id="p1">&lt;c&gt;</bpt>asyncResult<ept id="p1">&lt;/c&gt;</ept>.</source>
          
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)">
          <source>One of the enumeration values that controls the behavior of the created task.</source>
          
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)">
          <source>Creates a task that executes an end method function when a specified <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> completes.</source>
          
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)">
          <source>A task that represents the asynchronous operation.</source>
          
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> argument specifies an invalid value.</source>
          
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The delegate that begins the asynchronous operation.</source>
          
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The delegate that ends the asynchronous operation.</source>
          
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>An object containing data to be used by the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>One of the enumeration values that controls the behavior of the created task.</source>
          
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</source>
          
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The created <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> that represents the asynchronous operation.</source>
          
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>This method throws any exceptions thrown by the <ph id="ph1">`beginMethod`</ph>.</source>
          <target state="translated">Diese Methode löst keine Ausnahmen auslöst der <ph id="ph1">`beginMethod`</ph>.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>Exceptions for <ph id="ph1">`endmethod`</ph> are thrown when waiting on the returned task.</source>
          <target state="translated">Ausnahmen für <ph id="ph1">`endmethod`</ph> ausgelöst werden, wenn für die zurückgegebene Aufgabe gewartet wird.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> argument specifies an invalid value.</source>
          
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> whose completion should trigger the processing of the <bpt id="p1">&lt;c&gt;</bpt>endMethod<ept id="p1">&lt;/c&gt;</ept>.</source>
          
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The function delegate that processes the completed <bpt id="p1">&lt;c&gt;</bpt>asyncResult<ept id="p1">&lt;/c&gt;</ept>.</source>
          
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>One of the enumeration values that controls the behavior of the created task.</source>
          
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The task scheduler that is used to schedule the task that executes the end method.</source>
          
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Creates a task that executes an end method function when a specified <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> completes.</source>
          
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The created task that represents the asynchronous operation.</source>
          
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> parameter specifies an invalid value.</source>
          
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)">
          <source>The type of the first argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Der Typ des ersten Arguments übergeben wird, um die <bpt id="p1">&lt;c&gt;</bpt>BeginMethod<ept id="p1">&lt;/c&gt;</ept> delegieren.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)">
          <source>The delegate that begins the asynchronous operation.</source>
          
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)">
          <source>The delegate that ends the asynchronous operation.</source>
          
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)">
          <source>The first argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)">
          <source>An object containing data to be used by the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)">
          <source>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</source>
          
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)">
          <source>The created task that represents the asynchronous operation.</source>
          
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)">
          <source>This method throws any exceptions thrown by the <ph id="ph1">`beginMethod`</ph>.</source>
          <target state="translated">Diese Methode löst keine Ausnahmen auslöst der <ph id="ph1">`beginMethod`</ph>.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)">
          <source>Exceptions for <ph id="ph1">`endmethod`</ph> are thrown when waiting on the returned task.</source>
          <target state="translated">Ausnahmen für <ph id="ph1">`endmethod`</ph> ausgelöst werden, wenn für die zurückgegebene Aufgabe gewartet wird.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The type of the first argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Der Typ des ersten Arguments übergeben wird, um die <bpt id="p1">&lt;c&gt;</bpt>BeginMethod<ept id="p1">&lt;/c&gt;</ept> delegieren.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The delegate that begins the asynchronous operation.</source>
          
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The delegate that ends the asynchronous operation.</source>
          
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The first argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>An object containing data to be used by the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>One of the enumeration values that controls the behavior of the created task.</source>
          
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</source>
          
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The created task that represents the asynchronous operation.</source>
          
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>This method throws any exceptions thrown by the <ph id="ph1">`beginMethod`</ph>.</source>
          <target state="translated">Diese Methode löst keine Ausnahmen auslöst der <ph id="ph1">`beginMethod`</ph>.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>Exceptions for <ph id="ph1">`endmethod`</ph> are thrown when waiting on the returned task.</source>
          <target state="translated">Ausnahmen für <ph id="ph1">`endmethod`</ph> ausgelöst werden, wenn für die zurückgegebene Aufgabe gewartet wird.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> parameter specifies an invalid value.</source>
          
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)">
          <source>The type of the second argument passed to <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Der Typ des zweiten Arguments an den <bpt id="p1">&lt;c&gt;</bpt>BeginMethod<ept id="p1">&lt;/c&gt;</ept> delegieren.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)">
          <source>The type of the first argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Der Typ des ersten Arguments übergeben wird, um die <bpt id="p1">&lt;c&gt;</bpt>BeginMethod<ept id="p1">&lt;/c&gt;</ept> delegieren.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)">
          <source>The delegate that begins the asynchronous operation.</source>
          
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)">
          <source>The delegate that ends the asynchronous operation.</source>
          
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)">
          <source>The first argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)">
          <source>The second argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)">
          <source>An object containing data to be used by the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)">
          <source>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</source>
          
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)">
          <source>The created task that represents the asynchronous operation.</source>
          
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)">
          <source>This method throws any exceptions thrown by the <ph id="ph1">`beginMethod`</ph>.</source>
          <target state="translated">Diese Methode löst keine Ausnahmen auslöst der <ph id="ph1">`beginMethod`</ph>.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)">
          <source>Exceptions for <ph id="ph1">`endmethod`</ph> are thrown when waiting on the returned task.</source>
          <target state="translated">Ausnahmen für <ph id="ph1">`endmethod`</ph> ausgelöst werden, wenn für die zurückgegebene Aufgabe gewartet wird.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The type of the second argument passed to <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Der Typ des zweiten Arguments an den <bpt id="p1">&lt;c&gt;</bpt>BeginMethod<ept id="p1">&lt;/c&gt;</ept> delegieren.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The type of the first argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Der Typ des ersten Arguments übergeben wird, um die <bpt id="p1">&lt;c&gt;</bpt>BeginMethod<ept id="p1">&lt;/c&gt;</ept> delegieren.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The delegate that begins the asynchronous operation.</source>
          
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The delegate that ends the asynchronous operation.</source>
          
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The first argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The second argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>An object containing data to be used by the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>An object that controls the behavior of the created <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</source>
          
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The created task that represents the asynchronous operation.</source>
          
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>This method throws any exceptions thrown by the <ph id="ph1">`beginMethod`</ph>.</source>
          <target state="translated">Diese Methode löst keine Ausnahmen auslöst der <ph id="ph1">`beginMethod`</ph>.</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>Exceptions for <ph id="ph1">`endmethod`</ph> are thrown when waiting on the returned task.</source>
          <target state="translated">Ausnahmen für <ph id="ph1">`endmethod`</ph> ausgelöst werden, wenn für die zurückgegebene Aufgabe gewartet wird.</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> parameter specifies an invalid value.</source>
          
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)">
          <source>The type of the second argument passed to <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Der Typ des zweiten Arguments an den <bpt id="p1">&lt;c&gt;</bpt>BeginMethod<ept id="p1">&lt;/c&gt;</ept> delegieren.</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)">
          <source>The type of the third argument passed to <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Der Typ des dritten Arguments an den <bpt id="p1">&lt;c&gt;</bpt>BeginMethod<ept id="p1">&lt;/c&gt;</ept> delegieren.</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)">
          <source>The type of the first argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Der Typ des ersten Arguments übergeben wird, um die <bpt id="p1">&lt;c&gt;</bpt>BeginMethod<ept id="p1">&lt;/c&gt;</ept> delegieren.</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)">
          <source>The delegate that begins the asynchronous operation.</source>
          
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)">
          <source>The delegate that ends the asynchronous operation.</source>
          
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)">
          <source>The first argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)">
          <source>The second argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)">
          <source>The third argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)">
          <source>An object containing data to be used by the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)">
          <source>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</source>
          
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)">
          <source>The created task that represents the asynchronous operation.</source>
          
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)">
          <source>This method throws any exceptions thrown by the <ph id="ph1">`beginMethod`</ph>.</source>
          <target state="translated">Diese Methode löst keine Ausnahmen auslöst der <ph id="ph1">`beginMethod`</ph>.</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)">
          <source>Exceptions for <ph id="ph1">`endmethod`</ph> are thrown when waiting on the returned task.</source>
          <target state="translated">Ausnahmen für <ph id="ph1">`endmethod`</ph> ausgelöst werden, wenn für die zurückgegebene Aufgabe gewartet wird.</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The type of the second argument passed to <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Der Typ des zweiten Arguments an den <bpt id="p1">&lt;c&gt;</bpt>BeginMethod<ept id="p1">&lt;/c&gt;</ept> delegieren.</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The type of the third argument passed to <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Der Typ des dritten Arguments an den <bpt id="p1">&lt;c&gt;</bpt>BeginMethod<ept id="p1">&lt;/c&gt;</ept> delegieren.</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The type of the first argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          <target state="translated">Der Typ des ersten Arguments übergeben wird, um die <bpt id="p1">&lt;c&gt;</bpt>BeginMethod<ept id="p1">&lt;/c&gt;</ept> delegieren.</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The delegate that begins the asynchronous operation.</source>
          
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The delegate that ends the asynchronous operation.</source>
          
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The first argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The second argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The third argument passed to the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>An object containing data to be used by the <bpt id="p1">&lt;c&gt;</bpt>beginMethod<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>An object that controls the behavior of the created task.</source>
          
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</source>
          
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The created task that represents the asynchronous operation.</source>
          
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>This method throws any exceptions thrown by the <ph id="ph1">`beginMethod`</ph>.</source>
          <target state="translated">Diese Methode löst keine Ausnahmen auslöst der <ph id="ph1">`beginMethod`</ph>.</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>Exceptions for <ph id="ph1">`endmethod`</ph> are thrown when waiting on the returned task.</source>
          <target state="translated">Ausnahmen für <ph id="ph1">`endmethod`</ph> ausgelöst werden, wenn für die zurückgegebene Aufgabe gewartet wird.</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="beginMethod" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="endMethod" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> parameter specifies an invalid value.</source>
          
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.TaskFactory`1.Scheduler">
          <source>Gets the task scheduler for this task factory.</source>
          
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.TaskFactory`1.Scheduler">
          <source>The task scheduler for this task factory.</source>
          <target state="translated">Der Aufgabenplaner für diese Aufgabenfactory.</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.TaskFactory`1.Scheduler">
          <source>This property returns the default scheduler for this factory.</source>
          <target state="translated">Der Standardplaner für diese Factory gibt diese Eigenschaft zurück.</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.TaskFactory`1.Scheduler">
          <source>It will be used to schedule all tasks unless another scheduler is explicitly specified during calls to this factory's methods.</source>
          <target state="translated">Es wird verwendet, die alle Aufgaben zu planen, es sei denn, ein anderes Zeitplanungsmodul während Aufrufen der Methoden dieser Factory explizit angegeben wird.</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.TaskFactory`1.Scheduler">
          <source>If this property returns <ph id="ph1">`null`</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A&gt;</ph> will be used.</source>
          <target state="translated">Wenn diese Eigenschaft gibt <ph id="ph1">`null`</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A&gt;</ph> verwendet werden.</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.TaskFactory`1">
          <source>Creates and starts a task.</source>
          
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0})">
          <source>A function delegate that returns the future result to be available through the task.</source>
          
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0})">
          <source>Creates and starts a task.</source>
          
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0})">
          <source>The started task.</source>
          
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0})">
          <source>Calling <ph id="ph1">`StartNew`</ph> is functionally equivalent to creating a task by using one of the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> constructors, and then calling the <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> method to schedule it for execution.</source>
          <target state="translated">Aufrufen von <ph id="ph1">`StartNew`</ph> entspricht funktional dem Erstellen einer Aufgabe mithilfe eines der der <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> Konstruktoren aufrufen und anschließend die <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> Methode, um ihn für die Ausführung planen.</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0})">
          <source>However, unless creation and scheduling must be separated, <ph id="ph1">`StartNew`</ph> is the recommended approach for both simplicity and performance.</source>
          <target state="translated">Jedoch, es sei denn, die Erstellung und Planung getrennt werden müssen, <ph id="ph1">`StartNew`</ph> ist die empfohlene Vorgehensweise für Einfachheit und Leistung.</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0})">
          <source>The <ph id="ph1">&lt;paramref name="function" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)">
          <source>A function delegate that returns the future result to be available through the task.</source>
          
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)">
          <source>An object that contains data to be used by the <bpt id="p1">&lt;c&gt;</bpt>function<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)">
          <source>Creates and starts a task.</source>
          
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)">
          <source>The started task.</source>
          
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)">
          <source>Calling <ph id="ph1">`StartNew`</ph> is functionally equivalent to creating a task by using one of the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> constructors and then calling the <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> method to schedule it for execution.</source>
          <target state="translated">Aufrufen von <ph id="ph1">`StartNew`</ph> entspricht funktional dem Erstellen einer Aufgabe mithilfe eines der der <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> Konstruktoren aufrufen und anschließend die <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> Methode, um ihn für die Ausführung planen.</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)">
          <source>However, unless creation and scheduling must be separated, <ph id="ph1">`StartNew`</ph> is the recommended approach for both simplicity and performance.</source>
          <target state="translated">Jedoch, es sei denn, die Erstellung und Planung getrennt werden müssen, <ph id="ph1">`StartNew`</ph> ist die empfohlene Vorgehensweise für Einfachheit und Leistung.</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="function" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)">
          <source>A function delegate that returns the future result to be available through the task.</source>
          
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)">
          <source>The cancellation token that will be assigned to the new task.</source>
          
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)">
          <source>Creates and starts a task.</source>
          
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)">
          <source>The started task.</source>
          
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)">
          <source>Calling <ph id="ph1">`StartNew`</ph> is functionally equivalent to creating a task by using one of the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> constructors and then calling the <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> method to schedule it for execution.</source>
          <target state="translated">Aufrufen von <ph id="ph1">`StartNew`</ph> entspricht funktional dem Erstellen einer Aufgabe mithilfe eines der der <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> Konstruktoren aufrufen und anschließend die <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> Methode, um ihn für die Ausführung planen.</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)">
          <source>However, unless creation and scheduling must be separated, <ph id="ph1">`StartNew`</ph> is the recommended approach for both simplicity and performance.</source>
          <target state="translated">Jedoch, es sei denn, die Erstellung und Planung getrennt werden müssen, <ph id="ph1">`StartNew`</ph> ist die empfohlene Vorgehensweise für Einfachheit und Leistung.</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)">
          <source>The cancellation token source that created <ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> has already been disposed.</source>
          
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="function" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)">
          <source>A function delegate that returns the future result to be available through the task.</source>
          
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)">
          <source>One of the enumeration values that controls the behavior of the created task.</source>
          
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)">
          <source>Creates and starts a task.</source>
          
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)">
          <source>The started <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)">
          <source>Calling <ph id="ph1">`StartNew`</ph> is functionally equivalent to creating a task by using one of the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> constructors and then calling the <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> method to schedule it for execution.</source>
          <target state="translated">Aufrufen von <ph id="ph1">`StartNew`</ph> entspricht funktional dem Erstellen einer Aufgabe mithilfe eines der der <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> Konstruktoren aufrufen und anschließend die <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> Methode, um ihn für die Ausführung planen.</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)">
          <source>However, unless creation and scheduling must be separated, <ph id="ph1">`StartNew`</ph> is the recommended approach for both simplicity and performance.</source>
          <target state="translated">Jedoch, es sei denn, die Erstellung und Planung getrennt werden müssen, <ph id="ph1">`StartNew`</ph> ist die empfohlene Vorgehensweise für Einfachheit und Leistung.</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="function" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> parameter specifies an invalid value.</source>
          
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)">
          <source>A function delegate that returns the future result to be available through the task.</source>
          
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)">
          <source>An object that contains data to be used by the <bpt id="p1">&lt;c&gt;</bpt>function<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)">
          <source>The cancellation token that will be assigned to the new task.</source>
          
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)">
          <source>Creates and starts a task.</source>
          
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)">
          <source>The started task.</source>
          
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)">
          <source>Calling <ph id="ph1">`StartNew`</ph> is functionally equivalent to creating a task by using one of the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> constructors and then calling the <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> method to schedule it for execution.</source>
          <target state="translated">Aufrufen von <ph id="ph1">`StartNew`</ph> entspricht funktional dem Erstellen einer Aufgabe mithilfe eines der der <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> Konstruktoren aufrufen und anschließend die <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> Methode, um ihn für die Ausführung planen.</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)">
          <source>However, unless creation and scheduling must be separated, <ph id="ph1">`StartNew`</ph> is the recommended approach for both simplicity and performance.</source>
          <target state="translated">Jedoch, es sei denn, die Erstellung und Planung getrennt werden müssen, <ph id="ph1">`StartNew`</ph> ist die empfohlene Vorgehensweise für Einfachheit und Leistung.</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)">
          <source>The cancellation token source that created <ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> has already been disposed.</source>
          
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="function" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>A function delegate that returns the future result to be available through the task.</source>
          
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>An object that contains data to be used by the <bpt id="p1">&lt;c&gt;</bpt>function<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>One of the enumeration values that controls the behavior of the created task.</source>
          
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>Creates and starts a task.</source>
          
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The started task.</source>
          
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>Calling <ph id="ph1">`StartNew`</ph> is functionally equivalent to creating a task by using one of the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> constructors and then calling the <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> method to schedule it for execution.</source>
          <target state="translated">Aufrufen von <ph id="ph1">`StartNew`</ph> entspricht funktional dem Erstellen einer Aufgabe mithilfe eines der der <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> Konstruktoren aufrufen und anschließend die <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> Methode, um ihn für die Ausführung planen.</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>However, unless creation and scheduling must be separated, <ph id="ph1">`StartNew`</ph> is the recommended approach for both simplicity and performance.</source>
          <target state="translated">Jedoch, es sei denn, die Erstellung und Planung getrennt werden müssen, <ph id="ph1">`StartNew`</ph> ist die empfohlene Vorgehensweise für Einfachheit und Leistung.</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="function" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> parameter specifies an invalid value.</source>
          
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>A function delegate that returns the future result to be available through the task.</source>
          
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The cancellation token that will be assigned to the new task.</source>
          
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>One of the enumeration values that controls the behavior of the created task.</source>
          
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The task scheduler that is used to schedule the created task.</source>
          
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Creates and starts a task.</source>
          
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The started task.</source>
          
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Calling <ph id="ph1">`StartNew`</ph> is functionally equivalent to creating a task by using one of the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> constructors and then calling the <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> method to schedule it for execution.</source>
          <target state="translated">Aufrufen von <ph id="ph1">`StartNew`</ph> entspricht funktional dem Erstellen einer Aufgabe mithilfe eines der der <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> Konstruktoren aufrufen und anschließend die <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> Methode, um ihn für die Ausführung planen.</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>However, unless creation and scheduling must be separated, <ph id="ph1">`StartNew`</ph> is the recommended approach for both simplicity and performance.</source>
          <target state="translated">Jedoch, es sei denn, die Erstellung und Planung getrennt werden müssen, <ph id="ph1">`StartNew`</ph> ist die empfohlene Vorgehensweise für Einfachheit und Leistung.</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The cancellation token source that created <ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> has already been disposed.</source>
          
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="function" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> parameter specifies an invalid value.</source>
          
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>A function delegate that returns the future result to be available through the task.</source>
          
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>An object that contains data to be used by the <bpt id="p1">&lt;c&gt;</bpt>function<ept id="p1">&lt;/c&gt;</ept> delegate.</source>
          
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The cancellation token that will be assigned to the new task.</source>
          
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>One of the enumeration values that controls the behavior of the created task.</source>
          
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The task scheduler that is used to schedule the created task.</source>
          
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Creates and starts a task.</source>
          
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The started task.</source>
          
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Calling <ph id="ph1">`StartNew`</ph> is functionally equivalent to creating a task by using one of the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> constructors and then calling the <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> method to schedule it for execution.</source>
          <target state="translated">Aufrufen von <ph id="ph1">`StartNew`</ph> entspricht funktional dem Erstellen einer Aufgabe mithilfe eines der der <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> Konstruktoren aufrufen und anschließend die <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> Methode, um ihn für die Ausführung planen.</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>However, unless creation and scheduling must be separated, <ph id="ph1">`StartNew`</ph> is the recommended approach for both simplicity and performance.</source>
          <target state="translated">Jedoch, es sei denn, die Erstellung und Planung getrennt werden müssen, <ph id="ph1">`StartNew`</ph> ist die empfohlene Vorgehensweise für Einfachheit und Leistung.</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The cancellation token source that created <ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> has already been disposed.</source>
          
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="function" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> parameter specifies an invalid value.</source>
          
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
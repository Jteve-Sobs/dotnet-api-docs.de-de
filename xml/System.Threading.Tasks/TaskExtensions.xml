<Type Name="TaskExtensions" FullName="System.Threading.Tasks.TaskExtensions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1fd1a95cdd79f043a1eaa0688c08f9be47147aa4" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83541769" /></Metadata><TypeSignature Language="C#" Value="public static class TaskExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit TaskExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.TaskExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module TaskExtensions" />
  <TypeSignature Language="C++ CLI" Value="public ref class TaskExtensions abstract sealed" />
  <TypeSignature Language="F#" Value="type TaskExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System.Core" FromVersion="4.0.0.0" To="System.Threading.Tasks" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Threading.Tasks" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt einen Satz mit statischen Methoden (Shared in Visual Basic) für die Arbeit mit bestimmten Arten von <see cref="T:System.Threading.Tasks.Task" />-Instanzen bereit.</summary>
    <remarks>To be added.</remarks>
    <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">Task Parallel Library (TPL)</related>
    <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">Aufgabenbasierte asynchrone Programmierung</related>
    <related type="Article" href="~/docs/standard/parallel-programming/how-to-unwrap-a-nested-task.md">Gewusst wie: Entpacken einer geschachtelten Aufgabe</related>
  </Docs>
  <Members>
    <Member MemberName="Unwrap">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Unwrap (this System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt; task);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Unwrap(class System.Threading.Tasks.Task`1&lt;class System.Threading.Tasks.Task&gt; task) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Unwrap (task As Task(Of Task)) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task ^ Unwrap(System::Threading::Tasks::Task&lt;System::Threading::Tasks::Task ^&gt; ^ task);" />
      <MemberSignature Language="F#" Value="static member Unwrap : System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt; -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.TaskExtensions.Unwrap task" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="task">Die zu entpackende <see langword="Task&lt;Task&gt;" /> (C#) oder <see langword="Task (Of Task)" /> Visual Basic).</param>
        <summary>Erstellt einen <see cref="T:System.Threading.Tasks.Task" /> für Proxys, der den asynchronen Vorgang eines <see cref="M:System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)" /> darstellt.</summary>
        <returns>Eine Aufgabe, die den asynchronen Vorgang des angegebenen <see langword="System.Threading.Tasks.Task(Of Task)" /> darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Es ist oft sinnvoll, eine Aufgabe aus einer <xref:System.Threading.Tasks.Task%601>zurückzugeben, bei der die innere Aufgabe die Arbeit darstellt, die als Teil des äußeren <xref:System.Threading.Tasks.Task%601>ausgeführt wurde. Dies führt jedoch zu einem `Task<Task>` (C#) oder `Task (Of Task)` (Visual Basic), der, wenn er nicht sorgfältig behandelt wird, zu unerwartetem Verhalten führen kann. Entpacken löst dieses Problem, indem eine Proxy Aufgabe erstellt wird, die den gesamten asynchronen Vorgang einer solchen Aufgabe darstellt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird gezeigt, wie eine Aufgabe entpackt wird:  
  
 [!code-csharp[System.Threading.Tasks.TaskExtensions#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.taskextensions/cs/unwrap.cs#01)]
 [!code-vb[System.Threading.Tasks.TaskExtensions#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.taskextensions/vb/unwrap.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="task" />-Argument NULL ist.</exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">Task Parallel Library (TPL)</related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">Aufgabenbasierte asynchrone Programmierung</related>
        <related type="Article" href="~/docs/standard/parallel-programming/how-to-unwrap-a-nested-task.md">Gewusst wie: Entpacken einer geschachtelten Aufgabe</related>
      </Docs>
    </Member>
    <Member MemberName="Unwrap&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; Unwrap&lt;TResult&gt; (this System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; task);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; Unwrap&lt;TResult&gt;(class System.Threading.Tasks.Task`1&lt;class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; task) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Unwrap(Of TResult) (task As Task(Of Task(Of TResult))) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ Unwrap(System::Threading::Tasks::Task&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ task);" />
      <MemberSignature Language="F#" Value="static member Unwrap : System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;'Result&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="System.Threading.Tasks.TaskExtensions.Unwrap task" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="task" Type="System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">Der Typ des Aufgabenergebnisses.</typeparam>
        <param name="task">Die zu entpackende <see langword="Task&lt;Task&lt;T&gt;&gt;" /> (C#) oder <see langword="Task (Of Task(Of T))" /> Visual Basic).</param>
        <summary>Erstellt einen Proxy-<see cref="T:System.Threading.Tasks.Task" />, der den asynchronen Vorgang von einem <see langword="Task&lt;Task&lt;T&gt;&gt;" /> (C#) oder <see langword="Task (Of Task(Of T))" /> (Visual Basic) darstellt.</summary>
        <returns>Ein <see cref="T:System.Threading.Tasks.Task" />, der den asynchronen Vorgang des bereitgestellten <see langword="Task&lt;Task&lt;T&gt;&gt;" /> (C#) oder <see langword="Task (Of Task(Of T))" /> (Visual Basic) darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Es ist oft sinnvoll, eine <xref:System.Threading.Tasks.Task> von einem <xref:System.Threading.Tasks.Task>zurückzugeben, bei dem die innere <xref:System.Threading.Tasks.Task> die Arbeit darstellt, die als Teil des äußeren <xref:System.Threading.Tasks.Task>ausgeführt wird. Dies führt jedoch zu einem `Task<Task<T>>` (C#) oder `Task (Of Task(Of T))` (Visual Basic), der, wenn er nicht sorgfältig behandelt wird, zu unerwartetem Verhalten führen kann. Entpacken löst dieses Problem, indem ein Proxy <xref:System.Threading.Tasks.Task%601> erstellt wird, das den gesamten asynchronen Vorgang eines solchen `Task<Task<T>>`C#() oder `Task (Of Task(Of T))` (Visual Basic) darstellt.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="task" />-Argument NULL ist.</exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">Task Parallel Library (TPL)</related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">Aufgabenbasierte asynchrone Programmierung</related>
        <related type="Article" href="~/docs/standard/parallel-programming/how-to-unwrap-a-nested-task.md">Gewusst wie: Entpacken einer geschachtelten Aufgabe</related>
      </Docs>
    </Member>
  </Members>
</Type>

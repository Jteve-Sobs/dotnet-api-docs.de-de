<Type Name="TaskFactory" FullName="System.Threading.Tasks.TaskFactory">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0840b5646b82fa6e7833718724b56dd16676c685" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52232235" /></Metadata><TypeSignature Language="C#" Value="public class TaskFactory" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TaskFactory extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.TaskFactory" />
  <TypeSignature Language="VB.NET" Value="Public Class TaskFactory" />
  <TypeSignature Language="C++ CLI" Value="public ref class TaskFactory" />
  <TypeSignature Language="F#" Value="type TaskFactory = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="c9d1e-101">Bietet Unterstützung für das Erstellen und Planen von <see cref="T:System.Threading.Tasks.Task" />-Objekten.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-101">Provides support for creating and scheduling <see cref="T:System.Threading.Tasks.Task" /> objects.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9d1e-102">.NET Framework bietet zwei Factorys zum Erstellen und Planen von Aufgaben:</span><span class="sxs-lookup"><span data-stu-id="c9d1e-102">The .NET Framework provides two factories for creating and scheduling tasks:</span></span>  
  
-   <span data-ttu-id="c9d1e-103">Die <xref:System.Threading.Tasks.TaskFactory> -Klasse, die erstellt <xref:System.Threading.Tasks.Task> und <xref:System.Threading.Tasks.Task%601> Objekte.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-103">The <xref:System.Threading.Tasks.TaskFactory> class, which creates <xref:System.Threading.Tasks.Task> and <xref:System.Threading.Tasks.Task%601> objects.</span></span> <span data-ttu-id="c9d1e-104">Sie können die Überladungen dieser Methode zum Erstellen und Ausführen einer Aufgabe, die nicht standardmäßige Argumente erfordert aufrufen.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-104">You can call the overloads of this method to create and execute a task that requires non-default arguments.</span></span>  
  
    > [!WARNING]
    >  <span data-ttu-id="c9d1e-105">Beginnend mit der [!INCLUDE[net_v45](~/includes/net-v45-md.md)], <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> Methode bietet die einfachste Möglichkeit zum Erstellen Sie einer Aufgabe mit den Werten, und starten Sie ihn sofort.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-105">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> method provides the easiest way to create a task with default configuration values and start it immediately.</span></span>  
  
-   <span data-ttu-id="c9d1e-106">Die <xref:System.Threading.Tasks.TaskFactory%601> -Klasse, die erstellt <xref:System.Threading.Tasks.Task%601> Objekte.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-106">The <xref:System.Threading.Tasks.TaskFactory%601> class, which creates <xref:System.Threading.Tasks.Task%601> objects.</span></span>  
  
 <span data-ttu-id="c9d1e-107">Die <xref:System.Threading.Tasks.TaskFactory> Klasse können Sie die folgenden Aktionen ausführen:</span><span class="sxs-lookup"><span data-stu-id="c9d1e-107">The <xref:System.Threading.Tasks.TaskFactory> class allows you to do the following:</span></span>  
  
-   <span data-ttu-id="c9d1e-108">Erstellen Sie eine Aufgabe, und starten Sie ihn sofort durch Aufrufen der <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-108">Create a task and start it immediately by calling the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method.</span></span>  
  
    > [!WARNING]
    >  <span data-ttu-id="c9d1e-109">Beginnend mit der [!INCLUDE[net_v45](~/includes/net-v45-md.md)], <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> Methode bietet die einfachste Möglichkeit zum Erstellen Sie einer Aufgabe mit den Werten, und starten Sie ihn sofort.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-109">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> method provides the easiest way to create a task with default configuration values and start it immediately.</span></span>  
  
-   <span data-ttu-id="c9d1e-110">Erstellen Sie eine Aufgabe, die gestartet wird, wenn eine der Aufgaben in einem Array, durch den Aufruf abgeschlossen wurde der <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-110">Create a task that starts when any one of the tasks in an array has completed by calling the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A> method.</span></span>  
  
-   <span data-ttu-id="c9d1e-111">Erstellen Sie eine Aufgabe, die gestartet wird, wenn alle Aufgaben in einem Array, durch den Aufruf abgeschlossen wurden der <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> Methode.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-111">Create a task that starts when all the tasks in an array have completed by calling the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> method.</span></span>  
  
 <span data-ttu-id="c9d1e-112">Die statische <xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=nameWithType> Eigenschaft gibt den Standardwert <xref:System.Threading.Tasks.TaskFactory%601> Objekt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-112">The static <xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=nameWithType> property returns a default <xref:System.Threading.Tasks.TaskFactory%601> object.</span></span> <span data-ttu-id="c9d1e-113">Können Sie auch eine Aufrufen der <xref:System.Threading.Tasks.TaskFactory> Klassenkonstruktoren so konfigurieren Sie die <xref:System.Threading.Tasks.Task> Objekte, die <xref:System.Threading.Tasks.TaskFactory> -Klasse erstellt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-113">You can also call one of the <xref:System.Threading.Tasks.TaskFactory> class constructors to configure the <xref:System.Threading.Tasks.Task> objects that  the <xref:System.Threading.Tasks.TaskFactory> class creates.</span></span> <span data-ttu-id="c9d1e-114">Im folgenden Beispiel wird ein neues <xref:System.Threading.Tasks.TaskFactory> Objekt, das Aufgaben zu erstellen, die einem angegebenen Abbruchtoken, Aufgabenerstellungsoptionen, Optionen für die Fortsetzung und eines benutzerdefinierten Aufgabenplaners verfügen.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-114">The following example configures a new <xref:System.Threading.Tasks.TaskFactory> object to create tasks that have a specified cancellation token, task creation options, continuation options, and a customized task scheduler.</span></span>  
  
 [!code-csharp[TPL_Factories#1](~/samples/snippets/csharp/VS_Snippets_Misc/tpl_factories/cs/program.cs#1)]
 [!code-vb[TPL_Factories#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/tpl_factories/vb/factories_vb.vb#1)]  
  
 <span data-ttu-id="c9d1e-115">In den meisten Fällen, Sie müssen keine zum Instanziieren einer neuen <xref:System.Threading.Tasks.TaskFactory> Instanz.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-115">In most cases, you do not have to instantiate a new <xref:System.Threading.Tasks.TaskFactory> instance.</span></span> <span data-ttu-id="c9d1e-116">Sie können stattdessen die <xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=nameWithType> -Eigenschaft, die ein Factoryobjekt zurückgibt, die Standardwerte verwendet.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-116">Instead, you can use the <xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=nameWithType> property, which returns a factory object that uses default values.</span></span> <span data-ttu-id="c9d1e-117">Sie können dann ihre Methoden, um neue Vorgänge starten, oder Definieren von aufgabenfortsetzungen aufrufen.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-117">You can then call its methods to start new tasks or define task continuations.</span></span> <span data-ttu-id="c9d1e-118">Eine Veranschaulichung finden Sie im Beispiel.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-118">For an illustration, see the example.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c9d1e-119">Im folgenden Beispiel wird die statische <xref:System.Threading.Tasks.Task.Factory%2A> Eigenschaft zwei Aufrufe an die <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> Methode.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-119">The following example uses the static <xref:System.Threading.Tasks.Task.Factory%2A> property to make two calls to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="c9d1e-120">Die erste füllt ein Array mit den Namen der Dateien im Verzeichnis Eigene Dateien des Benutzers, während das zweite ein Array mit den Namen der Unterverzeichnisse des MyDocuments-Verzeichnis des Benutzers aufgefüllt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-120">The first populates an array with the names of files in the user's MyDocuments directory, while the second populates an array with the names of subdirectories of the user's MyDocuments directory.</span></span> <span data-ttu-id="c9d1e-121">Es ruft dann die <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%29?displayProperty=nameWithType> -Methode, die Informationen über die Anzahl von Dateien und Verzeichnissen in die beiden Arrays angezeigt, nachdem die ersten beiden Aufgaben ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-121">It then calls the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%29?displayProperty=nameWithType> method, which displays information about the number of files and directories in the two arrays after the first two tasks have completed execution.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Factory#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.factory/cs/factory1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Factory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.factory/vb/factory1.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="c9d1e-122">Alle öffentlichen und geschützten Member der <see cref="T:System.Threading.Tasks.TaskFactory" /> sind threadsicher und können von mehreren Threads gleichzeitig verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-122">All public and protected members of <see cref="T:System.Threading.Tasks.TaskFactory" /> are thread-safe and may be used concurrently from multiple threads.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-123">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-123">Task Parallel Library (TPL)</span></span></related>
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/Samples-for-Parallel-b4b76364"><span data-ttu-id="c9d1e-124">Beispiele für die parallele Programmierung mit .NET Framework</span><span class="sxs-lookup"><span data-stu-id="c9d1e-124">Samples for Parallel Programming with the .NET Framework</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c9d1e-125">Initialisiert eine neue Instanz der <see cref="T:System.Threading.Tasks.TaskFactory" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-125">Initializes a new instance of the <see cref="T:System.Threading.Tasks.TaskFactory" /> class.</span></span></summary>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-126">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-126">Task Parallel Library (TPL)</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskFactory ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TaskFactory();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c9d1e-127">Initialisiert eine <see cref="T:System.Threading.Tasks.TaskFactory" />-Instanz mit der Standardkonfiguration.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-127">Initializes a <see cref="T:System.Threading.Tasks.TaskFactory" /> instance with the default configuration.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9d1e-128">Dieser Konstruktor erstellt ein <xref:System.Threading.Tasks.TaskFactory> Instanz mit einer Standardkonfiguration.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-128">This constructor creates a <xref:System.Threading.Tasks.TaskFactory> instance with a default configuration.</span></span> <span data-ttu-id="c9d1e-129">Die <xref:System.Threading.Tasks.TaskCreationOptions> Eigenschaft wird initialisiert, um <xref:System.Threading.Tasks.TaskCreationOptions.None>, <xref:System.Threading.Tasks.TaskContinuationOptions> Eigenschaft wird initialisiert, um <xref:System.Threading.Tasks.TaskContinuationOptions.None>, und die <xref:System.Threading.Tasks.TaskScheduler> Eigenschaft mit dem aktuellen Planer initialisiert wird (finden Sie unter <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span><span class="sxs-lookup"><span data-stu-id="c9d1e-129">The <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-130">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-130">Task Parallel Library (TPL)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskFactory (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TaskFactory(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.TaskFactory : System.Threading.CancellationToken -&gt; System.Threading.Tasks.TaskFactory" Usage="new System.Threading.Tasks.TaskFactory cancellationToken" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="c9d1e-131">Das <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />, das Aufgaben zugewiesen wird, die von dieser <see cref="T:System.Threading.Tasks.TaskFactory" /> erstellt wurden, sofern beim Aufrufen der Factorymethoden kein anderes CancellationToken explizit angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-131">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to tasks created by this <see cref="T:System.Threading.Tasks.TaskFactory" /> unless another CancellationToken is explicitly specified while calling the factory methods.</span></span></param>
        <summary><span data-ttu-id="c9d1e-132">Initialisiert eine <see cref="T:System.Threading.Tasks.TaskFactory" />-Instanz mit der angegebenen Konfiguration.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-132">Initializes a <see cref="T:System.Threading.Tasks.TaskFactory" /> instance with the specified configuration.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9d1e-133">Dieser Konstruktor erstellt ein <xref:System.Threading.Tasks.TaskFactory> Instanz mit einer Standardkonfiguration.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-133">This constructor creates a <xref:System.Threading.Tasks.TaskFactory> instance with a default configuration.</span></span> <span data-ttu-id="c9d1e-134">Die <xref:System.Threading.Tasks.TaskCreationOptions> Eigenschaft wird initialisiert, um <xref:System.Threading.Tasks.TaskCreationOptions.None>, <xref:System.Threading.Tasks.TaskContinuationOptions> Eigenschaft wird initialisiert, um <xref:System.Threading.Tasks.TaskContinuationOptions.None>, und die <xref:System.Threading.Tasks.TaskScheduler> Eigenschaft mit dem aktuellen Planer initialisiert wird (finden Sie unter <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span><span class="sxs-lookup"><span data-stu-id="c9d1e-134">The <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-135">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-135">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="c9d1e-136">Abbruch</span><span class="sxs-lookup"><span data-stu-id="c9d1e-136">Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskFactory (System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (scheduler As TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TaskFactory(System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.TaskFactory : System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.TaskFactory" Usage="new System.Threading.Tasks.TaskFactory scheduler" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="scheduler"><span data-ttu-id="c9d1e-137">Der beim Planen von Aufgaben mit dieser TaskFactory zu verwendende <see cref="T:System.Threading.Tasks.TaskScheduler" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-137">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to use to schedule any tasks created with this TaskFactory.</span></span> <span data-ttu-id="c9d1e-138">Ein NULL-Wert gibt an, dass der aktuelle TaskScheduler verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-138">A null value indicates that the current TaskScheduler should be used.</span></span></param>
        <summary><span data-ttu-id="c9d1e-139">Initialisiert eine <see cref="T:System.Threading.Tasks.TaskFactory" />-Instanz mit der angegebenen Konfiguration.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-139">Initializes a <see cref="T:System.Threading.Tasks.TaskFactory" /> instance with the specified configuration.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9d1e-140">Mit diesem Konstruktor die <xref:System.Threading.Tasks.TaskCreationOptions> Eigenschaft wird initialisiert, um <xref:System.Threading.Tasks.TaskCreationOptions.None>, <xref:System.Threading.Tasks.TaskContinuationOptions> Eigenschaft wird initialisiert, um <xref:System.Threading.Tasks.TaskContinuationOptions.None>, und die <xref:System.Threading.Tasks.TaskScheduler> Eigenschaft wird initialisiert, um `scheduler`, es sei denn, sie in diesem Fall null ist die Eigenschaft mit dem aktuellen Planer initialisiert wird (siehe <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span><span class="sxs-lookup"><span data-stu-id="c9d1e-140">With this constructor, the <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to `scheduler`, unless it's null, in which case the property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.Tasks.TaskScheduler" />
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-141">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-141">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-142">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-142">Chaining Tasks by Using Continuation Tasks</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskFactory (System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (creationOptions As TaskCreationOptions, continuationOptions As TaskContinuationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TaskFactory(System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.TaskFactory : System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.TaskFactory" Usage="new System.Threading.Tasks.TaskFactory (creationOptions, continuationOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <param name="creationOptions"><span data-ttu-id="c9d1e-143">Das zum Erstellen von Aufgaben mit dieser TaskFactory zu verwendende Standard-<see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-143">The default <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> to use when creating tasks with this TaskFactory.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="c9d1e-144">Das zum Erstellen von Fortsetzungsaufgaben mit dieser TaskFactory zu verwendende Standard-<see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-144">The default <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> to use when creating continuation tasks with this TaskFactory.</span></span></param>
        <summary><span data-ttu-id="c9d1e-145">Initialisiert eine <see cref="T:System.Threading.Tasks.TaskFactory" />-Instanz mit der angegebenen Konfiguration.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-145">Initializes a <see cref="T:System.Threading.Tasks.TaskFactory" /> instance with the specified configuration.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9d1e-146">Mit diesem Konstruktor die <xref:System.Threading.Tasks.TaskCreationOptions> Eigenschaft wird initialisiert, um `creationOptions`, <xref:System.Threading.Tasks.TaskContinuationOptions> Eigenschaft wird initialisiert, um `continuationOptions`, und die <xref:System.Threading.Tasks.TaskScheduler> Eigenschaft mit dem aktuellen Planer initialisiert wird (finden Sie unter <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span><span class="sxs-lookup"><span data-stu-id="c9d1e-146">With this constructor, the <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to `creationOptions`, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to `continuationOptions`, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c9d1e-147">Das <paramref name="creationOptions" />-Argument gibt einen ungültigen <see cref="T:System.Threading.Tasks.TaskCreationOptions" />-Wert an.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-147">The <paramref name="creationOptions" /> argument specifies an invalid <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> value.</span></span> <span data-ttu-id="c9d1e-148">Weitere Informationen finden Sie in den Hinweisen zu <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-148">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span></span>  
  
<span data-ttu-id="c9d1e-149">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-149">-or-</span></span> 
<span data-ttu-id="c9d1e-150">Das <paramref name="continuationOptions" />-Argument gibt einen ungültigen Wert an.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-150">The <paramref name="continuationOptions" /> argument specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-151">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-151">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-152">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-152">Chaining Tasks by Using Continuation Tasks</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskFactory (System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TaskFactory(System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.TaskFactory : System.Threading.CancellationToken * System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.TaskFactory" Usage="new System.Threading.Tasks.TaskFactory (cancellationToken, creationOptions, continuationOptions, scheduler)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="c9d1e-153">Das standardmäßige <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />, das Aufgaben zugewiesen wird, die von dieser <see cref="T:System.Threading.Tasks.TaskFactory" /> erstellt wurden, sofern beim Aufrufen der Factorymethoden kein anderes CancellationToken explizit angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-153">The default <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to tasks created by this <see cref="T:System.Threading.Tasks.TaskFactory" /> unless another CancellationToken is explicitly specified while calling the factory methods.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="c9d1e-154">Das zum Erstellen von Aufgaben mit dieser TaskFactory zu verwendende Standard-<see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-154">The default <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> to use when creating tasks with this TaskFactory.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="c9d1e-155">Das zum Erstellen von Fortsetzungsaufgaben mit dieser TaskFactory zu verwendende Standard-<see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-155">The default <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> to use when creating continuation tasks with this TaskFactory.</span></span></param>
        <param name="scheduler"><span data-ttu-id="c9d1e-156">Der beim Planen von Aufgaben mit dieser TaskFactory zu verwendende standardmäßige <see cref="T:System.Threading.Tasks.TaskScheduler" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-156">The default <see cref="T:System.Threading.Tasks.TaskScheduler" /> to use to schedule any Tasks created with this TaskFactory.</span></span> <span data-ttu-id="c9d1e-157">Ein NULL-Wert gibt an, dass TaskScheduler.Current verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-157">A null value indicates that TaskScheduler.Current should be used.</span></span></param>
        <summary><span data-ttu-id="c9d1e-158">Initialisiert eine <see cref="T:System.Threading.Tasks.TaskFactory" />-Instanz mit der angegebenen Konfiguration.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-158">Initializes a <see cref="T:System.Threading.Tasks.TaskFactory" /> instance with the specified configuration.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9d1e-159">Mit diesem Konstruktor die <xref:System.Threading.Tasks.TaskCreationOptions> Eigenschaft wird initialisiert, um `creationOptions`, <xref:System.Threading.Tasks.TaskContinuationOptions> Eigenschaft wird initialisiert, um `continuationOptions`, und die <xref:System.Threading.Tasks.TaskScheduler> Eigenschaft wird initialisiert, um `scheduler`, es sei denn, sie in diesem Fall null ist die Eigenschaft mit dem aktuellen Planer initialisiert wird (siehe <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span><span class="sxs-lookup"><span data-stu-id="c9d1e-159">With this constructor, the <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to `creationOptions`, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to `continuationOptions`, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to `scheduler`, unless it's null, in which case the property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c9d1e-160">Das <paramref name="creationOptions" />-Argument gibt einen ungültigen <see cref="T:System.Threading.Tasks.TaskCreationOptions" />-Wert an.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-160">The <paramref name="creationOptions" /> argument specifies an invalid <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> value.</span></span> <span data-ttu-id="c9d1e-161">Weitere Informationen finden Sie in den Hinweisen zu <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-161">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span></span>  
  
<span data-ttu-id="c9d1e-162">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-162">-or-</span></span> 
<span data-ttu-id="c9d1e-163">Das <paramref name="continuationOptions" />-Argument gibt einen ungültigen Wert an.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-163">The <paramref name="continuationOptions" /> argument specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-164">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-164">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-165">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-165">Chaining Tasks by Using Continuation Tasks</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CancellationToken">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationToken CancellationToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.CancellationToken CancellationToken" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.TaskFactory.CancellationToken" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CancellationToken As CancellationToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::CancellationToken CancellationToken { System::Threading::CancellationToken get(); };" />
      <MemberSignature Language="F#" Value="member this.CancellationToken : System.Threading.CancellationToken" Usage="System.Threading.Tasks.TaskFactory.CancellationToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c9d1e-166">Ruft das Standardabbruchtoken für diese Aufgabenfactory ab.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-166">Gets the default cancellation token for this task factory.</span></span></summary>
        <value><span data-ttu-id="c9d1e-167">Das standardmäßige Aufgabenabbruchtoken für diese Aufgabenfactory.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-167">The default task cancellation token for this task factory.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9d1e-168">Diese Eigenschaft-Standardinstanz <xref:System.Threading.CancellationToken> , die für alle Aufgaben, die von dieser Factory erstellten zugewiesen wird, es sei denn, eine andere <xref:System.Threading.CancellationToken> Wert wird während des Aufrufs der Factorymethoden explizit angegeben.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-168">This property returns the default <xref:System.Threading.CancellationToken> that will be assigned to all tasks created by this factory, unless another <xref:System.Threading.CancellationToken> value is explicitly specified during the call to the factory methods.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-169">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-169">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-170">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-170">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c9d1e-171">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="c9d1e-171">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinuationOptions">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.TaskContinuationOptions ContinuationOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.Tasks.TaskContinuationOptions ContinuationOptions" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.TaskFactory.ContinuationOptions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContinuationOptions As TaskContinuationOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::TaskContinuationOptions ContinuationOptions { System::Threading::Tasks::TaskContinuationOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.ContinuationOptions : System.Threading.Tasks.TaskContinuationOptions" Usage="System.Threading.Tasks.TaskFactory.ContinuationOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskContinuationOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c9d1e-172">Ruft die standardmäßigen Aufgabenfortsetzungsoptionen für diese Aufgabenfactory ab.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-172">Gets the default task continuation options for this task factory.</span></span></summary>
        <value><span data-ttu-id="c9d1e-173">Die standardmäßigen Aufgabenfortsetzungsoptionen für diese Aufgabenfactory.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-173">The default task continuation options for this task factory.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9d1e-174">Den Wert der Eigenschaft wird verwendet, alle Fortsetzungsaufgaben, zu erstellen, es sei denn, andere Optionen beim Aufrufen der Methoden dieser Factory explizit angegeben werden.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-174">The property value is used to create all continuation tasks, unless other options are explicitly specified during calls to this factory's methods.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-175">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-175">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-176">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-176">Chaining Tasks by Using Continuation Tasks</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ContinueWhenAll">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c9d1e-177">Erstellt eine Fortsetzungsaufgabe, die beginnt, wenn ein Satz angegebener Aufgaben abgeschlossen wurde.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-177">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/Samples-for-Parallel-b4b76364"><span data-ttu-id="c9d1e-178">Beispiele für die parallele Programmierung mit .NET Framework</span><span class="sxs-lookup"><span data-stu-id="c9d1e-178">Samples for Parallel Programming with the .NET Framework</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ContinueWhenAll">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Action&lt;System.Threading.Tasks.Task[]&gt; continuationAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll(class System.Threading.Tasks.Task[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task[]&gt; continuationAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll (tasks As Task(), continuationAction As Action(Of Task())) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Action&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^&gt; ^ continuationAction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Action&lt;System.Threading.Tasks.Task[]&gt; -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAll (tasks, continuationAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task[]&gt;" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="c9d1e-179">Das Array von Aufgaben, mit denen fortgefahren wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-179">The array of tasks from which to continue.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="c9d1e-180">Der Aktionsdelegat, der ausgeführt werden soll, wenn alle Aufgaben im <paramref name="tasks" />-Array abgeschlossen wurden.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-180">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <summary><span data-ttu-id="c9d1e-181">Erstellt eine Fortsetzungsaufgabe, die beginnt, wenn ein Satz angegebener Aufgaben abgeschlossen wurde.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-181">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-182">Die neue Fortsetzungsaufgabe.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-182">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9d1e-183">Die <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> Methode führt die `continuationAction` delegieren, wenn alle Aufgaben im der `tasks` Array abgeschlossen wurden, unabhängig von deren Abschlussstatus.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-183">The <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> method executes the `continuationAction` delegate when all tasks in the `tasks` array have completed, regardless of their completion status.</span></span>  
  
 <span data-ttu-id="c9d1e-184">Ausnahmen, die von Aufgaben in der `tasks` Array sind nicht verfügbar, das der Fortsetzungsaufgabe über die strukturierte Ausnahmebehandlung.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-184">Exceptions thrown by tasks in the `tasks` array are not available to the continuation task through structured exception handling.</span></span> <span data-ttu-id="c9d1e-185">Sie können bestimmen, welche Ausnahmen ausgelöst wurden, anhand der <xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=nameWithType> Eigenschaft der einzelnen Aufgaben im der `tasks` Array.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-185">You can determine which exceptions were thrown by examining the <xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=nameWithType> property of each task in the `tasks` array.</span></span> <span data-ttu-id="c9d1e-186">Zur Verwendung von strukturierter Ausnahmebehandlung zum Behandeln von Ausnahmen, die von Aufgaben in der `tasks` array, rufen Sie die <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29?displayProperty=nameWithType> Methode.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-186">To use structured exception handling to handle exceptions thrown by tasks in the `tasks` array, call the <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c9d1e-187">Im folgende Beispiel wird eine einzelne Aufgaben, die einen regulären Ausdruck zu verwenden, um die Anzahl der Wörter in einem Satz von Textdateien zählen gestartet.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-187">The following example launches separate tasks that use a regular expression to count the number of words in a set of text files.</span></span> <span data-ttu-id="c9d1e-188">Die <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> Methode wird verwendet, um eine Aufgabe zu starten, in dem die Anzahl der insgesamt Wörter angezeigt, nach Abschluss aller Vorgängeraufgaben.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-188">The <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> method is used to launch a task that displays the total word count when all the antecedent tasks have completed.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.ContinueWhenAll#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.continuewhenall/cs/continuewhenall1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.ContinueWhenAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.continuewhenall/vb/continuewhenall1.vb#1)]  
  
 <span data-ttu-id="c9d1e-189">Der Aufruf an der Fortsetzungsaufgabe <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> Methode nicht zulässt, behandeln Ausnahmen, die durch die vorangehenden Aufgaben ausgelöst werden, damit das Beispiel untersucht die <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType> Eigenschaft jede Vorgängeraufgabe zu bestimmen, ob die Aufgabe erfolgreich ausgeführt wurde.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-189">The call to the continuation task's <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> method does not allow it to handle exceptions thrown by the antecedent tasks, so the example examines the <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType> property of each antecedent task to determine whether the task succeeded.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c9d1e-190">Ein Element im <paramref name="tasks" />-Array wurde freigegeben.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-190">An element in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-191">Das <paramref name="tasks" />-Array ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-191">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c9d1e-192">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-192">-or-</span></span> 
<span data-ttu-id="c9d1e-193">Das <paramref name="continuationAction" />-Argument lautet <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-193">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c9d1e-194">Das <paramref name="tasks" />-Array ist leer oder enthält einen NULL-Wert.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-194">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-195">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-195">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-196">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-196">Chaining Tasks by Using Continuation Tasks</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Action&lt;System.Threading.Tasks.Task[]&gt; continuationAction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll(class System.Threading.Tasks.Task[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task[]&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Action&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Action&lt;System.Threading.Tasks.Task[]&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAll (tasks, continuationAction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task[]&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="c9d1e-197">Das Array von Aufgaben, mit denen fortgefahren wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-197">The array of tasks from which to continue.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="c9d1e-198">Der Aktionsdelegat, der ausgeführt werden soll, wenn alle Aufgaben im <paramref name="tasks" />-Array abgeschlossen wurden.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-198">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="c9d1e-199">Das Abbruchtoken, das der neuen Fortsetzungsaufgabe zugeordnet werden soll.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-199">The cancellation token to assign to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="c9d1e-200">Erstellt eine Fortsetzungsaufgabe, die beginnt, wenn ein Satz angegebener Aufgaben abgeschlossen wurde.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-200">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-201">Die neue Fortsetzungsaufgabe.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-201">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9d1e-202">Die [\], Aktion (Aufgabe\<xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D% 2CSystem.Threading.CancellationToken%29 >-Methode führt die `continuationAction` delegieren, wenn alle Aufgaben im der `tasks` Array abgeschlossen wurden, unabhängig von deren Abschlussstatus.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-202">The [\], Action(Task\<xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%2CSystem.Threading.CancellationToken%29> method executes the `continuationAction` delegate when all tasks in the `tasks` array have completed, regardless of their completion status.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c9d1e-203">Das folgende Beispiel erstellt ein Abbruchtoken, das er übergibt, um Aufgaben zu trennen, die einen regulären Ausdruck zu verwenden, um die Anzahl der Wörter in einem Satz von Textdateien zählen.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-203">The following example creates a cancellation token, which it passes to separate tasks that use a regular expression to count the number of words in a set of text files.</span></span> <span data-ttu-id="c9d1e-204">Das Abbruchtoken, das wird festgelegt, wenn eine Datei nicht gefunden werden kann.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-204">The cancellation token is set if a file cannot be found.</span></span> <span data-ttu-id="c9d1e-205">Die [\], Aktion (Aufgabe\<xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A >-Methode verwendet, um eine Aufgabe zu starten, in dem die Anzahl der insgesamt Wörter angezeigt, nach Abschluss aller Vorgängeraufgaben.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-205">The [\], Action(Task\<xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> method is used to launch a task that displays the total word count when all the antecedent tasks have completed.</span></span> <span data-ttu-id="c9d1e-206">Wenn das Abbruchtoken festgelegt ist, die angibt, dass eine oder mehrere Aufgaben abgebrochen wurden, verarbeitet die <xref:System.AggregateException> Ausnahme und zeigt eine Fehlermeldung an.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-206">If the cancellation token is set, which indicates that one or more tasks have been cancelled, it handles the <xref:System.AggregateException> exception and displays an error message.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.ContinueWhenAll#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.continuewhenall/cs/continuewhenall2.cs#2)]
 [!code-vb[System.Threading.Tasks.Task.ContinueWhenAll#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.continuewhenall/vb/continuewhenall2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c9d1e-207">Ein Element im <paramref name="tasks" />-Array wurde freigegeben.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-207">An element in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="c9d1e-208">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-208">-or-</span></span> 
<span data-ttu-id="c9d1e-209">Die <see cref="T:System.Threading.CancellationTokenSource" />, die <paramref name="cancellationToken" /> erstellt hat, wurde bereits freigegeben.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-209">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-210">Das <paramref name="tasks" />-Array ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-210">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c9d1e-211">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-211">-or-</span></span> 
<span data-ttu-id="c9d1e-212">Das <paramref name="continuationAction" />-Argument lautet <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-212">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c9d1e-213">Das <paramref name="tasks" />-Array ist leer oder enthält einen NULL-Wert.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-213">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-214">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-214">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-215">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-215">Chaining Tasks by Using Continuation Tasks</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Action&lt;System.Threading.Tasks.Task[]&gt; continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll(class System.Threading.Tasks.Task[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task[]&gt; continuationAction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll (tasks As Task(), continuationAction As Action(Of Task()), continuationOptions As TaskContinuationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Action&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^&gt; ^ continuationAction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Action&lt;System.Threading.Tasks.Task[]&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAll (tasks, continuationAction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task[]&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="c9d1e-216">Das Array von Aufgaben, mit denen fortgefahren wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-216">The array of tasks from which to continue.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="c9d1e-217">Der Aktionsdelegat, der ausgeführt werden soll, wenn alle Aufgaben im <paramref name="tasks" />-Array abgeschlossen wurden.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-217">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="c9d1e-218">Eine bitweise Kombination der Enumerationswerte, die das Verhalten der neuen Fortsetzungsaufgabe steuern.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-218">A bitwise combination of the enumeration values that control the behavior of the new continuation task.</span></span> <span data-ttu-id="c9d1e-219">Die Member NotOn\* und OnlyOn\* werden nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-219">The NotOn\* and OnlyOn\* members are not supported.</span></span></param>
        <summary><span data-ttu-id="c9d1e-220">Erstellt eine Fortsetzungsaufgabe, die beginnt, wenn ein Satz angegebener Aufgaben abgeschlossen wurde.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-220">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-221">Die neue Fortsetzungsaufgabe.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-221">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c9d1e-222">Ein Element im <paramref name="tasks" />-Array wurde freigegeben.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-222">An element in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-223">Das <paramref name="tasks" />-Array ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-223">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c9d1e-224">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-224">-or-</span></span> 
<span data-ttu-id="c9d1e-225">Das <paramref name="continuationAction" />-Argument lautet <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-225">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c9d1e-226">Das <paramref name="continuationOptions" />-Argument gibt einen ungültigen Wert an.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-226">The <paramref name="continuationOptions" /> argument specifies an invalid value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c9d1e-227">Das <paramref name="tasks" />-Array ist leer oder enthält einen NULL-Wert.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-227">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-228">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-228">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-229">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-229">Chaining Tasks by Using Continuation Tasks</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Action&lt;System.Threading.Tasks.Task[]&gt; continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll(class System.Threading.Tasks.Task[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task[]&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Action&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Action&lt;System.Threading.Tasks.Task[]&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAll (tasks, continuationAction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task[]&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="c9d1e-230">Das Array von Aufgaben, mit denen fortgefahren wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-230">The array of tasks from which to continue.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="c9d1e-231">Der Aktionsdelegat, der ausgeführt werden soll, wenn alle Aufgaben im <paramref name="tasks" />-Array abgeschlossen wurden.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-231">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="c9d1e-232">Das Abbruchtoken, das der neuen Fortsetzungsaufgabe zugeordnet werden soll.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-232">The cancellation token to assign to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="c9d1e-233">Eine bitweise Kombination der Enumerationswerte, die das Verhalten der neuen Fortsetzungsaufgabe steuern.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-233">A bitwise combination of the enumeration values that control the behavior of the new continuation task.</span></span></param>
        <param name="scheduler"><span data-ttu-id="c9d1e-234">Das Objekt, das verwendet wird, um die neue Fortsetzungsaufgabe zu planen.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-234">The object that is used to schedule the new continuation task.</span></span></param>
        <summary><span data-ttu-id="c9d1e-235">Erstellt eine Fortsetzungsaufgabe, die beginnt, wenn ein Satz angegebener Aufgaben abgeschlossen wurde.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-235">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-236">Die neue Fortsetzungsaufgabe.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-236">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-237">Das <paramref name="tasks" />-Array ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-237">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c9d1e-238">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-238">-or-</span></span> 
<span data-ttu-id="c9d1e-239">Das <paramref name="continuationAction" />-Argument lautet <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-239">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c9d1e-240">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-240">-or-</span></span> 
<span data-ttu-id="c9d1e-241">Das <paramref name="scheduler" />-Argument lautet <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-241">The <paramref name="scheduler" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c9d1e-242">Das <paramref name="tasks" />-Array ist leer oder enthält einen NULL-Wert.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-242">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-243">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-243">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-244">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-244">Chaining Tasks by Using Continuation Tasks</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAll&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]&gt; continuationAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[]&gt; continuationAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll(Of TAntecedentResult) (tasks As Task(Of TAntecedentResult)(), continuationAction As Action(Of Task(Of TAntecedentResult)())) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Action&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^&gt; ^ continuationAction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Action&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[]&gt; -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAll (tasks, continuationAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="c9d1e-245">Der Ergebnistyp des vorangehenden <paramref name="tasks" />-Elements.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-245">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="c9d1e-246">Das Array von Aufgaben, mit denen fortgefahren wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-246">The array of tasks from which to continue.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="c9d1e-247">Der Aktionsdelegat, der ausgeführt werden soll, wenn alle Aufgaben im <paramref name="tasks" />-Array abgeschlossen wurden.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-247">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <summary><span data-ttu-id="c9d1e-248">Erstellt eine Fortsetzungsaufgabe, die beginnt, wenn ein Satz angegebener Aufgaben abgeschlossen wurde.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-248">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-249">Die neue Fortsetzungsaufgabe.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-249">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c9d1e-250">Ein Element im <paramref name="tasks" />-Array wurde freigegeben.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-250">An element in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-251">Das <paramref name="tasks" />-Array ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-251">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c9d1e-252">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-252">-or-</span></span> 
<span data-ttu-id="c9d1e-253">Das <paramref name="continuationAction" />-Argument lautet <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-253">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c9d1e-254">Das <paramref name="tasks" />-Array ist leer oder enthält einen NULL-Wert.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-254">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-255">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-255">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-256">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-256">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c9d1e-257">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="c9d1e-257">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAll&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]&gt; continuationAction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[]&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Action&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Action&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[]&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAll (tasks, continuationAction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="c9d1e-258">Der Ergebnistyp des vorangehenden <paramref name="tasks" />-Elements.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-258">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="c9d1e-259">Das Array von Aufgaben, mit denen fortgefahren wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-259">The array of tasks from which to continue.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="c9d1e-260">Der Aktionsdelegat, der ausgeführt werden soll, wenn alle Aufgaben im <paramref name="tasks" />-Array abgeschlossen wurden.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-260">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="c9d1e-261">Das Abbruchtoken, das der neuen Fortsetzungsaufgabe zugeordnet werden soll.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-261">The cancellation token to assign to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="c9d1e-262">Erstellt eine Fortsetzungsaufgabe, die beginnt, wenn ein Satz angegebener Aufgaben abgeschlossen wurde.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-262">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-263">Die neue Fortsetzungsaufgabe.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-263">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c9d1e-264">Ein Element im <paramref name="tasks" />-Array wurde freigegeben.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-264">An element in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="c9d1e-265">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-265">-or-</span></span> 
<span data-ttu-id="c9d1e-266">Die <see cref="T:System.Threading.CancellationTokenSource" />, die <paramref name="cancellationToken" /> erstellt hat, wurde bereits freigegeben.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-266">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-267">Das <paramref name="tasks" />-Array ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-267">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c9d1e-268">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-268">-or-</span></span> 
<span data-ttu-id="c9d1e-269">Das <paramref name="continuationAction" />-Argument lautet <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-269">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c9d1e-270">Das <paramref name="tasks" />-Array ist leer oder enthält einen NULL-Wert.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-270">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-271">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-271">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-272">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-272">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c9d1e-273">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="c9d1e-273">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAll&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]&gt; continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[]&gt; continuationAction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll(Of TAntecedentResult) (tasks As Task(Of TAntecedentResult)(), continuationAction As Action(Of Task(Of TAntecedentResult)()), continuationOptions As TaskContinuationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Action&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^&gt; ^ continuationAction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Action&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[]&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAll (tasks, continuationAction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="c9d1e-274">Der Ergebnistyp des vorangehenden <paramref name="tasks" />-Elements.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-274">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="c9d1e-275">Das Array von Aufgaben, mit denen fortgefahren wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-275">The array of tasks from which to continue.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="c9d1e-276">Der Aktionsdelegat, der ausgeführt werden soll, wenn alle Aufgaben im <paramref name="tasks" />-Array abgeschlossen wurden.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-276">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="c9d1e-277">Eine bitweise Kombination der Enumerationswerte, die das Verhalten der neuen Fortsetzungsaufgabe steuern.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-277">A bitwise combination of the enumeration values that control the behavior of the new continuation task.</span></span> <span data-ttu-id="c9d1e-278">Die Member NotOn\* und OnlyOn\* werden nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-278">The NotOn\* and OnlyOn\* members are not supported.</span></span></param>
        <summary><span data-ttu-id="c9d1e-279">Erstellt eine Fortsetzungsaufgabe, die beginnt, wenn ein Satz angegebener Aufgaben abgeschlossen wurde.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-279">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-280">Die neue Fortsetzungsaufgabe.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-280">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c9d1e-281">Ein Element im <paramref name="tasks" />-Array wurde freigegeben.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-281">An element in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-282">Das <paramref name="tasks" />-Array ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-282">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c9d1e-283">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-283">-or-</span></span> 
<span data-ttu-id="c9d1e-284">Das <paramref name="continuationAction" />-Argument lautet <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-284">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c9d1e-285">Das <paramref name="continuationOptions" />-Argument gibt einen ungültigen Wert an.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-285">The <paramref name="continuationOptions" /> argument specifies an invalid value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c9d1e-286">Das <paramref name="tasks" />-Array ist leer oder enthält einen NULL-Wert.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-286">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-287">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-287">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-288">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-288">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c9d1e-289">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="c9d1e-289">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAll&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]&gt; continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[]&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Action&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Action&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[]&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAll (tasks, continuationAction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="c9d1e-290">Der Ergebnistyp des vorangehenden <paramref name="tasks" />-Elements.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-290">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="c9d1e-291">Das Array von Aufgaben, mit denen fortgefahren wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-291">The array of tasks from which to continue.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="c9d1e-292">Der Aktionsdelegat, der ausgeführt werden soll, wenn alle Aufgaben im <paramref name="tasks" />-Array abgeschlossen wurden.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-292">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="c9d1e-293">Das Abbruchtoken, das der neuen Fortsetzungsaufgabe zugeordnet werden soll.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-293">The cancellation token to assign to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="c9d1e-294">Eine bitweise Kombination der Enumerationswerte, die das Verhalten der neuen Fortsetzungsaufgabe steuern.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-294">A bitwise combination of the enumeration values that control the behavior of the new continuation task.</span></span> <span data-ttu-id="c9d1e-295">Die Member NotOn\* und OnlyOn\* werden nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-295">The NotOn\* and OnlyOn\* members are not supported.</span></span></param>
        <param name="scheduler"><span data-ttu-id="c9d1e-296">Das Objekt, das verwendet wird, um die neue Fortsetzungsaufgabe zu planen.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-296">The object that is used to schedule the new continuation task.</span></span></param>
        <summary><span data-ttu-id="c9d1e-297">Erstellt eine Fortsetzungsaufgabe, die beginnt, wenn ein Satz angegebener Aufgaben abgeschlossen wurde.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-297">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-298">Die neue Fortsetzungsaufgabe.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-298">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-299">Das <paramref name="tasks" />-Array ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-299">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c9d1e-300">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-300">-or-</span></span> 
<span data-ttu-id="c9d1e-301">Das <paramref name="continuationAction" />-Argument lautet <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-301">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c9d1e-302">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-302">-or-</span></span> 
<span data-ttu-id="c9d1e-303">Das <paramref name="scheduler" />-Argument lautet <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-303">The <paramref name="scheduler" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c9d1e-304">Das <paramref name="tasks" />-Array ist leer oder enthält einen NULL-Wert.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-304">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-305">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-305">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-306">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-306">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c9d1e-307">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="c9d1e-307">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TResult&gt; (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task[],TResult&gt; continuationFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAll&lt;TResult&gt;(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task[], !!TResult&gt; continuationFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll(Of TResult) (tasks As Task(), continuationFunction As Func(Of Task(), TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^, TResult&gt; ^ continuationFunction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task[], 'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task[],TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="c9d1e-308">Der Typ des Ergebnisses, das vom <paramref name="continuationFunction" />-Delegaten zurückgegeben und der erstellten Aufgabe zugeordnet wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-308">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="c9d1e-309">Das Array von Aufgaben, mit denen fortgefahren wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-309">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="c9d1e-310">Der Funktionsdelegat, der asynchron ausgeführt werden soll, wenn alle Aufgaben im <paramref name="tasks" />-Array abgeschlossen wurden.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-310">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <summary><span data-ttu-id="c9d1e-311">Erstellt eine Fortsetzungsaufgabe, die beginnt, wenn ein Satz angegebener Aufgaben abgeschlossen wurde.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-311">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-312">Die neue Fortsetzungsaufgabe.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-312">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c9d1e-313">Ein Element im <paramref name="tasks" />-Array wurde freigegeben.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-313">An element in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-314">Das <paramref name="tasks" />-Array ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-314">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c9d1e-315">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-315">-or-</span></span> 
<span data-ttu-id="c9d1e-316">Das <paramref name="continuationFunction" />-Argument lautet <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-316">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c9d1e-317">Das <paramref name="tasks" />-Array ist leer oder enthält einen NULL-Wert.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-317">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-318">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-318">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-319">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-319">Chaining Tasks by Using Continuation Tasks</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TResult&gt; (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task[],TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAll&lt;TResult&gt;(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task[], !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task[], 'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task[],TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="c9d1e-320">Der Typ des Ergebnisses, das vom <paramref name="continuationFunction" />-Delegaten zurückgegeben und der erstellten Aufgabe zugeordnet wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-320">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="c9d1e-321">Das Array von Aufgaben, mit denen fortgefahren wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-321">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="c9d1e-322">Der Funktionsdelegat, der asynchron ausgeführt werden soll, wenn alle Aufgaben im <paramref name="tasks" />-Array abgeschlossen wurden.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-322">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="c9d1e-323">Das Abbruchtoken, das der neuen Fortsetzungsaufgabe zugeordnet werden soll.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-323">The cancellation token to assign to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="c9d1e-324">Erstellt eine Fortsetzungsaufgabe, die beginnt, wenn ein Satz angegebener Aufgaben abgeschlossen wurde.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-324">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-325">Die neue Fortsetzungsaufgabe.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-325">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c9d1e-326">Ein Element im <paramref name="tasks" />-Array wurde freigegeben.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-326">An element in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="c9d1e-327">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-327">-or-</span></span> 
<span data-ttu-id="c9d1e-328">Die <see cref="T:System.Threading.CancellationTokenSource" />, die <paramref name="cancellationToken" /> erstellt hat, wurde bereits freigegeben.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-328">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-329">Das <paramref name="tasks" />-Array ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-329">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c9d1e-330">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-330">-or-</span></span> 
<span data-ttu-id="c9d1e-331">Das <paramref name="continuationFunction" />-Argument lautet <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-331">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c9d1e-332">Das <paramref name="tasks" />-Array ist leer oder enthält einen NULL-Wert.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-332">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-333">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-333">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-334">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-334">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c9d1e-335">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="c9d1e-335">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TResult&gt; (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task[],TResult&gt; continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAll&lt;TResult&gt;(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task[], !!TResult&gt; continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll(Of TResult) (tasks As Task(), continuationFunction As Func(Of Task(), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task[], 'Result&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task[],TResult&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="c9d1e-336">Der Typ des Ergebnisses, das vom <paramref name="continuationFunction" />-Delegaten zurückgegeben und der erstellten Aufgabe zugeordnet wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-336">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="c9d1e-337">Das Array von Aufgaben, mit denen fortgefahren wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-337">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="c9d1e-338">Der Funktionsdelegat, der asynchron ausgeführt werden soll, wenn alle Aufgaben im <paramref name="tasks" />-Array abgeschlossen wurden.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-338">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="c9d1e-339">Eine bitweise Kombination der Enumerationswerte, die das Verhalten der neuen Fortsetzungsaufgabe steuern.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-339">A bitwise combination of the enumeration values that control the behavior of the new continuation task.</span></span> <span data-ttu-id="c9d1e-340">Die Member NotOn\* und OnlyOn\* werden nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-340">The NotOn\* and OnlyOn\* members are not supported.</span></span></param>
        <summary><span data-ttu-id="c9d1e-341">Erstellt eine Fortsetzungsaufgabe, die beginnt, wenn ein Satz angegebener Aufgaben abgeschlossen wurde.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-341">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-342">Die neue Fortsetzungsaufgabe.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-342">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c9d1e-343">Ein Element im <paramref name="tasks" />-Array wurde freigegeben.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-343">An element in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-344">Das <paramref name="tasks" />-Array ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-344">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c9d1e-345">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-345">-or-</span></span> 
<span data-ttu-id="c9d1e-346">Das <paramref name="continuationFunction" />-Argument lautet <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-346">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c9d1e-347">Das <paramref name="continuationOptions" />-Argument gibt einen ungültigen Wert an.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-347">The <paramref name="continuationOptions" /> argument specifies an invalid value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c9d1e-348">Das <paramref name="tasks" />-Array ist leer oder enthält einen NULL-Wert.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-348">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-349">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-349">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-350">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-350">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c9d1e-351">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="c9d1e-351">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TResult&gt; (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task[],TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAll&lt;TResult&gt;(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task[], !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task[], 'Result&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task[],TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="c9d1e-352">Der Typ des Ergebnisses, das vom <paramref name="continuationFunction" />-Delegaten zurückgegeben und der erstellten Aufgabe zugeordnet wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-352">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="c9d1e-353">Das Array von Aufgaben, mit denen fortgefahren wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-353">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="c9d1e-354">Der Funktionsdelegat, der asynchron ausgeführt werden soll, wenn alle Aufgaben im <paramref name="tasks" />-Array abgeschlossen wurden.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-354">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="c9d1e-355">Das Abbruchtoken, das der neuen Fortsetzungsaufgabe zugeordnet werden soll.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-355">The cancellation token to assign to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="c9d1e-356">Eine bitweise Kombination der Enumerationswerte, die das Verhalten der neuen Fortsetzungsaufgabe steuern.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-356">A bitwise combination of the enumeration values that control the behavior of the new continuation task.</span></span> <span data-ttu-id="c9d1e-357">Die Member NotOn\* und OnlyOn\* werden nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-357">The NotOn\* and OnlyOn\* members are not supported.</span></span></param>
        <param name="scheduler"><span data-ttu-id="c9d1e-358">Das Objekt, das verwendet wird, um die neue Fortsetzungsaufgabe zu planen.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-358">The object that is used to schedule the new continuation task.</span></span></param>
        <summary><span data-ttu-id="c9d1e-359">Erstellt eine Fortsetzungsaufgabe, die beginnt, wenn ein Satz angegebener Aufgaben abgeschlossen wurde.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-359">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-360">Die neue Fortsetzungsaufgabe.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-360">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-361">Das <paramref name="tasks" />-Array ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-361">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c9d1e-362">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-362">-or-</span></span> 
<span data-ttu-id="c9d1e-363">Das <paramref name="continuationFunction" />-Argument lautet <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-363">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c9d1e-364">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-364">-or-</span></span> 
<span data-ttu-id="c9d1e-365">Das <paramref name="scheduler" />-Argument lautet <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-365">The <paramref name="scheduler" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c9d1e-366">Das <paramref name="tasks" />-Array ist leer oder enthält einen NULL-Wert.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-366">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-367">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-367">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-368">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-368">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c9d1e-369">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="c9d1e-369">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TAntecedentResult,TResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt; continuationFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAll&lt;TAntecedentResult, TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[], !!TResult&gt; continuationFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll(Of TAntecedentResult, TResult) (tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^, TResult&gt; ^ continuationFunction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[], 'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="c9d1e-370">Der Ergebnistyp des vorangehenden <paramref name="tasks" />-Elements.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-370">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="c9d1e-371">Der Typ des Ergebnisses, das vom <paramref name="continuationFunction" />-Delegaten zurückgegeben und der erstellten Aufgabe zugeordnet wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-371">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="c9d1e-372">Das Array von Aufgaben, mit denen fortgefahren wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-372">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="c9d1e-373">Der Funktionsdelegat, der asynchron ausgeführt werden soll, wenn alle Aufgaben im <paramref name="tasks" />-Array abgeschlossen wurden.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-373">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <summary><span data-ttu-id="c9d1e-374">Erstellt eine Fortsetzungsaufgabe, die beginnt, wenn ein Satz angegebener Aufgaben abgeschlossen wurde.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-374">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-375">Die neue Fortsetzungsaufgabe.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-375">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c9d1e-376">Ein Element im <paramref name="tasks" />-Array wurde freigegeben.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-376">An element in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-377">Das <paramref name="tasks" />-Array ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-377">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c9d1e-378">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-378">-or-</span></span> 
<span data-ttu-id="c9d1e-379">Das <paramref name="continuationFunction" />-Argument lautet <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-379">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c9d1e-380">Das <paramref name="tasks" />-Array ist leer oder enthält einen NULL-Wert.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-380">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-381">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-381">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-382">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-382">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c9d1e-383">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="c9d1e-383">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TAntecedentResult,TResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAll&lt;TAntecedentResult, TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[], !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[], 'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="c9d1e-384">Der Ergebnistyp des vorangehenden <paramref name="tasks" />-Elements.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-384">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="c9d1e-385">Der Typ des Ergebnisses, das vom <paramref name="continuationFunction" />-Delegaten zurückgegeben und der erstellten Aufgabe zugeordnet wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-385">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="c9d1e-386">Das Array von Aufgaben, mit denen fortgefahren wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-386">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="c9d1e-387">Der Funktionsdelegat, der asynchron ausgeführt werden soll, wenn alle Aufgaben im <paramref name="tasks" />-Array abgeschlossen wurden.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-387">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="c9d1e-388">Das Abbruchtoken, das der neuen Fortsetzungsaufgabe zugeordnet werden soll.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-388">The cancellation token to assign to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="c9d1e-389">Erstellt eine Fortsetzungsaufgabe, die beginnt, wenn ein Satz angegebener Aufgaben abgeschlossen wurde.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-389">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-390">Die neue Fortsetzungsaufgabe.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-390">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c9d1e-391">Ein Element im <paramref name="tasks" />-Array wurde freigegeben.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-391">An element in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="c9d1e-392">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-392">-or-</span></span> 
<span data-ttu-id="c9d1e-393">Die <see cref="T:System.Threading.CancellationTokenSource" />, die <paramref name="cancellationToken" /> erstellt hat, wurde bereits freigegeben.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-393">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-394">Das <paramref name="tasks" />-Array ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-394">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c9d1e-395">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-395">-or-</span></span> 
<span data-ttu-id="c9d1e-396">Das <paramref name="continuationFunction" />-Argument lautet <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-396">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c9d1e-397">Das <paramref name="tasks" />-Array ist leer oder enthält einen NULL-Wert.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-397">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-398">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-398">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-399">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-399">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c9d1e-400">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="c9d1e-400">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TAntecedentResult,TResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt; continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAll&lt;TAntecedentResult, TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[], !!TResult&gt; continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll(Of TAntecedentResult, TResult) (tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[], 'Result&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="c9d1e-401">Der Ergebnistyp des vorangehenden <paramref name="tasks" />-Elements.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-401">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="c9d1e-402">Der Typ des Ergebnisses, das vom <paramref name="continuationFunction" />-Delegaten zurückgegeben und der erstellten Aufgabe zugeordnet wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-402">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="c9d1e-403">Das Array von Aufgaben, mit denen fortgefahren wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-403">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="c9d1e-404">Der Funktionsdelegat, der asynchron ausgeführt werden soll, wenn alle Aufgaben im <paramref name="tasks" />-Array abgeschlossen wurden.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-404">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="c9d1e-405">Eine bitweise Kombination der Enumerationswerte, die das Verhalten der neuen Fortsetzungsaufgabe steuern.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-405">A bitwise combination of the enumeration values that control the behavior of the new continuation task.</span></span> <span data-ttu-id="c9d1e-406">Die Member NotOn\* und OnlyOn\* werden nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-406">The NotOn\* and OnlyOn\* members are not supported.</span></span></param>
        <summary><span data-ttu-id="c9d1e-407">Erstellt eine Fortsetzungsaufgabe, die beginnt, wenn ein Satz angegebener Aufgaben abgeschlossen wurde.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-407">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-408">Die neue Fortsetzungsaufgabe.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-408">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c9d1e-409">Ein Element im <paramref name="tasks" />-Array wurde freigegeben.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-409">An element in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-410">Das <paramref name="tasks" />-Array ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-410">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c9d1e-411">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-411">-or-</span></span> 
<span data-ttu-id="c9d1e-412">Das <paramref name="continuationFunction" />-Argument lautet <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-412">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c9d1e-413">Das <paramref name="continuationOptions" />-Argument gibt einen ungültigen Wert an.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-413">The <paramref name="continuationOptions" /> argument specifies an invalid value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c9d1e-414">Das <paramref name="tasks" />-Array ist leer oder enthält einen NULL-Wert.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-414">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-415">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-415">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-416">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-416">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c9d1e-417">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="c9d1e-417">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TAntecedentResult,TResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAll&lt;TAntecedentResult, TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[], !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[], 'Result&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="c9d1e-418">Der Ergebnistyp des vorangehenden <paramref name="tasks" />-Elements.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-418">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="c9d1e-419">Der Typ des Ergebnisses, das vom <paramref name="continuationFunction" />-Delegaten zurückgegeben und der erstellten Aufgabe zugeordnet wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-419">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="c9d1e-420">Das Array von Aufgaben, mit denen fortgefahren wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-420">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="c9d1e-421">Der Funktionsdelegat, der asynchron ausgeführt werden soll, wenn alle Aufgaben im <paramref name="tasks" />-Array abgeschlossen wurden.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-421">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="c9d1e-422">Das Abbruchtoken, das der neuen Fortsetzungsaufgabe zugeordnet werden soll.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-422">The cancellation token to assign to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="c9d1e-423">Eine bitweise Kombination der Enumerationswerte, die das Verhalten der neuen Fortsetzungsaufgabe steuern.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-423">A bitwise combination of the enumeration values that control the behavior of the new continuation task.</span></span> <span data-ttu-id="c9d1e-424">Die Member NotOn\* und OnlyOn\* werden nicht unterstützt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-424">The NotOn\* and OnlyOn\* members are not supported.</span></span></param>
        <param name="scheduler"><span data-ttu-id="c9d1e-425">Das Objekt, das verwendet wird, um die neue Fortsetzungsaufgabe zu planen.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-425">The object that is used to schedule the new continuation task.</span></span></param>
        <summary><span data-ttu-id="c9d1e-426">Erstellt eine Fortsetzungsaufgabe, die beginnt, wenn ein Satz angegebener Aufgaben abgeschlossen wurde.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-426">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-427">Die neue Fortsetzungsaufgabe.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-427">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-428">Das <paramref name="tasks" />-Array ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-428">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c9d1e-429">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-429">-or-</span></span> 
<span data-ttu-id="c9d1e-430">Das <paramref name="continuationFunction" />-Argument lautet <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-430">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c9d1e-431">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-431">-or-</span></span> 
<span data-ttu-id="c9d1e-432">Das <paramref name="scheduler" />-Argument lautet <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-432">The <paramref name="scheduler" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c9d1e-433">Das <paramref name="tasks" />-Array ist leer oder enthält einen NULL-Wert.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-433">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c9d1e-434">Das <paramref name="continuationOptions" />-Argument gibt einen ungültigen Wert an.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-434">The <paramref name="continuationOptions" /> argument specifies an invalid value.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c9d1e-435">Ein Element im <paramref name="tasks" />-Array wurde freigegeben.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-435">An element in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="c9d1e-436">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-436">-or-</span></span> 
<span data-ttu-id="c9d1e-437">Die <see cref="T:System.Threading.CancellationTokenSource" />, die <paramref name="cancellationToken" /> erstellt hat, wurde bereits freigegeben.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-437">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-438">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-438">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-439">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-439">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c9d1e-440">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="c9d1e-440">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ContinueWhenAny">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c9d1e-441">Erstellt ein Fortsetzungs-<see cref="T:System.Threading.Tasks.Task" />, das nach dem Abschluss einer Aufgabe im bereitgestellten Satz gestartet wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-441">Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-442">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-442">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-443">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-443">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c9d1e-444">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="c9d1e-444">Task Cancellation</span></span></related>
        <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/Samples-for-Parallel-b4b76364"><span data-ttu-id="c9d1e-445">Beispiele für die parallele Programmierung mit .NET Framework</span><span class="sxs-lookup"><span data-stu-id="c9d1e-445">Samples for Parallel Programming with the .NET Framework</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ContinueWhenAny">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Action&lt;System.Threading.Tasks.Task&gt; continuationAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny(class System.Threading.Tasks.Task[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny (tasks As Task(), continuationAction As Action(Of Task)) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Action&lt;System.Threading.Tasks.Task&gt; -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAny (tasks, continuationAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="c9d1e-446">Das Array von Aufgaben, mit denen fortgefahren wird, wenn eine Aufgabe abgeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-446">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="c9d1e-447">Der Aktionsdelegat, der ausgeführt werden soll, wenn eine Aufgabe im <paramref name="tasks" />-Array abgeschlossen wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-447">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <summary><span data-ttu-id="c9d1e-448">Erstellt ein Fortsetzungs-<see cref="T:System.Threading.Tasks.Task" />, das nach dem Abschluss einer Aufgabe im bereitgestellten Satz gestartet wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-448">Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-449">Der neue Fortsetzungs-<see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-449">The new continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c9d1e-450">Das folgende Beispiel zeigt, wie Sie mit `ContinueWhenAny` und `ContinueWhenAll`:</span><span class="sxs-lookup"><span data-stu-id="c9d1e-450">The following example shows how to use `ContinueWhenAny` and `ContinueWhenAll`:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#05](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/continuewhenmulti.cs#05)]
 [!code-vb[System.Threading.Tasks.Task#05](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/continuewhenmulti.vb#05)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c9d1e-451">Eines der Elemente im <paramref name="tasks" />-Array wurde verworfen.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-451">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-452">Das <paramref name="tasks" />-Array ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-452">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c9d1e-453">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-453">-or-</span></span> 
<span data-ttu-id="c9d1e-454">Das <paramref name="continuationAction" />-Argument lautet <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-454">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c9d1e-455">Das <paramref name="tasks" />-Array enthält einen <see langword="null" />-Wert.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-455">The <paramref name="tasks" /> array contains a <see langword="null" /> value.</span></span>  
  
<span data-ttu-id="c9d1e-456">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-456">-or-</span></span> 
<span data-ttu-id="c9d1e-457">Das <paramref name="tasks" />-Array ist leer.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-457">The <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-458">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-458">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-459">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-459">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c9d1e-460">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="c9d1e-460">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Action&lt;System.Threading.Tasks.Task&gt; continuationAction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny(class System.Threading.Tasks.Task[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Action&lt;System.Threading.Tasks.Task&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAny (tasks, continuationAction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="c9d1e-461">Das Array von Aufgaben, mit denen fortgefahren wird, wenn eine Aufgabe abgeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-461">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="c9d1e-462">Der Aktionsdelegat, der ausgeführt werden soll, wenn eine Aufgabe im <paramref name="tasks" />-Array abgeschlossen wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-462">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="c9d1e-463">Das <see cref="T:System.Threading.CancellationToken" />, das der neuen Fortsetzungsaufgabe zugewiesen wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-463">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="c9d1e-464">Erstellt ein Fortsetzungs-<see cref="T:System.Threading.Tasks.Task" />, das nach dem Abschluss einer Aufgabe im bereitgestellten Satz gestartet wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-464">Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-465">Der neue Fortsetzungs-<see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-465">The new continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c9d1e-466">Eines der Elemente im <paramref name="tasks" />-Array wurde verworfen.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-466">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="c9d1e-467">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-467">-or-</span></span> 
 <span data-ttu-id="c9d1e-468"><paramref name="cancellationToken" /> wurde bereits gelöscht.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-468"><paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-469">Das <paramref name="tasks" />-Array ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-469">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c9d1e-470">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-470">-or-</span></span> 
<span data-ttu-id="c9d1e-471">Das <paramref name="continuationAction" />-Argument lautet <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-471">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c9d1e-472">Das <paramref name="tasks" />-Array enthält einen <see langword="null" />-Wert.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-472">The <paramref name="tasks" /> array contains a <see langword="null" /> value.</span></span>  
  
<span data-ttu-id="c9d1e-473">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-473">-or-</span></span> 
<span data-ttu-id="c9d1e-474">Das <paramref name="tasks" />-Array ist leer.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-474">The <paramref name="tasks" /> array is empty .</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-475">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-475">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-476">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-476">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c9d1e-477">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="c9d1e-477">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Action&lt;System.Threading.Tasks.Task&gt; continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny(class System.Threading.Tasks.Task[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny (tasks As Task(), continuationAction As Action(Of Task), continuationOptions As TaskContinuationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Action&lt;System.Threading.Tasks.Task&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAny (tasks, continuationAction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="c9d1e-478">Das Array von Aufgaben, mit denen fortgefahren wird, wenn eine Aufgabe abgeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-478">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="c9d1e-479">Der Aktionsdelegat, der ausgeführt werden soll, wenn eine Aufgabe im <paramref name="tasks" />-Array abgeschlossen wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-479">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="c9d1e-480">Der <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />-Wert, der das Verhalten des erstellten Fortsetzungs-<see cref="T:System.Threading.Tasks.Task" /> steuert.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-480">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></param>
        <summary><span data-ttu-id="c9d1e-481">Erstellt ein Fortsetzungs-<see cref="T:System.Threading.Tasks.Task" />, das nach dem Abschluss einer Aufgabe im bereitgestellten Satz gestartet wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-481">Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-482">Der neue Fortsetzungs-<see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-482">The new continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9d1e-483">Die NotOn \* und OnlyOn \* <xref:System.Threading.Tasks.TaskContinuationOptions>, die für das Einschränken <xref:System.Threading.Tasks.TaskStatus> Zustände, die eine Fortsetzung ausgeführt wird, sind mit ContinueWhenAny ungültig.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-483">The NotOn\* and OnlyOn\* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c9d1e-484">Die Ausnahme, die ausgelöst wird, wenn eines der Elemente im <paramref name="tasks" />-Array freigegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-484">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-485">Diese Ausnahme wird ausgelöst, wenn das <paramref name="tasks" />-Array NULL ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-485">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="c9d1e-486">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-486">-or-</span></span> 
<span data-ttu-id="c9d1e-487">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="continuationAction" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-487">The exception that is thrown when the <paramref name="continuationAction" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c9d1e-488">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="continuationOptions" />-Argument einen ungültigen TaskContinuationOptions-Wert angibt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-488">The exception that is thrown when the <paramref name="continuationOptions" /> argument specifies an invalid TaskContinuationOptions value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c9d1e-489">Diese Ausnahme wird ausgelöst, wenn das <paramref name="tasks" />-Array einen NULL-Wert enthält.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-489">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="c9d1e-490">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-490">-or-</span></span> 
<span data-ttu-id="c9d1e-491">Diese Ausnahme wird ausgelöst, wenn das <paramref name="tasks" />-Array leer ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-491">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-492">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-492">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-493">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-493">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c9d1e-494">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="c9d1e-494">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Action&lt;System.Threading.Tasks.Task&gt; continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny(class System.Threading.Tasks.Task[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Action&lt;System.Threading.Tasks.Task&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAny (tasks, continuationAction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="c9d1e-495">Das Array von Aufgaben, mit denen fortgefahren wird, wenn eine Aufgabe abgeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-495">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="c9d1e-496">Der Aktionsdelegat, der ausgeführt werden soll, wenn eine Aufgabe im <paramref name="tasks" />-Array abgeschlossen wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-496">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="c9d1e-497">Das <see cref="T:System.Threading.CancellationToken" />, das der neuen Fortsetzungsaufgabe zugewiesen wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-497">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="c9d1e-498">Der <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />-Wert, der das Verhalten des erstellten Fortsetzungs-<see cref="T:System.Threading.Tasks.Task" /> steuert.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-498">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></param>
        <param name="scheduler"><span data-ttu-id="c9d1e-499">Das <see cref="T:System.Threading.Tasks.TaskScheduler" />, das verwendet wird, um das erstellte Fortsetzungs-<see cref="T:System.Threading.Tasks.Task" /> zu planen.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-499">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></param>
        <summary><span data-ttu-id="c9d1e-500">Erstellt ein Fortsetzungs-<see cref="T:System.Threading.Tasks.Task" />, das nach dem Abschluss einer Aufgabe im bereitgestellten Satz gestartet wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-500">Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-501">Der neue Fortsetzungs-<see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-501">The new continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-502">Diese Ausnahme wird ausgelöst, wenn das <paramref name="tasks" />-Array NULL ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-502">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="c9d1e-503">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-503">-or-</span></span> 
<span data-ttu-id="c9d1e-504">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="continuationAction" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-504">The exception that is thrown when the <paramref name="continuationAction" /> argument is null.</span></span>  
  
<span data-ttu-id="c9d1e-505">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-505">-or-</span></span> 
<span data-ttu-id="c9d1e-506">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="scheduler" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-506">The exception that is thrown when the <paramref name="scheduler" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c9d1e-507">Diese Ausnahme wird ausgelöst, wenn das <paramref name="tasks" />-Array einen NULL-Wert enthält.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-507">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="c9d1e-508">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-508">-or-</span></span> 
<span data-ttu-id="c9d1e-509">Diese Ausnahme wird ausgelöst, wenn das <paramref name="tasks" />-Array leer ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-509">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-510">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-510">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-511">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-511">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c9d1e-512">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="c9d1e-512">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAny&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;&gt; continuationAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;&gt; continuationAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny(Of TAntecedentResult) (tasks As Task(Of TAntecedentResult)(), continuationAction As Action(Of Task(Of TAntecedentResult))) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Action&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ continuationAction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Action&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;&gt; -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAny (tasks, continuationAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="c9d1e-513">Der Ergebnistyp des vorangehenden <paramref name="tasks" />-Elements.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-513">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="c9d1e-514">Das Array von Aufgaben, mit denen fortgefahren wird, wenn eine Aufgabe abgeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-514">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="c9d1e-515">Der Aktionsdelegat, der ausgeführt werden soll, wenn eine Aufgabe im <paramref name="tasks" />-Array abgeschlossen wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-515">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <summary><span data-ttu-id="c9d1e-516">Erstellt ein Fortsetzungs-<see cref="T:System.Threading.Tasks.Task" />, das nach dem Abschluss einer Aufgabe im bereitgestellten Satz gestartet wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-516">Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-517">Der neue Fortsetzungs-<see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-517">The new continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c9d1e-518">Die Ausnahme, die ausgelöst wird, wenn eines der Elemente im <paramref name="tasks" />-Array freigegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-518">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-519">Diese Ausnahme wird ausgelöst, wenn das <paramref name="tasks" />-Array NULL ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-519">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="c9d1e-520">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-520">-or-</span></span> 
<span data-ttu-id="c9d1e-521">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="continuationAction" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-521">The exception that is thrown when the <paramref name="continuationAction" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c9d1e-522">Diese Ausnahme wird ausgelöst, wenn das <paramref name="tasks" />-Array einen NULL-Wert enthält.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-522">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="c9d1e-523">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-523">-or-</span></span> 
<span data-ttu-id="c9d1e-524">Diese Ausnahme wird ausgelöst, wenn das <paramref name="tasks" />-Array leer ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-524">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-525">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-525">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-526">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-526">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c9d1e-527">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="c9d1e-527">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAny&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;&gt; continuationAction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Action&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Action&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAny (tasks, continuationAction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="c9d1e-528">Der Ergebnistyp des vorangehenden <paramref name="tasks" />-Elements.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-528">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="c9d1e-529">Das Array von Aufgaben, mit denen fortgefahren wird, wenn eine Aufgabe abgeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-529">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="c9d1e-530">Der Aktionsdelegat, der ausgeführt werden soll, wenn eine Aufgabe im <paramref name="tasks" />-Array abgeschlossen wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-530">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="c9d1e-531">Das <see cref="T:System.Threading.CancellationToken" />, das der neuen Fortsetzungsaufgabe zugewiesen wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-531">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="c9d1e-532">Erstellt ein Fortsetzungs-<see cref="T:System.Threading.Tasks.Task" />, das nach dem Abschluss einer Aufgabe im bereitgestellten Satz gestartet wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-532">Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-533">Der neue Fortsetzungs-<see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-533">The new continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c9d1e-534">Die Ausnahme, die ausgelöst wird, wenn eines der Elemente im <paramref name="tasks" />-Array freigegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-534">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="c9d1e-535">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-535">-or-</span></span> 
<span data-ttu-id="c9d1e-536">Das angegebene <see cref="T:System.Threading.CancellationToken" /> wurde bereits verworfen.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-536">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-537">Diese Ausnahme wird ausgelöst, wenn das <paramref name="tasks" />-Array NULL ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-537">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="c9d1e-538">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-538">-or-</span></span> 
<span data-ttu-id="c9d1e-539">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="continuationAction" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-539">The exception that is thrown when the <paramref name="continuationAction" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c9d1e-540">Diese Ausnahme wird ausgelöst, wenn das <paramref name="tasks" />-Array einen NULL-Wert enthält.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-540">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="c9d1e-541">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-541">-or-</span></span> 
<span data-ttu-id="c9d1e-542">Diese Ausnahme wird ausgelöst, wenn das <paramref name="tasks" />-Array leer ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-542">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-543">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-543">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-544">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-544">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c9d1e-545">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="c9d1e-545">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAny&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;&gt; continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;&gt; continuationAction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny(Of TAntecedentResult) (tasks As Task(Of TAntecedentResult)(), continuationAction As Action(Of Task(Of TAntecedentResult)), continuationOptions As TaskContinuationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Action&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ continuationAction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Action&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAny (tasks, continuationAction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="c9d1e-546">Der Ergebnistyp des vorangehenden <paramref name="tasks" />-Elements.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-546">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="c9d1e-547">Das Array von Aufgaben, mit denen fortgefahren wird, wenn eine Aufgabe abgeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-547">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="c9d1e-548">Der Aktionsdelegat, der ausgeführt werden soll, wenn eine Aufgabe im <paramref name="tasks" />-Array abgeschlossen wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-548">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="c9d1e-549">Der <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />-Wert, der das Verhalten des erstellten Fortsetzungs-<see cref="T:System.Threading.Tasks.Task" /> steuert.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-549">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></param>
        <summary><span data-ttu-id="c9d1e-550">Erstellt ein Fortsetzungs-<see cref="T:System.Threading.Tasks.Task" />, das nach dem Abschluss einer Aufgabe im bereitgestellten Satz gestartet wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-550">Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-551">Der neue Fortsetzungs-<see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-551">The new continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9d1e-552">Die NotOn \* und OnlyOn \* <xref:System.Threading.Tasks.TaskContinuationOptions>, die für das Einschränken <xref:System.Threading.Tasks.TaskStatus> Zustände, die eine Fortsetzung ausgeführt wird, sind mit ContinueWhenAny ungültig.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-552">The NotOn\* and OnlyOn\* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c9d1e-553">Die Ausnahme, die ausgelöst wird, wenn eines der Elemente im <paramref name="tasks" />-Array freigegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-553">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-554">Diese Ausnahme wird ausgelöst, wenn das <paramref name="tasks" />-Array NULL ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-554">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="c9d1e-555">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-555">-or-</span></span> 
<span data-ttu-id="c9d1e-556">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="continuationAction" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-556">The exception that is thrown when the <paramref name="continuationAction" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c9d1e-557">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="continuationOptions" />-Argument einen ungültigen TaskContinuationOptions-Wert angibt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-557">The exception that is thrown when the <paramref name="continuationOptions" /> argument specifies an invalid TaskContinuationOptions value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c9d1e-558">Diese Ausnahme wird ausgelöst, wenn das <paramref name="tasks" />-Array einen NULL-Wert enthält.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-558">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="c9d1e-559">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-559">-or-</span></span> 
<span data-ttu-id="c9d1e-560">Diese Ausnahme wird ausgelöst, wenn das <paramref name="tasks" />-Array leer ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-560">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-561">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-561">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-562">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-562">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c9d1e-563">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="c9d1e-563">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAny&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;&gt; continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Action&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Action&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAny (tasks, continuationAction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="c9d1e-564">Der Ergebnistyp des vorangehenden <paramref name="tasks" />-Elements.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-564">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="c9d1e-565">Das Array von Aufgaben, mit denen fortgefahren wird, wenn eine Aufgabe abgeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-565">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="c9d1e-566">Der Aktionsdelegat, der ausgeführt werden soll, wenn eine Aufgabe im <paramref name="tasks" />-Array abgeschlossen wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-566">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="c9d1e-567">Das <see cref="T:System.Threading.CancellationToken" />, das der neuen Fortsetzungsaufgabe zugewiesen wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-567">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="c9d1e-568">Der <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />-Wert, der das Verhalten des erstellten Fortsetzungs-<see cref="T:System.Threading.Tasks.Task" /> steuert.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-568">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></param>
        <param name="scheduler"><span data-ttu-id="c9d1e-569">Das <see cref="T:System.Threading.Tasks.TaskScheduler" />, das verwendet wird, um das erstellte Fortsetzungs-<see cref="T:System.Threading.Tasks.Task`1" /> zu planen.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-569">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="c9d1e-570">Erstellt ein Fortsetzungs-<see cref="T:System.Threading.Tasks.Task" />, das nach dem Abschluss einer Aufgabe im bereitgestellten Satz gestartet wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-570">Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-571">Der neue Fortsetzungs-<see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-571">The new continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9d1e-572">Die NotOn \* und OnlyOn \* <xref:System.Threading.Tasks.TaskContinuationOptions>, die für das Einschränken <xref:System.Threading.Tasks.TaskStatus> Zustände, die eine Fortsetzung ausgeführt wird, sind mit ContinueWhenAny ungültig.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-572">The NotOn\* and OnlyOn\* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-573">Diese Ausnahme wird ausgelöst, wenn das <paramref name="tasks" />-Array NULL ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-573">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="c9d1e-574">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-574">-or-</span></span> 
<span data-ttu-id="c9d1e-575">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="continuationAction" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-575">The exception that is thrown when the <paramref name="continuationAction" /> argument is null.</span></span>  
  
<span data-ttu-id="c9d1e-576">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-576">-or-</span></span> 
<span data-ttu-id="c9d1e-577">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="scheduler" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-577">The exception that is thrown when the <paramref name="scheduler" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c9d1e-578">Diese Ausnahme wird ausgelöst, wenn das <paramref name="tasks" />-Array einen NULL-Wert enthält.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-578">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="c9d1e-579">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-579">-or-</span></span> 
<span data-ttu-id="c9d1e-580">Diese Ausnahme wird ausgelöst, wenn das <paramref name="tasks" />-Array leer ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-580">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-581">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-581">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-582">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-582">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c9d1e-583">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="c9d1e-583">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TResult&gt; (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAny&lt;TResult&gt;(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny(Of TResult) (tasks As Task(), continuationFunction As Func(Of Task, TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task, 'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="c9d1e-584">Der Typ des Ergebnisses, das vom <paramref name="continuationFunction" />-Delegaten zurückgegeben und dem erstellten <see cref="T:System.Threading.Tasks.Task`1" />-Element zugeordnet wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-584">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="c9d1e-585">Das Array von Aufgaben, mit denen fortgefahren wird, wenn eine Aufgabe abgeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-585">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="c9d1e-586">Der Funktionsdelegat, der asynchron ausgeführt werden soll, wenn eine Aufgabe im <paramref name="tasks" />-Array abgeschlossen wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-586">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <summary><span data-ttu-id="c9d1e-587">Erstellt ein Fortsetzungs-<see cref="T:System.Threading.Tasks.Task`1" />, das nach dem Abschluss einer Aufgabe im bereitgestellten Satz gestartet wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-587">Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-588">Der neue Fortsetzungs-<see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-588">The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c9d1e-589">Die Ausnahme, die ausgelöst wird, wenn eines der Elemente im <paramref name="tasks" />-Array freigegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-589">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-590">Diese Ausnahme wird ausgelöst, wenn das <paramref name="tasks" />-Array NULL ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-590">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="c9d1e-591">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-591">-or-</span></span> 
<span data-ttu-id="c9d1e-592">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="continuationFunction" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-592">The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c9d1e-593">Diese Ausnahme wird ausgelöst, wenn das <paramref name="tasks" />-Array einen NULL-Wert enthält.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-593">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="c9d1e-594">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-594">-or-</span></span> 
<span data-ttu-id="c9d1e-595">Diese Ausnahme wird ausgelöst, wenn das <paramref name="tasks" />-Array leer ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-595">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-596">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-596">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-597">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-597">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c9d1e-598">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="c9d1e-598">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TResult&gt; (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAny&lt;TResult&gt;(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task, 'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="c9d1e-599">Der Typ des Ergebnisses, das vom <paramref name="continuationFunction" />-Delegaten zurückgegeben und dem erstellten <see cref="T:System.Threading.Tasks.Task`1" />-Element zugeordnet wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-599">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="c9d1e-600">Das Array von Aufgaben, mit denen fortgefahren wird, wenn eine Aufgabe abgeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-600">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="c9d1e-601">Der Funktionsdelegat, der asynchron ausgeführt werden soll, wenn eine Aufgabe im <paramref name="tasks" />-Array abgeschlossen wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-601">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="c9d1e-602">Das <see cref="T:System.Threading.CancellationToken" />, das der neuen Fortsetzungsaufgabe zugewiesen wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-602">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="c9d1e-603">Erstellt ein Fortsetzungs-<see cref="T:System.Threading.Tasks.Task`1" />, das nach dem Abschluss einer Aufgabe im bereitgestellten Satz gestartet wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-603">Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-604">Der neue Fortsetzungs-<see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-604">The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c9d1e-605">Die Ausnahme, die ausgelöst wird, wenn eines der Elemente im <paramref name="tasks" />-Array freigegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-605">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="c9d1e-606">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-606">-or-</span></span> 
<span data-ttu-id="c9d1e-607">Das angegebene <see cref="T:System.Threading.CancellationToken" /> wurde bereits verworfen.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-607">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-608">Diese Ausnahme wird ausgelöst, wenn das <paramref name="tasks" />-Array NULL ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-608">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="c9d1e-609">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-609">-or-</span></span> 
<span data-ttu-id="c9d1e-610">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="continuationFunction" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-610">The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c9d1e-611">Diese Ausnahme wird ausgelöst, wenn das <paramref name="tasks" />-Array einen NULL-Wert enthält.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-611">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="c9d1e-612">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-612">-or-</span></span> 
<span data-ttu-id="c9d1e-613">Diese Ausnahme wird ausgelöst, wenn das <paramref name="tasks" />-Array leer ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-613">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-614">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-614">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-615">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-615">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c9d1e-616">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="c9d1e-616">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TResult&gt; (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAny&lt;TResult&gt;(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny(Of TResult) (tasks As Task(), continuationFunction As Func(Of Task, TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task, 'Result&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="c9d1e-617">Der Typ des Ergebnisses, das vom <paramref name="continuationFunction" />-Delegaten zurückgegeben und dem erstellten <see cref="T:System.Threading.Tasks.Task`1" />-Element zugeordnet wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-617">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="c9d1e-618">Das Array von Aufgaben, mit denen fortgefahren wird, wenn eine Aufgabe abgeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-618">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="c9d1e-619">Der Funktionsdelegat, der asynchron ausgeführt werden soll, wenn eine Aufgabe im <paramref name="tasks" />-Array abgeschlossen wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-619">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="c9d1e-620">Der <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />-Wert, der das Verhalten des erstellten Fortsetzungs-<see cref="T:System.Threading.Tasks.Task`1" /> steuert.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-620">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="c9d1e-621">Erstellt ein Fortsetzungs-<see cref="T:System.Threading.Tasks.Task`1" />, das nach dem Abschluss einer Aufgabe im bereitgestellten Satz gestartet wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-621">Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-622">Der neue Fortsetzungs-<see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-622">The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9d1e-623">Die NotOn \* und OnlyOn \* <xref:System.Threading.Tasks.TaskContinuationOptions>, die für das Einschränken <xref:System.Threading.Tasks.TaskStatus> Zustände, die eine Fortsetzung ausgeführt wird, sind mit ContinueWhenAny ungültig.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-623">The NotOn\* and OnlyOn\* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c9d1e-624">Die Ausnahme, die ausgelöst wird, wenn eines der Elemente im <paramref name="tasks" />-Array freigegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-624">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-625">Diese Ausnahme wird ausgelöst, wenn das <paramref name="tasks" />-Array NULL ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-625">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="c9d1e-626">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-626">-or-</span></span> 
<span data-ttu-id="c9d1e-627">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="continuationFunction" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-627">The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c9d1e-628">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="continuationOptions" />-Argument einen ungültigen TaskContinuationOptions-Wert angibt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-628">The exception that is thrown when the <paramref name="continuationOptions" /> argument specifies an invalid TaskContinuationOptions value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c9d1e-629">Diese Ausnahme wird ausgelöst, wenn das <paramref name="tasks" />-Array einen NULL-Wert enthält.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-629">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="c9d1e-630">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-630">-or-</span></span> 
<span data-ttu-id="c9d1e-631">Diese Ausnahme wird ausgelöst, wenn das <paramref name="tasks" />-Array leer ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-631">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-632">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-632">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-633">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-633">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c9d1e-634">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="c9d1e-634">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TResult&gt; (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAny&lt;TResult&gt;(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task, 'Result&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="c9d1e-635">Der Typ des Ergebnisses, das vom <paramref name="continuationFunction" />-Delegaten zurückgegeben und dem erstellten <see cref="T:System.Threading.Tasks.Task`1" />-Element zugeordnet wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-635">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="c9d1e-636">Das Array von Aufgaben, mit denen fortgefahren wird, wenn eine Aufgabe abgeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-636">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="c9d1e-637">Der Funktionsdelegat, der asynchron ausgeführt werden soll, wenn eine Aufgabe im <paramref name="tasks" />-Array abgeschlossen wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-637">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="c9d1e-638">Das <see cref="T:System.Threading.CancellationToken" />, das der neuen Fortsetzungsaufgabe zugewiesen wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-638">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="c9d1e-639">Der <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />-Wert, der das Verhalten des erstellten Fortsetzungs-<see cref="T:System.Threading.Tasks.Task`1" /> steuert.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-639">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <param name="scheduler"><span data-ttu-id="c9d1e-640">Das <see cref="T:System.Threading.Tasks.TaskScheduler" />, das verwendet wird, um das erstellte Fortsetzungs-<see cref="T:System.Threading.Tasks.Task`1" /> zu planen.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-640">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="c9d1e-641">Erstellt ein Fortsetzungs-<see cref="T:System.Threading.Tasks.Task`1" />, das nach dem Abschluss einer Aufgabe im bereitgestellten Satz gestartet wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-641">Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-642">Der neue Fortsetzungs-<see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-642">The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9d1e-643">Die NotOn \* und OnlyOn \* <xref:System.Threading.Tasks.TaskContinuationOptions>, die für das Einschränken <xref:System.Threading.Tasks.TaskStatus> Zustände, die eine Fortsetzung ausgeführt wird, sind mit ContinueWhenAny ungültig.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-643">The NotOn\* and OnlyOn\* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-644">Diese Ausnahme wird ausgelöst, wenn das <paramref name="tasks" />-Array NULL ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-644">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="c9d1e-645">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-645">-or-</span></span> 
<span data-ttu-id="c9d1e-646">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="continuationFunction" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-646">The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</span></span>  
  
<span data-ttu-id="c9d1e-647">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-647">-or-</span></span> 
<span data-ttu-id="c9d1e-648">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="scheduler" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-648">The exception that is thrown when the <paramref name="scheduler" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c9d1e-649">Diese Ausnahme wird ausgelöst, wenn das <paramref name="tasks" />-Array einen NULL-Wert enthält.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-649">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="c9d1e-650">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-650">-or-</span></span> 
<span data-ttu-id="c9d1e-651">Diese Ausnahme wird ausgelöst, wenn das <paramref name="tasks" />-Array leer ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-651">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-652">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-652">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-653">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-653">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c9d1e-654">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="c9d1e-654">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TAntecedentResult,TResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt; continuationFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAny&lt;TAntecedentResult, TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;, !!TResult&gt; continuationFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny(Of TAntecedentResult, TResult) (tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^, TResult&gt; ^ continuationFunction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;, 'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="c9d1e-655">Der Ergebnistyp des vorangehenden <paramref name="tasks" />-Elements.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-655">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="c9d1e-656">Der Typ des Ergebnisses, das vom <paramref name="continuationFunction" />-Delegaten zurückgegeben und dem erstellten <see cref="T:System.Threading.Tasks.Task`1" />-Element zugeordnet wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-656">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="c9d1e-657">Das Array von Aufgaben, mit denen fortgefahren wird, wenn eine Aufgabe abgeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-657">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="c9d1e-658">Der Funktionsdelegat, der asynchron ausgeführt werden soll, wenn eine Aufgabe im <paramref name="tasks" />-Array abgeschlossen wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-658">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <summary><span data-ttu-id="c9d1e-659">Erstellt ein Fortsetzungs-<see cref="T:System.Threading.Tasks.Task`1" />, das nach dem Abschluss einer Aufgabe im bereitgestellten Satz gestartet wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-659">Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-660">Der neue Fortsetzungs-<see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-660">The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c9d1e-661">Die Ausnahme, die ausgelöst wird, wenn eines der Elemente im <paramref name="tasks" />-Array freigegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-661">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-662">Diese Ausnahme wird ausgelöst, wenn das <paramref name="tasks" />-Array NULL ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-662">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="c9d1e-663">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-663">-or-</span></span> 
<span data-ttu-id="c9d1e-664">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="continuationFunction" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-664">The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c9d1e-665">Diese Ausnahme wird ausgelöst, wenn das <paramref name="tasks" />-Array einen NULL-Wert enthält.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-665">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="c9d1e-666">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-666">-or-</span></span> 
<span data-ttu-id="c9d1e-667">Diese Ausnahme wird ausgelöst, wenn das <paramref name="tasks" />-Array leer ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-667">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-668">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-668">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-669">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-669">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c9d1e-670">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="c9d1e-670">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TAntecedentResult,TResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAny&lt;TAntecedentResult, TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;, !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;, 'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="c9d1e-671">Der Ergebnistyp des vorangehenden <paramref name="tasks" />-Elements.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-671">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="c9d1e-672">Der Typ des Ergebnisses, das vom <paramref name="continuationFunction" />-Delegaten zurückgegeben und dem erstellten <see cref="T:System.Threading.Tasks.Task`1" />-Element zugeordnet wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-672">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="c9d1e-673">Das Array von Aufgaben, mit denen fortgefahren wird, wenn eine Aufgabe abgeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-673">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="c9d1e-674">Der Funktionsdelegat, der asynchron ausgeführt werden soll, wenn eine Aufgabe im <paramref name="tasks" />-Array abgeschlossen wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-674">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="c9d1e-675">Das <see cref="T:System.Threading.CancellationToken" />, das der neuen Fortsetzungsaufgabe zugewiesen wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-675">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="c9d1e-676">Erstellt ein Fortsetzungs-<see cref="T:System.Threading.Tasks.Task`1" />, das nach dem Abschluss einer Aufgabe im bereitgestellten Satz gestartet wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-676">Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-677">Der neue Fortsetzungs-<see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-677">The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c9d1e-678">Die Ausnahme, die ausgelöst wird, wenn eines der Elemente im <paramref name="tasks" />-Array freigegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-678">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="c9d1e-679">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-679">-or-</span></span> 
<span data-ttu-id="c9d1e-680">Das angegebene <see cref="T:System.Threading.CancellationToken" /> wurde bereits verworfen.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-680">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-681">Diese Ausnahme wird ausgelöst, wenn das <paramref name="tasks" />-Array NULL ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-681">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="c9d1e-682">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-682">-or-</span></span> 
<span data-ttu-id="c9d1e-683">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="continuationFunction" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-683">The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c9d1e-684">Diese Ausnahme wird ausgelöst, wenn das <paramref name="tasks" />-Array einen NULL-Wert enthält.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-684">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="c9d1e-685">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-685">-or-</span></span> 
<span data-ttu-id="c9d1e-686">Diese Ausnahme wird ausgelöst, wenn das <paramref name="tasks" />-Array leer ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-686">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-687">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-687">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-688">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-688">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c9d1e-689">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="c9d1e-689">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TAntecedentResult,TResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt; continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAny&lt;TAntecedentResult, TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;, !!TResult&gt; continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny(Of TAntecedentResult, TResult) (tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;, 'Result&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="c9d1e-690">Der Ergebnistyp des vorangehenden <paramref name="tasks" />-Elements.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-690">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="c9d1e-691">Der Typ des Ergebnisses, das vom <paramref name="continuationFunction" />-Delegaten zurückgegeben und dem erstellten <see cref="T:System.Threading.Tasks.Task`1" />-Element zugeordnet wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-691">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="c9d1e-692">Das Array von Aufgaben, mit denen fortgefahren wird, wenn eine Aufgabe abgeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-692">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="c9d1e-693">Der Funktionsdelegat, der asynchron ausgeführt werden soll, wenn eine Aufgabe im <paramref name="tasks" />-Array abgeschlossen wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-693">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="c9d1e-694">Der <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />-Wert, der das Verhalten des erstellten Fortsetzungs-<see cref="T:System.Threading.Tasks.Task`1" /> steuert.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-694">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="c9d1e-695">Erstellt ein Fortsetzungs-<see cref="T:System.Threading.Tasks.Task`1" />, das nach dem Abschluss einer Aufgabe im bereitgestellten Satz gestartet wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-695">Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-696">Der neue Fortsetzungs-<see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-696">The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9d1e-697">Die NotOn \* und OnlyOn \* <xref:System.Threading.Tasks.TaskContinuationOptions>, die für das Einschränken <xref:System.Threading.Tasks.TaskStatus> Zustände, die eine Fortsetzung ausgeführt wird, sind mit ContinueWhenAny ungültig.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-697">The NotOn\* and OnlyOn\* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c9d1e-698">Die Ausnahme, die ausgelöst wird, wenn eines der Elemente im <paramref name="tasks" />-Array freigegeben wurde.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-698">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-699">Diese Ausnahme wird ausgelöst, wenn das <paramref name="tasks" />-Array NULL ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-699">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="c9d1e-700">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-700">-or-</span></span> 
<span data-ttu-id="c9d1e-701">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="continuationFunction" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-701">The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c9d1e-702">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="continuationOptions" />-Argument einen ungültigen TaskContinuationOptions-Wert angibt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-702">The exception that is thrown when the <paramref name="continuationOptions" /> argument specifies an invalid TaskContinuationOptions value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c9d1e-703">Diese Ausnahme wird ausgelöst, wenn das <paramref name="tasks" />-Array einen NULL-Wert enthält.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-703">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="c9d1e-704">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-704">-or-</span></span> 
<span data-ttu-id="c9d1e-705">Diese Ausnahme wird ausgelöst, wenn das <paramref name="tasks" />-Array leer ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-705">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-706">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-706">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-707">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-707">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c9d1e-708">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="c9d1e-708">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TAntecedentResult,TResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAny&lt;TAntecedentResult, TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;, !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;, 'Result&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="c9d1e-709">Der Ergebnistyp des vorangehenden <paramref name="tasks" />-Elements.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-709">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="c9d1e-710">Der Typ des Ergebnisses, das vom <paramref name="continuationFunction" />-Delegaten zurückgegeben und dem erstellten <see cref="T:System.Threading.Tasks.Task`1" />-Element zugeordnet wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-710">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="c9d1e-711">Das Array von Aufgaben, mit denen fortgefahren wird, wenn eine Aufgabe abgeschlossen ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-711">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="c9d1e-712">Der Funktionsdelegat, der asynchron ausgeführt werden soll, wenn eine Aufgabe im <paramref name="tasks" />-Array abgeschlossen wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-712">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="c9d1e-713">Das <see cref="T:System.Threading.CancellationToken" />, das der neuen Fortsetzungsaufgabe zugewiesen wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-713">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="c9d1e-714">Der <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />-Wert, der das Verhalten des erstellten Fortsetzungs-<see cref="T:System.Threading.Tasks.Task`1" /> steuert.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-714">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <param name="scheduler"><span data-ttu-id="c9d1e-715">Das <see cref="T:System.Threading.Tasks.TaskScheduler" />, das verwendet wird, um das erstellte Fortsetzungs-<see cref="T:System.Threading.Tasks.Task`1" /> zu planen.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-715">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="c9d1e-716">Erstellt ein Fortsetzungs-<see cref="T:System.Threading.Tasks.Task`1" />, das nach dem Abschluss einer Aufgabe im bereitgestellten Satz gestartet wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-716">Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-717">Der neue Fortsetzungs-<see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-717">The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9d1e-718">Die NotOn \* und OnlyOn \* <xref:System.Threading.Tasks.TaskContinuationOptions>, die für das Einschränken <xref:System.Threading.Tasks.TaskStatus> Zustände, die eine Fortsetzung ausgeführt wird, sind mit ContinueWhenAny ungültig.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-718">The NotOn\* and OnlyOn\* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-719">Diese Ausnahme wird ausgelöst, wenn das <paramref name="tasks" />-Array NULL ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-719">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="c9d1e-720">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-720">-or-</span></span> 
<span data-ttu-id="c9d1e-721">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="continuationFunction" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-721">The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</span></span>  
  
<span data-ttu-id="c9d1e-722">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-722">-or-</span></span> 
<span data-ttu-id="c9d1e-723">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="scheduler" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-723">The exception that is thrown when the <paramref name="scheduler" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c9d1e-724">Diese Ausnahme wird ausgelöst, wenn das <paramref name="tasks" />-Array einen NULL-Wert enthält.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-724">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="c9d1e-725">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-725">-or-</span></span> 
<span data-ttu-id="c9d1e-726">Diese Ausnahme wird ausgelöst, wenn das <paramref name="tasks" />-Array leer ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-726">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-727">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-727">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-728">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-728">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c9d1e-729">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="c9d1e-729">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CreationOptions">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.TaskCreationOptions CreationOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.Tasks.TaskCreationOptions CreationOptions" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.TaskFactory.CreationOptions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CreationOptions As TaskCreationOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::TaskCreationOptions CreationOptions { System::Threading::Tasks::TaskCreationOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.CreationOptions : System.Threading.Tasks.TaskCreationOptions" Usage="System.Threading.Tasks.TaskFactory.CreationOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskCreationOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c9d1e-730">Ruft die standardmäßigen Aufgabenerstellungsoptionen für diese Aufgabenfactory ab.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-730">Gets the default task creation options for this task factory.</span></span></summary>
        <value><span data-ttu-id="c9d1e-731">Die standardmäßigen Aufgabenerstellungsoptionen für diese Aufgabenfactory.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-731">The default task creation options for this task factory.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9d1e-732">Den Wert der Eigenschaft wird verwendet, alle Aufgaben erstellen, es sei denn, andere Optionen beim Aufrufen der Methoden dieser Factory explizit angegeben werden.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-732">The property value is used to create all tasks, unless other options are explicitly specified during calls to this factory's methods.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-733">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-733">Task Parallel Library (TPL)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FromAsync">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c9d1e-734">Erstellt ein <see cref="T:System.Threading.Tasks.Task" />, das ein dem asynchronen Programmiermodellmuster entsprechendes Paar von Begin- und End-Methoden darstellt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-734">Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-735">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-735">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="c9d1e-736">Verwenden von TPL mit anderen asynchronen Mustern</span><span class="sxs-lookup"><span data-stu-id="c9d1e-736">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="FromAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync (IAsyncResult asyncResult, Action&lt;IAsyncResult&gt; endMethod);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync(class System.IAsyncResult asyncResult, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync (asyncResult As IAsyncResult, endMethod As Action(Of IAsyncResult)) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ FromAsync(IAsyncResult ^ asyncResult, Action&lt;IAsyncResult ^&gt; ^ endMethod);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : IAsyncResult * Action&lt;IAsyncResult&gt; -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (asyncResult, endMethod)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="c9d1e-737">Das IAsyncResult-Element, dessen Abschluss die Verarbeitung des <paramref name="endMethod" />-Elements auslösen sollte.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-737">The IAsyncResult whose completion should trigger the processing of the <paramref name="endMethod" />.</span></span></param>
        <param name="endMethod"><span data-ttu-id="c9d1e-738">Der Aktionsdelegat, der das abgeschlossene <paramref name="asyncResult" />-Objekt verarbeitet.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-738">The action delegate that processes the completed <paramref name="asyncResult" />.</span></span></param>
        <summary><span data-ttu-id="c9d1e-739">Erstellt ein <see cref="T:System.Threading.Tasks.Task" />-Element, das eine Endmethodenaktion ausführt, wenn ein angegebenes <see cref="T:System.IAsyncResult" />-Objekt abgeschlossen wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-739">Creates a <see cref="T:System.Threading.Tasks.Task" /> that executes an end method action when a specified <see cref="T:System.IAsyncResult" /> completes.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-740">Ein <see cref="T:System.Threading.Tasks.Task" />-Element, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-740">A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!TIP]
>  <span data-ttu-id="c9d1e-741">Die <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> -Überladungen nehmen einen `asyncResult` -Parameter sind nicht so effizient wie der Überladungen, die eine `beginMethod` Parameter.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-741">The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter.</span></span> <span data-ttu-id="c9d1e-742">Wenn die Leistung ein Problem ist, verwenden Sie die Überladungen, die bieten die `beginMethod` / `endMethod` Muster.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-742">If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-743">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="asyncResult" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-743">The exception that is thrown when the <paramref name="asyncResult" /> argument is null.</span></span>  
  
<span data-ttu-id="c9d1e-744">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-744">-or-</span></span> 
<span data-ttu-id="c9d1e-745">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="endMethod" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-745">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-746">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-746">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="c9d1e-747">Verwenden von TPL mit anderen asynchronen Mustern</span><span class="sxs-lookup"><span data-stu-id="c9d1e-747">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync (Func&lt;AsyncCallback,object,IAsyncResult&gt; beginMethod, Action&lt;IAsyncResult&gt; endMethod, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync(class System.Func`3&lt;class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync (beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), state As Object) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ FromAsync(Func&lt;AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Action&lt;IAsyncResult ^&gt; ^ endMethod, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;AsyncCallback, obj, IAsyncResult&gt; * Action&lt;IAsyncResult&gt; * obj -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (beginMethod, endMethod, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="beginMethod"><span data-ttu-id="c9d1e-748">Der Delegat, der den asynchronen Vorgang startet.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-748">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="c9d1e-749">Der Delegat, der den asynchronen Vorgang beendet.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-749">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="state"><span data-ttu-id="c9d1e-750">Ein Objekt, das vom <paramref name="beginMethod" />-Delegaten zu verwendende Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-750">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <summary><span data-ttu-id="c9d1e-751">Erstellt ein <see cref="T:System.Threading.Tasks.Task" />, das ein dem asynchronen Programmiermodellmuster entsprechendes Paar von Begin- und End-Methoden darstellt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-751">Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-752">Der erstellte <see cref="T:System.Threading.Tasks.Task" />, der den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-752">The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9d1e-753">Die `beginMethod` Delegat für den Thread gestartet wird, die <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-753">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span>  <span data-ttu-id="c9d1e-754">Diese Methode löst Ausnahmen, die von der `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-754">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-755">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="beginMethod" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-755">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="c9d1e-756">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-756">-or-</span></span> 
<span data-ttu-id="c9d1e-757">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="endMethod" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-757">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-758">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-758">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="c9d1e-759">Verwenden von TPL mit anderen asynchronen Mustern</span><span class="sxs-lookup"><span data-stu-id="c9d1e-759">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync (IAsyncResult asyncResult, Action&lt;IAsyncResult&gt; endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync(class System.IAsyncResult asyncResult, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync (asyncResult As IAsyncResult, endMethod As Action(Of IAsyncResult), creationOptions As TaskCreationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ FromAsync(IAsyncResult ^ asyncResult, Action&lt;IAsyncResult ^&gt; ^ endMethod, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : IAsyncResult * Action&lt;IAsyncResult&gt; * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (asyncResult, endMethod, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="c9d1e-760">Das IAsyncResult-Element, dessen Abschluss die Verarbeitung des <paramref name="endMethod" />-Elements auslösen sollte.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-760">The IAsyncResult whose completion should trigger the processing of the <paramref name="endMethod" />.</span></span></param>
        <param name="endMethod"><span data-ttu-id="c9d1e-761">Der Aktionsdelegat, der das abgeschlossene <paramref name="asyncResult" />-Objekt verarbeitet.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-761">The action delegate that processes the completed <paramref name="asyncResult" />.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="c9d1e-762">Der TaskCreationOptions-Wert, der das Verhalten des erstellten <see cref="T:System.Threading.Tasks.Task" /> steuert.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-762">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" />.</span></span></param>
        <summary><span data-ttu-id="c9d1e-763">Erstellt ein <see cref="T:System.Threading.Tasks.Task" />-Element, das eine Endmethodenaktion ausführt, wenn ein angegebenes <see cref="T:System.IAsyncResult" />-Objekt abgeschlossen wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-763">Creates a <see cref="T:System.Threading.Tasks.Task" /> that executes an end method action when a specified <see cref="T:System.IAsyncResult" /> completes.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-764">Ein <see cref="T:System.Threading.Tasks.Task" />-Element, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-764">A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!TIP]
>  <span data-ttu-id="c9d1e-765">Die <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> -Überladungen nehmen einen `asyncResult` -Parameter sind nicht so effizient wie der Überladungen, die eine `beginMethod` Parameter.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-765">The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter.</span></span> <span data-ttu-id="c9d1e-766">Wenn die Leistung ein Problem ist, verwenden Sie die Überladungen, die bieten die `beginMethod` / `endMethod` Muster.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-766">If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-767">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="asyncResult" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-767">The exception that is thrown when the <paramref name="asyncResult" /> argument is null.</span></span>  
  
<span data-ttu-id="c9d1e-768">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-768">-or-</span></span> 
<span data-ttu-id="c9d1e-769">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="endMethod" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-769">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c9d1e-770">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="creationOptions" />-Argument einen ungültigen TaskCreationOptions-Wert angibt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-770">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="c9d1e-771">Weitere Informationen finden Sie in den Hinweisen zu <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-771">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-772">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-772">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="c9d1e-773">Verwenden von TPL mit anderen asynchronen Mustern</span><span class="sxs-lookup"><span data-stu-id="c9d1e-773">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync (Func&lt;AsyncCallback,object,IAsyncResult&gt; beginMethod, Action&lt;IAsyncResult&gt; endMethod, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync(class System.Func`3&lt;class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync (beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), state As Object, creationOptions As TaskCreationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ FromAsync(Func&lt;AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Action&lt;IAsyncResult ^&gt; ^ endMethod, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;AsyncCallback, obj, IAsyncResult&gt; * Action&lt;IAsyncResult&gt; * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (beginMethod, endMethod, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="beginMethod"><span data-ttu-id="c9d1e-774">Der Delegat, der den asynchronen Vorgang startet.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-774">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="c9d1e-775">Der Delegat, der den asynchronen Vorgang beendet.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-775">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="state"><span data-ttu-id="c9d1e-776">Ein Objekt, das vom <paramref name="beginMethod" />-Delegaten zu verwendende Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-776">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="c9d1e-777">Der TaskCreationOptions-Wert, der das Verhalten des erstellten <see cref="T:System.Threading.Tasks.Task" /> steuert.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-777">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" />.</span></span></param>
        <summary><span data-ttu-id="c9d1e-778">Erstellt ein <see cref="T:System.Threading.Tasks.Task" />, das ein dem asynchronen Programmiermodellmuster entsprechendes Paar von Begin- und End-Methoden darstellt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-778">Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-779">Der erstellte <see cref="T:System.Threading.Tasks.Task" />, der den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-779">The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9d1e-780">Die `beginMethod` Delegat für den Thread gestartet wird, die <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-780">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="c9d1e-781">Diese Methode löst Ausnahmen, die von der `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-781">This method throws any exceptions thrown by the `beginMethod`.</span></span> <span data-ttu-id="c9d1e-782">Die <xref:System.Threading.Tasks.TaskCreationOptions> Werte <xref:System.Threading.Tasks.TaskCreationOptions.PreferFairness>, <xref:System.Threading.Tasks.TaskCreationOptions.LongRunning> und <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent> sind sich gegenseitig ausschließende.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-782">The <xref:System.Threading.Tasks.TaskCreationOptions> values <xref:System.Threading.Tasks.TaskCreationOptions.PreferFairness>, <xref:System.Threading.Tasks.TaskCreationOptions.LongRunning> and <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent> are all mutually exclusive.</span></span> <span data-ttu-id="c9d1e-783">In den FromAsync-Methoden entweder `LongRunning` oder `AttachedToParent` selbst führt dazu, dass ein <xref:System.ArgumentOutOfRangeException> ausgelöst wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-783">In the FromAsync methods, either `LongRunning` or `AttachedToParent` by themselves will cause an <xref:System.ArgumentOutOfRangeException> to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-784">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="beginMethod" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-784">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="c9d1e-785">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-785">-or-</span></span> 
<span data-ttu-id="c9d1e-786">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="endMethod" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-786">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c9d1e-787">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="creationOptions" />-Argument einen ungültigen TaskCreationOptions-Wert angibt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-787">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-788">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-788">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="c9d1e-789">Verwenden von TPL mit anderen asynchronen Mustern</span><span class="sxs-lookup"><span data-stu-id="c9d1e-789">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync (IAsyncResult asyncResult, Action&lt;IAsyncResult&gt; endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync(class System.IAsyncResult asyncResult, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync (asyncResult As IAsyncResult, endMethod As Action(Of IAsyncResult), creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ FromAsync(IAsyncResult ^ asyncResult, Action&lt;IAsyncResult ^&gt; ^ endMethod, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : IAsyncResult * Action&lt;IAsyncResult&gt; * System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (asyncResult, endMethod, creationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="c9d1e-790">Das IAsyncResult-Element, dessen Abschluss die Verarbeitung des <paramref name="endMethod" />-Elements auslösen sollte.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-790">The IAsyncResult whose completion should trigger the processing of the <paramref name="endMethod" />.</span></span></param>
        <param name="endMethod"><span data-ttu-id="c9d1e-791">Der Aktionsdelegat, der das abgeschlossene <paramref name="asyncResult" />-Objekt verarbeitet.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-791">The action delegate that processes the completed <paramref name="asyncResult" />.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="c9d1e-792">Der TaskCreationOptions-Wert, der das Verhalten des erstellten <see cref="T:System.Threading.Tasks.Task" /> steuert.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-792">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" />.</span></span></param>
        <param name="scheduler"><span data-ttu-id="c9d1e-793">Das <see cref="T:System.Threading.Tasks.TaskScheduler" />-Element, das verwendet wird, um die Aufgabe zu planen, die die Endmethode ausführt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-793">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the task that executes the end method.</span></span></param>
        <summary><span data-ttu-id="c9d1e-794">Erstellt ein <see cref="T:System.Threading.Tasks.Task" />-Element, das eine Endmethodenaktion ausführt, wenn ein angegebenes <see cref="T:System.IAsyncResult" />-Objekt abgeschlossen wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-794">Creates a <see cref="T:System.Threading.Tasks.Task" /> that executes an end method action when a specified <see cref="T:System.IAsyncResult" /> completes.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-795">Der erstellte <see cref="T:System.Threading.Tasks.Task" />, der den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-795">The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!TIP]
>  <span data-ttu-id="c9d1e-796">Die <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> -Überladungen nehmen einen `asyncResult` -Parameter sind nicht so effizient wie der Überladungen, die eine `beginMethod` Parameter.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-796">The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter.</span></span> <span data-ttu-id="c9d1e-797">Wenn die Leistung ein Problem ist, verwenden Sie die Überladungen, die bieten die `beginMethod` / `endMethod` Muster.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-797">If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-798">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="asyncResult" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-798">The exception that is thrown when the <paramref name="asyncResult" /> argument is null.</span></span>  
  
<span data-ttu-id="c9d1e-799">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-799">-or-</span></span> 
<span data-ttu-id="c9d1e-800">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="endMethod" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-800">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="c9d1e-801">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-801">-or-</span></span> 
<span data-ttu-id="c9d1e-802">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="scheduler" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-802">The exception that is thrown when the <paramref name="scheduler" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c9d1e-803">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="creationOptions" />-Argument einen ungültigen TaskCreationOptions-Wert angibt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-803">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="c9d1e-804">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="creationOptions" />-Argument einen ungültigen TaskCreationOptions-Wert angibt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-804">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="c9d1e-805">Weitere Informationen finden Sie in den Hinweisen zu <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-805">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-806">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-806">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="c9d1e-807">Verwenden von TPL mit anderen asynchronen Mustern</span><span class="sxs-lookup"><span data-stu-id="c9d1e-807">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync&lt;TArg1&gt; (Func&lt;TArg1,AsyncCallback,object,IAsyncResult&gt; beginMethod, Action&lt;IAsyncResult&gt; endMethod, TArg1 arg1, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync&lt;TArg1&gt;(class System.Func`4&lt;!!TArg1, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, !!TArg1 arg1, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1) (beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, state As Object) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1&gt;&#xA; System::Threading::Tasks::Task ^ FromAsync(Func&lt;TArg1, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Action&lt;IAsyncResult ^&gt; ^ endMethod, TArg1 arg1, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, AsyncCallback, obj, IAsyncResult&gt; * Action&lt;IAsyncResult&gt; * 'TArg1 * obj -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="c9d1e-808">Der Typ des ersten, an den <paramref name="beginMethod" />-Delegaten übergebenen Arguments.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-808">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="c9d1e-809">Der Delegat, der den asynchronen Vorgang startet.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-809">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="c9d1e-810">Der Delegat, der den asynchronen Vorgang beendet.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-810">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="c9d1e-811">Das erste an den <paramref name="beginMethod" />-Delegaten übergebene Argument.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-811">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="c9d1e-812">Ein Objekt, das vom <paramref name="beginMethod" />-Delegaten zu verwendende Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-812">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <summary><span data-ttu-id="c9d1e-813">Erstellt ein <see cref="T:System.Threading.Tasks.Task" />, das ein dem asynchronen Programmiermodellmuster entsprechendes Paar von Begin- und End-Methoden darstellt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-813">Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-814">Der erstellte <see cref="T:System.Threading.Tasks.Task" />, der den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-814">The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9d1e-815">Die `beginMethod` Delegat für den Thread gestartet wird, die <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-815">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="c9d1e-816">Diese Methode löst Ausnahmen, die von der `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-816">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-817">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="beginMethod" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-817">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="c9d1e-818">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-818">-or-</span></span> 
<span data-ttu-id="c9d1e-819">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="endMethod" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-819">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-820">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-820">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="c9d1e-821">Verwenden von TPL mit anderen asynchronen Mustern</span><span class="sxs-lookup"><span data-stu-id="c9d1e-821">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync&lt;TArg1&gt; (Func&lt;TArg1,AsyncCallback,object,IAsyncResult&gt; beginMethod, Action&lt;IAsyncResult&gt; endMethod, TArg1 arg1, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync&lt;TArg1&gt;(class System.Func`4&lt;!!TArg1, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, !!TArg1 arg1, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1) (beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, state As Object, creationOptions As TaskCreationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1&gt;&#xA; System::Threading::Tasks::Task ^ FromAsync(Func&lt;TArg1, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Action&lt;IAsyncResult ^&gt; ^ endMethod, TArg1 arg1, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, AsyncCallback, obj, IAsyncResult&gt; * Action&lt;IAsyncResult&gt; * 'TArg1 * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="c9d1e-822">Der Typ des ersten, an den <paramref name="beginMethod" />-Delegaten übergebenen Arguments.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-822">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="c9d1e-823">Der Delegat, der den asynchronen Vorgang startet.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-823">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="c9d1e-824">Der Delegat, der den asynchronen Vorgang beendet.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-824">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="c9d1e-825">Das erste an den <paramref name="beginMethod" />-Delegaten übergebene Argument.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-825">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="c9d1e-826">Ein Objekt, das vom <paramref name="beginMethod" />-Delegaten zu verwendende Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-826">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="c9d1e-827">Der TaskCreationOptions-Wert, der das Verhalten des erstellten <see cref="T:System.Threading.Tasks.Task" /> steuert.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-827">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" />.</span></span></param>
        <summary><span data-ttu-id="c9d1e-828">Erstellt ein <see cref="T:System.Threading.Tasks.Task" />, das ein dem asynchronen Programmiermodellmuster entsprechendes Paar von Begin- und End-Methoden darstellt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-828">Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-829">Der erstellte <see cref="T:System.Threading.Tasks.Task" />, der den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-829">The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9d1e-830">Die `beginMethod` Delegat für den Thread gestartet wird, die <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-830">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="c9d1e-831">Diese Methode löst Ausnahmen, die von der `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-831">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-832">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="beginMethod" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-832">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="c9d1e-833">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-833">-or-</span></span> 
<span data-ttu-id="c9d1e-834">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="endMethod" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-834">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c9d1e-835">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="creationOptions" />-Argument einen ungültigen TaskCreationOptions-Wert angibt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-835">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="c9d1e-836">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="creationOptions" />-Argument einen ungültigen TaskCreationOptions-Wert angibt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-836">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="c9d1e-837">Weitere Informationen finden Sie in den Hinweisen zu <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-837">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-838">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-838">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="c9d1e-839">Verwenden von TPL mit anderen asynchronen Mustern</span><span class="sxs-lookup"><span data-stu-id="c9d1e-839">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TResult&gt; (IAsyncResult asyncResult, Func&lt;IAsyncResult,TResult&gt; endMethod);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TResult&gt;(class System.IAsyncResult asyncResult, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TResult) (asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(IAsyncResult ^ asyncResult, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : IAsyncResult * Func&lt;IAsyncResult, 'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (asyncResult, endMethod)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="c9d1e-840">Der Typ des Ergebnisses, das über das <see cref="T:System.Threading.Tasks.Task`1" />-Element verfügbar ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-840">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="asyncResult"><span data-ttu-id="c9d1e-841">Das IAsyncResult-Element, dessen Abschluss die Verarbeitung des <paramref name="endMethod" />-Elements auslösen sollte.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-841">The IAsyncResult whose completion should trigger the processing of the <paramref name="endMethod" />.</span></span></param>
        <param name="endMethod"><span data-ttu-id="c9d1e-842">Der Funktionsdelegat, der das abgeschlossene <paramref name="asyncResult" />-Objekt verarbeitet.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-842">The function delegate that processes the completed <paramref name="asyncResult" />.</span></span></param>
        <summary><span data-ttu-id="c9d1e-843">Erstellt ein <see cref="T:System.Threading.Tasks.Task`1" />-Element, das eine Endmethodenfunktion ausführt, wenn ein angegebenes <see cref="T:System.IAsyncResult" />-Objekt abgeschlossen wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-843">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that executes an end method function when a specified <see cref="T:System.IAsyncResult" /> completes.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-844">Ein <see cref="T:System.Threading.Tasks.Task`1" />-Element, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-844">A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!TIP]
>  <span data-ttu-id="c9d1e-845">Die <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> -Überladungen nehmen einen `asyncResult` -Parameter sind nicht so effizient wie der Überladungen, die eine `beginMethod` Parameter.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-845">The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter.</span></span> <span data-ttu-id="c9d1e-846">Wenn die Leistung ein Problem ist, verwenden Sie die Überladungen, die bieten die `beginMethod` / `endMethod` Muster.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-846">If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-847">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="asyncResult" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-847">The exception that is thrown when the <paramref name="asyncResult" /> argument is null.</span></span>  
  
<span data-ttu-id="c9d1e-848">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-848">-or-</span></span> 
<span data-ttu-id="c9d1e-849">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="endMethod" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-849">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-850">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-850">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-851">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-851">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c9d1e-852">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="c9d1e-852">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TResult&gt; (Func&lt;AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TResult&gt;(class System.Func`3&lt;class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TResult) (beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), state As Object) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="c9d1e-853">Der Typ des Ergebnisses, das über das <see cref="T:System.Threading.Tasks.Task`1" />-Element verfügbar ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-853">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="c9d1e-854">Der Delegat, der den asynchronen Vorgang startet.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-854">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="c9d1e-855">Der Delegat, der den asynchronen Vorgang beendet.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-855">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="state"><span data-ttu-id="c9d1e-856">Ein Objekt, das vom <paramref name="beginMethod" />-Delegaten zu verwendende Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-856">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <summary><span data-ttu-id="c9d1e-857">Erstellt ein <see cref="T:System.Threading.Tasks.Task`1" />, das ein dem asynchronen Programmiermodellmuster entsprechendes Paar von Begin- und End-Methoden darstellt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-857">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-858">Der erstellte <see cref="T:System.Threading.Tasks.Task`1" />, der den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-858">The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9d1e-859">Diese Methode löst Ausnahmen, die von der `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-859">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-860">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="beginMethod" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-860">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="c9d1e-861">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-861">-or-</span></span> 
<span data-ttu-id="c9d1e-862">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="endMethod" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-862">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-863">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-863">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="c9d1e-864">Verwenden von TPL mit anderen asynchronen Mustern</span><span class="sxs-lookup"><span data-stu-id="c9d1e-864">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TResult&gt; (IAsyncResult asyncResult, Func&lt;IAsyncResult,TResult&gt; endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TResult&gt;(class System.IAsyncResult asyncResult, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TResult) (asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult), creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(IAsyncResult ^ asyncResult, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : IAsyncResult * Func&lt;IAsyncResult, 'Result&gt; * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (asyncResult, endMethod, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="c9d1e-865">Der Typ des Ergebnisses, das über das <see cref="T:System.Threading.Tasks.Task`1" />-Element verfügbar ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-865">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="asyncResult"><span data-ttu-id="c9d1e-866">Das IAsyncResult-Element, dessen Abschluss die Verarbeitung des <paramref name="endMethod" />-Elements auslösen sollte.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-866">The IAsyncResult whose completion should trigger the processing of the <paramref name="endMethod" />.</span></span></param>
        <param name="endMethod"><span data-ttu-id="c9d1e-867">Der Funktionsdelegat, der das abgeschlossene <paramref name="asyncResult" />-Objekt verarbeitet.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-867">The function delegate that processes the completed <paramref name="asyncResult" />.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="c9d1e-868">Der TaskCreationOptions-Wert, der das Verhalten des erstellten <see cref="T:System.Threading.Tasks.Task`1" /> steuert.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-868">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="c9d1e-869">Erstellt ein <see cref="T:System.Threading.Tasks.Task`1" />-Element, das eine Endmethodenfunktion ausführt, wenn ein angegebenes <see cref="T:System.IAsyncResult" />-Objekt abgeschlossen wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-869">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that executes an end method function when a specified <see cref="T:System.IAsyncResult" /> completes.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-870">Ein <see cref="T:System.Threading.Tasks.Task`1" />-Element, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-870">A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!TIP]
>  <span data-ttu-id="c9d1e-871">Die <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> -Überladungen nehmen einen `asyncResult` -Parameter sind nicht so effizient wie der Überladungen, die eine `beginMethod` Parameter.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-871">The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter.</span></span> <span data-ttu-id="c9d1e-872">Wenn die Leistung ein Problem ist, verwenden Sie die Überladungen, die bieten die `beginMethod` / `endMethod` Muster.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-872">If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-873">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="asyncResult" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-873">The exception that is thrown when the <paramref name="asyncResult" /> argument is null.</span></span>  
  
<span data-ttu-id="c9d1e-874">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-874">-or-</span></span> 
<span data-ttu-id="c9d1e-875">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="endMethod" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-875">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c9d1e-876">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="creationOptions" />-Argument einen ungültigen TaskCreationOptions-Wert angibt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-876">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="c9d1e-877">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="creationOptions" />-Argument einen ungültigen TaskCreationOptions-Wert angibt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-877">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="c9d1e-878">Weitere Informationen finden Sie in den Hinweisen zu <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-878">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-879">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-879">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="c9d1e-880">Verwenden von TPL mit anderen asynchronen Mustern</span><span class="sxs-lookup"><span data-stu-id="c9d1e-880">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TResult&gt; (Func&lt;AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TResult&gt;(class System.Func`3&lt;class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TResult) (beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="c9d1e-881">Der Typ des Ergebnisses, das über das <see cref="T:System.Threading.Tasks.Task`1" />-Element verfügbar ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-881">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="c9d1e-882">Der Delegat, der den asynchronen Vorgang startet.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-882">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="c9d1e-883">Der Delegat, der den asynchronen Vorgang beendet.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-883">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="state"><span data-ttu-id="c9d1e-884">Ein Objekt, das vom <paramref name="beginMethod" />-Delegaten zu verwendende Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-884">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="c9d1e-885">Der TaskCreationOptions-Wert, der das Verhalten des erstellten <see cref="T:System.Threading.Tasks.Task`1" /> steuert.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-885">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="c9d1e-886">Erstellt ein <see cref="T:System.Threading.Tasks.Task`1" />, das ein dem asynchronen Programmiermodellmuster entsprechendes Paar von Begin- und End-Methoden darstellt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-886">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-887">Der erstellte <see cref="T:System.Threading.Tasks.Task`1" />, der den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-887">The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9d1e-888">Diese Methode löst Ausnahmen, die von der `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-888">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-889">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="beginMethod" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-889">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="c9d1e-890">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-890">-or-</span></span> 
<span data-ttu-id="c9d1e-891">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="endMethod" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-891">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c9d1e-892">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="creationOptions" />-Argument einen ungültigen TaskCreationOptions-Wert angibt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-892">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="c9d1e-893">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="creationOptions" />-Argument einen ungültigen TaskCreationOptions-Wert angibt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-893">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="c9d1e-894">Weitere Informationen finden Sie in den Hinweisen zu <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-894">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-895">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-895">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="c9d1e-896">Verwenden von TPL mit anderen asynchronen Mustern</span><span class="sxs-lookup"><span data-stu-id="c9d1e-896">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TResult&gt; (IAsyncResult asyncResult, Func&lt;IAsyncResult,TResult&gt; endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TResult&gt;(class System.IAsyncResult asyncResult, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TResult) (asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult), creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(IAsyncResult ^ asyncResult, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : IAsyncResult * Func&lt;IAsyncResult, 'Result&gt; * System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (asyncResult, endMethod, creationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="c9d1e-897">Der Typ des Ergebnisses, das über das <see cref="T:System.Threading.Tasks.Task`1" />-Element verfügbar ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-897">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="asyncResult"><span data-ttu-id="c9d1e-898">Das IAsyncResult-Element, dessen Abschluss die Verarbeitung des <paramref name="endMethod" />-Elements auslösen sollte.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-898">The IAsyncResult whose completion should trigger the processing of the <paramref name="endMethod" />.</span></span></param>
        <param name="endMethod"><span data-ttu-id="c9d1e-899">Der Funktionsdelegat, der das abgeschlossene <paramref name="asyncResult" />-Objekt verarbeitet.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-899">The function delegate that processes the completed <paramref name="asyncResult" />.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="c9d1e-900">Der TaskCreationOptions-Wert, der das Verhalten des erstellten <see cref="T:System.Threading.Tasks.Task`1" /> steuert.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-900">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <param name="scheduler"><span data-ttu-id="c9d1e-901">Das <see cref="T:System.Threading.Tasks.TaskScheduler" />-Element, das verwendet wird, um die Aufgabe zu planen, die die Endmethode ausführt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-901">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the task that executes the end method.</span></span></param>
        <summary><span data-ttu-id="c9d1e-902">Erstellt ein <see cref="T:System.Threading.Tasks.Task`1" />-Element, das eine Endmethodenfunktion ausführt, wenn ein angegebenes <see cref="T:System.IAsyncResult" />-Objekt abgeschlossen wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-902">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that executes an end method function when a specified <see cref="T:System.IAsyncResult" /> completes.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-903">Ein <see cref="T:System.Threading.Tasks.Task`1" />-Element, das den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-903">A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!TIP]
>  <span data-ttu-id="c9d1e-904">Die <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> -Überladungen nehmen einen `asyncResult` -Parameter sind nicht so effizient wie der Überladungen, die eine `beginMethod` Parameter.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-904">The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter.</span></span> <span data-ttu-id="c9d1e-905">Wenn die Leistung ein Problem ist, verwenden Sie die Überladungen, die bieten die `beginMethod` / `endMethod` Muster.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-905">If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-906">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="asyncResult" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-906">The exception that is thrown when the <paramref name="asyncResult" /> argument is null.</span></span>  
  
<span data-ttu-id="c9d1e-907">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-907">-or-</span></span> 
<span data-ttu-id="c9d1e-908">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="endMethod" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-908">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="c9d1e-909">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-909">-or-</span></span> 
<span data-ttu-id="c9d1e-910">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="scheduler" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-910">The exception that is thrown when the <paramref name="scheduler" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c9d1e-911">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="creationOptions" />-Argument einen ungültigen TaskCreationOptions-Wert angibt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-911">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="c9d1e-912">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="creationOptions" />-Argument einen ungültigen TaskCreationOptions-Wert angibt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-912">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="c9d1e-913">Weitere Informationen finden Sie in den Hinweisen zu <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-913">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-914">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-914">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="c9d1e-915">Verwenden von TPL mit anderen asynchronen Mustern</span><span class="sxs-lookup"><span data-stu-id="c9d1e-915">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync&lt;TArg1,TArg2&gt; (Func&lt;TArg1,TArg2,AsyncCallback,object,IAsyncResult&gt; beginMethod, Action&lt;IAsyncResult&gt; endMethod, TArg1 arg1, TArg2 arg2, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync&lt;TArg1, TArg2&gt;(class System.Func`5&lt;!!TArg1, !!TArg2, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2) (beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, arg2 As TArg2, state As Object) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2&gt;&#xA; System::Threading::Tasks::Task ^ FromAsync(Func&lt;TArg1, TArg2, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Action&lt;IAsyncResult ^&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, AsyncCallback, obj, IAsyncResult&gt; * Action&lt;IAsyncResult&gt; * 'TArg1 * 'TArg2 * obj -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="c9d1e-916">Der Typ des zweiten an den <paramref name="beginMethod" />-Delegaten übergebenen Arguments.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-916">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg2"><span data-ttu-id="c9d1e-917">Der Typ des ersten, an den <paramref name="beginMethod" />-Delegaten übergebenen Arguments.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-917">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="c9d1e-918">Der Delegat, der den asynchronen Vorgang startet.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-918">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="c9d1e-919">Der Delegat, der den asynchronen Vorgang beendet.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-919">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="c9d1e-920">Das erste an den <paramref name="beginMethod" />-Delegaten übergebene Argument.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-920">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg2"><span data-ttu-id="c9d1e-921">Das zweite an den <paramref name="beginMethod" />-Delegaten übergebene Argument.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-921">The second argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="c9d1e-922">Ein Objekt, das vom <paramref name="beginMethod" />-Delegaten zu verwendende Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-922">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <summary><span data-ttu-id="c9d1e-923">Erstellt ein <see cref="T:System.Threading.Tasks.Task" />, das ein dem asynchronen Programmiermodellmuster entsprechendes Paar von Begin- und End-Methoden darstellt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-923">Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-924">Der erstellte <see cref="T:System.Threading.Tasks.Task" />, der den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-924">The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9d1e-925">Die `beginMethod` Delegat für den Thread gestartet wird, die <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-925">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="c9d1e-926">Diese Methode löst Ausnahmen, die von der `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-926">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-927">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="beginMethod" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-927">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="c9d1e-928">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-928">-or-</span></span> 
<span data-ttu-id="c9d1e-929">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="endMethod" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-929">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-930">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-930">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="c9d1e-931">Verwenden von TPL mit anderen asynchronen Mustern</span><span class="sxs-lookup"><span data-stu-id="c9d1e-931">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync&lt;TArg1,TArg2&gt; (Func&lt;TArg1,TArg2,AsyncCallback,object,IAsyncResult&gt; beginMethod, Action&lt;IAsyncResult&gt; endMethod, TArg1 arg1, TArg2 arg2, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync&lt;TArg1, TArg2&gt;(class System.Func`5&lt;!!TArg1, !!TArg2, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2) (beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, arg2 As TArg2, state As Object, creationOptions As TaskCreationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2&gt;&#xA; System::Threading::Tasks::Task ^ FromAsync(Func&lt;TArg1, TArg2, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Action&lt;IAsyncResult ^&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, AsyncCallback, obj, IAsyncResult&gt; * Action&lt;IAsyncResult&gt; * 'TArg1 * 'TArg2 * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="c9d1e-932">Der Typ des zweiten an den <paramref name="beginMethod" />-Delegaten übergebenen Arguments.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-932">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg2"><span data-ttu-id="c9d1e-933">Der Typ des ersten, an den <paramref name="beginMethod" />-Delegaten übergebenen Arguments.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-933">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="c9d1e-934">Der Delegat, der den asynchronen Vorgang startet.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-934">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="c9d1e-935">Der Delegat, der den asynchronen Vorgang beendet.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-935">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="c9d1e-936">Das erste an den <paramref name="beginMethod" />-Delegaten übergebene Argument.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-936">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg2"><span data-ttu-id="c9d1e-937">Das zweite an den <paramref name="beginMethod" />-Delegaten übergebene Argument.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-937">The second argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="c9d1e-938">Ein Objekt, das vom <paramref name="beginMethod" />-Delegaten zu verwendende Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-938">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="c9d1e-939">Der TaskCreationOptions-Wert, der das Verhalten des erstellten <see cref="T:System.Threading.Tasks.Task" /> steuert.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-939">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" />.</span></span></param>
        <summary><span data-ttu-id="c9d1e-940">Erstellt ein <see cref="T:System.Threading.Tasks.Task" />, das ein dem asynchronen Programmiermodellmuster entsprechendes Paar von Begin- und End-Methoden darstellt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-940">Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-941">Der erstellte <see cref="T:System.Threading.Tasks.Task" />, der den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-941">The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9d1e-942">Die `beginMethod` Delegat für den Thread gestartet wird, die <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-942">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="c9d1e-943">Diese Methode löst Ausnahmen, die von der `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-943">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-944">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="beginMethod" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-944">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="c9d1e-945">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-945">-or-</span></span> 
<span data-ttu-id="c9d1e-946">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="endMethod" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-946">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c9d1e-947">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="creationOptions" />-Argument einen ungültigen TaskCreationOptions-Wert angibt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-947">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="c9d1e-948">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="creationOptions" />-Argument einen ungültigen TaskCreationOptions-Wert angibt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-948">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="c9d1e-949">Weitere Informationen finden Sie in den Hinweisen zu <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-949">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-950">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-950">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="c9d1e-951">Verwenden von TPL mit anderen asynchronen Mustern</span><span class="sxs-lookup"><span data-stu-id="c9d1e-951">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1,TResult&gt; (Func&lt;TArg1,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TArg1, TResult&gt;(class System.Func`4&lt;!!TArg1, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, !!TArg1 arg1, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TResult) (beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, state As Object) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="c9d1e-952">Der Typ des ersten, an den <paramref name="beginMethod" />-Delegaten übergebenen Arguments.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-952">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="c9d1e-953">Der Typ des Ergebnisses, das über das <see cref="T:System.Threading.Tasks.Task`1" />-Element verfügbar ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-953">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="c9d1e-954">Der Delegat, der den asynchronen Vorgang startet.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-954">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="c9d1e-955">Der Delegat, der den asynchronen Vorgang beendet.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-955">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="c9d1e-956">Das erste an den <paramref name="beginMethod" />-Delegaten übergebene Argument.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-956">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="c9d1e-957">Ein Objekt, das vom <paramref name="beginMethod" />-Delegaten zu verwendende Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-957">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <summary><span data-ttu-id="c9d1e-958">Erstellt ein <see cref="T:System.Threading.Tasks.Task`1" />, das ein dem asynchronen Programmiermodellmuster entsprechendes Paar von Begin- und End-Methoden darstellt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-958">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-959">Der erstellte <see cref="T:System.Threading.Tasks.Task`1" />, der den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-959">The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9d1e-960">Die `beginMethod` Delegat für den Thread gestartet wird, die <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-960">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="c9d1e-961">Diese Methode löst Ausnahmen, die von der `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-961">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-962">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="beginMethod" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-962">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="c9d1e-963">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-963">-or-</span></span> 
<span data-ttu-id="c9d1e-964">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="endMethod" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-964">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-965">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-965">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="c9d1e-966">Verwenden von TPL mit anderen asynchronen Mustern</span><span class="sxs-lookup"><span data-stu-id="c9d1e-966">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1,TResult&gt; (Func&lt;TArg1,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TArg1, TResult&gt;(class System.Func`4&lt;!!TArg1, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, !!TArg1 arg1, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TResult) (beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="c9d1e-967">Der Typ des ersten, an den <paramref name="beginMethod" />-Delegaten übergebenen Arguments.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-967">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="c9d1e-968">Der Typ des Ergebnisses, das über das <see cref="T:System.Threading.Tasks.Task`1" />-Element verfügbar ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-968">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="c9d1e-969">Der Delegat, der den asynchronen Vorgang startet.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-969">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="c9d1e-970">Der Delegat, der den asynchronen Vorgang beendet.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-970">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="c9d1e-971">Das erste an den <paramref name="beginMethod" />-Delegaten übergebene Argument.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-971">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="c9d1e-972">Ein Objekt, das vom <paramref name="beginMethod" />-Delegaten zu verwendende Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-972">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="c9d1e-973">Der TaskCreationOptions-Wert, der das Verhalten des erstellten <see cref="T:System.Threading.Tasks.Task`1" /> steuert.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-973">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="c9d1e-974">Erstellt ein <see cref="T:System.Threading.Tasks.Task`1" />, das ein dem asynchronen Programmiermodellmuster entsprechendes Paar von Begin- und End-Methoden darstellt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-974">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-975">Der erstellte <see cref="T:System.Threading.Tasks.Task`1" />, der den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-975">The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9d1e-976">Die `beginMethod` Delegat für den Thread gestartet wird, die <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-976">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="c9d1e-977">Diese Methode löst Ausnahmen, die von der `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-977">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-978">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="beginMethod" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-978">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="c9d1e-979">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-979">-or-</span></span> 
<span data-ttu-id="c9d1e-980">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="endMethod" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-980">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c9d1e-981">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="creationOptions" />-Argument einen ungültigen TaskCreationOptions-Wert angibt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-981">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="c9d1e-982">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="creationOptions" />-Argument einen ungültigen TaskCreationOptions-Wert angibt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-982">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="c9d1e-983">Weitere Informationen finden Sie in den Hinweisen zu <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-983">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-984">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-984">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="c9d1e-985">Verwenden von TPL mit anderen asynchronen Mustern</span><span class="sxs-lookup"><span data-stu-id="c9d1e-985">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2,TArg3&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync&lt;TArg1,TArg2,TArg3&gt; (Func&lt;TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult&gt; beginMethod, Action&lt;IAsyncResult&gt; endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync&lt;TArg1, TArg2, TArg3&gt;(class System.Func`6&lt;!!TArg1, !!TArg2, !!TArg3, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, !!TArg3 arg3, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2, TArg3) (beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2, typename TArg3&gt;&#xA; System::Threading::Tasks::Task ^ FromAsync(Func&lt;TArg1, TArg2, TArg3, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Action&lt;IAsyncResult ^&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, 'TArg3, AsyncCallback, obj, IAsyncResult&gt; * Action&lt;IAsyncResult&gt; * 'TArg1 * 'TArg2 * 'TArg3 * obj -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, arg3, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TArg3" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="arg3" Type="TArg3" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="c9d1e-986">Der Typ des zweiten an den <paramref name="beginMethod" />-Delegaten übergebenen Arguments.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-986">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg2"><span data-ttu-id="c9d1e-987">Der Typ des dritten, an den <paramref name="beginMethod" />-Delegaten übergebenen Arguments.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-987">The type of the third argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg3"><span data-ttu-id="c9d1e-988">Der Typ des ersten, an den <paramref name="beginMethod" />-Delegaten übergebenen Arguments.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-988">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="c9d1e-989">Der Delegat, der den asynchronen Vorgang startet.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-989">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="c9d1e-990">Der Delegat, der den asynchronen Vorgang beendet.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-990">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="c9d1e-991">Das erste an den <paramref name="beginMethod" />-Delegaten übergebene Argument.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-991">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg2"><span data-ttu-id="c9d1e-992">Das zweite an den <paramref name="beginMethod" />-Delegaten übergebene Argument.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-992">The second argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg3"><span data-ttu-id="c9d1e-993">Das dritte an den <paramref name="beginMethod" />-Delegaten übergebene Argument.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-993">The third argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="c9d1e-994">Ein Objekt, das vom <paramref name="beginMethod" />-Delegaten zu verwendende Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-994">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <summary><span data-ttu-id="c9d1e-995">Erstellt ein <see cref="T:System.Threading.Tasks.Task" />, das ein dem asynchronen Programmiermodellmuster entsprechendes Paar von Begin- und End-Methoden darstellt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-995">Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-996">Der erstellte <see cref="T:System.Threading.Tasks.Task" />, der den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-996">The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9d1e-997">Die `beginMethod` Delegat für den Thread gestartet wird, die <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-997">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="c9d1e-998">Diese Methode löst Ausnahmen, die von der `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-998">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-999">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="beginMethod" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-999">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="c9d1e-1000">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-1000">-or-</span></span> 
<span data-ttu-id="c9d1e-1001">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="endMethod" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1001">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-1002">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1002">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="c9d1e-1003">Verwenden von TPL mit anderen asynchronen Mustern</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1003">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2,TArg3&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync&lt;TArg1,TArg2,TArg3&gt; (Func&lt;TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult&gt; beginMethod, Action&lt;IAsyncResult&gt; endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync&lt;TArg1, TArg2, TArg3&gt;(class System.Func`6&lt;!!TArg1, !!TArg2, !!TArg3, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, !!TArg3 arg3, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2, TArg3) (beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object, creationOptions As TaskCreationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2, typename TArg3&gt;&#xA; System::Threading::Tasks::Task ^ FromAsync(Func&lt;TArg1, TArg2, TArg3, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Action&lt;IAsyncResult ^&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, 'TArg3, AsyncCallback, obj, IAsyncResult&gt; * Action&lt;IAsyncResult&gt; * 'TArg1 * 'TArg2 * 'TArg3 * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, arg3, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TArg3" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="arg3" Type="TArg3" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="c9d1e-1004">Der Typ des zweiten an den <paramref name="beginMethod" />-Delegaten übergebenen Arguments.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1004">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg2"><span data-ttu-id="c9d1e-1005">Der Typ des dritten, an den <paramref name="beginMethod" />-Delegaten übergebenen Arguments.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1005">The type of the third argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg3"><span data-ttu-id="c9d1e-1006">Der Typ des ersten, an den <paramref name="beginMethod" />-Delegaten übergebenen Arguments.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1006">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="c9d1e-1007">Der Delegat, der den asynchronen Vorgang startet.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1007">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="c9d1e-1008">Der Delegat, der den asynchronen Vorgang beendet.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1008">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="c9d1e-1009">Das erste an den <paramref name="beginMethod" />-Delegaten übergebene Argument.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1009">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg2"><span data-ttu-id="c9d1e-1010">Das zweite an den <paramref name="beginMethod" />-Delegaten übergebene Argument.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1010">The second argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg3"><span data-ttu-id="c9d1e-1011">Das dritte an den <paramref name="beginMethod" />-Delegaten übergebene Argument.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1011">The third argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="c9d1e-1012">Ein Objekt, das vom <paramref name="beginMethod" />-Delegaten zu verwendende Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1012">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="c9d1e-1013">Der TaskCreationOptions-Wert, der das Verhalten des erstellten <see cref="T:System.Threading.Tasks.Task" /> steuert.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1013">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" />.</span></span></param>
        <summary><span data-ttu-id="c9d1e-1014">Erstellt ein <see cref="T:System.Threading.Tasks.Task" />, das ein dem asynchronen Programmiermodellmuster entsprechendes Paar von Begin- und End-Methoden darstellt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1014">Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-1015">Der erstellte <see cref="T:System.Threading.Tasks.Task" />, der den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1015">The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9d1e-1016">Die `beginMethod` Delegat für den Thread gestartet wird, die <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1016">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="c9d1e-1017">Diese Methode löst Ausnahmen, die von der `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1017">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-1018">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="beginMethod" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1018">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="c9d1e-1019">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-1019">-or-</span></span> 
<span data-ttu-id="c9d1e-1020">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="endMethod" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1020">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c9d1e-1021">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="creationOptions" />-Argument einen ungültigen TaskCreationOptions-Wert angibt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1021">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="c9d1e-1022">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="creationOptions" />-Argument einen ungültigen TaskCreationOptions-Wert angibt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1022">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="c9d1e-1023">Weitere Informationen finden Sie in den Hinweisen zu <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1023">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-1024">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1024">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="c9d1e-1025">Verwenden von TPL mit anderen asynchronen Mustern</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1025">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1,TArg2,TResult&gt; (Func&lt;TArg1,TArg2,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, TArg2 arg2, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TArg1, TArg2, TResult&gt;(class System.Func`5&lt;!!TArg1, !!TArg2, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2, TResult) (beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, state As Object) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, TArg2, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * 'TArg2 * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="c9d1e-1026">Der Typ des zweiten an den <paramref name="beginMethod" />-Delegaten übergebenen Arguments.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1026">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg2"><span data-ttu-id="c9d1e-1027">Der Typ des ersten, an den <paramref name="beginMethod" />-Delegaten übergebenen Arguments.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1027">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="c9d1e-1028">Der Typ des Ergebnisses, das über das <see cref="T:System.Threading.Tasks.Task`1" />-Element verfügbar ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1028">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="c9d1e-1029">Der Delegat, der den asynchronen Vorgang startet.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1029">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="c9d1e-1030">Der Delegat, der den asynchronen Vorgang beendet.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1030">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="c9d1e-1031">Das erste an den <paramref name="beginMethod" />-Delegaten übergebene Argument.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1031">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg2"><span data-ttu-id="c9d1e-1032">Das zweite an den <paramref name="beginMethod" />-Delegaten übergebene Argument.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1032">The second argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="c9d1e-1033">Ein Objekt, das vom <paramref name="beginMethod" />-Delegaten zu verwendende Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1033">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <summary><span data-ttu-id="c9d1e-1034">Erstellt ein <see cref="T:System.Threading.Tasks.Task`1" />, das ein dem asynchronen Programmiermodellmuster entsprechendes Paar von Begin- und End-Methoden darstellt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1034">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-1035">Der erstellte <see cref="T:System.Threading.Tasks.Task`1" />, der den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1035">The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9d1e-1036">Die `beginMethod` Delegat für den Thread gestartet wird, die <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1036">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="c9d1e-1037">Diese Methode löst Ausnahmen, die von der `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1037">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-1038">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="beginMethod" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1038">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="c9d1e-1039">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-1039">-or-</span></span> 
<span data-ttu-id="c9d1e-1040">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="endMethod" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1040">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-1041">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1041">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="c9d1e-1042">Verwenden von TPL mit anderen asynchronen Mustern</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1042">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1,TArg2,TResult&gt; (Func&lt;TArg1,TArg2,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, TArg2 arg2, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TArg1, TArg2, TResult&gt;(class System.Func`5&lt;!!TArg1, !!TArg2, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2, TResult) (beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, TArg2, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * 'TArg2 * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="c9d1e-1043">Der Typ des zweiten an den <paramref name="beginMethod" />-Delegaten übergebenen Arguments.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1043">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg2"><span data-ttu-id="c9d1e-1044">Der Typ des ersten, an den <paramref name="beginMethod" />-Delegaten übergebenen Arguments.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1044">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="c9d1e-1045">Der Typ des Ergebnisses, das über das <see cref="T:System.Threading.Tasks.Task`1" />-Element verfügbar ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1045">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="c9d1e-1046">Der Delegat, der den asynchronen Vorgang startet.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1046">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="c9d1e-1047">Der Delegat, der den asynchronen Vorgang beendet.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1047">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="c9d1e-1048">Das erste an den <paramref name="beginMethod" />-Delegaten übergebene Argument.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1048">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg2"><span data-ttu-id="c9d1e-1049">Das zweite an den <paramref name="beginMethod" />-Delegaten übergebene Argument.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1049">The second argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="c9d1e-1050">Ein Objekt, das vom <paramref name="beginMethod" />-Delegaten zu verwendende Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1050">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="c9d1e-1051">Der TaskCreationOptions-Wert, der das Verhalten des erstellten <see cref="T:System.Threading.Tasks.Task`1" /> steuert.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1051">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="c9d1e-1052">Erstellt ein <see cref="T:System.Threading.Tasks.Task`1" />, das ein dem asynchronen Programmiermodellmuster entsprechendes Paar von Begin- und End-Methoden darstellt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1052">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-1053">Der erstellte <see cref="T:System.Threading.Tasks.Task`1" />, der den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1053">The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9d1e-1054">Die `beginMethod` Delegat für den Thread gestartet wird, die <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1054">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="c9d1e-1055">Diese Methode löst Ausnahmen, die von der `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1055">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-1056">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="beginMethod" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1056">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="c9d1e-1057">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-1057">-or-</span></span> 
<span data-ttu-id="c9d1e-1058">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="endMethod" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1058">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c9d1e-1059">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="creationOptions" />-Argument einen ungültigen TaskCreationOptions-Wert angibt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1059">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="c9d1e-1060">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="creationOptions" />-Argument einen ungültigen TaskCreationOptions-Wert angibt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1060">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="c9d1e-1061">Weitere Informationen finden Sie in den Hinweisen zu <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1061">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-1062">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1062">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="c9d1e-1063">Verwenden von TPL mit anderen asynchronen Mustern</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1063">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2,TArg3,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1,TArg2,TArg3,TResult&gt; (Func&lt;TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TArg1, TArg2, TArg3, TResult&gt;(class System.Func`6&lt;!!TArg1, !!TArg2, !!TArg3, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, !!TArg3 arg3, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2, TArg3, TResult) (beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2, typename TArg3, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, TArg2, TArg3, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, 'TArg3, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * 'TArg2 * 'TArg3 * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, arg3, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TArg3" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="arg3" Type="TArg3" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="c9d1e-1064">Der Typ des zweiten an den <paramref name="beginMethod" />-Delegaten übergebenen Arguments.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1064">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg2"><span data-ttu-id="c9d1e-1065">Der Typ des dritten, an den <paramref name="beginMethod" />-Delegaten übergebenen Arguments.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1065">The type of the third argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg3"><span data-ttu-id="c9d1e-1066">Der Typ des ersten, an den <paramref name="beginMethod" />-Delegaten übergebenen Arguments.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1066">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="c9d1e-1067">Der Typ des Ergebnisses, das über das <see cref="T:System.Threading.Tasks.Task`1" />-Element verfügbar ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1067">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="c9d1e-1068">Der Delegat, der den asynchronen Vorgang startet.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1068">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="c9d1e-1069">Der Delegat, der den asynchronen Vorgang beendet.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1069">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="c9d1e-1070">Das erste an den <paramref name="beginMethod" />-Delegaten übergebene Argument.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1070">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg2"><span data-ttu-id="c9d1e-1071">Das zweite an den <paramref name="beginMethod" />-Delegaten übergebene Argument.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1071">The second argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg3"><span data-ttu-id="c9d1e-1072">Das dritte an den <paramref name="beginMethod" />-Delegaten übergebene Argument.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1072">The third argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="c9d1e-1073">Ein Objekt, das vom <paramref name="beginMethod" />-Delegaten zu verwendende Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1073">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <summary><span data-ttu-id="c9d1e-1074">Erstellt ein <see cref="T:System.Threading.Tasks.Task`1" />, das ein dem asynchronen Programmiermodellmuster entsprechendes Paar von Begin- und End-Methoden darstellt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1074">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-1075">Der erstellte <see cref="T:System.Threading.Tasks.Task`1" />, der den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1075">The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9d1e-1076">Die `beginMethod` Delegat für den Thread gestartet wird, die <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1076">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="c9d1e-1077">Diese Methode löst Ausnahmen, die von der `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1077">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-1078">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="beginMethod" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1078">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="c9d1e-1079">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-1079">-or-</span></span> 
<span data-ttu-id="c9d1e-1080">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="endMethod" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1080">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-1081">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1081">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="c9d1e-1082">Verwenden von TPL mit anderen asynchronen Mustern</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1082">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2,TArg3,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1,TArg2,TArg3,TResult&gt; (Func&lt;TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TArg1, TArg2, TArg3, TResult&gt;(class System.Func`6&lt;!!TArg1, !!TArg2, !!TArg3, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, !!TArg3 arg3, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2, TArg3, TResult) (beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2, typename TArg3, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, TArg2, TArg3, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, 'TArg3, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * 'TArg2 * 'TArg3 * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, arg3, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TArg3" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="arg3" Type="TArg3" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="c9d1e-1083">Der Typ des zweiten an den <paramref name="beginMethod" />-Delegaten übergebenen Arguments.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1083">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg2"><span data-ttu-id="c9d1e-1084">Der Typ des dritten, an den <paramref name="beginMethod" />-Delegaten übergebenen Arguments.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1084">The type of the third argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg3"><span data-ttu-id="c9d1e-1085">Der Typ des ersten, an den <paramref name="beginMethod" />-Delegaten übergebenen Arguments.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1085">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="c9d1e-1086">Der Typ des Ergebnisses, das über das <see cref="T:System.Threading.Tasks.Task`1" />-Element verfügbar ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1086">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="c9d1e-1087">Der Delegat, der den asynchronen Vorgang startet.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1087">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="c9d1e-1088">Der Delegat, der den asynchronen Vorgang beendet.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1088">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="c9d1e-1089">Das erste an den <paramref name="beginMethod" />-Delegaten übergebene Argument.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1089">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg2"><span data-ttu-id="c9d1e-1090">Das zweite an den <paramref name="beginMethod" />-Delegaten übergebene Argument.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1090">The second argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg3"><span data-ttu-id="c9d1e-1091">Das dritte an den <paramref name="beginMethod" />-Delegaten übergebene Argument.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1091">The third argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="c9d1e-1092">Ein Objekt, das vom <paramref name="beginMethod" />-Delegaten zu verwendende Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1092">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="c9d1e-1093">Der TaskCreationOptions-Wert, der das Verhalten des erstellten <see cref="T:System.Threading.Tasks.Task`1" /> steuert.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1093">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="c9d1e-1094">Erstellt ein <see cref="T:System.Threading.Tasks.Task`1" />, das ein dem asynchronen Programmiermodellmuster entsprechendes Paar von Begin- und End-Methoden darstellt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1094">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-1095">Der erstellte <see cref="T:System.Threading.Tasks.Task`1" />, der den asynchronen Vorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1095">The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9d1e-1096">Die `beginMethod` Delegat für den Thread gestartet wird, die <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1096">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="c9d1e-1097">Diese Methode löst Ausnahmen, die von der `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1097">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-1098">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="beginMethod" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1098">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="c9d1e-1099">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-1099">-or-</span></span> 
<span data-ttu-id="c9d1e-1100">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="endMethod" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1100">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c9d1e-1101">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="creationOptions" />-Argument einen ungültigen TaskCreationOptions-Wert angibt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1101">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="c9d1e-1102">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="creationOptions" />-Argument einen ungültigen TaskCreationOptions-Wert angibt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1102">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="c9d1e-1103">Weitere Informationen finden Sie in den Hinweisen zu <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1103">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-1104">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1104">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="c9d1e-1105">Verwenden von TPL mit anderen asynchronen Mustern</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1105">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Scheduler">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.TaskScheduler Scheduler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.Tasks.TaskScheduler Scheduler" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.TaskFactory.Scheduler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Scheduler As TaskScheduler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::TaskScheduler ^ Scheduler { System::Threading::Tasks::TaskScheduler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Scheduler : System.Threading.Tasks.TaskScheduler" Usage="System.Threading.Tasks.TaskFactory.Scheduler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskScheduler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c9d1e-1106">Ruft den standardmäßigen Aufgabenplaner für diese Aufgabenfactory ab.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1106">Gets the default task scheduler for this task factory.</span></span></summary>
        <value><span data-ttu-id="c9d1e-1107">Der standardmäßige Aufgabenplaner für diese Aufgabenfactory.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1107">The default task scheduler for this task factory.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9d1e-1108">Den Wert der Eigenschaft wird verwendet, um alle Aufgaben zu planen, es sei denn, ein anderes Zeitplanungsmodul explizit, während Aufrufe der Methoden dieser Factory angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1108">The property value is used to schedule all tasks, unless another scheduler is explicitly specified during calls to this factory's methods.</span></span>  
  
 <span data-ttu-id="c9d1e-1109">Wenn der Wert dieser Eigenschaft `null`, den Wert des der <xref:System.Threading.Tasks.TaskScheduler.Current%2A> Eigenschaft wird verwendet.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1109">If this property value is `null`, the value of the <xref:System.Threading.Tasks.TaskScheduler.Current%2A> property is used.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.Tasks.TaskScheduler" />
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-1110">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1110">Task Parallel Library (TPL)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="StartNew">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c9d1e-1111">Erstellt und startet ein <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1111">Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9d1e-1112">Beginnend mit der [!INCLUDE[net_v45](~/includes/net-v45-md.md)], <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> Methode ist die empfohlene Methode zum Starten einer rechnergebundene Aufgabe.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1112">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> method is the recommended way to launch a compute-bound task.</span></span> <span data-ttu-id="c9d1e-1113">Verwenden der <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> Methode nur, wenn Sie eine präzisere Kontrolle für eine lang andauernde, rechnergebundene Aufgabe benötigen.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1113">Use the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method only when you require fine-grained control for a long-running, compute-bound task.</span></span> <span data-ttu-id="c9d1e-1114">Dies umfasst Szenarien, in denen Sie Folgendes steuern möchten:</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1114">This includes scenarios in which you want to control the following:</span></span>  
  
-   <span data-ttu-id="c9d1e-1115">Aufgabenerstellungsoptionen.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1115">Task creation options.</span></span> <span data-ttu-id="c9d1e-1116">Von erstellten Aufgaben die <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> Methode standardmäßig erstellt werden, mit der <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType> Option.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1116">Tasks created by the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> method by default are created with the <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType> option.</span></span> <span data-ttu-id="c9d1e-1117">Zum Überschreiben dieses Verhaltens, oder um andere bereitzustellen <xref:System.Threading.Tasks.TaskCreationOptions> Optionen Aufrufen einer <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> überladen.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1117">To override this behavior, or to provide other <xref:System.Threading.Tasks.TaskCreationOptions> options, call a <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> overload.</span></span>  
  
-   <span data-ttu-id="c9d1e-1118">Übergeben von Parametern.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1118">Parameter passing.</span></span> <span data-ttu-id="c9d1e-1119">Die Überladungen der <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> Methode können Sie einen Parameter an den Aufgabendelegaten übergeben.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1119">The overloads of the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> method do not allow you to pass a parameter to the task delegate.</span></span> <span data-ttu-id="c9d1e-1120">Der Überladungen der <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> -Methode.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1120">Overloads of the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method do.</span></span>  
  
-   <span data-ttu-id="c9d1e-1121">Taskplaner</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1121">The task scheduler.</span></span> <span data-ttu-id="c9d1e-1122">Die Überladungen der <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> -Methode verwenden, den standardmäßige Taskplaner.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1122">The overloads of the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> method use the default task scheduler.</span></span> <span data-ttu-id="c9d1e-1123">Rufen Sie zum Steuern der aufgabenplanung eine <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> -Überladung mit einem `scheduler` Parameter.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1123">To control the task scheduler, call a <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> overload with a `scheduler` parameter.</span></span> <span data-ttu-id="c9d1e-1124">Weitere Informationen finden Sie unter <xref:System.Threading.Tasks.TaskScheduler>.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1124">For more information, see <xref:System.Threading.Tasks.TaskScheduler>.</span></span>
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/Samples-for-Parallel-b4b76364"><span data-ttu-id="c9d1e-1125">Beispiele für die parallele Programmierung mit .NET Framework</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1125">Samples for Parallel Programming with the .NET Framework</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartNew (Action action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ StartNew(Action ^ action);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Action -&gt; System.Threading.Tasks.Task" Usage="taskFactory.StartNew action" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="c9d1e-1126">Der Aktionsdelegat, der asynchron ausgeführt werden soll.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1126">The action delegate to execute asynchronously.</span></span></param>
        <summary><span data-ttu-id="c9d1e-1127">Erstellt und startet eine Aufgabe.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1127">Creates and starts a task.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-1128">Die begonnene Aufgabe.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1128">The started task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9d1e-1129">Aufrufen von <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> ist funktionell gleichwertig mit einer seiner Konstruktoren verwenden, und rufen Sie dann einen Task erstellen die <xref:System.Threading.Tasks.Task.Start%2A?displayProperty=nameWithType> Methode, um die Aufgabe für die Ausführung zu planen.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1129">Calling <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> is functionally equivalent to creating a task by using one of its constructors, and then calling the <xref:System.Threading.Tasks.Task.Start%2A?displayProperty=nameWithType> method to schedule the task for execution.</span></span>  
  
 <span data-ttu-id="c9d1e-1130">Beginnend mit der [!INCLUDE[net_v45](~/includes/net-v45-md.md)], können Sie die <xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=nameWithType> -Methode, wie eine schnelle Möglichkeit zum Aufrufen <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29> mit Standardparametern.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1130">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=nameWithType> method as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29> with default parameters.</span></span> <span data-ttu-id="c9d1e-1131">Beachten Sie jedoch, dass ein Unterschied im Verhalten zwischen den beiden Methoden besteht in Bezug auf: <xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=nameWithType> standardmäßig lässt keine untergeordneten Aufgaben, die Schritte mit der <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent?displayProperty=nameWithType> Option zum Anfügen an das aktuelle <xref:System.Threading.Tasks.Task> -Instanz, wohingegen <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29> ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1131">Note, however, that there is a difference in behavior between the two methods regarding : <xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=nameWithType> by default does not allow child tasks started with the <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent?displayProperty=nameWithType> option to attach to the current <xref:System.Threading.Tasks.Task> instance, whereas <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29> does.</span></span> <span data-ttu-id="c9d1e-1132">Weitere Informationen und Codebeispiele finden Sie unter ["Task.Run" Vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) im zur parallelen Programmierung mit .NET Blog.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1132">For more information and code examples, see [Task.Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c9d1e-1133">Im folgenden Beispiel wird die <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29> Methode wiederholt Aufrufen einer <xref:System.Action> Delegat, der generiert eine zufällige Zahl ist, wird als Unicode-Codepunkt interpretiert, konvertiert es in einer UTF16-codierte Codeeinheit und zeigt Informationen über die resultierende Zeichen oder Zeichen.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1133">The following example uses the <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29> method to repeatedly invoke an <xref:System.Action> delegate that generates a random number, interprets it as a Unicode code point, converts it to a UTF16-encoded code unit, and displays information about the resulting character or characters.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.TaskFactory.StartNew#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/cs/startnew1.cs#1)]
 [!code-vb[System.Threading.Tasks.TaskFactory.StartNew#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/vb/startnew1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-1134">Das <paramref name="action" />-Argument ist null.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1134">The <paramref name="action" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-1135">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1135">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-1136">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1136">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c9d1e-1137">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1137">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartNew (Action action, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action action, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ StartNew(Action ^ action, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Action * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="taskFactory.StartNew (action, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="c9d1e-1138">Der Aktionsdelegat, der asynchron ausgeführt werden soll.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1138">The action delegate to execute asynchronously.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="c9d1e-1139">Das <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />, das der neuen Aufgabe zugewiesen wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1139">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new task.</span></span></param>
        <summary><span data-ttu-id="c9d1e-1140">Erstellt und startet ein <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1140">Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-1141">Der gestartete <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1141">The started <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9d1e-1142">Aufrufen von `StartNew` ist funktionell gleichwertig mit der Erstellung eines Tasks, die mit einer seiner Konstruktoren und klicken Sie dann aufrufen <xref:System.Threading.Tasks.Task.Start%2A> zur Planung der für die Ausführung.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1142">Calling `StartNew` is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="c9d1e-1143">Beginnend mit der [!INCLUDE[net_v45](~/includes/net-v45-md.md)], können Sie die <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> -Methode, wie eine schnelle Möglichkeit zum Aufrufen <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29> mit Standardparametern.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1143">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> method as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29> with default parameters.</span></span> <span data-ttu-id="c9d1e-1144">Beachten Sie jedoch, dass ein Unterschied im Verhalten zwischen den beiden Methoden besteht in Bezug auf: <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> standardmäßig lässt keine untergeordneten Aufgaben, die Schritte mit der <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent?displayProperty=nameWithType> Option zum Anfügen an das aktuelle <xref:System.Threading.Tasks.Task> -Instanz, wohingegen <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29> ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1144">Note, however, that there is a difference in behavior between the two methods regarding : <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> by default does not allow child tasks started with the <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent?displayProperty=nameWithType> option to attach to the current <xref:System.Threading.Tasks.Task> instance, whereas <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29> does.</span></span> <span data-ttu-id="c9d1e-1145">Weitere Informationen und Codebeispiele finden Sie unter ["Task.Run" Vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) im zur parallelen Programmierung mit .NET Blog.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1145">For more information and code examples, see [Task.Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c9d1e-1146">Im folgenden Beispiel wird die <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29> Methode, um eine Aufgabe zu erstellen, die die Dateien in das Verzeichnis C:\Windows\System32 durchläuft.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1146">The following example calls the <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29> method to create a task that iterates the files in the C:\Windows\System32 directory.</span></span> <span data-ttu-id="c9d1e-1147">Ruft die Lambda-Ausdruck die <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> Methode, um Informationen zu jeder Datei zum Hinzufügen einer <xref:System.Collections.Generic.List%601> Objekt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1147">The lambda expression calls the <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method to add information about each  file to a <xref:System.Collections.Generic.List%601> object.</span></span> <span data-ttu-id="c9d1e-1148">Jede getrennt geschachtelte Aufgabe aufgerufen, indem die <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> Schleife überprüft den Status des Abbruchtokens und, wenn der Abbruch angefordert wird, ruft der <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> Methode.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1148">Each detached nested task invoked by the <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> loop checks the state of the cancellation token and, if cancellation is requested, calls the <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="c9d1e-1149">Die <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> -Methode löst eine <xref:System.OperationCanceledException> in behandelte Ausnahme einer `catch` blockieren, wenn der aufrufende Thread Ruft die <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> Methode.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1149">The <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> method throws an <xref:System.OperationCanceledException> exception that is handled in a `catch` block when the calling thread calls the <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.TaskFactory.StartNew#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/cs/startnew2.cs#2)]
 [!code-vb[System.Threading.Tasks.TaskFactory.StartNew#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/vb/startnew2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c9d1e-1150">Das angegebene <see cref="T:System.Threading.CancellationToken" /> wurde bereits verworfen.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1150">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-1151">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="action" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1151">The exception that is thrown when the <paramref name="action" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-1152">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1152">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-1153">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1153">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c9d1e-1154">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1154">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartNew (Action action, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action action, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ StartNew(Action ^ action, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Action * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.StartNew (action, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="c9d1e-1155">Der Aktionsdelegat, der asynchron ausgeführt werden soll.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1155">The action delegate to execute asynchronously.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="c9d1e-1156">Ein TaskCreationOptions-Wert, der das Verhalten des erstellten <see cref="T:System.Threading.Tasks.Task" />-Elements steuert</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1156">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" /></span></span></param>
        <summary><span data-ttu-id="c9d1e-1157">Erstellt und startet ein <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1157">Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-1158">Der gestartete <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1158">The started <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9d1e-1159">Aufrufen von StartNew entspricht funktional dem Erstellen einer Aufgabe, die mit einer seiner Konstruktoren und klicken Sie dann aufrufen <xref:System.Threading.Tasks.Task.Start%2A> zur Planung der für die Ausführung.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1159">Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="c9d1e-1160">Beginnend mit der [!INCLUDE[net_v45](~/includes/net-v45-md.md)], können Sie die <xref:System.Threading.Tasks.Task.Run%2A> -Methode mit einer <xref:System.Action> -Objekt als eine schnelle Möglichkeit zum Aufrufen <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> mit Standardparametern.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1160">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="c9d1e-1161">Weitere Informationen und Codebeispiele finden Sie unter ["Task.Run" Vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) im zur parallelen Programmierung mit .NET Blog.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1161">For more information and code examples, see [Task.Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-1162">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="action" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1162">The exception that is thrown when the <paramref name="action" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c9d1e-1163">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="creationOptions" />-Argument einen ungültigen TaskCreationOptions-Wert angibt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1163">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-1164">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1164">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-1165">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1165">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c9d1e-1166">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1166">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartNew (Action&lt;object&gt; action, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action`1&lt;object&gt; action, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartNew (action As Action(Of Object), state As Object) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ StartNew(Action&lt;System::Object ^&gt; ^ action, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Action&lt;obj&gt; * obj -&gt; System.Threading.Tasks.Task" Usage="taskFactory.StartNew (action, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="c9d1e-1167">Der Aktionsdelegat, der asynchron ausgeführt werden soll.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1167">The action delegate to execute asynchronously.</span></span></param>
        <param name="state"><span data-ttu-id="c9d1e-1168">Ein Objekt, das vom <paramref name="action" />-Delegaten zu verwendende Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1168">An object containing data to be used by the <paramref name="action" /> delegate.</span></span></param>
        <summary><span data-ttu-id="c9d1e-1169">Erstellt und startet ein <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1169">Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-1170">Der gestartete <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1170">The started <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9d1e-1171">Aufrufen von <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> ist funktionell gleichwertig mit der Erstellung einer <xref:System.Threading.Tasks.Task> mithilfe einer seiner Konstruktoren und dem anschließenden Aufrufen der <xref:System.Threading.Tasks.Task.Start%2A> Methode zur Planung der für die Ausführung.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1171">Calling <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> is functionally equivalent to creating a <xref:System.Threading.Tasks.Task> using one of its constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.</span></span>  
  
 <span data-ttu-id="c9d1e-1172">Beginnend mit der [!INCLUDE[net_v45](~/includes/net-v45-md.md)], können Sie die <xref:System.Threading.Tasks.Task.Run%2A> -Methode mit einer <xref:System.Action> -Objekt als eine schnelle Möglichkeit zum Aufrufen <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> mit Standardparametern.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1172">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="c9d1e-1173">Weitere Informationen und Codebeispiele finden Sie unter ["Task.Run" Vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) im zur parallelen Programmierung mit .NET Blog.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1173">For more information and code examples, see [Task.Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c9d1e-1174">Das folgende Beispiel definiert ein Array von 6 Buchstaben von Wörtern.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1174">The following example defines an array of 6-letter words.</span></span> <span data-ttu-id="c9d1e-1175">Jedes Wort wird dann zum Übergeben einer <xref:System.Action%601> -Delegaten, der durcheinanderbringt des Worts, und der ursprüngliche Begriff und die verschlüsselte Version angezeigt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1175">Each word is then passed to an <xref:System.Action%601> delegate, which scrambles the word and displays the original word and its scrambled version.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.TaskFactory.StartNew#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/cs/startnew3.cs#3)]
 [!code-vb[System.Threading.Tasks.TaskFactory.StartNew#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/vb/startnew3.vb#3)]  
  
 <span data-ttu-id="c9d1e-1176">Beachten Sie, dass im Beispiel wird einen einzelnen Zufallszahlengenerator initialisiert, die durch eine Sperre geschützt wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1176">Note that the example initializes a single random number generator, which is protected by a lock.</span></span> <span data-ttu-id="c9d1e-1177">Die Notwendigkeit einer Sperre, finden Sie unter "Der System.Random-Klasse und Threadsicherheit" in der <xref:System.Random> Thema-Klasse.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1177">For the need of a lock, see "The System.Random class and thread safety" in the <xref:System.Random> class topic.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-1178">Das <paramref name="action" />-Argument lautet <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1178">The <paramref name="action" /> argument is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-1179">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1179">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-1180">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1180">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c9d1e-1181">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1181">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartNew (Action&lt;object&gt; action, object state, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action`1&lt;object&gt; action, object state, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ StartNew(Action&lt;System::Object ^&gt; ^ action, System::Object ^ state, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Action&lt;obj&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="taskFactory.StartNew (action, state, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="c9d1e-1182">Der Aktionsdelegat, der asynchron ausgeführt werden soll.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1182">The action delegate to execute asynchronously.</span></span></param>
        <param name="state"><span data-ttu-id="c9d1e-1183">Ein Objekt, das vom <paramref name="action" />-Delegaten zu verwendende Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1183">An object containing data to be used by the <paramref name="action" /> delegate.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="c9d1e-1184">Das <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />-Element, das der neuen <see cref="T:System.Threading.Tasks.Task" /> zugewiesen wird</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1184">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new <see cref="T:System.Threading.Tasks.Task" /></span></span></param>
        <summary><span data-ttu-id="c9d1e-1185">Erstellt und startet ein <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1185">Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-1186">Der gestartete <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1186">The started <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9d1e-1187">Aufrufen von StartNew entspricht funktional dem Erstellen einer Aufgabe, die mit einer seiner Konstruktoren und klicken Sie dann aufrufen <xref:System.Threading.Tasks.Task.Start%2A> zur Planung der für die Ausführung.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1187">Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="c9d1e-1188">Beginnend mit der [!INCLUDE[net_v45](~/includes/net-v45-md.md)], können Sie die <xref:System.Threading.Tasks.Task.Run%2A> -Methode mit einer <xref:System.Action> -Objekt als eine schnelle Möglichkeit zum Aufrufen <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> mit Standardparametern.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1188">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="c9d1e-1189">Weitere Informationen und Codebeispiele finden Sie unter ["Task.Run" Vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) im zur parallelen Programmierung mit .NET Blog.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1189">For more information and code examples, see [Task.Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c9d1e-1190">Das folgende Beispiel definiert ein Array von 6 Buchstaben von Wörtern.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1190">The following example defines an array of 6-letter words.</span></span> <span data-ttu-id="c9d1e-1191">Jedes Wort wird dann zum Übergeben einer <xref:System.Action%601> -Delegaten, der durcheinanderbringt des Worts, und der ursprüngliche Begriff und die verschlüsselte Version angezeigt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1191">Each word is then passed to an <xref:System.Action%601> delegate, which scrambles the word and displays the original word and its scrambled version.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.TaskFactory.StartNew#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/cs/startnew4.cs#4)]
 [!code-vb[System.Threading.Tasks.TaskFactory.StartNew#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/vb/startnew4.vb#4)]  
  
 <span data-ttu-id="c9d1e-1192">Beachten Sie, dass im Beispiel wird einen einzelnen Zufallszahlengenerator initialisiert, die durch eine Sperre geschützt wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1192">Note that the example initializes a single random number generator, which is protected by a lock.</span></span> <span data-ttu-id="c9d1e-1193">Die Notwendigkeit einer Sperre, finden Sie unter "Der System.Random-Klasse und Threadsicherheit" in der <xref:System.Random> Thema-Klasse.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1193">For the need of a lock, see "The System.Random class and thread safety" in the <xref:System.Random> class topic.</span></span> <span data-ttu-id="c9d1e-1194">Um die Wahrscheinlichkeit einer Beschädigung der vom Zufallszahlen-Generator zu behandeln, wird ein Abbruchtoken übergeben, Vorgang.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1194">To handle the possibility of corruption of the random number generator, a cancellation token is passed to task.</span></span> <span data-ttu-id="c9d1e-1195">Wenn zwei zufällige Zahlen 0 (null) entspricht, wird die Methode davon ausgegangen, dass der Zufallszahlengenerator ist beschädigt, und das Abbruchtoken, das.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1195">If two random numbers equal zero, the method assumes that the random number generator is corrupted and sets the cancellation token.</span></span> <span data-ttu-id="c9d1e-1196">Vor dem Sortieren der `chars` Array mit sechs Zeichen in einem Wort, ruft die Methode die <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> Methode zum Auslösen einer <xref:System.OperationCanceledException> , wenn das Token abgebrochen wurde.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1196">Before sorting the `chars` array that contains the six characters in a word, the method calls the <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> method to throw an <xref:System.OperationCanceledException> if the token has been canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c9d1e-1197">Das angegebene <see cref="T:System.Threading.CancellationToken" /> wurde bereits verworfen.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1197">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-1198">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="action" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1198">The exception that is thrown when the <paramref name="action" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-1199">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1199">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-1200">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1200">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c9d1e-1201">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1201">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartNew (Action&lt;object&gt; action, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action`1&lt;object&gt; action, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartNew (action As Action(Of Object), state As Object, creationOptions As TaskCreationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ StartNew(Action&lt;System::Object ^&gt; ^ action, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Action&lt;obj&gt; * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.StartNew (action, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="c9d1e-1202">Der Aktionsdelegat, der asynchron ausgeführt werden soll.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1202">The action delegate to execute asynchronously.</span></span></param>
        <param name="state"><span data-ttu-id="c9d1e-1203">Ein Objekt, das vom <paramref name="action" />-Delegaten zu verwendende Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1203">An object containing data to be used by the <paramref name="action" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="c9d1e-1204">Ein TaskCreationOptions-Wert, der das Verhalten des erstellten <see cref="T:System.Threading.Tasks.Task" />-Elements steuert</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1204">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" /></span></span></param>
        <summary><span data-ttu-id="c9d1e-1205">Erstellt und startet ein <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1205">Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-1206">Der gestartete <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1206">The started <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9d1e-1207">Aufrufen von StartNew entspricht funktional dem Erstellen einer Aufgabe, die mit einer seiner Konstruktoren und klicken Sie dann aufrufen <xref:System.Threading.Tasks.Task.Start%2A> zur Planung der für die Ausführung.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1207">Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="c9d1e-1208">Beginnend mit der [!INCLUDE[net_v45](~/includes/net-v45-md.md)], können Sie die <xref:System.Threading.Tasks.Task.Run%2A> -Methode mit einer <xref:System.Action> -Objekt als eine schnelle Möglichkeit zum Aufrufen <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> mit Standardparametern.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1208">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="c9d1e-1209">Weitere Informationen und Codebeispiele finden Sie unter ["Task.Run" Vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) im zur parallelen Programmierung mit .NET Blog.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1209">For more information and code examples, see [Task.Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-1210">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="action" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1210">The exception that is thrown when the <paramref name="action" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c9d1e-1211">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="creationOptions" />-Argument einen ungültigen TaskCreationOptions-Wert angibt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1211">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-1212">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1212">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-1213">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1213">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c9d1e-1214">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1214">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartNew (Action action, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action action, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ StartNew(Action ^ action, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Action * System.Threading.CancellationToken * System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="taskFactory.StartNew (action, cancellationToken, creationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="c9d1e-1215">Der Aktionsdelegat, der asynchron ausgeführt werden soll.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1215">The action delegate to execute asynchronously.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="c9d1e-1216">Das <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />-Element, das der neuen <see cref="T:System.Threading.Tasks.Task" /> zugewiesen wird</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1216">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new <see cref="T:System.Threading.Tasks.Task" /></span></span></param>
        <param name="creationOptions"><span data-ttu-id="c9d1e-1217">Ein TaskCreationOptions-Wert, der das Verhalten des erstellten <see cref="T:System.Threading.Tasks.Task" />-Elements steuert</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1217">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" /></span></span></param>
        <param name="scheduler"><span data-ttu-id="c9d1e-1218">Das <see cref="T:System.Threading.Tasks.TaskScheduler" />, das zum Planen des erstellten <see cref="T:System.Threading.Tasks.Task" /> verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1218">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created <see cref="T:System.Threading.Tasks.Task" />.</span></span></param>
        <summary><span data-ttu-id="c9d1e-1219">Erstellt und startet ein <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1219">Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-1220">Der gestartete <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1220">The started <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9d1e-1221">Aufrufen von StartNew entspricht funktional dem Erstellen einer Aufgabe, die mit einer seiner Konstruktoren und klicken Sie dann aufrufen <xref:System.Threading.Tasks.Task.Start%2A> zur Planung der für die Ausführung.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1221">Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="c9d1e-1222">Beginnend mit der [!INCLUDE[net_v45](~/includes/net-v45-md.md)], können Sie die <xref:System.Threading.Tasks.Task.Run%2A> -Methode mit einer <xref:System.Action> -Objekt als eine schnelle Möglichkeit zum Aufrufen <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> mit Standardparametern.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1222">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="c9d1e-1223">Weitere Informationen und Codebeispiele finden Sie unter ["Task.Run" Vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) im zur parallelen Programmierung mit .NET Blog.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1223">For more information and code examples, see [Task.Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c9d1e-1224">Das angegebene <see cref="T:System.Threading.CancellationToken" /> wurde bereits verworfen.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1224">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-1225">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="action" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1225">The exception that is thrown when the <paramref name="action" /> argument is null.</span></span>  
  
<span data-ttu-id="c9d1e-1226">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-1226">-or-</span></span> 
<span data-ttu-id="c9d1e-1227">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="scheduler" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1227">The exception that is thrown when the <paramref name="scheduler" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c9d1e-1228">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="creationOptions" />-Argument einen ungültigen TaskCreationOptions-Wert angibt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1228">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="c9d1e-1229">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="creationOptions" />-Argument einen ungültigen TaskCreationOptions-Wert angibt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1229">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="c9d1e-1230">Weitere Informationen finden Sie in den Hinweisen zu <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1230">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-1231">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1231">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-1232">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1232">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c9d1e-1233">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1233">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartNew (Action&lt;object&gt; action, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action`1&lt;object&gt; action, object state, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ StartNew(Action&lt;System::Object ^&gt; ^ action, System::Object ^ state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Action&lt;obj&gt; * obj * System.Threading.CancellationToken * System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="taskFactory.StartNew (action, state, cancellationToken, creationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="c9d1e-1234">Der Aktionsdelegat, der asynchron ausgeführt werden soll.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1234">The action delegate to execute asynchronously.</span></span></param>
        <param name="state"><span data-ttu-id="c9d1e-1235">Ein Objekt, das vom <paramref name="action" />-Delegaten zu verwendende Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1235">An object containing data to be used by the <paramref name="action" /> delegate.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="c9d1e-1236">Das <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />, das der neuen Aufgabe zugewiesen wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1236">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new task.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="c9d1e-1237">Ein TaskCreationOptions-Wert, der das Verhalten des erstellten <see cref="T:System.Threading.Tasks.Task" />-Elements steuert</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1237">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" /></span></span></param>
        <param name="scheduler"><span data-ttu-id="c9d1e-1238">Das <see cref="T:System.Threading.Tasks.TaskScheduler" />, das zum Planen des erstellten <see cref="T:System.Threading.Tasks.Task" /> verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1238">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created <see cref="T:System.Threading.Tasks.Task" />.</span></span></param>
        <summary><span data-ttu-id="c9d1e-1239">Erstellt und startet ein <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1239">Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-1240">Der gestartete <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1240">The started <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9d1e-1241">Aufrufen von StartNew entspricht funktional dem Erstellen einer Aufgabe, die mit einer seiner Konstruktoren und klicken Sie dann aufrufen <xref:System.Threading.Tasks.Task.Start%2A> zur Planung der für die Ausführung.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1241">Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="c9d1e-1242">Beginnend mit der [!INCLUDE[net_v45](~/includes/net-v45-md.md)], können Sie die <xref:System.Threading.Tasks.Task.Run%2A> -Methode mit einer <xref:System.Action> -Objekt als eine schnelle Möglichkeit zum Aufrufen <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> mit Standardparametern.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1242">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="c9d1e-1243">Weitere Informationen und Codebeispiele finden Sie unter ["Task.Run" Vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) im zur parallelen Programmierung mit .NET Blog.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1243">For more information and code examples, see [Task.Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c9d1e-1244">Das angegebene <see cref="T:System.Threading.CancellationToken" /> wurde bereits verworfen.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1244">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-1245">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="action" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1245">The exception that is thrown when the <paramref name="action" /> argument is null.</span></span>  
  
<span data-ttu-id="c9d1e-1246">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-1246">-or-</span></span> 
<span data-ttu-id="c9d1e-1247">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="scheduler" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1247">The exception that is thrown when the <paramref name="scheduler" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c9d1e-1248">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="creationOptions" />-Argument einen ungültigen TaskCreationOptions-Wert angibt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1248">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="c9d1e-1249">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="creationOptions" />-Argument einen ungültigen TaskCreationOptions-Wert angibt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1249">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="c9d1e-1250">Weitere Informationen finden Sie in den Hinweisen zu <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1250">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-1251">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1251">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-1252">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1252">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c9d1e-1253">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1253">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew&lt;TResult&gt; (Func&lt;TResult&gt; function);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; StartNew&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; function) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function StartNew(Of TResult) (function As Func(Of TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;TResult&gt; ^ function);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew function" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="c9d1e-1254">Der Typ des Ergebnisses, das über das <see cref="T:System.Threading.Tasks.Task`1" />-Element verfügbar ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1254">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="function"><span data-ttu-id="c9d1e-1255">Ein Funktionsdelegat, der das zukünftige Ergebnis zurückgibt, das mithilfe des <see cref="T:System.Threading.Tasks.Task`1" />-Elements verfügbar sein wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1255">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="c9d1e-1256">Erstellt und startet ein <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1256">Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-1257">Der gestartete <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1257">The started <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9d1e-1258">Aufrufen von <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> ist funktionell gleichwertig mit der Erstellung einer <xref:System.Threading.Tasks.Task%601> mithilfe einer seiner Konstruktoren und dem anschließenden Aufrufen <xref:System.Threading.Tasks.Task.Start%2A> zur Planung der für die Ausführung.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1258">Calling <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="c9d1e-1259">Beginnend mit der [!INCLUDE[net_v45](~/includes/net-v45-md.md)], rufen Sie die <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=nameWithType> -Methode, wie eine schnelle Möglichkeit zum Aufrufen <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> mit Standardparametern.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1259">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can call the <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=nameWithType> method as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="c9d1e-1260">Beachten Sie jedoch, dass ein Unterschied im Verhalten zwischen den beiden Methoden besteht in Bezug auf: <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=nameWithType> standardmäßig lässt keine untergeordneten Aufgaben, die Schritte mit der <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent?displayProperty=nameWithType> Option zum Anfügen an das aktuelle <xref:System.Threading.Tasks.Task%601> -Instanz, wohingegen <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%29> ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1260">Note, however, that there is a difference in behavior between the two methods regarding : <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=nameWithType> by default does not allow child tasks started with the <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent?displayProperty=nameWithType> option to attach to the current <xref:System.Threading.Tasks.Task%601> instance, whereas <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%29> does.</span></span> <span data-ttu-id="c9d1e-1261">Weitere Informationen und Codebeispiele finden Sie im Eintrag ["Task.Run" Visual Studio. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) im zur parallelen Programmierung mit .NET Blog.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1261">For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c9d1e-1262">Im folgende Beispiel wird eine einfache Ergänzung-app, die beiden Zufallszahlen generiert, und fordert den Benutzer, deren Summe einzugeben.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1262">The following example is a simple addition app that generates two random numbers and prompts the user to enter their sum.</span></span> <span data-ttu-id="c9d1e-1263">Anschließend zeigt es an, ob die Antwort richtig ist, oder, wenn die Antwort des Benutzers nicht über eine gültige Zahl ist, ist der Benutzer aufgefordert, eine gültige Zahl erneut eingeben.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1263">It then indicates whether the answer is correct or, if the user's response is not a valid number, prompts the user to re-enter a valid number.</span></span> <span data-ttu-id="c9d1e-1264">Die <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> dient zum Erstellen der <xref:System.Threading.Tasks.Task%601> Objekte, die Zufallszahlen hinzuzufügende zurückgeben.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1264">The <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> is used to create the <xref:System.Threading.Tasks.Task%601> objects that return the random numbers to add.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/run5.cs#5)]
 [!code-vb[System.Threading.Tasks.Task.Run#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/run5.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-1265">Das <paramref name="function" />-Argument lautet <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1265">The <paramref name="function" /> argument is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-1266">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1266">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-1267">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1267">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c9d1e-1268">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1268">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew&lt;TResult&gt; (Func&lt;object,TResult&gt; function, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; StartNew&lt;TResult&gt;(class System.Func`2&lt;object, !!TResult&gt; function, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartNew(Of TResult) (function As Func(Of Object, TResult), state As Object) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;System::Object ^, TResult&gt; ^ function, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;obj, 'Result&gt; * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="c9d1e-1269">Der Typ des Ergebnisses, das über das <see cref="T:System.Threading.Tasks.Task`1" />-Element verfügbar ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1269">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="function"><span data-ttu-id="c9d1e-1270">Ein Funktionsdelegat, der das zukünftige Ergebnis zurückgibt, das mithilfe des <see cref="T:System.Threading.Tasks.Task`1" />-Elements verfügbar sein wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1270">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <param name="state"><span data-ttu-id="c9d1e-1271">Ein Objekt, das vom <paramref name="function" />-Delegaten zu verwendende Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1271">An object containing data to be used by the <paramref name="function" /> delegate.</span></span></param>
        <summary><span data-ttu-id="c9d1e-1272">Erstellt und startet ein <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1272">Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-1273">Der gestartete <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1273">The started <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9d1e-1274">Aufrufen von StartNew entspricht funktional dem Erstellen einer <xref:System.Threading.Tasks.Task%601> mithilfe einer seiner Konstruktoren und dem anschließenden Aufrufen <xref:System.Threading.Tasks.Task.Start%2A> zur Planung der für die Ausführung.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1274">Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="c9d1e-1275">Beginnend mit der [!INCLUDE[net_v45](~/includes/net-v45-md.md)], können Sie die <xref:System.Threading.Tasks.Task.Run%2A> -Methode mit einer <xref:System.Action> -Objekt als eine schnelle Möglichkeit zum Aufrufen <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> mit Standardparametern.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1275">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="c9d1e-1276">Weitere Informationen und Codebeispiele finden Sie im Eintrag ["Task.Run" Visual Studio. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) im zur parallelen Programmierung mit .NET Blog.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1276">For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-1277">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="function" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1277">The exception that is thrown when the <paramref name="function" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-1278">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1278">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-1279">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1279">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c9d1e-1280">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1280">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew&lt;TResult&gt; (Func&lt;TResult&gt; function, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; StartNew&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; function, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;TResult&gt; ^ function, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="c9d1e-1281">Der Typ des Ergebnisses, das über das <see cref="T:System.Threading.Tasks.Task`1" />-Element verfügbar ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1281">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="function"><span data-ttu-id="c9d1e-1282">Ein Funktionsdelegat, der das zukünftige Ergebnis zurückgibt, das mithilfe des <see cref="T:System.Threading.Tasks.Task`1" />-Elements verfügbar sein wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1282">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="c9d1e-1283">Das <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />-Element, das der neuen <see cref="T:System.Threading.Tasks.Task" /> zugewiesen wird</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1283">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new <see cref="T:System.Threading.Tasks.Task" /></span></span></param>
        <summary><span data-ttu-id="c9d1e-1284">Erstellt und startet ein <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1284">Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-1285">Der gestartete <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1285">The started <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9d1e-1286">Aufrufen von <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> ist funktionell gleichwertig mit der Erstellung einer <xref:System.Threading.Tasks.Task%601> mithilfe einer seiner Konstruktoren und dem anschließenden Aufrufen <xref:System.Threading.Tasks.Task.Start%2A> zur Planung der für die Ausführung.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1286">Calling <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="c9d1e-1287">Beginnend mit der [!INCLUDE[net_v45](~/includes/net-v45-md.md)], können Sie die <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> -Methode, wie eine schnelle Möglichkeit zum Aufrufen <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29> mit Standardparametern.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1287">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> method as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29> with default parameters.</span></span> <span data-ttu-id="c9d1e-1288">Beachten Sie jedoch, dass ein Unterschied im Verhalten zwischen den beiden Methoden besteht in Bezug auf: <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> standardmäßig lässt keine untergeordneten Aufgaben, die Schritte mit der <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent?displayProperty=nameWithType> Option zum Anfügen an das aktuelle <xref:System.Threading.Tasks.Task%601> -Instanz, wohingegen <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29> ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1288">Note, however, that there is a difference in behavior between the two methods regarding : <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> by default does not allow child tasks started with the <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent?displayProperty=nameWithType> option to attach to the current <xref:System.Threading.Tasks.Task%601> instance, whereas <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29> does.</span></span> <span data-ttu-id="c9d1e-1289">Weitere Informationen und Codebeispiele finden Sie im Eintrag ["Task.Run" Visual Studio. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) im zur parallelen Programmierung mit .NET Blog.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1289">For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c9d1e-1290">Das folgende Beispiel verwendet zwei Aufgaben zum Berechnen der Fibonacci-Folge F100 Endstand = F100-1 + F100-2 mit dem Startwerten F1 = 1 "," F2 = 1 und F1 = 0 "," F2 = 1.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1290">The following example uses two tasks to compute the Fibonacci sequence ending in F100 = F100-1 + F100-2 with seed values F1= 1, F2 = 1 and F1 = 0, F2= 1.</span></span> <span data-ttu-id="c9d1e-1291">Ungefähr ist die Hälfte der Zeit, ein Abbruchtoken festgelegt wie die Vorgänge ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1291">Approximately half of the time, a cancellation token is set as the operations execute.</span></span> <span data-ttu-id="c9d1e-1292">Die Ausgabe des Beispiels zeigt das Ergebnis, wenn die beiden Tasks erfolgreich abgeschlossen, und wenn das Token abgebrochen wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1292">The output from the example shows the result if the two tasks complete successfully and if the token is cancelled.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/Run9.cs#9)]
 [!code-vb[System.Threading.Tasks.Task.Run#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/Run9.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c9d1e-1293">Das angegebene <see cref="T:System.Threading.CancellationToken" /> wurde bereits verworfen.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1293">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-1294">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="function" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1294">The exception that is thrown when the <paramref name="function" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-1295">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1295">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-1296">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1296">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c9d1e-1297">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1297">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew&lt;TResult&gt; (Func&lt;TResult&gt; function, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; StartNew&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; function, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartNew(Of TResult) (function As Func(Of TResult), creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;TResult&gt; ^ function, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;'Result&gt; * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="c9d1e-1298">Der Typ des Ergebnisses, das über das <see cref="T:System.Threading.Tasks.Task`1" />-Element verfügbar ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1298">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="function"><span data-ttu-id="c9d1e-1299">Ein Funktionsdelegat, der das zukünftige Ergebnis zurückgibt, das mithilfe des <see cref="T:System.Threading.Tasks.Task`1" />-Elements verfügbar sein wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1299">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="c9d1e-1300">Ein TaskCreationOptions-Wert, der das Verhalten des erstellten <see cref="T:System.Threading.Tasks.Task`1" />-Elements steuert.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1300">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="c9d1e-1301">Erstellt und startet ein <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1301">Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-1302">Der gestartete <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1302">The started <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9d1e-1303">Aufrufen von StartNew entspricht funktional dem Erstellen einer <xref:System.Threading.Tasks.Task%601> mithilfe einer seiner Konstruktoren und dem anschließenden Aufrufen <xref:System.Threading.Tasks.Task.Start%2A> zur Planung der für die Ausführung.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1303">Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="c9d1e-1304">Beginnend mit der [!INCLUDE[net_v45](~/includes/net-v45-md.md)], können Sie die <xref:System.Threading.Tasks.Task.Run%2A> -Methode mit einer <xref:System.Action> -Objekt als eine schnelle Möglichkeit zum Aufrufen <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> mit Standardparametern.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1304">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="c9d1e-1305">Weitere Informationen und Codebeispiele finden Sie im Eintrag ["Task.Run" Visual Studio. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) im zur parallelen Programmierung mit .NET Blog.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1305">For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-1306">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="function" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1306">The exception that is thrown when the <paramref name="function" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c9d1e-1307">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="creationOptions" />-Argument einen ungültigen TaskCreationOptions-Wert angibt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1307">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="c9d1e-1308">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="creationOptions" />-Argument einen ungültigen TaskCreationOptions-Wert angibt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1308">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="c9d1e-1309">Weitere Informationen finden Sie in den Hinweisen zu <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1309">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-1310">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1310">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-1311">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1311">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c9d1e-1312">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1312">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew&lt;TResult&gt; (Func&lt;object,TResult&gt; function, object state, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; StartNew&lt;TResult&gt;(class System.Func`2&lt;object, !!TResult&gt; function, object state, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;System::Object ^, TResult&gt; ^ function, System::Object ^ state, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;obj, 'Result&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, state, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="c9d1e-1313">Der Typ des Ergebnisses, das über das <see cref="T:System.Threading.Tasks.Task`1" />-Element verfügbar ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1313">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="function"><span data-ttu-id="c9d1e-1314">Ein Funktionsdelegat, der das zukünftige Ergebnis zurückgibt, das mithilfe des <see cref="T:System.Threading.Tasks.Task`1" />-Elements verfügbar sein wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1314">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <param name="state"><span data-ttu-id="c9d1e-1315">Ein Objekt, das vom <paramref name="function" />-Delegaten zu verwendende Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1315">An object containing data to be used by the <paramref name="function" /> delegate.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="c9d1e-1316">Das <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />-Element, das der neuen <see cref="T:System.Threading.Tasks.Task" /> zugewiesen wird</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1316">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new <see cref="T:System.Threading.Tasks.Task" /></span></span></param>
        <summary><span data-ttu-id="c9d1e-1317">Erstellt und startet ein <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1317">Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-1318">Der gestartete <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1318">The started <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9d1e-1319">Aufrufen von StartNew entspricht funktional dem Erstellen einer <xref:System.Threading.Tasks.Task%601> mithilfe einer seiner Konstruktoren und dem anschließenden Aufrufen <xref:System.Threading.Tasks.Task.Start%2A> zur Planung der für die Ausführung.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1319">Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="c9d1e-1320">Beginnend mit der [!INCLUDE[net_v45](~/includes/net-v45-md.md)], können Sie die <xref:System.Threading.Tasks.Task.Run%2A> -Methode mit einer <xref:System.Action> -Objekt als eine schnelle Möglichkeit zum Aufrufen <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> mit Standardparametern.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1320">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="c9d1e-1321">Weitere Informationen und Codebeispiele finden Sie im Eintrag ["Task.Run" Visual Studio. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) im zur parallelen Programmierung mit .NET Blog.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1321">For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c9d1e-1322">Das angegebene <see cref="T:System.Threading.CancellationToken" /> wurde bereits verworfen.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1322">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-1323">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="function" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1323">The exception that is thrown when the <paramref name="function" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-1324">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1324">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-1325">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1325">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c9d1e-1326">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1326">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew&lt;TResult&gt; (Func&lt;object,TResult&gt; function, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; StartNew&lt;TResult&gt;(class System.Func`2&lt;object, !!TResult&gt; function, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartNew(Of TResult) (function As Func(Of Object, TResult), state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;System::Object ^, TResult&gt; ^ function, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;obj, 'Result&gt; * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="c9d1e-1327">Der Typ des Ergebnisses, das über das <see cref="T:System.Threading.Tasks.Task`1" />-Element verfügbar ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1327">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="function"><span data-ttu-id="c9d1e-1328">Ein Funktionsdelegat, der das zukünftige Ergebnis zurückgibt, das mithilfe des <see cref="T:System.Threading.Tasks.Task`1" />-Elements verfügbar sein wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1328">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <param name="state"><span data-ttu-id="c9d1e-1329">Ein Objekt, das vom <paramref name="function" />-Delegaten zu verwendende Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1329">An object containing data to be used by the <paramref name="function" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="c9d1e-1330">Ein TaskCreationOptions-Wert, der das Verhalten des erstellten <see cref="T:System.Threading.Tasks.Task`1" />-Elements steuert.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1330">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="c9d1e-1331">Erstellt und startet ein <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1331">Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-1332">Der gestartete <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1332">The started <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9d1e-1333">Aufrufen von StartNew entspricht funktional dem Erstellen einer <xref:System.Threading.Tasks.Task%601> mithilfe einer seiner Konstruktoren und dem anschließenden Aufrufen <xref:System.Threading.Tasks.Task.Start%2A> zur Planung der für die Ausführung.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1333">Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="c9d1e-1334">Beginnend mit der [!INCLUDE[net_v45](~/includes/net-v45-md.md)], können Sie die <xref:System.Threading.Tasks.Task.Run%2A> -Methode mit einer <xref:System.Action> -Objekt als eine schnelle Möglichkeit zum Aufrufen <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> mit Standardparametern.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1334">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="c9d1e-1335">Weitere Informationen und Codebeispiele finden Sie im Eintrag ["Task.Run" Visual Studio. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) im zur parallelen Programmierung mit .NET Blog.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1335">For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-1336">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="function" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1336">The exception that is thrown when the <paramref name="function" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c9d1e-1337">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="creationOptions" />-Argument einen ungültigen TaskCreationOptions-Wert angibt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1337">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="c9d1e-1338">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="creationOptions" />-Argument einen ungültigen TaskCreationOptions-Wert angibt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1338">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="c9d1e-1339">Weitere Informationen finden Sie in den Hinweisen zu <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1339">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-1340">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1340">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-1341">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1341">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c9d1e-1342">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1342">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew&lt;TResult&gt; (Func&lt;TResult&gt; function, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; StartNew&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; function, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;TResult&gt; ^ function, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;'Result&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, cancellationToken, creationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="c9d1e-1343">Der Typ des Ergebnisses, das über das <see cref="T:System.Threading.Tasks.Task`1" />-Element verfügbar ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1343">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="function"><span data-ttu-id="c9d1e-1344">Ein Funktionsdelegat, der das zukünftige Ergebnis zurückgibt, das mithilfe des <see cref="T:System.Threading.Tasks.Task`1" />-Elements verfügbar sein wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1344">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="c9d1e-1345">Das <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />, das der neuen Aufgabe zugewiesen wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1345">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new task.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="c9d1e-1346">Ein TaskCreationOptions-Wert, der das Verhalten des erstellten <see cref="T:System.Threading.Tasks.Task`1" />-Elements steuert.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1346">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <param name="scheduler"><span data-ttu-id="c9d1e-1347">Das <see cref="T:System.Threading.Tasks.TaskScheduler" />, das zum Planen des erstellten <see cref="T:System.Threading.Tasks.Task`1" /> verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1347">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="c9d1e-1348">Erstellt und startet ein <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1348">Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-1349">Der gestartete <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1349">The started <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9d1e-1350">Aufrufen von StartNew entspricht funktional dem Erstellen einer <xref:System.Threading.Tasks.Task%601> mithilfe einer seiner Konstruktoren und dem anschließenden Aufrufen <xref:System.Threading.Tasks.Task.Start%2A> zur Planung der für die Ausführung.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1350">Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="c9d1e-1351">Beginnend mit der [!INCLUDE[net_v45](~/includes/net-v45-md.md)], können Sie die <xref:System.Threading.Tasks.Task.Run%2A> -Methode mit einer <xref:System.Action> -Objekt als eine schnelle Möglichkeit zum Aufrufen <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> mit Standardparametern.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1351">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="c9d1e-1352">Weitere Informationen und Codebeispiele finden Sie im Eintrag ["Task.Run" Visual Studio. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) im zur parallelen Programmierung mit .NET Blog.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1352">For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c9d1e-1353">Das angegebene <see cref="T:System.Threading.CancellationToken" /> wurde bereits verworfen.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1353">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-1354">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="function" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1354">The exception that is thrown when the <paramref name="function" /> argument is null.</span></span>  
  
<span data-ttu-id="c9d1e-1355">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-1355">-or-</span></span> 
<span data-ttu-id="c9d1e-1356">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="scheduler" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1356">The exception that is thrown when the <paramref name="scheduler" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c9d1e-1357">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="creationOptions" />-Argument einen ungültigen TaskCreationOptions-Wert angibt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1357">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="c9d1e-1358">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="creationOptions" />-Argument einen ungültigen TaskCreationOptions-Wert angibt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1358">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="c9d1e-1359">Weitere Informationen finden Sie in den Hinweisen zu <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1359">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-1360">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1360">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-1361">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1361">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c9d1e-1362">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1362">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew&lt;TResult&gt; (Func&lt;object,TResult&gt; function, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; StartNew&lt;TResult&gt;(class System.Func`2&lt;object, !!TResult&gt; function, object state, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;System::Object ^, TResult&gt; ^ function, System::Object ^ state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;obj, 'Result&gt; * obj * System.Threading.CancellationToken * System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, state, cancellationToken, creationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="c9d1e-1363">Der Typ des Ergebnisses, das über das <see cref="T:System.Threading.Tasks.Task`1" />-Element verfügbar ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1363">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="function"><span data-ttu-id="c9d1e-1364">Ein Funktionsdelegat, der das zukünftige Ergebnis zurückgibt, das mithilfe des <see cref="T:System.Threading.Tasks.Task`1" />-Elements verfügbar sein wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1364">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <param name="state"><span data-ttu-id="c9d1e-1365">Ein Objekt, das vom <paramref name="function" />-Delegaten zu verwendende Daten enthält.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1365">An object containing data to be used by the <paramref name="function" /> delegate.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="c9d1e-1366">Das <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />, das der neuen Aufgabe zugewiesen wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1366">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new task.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="c9d1e-1367">Ein TaskCreationOptions-Wert, der das Verhalten des erstellten <see cref="T:System.Threading.Tasks.Task`1" />-Elements steuert.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1367">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <param name="scheduler"><span data-ttu-id="c9d1e-1368">Das <see cref="T:System.Threading.Tasks.TaskScheduler" />, das zum Planen des erstellten <see cref="T:System.Threading.Tasks.Task`1" /> verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1368">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="c9d1e-1369">Erstellt und startet ein <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1369">Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></summary>
        <returns><span data-ttu-id="c9d1e-1370">Der gestartete <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1370">The started <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9d1e-1371">Aufrufen von StartNew entspricht funktional dem Erstellen einer <xref:System.Threading.Tasks.Task%601> mithilfe einer seiner Konstruktoren und dem anschließenden Aufrufen <xref:System.Threading.Tasks.Task.Start%2A> zur Planung der für die Ausführung.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1371">Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="c9d1e-1372">Beginnend mit der [!INCLUDE[net_v45](~/includes/net-v45-md.md)], können Sie die <xref:System.Threading.Tasks.Task.Run%2A> -Methode mit einer <xref:System.Action> -Objekt als eine schnelle Möglichkeit zum Aufrufen <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> mit Standardparametern.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1372">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="c9d1e-1373">Weitere Informationen und Codebeispiele finden Sie im Eintrag ["Task.Run" Visual Studio. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) im zur parallelen Programmierung mit .NET Blog.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1373">For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="c9d1e-1374">Das angegebene <see cref="T:System.Threading.CancellationToken" /> wurde bereits verworfen.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1374">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c9d1e-1375">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="function" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1375">The exception that is thrown when the <paramref name="function" /> argument is null.</span></span>  
  
<span data-ttu-id="c9d1e-1376">- oder - </span><span class="sxs-lookup"><span data-stu-id="c9d1e-1376">-or-</span></span> 
<span data-ttu-id="c9d1e-1377">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="scheduler" />-Argument 0 (null) ist.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1377">The exception that is thrown when the <paramref name="scheduler" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c9d1e-1378">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="creationOptions" />-Argument einen ungültigen TaskCreationOptions-Wert angibt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1378">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="c9d1e-1379">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="creationOptions" />-Argument einen ungültigen TaskCreationOptions-Wert angibt.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1379">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="c9d1e-1380">Weitere Informationen finden Sie in den Hinweisen zu <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1380">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <altmember cref="T:System.Threading.Tasks.TaskScheduler" />
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="c9d1e-1381">Task Parallel Library (TPL)</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1381">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="c9d1e-1382">Verketten von Aufgaben mithilfe von Fortsetzungsaufgaben</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1382">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="c9d1e-1383">Aufgabenabbruch</span><span class="sxs-lookup"><span data-stu-id="c9d1e-1383">Task Cancellation</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
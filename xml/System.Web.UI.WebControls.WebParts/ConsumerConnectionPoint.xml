<Type Name="ConsumerConnectionPoint" FullName="System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint">
  <Metadata><Meta Name="ms.openlocfilehash" Value="29624fae597644e3fae1c16dd4d9a165a85e3f15" /><Meta Name="ms.sourcegitcommit" Value="2dd0eede6edd6dd3d2aa8f79010848658b967609" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="04/18/2019" /><Meta Name="ms.locfileid" Value="59349182" /></Metadata><TypeSignature Language="C#" Value="public class ConsumerConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ConsumerConnectionPoint extends System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
  <TypeSignature Language="VB.NET" Value="Public Class ConsumerConnectionPoint&#xA;Inherits ConnectionPoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class ConsumerConnectionPoint : System::Web::UI::WebControls::WebParts::ConnectionPoint" />
  <TypeSignature Language="F#" Value="type ConsumerConnectionPoint = class&#xA;    inherit ConnectionPoint" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.ConnectionPoint</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Definiert ein Verbindungspunktobjekt, mit dem ein Serversteuerelement beim Verbinden mit einem Anbieter als Consumer fungieren kann.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Alle Webparts-Verbindung zwischen zwei Serversteuerelementen jedes Steuerelement benötigen (neben anderen die Anforderungen) einer zugeordneten Dienstverbindungspunkt-Objekt, die ermöglicht und so die Verbindung mit dem anderer Steuerelemente und entweder Daten bereitstellen oder verwenden, je nachdem, ob das Steuerelement wird als Anbieter oder Consumer für die Verbindung festgelegt. Ein <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> Objekt in der Regel enthält die Details für das wie ein Steuerelement verbinden kann, um ein anderes Steuerelement und den Typ der Daten, die gemeinsam verwendet werden kann. Für ein Steuerelement, das als Consumer in einer Verbindung fungiert, der Verbindungspunkt muss eine <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Objekt. Lesen Sie ausführliche Informationen dazu, Webparts-Verbindungen und Verbindungspunkte die im Abschnitt Siehe auch weiter unten aufgeführten Themen.  
  
 Zum Erstellen einer <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Objekt, es sind mehrere Schritte erforderlich:  
  
1.  Aktivieren Sie ein Consumer-Steuerelement auf eine Schnittstelleninstanz. Ein <xref:System.Web.UI.WebControls.WebParts.WebPart> oder sonstiges Serversteuerelement (jeder Typ von Serversteuerelement, das hinzugefügt werden, wird, eine <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> Zone verwendet werden kann) müssen in der Lage, Daten aus einer bestimmten Schnittstelleninstanz zu nutzen. Das Steuerelement muss die Schnittstelle nicht implementieren. nur die Anbieter müssen sie implementieren. Der Consumer entweder mit den genauen Schnittstellentyp, der von einem Anbieter bereitgestellten arbeiten kann, oder, falls nicht, eine <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> Objekt kann verwendet werden, zum Transformieren von Daten aus den Schnittstellentyp des Anbieters in einen Typ, der vom Consumer erkannt wird. Eine typische Möglichkeit zum Aktivieren von eines Consumers ist ein privates Feld enthält einen Verweis auf die gewünschte Schnittstelle-Typ zu deklarieren.  
  
2.  Identifizieren Sie eine Rückrufmethode. Eine Methode in der Consumer muss als die Callback-Methode zum Herstellen einer Verbindung mit dem Anbieter identifiziert werden. Diese Methode ruft eine Instanz der Schnittstelle an, dass der Anbieter implementiert, und weist es (beispielsweise) mit dem privaten Feld im ersten Schritt erstellt. Die Webparts Möglichkeit zur Identifizierung einer Rückrufmethode im Consumer ist das Hinzufügen einer `ConnectionConsumer` Metadatenattribut (von definiert die <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> Klasse) an die Methode, die die Schnittstelleninstanz empfängt. Wenn das Attribut hinzugefügt wird, ist der einzige erforderliche Parameter einen Anzeigenamen für den Consumer-Verbindungspunkt verwenden. Optionale Parameter können auch, wie z. B. eine-ID hinzugefügt werden  
  
3.  Prozess und die Ausgabe die Daten von der Schnittstelleninstanz aus. Führen interne Verarbeitung aus, für die Daten nach Bedarf, und klicken Sie dann in der Regel ein Consumersteuerelement die Daten auf der Seite gerendert wird. Eine gängige Methode hierfür ist zum Überschreiben des Steuerelements <xref:System.Web.UI.Control.OnPreRender%2A> Methode.  
  
    > [!NOTE]
    >  Bei einer synchronen Anforderung, ein Consumer sollte Anfordern von Daten direkt vom Anbieter während oder unmittelbar nach der <xref:System.Web.UI.Control.PreRender> Ereignis. Während einer asynchronen Anforderung Wenn Callback-Methode des Anbieters nicht zu einem beliebigen Zeitpunkt, während des Renderns aufgerufen wird, kann der Entwickler wird davon ausgegangen, dass keine Daten an den Consumer gesendet wurde.  
  
 Nachdem ein Steuerelement, das als Consumer fungiert ausgestattet wurde wurde, kann das Steuerelement an Verbindungen (vorausgesetzt, der einem Anbietersteuerelement auch ausgestattet und verfügbar ist) teilnehmen. Um eine statische, deklarative Verbindung im Markup einer Webseite zu erstellen, können Entwickler die `<asp:webpartconnection>` Element. Wenn die `ConnectionConsumer` -Attribut in den Consumer-Quellcode, der identifiziert die Callback-Methode gibt eine ID für den Verbindungspunkt, und klicken Sie dann diesen Wert zugewiesen werden die `ConsumerConnectionPointID` -Attribut in der `<asp:webpartconnection>` Element auf einer Seite. Ein Grund, dass ein Entwickler eine ID für einen Consumer-Verbindungspunkt angegeben werden kann, ist treten mehrere Verbindungspunkte im Consumersteuerelement definiert. Wenn eine ID für den Consumer-Verbindungspunkt im Consumersteuerelement nicht angegeben wird, ein Wert keine zuzuweisenden der `ConsumerConnectionPointID` Attribut auf der Seite, da die Verbindung erstellt wird, mit einem Standardwert von abgerufen der <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> Feld.  
  
 Um eine Verbindung im Code zu erstellen, müssen Entwickler eine neue erstellen <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> -Objekt durch Aufrufen der <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> -Methode und die ID des Consumersteuerelements, zusammen mit der ID oder Index des definierten an sie übergibt <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Objekt in das Consumer-Steuerelement. Das zurückgegebene <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Objekt sowie einen Verweis auf das Consumer-Steuerelement, einen Verweis auf das Anbietersteuerelement und einem entsprechenden <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Objekt, werden alle, die an die <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> Methode zum Erstellen eines neuen <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Objekt.  
  
 Obwohl Entwickler Consumerverbindungspunkten im Rahmen der Einrichtung von Verbindungen, entweder deklarativ oder programmgesteuert verwenden können, können Benutzer auch mit Consumerverbindungspunkten zum Herstellen von Verbindungen über die Benutzeroberfläche (UI) interagieren. Wenn Entwickler deklarieren eine <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> Steuerelement auf einer Webseite, bietet es eine Laufzeit-Benutzeroberfläche für Benutzer zum Herstellen von Verbindungen. Wenn Benutzer das Anbietersteuerelement wählen Sie als Ausgangspunkt für das Herstellen der Verbindung durch Klicken auf die verbinden-Verb (sie können auch die Consumer, besteht kein Unterschied in der resultierenden Verbindung), in der Benutzeroberfläche sehen sie ein Dropdown-Listenfeld-Steuerelement, mit der den Anzeigenamen der verfügbaren Consumer Verbindung Punkt (oder Punkte, wenn mehrere vorhanden sind), dass der Anbieter die Daten senden kann. Benutzer müssen einen Consumer-Verbindungspunkt zum Herstellen einer Verbindung auswählen.  
  
 Ein <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Objekt ein bestimmter Consumer-Steuerelement direkt zugeordnet, und speichert Informationen zu einer Verbindung in den Eigenschaften, die sie von der Basisklasse erbt <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> Klasse. Z. B. in der geerbten <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> -Eigenschaft, ein Consumer-Verbindungspunkt behält den Typ der Schnittstelle verwendet. Wenn der Anbieter und Consumer in einer Verbindung den Schnittstellentyp verstehen, sind die Steuerelemente, die eine direkte Verbindung bilden können und kompatibel. Wenn der Anbieter und der Consumer mit dem gleichen Schnittstellentyp arbeiten können, sind sie nicht kompatibel und müssen eine <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> Objekt zum Übersetzen des Anbieterverbindungspunkts <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> Eigenschaft in einen Typ, die der Consumer verwenden können. Eine weitere wichtige geerbte Eigenschaft wird die <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> Eigenschaft, die einen Anzeigenamen ein, in der Benutzeroberfläche für Benutzer auf einen Consumer-Verbindungspunkt angezeigt ermöglicht zeigen Sie beim Erstellen von Verbindungen. Der Anzeigename ist der erforderliche Parameter, wenn Entwickler Hinzufügen einer `ConnectionConsumer` Attribut an die Rückrufmethode in einem Consumersteuerelement. Die geerbte <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> Eigenschaft eignet sich auch, wie oben angegeben werden, da sie einen eindeutigen Bezeichner für einen Consumer-Verbindungspunkt bereitstellt, falls ein Consumer mehrere Verbindungspunkte verfügt. Ein Consumer kann verfügen über mehrere <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Objekte darin und in diesem Fall definiert, wenn Entwickler Hinzufügen der `ConnectionConsumer` Attribut an eine Methode, sollten sie angeben, einen ID-Wert, um jeden Verbindungspunkt unterscheiden zu können. Eine andere wichtige geerbte Eigenschaft wird die <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> -Eigenschaft, die angibt, ob ein Consumerverbindungspunkt gleichzeitig an mehrere Anbieter eine Verbindung herstellen kann. Ist der Wert dieser Eigenschaft `false` standardmäßig für Consumerverbindungspunkten (während es standardmäßig `true` für Anbieterverbindungspunkten).  
  
 Die <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Klasse fügt mehrere eindeutige Methoden auf die Member erbt von der <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> Klasse. Die <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> Methode aufruft, die Consumer eigenen definiert Callback-Methode, um die Schnittstelleninstanz vom Anbieter abzurufen. Die <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> Methode gibt einen booleschen Wert, der angibt, ob der Verbindungspunkt zum Herstellen von Verbindungen, basierend auf den aktuellen Status der zugeordnete Consumersteuerelement werden kann.  
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt die einfache Möglichkeiten, um eine Verbindung deklarativ zu erstellen, die programmgesteuert oder über die Benutzeroberfläche ein Consumer-Verbindungspunkt.  
  
 Das Beispiel besteht aus vier Teilen:  
  
-   Ein Benutzersteuerelement, das Ihnen ermöglicht, ändern Sie die Webparts-Anzeigemodus auf einer Seite.  
  
-   Quellcode für eine Schnittstelle und die beiden <xref:System.Web.UI.WebControls.WebParts.WebPart> fungiert als Anbieter und Consumer für eine Verbindung steuert.  
  
-   Eine Webseite auf alle Steuerelemente hosten, und führen das Codebeispiel.  
  
-   Eine Erklärung, wie die Beispielseite ausgeführt werden soll.  
  
 Der erste Teil dieses Codebeispiels wird das Benutzersteuerelement, das Benutzern ermöglicht, den Anzeigemodus auf einer Webseite zu ändern. Den folgende Quellcode in einer ASCX-Datei speichern, die durch das Erteilen sie des Dateinamen, die zugewiesen ist, die `Src` Attribut der `Register` die Richtlinie für dieses Steuerelement, das am oberen Rand der Hostingwebseite ist. Weitere Informationen zu Modi und eine Beschreibung des Quellcodes in diesem Steuerelement anzuzeigen, finden Sie unter [Exemplarische Vorgehensweise: Webparts-Seite wechseln des Anzeigemodus auf einer Webseite](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 Der zweite Teil des Codebeispiels wird der Quellcode für die Benutzeroberfläche und Steuerelemente. Die Quelldatei enthält eine einfache Schnittstelle mit dem Namen `IZipCode`. Es gibt auch eine <xref:System.Web.UI.WebControls.WebParts.WebPart> Klasse mit dem Namen `ZipCodeWebPart` , implementiert die Schnittstelle, und wie das Anbietersteuerelement fungiert. Die andere <xref:System.Web.UI.WebControls.WebParts.WebPart> Klasse `WeatherWebPart`, und fungiert als Consumer für die Verbindung. Diese Klasse verfügt über eine Methode namens `GetZipCode` , die eine Instanz des ab der `IZipCode` Schnittstelle aus dem Anbietersteuerelement. Beachten Sie, dass diese Methode als die Consumer Verbindung mit gekennzeichnet ist eine `ConnectionConsumer` Attribut in seinen Metadaten. Dies ist der Mechanismus zum Identifizieren der Verbindung Point-Methode im Consumersteuerelement.  
  
 Das Codebeispiel ausführen müssen Sie diesen Quellcode kompilieren. Sie können explizit kompilieren und die resultierende Assembly im Bin-Ordner der Website oder im globalen Assemblycache ablegen. Alternativ können Sie den Quellcode im Ordner "App_Code" Ihrer Website, ablegen, wo er zur Laufzeit dynamisch kompiliert wird. Dieses Codebeispiel verwendet die dynamische Kompilierung. Eine exemplarische Vorgehensweise, die zeigt, wie kompiliert wird, finden Sie unter [Exemplarische Vorgehensweise: Entwickeln und verwenden ein benutzerdefinierten Webserver-Steuerelement](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  
  
 Der dritte Teil des Codebeispiels wird die Webseite. Im oberen Bereich werden `Register` Anzeigemodi von Anweisungen zum Registrieren die benutzerdefinierten Steuerelemente, die die Verbindung zu bilden, und das Benutzersteuerelement, das Benutzern ermöglicht, ändern Sie auf der Seite. Die Verbindung selbst wird deklarativ in erstellt die `<staticconnections>` Element auf der Seite. Dies zeigt eine Möglichkeit zum Herstellen eine Verbindung – Beachten Sie die `ConsumerConnectionPointID` -Attribut in der `<asp:webpartconnection>` Element. Sie können die Verbindung auch programmgesteuert erstellen. der Code dafür ist in der `Button1_Click` Methode. In diesem Fall eine <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Objekt erstellt und dann an eine Methode, die die eigentliche Verbindung wird übergeben. Ob die Verbindung entweder deklarativ oder programmgesteuert erstellt wird, müssen immer Verbindungspunkte für den Anbieter und Consumer angegeben werden. Die `Button2_Click` Methode greift auf die <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> von Objekten für den Anbieter und Consumer und schreibt Sie einige der zugehörigen Eigenschaftswerte enthält, in eine Bezeichnung auf der Seite.  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 Nachdem Sie die Seite in einem Browser laden, klicken Sie auf die **Details bezüglich der Verbindungspunkte** Schaltfläche. Informationen zum Anbieter und Consumer zeigt Verbindung hergestellt werden, in der deklarativen Verbindung angezeigt. Verwenden Sie als Nächstes die **Anzeigemodus** Verbindungsmodus, Dropdown-Steuerelement auf die Seite in wechseln. Im Verbenmenü, der die **ZIP Code Provider** <xref:System.Web.UI.WebControls.WebParts.WebPart> Steuerelement an (dargestellt durch einen Pfeil in der Titelleiste), klicken Sie auf der Connect-Verb. Die Verbindung, die Benutzeroberfläche angezeigt wird, erstellt automatisch von der `<asp:connectionszone>` Steuerelement deklariert werden, auf der Seite. Dies ist eine weitere Möglichkeit zum Herstellen eine Verbindung (über die Benutzeroberfläche), zusammen mit den zuvor erläuterten deklarativen und programmatischen-Methoden. Klicken Sie auf die **trennen** Schaltfläche, um die vorhandene statische Verbindung zu beenden. Klicken Sie auf die **erstellen Sie eine Verbindung mit einem Consumer** Link. Die Benutzeroberfläche zeigt nun eine Dropdown-Steuerelement, die die Anzeigenamen der Consumer Verbindung auflistet. Wählen Sie den Verbindungspunkt in der Dropdown-Liste aus, und klicken Sie dann auf **Connect** zum Herstellen die Verbindung. Klicken Sie anschließend **trennen** erneut aus. Klicken Sie auf die **dynamische Verbindung** klicken, um programmgesteuert eine Verbindung zu erstellen. Verwenden der **Anzeigemodus** Steuerelement in den Durchsuchen-Modus zurück. Klicken Sie auf die **Verbindungsdetails zeigen** erneut auf die Schaltfläche, um anzugeben details zu den Consumerverbindungspunkt-Objekt einmal mehr.  
  
 Im Beispiel hat gezeigt, eine Verbindung herstellen und einen Consumer-Verbindungspunkt auf drei verschiedene Arten verwenden: eine statische Verbindung deklariert wird, in das Markup einer Webseite; eine Verbindung erstellt wird, im Code, mit denen eine <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Objekt und eine Verbindung über die Benutzeroberfläche für Verbindungen durch einen Benutzer erstellt.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Webparts-Steuerelemente</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178187(v=vs.100)">Übersicht über Webparts</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConsumerConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MethodInfo callbackMethod, class System.Type interfaceType, class System.Type controlType, string displayName, string id, bool allowsMultipleConnections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callbackMethod As MethodInfo, interfaceType As Type, controlType As Type, displayName As String, id As String, allowsMultipleConnections As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConsumerConnectionPoint(System::Reflection::MethodInfo ^ callbackMethod, Type ^ interfaceType, Type ^ controlType, System::String ^ displayName, System::String ^ id, bool allowsMultipleConnections);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint : System.Reflection.MethodInfo * Type * Type * string * string * bool -&gt; System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" Usage="new System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint (callbackMethod, interfaceType, controlType, displayName, id, allowsMultipleConnections)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callbackMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="interfaceType" Type="System.Type" />
        <Parameter Name="controlType" Type="System.Type" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="allowsMultipleConnections" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callbackMethod">Die Methode im Consumersteuerelement, die zum Erstellen einer Verbindung eine Schnittstelleninstanz an die Consumer zurückgibt.</param>
        <param name="interfaceType">Der <see cref="T:System.Type" /> der Schnittstelle, die der Consumer von einem Anbieter empfängt.</param>
        <param name="controlType">Der <see cref="T:System.Type" /> des Consumersteuerelements, dem der Consumerverbindungspunkt zugeordnet wird.</param>
        <param name="displayName">Ein Anzeigename für den Consumerverbindungspunkt, der Benutzern in der Verbindungs-Benutzeroberfläche angezeigt wird.</param>
        <param name="id">Ein eindeutiger Bezeichner für den Consumerverbindungspunkt.</param>
        <param name="allowsMultipleConnections">Ein boolescher Wert, der angibt, ob der Consumerverbindungspunkt mehrere gleichzeitige Verbindungen mit Anbietern haben kann.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A> Konstruktor für die <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Klasse ruft einfach den Basiskonstruktor, übergibt Sie an die verschiedenen Parametern und initialisiert die Basisklasse.  
  
 Der Basisklassenkonstruktor prüft eine Reihe von den Parametern für einen Verbindungspunkt und kann verschiedene Ausnahmen auslösen. Eine Liste der möglichen Ausnahmen finden Sie unter Abschnitt für Ausnahmen.  
  
 Rufen Sie die <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A> Konstruktor zur Erstellung Ihrer eigenen Instanz der <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Klasse. In Fällen, in dem Sie sind einfach eine Verbindung herstellen und die Klasse nicht erweitern, Sie sollten jedoch aufrufen, die <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> Methode, um ein Objekt von einem Anbieter zurückzugeben.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie für die Ableitung der <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Klasse, um einen benutzerdefinierten Anbieterverbindungspunkt erstellen.  
  
 Im Codebeispiel besteht aus drei Teilen:  
  
-   Eine Quelldatei, die einen Anbieter enthält <xref:System.Web.UI.WebControls.WebParts.WebPart> zu steuern, einen Consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> Kontrolle und eine benutzerdefinierte <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Objekt.  
  
-   Eine Webseite, die Steuerelemente in einer statischen Verbindung hostet.  
  
-   Eine Erklärung der Vorgehensweise den Beispielcode auszuführen.  
  
 Der erste Teil des Codebeispiels wird die Quelle für den Anbieter und Consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> Steuerelemente und eine benutzerdefinierte <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Klasse, mit dem Namen `TableConsumerConnectionPoint`. Beachten Sie, dass der Konstruktor, der die `TableConsumerConnectionPoint` -Klasse ruft den Basiskonstruktor, und übergeben sie die erforderlichen Parameter wie in den Abschnitt "Parameters" angegeben. Beachten Sie, dass in der `TableConsumer` -Klasse, die `SetConnectionInterface` Methode angegeben ist, als Rückrufmethode für Verbindungen und die `ConnectionConsumer` Attribut deklariert, die benutzerdefinierte `TableConsumerConnectionPoint` als Parameter. Dies veranschaulicht, wie erstellen einen benutzerdefinierten Consumer-Verbindungspunkt, und klicken Sie dann ein Consumer-Steuerelement zugeordnet wird. In diesem Beispiel wird davon ausgegangen, dass der Quellcode dynamisch kompiliert wird, damit Sie die Quellcodedatei in einem Unterordner "App_Code" Ihrer Webanwendung platzieren sollten.  
  
 [!code-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/connectionControls.cs#1)]  
  
 Der zweite Teil des Codebeispiels wird die Webseite, auf dem die benutzerdefinierten Steuerelemente in einem statischen Webparts-Verbindung gehostet. Am oberen Rand der Seite ist eine `Register` Richtlinie, um ein Präfix und den Namespace für die benutzerdefinierten Steuerelemente zu deklarieren. Die Verbindung deklariert wird, indem ein `<asp:webpartconnection>` -Element, und der Anbieter und Consumer-Steuerelemente werden deklariert, innerhalb einer `<asp:webpartzone>` Element.  
  
 [!code-aspx-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/defaultcs.aspx#3)]  
  
 Laden Sie die Seite in einem Browser. Die Verbindung zwischen den Steuerelementen bereits vorhanden ist, und der Consumer zeigt die Daten vom Anbieter, da die Verbindung als eine statische Verbindung auf der Seite deklariert wurde.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="callbackMethod" /> ist <see langword="null" />.  
  
- oder -  
 <paramref name="interfaceType" /> ist <see langword="null" />.  
  
- oder -  
 <paramref name="controlType" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="displayName" /> ist <see langword="null" /> oder eine leere Zeichenfolge ("").</exception>
        <exception cref="T:System.ArgumentException"><paramref name="controlType" /> ist nicht der gleiche Typ wie das Consumersteuerelement (oder eine davon abgeleitete gültige Klasse).</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Webparts-Steuerelemente</related>
      </Docs>
    </Member>
    <Member MemberName="SetObject">
      <MemberSignature Language="C#" Value="public virtual void SetObject (System.Web.UI.Control control, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetObject(class System.Web.UI.Control control, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(System.Web.UI.Control,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetObject(System::Web::UI::Control ^ control, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetObject : System.Web.UI.Control * obj -&gt; unit&#xA;override this.SetObject : System.Web.UI.Control * obj -&gt; unit" Usage="consumerConnectionPoint.SetObject (control, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="control">Das einem Consumerverbindungspunkt zugeordnete Consumersteuerelement.</param>
        <param name="data">Die von einem Anbietersteuerelement zurückgegebene Schnittstelleninstanz.</param>
        <summary>Ruft die Rückrufmethode in einem Consumersteuerelement auf und ruft die Schnittstelleninstanz von einem Anbietersteuerelement ab.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode empfängt eine Schnittstelleninstanz von einem Anbieter, der Daten für das Consumersteuerelement enthält.  
  
 Die <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> Methode wird aufgerufen, indem <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Objekte, wenn eine Verbindung aktiviert wird. Dies ist ein wichtiger Schritt, der Teil, der eine Verbindung initiieren, und Aktivieren von zwei Steuerelementen zum Freigeben von Daten ist.  
  
 Der Consumer-Steuerelement in einer Verbindung muss mit den gleichen Typ der Schnittstelle als Anbieter arbeiten können. Die Steuerelemente sind nicht kompatibel, wenn dies nicht der Fall ist, und ein <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> Objekt muss zum Herstellen einer Verbindung verwendet werden.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="control" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SupportsConnection">
      <MemberSignature Language="C#" Value="public virtual bool SupportsConnection (System.Web.UI.Control control, System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection secondaryInterfaces);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SupportsConnection(class System.Web.UI.Control control, class System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection secondaryInterfaces) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool SupportsConnection(System::Web::UI::Control ^ control, System::Web::UI::WebControls::WebParts::ConnectionInterfaceCollection ^ secondaryInterfaces);" />
      <MemberSignature Language="F#" Value="abstract member SupportsConnection : System.Web.UI.Control * System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection -&gt; bool&#xA;override this.SupportsConnection : System.Web.UI.Control * System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection -&gt; bool" Usage="consumerConnectionPoint.SupportsConnection (control, secondaryInterfaces)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="secondaryInterfaces" Type="System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" />
      </Parameters>
      <Docs>
        <param name="control">Das dem <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" /> zugeordnete Consumersteuerelement.</param>
        <param name="secondaryInterfaces">Eine <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" /> aller sekundären Schnittstellen, die an einer Verbindung beteiligt sind.</param>
        <summary>Bestimmt, ob ein Consumerverbindungspunkt momentan in der Lage ist, eine Verbindung herzustellen.</summary>
        <returns><see langword="true" />, wenn ein Verbindungspunkt momentan in der Lage ist, eine Verbindung herzustellen; andernfalls <see langword="false" />. Die Standardeinstellung ist <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> Methode gibt immer implementierte `true` in allen Fällen für die <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Klasse. Ziel für diese Methode ist es so, dass sie über den Status der überprüfen `control` und `secondaryInterfaces` an bestimmten Punkten kritisch, um zu bestimmen, ob eine <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Objekt ist momentan in der Lage, eine Verbindung zu erstellen.  
  
 Szenarien möglich, in denen `control` befindet sich in einem Zustand, die nicht möglich, bilden eine Verbindung erforderlich ist und wo `secondaryInterfaces` muss vorhanden sein, bevor eine Verbindung gebildet werden kann. In solchen Fällen können Entwickler von erben die <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Klasse, und überschreiben die <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> -Methode, eine benutzerdefinierte Implementierung um zu bestimmen, wann der Verbindungspunkt-Verbindungen unterstützt werden kann.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
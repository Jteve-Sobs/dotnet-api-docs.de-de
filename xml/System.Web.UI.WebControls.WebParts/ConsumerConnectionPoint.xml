<Type Name="ConsumerConnectionPoint" FullName="System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b2bfb77c922ec1d4801ef8b0e2dc822511fa6e1c" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78765514" /></Metadata><TypeSignature Language="C#" Value="public class ConsumerConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ConsumerConnectionPoint extends System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
  <TypeSignature Language="VB.NET" Value="Public Class ConsumerConnectionPoint&#xA;Inherits ConnectionPoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class ConsumerConnectionPoint : System::Web::UI::WebControls::WebParts::ConnectionPoint" />
  <TypeSignature Language="F#" Value="type ConsumerConnectionPoint = class&#xA;    inherit ConnectionPoint" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.ConnectionPoint</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Definiert ein Verbindungspunktobjekt, mit dem ein Serversteuerelement beim Verbinden mit einem Anbieter als Consumer fungieren kann.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In jeder Webparts Verbindung zwischen zwei Server Steuerelementen muss jedes Steuerelement über (unter anderem Anforderungen) ein zugeordnetes Verbindungspunkt Objekt verfügen, das es ermöglicht, eine Verbindung mit dem anderen Steuerelement herzustellen und Daten bereitzustellen oder zu nutzen, je nachdem, ob das Steuerelement wird als Anbieter oder Consumer für die Verbindung festgelegt. Ein <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>-Objekt im Allgemeinen enthält Details dazu, wie ein Steuerelement eine Verbindung mit einem anderen Steuerelement herstellen kann, und den Typ der Daten, die es freigeben kann. Für ein Steuerelement, das in einer Verbindung als Consumer fungiert, muss der Verbindungspunkt ein <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Objekt sein. Ausführliche Informationen zu Webparts Verbindungen und Verbindungs Punkten finden Sie in den Themen, die im Abschnitt Siehe auch unten aufgeführt sind.  
  
 Zum Erstellen eines <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Objekts sind mehrere Schritte erforderlich:  
  
1.  Ermöglicht einem Consumersteuerelement, auf eine Schnittstellen Instanz zu verweisen. Ein <xref:System.Web.UI.WebControls.WebParts.WebPart> oder ein anderes Server Steuerelement (jeder Typ von Server Steuerelement, der einer <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> Zone hinzugefügt wird, kann verwendet werden) muss in der Lage sein, Daten von einer bestimmten Schnittstellen Instanz zu verarbeiten. Das Steuerelement muss die-Schnittstelle nicht implementieren. nur der Anbieter muss ihn implementieren. Der Consumer kann entweder mit dem genauen Schnittstellentyp arbeiten, der von einem Anbieter bedient wird, oder, wenn dies nicht der Fall ist, kann ein <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> Objekt verwendet werden, um Daten aus dem Schnittstellentyp eines Anbieters in einen vom Consumer verständlichen Typ umzuwandeln. Eine typische Möglichkeit zum Aktivieren eines Consumers ist das Deklarieren eines privaten Felds, das einen Verweis auf den gewünschten Schnittstellentyp enthalten soll.  
  
2.  Identifizieren Sie eine Rückruf Methode. Eine Methode im Consumer muss als Rückruf Methode identifiziert werden, um eine Verbindung mit dem Anbieter herzustellen. Diese Methode ruft eine Instanz der Schnittstelle ab, die der Anbieter implementiert, und weist Sie (z. b.) dem im ersten Schritt erstellten privaten Feld zu (z. b.). Der Webparts Ansatz zum Identifizieren einer Rückruf Methode im Consumer besteht darin, ein `ConnectionConsumer` Metadatenattribut (durch die <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>-Klasse definiert) der Methode hinzuzufügen, die die Schnittstellen Instanz empfängt. Wenn das-Attribut hinzugefügt wird, ist der einzige erforderliche Parameter ein Anzeige Name, der für den Consumerverbindungspunkt verwendet werden soll. Optionale Parameter können auch hinzugefügt werden, z. b. eine ID.  
  
3.  Verarbeiten und ausgeben der Daten von der Schnittstellen Instanz. Führen Sie eine beliebige interne Verarbeitung nach Bedarf für die Daten aus. in der Regel werden die Daten von einem Consumersteuerelement auf der Seite angezeigt. Eine gängige Vorgehensweise besteht darin, die <xref:System.Web.UI.Control.OnPreRender%2A>-Methode des Steuer Elements zu überschreiben.  
  
    > [!NOTE]
    >  Während einer synchronen Anforderung sollte ein Consumer Daten direkt vom Anbieter anfordern, während oder unmittelbar nach dem <xref:System.Web.UI.Control.PreRender> Ereignis. Wenn bei einer asynchronen Anforderung die Rückruf Methode des Anbieters zu keinem Zeitpunkt während des Renderings aufgerufen wird, kann der Entwickler davon ausgehen, dass keine Daten an den Consumer gesendet wurden.  
  
 Nachdem ein Steuerelement für die Verwendung als Consumer bereitgestellt wurde, kann das Steuerelement an Verbindungen teilnehmen (vorausgesetzt, dass ein Anbieter Steuerelement ebenfalls ausgestattet und verfügbar ist). Um eine statische, deklarative Verbindung im Markup einer Webseite zu erstellen, können Entwickler das `<asp:webpartconnection>`-Element verwenden. Wenn das `ConnectionConsumer`-Attribut im Consumerquellcode, der die Rückruf Methode identifiziert, eine ID für den Verbindungspunkt angibt, muss dieser Wert dem `ConsumerConnectionPointID`-Attribut im `<asp:webpartconnection>`-Element auf einer Seite zugewiesen werden. Ein Entwickler kann eine ID für einen Consumerverbindungspunkt angeben, wenn mehrere Verbindungspunkte im Consumer-Steuerelement definiert sind. Wenn für den Consumerverbindungspunkt im Consumer-Steuerelement keine ID angegeben ist, muss dem `ConsumerConnectionPointID`-Attribut auf der Seite kein Wert zugewiesen werden, da die Verbindung mit einem Standardwert erstellt wird, der aus dem <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> Feld abgerufen wird.  
  
 Um eine Verbindung im Code zu erstellen, müssen Entwickler ein neues <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Objekt erstellen, indem Sie die <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>-Methode aufrufen und ihr die ID des Consumersteuerelements sowie die ID oder den Index des definierten <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Objekts im Consumer-Steuerelement übergeben. Das zurückgegebene <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>-Objekt, zusammen mit einem Verweis auf das Consumer-Steuerelement, ein Verweis auf das Anbieter Steuerelement und ein entsprechendes <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>-Objekt, werden alle an die <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>-Methode weitergegeben, um ein neues <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Objekt zu erstellen.  
  
 Obwohl Entwickler beim Einrichten von Verbindungen entweder deklarativ oder Programm gesteuert Consumerverbindungspunkte verwenden können, können Benutzer auch mit Consumerverbindungspunkten interagieren, um Verbindungen über die Benutzeroberfläche herzustellen. Wenn Entwickler ein <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>-Steuerelement auf einer Webseite deklarieren, bietet es eine Lauf Zeit Benutzeroberfläche, über die Benutzer Verbindungen herstellen können. Wenn Benutzer das Anbieter Steuerelement als Ausgangspunkt für das Herstellen der Verbindung auswählen, indem Sie auf das Verbindungs Verb klicken (Sie können auch den Consumer auswählen, es gibt keinen Unterschied in der resultierenden Verbindung), wird auf der Benutzeroberfläche ein Dropdown Listen-Steuerelement mit dem zeigt die Namen der verfügbaren Consumerverbindungspunkte an (oder, wenn mehrere vorhanden sind), an die der Anbieter die Daten senden kann. Benutzer müssen einen Consumerverbindungspunkt auswählen, um eine Verbindung herzustellen.  
  
 Ein <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>-Objekt, das direkt einem bestimmten Consumer-Steuerelement zugeordnet wird, und speichert Details zu einer Verbindung in den Eigenschaften, die von der Basis <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> Klasse erbt. Beispielsweise wird in der geerbten <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> Eigenschaft ein Consumerverbindungspunkt den Typ der verwendeten Schnittstelle beibehält. Wenn sowohl der Anbieter als auch der Consumer in einer Verbindung den Schnittstellentyp verstehen, sind die Steuerelemente kompatibel und können eine direkte Verbindung bilden. Wenn der Anbieter und der Consumer nicht mit demselben Schnittstellentyp arbeiten können, sind Sie inkompatibel und müssen ein <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> Objekt verwenden, um die <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>-Eigenschaft des Anbieter Verbindungs Punkts in einen Typ zu übersetzen, mit dem der Consumer arbeiten kann. Eine weitere wichtige geerbte Eigenschaft ist die <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>-Eigenschaft, die einen anzeigen Amen bereitstellt, der auf der Benutzeroberfläche angezeigt wird, damit Benutzer beim Erstellen von Verbindungen einen Consumerverbindungspunkt auswählen können. Der Anzeige Name ist der erforderliche Parameter, wenn Entwickler der Rückruf Methode in einem Consumersteuerelement ein `ConnectionConsumer` Attribut hinzufügen. Die geerbte <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> Eigenschaft ist ebenfalls nützlich, wie oben angegeben, da Sie einen eindeutigen Bezeichner für einen Consumerverbindungspunkt bereitstellt, wenn ein Consumer über mehrere Verbindungspunkte verfügt. Ein Consumer kann mehrere <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Objekte definieren. in diesem Fall sollten die Entwickler das `ConnectionConsumer`-Attribut zu einer Methode hinzufügen, sollten Sie einen ID-Wert angeben, um die einzelnen Verbindungspunkte zu unterscheiden. Eine weitere wichtige geerbte Eigenschaft ist die <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>-Eigenschaft, die angibt, ob ein Consumerverbindungspunkt gleichzeitig mit mehreren Anbietern verbunden werden kann. Dieser Eigenschafts Wert ist standardmäßig für Consumerverbindungspunkte `false` (während standardmäßig für Anbieter Verbindungspunkte `true` wird).  
  
 Die <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>-Klasse fügt den Membern, die von der <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>-Klasse erbt, mehrere eindeutige Methoden hinzu. Die <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A>-Methode ruft die eigene, vom Consumer definierte Rückruf Methode auf, um die Schnittstellen Instanz vom Anbieter abzurufen. Die <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A>-Methode gibt einen booleschen Wert zurück, der angibt, ob der Verbindungspunkt Verbindungen basierend auf dem aktuellen Zustand des zugeordneten Consumer-Steuer Elements herstellen kann.  
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt einfache Möglichkeiten, eine Verbindung deklarativ, Programm gesteuert oder über die Benutzeroberfläche zu erstellen, in jedem Fall, der einen Consumerverbindungspunkt verwendet.  
  
 Das Beispiel besteht aus vier Teilen:  
  
-   Ein Benutzer Steuerelement, mit dem Sie den Webparts Anzeigemodus auf einer Seite ändern können.  
  
-   Quellcode für eine Schnittstelle und zwei <xref:System.Web.UI.WebControls.WebParts.WebPart> Steuerelemente, die als Anbieter und der Consumer für eine Verbindung fungieren.  
  
-   Eine Webseite zum Hosten aller Steuerelemente und zum Ausführen des Code Beispiels.  
  
-   Eine Erläuterung zum Ausführen der Beispielseite.  
  
 Der erste Teil dieses Code Beispiels ist das Benutzer Steuerelement, das es Benutzern ermöglicht, Anzeigemodi auf einer Webseite zu ändern. Speichern Sie den folgenden Quellcode in einer ASCX-Datei. Geben Sie dabei den Dateinamen an, der dem `Src`-Attribut der `Register`-Direktive für dieses Benutzer Steuerelement zugewiesen ist, das sich in der Nähe des oberen Rands der hostingwebseite befindet. Ausführliche Informationen zu Anzeigemodi und eine Beschreibung des Quellcodes in diesem Steuerelement finden Sie unter Exemplarische Vorgehensweise [: Ändern der Anzeigemodi auf einer Webparts Seite](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 Der zweite Teil des Code Beispiels ist der Quellcode für die-Schnittstelle und die-Steuerelemente. Die Quelldatei enthält eine einfache Schnittstelle mit dem Namen `IZipCode`. Es gibt auch eine <xref:System.Web.UI.WebControls.WebParts.WebPart> Klasse mit dem Namen `ZipCodeWebPart`, die die-Schnittstelle implementiert und als Anbieter Steuerelement fungiert. Der andere <xref:System.Web.UI.WebControls.WebParts.WebPart> Klasse hat den Namen `WeatherWebPart`und fungiert als Consumer für die Verbindung. Diese Klasse verfügt über eine Methode mit dem Namen `GetZipCode`, die eine Instanz der `IZipCode` Schnittstelle aus dem Anbieter Steuerelement abruft. Beachten Sie, dass diese Methode in den Metadaten als Verbindungspunkt Methode des Consumers mit einem `ConnectionConsumer`-Attribut gekennzeichnet ist. Dies ist der Mechanismus zum Identifizieren der Verbindungspunkt Methode im Consumer-Steuerelement.  
  
 Damit das Codebeispiel ausgeführt werden kann, müssen Sie diesen Quellcode kompilieren. Sie können Sie explizit kompilieren und die resultierende Assembly in den bin-Ordner der Website oder in den globalen Assemblycache einfügen. Alternativ dazu können Sie den Quellcode in den App_Code Ordner der Website einfügen, wo er zur Laufzeit dynamisch kompiliert wird. In diesem Codebeispiel wird die dynamische Kompilierung verwendet. Eine exemplarische Vorgehensweise, die das Kompilieren von veranschaulicht, finden Sie unter Exemplarische Vorgehensweise [: entwickeln und Verwenden eines benutzerdefinierten Webserver-Steuer](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)Elements.  
  
 [!code-csharp[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  
  
 Der dritte Teil des Code Beispiels ist die Webseite. Im oberen Bereich sind `Register` Direktiven, um die benutzerdefinierten Steuerelemente zu registrieren, die die Verbindung bilden, und das Benutzer Steuerelement, das Benutzern ermöglicht, Anzeigemodi auf der Seite zu ändern. Die Verbindung selbst wird deklarativ innerhalb des `<staticconnections>`-Elements auf der Seite erstellt. Dadurch wird eine Möglichkeit zum Erstellen einer Verbindung veranschaulicht. Beachten Sie das `ConsumerConnectionPointID`-Attribut im `<asp:webpartconnection>`-Element. Sie können die Verbindung auch Programm gesteuert erstellen. der Code dafür ist in der `Button1_Click`-Methode. In diesem Fall wird ein <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Objekt erstellt und dann an eine Methode weitergegeben, die die tatsächliche Verbindung erstellt. Unabhängig davon, ob die Verbindung deklarativ oder Programm gesteuert erstellt wird, müssen für den Anbieter und den Consumer stets Verbindungspunkte angegeben werden. Die `Button2_Click`-Methode greift sowohl für den Anbieter als auch den Consumer auf die <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> Objekte zu und schreibt einige ihrer Eigenschaftswerte in eine Bezeichnung auf der Seite.  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 Nachdem Sie die Seite in einem Browser geladen haben, klicken Sie auf die Schaltfläche **Details zum Verbindungspunkt** . Informationen zu den in der deklarativen Verbindung eingerichteten Anbietern und Consumerverbindungspunkten werden angezeigt. Verwenden Sie als nächstes das Dropdown-Steuerelement **Anzeigemodus** , um die Seite in den Verbindungs Modus zu wechseln. Klicken Sie im Verbenmenü des **ZIP-Code-Anbieters**<xref:System.Web.UI.WebControls.WebParts.WebPart> Steuerelement (dargestellt durch einen abwärts Pfeil in der Titelleiste) auf das Connect-Verb. Die Benutzeroberfläche der Verbindung wird angezeigt und automatisch durch das `<asp:connectionszone>` Steuerelement erstellt, das auf der Seite deklariert wurde. Dies ist eine weitere Möglichkeit, um eine Verbindung (über die Benutzeroberfläche) zusammen mit den zuvor erläuterten deklarativen und programmatischen Methoden herzustellen. Klicken Sie auf die Schaltfläche **trennen** , um die vorhandene statische Verbindung zu beenden. Klicken Sie auf den Link **Verbindung mit einem Consumer herstellen** . Die Benutzeroberfläche zeigt nun ein Dropdown-Steuerelement an, das den anzeigen amen des consumerverbindungspunktanzeigt. Wählen Sie in der Dropdown Liste den Verbindungspunkt aus, und klicken Sie dann auf **verbinden** , um die Verbindung abzuschließen. Klicken Sie dann erneut auf **trennen** . Klicken Sie auf die Schaltfläche **dynamische Verbindung** , um Programm gesteuert eine Verbindung zu erstellen. Verwenden Sie das Steuerelement **Anzeigemodus** , um die Seite in den Durchsuchenmodus zurückzukehren Klicken Sie erneut auf die Schaltfläche **Details zum Verbindungspunkt** , um weitere Details zum consumerverbindungspunktobjekt anzuzeigen.  
  
 Das Beispiel veranschaulicht das Herstellen einer Verbindung und die Verwendung eines consumerverbindungspunktpunkts auf drei Arten: eine statische Verbindung, die im Webseiten Markup deklariert wurde. eine Verbindung, die in Code erstellt wird, der ein <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Objekt verwendet hat. und eine Verbindung, die von einem Benutzer über die Verbindungs Benutzeroberfläche erstellt wurde.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Webparts-Steuerelemente</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178187(v=vs.100)">Übersicht über Webparts Verbindungen</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConsumerConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MethodInfo callbackMethod, class System.Type interfaceType, class System.Type controlType, string displayName, string id, bool allowsMultipleConnections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callbackMethod As MethodInfo, interfaceType As Type, controlType As Type, displayName As String, id As String, allowsMultipleConnections As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConsumerConnectionPoint(System::Reflection::MethodInfo ^ callbackMethod, Type ^ interfaceType, Type ^ controlType, System::String ^ displayName, System::String ^ id, bool allowsMultipleConnections);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint : System.Reflection.MethodInfo * Type * Type * string * string * bool -&gt; System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" Usage="new System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint (callbackMethod, interfaceType, controlType, displayName, id, allowsMultipleConnections)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callbackMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="interfaceType" Type="System.Type" />
        <Parameter Name="controlType" Type="System.Type" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="allowsMultipleConnections" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callbackMethod">Die Methode im Consumersteuerelement, die zum Erstellen einer Verbindung eine Schnittstelleninstanz an die Consumer zurückgibt.</param>
        <param name="interfaceType">Der <see cref="T:System.Type" /> der Schnittstelle, die der Consumer von einem Anbieter empfängt.</param>
        <param name="controlType">Der <see cref="T:System.Type" /> des Consumersteuerelements, dem der Consumerverbindungspunkt zugeordnet wird.</param>
        <param name="displayName">Ein Anzeigename für den Consumerverbindungspunkt, der Benutzern in der Verbindungs-Benutzeroberfläche angezeigt wird.</param>
        <param name="id">Ein eindeutiger Bezeichner für den Consumerverbindungspunkt.</param>
        <param name="allowsMultipleConnections">Ein boolescher Wert, der angibt, ob der Consumerverbindungspunkt mehrere gleichzeitige Verbindungen mit Anbietern haben kann.</param>
        <summary>Initialisiert eine neue Instanz der Klasse <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A>-Konstruktor für die <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>-Klasse ruft einfach den Basiskonstruktor auf und übergibt ihm die verschiedenen Parameter und initialisiert die Basisklasse.  
  
 Der Basisklassenkonstruktor überprüft eine Reihe von Parametern für einen Verbindungspunkt und kann verschiedene Ausnahmen auslösen. Eine Liste möglicher Ausnahmen finden Sie im Abschnitt "Ausnahmen".  
  
 Sie können den <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A>-Konstruktor aufzurufen, um eine eigene Instanz der <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>-Klasse zu erstellen. In Fällen, in denen Sie einfach eine Verbindung herstellen und nicht die-Klasse erweitern, sollten Sie jedoch die <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>-Methode zum Zurückgeben eines Verbindungspunkt Objekts von einem Anbieter anrufen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie von der <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>-Klasse abgeleitet wird, um einen benutzerdefinierten Anbieter Verbindungspunkt zu erstellen.  
  
 Das Codebeispiel besteht aus drei Teilen:  
  
-   Eine Quelldatei, die einen Anbieter <xref:System.Web.UI.WebControls.WebParts.WebPart>-Steuerelement, einen Consumer <xref:System.Web.UI.WebControls.WebParts.WebPart>-Steuerelement und ein benutzerdefiniertes <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>-Objekt enthält.  
  
-   Eine Webseite, die die-Steuerelemente in einer statischen Verbindung hostet.  
  
-   Eine Erläuterung der Art und Weise, wie der Beispielcode ausgeführt wird.  
  
 Der erste Teil des Code Beispiels ist die Quelle für die Steuerelemente Provider und Consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> und eine benutzerdefinierte <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Klasse mit dem Namen `TableConsumerConnectionPoint`. Beachten Sie, dass der Konstruktor der `TableConsumerConnectionPoint`-Klasse den Basiskonstruktor aufruft und dabei die erforderlichen Parameter übergibt, wie im Parameter Abschnitt angegeben. Beachten Sie außerdem, dass in der `TableConsumer`-Klasse die `SetConnectionInterface`-Methode als Rückruf Methode für Verbindungen angegeben wird und das `ConnectionConsumer`-Attribut das benutzerdefinierte `TableConsumerConnectionPoint` als Parameter deklariert. Dadurch wird veranschaulicht, wie ein benutzerdefinierter Consumerverbindungspunkt erstellt und dann einem Consumersteuerelement zugeordnet wird. In diesem Beispiel wird davon ausgegangen, dass der Quellcode dynamisch kompiliert wird. Daher sollten Sie die Quell Code Datei in einem App_Code Unterordner Ihrer Webanwendung platzieren.  
  
 [!code-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/connectionControls.cs#1)]  
  
 Der zweite Teil des Code Beispiels ist die Webseite, die die benutzerdefinierten Steuerelemente in einer statischen Webparts-Verbindung hostet. Am oberen Rand der Seite befindet sich eine `Register`-Anweisung, um ein Präfix und den Namespace für die benutzerdefinierten Steuerelemente zu deklarieren. Die Verbindung wird mit einem `<asp:webpartconnection>`-Element deklariert, und die Anbieter-und Consumersteuerelemente werden innerhalb eines `<asp:webpartzone>`-Elements deklariert.  
  
 [!code-aspx-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/defaultcs.aspx#3)]  
  
 Lädt die Seite in einem Browser. Die Verbindung zwischen den Steuerelementen ist bereits vorhanden, und der Consumer zeigt die Daten des Anbieters an, da die Verbindung als statische Verbindung auf der Seite deklariert wurde.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="callbackMethod" /> ist <see langword="null" />  
  
Oder 
 <paramref name="interfaceType" /> ist <see langword="null" />  
  
Oder 
 <paramref name="controlType" /> ist <see langword="null" />  
  
Oder 
 <paramref name="displayName" /> ist <see langword="null" /> oder eine leere Zeichenfolge ("").</exception>
        <exception cref="T:System.ArgumentException"><paramref name="controlType" /> ist nicht der gleiche Typ wie das Consumersteuerelement (oder eine davon abgeleitete gültige Klasse).</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Webparts-Steuerelemente</related>
      </Docs>
    </Member>
    <Member MemberName="SetObject">
      <MemberSignature Language="C#" Value="public virtual void SetObject (System.Web.UI.Control control, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetObject(class System.Web.UI.Control control, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(System.Web.UI.Control,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetObject (control As Control, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetObject(System::Web::UI::Control ^ control, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetObject : System.Web.UI.Control * obj -&gt; unit&#xA;override this.SetObject : System.Web.UI.Control * obj -&gt; unit" Usage="consumerConnectionPoint.SetObject (control, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="control">Das einem Consumerverbindungspunkt zugeordnete Consumersteuerelement.</param>
        <param name="data">Die von einem Anbietersteuerelement zurückgegebene Schnittstelleninstanz.</param>
        <summary>Ruft die Rückrufmethode in einem Consumersteuerelement auf und ruft die Schnittstelleninstanz von einem Anbietersteuerelement ab.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode empfängt eine Schnittstellen Instanz von einem Anbieter, der Daten für das Consumer-Steuerelement enthält.  
  
 Die <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A>-Methode wird von <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Objekten aufgerufen, wenn eine Verbindung aktiviert wird. Dies ist ein wichtiger Schritt, der zum Initiieren einer Verbindung und zum Aktivieren von zwei Steuerelementen zum Freigeben von Daten dient.  
  
 Das Consumer-Steuerelement in einer Verbindung muss in der Lage sein, mit derselben Art von Schnittstelle wie der Anbieter zu arbeiten. Wenn dies nicht der Fall ist, sind die Steuerelemente nicht kompatibel, und ein <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>-Objekt muss verwendet werden, um eine Verbindung herzustellen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="control" /> ist <see langword="null" /></exception>
      </Docs>
    </Member>
    <Member MemberName="SupportsConnection">
      <MemberSignature Language="C#" Value="public virtual bool SupportsConnection (System.Web.UI.Control control, System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection secondaryInterfaces);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SupportsConnection(class System.Web.UI.Control control, class System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection secondaryInterfaces) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SupportsConnection (control As Control, secondaryInterfaces As ConnectionInterfaceCollection) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool SupportsConnection(System::Web::UI::Control ^ control, System::Web::UI::WebControls::WebParts::ConnectionInterfaceCollection ^ secondaryInterfaces);" />
      <MemberSignature Language="F#" Value="abstract member SupportsConnection : System.Web.UI.Control * System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection -&gt; bool&#xA;override this.SupportsConnection : System.Web.UI.Control * System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection -&gt; bool" Usage="consumerConnectionPoint.SupportsConnection (control, secondaryInterfaces)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="secondaryInterfaces" Type="System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" />
      </Parameters>
      <Docs>
        <param name="control">Das dem <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" /> zugeordnete Consumersteuerelement.</param>
        <param name="secondaryInterfaces">Eine <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" /> aller sekundären Schnittstellen, die an einer Verbindung beteiligt sind.</param>
        <summary>Bestimmt, ob ein Consumerverbindungspunkt momentan in der Lage ist, eine Verbindung herzustellen.</summary>
        <returns><see langword="true" />, wenn ein Verbindungspunkt momentan in der Lage ist, eine Verbindung herzustellen; andernfalls <see langword="false" />. Der Standardwert lautet <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A>-Methode als implementiert gibt immer `true` in allen Fällen für die <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>-Klasse zurück. Die Absicht dieser Methode besteht darin, den Status der `control` zu überprüfen und an bestimmten wichtigen Punkten `secondaryInterfaces`, um zu bestimmen, ob ein <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Objekt gegenwärtig eine Verbindung herstellen kann.  
  
 Es kann Szenarien geben, in denen sich `control` in einem Zustand befindet, in dem es unmöglich ist, eine Verbindung herzustellen, oder wenn `secondaryInterfaces` vorhanden sein muss, bevor eine Verbindung gebildet werden kann. In solchen Fällen können Entwickler von der <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>-Klasse erben und die <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A>-Methode überschreiben und so eine benutzerdefinierte-Implementierung bereitstellen, um zu bestimmen, wann der Verbindungspunkt für die Unterstützung von Verbindungen bereit ist.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

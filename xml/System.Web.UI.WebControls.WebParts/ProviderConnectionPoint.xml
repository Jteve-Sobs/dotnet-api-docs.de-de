<Type Name="ProviderConnectionPoint" FullName="System.Web.UI.WebControls.WebParts.ProviderConnectionPoint">
  <Metadata><Meta Name="ms.openlocfilehash" Value="64b02411247bc4383c9d0ba96309240f908373f9" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70637532" /></Metadata><TypeSignature Language="C#" Value="public class ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ProviderConnectionPoint extends System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
  <TypeSignature Language="VB.NET" Value="Public Class ProviderConnectionPoint&#xA;Inherits ConnectionPoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProviderConnectionPoint : System::Web::UI::WebControls::WebParts::ConnectionPoint" />
  <TypeSignature Language="F#" Value="type ProviderConnectionPoint = class&#xA;    inherit ConnectionPoint" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.ConnectionPoint</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Definiert einen Verbindungspunktobjekt, mit dem ein Serversteuerelement beim Verbinden mit einem Consumer als Anbieter fungieren kann.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In jeder Webparts Verbindung zwischen zwei Server Steuerelementen muss jedes Steuerelement über (unter anderem Anforderungen) ein zugeordnetes Verbindungspunkt Objekt verfügen, das es ermöglicht, eine Verbindung mit dem anderen Steuerelement herzustellen und Daten bereitzustellen oder zu nutzen, je nachdem, ob das Steuerelement wird als Anbieter oder Consumer für die Verbindung festgelegt. Ein <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> -Objekt im Allgemeinen enthält Details dazu, wie ein Steuerelement eine Verbindung mit einem anderen Steuerelement herstellen kann und welcher Datentyp freigegeben werden kann. Für ein Steuerelement, das als Anbieter in einer Verbindung fungiert, muss der Verbindungspunkt <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> ein-Objekt sein. Ausführliche Informationen zu Webparts Verbindungen und Verbindungs Punkten finden Sie in den im Abschnitt Siehe auch weiter unten aufgeführten Themen.  
  
 Um ein <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> -Objekt zu erstellen, sind mehrere Schritte erforderlich:  
  
1.  Erstellen Sie eine Schnittstelle. Wenn ein Anbieter Daten für einen Consumer freigibt, wird dadurch eine Instanz einer Schnittstelle und die Instanz an einen Consumer zurückgegeben.  
  
2.  Implementieren Sie die-Schnittstelle in einem-Anbieter. Ein <xref:System.Web.UI.WebControls.WebParts.WebPart> -Steuerelement oder ein anderes Server Steuerelement (ein beliebiger Typ von Server Steuerelement in einer <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> Zone kann verwendet werden), der der Anbieter ist, muss die im ersten Schritt erstellte-Schnittstelle implementieren.  
  
3.  Identifizieren Sie eine Rückruf Methode. Eine Methode im Anbieter muss als Rückruf Methode identifiziert werden, um eine Verbindung herzustellen. Diese Methode gibt eine Instanz der implementierten Schnittstelle an einen Consumer zurück. Der Webparts Ansatz zum Identifizieren einer Rückruf Methode im Anbieter besteht darin, ein `ConnectionProvider` Metadatenattribut (durch die <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> -Klasse definiert) der Methode hinzuzufügen, die die Schnittstellen Instanz zurückgibt. Wenn das-Attribut hinzugefügt wird, ist der einzige erforderliche Parameter ein Anzeige Name, der für den Anbieter Verbindungspunkt verwendet werden soll. Optionale Parameter können auch hinzugefügt werden, z. b. eine ID für den Verbindungspunkt.  
  
 Nachdem ein Steuerelement als Anbieter bereitgestellt wurde, kann das Steuerelement an Verbindungen teilnehmen (vorausgesetzt, dass ein Consumer-Steuerelement ähnlich bereit und verfügbar ist). Um eine statische, deklarative Verbindung im Markup einer Webseite zu erstellen, können Entwickler das `<asp:webpartconnection>` -Element verwenden. Wenn das `ConnectionProvider` -Attribut im Quell Code des Anbieters, der die Rückruf Methode identifiziert, eine ID für den Verbindungspunkt angibt, muss dieser Wert dem `ProviderConnectionPointID` -Attribut im `<asp:webpartconnection>` -Element auf einer Seite zugewiesen werden. Ein Entwickler kann eine ID für einen Anbieter Verbindungspunkt angeben, wenn mehrere Verbindungspunkte in der Anbieter Steuerung vorhanden sind. Wenn für den Anbieter Verbindungspunkt im Anbieter Steuerelement keine ID angegeben ist, muss dem `ProviderConnectionPointID` Attribut auf der Seite kein Wert zugewiesen werden, da die Verbindung mit einem Standardwert erstellt wird, der aus dem <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> Flächen.  
  
 Um eine Verbindung im Code zu erstellen, müssen Entwickler ein neues <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> -Objekt erstellen, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> indem Sie die-Methode aufrufen und ihr die ID des Anbieter Steuer Elements sowie die ID oder den Index des <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> definierten Objekts im Anbieter Steuerelement übergeben. Das zurück <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> gegebene-Objekt, zusammen mit einem Verweis auf das-Anbieter Steuerelement, ein Verweis auf das Consumer- <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Steuerelement und ein entsprechendes-Objekt <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> , werden alle an die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> -Methode weitergegeben, um ein neues-Objekt zu erstellen.  
  
 Obwohl Entwickler Anbieter Verbindungspunkte entweder deklarativ oder Programm gesteuert als Teil der Einrichtung von Verbindungen verwenden können, können Benutzer auch mit Anbieter Verbindungs Punkten interagieren, um Verbindungen über die Benutzeroberfläche herzustellen. Wenn Entwickler ein <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> Steuerelement auf einer Webseite deklarieren, stellt es eine Lauf Zeit Benutzeroberfläche bereit, mit der Benutzer Verbindungen herstellen können. Wenn Benutzer das Consumer-Steuerelement als Ausgangspunkt für das Herstellen der Verbindung auswählen, indem Sie auf das Verbindungs Verb klicken (Sie können auch den Anbieter auswählen, es gibt keinen Unterschied in der resultierenden Verbindung), wird auf der Benutzeroberfläche ein Dropdown Listen-Steuerelement mit dem Anzeige Name des verfügbaren Anbieter Verbindungs Punkts (oder Punkte, wenn mehrere vorhanden sind). Benutzer müssen einen Anbieter Verbindungspunkt auswählen, um eine Verbindung herzustellen.  
  
 Ein <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> -Objekt wird direkt mit einem bestimmten Anbieter Steuerelement verknüpft und speichert Details zu einer Verbindung in den Eigenschaften, die von der <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> Basisklasse erbt. In der geerbten <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> Eigenschaft wird z. b. ein Anbieter Verbindungspunkt den vom Anbieter zurückgegebenen Schnittstellentyp beibehalten. Wenn der Anbieter und der Consumer in einer Verbindung beide mit dem gleichen Schnittstellentyp funktionieren, sind die Steuerelemente kompatibel und können eine direkte Verbindung bilden. Wenn der Anbieter und der Consumer nicht mit demselben Schnittstellentyp arbeiten können, sind Sie inkompatibel und <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> müssen ein- <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> Objekt verwenden, um den Wert des Anbieter Verbindungs Punkts in einen Typ zu übersetzen, mit dem der Consumer arbeiten kann. Eine weitere wichtige geerbte Eigenschaft <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> ist die-Eigenschaft, die einen anzeigen Amen bereitstellt, der auf der Benutzeroberfläche angezeigt wird, damit Benutzer beim Erstellen von Verbindungen einen Anbieter Verbindungspunkt auswählen können. Der Anzeige Name ist der erforderliche Parameter, wenn Entwickler der `ConnectionProvider` Rückruf Methode in einem Anbieter Steuerelement ein-Attribut hinzufügen. Die geerbte <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> Eigenschaft ist ebenfalls nützlich, wie oben angegeben, da Sie einen eindeutigen Bezeichner für einen Anbieter Verbindungspunkt bereitstellt, wenn ein Anbieter über mehrere Verbindungspunkte verfügt. Ein Anbieter kann mehrere <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> -Objekte definieren. in diesem Fall sollten die Entwickler das-Attribut zu einer Methode hinzufügen, sollten Sie einen ID-Wert angeben, um die `ConnectionProvider` einzelnen Verbindungspunkte zu unterscheiden. Eine weitere wichtige geerbte Eigenschaft ist <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> die-Eigenschaft, die angibt, ob ein Anbieter Verbindungspunkt gleichzeitig mit mehreren Consumern verbunden werden kann. Dieser Eigenschafts Wert `true` ist standardmäßig für Anbieter Verbindungspunkte (während er `false` standardmäßig für Consumerverbindungspunkte verwendet wird).  
  
 Die <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> -Klasse fügt den Membern, die von der <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> -Klasse erbt, mehrere eindeutige Methoden hinzu. Die <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> -Methode ruft eine Instanz der-Schnittstelle ab, die von der Rückruf Methode an Consumer zurückgegeben wird. Die <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> -Methode ruft zusätzliche Consumerschnittstellen ab, die Teil einer vorhandenen Verbindung sind, aber keine Schnittstellen sind, mit denen die Verbindung hergestellt wird.  
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt einfache Möglichkeiten, eine Verbindung deklarativ, Programm gesteuert oder über die Benutzeroberfläche zu erstellen, in jedem Fall, wenn ein Anbieter Verbindungspunkt verwendet wird.  
  
 Das Beispiel besteht aus vier Teilen:  
  
-   Ein Benutzer Steuerelement, mit dem Sie den Webparts Anzeigemodus auf einer Seite ändern können.  
  
-   Quellcode für eine Schnittstelle und zwei <xref:System.Web.UI.WebControls.WebParts.WebPart> Steuerelemente, die als Anbieter und der Consumer für eine Verbindung fungieren.  
  
-   Eine Webseite zum Hosten aller Steuerelemente und zum Ausführen des Code Beispiels.  
  
-   Eine Erläuterung zum Ausführen der Beispielseite.  
  
 Der erste Teil dieses Code Beispiels ist das Benutzer Steuerelement, das es Benutzern ermöglicht, Anzeigemodi auf einer Webseite zu ändern. Speichern Sie den folgenden Quellcode in einer ASCX-Datei. Geben Sie dabei den Dateinamen an, der dem `Src` -Attribut `Register` der-Direktive für dieses Benutzer Steuerelement zugewiesen ist, das sich in der Nähe des oberen Rands der hostingwebseite befindet. Ausführliche Informationen zu Anzeigemodi und eine Beschreibung des Quellcodes in diesem Steuerelement finden Sie unter Exemplarische Vorgehensweise [: Ändern der Anzeigemodi auf einer Webparts Seite](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 Der zweite Teil des Code Beispiels ist der Quellcode für die-Schnittstelle und die-Steuerelemente. Die Quelldatei enthält eine einfache Schnittstelle `IZipCode`mit dem Namen. Es gibt auch eine <xref:System.Web.UI.WebControls.WebParts.WebPart> Klasse mit `ZipCodeWebPart` dem Namen, die die-Schnittstelle implementiert und als Anbieter Steuerelement fungiert. Die `ProvideIZipCode` -Methode ist die Rückruf Methode, die das einzige Member der-Schnittstelle implementiert. Die-Methode gibt einfach eine Instanz der-Schnittstelle zurück. Beachten Sie, dass die-Methode in `ConnectionProvider` Ihren Metadaten mit einem-Attribut gekennzeichnet ist. Dies ist der Mechanismus, mit dem die Methode als Rückruf Methode für den Verbindungspunkt des Anbieters identifiziert wird. Die andere <xref:System.Web.UI.WebControls.WebParts.WebPart> Klasse hat den `WeatherWebPart`Namen und fungiert als Consumer für die Verbindung. Diese Klasse verfügt über eine Methode `GetZipCode` `IZipCode` mit dem Namen, die eine Instanz der-Schnittstelle aus dem Anbieter Steuerelement abruft. Beachten Sie, dass diese Methode als Verbindungspunkt Methode des Consumers mit einem `ConnectionConsumer` -Attribut in den Metadaten gekennzeichnet ist. Dies ist der Mechanismus zum Identifizieren der Verbindungspunkt Methode im Consumer-Steuerelement.  
  
 Damit das Codebeispiel ausgeführt werden kann, müssen Sie diesen Quellcode kompilieren. Sie können Sie explizit kompilieren und die resultierende Assembly in den bin-Ordner der Website oder in den globalen Assemblycache einfügen. Alternativ dazu können Sie den Quellcode in den Ordner "App_Code" der Website einfügen, wo er zur Laufzeit dynamisch kompiliert wird. In diesem Codebeispiel wird die dynamische Kompilierung verwendet. Eine exemplarische Vorgehensweise, die das Kompilieren von veranschaulicht, finden Sie unter Exemplarische Vorgehensweise [: entwickeln und Verwenden eines benutzerdefinierten Webserver-Steuer](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)Elements.  
  
 [!code-csharp[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  
  
 Der dritte Teil des Code Beispiels ist die Webseite. In der Nähe der `Register` oberen sind Direktiven, um die benutzerdefinierten Steuerelemente zu registrieren, die die Verbindung bilden, und das Benutzer Steuerelement, mit dem Benutzer Anzeigemodi auf der Seite ändern können. Die Verbindung selbst wird deklarativ innerhalb des `<staticconnections>` -Elements auf der Seite erstellt. Dadurch wird eine Möglichkeit zum Erstellen einer Verbindung veranschaulicht. Notieren Sie `ProviderConnectionPointID` `<asp:webpartconnection>` sich das-Attribut im-Element. Sie können die Verbindung auch Programm gesteuert erstellen. der Code dafür ist in der `Button1_Click` -Methode. In diesem Fall wird ein <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> -Objekt erstellt und dann an eine Methode weitergegeben, die die tatsächliche Verbindung erstellt. Unabhängig davon, ob die Verbindung deklarativ oder Programm gesteuert erstellt wird, müssen für den Anbieter und den Consumer stets Verbindungspunkte angegeben werden. Die `Button2_Click` -Methode greift <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> auf die-Objekte für den Anbieter und den Consumer zu und schreibt einige ihrer Eigenschaftswerte in eine Bezeichnung auf der Seite.  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 Nachdem Sie die Seite in einem Browser geladen haben, klicken Sie auf die Schaltfläche **Details zum Verbindungspunkt** . Informationen zu den in der deklarativen Verbindung eingerichteten Anbietern und Consumerverbindungspunkten werden angezeigt. Verwenden Sie als nächstes das Dropdown-Steuerelement **Anzeigemodus** , um die Seite in den Verbindungs Modus zu wechseln. Klicken Sie im Verbenmenü des<xref:System.Web.UI.WebControls.WebParts.WebPart> Steuer Elements für die **Postleitzahl** (dargestellt durch einen abwärts Pfeil in der Titelleiste) auf das Connect-Verb. Die Benutzeroberfläche der Verbindung wird angezeigt, die `<asp:connectionszone>` automatisch durch das auf der Seite deklarierte Steuerelement erstellt wird. Dies ist eine weitere Möglichkeit, um eine Verbindung (über die Benutzeroberfläche) zusammen mit den zuvor erläuterten deklarativen und programmatischen Methoden herzustellen. Klicken Sie auf die Schaltfläche **trennen** , um die vorhandene statische Verbindung zu beenden. Klicken Sie auf den Link **Verbindung mit einem Anbieter erstellen** . Die Benutzeroberfläche zeigt nun ein Dropdown-Steuerelement an, das den anzeigen amen des Anbieter Verbindungs Punkts auflistet. Wählen Sie in der Dropdown Liste den Verbindungspunkt aus, und klicken Sie dann auf **verbinden** , um die Verbindung abzuschließen. Klicken Sie dann erneut auf **trennen** . Klicken Sie dann auf die Schaltfläche **dynamische Verbindung** , um Programm gesteuert eine Verbindung zu erstellen. Verwenden Sie das Steuerelement **Anzeigemodus** , um die Seite in den Durchsuchenmodus zurückzukehren Klicken Sie erneut auf die Schaltfläche **Details zum Verbindungspunkt** , um weitere Informationen zum Objekt des Anbieter Verbindungs Punkts anzugeben.  
  
 Das Beispiel veranschaulicht das Herstellen einer Verbindung und die Verwendung eines Anbieter Verbindungs Punkts auf drei Arten: eine statische Verbindung, die im Webseiten Markup deklariert wurde. eine Verbindung, die in Code erstellt wird <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> , der ein-Objekt verwendet, und eine Verbindung, die von einem Benutzer über die Verbindungs Benutzeroberfläche erstellt wurde  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Webparts-Steuerelemente</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178187(v=vs.100)">Übersicht über Webparts Verbindungen</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ProviderConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MethodInfo callbackMethod, class System.Type interfaceType, class System.Type controlType, string displayName, string id, bool allowsMultipleConnections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callbackMethod As MethodInfo, interfaceType As Type, controlType As Type, displayName As String, id As String, allowsMultipleConnections As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ProviderConnectionPoint(System::Reflection::MethodInfo ^ callbackMethod, Type ^ interfaceType, Type ^ controlType, System::String ^ displayName, System::String ^ id, bool allowsMultipleConnections);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.WebParts.ProviderConnectionPoint : System.Reflection.MethodInfo * Type * Type * string * string * bool -&gt; System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" Usage="new System.Web.UI.WebControls.WebParts.ProviderConnectionPoint (callbackMethod, interfaceType, controlType, displayName, id, allowsMultipleConnections)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callbackMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="interfaceType" Type="System.Type" />
        <Parameter Name="controlType" Type="System.Type" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="allowsMultipleConnections" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callbackMethod">Die Methode im Anbietersteuerelement, die zum Erstellen einer Verbindung eine Schnittstelleninstanz an die Consumer zurückgibt.</param>
        <param name="interfaceType">Der <see cref="T:System.Type" /> der Schnittstelle, die der Anbieter für Consumer bereitstellt.</param>
        <param name="controlType">Der <see cref="T:System.Type" /> des Anbietersteuerelements, dem der Anbieterverbindungspunkt zugeordnet wird.</param>
        <param name="displayName">Ein Anzeigename für den Anbieterverbindungspunkt, der für Benutzer in der Verbindungs-Benutzeroberfläche angezeigt wird.</param>
        <param name="id">Ein eindeutiger Bezeichner für den Anbieterverbindungspunkt.</param>
        <param name="allowsMultipleConnections">Ein boolescher Wert, der angibt, ob der Anbieterverbindungspunkt mehrere gleichzeitige Verbindungen mit Consumern haben kann.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> Konstruktor für die <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> -Klasse ruft einfach den Basiskonstruktor auf und übergibt ihm die verschiedenen Parameter und initialisiert die Basisklasse.  
  
 Der Basisklassenkonstruktor überprüft eine Reihe von Parametern für einen Verbindungspunkt und kann verschiedene Ausnahmen auslösen. Eine Liste möglicher Ausnahmen finden Sie im Abschnitt "Ausnahmen".  
  
 Sie können den <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> -Konstruktor zum Erstellen einer eigenen Instanz <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> der-Klasse aufzurufen. Wenn Sie jedoch einfach eine Verbindung herstellen und nicht die-Klasse erweitern, sollten Sie die <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> -Methode zum Zurückgeben eines vorhandenen Verbindungspunkt Objekts von einem Anbieter anrufen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie von der <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> -Klasse abgeleitet wird, um einen benutzerdefinierten Anbieter Verbindungspunkt zu erstellen.  
  
 Das Codebeispiel besteht aus drei Teilen:  
  
-   Eine Quelldatei, die ein Anbieter <xref:System.Web.UI.WebControls.WebParts.WebPart> Steuerelement, ein <xref:System.Web.UI.WebControls.WebParts.WebPart> Consumer-Steuerelement und <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> ein benutzerdefiniertes-Objekt enthält.  
  
-   Eine Webseite, die die-Steuerelemente in einer statischen Verbindung hostet.  
  
-   Eine Erläuterung der Art und Weise, wie der Beispielcode ausgeführt wird.  
  
 Der erste Teil des Code Beispiels ist die Quelle für die Anbieter-und <xref:System.Web.UI.WebControls.WebParts.WebPart> Consumersteuerelemente und eine benutzerdefinierte <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Klasse mit `TableProviderConnectionPoint`dem Namen. Beachten Sie, dass der Konstruktor `TableProviderConnectionPoint` der-Klasse den Basiskonstruktor aufruft und dabei die erforderlichen Parameter übergibt, wie im Parameter Abschnitt angegeben. Beachten Sie außerdem, dass `TableProviderWebPart` die `GetConnectionInterface` -Methode in der-Klasse als Rückruf Methode `ConnectionProvider` für Verbindungen angegeben wird und das-Attribut den `TableProviderConnectionPoint` benutzerdefinierten als Parameter deklariert. Dadurch wird veranschaulicht, wie Sie einen benutzerdefinierten Anbieter Verbindungspunkt erstellen und dann einem Anbieter Steuerelement zuordnen. In diesem Beispiel wird davon ausgegangen, dass der Quellcode dynamisch kompiliert wird. Daher sollten Sie die Quell Code Datei in einem App_Code-Unterordner Ihrer Webanwendung platzieren.  
  
 [!code-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/connectionControls.cs#1)]  
  
 Der zweite Teil des Code Beispiels ist die Webseite, die die benutzerdefinierten Steuerelemente in einer statischen Webparts Verbindung hostet. Am oberen Rand der Seite befindet sich eine `Register` -Direktive, um ein Präfix und den Namespace für die benutzerdefinierten Steuerelemente zu deklarieren. Die Verbindung wird mithilfe eines `<asp:webpartconnection>` -Elements deklariert, und die Anbieter-und Consumersteuerelemente werden innerhalb eines `<asp:webpartzone>` -Elements deklariert.  
  
 [!code-aspx-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/defaultcs.aspx#3)]  
  
 Lädt die Seite in einem Browser. Die Verbindung zwischen den Steuerelementen ist bereits vorhanden, und der Consumer zeigt die Daten des Anbieters an, da die Verbindung als statische Verbindung auf der Seite deklariert wurde.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="callbackMethod" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="interfaceType" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="controlType" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="displayName" /> ist <see langword="null" /> oder eine leere Zeichenfolge ("").</exception>
        <exception cref="T:System.ArgumentException"><paramref name="controlType" /> ist nicht der gleiche Typ wie das Anbietersteuerelement (oder eine davon abgeleitete gültige Klasse).</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Webparts-Steuerelemente</related>
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public virtual object GetObject (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetObject(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetObject(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member GetObject : System.Web.UI.Control -&gt; obj&#xA;override this.GetObject : System.Web.UI.Control -&gt; obj" Usage="providerConnectionPoint.GetObject control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">Das Steuerelement, das in einer Webparts-Verbindung als Anbieter fungiert.</param>
        <summary>Ruft die Rückrufmethode in einem Anbietersteuerelement auf, das eine an Consumer zurückzugebende Schnittstelleninstanz abruft.</summary>
        <returns>Ein <see cref="T:System.Object" />, das eine Instanz der Schnittstelle ist, die ein Anbieter zum Herstellen einer Verbindung an Consumer zurückgibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode gibt ein Objekt aus dem Anbieter Steuerelement zurück, das eine Instanz der Schnittstelle ist, die zum Herstellen einer Verbindung verwendet wird. Der Typ des Objekts ist der Typ der implementierten Schnittstelle. Beispielsweise sind <xref:System.Web.UI.WebControls.WebParts.IWebPartField> zwei Schnittstellen, die für Verbindungen in den Webparts-Steuerelement Satz <xref:System.Web.UI.WebControls.WebParts.IWebPartRow>implementiert werden, und. Wenn die- <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Methode für ein-Objekt aufgerufen wird und der zugehörige Anbieter eine dieser Schnittstellen implementiert, ist das zurückgegebene Objekt vom gleichen Typ. <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>  
  
 Die <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> -Methode wird von <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> -Objekten aufgerufen, wenn eine Verbindung aktiviert wird. Dabei handelt es sich um einen wichtigen Schritt, der tatsächlich eine Verbindung initiiert und den Prozess startet, der zwei Steuerelementen das Freigeben von Daten ermöglicht.  
  
 Das Consumer-Steuerelement in einer Verbindung muss in der Lage sein, mit derselben Art von Schnittstelle wie der Anbieter zu arbeiten. Wenn dies nicht der Fall ist, sind die Steuerelemente <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> nicht kompatibel, und es muss ein-Objekt verwendet werden, um eine Verbindung herzustellen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="control" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSecondaryInterfaces">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::WebControls::WebParts::ConnectionInterfaceCollection ^ GetSecondaryInterfaces(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member GetSecondaryInterfaces : System.Web.UI.Control -&gt; System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection&#xA;override this.GetSecondaryInterfaces : System.Web.UI.Control -&gt; System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" Usage="providerConnectionPoint.GetSecondaryInterfaces control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">Das Steuerelement, das in einer Webparts-Verbindung als Anbieter fungiert.</param>
        <summary>Ruft eine optionale Auflistung von sekundären Schnittstellen ab, die von einem Anbieterverbindungspunkt unterstützt werden können.</summary>
        <returns>Eine <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" /> von zusätzlichen Schnittstellen, die durch das als Anbieter fungierende Steuerelement bereitgestellt werden.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein Anbieter Verbindungspunkt-Objekt verfügt immer über eine Standardschnittstelle, die verwendet wird, um eine Verbindung mit Consumern herzustellen. Eine Instanz der Standardschnittstelle wird abgerufen, indem die <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> -Methode für ein <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> -Objekt aufgerufen wird.  
  
 Einige Anbieter Steuerelemente implementieren jedoch mehrere Schnittstellen, die für Consumer als Teil einer Verbindung bereitgestellt werden. Diese Schnittstellen, bei denen es sich nicht um die zum Herstellen einer Verbindung verwendeten Standardwerte handelt, werden als sekundäre Schnittstellen bezeichnet. Die <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> -Methode bietet eine Möglichkeit, eine Auflistung von Verweisen auf die sekundären Schnittstellen zurückzugeben <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> , genauso wie die-Methode einen Verweis auf die Standardschnittstelle zurückgibt.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Die <see cref="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" /> -Methode in <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> der-Klasse enthält keine-Implementierung; Sie gibt eine leere Auflistung sekundärer Schnittstellen zurück. Zum Implementieren dieser Methode müssen Sie von der <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> -Klasse erben und diese Methode überschreiben, indem Sie einen bestimmten Satz sekundärer Schnittstellen von ihr zurückgeben.</para></block>
      </Docs>
    </Member>
  </Members>
</Type>

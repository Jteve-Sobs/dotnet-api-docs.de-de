<Type Name="ProviderConnectionPoint" FullName="System.Web.UI.WebControls.WebParts.ProviderConnectionPoint">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d2fb2b1c6f52df31bf047de911a8e747c603bf4f" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51896819" /></Metadata><TypeSignature Language="C#" Value="public class ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ProviderConnectionPoint extends System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
  <TypeSignature Language="VB.NET" Value="Public Class ProviderConnectionPoint&#xA;Inherits ConnectionPoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProviderConnectionPoint : System::Web::UI::WebControls::WebParts::ConnectionPoint" />
  <TypeSignature Language="F#" Value="type ProviderConnectionPoint = class&#xA;    inherit ConnectionPoint" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.ConnectionPoint</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Definiert einen Verbindungspunktobjekt, mit dem ein Serversteuerelement beim Verbinden mit einem Consumer als Anbieter fungieren kann.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Alle Webparts-Verbindung zwischen zwei Serversteuerelementen jedes Steuerelement benötigen (neben anderen die Anforderungen) einer zugeordneten Dienstverbindungspunkt-Objekt, die ermöglicht und so die Verbindung mit dem anderer Steuerelemente und entweder Daten bereitstellen oder verwenden, je nachdem, ob das Steuerelement wird als Anbieter oder Consumer für die Verbindung festgelegt. Ein <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> Objekt in der Regel enthält die Details für das wie ein Steuerelement verbinden kann, um ein anderes Steuerelement und den Typ der Daten, die gemeinsam verwendet werden kann. Für ein Steuerelement, das in einer Verbindung als Anbieter fungiert, der Verbindungspunkt muss eine <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Objekt. Informationen darüber, Webparts-Verbindungen und Verbindungspunkte finden Sie unter den Themen im Abschnitt Siehe auch weiter unten.  
  
 Zum Erstellen einer <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Objekt, es sind mehrere Schritte erforderlich:  
  
1.  Erstellen Sie eine Schnittstelle. Wenn ein Anbieterdaten mit einem Consumer gemeinsam, erfolgt dies durch eine Instanz einer Schnittstelle abrufen und diese Instanz an einen Consumer zurückgegeben.  
  
2.  Implementieren Sie die Schnittstelle in einem Anbieter. Ein <xref:System.Web.UI.WebControls.WebParts.WebPart> oder sonstiges Serversteuerelement (jeder Typ von Serversteuerelement in einem <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> Zone kann verwendet werden), die der Anbieter muss die im ersten Schritt erstellte Schnittstelle implementiert werden.  
  
3.  Identifizieren Sie eine Rückrufmethode. Eine Methode in der Anbieter muss als die Callback-Methode zum Herstellen einer Verbindung identifiziert werden. Diese Methode gibt eine Instanz der implementierten Schnittstelle an einen Consumer. Die Webparts Möglichkeit zur Identifizierung einer Rückrufmethode im Anbieter ist das Hinzufügen einer `ConnectionProvider` Metadatenattribut (von definiert die <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> Klasse) an die Methode, die die Schnittstelleninstanz zurückgibt. Wenn das Attribut hinzugefügt wird, ist der einzige erforderliche Parameter einen Anzeigenamen ein, verwenden Sie für den Anbieterverbindungspunkt an. Optionale Parameter können auch, wie z. B. eine ID für den Verbindungspunkt hinzugefügt werden.  
  
 Nachdem Sie ein Steuerelement, das als Anbieter fungiert ausgestattet wurde wurde, kann das Steuerelement an Verbindungen (vorausgesetzt, dass ein Consumer-Steuerelement auf ähnliche Weise ausgestattet und verfügbar ist) teilnehmen. Um eine statische, deklarative Verbindung im Markup einer Webseite zu erstellen, können Entwickler die `<asp:webpartconnection>` Element. Wenn die `ConnectionProvider` -Attribut in der Quellcode des Anbieters, der identifiziert die Callback-Methode gibt eine ID für den Verbindungspunkt, und klicken Sie dann diesen Wert zugewiesen werden die `ProviderConnectionPointID` -Attribut in der `<asp:webpartconnection>` Element auf einer Seite. Ein Grund für die ein Entwickler eine ID für ein Anbieterverbindungspunkt angegeben werden kann, ist treten mehrere Verbindungspunkte im Anbietersteuerelement. Wenn eine ID für den Anbieterverbindungspunkt an im Anbietersteuerelement nicht angegeben ist, ein Wert keine zuzuweisenden der `ProviderConnectionPointID` Attribut auf der Seite, da die Verbindung erstellt wird, mit einem Standardwert von abgerufen der <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> Feld.  
  
 Um eine Verbindung im Code zu erstellen, müssen Entwickler eine neue erstellen <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> -Objekt durch Aufrufen der <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> -Methode und die ID des Anbietersteuerelements, zusammen mit der ID oder Index des definierten an sie übergibt <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Objekt in das Anbietersteuerelement. Das zurückgegebene <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Objekt sowie einen Verweis auf das Anbietersteuerelement, einen Verweis auf das Consumer-Steuerelement, und eine entsprechende <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Objekt, werden alle, die an die <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> Methode zum Erstellen eines neuen <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Objekt.  
  
 Obwohl Entwickler Anbieterverbindungspunkten im Rahmen der Einrichtung von Verbindungen, entweder deklarativ oder programmgesteuert verwenden können, können Benutzer auch mit Anbieterverbindungspunkten zum Herstellen von Verbindungen über die Benutzeroberfläche (UI) interagieren. Wenn Entwickler deklarieren eine <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> Steuerelement auf einer Webseite, bietet es eine Laufzeit-Benutzeroberfläche für Benutzer zum Herstellen von Verbindungen. Wenn Benutzer das Consumer-Steuerelement als Ausgangspunkt für die Verbindung hergestellt, indem Sie auf auswählen, dessen verbinden-Verb (sie können auch den Anbieter, besteht kein Unterschied in der resultierenden Verbindung), in der Benutzeroberfläche sehen sie ein Dropdown-Listenfeld-Steuerelement, mit der der Anzeigename der verfügbaren Anbieter Connection Point (oder Punkte, wenn mehrere vorhanden sind). Benutzer müssen einen Anbieterverbindungspunkt zum Erstellen einer Verbindung auswählen.  
  
 Ein <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Objekt eines bestimmten Anbieters-Steuerelements direkt zugeordnet, und speichert Informationen zu einer Verbindung in den Eigenschaften, die sie von der Basisklasse erbt <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> Klasse. Z. B. in der geerbten <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> -Eigenschaft, ein Anbieterverbindungspunkt behält den Typ der Schnittstelle, die vom Anbieter zurückgegeben. Wenn der Anbieter und Consumer in einer Verbindung, die funktionieren sowohl mit dem gleichen Typ Schnittstelle, sind die Steuerelemente, die eine direkte Verbindung bilden können und kompatibel. Wenn der Anbieter und der Consumer mit dem gleichen Schnittstellentyp arbeiten können, sind sie nicht kompatibel und müssen eine <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> Objekt zum Übersetzen des Anbieterverbindungspunkts <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> Wert in einen Typ, die der Consumer verwenden können. Eine weitere wichtige geerbte Eigenschaft wird die <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> Eigenschaft, die einen Anzeigenamen ein, in der Benutzeroberfläche für Benutzer auf eine anbieterverbindung angezeigt ermöglicht zeigen Sie beim Erstellen von Verbindungen. Der Anzeigename ist der erforderliche Parameter, wenn Entwickler Hinzufügen einer `ConnectionProvider` an die Rückrufmethode in einem Anbietersteuerelement Attribut. Die geerbte <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> Eigenschaft eignet sich auch, wie oben angegeben werden, da sie einen eindeutigen Bezeichner für ein Anbieterverbindungspunkt bereitstellt, die ein Anbieter mehrere Verbindungspunkte verfügt. Ein Anbieter kann verfügen über mehrere <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Objekte darin und in diesem Fall definiert, wenn Entwickler Hinzufügen der `ConnectionProvider` Attribut an eine Methode, sollten sie angeben, einen ID-Wert, um jeden Verbindungspunkt unterscheiden zu können. Eine andere wichtige geerbte Eigenschaft wird die <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> -Eigenschaft, die angibt, ob ein Anbieterverbindungspunkt an mehrere Consumer gleichzeitig verbunden werden kann. Ist der Wert dieser Eigenschaft `true` standardmäßig für Anbieterverbindungspunkten (während es standardmäßig `false` für Consumerverbindungspunkten).  
  
 Die <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Klasse fügt mehrere eindeutige Methoden auf die Member erbt von der <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> Klasse. Die <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> Methode ruft eine Instanz der Schnittstelle, die die Rückrufmethode für Consumer zurückgegeben wird. Die <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> Methode zusätzliche Consumerschnittstellen, die Teil einer vorhandenen Verbindung sind, jedoch werden nicht die Schnittstellen, die zum Herstellen der Verbindung verwendet.  
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt die einfache Möglichkeiten, um eine Verbindung deklarativ zu erstellen, die programmgesteuert oder über die Benutzeroberfläche ein Anbieterverbindungspunkt.  
  
 Das Beispiel besteht aus vier Teilen:  
  
-   Ein Benutzersteuerelement, das Ihnen ermöglicht, ändern Sie die Webparts-Anzeigemodus auf einer Seite.  
  
-   Quellcode für eine Schnittstelle und die beiden <xref:System.Web.UI.WebControls.WebParts.WebPart> fungiert als Anbieter und Consumer für eine Verbindung steuert.  
  
-   Eine Webseite auf alle Steuerelemente hosten, und führen das Codebeispiel.  
  
-   Eine Erklärung, wie die Beispielseite ausgeführt werden soll.  
  
 Der erste Teil dieses Codebeispiels wird das Benutzersteuerelement, das Benutzern ermöglicht, den Anzeigemodus auf einer Webseite zu ändern. Den folgende Quellcode in einer ASCX-Datei speichern, die durch das Erteilen sie des Dateinamen, die zugewiesen ist, die `Src` Attribut der `Register` die Richtlinie für dieses Steuerelement, das am oberen Rand der Hostingwebseite ist. Weitere Informationen zu Modi und eine Beschreibung des Quellcodes in diesem Steuerelement anzuzeigen, finden Sie unter [Exemplarische Vorgehensweise: Ändern des Anzeigemodus auf einer Webparts-Seite](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 Der zweite Teil des Codebeispiels wird der Quellcode für die Benutzeroberfläche und Steuerelemente. Die Quelldatei enthält eine einfache Schnittstelle mit dem Namen `IZipCode`. Es gibt auch eine <xref:System.Web.UI.WebControls.WebParts.WebPart> Klasse mit dem Namen `ZipCodeWebPart` , implementiert die Schnittstelle, und wie das Anbietersteuerelement fungiert. Die `ProvideIZipCode` Methode ist die Callback-Methode, nur die Member der Schnittstelle implementiert. Die Methode gibt einfach eine Instanz der Schnittstelle zurück. Beachten Sie, die die Methode mit einem `ConnectionProvider` Attribut in seinen Metadaten. Dies ist der Mechanismus für die Methode als die Callback-Methode für den Anbieterverbindungspunkt identifiziert. Die andere <xref:System.Web.UI.WebControls.WebParts.WebPart> Klasse `WeatherWebPart`, und fungiert als Consumer für die Verbindung. Diese Klasse verfügt über eine Methode namens `GetZipCode` , die eine Instanz des ab der `IZipCode` Schnittstelle aus dem Anbietersteuerelement. Beachten Sie, dass diese Methode als die Consumer Verbindung mit gekennzeichnet ist eine `ConnectionConsumer` Attribut in seinen Metadaten. Dies ist der Mechanismus zum Identifizieren der Verbindung Point-Methode im Consumersteuerelement.  
  
 Das Codebeispiel ausführen müssen Sie diesen Quellcode kompilieren. Sie können explizit kompilieren und die resultierende Assembly im Bin-Ordner der Website oder im globalen Assemblycache ablegen. Alternativ können Sie den Quellcode im Ordner "App_Code" Ihrer Website, ablegen, wo er zur Laufzeit dynamisch kompiliert wird. Dieses Codebeispiel verwendet die dynamische Kompilierung. Eine exemplarische Vorgehensweise, die zeigt, wie kompiliert wird, finden Sie unter [Exemplarische Vorgehensweise: Entwickeln und Verwenden eines benutzerdefinierten Webserver-Steuerelements](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  
  
 Der dritte Teil des Codebeispiels wird die Webseite. Im oberen Bereich werden `Register` Anzeigemodi von Anweisungen zum Registrieren die benutzerdefinierten Steuerelemente, die die Verbindung zu bilden, und das Benutzersteuerelement, das Benutzern ermöglicht, ändern Sie auf der Seite. Die Verbindung selbst wird deklarativ in erstellt die `<staticconnections>` Element auf der Seite. Dies zeigt eine Möglichkeit zum Herstellen eine Verbindung – Beachten Sie die `ProviderConnectionPointID` -Attribut in der `<asp:webpartconnection>` Element. Sie können die Verbindung auch programmgesteuert erstellen. der Code dafür ist in der `Button1_Click` Methode. In diesem Fall eine <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Objekt erstellt und dann an eine Methode, die die eigentliche Verbindung wird übergeben. Ob die Verbindung entweder deklarativ oder programmgesteuert erstellt wird, müssen immer Verbindungspunkte für den Anbieter und Consumer angegeben werden. Die `Button2_Click` Methode greift auf die <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> von Objekten für den Anbieter und Consumer und schreibt Sie einige der zugehörigen Eigenschaftswerte enthält, in eine Bezeichnung auf der Seite.  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 Nachdem Sie die Seite in einem Browser laden, klicken Sie auf die **Details bezüglich der Verbindungspunkte** Schaltfläche. Informationen zum Anbieter und Consumer zeigt Verbindung hergestellt werden, in der deklarativen Verbindung angezeigt. Verwenden Sie als Nächstes die **Anzeigemodus** Verbindungsmodus, Dropdown-Steuerelement auf die Seite in wechseln. Im Verbenmenü, der die **ZIP Code Consumer** <xref:System.Web.UI.WebControls.WebParts.WebPart> Steuerelement an (dargestellt durch einen Pfeil in der Titelleiste), klicken Sie auf der Connect-Verb. Die Verbindung, die Benutzeroberfläche angezeigt wird, erstellt automatisch von der `<asp:connectionszone>` Steuerelement deklariert werden, auf der Seite. Dies ist eine weitere Möglichkeit zum Herstellen eine Verbindung (über die Benutzeroberfläche), zusammen mit den zuvor erläuterten deklarativen und programmatischen-Methoden. Klicken Sie auf die **trennen** Schaltfläche, um die vorhandene statische Verbindung zu beenden. Klicken Sie auf die **erstellen Sie eine Verbindung zu einem Anbieter** Link. Die Benutzeroberfläche zeigt jetzt ein Dropdown-Steuerelement, das die Anzeigenamen der Anbieter listet. Wählen Sie den Verbindungspunkt in der Dropdown-Liste aus, und klicken Sie dann auf **Connect** zum Herstellen die Verbindung. Klicken Sie anschließend **trennen** erneut aus. Klicken Sie auf die **dynamische Verbindung** klicken, um programmgesteuert eine Verbindung zu erstellen. Verwenden der **Anzeigemodus** Steuerelement in den Durchsuchen-Modus zurück. Klicken Sie auf die **Verbindungsdetails zeigen** erneut auf die Schaltfläche, um Details zu den Anbieterverbindungspunkt-Objekt einmal anzugeben.  
  
 Im Beispiel hat gezeigt, eine Verbindung herstellen und einen Anbieterverbindungspunkt auf drei verschiedene Arten verwenden: eine statische Verbindung deklariert wird, in das Markup einer Webseite; eine Verbindung erstellt wird, im Code, mit denen eine <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Objekt und eine Verbindung über die Benutzeroberfläche für Verbindungen durch einen Benutzer erstellt.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
    <related type="Article" href="https://msdn.microsoft.com/library/ab78a66e-9feb-4391-b3c3-8c07555e2308">ASP.NET Webparts-Seiten</related>
    <related type="Article" href="https://msdn.microsoft.com/library/d98cfd0f-ebd6-4871-89d5-abbd2cdef67b">Übersicht über Webparts</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ProviderConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MethodInfo callbackMethod, class System.Type interfaceType, class System.Type controlType, string displayName, string id, bool allowsMultipleConnections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callbackMethod As MethodInfo, interfaceType As Type, controlType As Type, displayName As String, id As String, allowsMultipleConnections As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ProviderConnectionPoint(System::Reflection::MethodInfo ^ callbackMethod, Type ^ interfaceType, Type ^ controlType, System::String ^ displayName, System::String ^ id, bool allowsMultipleConnections);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.WebParts.ProviderConnectionPoint : System.Reflection.MethodInfo * Type * Type * string * string * bool -&gt; System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" Usage="new System.Web.UI.WebControls.WebParts.ProviderConnectionPoint (callbackMethod, interfaceType, controlType, displayName, id, allowsMultipleConnections)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callbackMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="interfaceType" Type="System.Type" />
        <Parameter Name="controlType" Type="System.Type" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="allowsMultipleConnections" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callbackMethod">Die Methode im Anbietersteuerelement, die zum Erstellen einer Verbindung eine Schnittstelleninstanz an die Consumer zurückgibt.</param>
        <param name="interfaceType">Der <see cref="T:System.Type" /> der Schnittstelle, die der Anbieter für Consumer bereitstellt.</param>
        <param name="controlType">Der <see cref="T:System.Type" /> des Anbietersteuerelements, dem der Anbieterverbindungspunkt zugeordnet wird.</param>
        <param name="displayName">Ein Anzeigename für den Anbieterverbindungspunkt, der für Benutzer in der Verbindungs-Benutzeroberfläche angezeigt wird.</param>
        <param name="id">Ein eindeutiger Bezeichner für den Anbieterverbindungspunkt.</param>
        <param name="allowsMultipleConnections">Ein boolescher Wert, der angibt, ob der Anbieterverbindungspunkt mehrere gleichzeitige Verbindungen mit Consumern haben kann.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> Konstruktor für die <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Klasse ruft einfach den Basiskonstruktor, übergibt Sie an die verschiedenen Parametern und initialisiert die Basisklasse.  
  
 Der Basisklassenkonstruktor prüft eine Reihe von den Parametern für einen Verbindungspunkt und kann verschiedene Ausnahmen auslösen. Eine Liste der möglichen Ausnahmen finden Sie unter Abschnitt für Ausnahmen.  
  
 Rufen Sie die <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> Konstruktor zur Erstellung Ihrer eigenen Instanz der <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Klasse. In Fällen, in dem Sie sind einfach eine Verbindung herstellen und die Klasse nicht erweitern, Sie sollten jedoch aufrufen, die <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> Methode, um ein vorhandenes Verbindungsobjekt Punkt von einem Anbieter zurückzugeben.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie für die Ableitung der <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Klasse, um einen benutzerdefinierten Anbieterverbindungspunkt erstellen.  
  
 Im Codebeispiel besteht aus drei Teilen:  
  
-   Eine Quelldatei, die einen Anbieter enthält <xref:System.Web.UI.WebControls.WebParts.WebPart> zu steuern, einen Consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> Kontrolle und eine benutzerdefinierte <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Objekt.  
  
-   Eine Webseite, die Steuerelemente in einer statischen Verbindung hostet.  
  
-   Eine Erklärung der Vorgehensweise den Beispielcode auszuführen.  
  
 Der erste Teil des Codebeispiels wird die Quelle für den Anbieter und Consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> Steuerelemente und eine benutzerdefinierte <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Klasse, mit dem Namen `TableProviderConnectionPoint`. Beachten Sie, dass der Konstruktor, der die `TableProviderConnectionPoint` -Klasse ruft den Basiskonstruktor, und übergeben sie die erforderlichen Parameter wie in den Abschnitt "Parameters" angegeben. Beachten Sie, dass in der `TableProviderWebPart` -Klasse, die `GetConnectionInterface` Methode angegeben ist, als Rückrufmethode für Verbindungen und die `ConnectionProvider` Attribut deklariert, die benutzerdefinierte `TableProviderConnectionPoint` als Parameter. Dies veranschaulicht, wie erstellen einen benutzerdefinierten Anbieterverbindungspunkt, und klicken Sie dann einem Anbietersteuerelement zugeordnet wird. In diesem Beispiel wird davon ausgegangen, dass der Quellcode dynamisch kompiliert wird, damit Sie die Quellcodedatei in einem Unterordner "App_Code" Ihrer Webanwendung platzieren sollten.  
  
 [!code-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/connectionControls.cs#1)]  
  
 Der zweite Teil des Codebeispiels wird die Webseite, auf dem die benutzerdefinierten Steuerelemente in einer statischen Webparts-Verbindung gehostet. Am oberen Rand der Seite ist eine `Register` Richtlinie, um ein Präfix und den Namespace für die benutzerdefinierten Steuerelemente zu deklarieren. Die Verbindung deklariert wird, indem ein `<asp:webpartconnection>` -Element, und der Anbieter und Consumer-Steuerelemente werden deklariert, innerhalb einer `<asp:webpartzone>` Element.  
  
 [!code-aspx-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/defaultcs.aspx#3)]  
  
 Laden Sie die Seite in einem Browser. Die Verbindung zwischen den Steuerelementen bereits vorhanden ist, und der Consumer zeigt die Daten vom Anbieter, da die Verbindung als eine statische Verbindung auf der Seite deklariert wurde.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="callbackMethod" /> ist <see langword="null" />.  
  
\- oder – 
 <paramref name="interfaceType" /> ist <see langword="null" />.  
  
\- oder – 
 <paramref name="controlType" /> ist <see langword="null" />.  
  
\- oder – 
 <paramref name="displayName" /> ist <see langword="null" /> oder eine leere Zeichenfolge ("").</exception>
        <exception cref="T:System.ArgumentException"><paramref name="controlType" /> ist nicht der gleiche Typ wie das Anbietersteuerelement (oder eine davon abgeleitete gültige Klasse).</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
        <related type="Article" href="https://msdn.microsoft.com/library/ab78a66e-9feb-4391-b3c3-8c07555e2308">ASP.NET Webparts-Seiten</related>
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public virtual object GetObject (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetObject(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetObject(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member GetObject : System.Web.UI.Control -&gt; obj&#xA;override this.GetObject : System.Web.UI.Control -&gt; obj" Usage="providerConnectionPoint.GetObject control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">Das Steuerelement, das in einer Webparts-Verbindung als Anbieter fungiert.</param>
        <summary>Ruft die Rückrufmethode in einem Anbietersteuerelement auf, das eine an Consumer zurückzugebende Schnittstelleninstanz abruft.</summary>
        <returns>Ein <see cref="T:System.Object" />, das eine Instanz der Schnittstelle ist, die ein Anbieter zum Herstellen einer Verbindung an Consumer zurückgibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode gibt ein Objekt aus dem Anbietersteuerelement, das eine Instanz der Schnittstelle, die zum Herstellen einer Verbindung verwendet wird. Der Typ des Objekts werden der Typ der implementierten Schnittstelle. Z. B. zwei Schnittstellen, die implementiert werden, für Verbindungen im Webparts-Steuerelementsatz sind <xref:System.Web.UI.WebControls.WebParts.IWebPartField> und <xref:System.Web.UI.WebControls.WebParts.IWebPartRow>. Wenn die <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> Methode wird aufgerufen, auf eine <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Objekt, wenn der entsprechende Anbieter auf eine der folgenden Schnittstellen implementiert, wird das zurückgegebene Objekt vom selben Typ sein.  
  
 Die <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> Methode wird aufgerufen, indem <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Objekte, wenn eine Verbindung aktiviert wird. Dies ist ein wichtiger Schritt, der tatsächlich stellt eine Verbindung her und startet den Prozess, der zwei Steuerelemente zum Freigeben von Daten ermöglicht.  
  
 Der Consumer-Steuerelement in einer Verbindung muss mit den gleichen Typ der Schnittstelle als Anbieter arbeiten können. Die Steuerelemente sind nicht kompatibel, wenn dies nicht der Fall ist, und ein <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> Objekt muss zum Herstellen einer Verbindung verwendet werden.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="control" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSecondaryInterfaces">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::WebControls::WebParts::ConnectionInterfaceCollection ^ GetSecondaryInterfaces(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member GetSecondaryInterfaces : System.Web.UI.Control -&gt; System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection&#xA;override this.GetSecondaryInterfaces : System.Web.UI.Control -&gt; System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" Usage="providerConnectionPoint.GetSecondaryInterfaces control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">Das Steuerelement, das in einer Webparts-Verbindung als Anbieter fungiert.</param>
        <summary>Ruft eine optionale Auflistung von sekundären Schnittstellen ab, die von einem Anbieterverbindungspunkt unterstützt werden können.</summary>
        <returns>Eine <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" /> von zusätzlichen Schnittstellen, die durch das als Anbieter fungierende Steuerelement bereitgestellt werden.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein Anbieterverbindungspunkt-Objekt verfügt immer über eine Standardschnittstelle, die zum Herstellen einer Verbindung mit Kunden verwendet wird. Eine Instanz der Standardschnittstelle wird abgerufen, durch den Aufruf der <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> Methode für eine <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Objekt.  
  
 Einige Anbietersteuerelemente implementieren jedoch mehrere Schnittstellen, die als Teil einer Verbindung für Kunden bereitstellen. Diese Schnittstellen, die nicht die Standardtypen verwendet, um eine Verbindung herzustellen, sind sekundäre Schnittstellen aufgerufen. Die <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> -Methode bietet eine Möglichkeit zum Zurückgeben von einer Auflistung von Verweisen auf die sekundären Schnittstellen, wie die <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> Methode gibt einen Verweis auf die Standard-Schnittstelle.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Die <see cref="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" /> -Methode in der die <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> Klasse enthält keine Implementierung; es gibt eine leere Auflistung von sekundären Schnittstellen zurück. Um diese Methode implementieren, müssen Sie erben von der <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> Klasse, und überschreiben Sie diese Methode, die Rückgabe von ihm einer bestimmten Gruppe von sekundären Schnittstellen.</para></block>
      </Docs>
    </Member>
  </Members>
</Type>
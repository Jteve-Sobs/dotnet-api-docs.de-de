<Type Name="IPersonalizable" FullName="System.Web.UI.WebControls.WebParts.IPersonalizable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="654722cd1d314fa0d612bc497e3192abe3a40033" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64073953" /></Metadata><TypeSignature Language="C#" Value="public interface IPersonalizable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPersonalizable" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.IPersonalizable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPersonalizable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IPersonalizable" />
  <TypeSignature Language="F#" Value="type IPersonalizable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Definiert zusätzliche Verwaltungsfunktionen zum Anwenden und Extrahieren des Personalisierungszustands.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zusätzlich zur Verwendung der `Personalizable` Attribut auf Eigenschaften des Steuerelements, ein Steuerelements kann auch implementieren <xref:System.Web.UI.WebControls.WebParts.IPersonalizable> für zusätzliche Verwaltungsfunktionen für die Anwendung und das Extrahieren des Personalisierungszustands. Beispielsweise sollten Steuerelemente, die zum Verwalten von privaten Zustandsinformationen müssen diese Schnittstelle implementieren. Steuerelemente, die personalisierte über komplexe Mechanismen, z. B. benutzerdefinierten Cache-Lösungen, die Datenpersistenz auf Mainframes oder XML-Webdienste Datenzugriff, sollten auch diese Schnittstelle implementieren.  
  
> [!IMPORTANT]
>  Sie nicht auf basierte von Klassen, die im Verzeichnis "App_Code" definierten Typen hinzufügen, und klicken Sie dann auf den Standardmechanismus für die binäre Serialisierung abhängig sind. "App_Code" basierende Artefakte sind nicht konsistent binär serialisierbar, aufgrund der Tatsache, dass sie ihren Assemblynamen zu zufälligen Zeitpunkten in der Zeit geändert haben, können.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie Sie die <xref:System.Web.UI.WebControls.WebParts.IPersonalizable> Schnittstelle. Das Beispiel besteht aus einer ASPX-Seite, die auf einer Webparts-Steuerelement, das mit dem Namen verweist `UrlListWebPart`. Der folgende Code ist die ASPX-Datei für das Beispiel.  
  
 [!code-aspx-csharp[WebParts_IPersonalizable_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/CS/IPersonalizableCS.aspx#1)]
 [!code-aspx-vb[WebParts_IPersonalizable_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/VB/IPersonalizableVB.aspx#1)]  
  
 Der folgende Code ist die Quelle für die benutzerdefinierte <xref:System.Web.UI.WebControls.WebParts.WebPart> Steuerelement. Diese Datei sollte im App_Code-Verzeichnis gespeichert werden.  
  
 [!code-csharp[WebParts_IPersonalizable_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/CS/urllistwebpart.cs#2)]
 [!code-vb[WebParts_IPersonalizable_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/VB/urllistwebpart.vb#2)]  
  
 Laden Sie die Seite in einem Browser. Geben Sie einen Namen, eine URL darstellt, und fügen eine tatsächliche URL beginnend mit `http://`, und klicken Sie auf die **hinzufügen** , um die URL hinzuzufügen.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="IsDirty">
      <MemberSignature Language="C#" Value="public bool IsDirty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDirty" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDirty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDirty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDirty : bool" Usage="System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die benutzerdefinierten Daten, die ein Steuerelement verwaltet, geändert wurden.</summary>
        <value><see langword="true" />, wenn die mit der <see cref="T:System.Web.UI.WebControls.WebParts.IPersonalizable" />-Schnittstelle verwalteten benutzerdefinierten Daten geändert wurden, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Daten von einem Steuerelement verwaltet geändert hat, ist das Steuerelement "geändert." angesehen. Ein Steuerelement sollte zurückgeben `true` Wenn die benutzerdefinierten Daten verwaltet wird, dass die It über die <xref:System.Web.UI.WebControls.WebParts.IPersonalizable> Schnittstelle wurde geändert. Wenn ein Steuerelement zurückgegeben `true` von dieser Eigenschaft, das Steuerelement <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Save%2A> schnittstellenimplementierung-Methode wird aufgerufen, während der Extraktion der Eigenschaft-Wert.  
  
> [!NOTE]
>  Diese Eigenschaft wird automatisch während der letzten Phasen der Verarbeitung einer POST-Anforderung von der Personalisierungsinfrastruktur überprüft. Allerdings für GET-Anforderungen, den Rückgabewert aus der <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty%2A> Eigenschaft wird nicht überprüft. Ein anderes Ereignis hat das Steuerelement als "geändert" für ein Steuerelementzustand und nicht nur die Daten von verwalteten angesehen verursacht hat <xref:System.Web.UI.WebControls.WebParts.IPersonalizable>– gespeichert werden soll. Wenn ein Steuerelement während einer GET-Anforderung als "dirty" markieren kann, oder wenn es sich bei die Personalisierungsinfrastruktur unter einigen sehr speziellen Bedingungen für die Grenze ein Steuerelements "dirty" während einer GET-Anforderung untersucht anschließend <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Save%2A> wird immer aufgerufen.  
  
 Ein Steuerelement kann die zugehörigen verweisen <xref:System.Web.UI.WebControls.WebParts.WebPartManager> steuern und überprüfen Sie die <xref:System.Web.UI.WebControls.WebParts.WebPartPersonalization.Scope%2A> Eigenschaft, um den aktuellen Bereich zu ermitteln. Der "dirty" Status der benutzerdefinierten Daten des Steuerelements sollte für den aktuellen Bereich geeignet sein.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, mit der <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty%2A> Eigenschaft. Der erste Teil des Beispiels ist die Webseite, hostet einen <xref:System.Web.UI.WebControls.WebParts.WebPart> Steuerelement.  
  
 [!code-aspx-csharp[WebParts_IPersonalizable_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/CS/IPersonalizableCS.aspx#1)]
 [!code-aspx-vb[WebParts_IPersonalizable_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/VB/IPersonalizableVB.aspx#1)]  
  
 Der zweite Teil des Beispiels ist der Code für die benutzerdefinierte <xref:System.Web.UI.WebControls.WebParts.WebPart> Steuerelement namens `UrlListWebPart`. Diese Datei sollte im Verzeichnis "App_Code" zum Ausführen des Beispiels gespeichert werden. Beachten Sie, die der Quellcode implementiert die <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty%2A> Eigenschaft.  
  
 [!code-csharp[WebParts_IPersonalizable_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/CS/urllistwebpart.cs#2)]
 [!code-vb[WebParts_IPersonalizable_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/VB/urllistwebpart.vb#2)]  
  
 Laden Sie die Seite in einem Browser. Geben Sie einen Namen, eine URL darstellt, und fügen eine tatsächliche URL beginnend mit `http://`, und klicken Sie auf die **hinzufügen** , um die URL hinzuzufügen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Web.UI.WebControls.WebParts.PersonalizationDictionary state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Load(class System.Web.UI.WebControls.WebParts.PersonalizationDictionary state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.IPersonalizable.Load(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (state As PersonalizationDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Web::UI::WebControls::WebParts::PersonalizationDictionary ^ state);" />
      <MemberSignature Language="F#" Value="abstract member Load : System.Web.UI.WebControls.WebParts.PersonalizationDictionary -&gt; unit" Usage="iPersonalizable.Load state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Web.UI.WebControls.WebParts.PersonalizationDictionary" />
      </Parameters>
      <Docs>
        <param name="state">Ein <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationDictionary" />, das benutzerdefinierte Daten zum Gültigkeitsbereich enthält, die aus dem zugrunde liegenden Datenspeicher geladen wurden.</param>
        <summary>Lädt benutzerdefinierte Daten in ein Steuerelement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird in einem Steuerelement, um benutzerdefinierte Daten zu laden, in sich selbst zu ermöglichen, aufgerufen. Sie können auch einen Wert zurückgeben, der angibt, ob der Zustand eines Steuerelements benutzerdefinierte zurückgeschrieben werden muss mit dem zugrunde liegenden Datenspeicher, unabhängig davon, ob andere Personalisierungsdaten auf der Seite geändert hat. Ein Steuerelement kann eine eigene benutzerdefinierte Eigenschaften festlegen und zusätzliche interne Logik, die anhand der Werte im Personalisierungswörterbuch enthaltenen auszuführen. Diese Methode wird vom Webparts-Steuerelement beim Anwenden der Personalisierungsdaten auf ein Steuerelement aufgerufen.  
  
 Sie sollten auch Bedenken der Merge-Verhalten des <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.User>-Bereich im Vergleich zu <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.Shared>-Eigenschaften im Bereich der <xref:System.Web.UI.WebControls.WebParts.PersonalizationDictionary> Objekt. Die `state` Parameter enthält eine zusammengeführte Darstellung der benutzerdefinierten Daten, die aus dem zugrunde liegenden Datenspeicher geladen wurde. In <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.Shared> Bereich, der alle Werte, die zuvor hinzugefügt wurden, als die Seite selbst wurde <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.Shared> Bereich zur Verfügung gestellt. In <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.User> Bereich, wenn ein Wert zugeordnet <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.User> Personalisierungsbereich hatte ein Wert hinzugefügt, wenn die Seite in war <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.Shared> Bereich und einen anderen Wert als die Seite wurde <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.User> Bereich, und klicken Sie dann die Personalisierungsinfrastruktur würde nur die <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.User>-Wert begrenzt (im Gegensatz zu den <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.Shared> -Wert) innerhalb der `state` Parameter.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, eine Implementierung der <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Load%2A> Methode in einem benutzerdefinierten <xref:System.Web.UI.WebControls.WebParts.WebPart> Steuerelement. Für den vollständigen Code zum Ausführen dieses Beispiels erforderlich sind, finden Sie im Abschnitt "Beispiel" in der <xref:System.Web.UI.WebControls.WebParts.IPersonalizable> Übersicht über die Klasse.  
  
 [!code-csharp[WebParts_IPersonalizable_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/CS/urllistwebpart.cs#2)]
 [!code-vb[WebParts_IPersonalizable_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/VB/urllistwebpart.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.Web.UI.WebControls.WebParts.PersonalizationDictionary state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Save(class System.Web.UI.WebControls.WebParts.PersonalizationDictionary state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.IPersonalizable.Save(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (state As PersonalizationDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::Web::UI::WebControls::WebParts::PersonalizationDictionary ^ state);" />
      <MemberSignature Language="F#" Value="abstract member Save : System.Web.UI.WebControls.WebParts.PersonalizationDictionary -&gt; unit" Usage="iPersonalizable.Save state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Web.UI.WebControls.WebParts.PersonalizationDictionary" />
      </Parameters>
      <Docs>
        <param name="state">Ein <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationDictionary" />, das benutzerdefinierte Daten zum Gültigkeitsbereich enthält, die aus dem zugrunde liegenden Datenspeicher geladen wurden.</param>
        <summary>Speichert benutzerdefinierte Eigenschaften und interne Zustandsinformationen im <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationDictionary" />-Objekt des Steuerelements.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein Serversteuerelement kann eigene benutzerdefinierte Eigenschaften als auch interne Zustandsinformationen speichern die <xref:System.Web.UI.WebControls.WebParts.PersonalizationDictionary> Angabe in der `state` Parameter. Die Informationen werden als eine Reihe von Name/Wert-Paare gespeichert. Es ist Aufgabe des Steuerelements, das Name/Wert-Paaren zu verwenden, die sie während der nachfolgende Aufrufe des Steuerelements durch erkennen kann die <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Load%2A> Methode.  
  
 Ein Steuerelement kann die zugehörigen verweisen <xref:System.Web.UI.WebControls.WebParts.WebPartManager> steuern und überprüfen Sie die <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope> Objekt, das den aktuellen Bereich zu ermitteln. Benutzerdefinierte Zustandsinformationen sollte für den aktuellen Bereich geeignet sein. Beachten Sie, dass jedes <xref:System.Web.UI.WebControls.WebParts.PersonalizationEntry> -Wert, der hinzugefügt wird die <xref:System.Web.UI.WebControls.WebParts.PersonalizationDictionary> Objekt sollte mit dem entsprechenden Bereichswert verknüpft sein, da die Personalisierungsinfrastruktur, die von dieser abhängig, beim Zusammenführen von ist <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.Shared> und <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.User>-Bereich von benutzerdefinierten Daten vor der Übergabe an die <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Load%2A> Methode.  
  
 Bei Verwendung der ASP.NET-Standardimplementierung des Webparts-Steuerelemente müssen stellen Sie sicher, dass Objekte, die in das State-Wörterbuch platziert, die von ASP.NET serialisiert werden können <xref:System.Web.UI.ObjectStateFormatter> Klasse. In der Praxis bedeutet dies Folgendes:  
  
-   Primitive .NET Framework-Typen, Zeichenfolgen und .NET Framework-Typen wie Arrays, arraylisten, Hashtabellen und Wörterbücher Hybrid auflistungsbezogene sind automatisch serialisierbar.  
  
-   Benutzerdefinierte Typen, die ihre eigenen geben <xref:System.ComponentModel.TypeConverter> Klassen kann zum Serialisieren und Deserialisieren von aus Zeichenfolgen werden als serialisierbar betrachtet.  
  
-   Benutzerdefinierte Typen, die von serialisiert werden können die <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter> Klasse als serialisierbar betrachtet werden.  
  
> [!IMPORTANT]
>  Sie nicht auf basierte von Klassen, die im Verzeichnis "App_Code" definierten Typen hinzufügen, und klicken Sie dann auf den Standardmechanismus für die binäre Serialisierung abhängig sind. "App_Code" basierende Artefakte sind nicht konsistent binär serialisierbar, aufgrund der Tatsache, dass sie ihren Assemblynamen zu zufälligen Zeitpunkten in der Zeit geändert haben, können.  
  
   
  
## Examples  
 Das folgende Codebeispiel demonstriert die Implementierung der <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Save%2A> Methode in einem benutzerdefinierten <xref:System.Web.UI.WebControls.WebParts.WebPart> Steuerelement. Für den vollständigen Code zum Ausführen dieses Beispiels erforderlich sind, finden Sie im Abschnitt "Beispiel" in der <xref:System.Web.UI.WebControls.WebParts.IPersonalizable> Übersicht über die Klasse.  
  
 [!code-csharp[WebParts_IPersonalizable_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/CS/urllistwebpart.cs#2)]
 [!code-vb[WebParts_IPersonalizable_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/VB/urllistwebpart.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
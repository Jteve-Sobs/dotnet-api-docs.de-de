<Type Name="IPersonalizable" FullName="System.Web.UI.WebControls.WebParts.IPersonalizable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9762519573962218a7aa1fc2c8df4ccce38aea70" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70640382" /></Metadata><TypeSignature Language="C#" Value="public interface IPersonalizable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPersonalizable" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.IPersonalizable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPersonalizable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IPersonalizable" />
  <TypeSignature Language="F#" Value="type IPersonalizable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Definiert zusätzliche Verwaltungsfunktionen zum Anwenden und Extrahieren des Personalisierungszustands.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zusätzlich zur Verwendung des `Personalizable` -Attributs für Steuerelement Eigenschaften kann ein Steuerelement auch für zusätzliche Verwaltungsfunktionen für die Anwendung und Extraktion des Personalisierungs Zustands implementieren. <xref:System.Web.UI.WebControls.WebParts.IPersonalizable> Beispielsweise sollten Steuerelemente, die private Zustandsinformationen verwalten müssen, diese Schnittstelle implementieren. Steuerelemente, die über komplexe Mechanismen auf personalisierte Daten zugreifen, wie z. b. benutzerdefinierte Cache Lösungen, Daten Persistenz für Mainframes oder XML-Webdienste, sollten diese Schnittstelle ebenfalls implementieren.  
  
> [!IMPORTANT]
>  Sie sollten Typen nicht auf der Basis von Klassen hinzufügen, die im Verzeichnis App_Code definiert sind, und dann vom standardbinärserialisierungsmechanismus abhängig sind. App_Code-basierte Artefakte sind nicht konsistent serialisierbar, da Sie die Assemblynamen zu zufälligen Zeitpunkten ändern können.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung der <xref:System.Web.UI.WebControls.WebParts.IPersonalizable> -Schnittstelle veranschaulicht. Das Beispiel besteht aus einer ASPX-Seite, die auf ein WebPartSteuerelement mit dem Namen `UrlListWebPart`verweist. Der folgende Code ist die ASPX-Datei für das Beispiel.  
  
 [!code-aspx-csharp[WebParts_IPersonalizable_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/CS/IPersonalizableCS.aspx#1)]
 [!code-aspx-vb[WebParts_IPersonalizable_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/VB/IPersonalizableVB.aspx#1)]  
  
 Der folgende Code ist die Quelle für das Benutzer <xref:System.Web.UI.WebControls.WebParts.WebPart> definierte Steuerelement. Diese Datei sollte in das Verzeichnis App_Code eingefügt werden.  
  
 [!code-csharp[WebParts_IPersonalizable_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/CS/urllistwebpart.cs#2)]
 [!code-vb[WebParts_IPersonalizable_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/VB/urllistwebpart.vb#2)]  
  
 Lädt die Seite in einem Browser. Geben Sie einen Namen ein, um eine URL darzustellen, und fügen Sie anschließend eine `http://`tatsächliche URL hinzu, und klicken Sie auf die Schaltfläche **Hinzufügen** , um die URL hinzuzufügen.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="IsDirty">
      <MemberSignature Language="C#" Value="public bool IsDirty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDirty" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDirty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDirty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDirty : bool" Usage="System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die benutzerdefinierten Daten, die ein Steuerelement verwaltet, geändert wurden.</summary>
        <value><see langword="true" />, wenn die mit der <see cref="T:System.Web.UI.WebControls.WebParts.IPersonalizable" />-Schnittstelle verwalteten benutzerdefinierten Daten geändert wurden, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die von einem Steuerelement verwalteten Daten geändert wurden, wird das Steuerelement als "geändert" betrachtet. Ein Steuerelement sollte `true` zurückgeben, wenn sich die benutzerdefinierten Daten <xref:System.Web.UI.WebControls.WebParts.IPersonalizable> , die durch die Schnittstelle verwaltet werden, geändert haben Wenn ein Steuerelement `true` von dieser Eigenschaft zurückgegeben wird, <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Save%2A> wird die Implementierung der Schnittstellen Methode des Steuer Elements während der Extraktion von Eigenschafts Werten aufgerufen.  
  
> [!NOTE]
>  Diese Eigenschaft wird automatisch von der Personalisierungs Infrastruktur in den letzten Phasen der Verarbeitung einer POST-Anforderung geprüft. Für Get-Anforderungen ist der von der <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty%2A> -Eigenschaft zurückgegebene Wert jedoch nicht aktiviert. Ein anderes Ereignis muss dazu geführt haben, dass das Steuerelement für jeden Steuerungs Zustand als "geändert" angesehen wird, nicht nur von <xref:System.Web.UI.WebControls.WebParts.IPersonalizable>verwalteten Daten, die gespeichert werden sollen. Wenn ein Steuerelement während einer GET-Anforderung als "Dirty" gekennzeichnet werden kann oder wenn die Personalisierungs Infrastruktur unter einigen sehr spezifischen begrenzungsbedingungen das Steuerelement "Dirty" während einer get- <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Save%2A> Anforderung als "Dirty" kennzeichnet, wird immer aufgerufen.  
  
 Ein Steuerelement kann auf das <xref:System.Web.UI.WebControls.WebParts.WebPartManager> zugehörige Steuerelement <xref:System.Web.UI.WebControls.WebParts.WebPartPersonalization.Scope%2A> verweisen und die-Eigenschaft überprüfen, um den aktuellen Bereich zu bestimmen Der Status "geändert" der benutzerdefinierten Daten eines Steuer Elements sollte für den aktuellen Bereich geeignet sein.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty%2A> Verwendung der-Eigenschaft veranschaulicht. Der erste Teil des Beispiels ist die Webseite, die ein <xref:System.Web.UI.WebControls.WebParts.WebPart> -Steuerelement hostet.  
  
 [!code-aspx-csharp[WebParts_IPersonalizable_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/CS/IPersonalizableCS.aspx#1)]
 [!code-aspx-vb[WebParts_IPersonalizable_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/VB/IPersonalizableVB.aspx#1)]  
  
 Der zweite Teil des Beispiels ist der Code für das benutzerdefinierte <xref:System.Web.UI.WebControls.WebParts.WebPart> Steuerelement `UrlListWebPart`mit dem Namen. Diese Datei sollte im Verzeichnis App_Code abgelegt werden, um das Beispiel auszuführen. Beachten Sie, dass der Quellcode die <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty%2A> -Eigenschaft implementiert.  
  
 [!code-csharp[WebParts_IPersonalizable_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/CS/urllistwebpart.cs#2)]
 [!code-vb[WebParts_IPersonalizable_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/VB/urllistwebpart.vb#2)]  
  
 Lädt die Seite in einem Browser. Geben Sie einen Namen ein, um eine URL darzustellen, und fügen Sie anschließend eine `http://`tatsächliche URL hinzu, und klicken Sie auf die Schaltfläche **Hinzufügen** , um die URL hinzuzufügen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Web.UI.WebControls.WebParts.PersonalizationDictionary state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Load(class System.Web.UI.WebControls.WebParts.PersonalizationDictionary state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.IPersonalizable.Load(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (state As PersonalizationDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Web::UI::WebControls::WebParts::PersonalizationDictionary ^ state);" />
      <MemberSignature Language="F#" Value="abstract member Load : System.Web.UI.WebControls.WebParts.PersonalizationDictionary -&gt; unit" Usage="iPersonalizable.Load state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Web.UI.WebControls.WebParts.PersonalizationDictionary" />
      </Parameters>
      <Docs>
        <param name="state">Ein <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationDictionary" />, das benutzerdefinierte Daten zum Gültigkeitsbereich enthält, die aus dem zugrunde liegenden Datenspeicher geladen wurden.</param>
        <summary>Lädt benutzerdefinierte Daten in ein Steuerelement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird für ein-Steuerelement aufgerufen, damit benutzerdefinierte Daten in sich selbst laden können. Außerdem kann ein Wert zurückgegeben werden, der angibt, ob der benutzerdefinierte Zustand eines Steuer Elements in den zugrunde liegenden Datenspeicher zurückgeschrieben werden muss, unabhängig davon, ob sich andere Personalisierungs Daten auf der Seite geändert haben. Ein Steuerelement kann seine eigenen benutzerdefinierten Eigenschaften festlegen und zusätzliche interne Logik auf Grundlage der im Personalisierungs Wörterbuch enthaltenen Werte ausführen. Diese Methode wird vom Webparts-Steuerungs Satz aufgerufen, während Personalisierungs Daten auf ein Steuerelement angewendet werden.  
  
 Sie sollten auch das Zusammenschluss Verhalten der im- <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.User> <xref:System.Web.UI.WebControls.WebParts.PersonalizationDictionary> Objekt enthaltenen Eigenschaften im <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.Shared>Vergleich mit dem Bereich beachten. Der `state` -Parameter enthält eine zusammengeführte Darstellung von benutzerdefinierten Daten, die aus dem zugrunde liegenden Datenspeicher geladen wurden. Im <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.Shared> Bereich sind alle Werte verfügbar, die zuvor hinzugefügt wurden, als sich die <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.Shared> Seite selbst im Gültigkeitsbereich befand. Wenn <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.User> im Bereich ein Wert, der dem <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.User> Personalisierungs Bereich zugeordnet ist, einen Wert hinzugefügt hat, <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.Shared> wenn sich die Seite im Gültigkeitsbereich befand, und <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.User> einen anderen Wert, wenn sich die Seite im Gültigkeitsbereich befand, würde die Personalisierungs Infrastruktur Schließen <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.User> Sie nur den Wert `state`  mit dem Wert (im Gegensatz zum Bereichs Wert) innerhalb des-Parameters ein. <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.Shared>  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird eine Implementierung der <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Load%2A> -Methode in einem benutzerdefinierten <xref:System.Web.UI.WebControls.WebParts.WebPart> -Steuerelement veranschaulicht. Den vollständigen Code, der zum Ausführen dieses Beispiels erforderlich ist, finden Sie im <xref:System.Web.UI.WebControls.WebParts.IPersonalizable> Beispiel Abschnitt in der Übersicht über die-Klasse.  
  
 [!code-csharp[WebParts_IPersonalizable_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/CS/urllistwebpart.cs#2)]
 [!code-vb[WebParts_IPersonalizable_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/VB/urllistwebpart.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.Web.UI.WebControls.WebParts.PersonalizationDictionary state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Save(class System.Web.UI.WebControls.WebParts.PersonalizationDictionary state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.IPersonalizable.Save(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (state As PersonalizationDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::Web::UI::WebControls::WebParts::PersonalizationDictionary ^ state);" />
      <MemberSignature Language="F#" Value="abstract member Save : System.Web.UI.WebControls.WebParts.PersonalizationDictionary -&gt; unit" Usage="iPersonalizable.Save state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Web.UI.WebControls.WebParts.PersonalizationDictionary" />
      </Parameters>
      <Docs>
        <param name="state">Ein <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationDictionary" />, das benutzerdefinierte Daten zum Gültigkeitsbereich enthält, die aus dem zugrunde liegenden Datenspeicher geladen wurden.</param>
        <summary>Speichert benutzerdefinierte Eigenschaften und interne Zustandsinformationen im <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationDictionary" />-Objekt des Steuerelements.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein Server Steuerelement kann seine eigenen benutzerdefinierten Eigenschaften und internen Zustandsinformationen <xref:System.Web.UI.WebControls.WebParts.PersonalizationDictionary> speichern, die `state` im-Parameter angegeben sind. Die Informationen werden als eine Reihe von Name-Wert-Paaren gespeichert. Es liegt in der Verantwortung des-Steuer Elements, Name/Wert-Paare zu verwenden, die es bei nachfolgenden Aufrufen an das <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Load%2A> -Steuerelement durch die-Methode erkennen kann.  
  
 Ein Steuerelement kann auf das <xref:System.Web.UI.WebControls.WebParts.WebPartManager> zugeordnete Steuerelement <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope> verweisen und das Objekt überprüfen, um den aktuellen Bereich zu bestimmen. Benutzerdefinierte Zustandsinformationen sollten für den aktuellen Gültigkeitsbereich geeignet sein. Beachten Sie, <xref:System.Web.UI.WebControls.WebParts.PersonalizationEntry> dass jeder Wert, der dem <xref:System.Web.UI.WebControls.WebParts.PersonalizationDictionary> Objekt hinzugefügt wird, dem entsprechenden Bereichs Wert zugeordnet werden muss, da die Personalisierungs Infrastruktur beim <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.Shared> <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.User>Zusammenführen von benutzerdefinierten Daten von diesem abhängt. vor der Übergabe an die <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Load%2A> -Methode.  
  
 Bei Verwendung der standardmäßigen ASP.NET-Implementierung von Webparts müssen Steuerelemente sicherstellen, dass die im Zustands Wörterbuch platzierten Objekte von <xref:System.Web.UI.ObjectStateFormatter> der ASP.NET-Klasse serialisiert werden können. In der Praxis bedeutet dies Folgendes:  
  
-   Primitive .NET Framework Typen, Zeichen folgen und Sammlungs orientierte .NET Framework Typen wie Arrays, Array Listen, Hash Tabellen und Hybrid Wörterbücher sind automatisch serialisierbar.  
  
-   Benutzerdefinierte Typen, die eigene <xref:System.ComponentModel.TypeConverter> Klassen bereitstellen, die serialisieren und aus Zeichen folgen deserialisieren können, werden als serialisierbar betrachtet.  
  
-   Benutzerdefinierte Typen, die von der <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter> -Klasse serialisiert werden können, werden als serialisierbar betrachtet.  
  
> [!IMPORTANT]
>  Sie sollten Typen nicht auf der Basis von Klassen hinzufügen, die im Verzeichnis App_Code definiert sind, und dann vom standardbinärserialisierungsmechanismus abhängig sind. App_Code-basierte Artefakte sind nicht konsistent serialisierbar, da Sie die Assemblynamen zu zufälligen Zeitpunkten ändern können.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Implementierung <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Save%2A> der-Methode in <xref:System.Web.UI.WebControls.WebParts.WebPart> einem benutzerdefinierten-Steuerelement veranschaulicht. Den vollständigen Code, der zum Ausführen dieses Beispiels erforderlich ist, finden Sie im <xref:System.Web.UI.WebControls.WebParts.IPersonalizable> Beispiel Abschnitt in der Übersicht über die-Klasse.  
  
 [!code-csharp[WebParts_IPersonalizable_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/CS/urllistwebpart.cs#2)]
 [!code-vb[WebParts_IPersonalizable_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/VB/urllistwebpart.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

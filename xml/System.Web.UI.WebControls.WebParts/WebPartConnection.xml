<Type Name="WebPartConnection" FullName="System.Web.UI.WebControls.WebParts.WebPartConnection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c7f6c3f4395b55ea04359758e9b18926c72a9c3e" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86628136" /></Metadata><TypeSignature Language="C#" Value="public sealed class WebPartConnection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WebPartConnection extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WebPartConnection" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebPartConnection sealed" />
  <TypeSignature Language="F#" Value="type WebPartConnection = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Web.UI.ParseChildren(true, "Transformers")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Web.UI.ParseChildren(true, "Transformers")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt ein Objekt bereit, das zwei <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />-Steuerelementen das Herstellen einer Verbindung ermöglicht. Diese Klasse kann nicht vererbt werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Im Webparts Steuerelement Satz ist eine Verbindung eine Verknüpfung oder eine Zuordnung zwischen zwei <xref:System.Web.UI.WebControls.WebParts.WebPart> (oder anderen Server-oder Benutzer Steuerelementen), mit deren Hilfe Sie Daten freigeben können. Diese Möglichkeit der Freigabe von Daten ermöglicht die Verwendung verbundener Steuerelemente auf eine Weise, die die von den isolierten Steuerelementen angebotene Funktionalität überschreitet. Wenn z. b. ein Steuerelement Postal Code-Daten bereitstellt und ein anderes Steuerelement diese Daten lesen und lokale Wetterinformationen auf der Postleitzahl bereitstellen kann, bietet die verbundene Funktion der beiden Steuerelemente Benutzern mehr Wert. Um dieses Beispiel zu erweitern, können andere Steuerelemente erstellt werden, die auch Informationen auf der Grundlage einer Postleitzahl anzeigen, z. b. ein Steuerelement mit Links zu lokalen Nachrichten, und alle diese Steuerelemente, die mit Postleitzahl arbeiten können, können Daten mit dem einzelnen Steuerelement freigeben, das eine Postleitzahl bereitstellt. Endbenutzer von Webparts Anwendungen können Verbindungen zwischen allen solchen kompatiblen Steuerelementen direkt über einen Webbrowser erstellen und verwalten, indem Sie die Benutzeroberfläche der Standardverbindungen verwenden, die vom Steuerelement bereitgestellt <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> wird, oder eine benutzerdefinierte Benutzeroberfläche verwenden, die von einem Entwickler bereitgestellt wird.  
  
 Diese <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Klassen Übersicht ist eine allgemeine Erklärung der grundlegenden Details zum Erstellen einer Verbindung. Weitere Informationen zu bestimmten Komponenten und Anforderungen bei der Erstellung von Verbindungen finden Sie unter [Übersicht über Webparts Verbindungen](https://docs.microsoft.com/previous-versions/aspnet/ms178187(v=vs.100))oder unter Verweis Klassen und Codebeispiele, die in der folgenden Erörterung erwähnt werden. Es gibt mehrere grundlegende Aspekte einer Webparts Verbindung:  
  
-   Zwei-Steuer <xref:System.Web.UI.WebControls.WebParts.WebPart> Elemente. Jede Webparts Verbindung besteht aus zwei-Steuerelementen. Es ist möglich, dass ein Steuerelement gleichzeitig an mehr als einer Verbindung teilnimmt, aber jede einzelne Verbindung besteht aus genau zwei-Steuerelementen. Die Steuerelemente können direkt von der <xref:System.Web.UI.WebControls.WebParts.WebPart> Basisklasse abgeleitet werden, oder es kann sich um andere Server Steuerelemente handeln, einschließlich ASP.NET-Steuerelementen, benutzerdefinierte Server Steuerelemente und Benutzer Steuerelemente. Steuerelemente, die nicht von der-Klasse abgeleitet werden <xref:System.Web.UI.WebControls.WebParts.WebPart> ,, wenn Sie in einer <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> Zone platziert werden, werden zur Laufzeit automatisch mit einem-Objekt umgeschrieben <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> , sodass Sie von der <xref:System.Web.UI.WebControls.WebParts.WebPart> -Klasse erben und als Lauf Zeit Steuerelemente fungieren können <xref:System.Web.UI.WebControls.WebParts.WebPart> .  
  
-   Steuerelemente in <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> Zonen. Beide <xref:System.Web.UI.WebControls.WebParts.WebPart> Steuerelemente und andere Typen von Server Steuerelementen müssen sich in einer <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> Zone befinden, damit Sie an Webparts Verbindungen (und den meisten anderen Webparts Features) teilnehmen können.  
  
-   Consumer und Anbieter. In jeder Webparts Verbindung gibt es zwei Steuerelemente: einen Datenanbieter und einen Consumer von Daten. Der Anbieter stellt Daten über eine angegebene Rückruf Methode, die Daten in Form einer Schnittstelle zurückgibt, an den Consumer. (Ein Beispiel für das Erstellen und angeben der Rückruf Methode finden Sie im Beispiel Abschnitt dieses Themas.) Diese Rückruf Methode wird als Anbieter Verbindungspunkt bezeichnet. Die Details dieses Verbindungs Punkts (der "freundliche" Name, eine ID und der Typ der zurückgegebenen Schnittstelle) sind in einem-Objekt enthalten, <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> das dem Anbieter Steuerelement zugeordnet ist. Der Consumer empfängt die Daten über eine angegebene Methode, die eine Instanz der Schnittstelle annehmen kann. Diese Methode wird als Consumerverbindungspunkt bezeichnet, und die Details des Verbindungs Punkts (Name, ID und Typ der Schnittstelle) sind in einem-Objekt enthalten, <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> das dem Consumer-Steuerelement zugeordnet ist.  
  
-   Kompatible Steuerelemente oder ein gültiger Transformator. Damit eine Verbindung funktioniert, müssen der Consumer und der Anbieter entweder kompatibel sein (d. h., die angegebenen Verbindungspunkt Methoden können mit dem gleichen Schnittstellentyp funktionieren), oder es muss ein-Objekt vorhanden sein, <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> in dem der vom Anbieter angebotene Typ in einen vom Consumer erkannten Typ übersetzt werden kann.  
  
-   Ein <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>-Objekt. Damit eine Verbindung vorhanden ist, muss eine Instanz der-Klasse vorhanden sein, die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Verweise auf den Anbieter und die Consumersteuerelemente sowie die Details ihrer Verbindungspunkte enthält. Wenn der Anbieter und der Consumer nicht kompatibel sind und stattdessen ein- <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> Objekt verwenden, um eine Verbindung herzustellen, verweist die Verbindung auf den Transformator.  
  
-   Eine Möglichkeit zum Herstellen der Verbindung. Nachdem kompatible Consumer-und Anbieter Steuerelemente ordnungsgemäß mit Verbindungspunkt Methoden entworfen und in einer Zone platziert wurden und ein- <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Objekt verfügbar ist, ist der letzte grundlegende Schritt das Initiieren der Verbindung. Dies kann beispielsweise der Fall sein, wenn Benutzer die Verbindung über die Benutzeroberfläche erstellen. Wenn Sie ein `<asp:connectionszone>` Element auf der Seite platzieren und die anderen erforderlichen Komponenten für eine Verbindung vorhanden sind, kann ein Benutzer zur Laufzeit die Seite in den Verbindungsanzeige Modus wechseln, auf ein Connect-Verb im Verbenmenü des Anbieters oder Consumers klicken, und eine Verbindungs Benutzeroberfläche (basierend auf dem <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> Steuerelement) wird angezeigt. Über diese Benutzeroberfläche kann der Benutzer die Verbindung initiieren. Eine andere Möglichkeit, die Verbindung zu initiieren, besteht darin, Sie Programm gesteuert auszuführen. In jedem Fall, ob über die Benutzeroberfläche oder Programm gesteuert, ist die zugrunde liegende Methode, die die Verbindung initiiert, identisch. Die Anwendung ruft die- <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> Methode (oder die- <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> Methode, wenn ein Transformator verwendet wird) für das-Steuerelement auf <xref:System.Web.UI.WebControls.WebParts.WebPartManager> , übergibt sie an den Anbieter, den Consumer und die entsprechenden Verbindungspunkt Objekte, und die-Methode gibt ein- <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Objekt zurück.  
  
 Die- <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Klasse definiert ein-Objekt, das die wesentlichen Details einer Verbindung zwischen zwei-Steuerelementen kapselt <xref:System.Web.UI.WebControls.WebParts.WebPart> . Die-Klasse besteht fast vollständig aus Eigenschaften, die sich auf die Details einer bestimmten Verbindung beziehen. Mehrere Eigenschaften betreffen das Consumer-Steuerelement in einer Verbindung. Die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> -Eigenschaft verweist auf das Consumer-Steuerelement selbst, und die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> -Eigenschaft verweist auf die ID des Consumers. Das <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> -Objekt, das die Details zum Verbindungspunkt des Consumers enthält, wird von der-Eigenschaft des Consumers verwiesen <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> . Die- <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> Eigenschaft verweist auf die ID des <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Objekts. Allen diesen consumerbezogenen Verbindungs Eigenschaften muss ein Wert zugewiesen werden, um eine Verbindung herstellen zu können.  
  
 Die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> -Klasse verfügt auch über mehrere Eigenschaften, die sich auf das Anbieter Steuerelement in einer Verbindung beziehen, und diese entsprechen den Eigenschaften für einen Consumer. Die- <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> Eigenschaft verweist auf das Anbieter Steuerelement selbst, während die- <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> Eigenschaft auf Ihre ID verweist. Die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> -Eigenschaft verweist <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> auf das-Objekt, und die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> -Eigenschaft verweist auf die ID des Verbindungs Punkts des Anbieters.  
  
 Mehrere Eigenschaften betreffen den Status der Verbindung. Die- <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> Eigenschaft gibt an, ob die Verbindung aktiv ist (zurzeit Daten austauschen) oder inaktiv ist (weiterhin verbunden, aber nicht aktiv Daten freigeben). Die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> -Eigenschaft gibt an, ob die Verbindung eine freigegebene (für alle Benutzer einer Seite Verfügbare) oder eine benutzerspezifische Verbindung ist, und die- <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> Eigenschaft gibt an, ob das Steuerelement statisch (im Seiten Markup und somit permanent) oder dynamisch (Programm gesteuert erstellt) ist, was bedeutet, dass es gelöscht werden kann.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie eine einfache Verbindung zwischen zwei-Steuerelementen erstellt wird <xref:System.Web.UI.WebControls.WebParts.WebPart> . Das Beispiel veranschaulicht drei Methoden zum Herstellen einer Verbindung: deklarativ, indem Tags für die Verbindung im Markup der Webseite platziert werden. Programm gesteuert, durch Erstellen der Verbindung im Code; und über die Benutzeroberfläche, indem Sie ein- <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> Steuerelement auf der Seite platzieren, mit dem Benutzer eine Verbindung herstellen können.  
  
 Das Codebeispiel besteht aus vier Teilen:  
  
-   Ein Benutzer Steuerelement, mit dem Sie den Webparts Anzeigemodus auf einer Seite ändern können.  
  
-   Quellcode für eine Schnittstelle und zwei Steuer <xref:System.Web.UI.WebControls.WebParts.WebPart> Elemente, die als Anbieter und der Consumer für eine Verbindung fungieren.  
  
-   Eine Webseite zum Hosten aller Steuerelemente und zum Ausführen des Code Beispiels.  
  
-   Eine Erläuterung zum Ausführen der Beispielseite.  
  
 Der erste Teil dieses Code Beispiels ist das Benutzer Steuerelement, das es Benutzern ermöglicht, Anzeigemodi auf einer Webseite zu ändern. Speichern Sie den folgenden Quellcode in einer ASCX-Datei. Geben Sie dabei den Dateinamen an, der dem- `Src` Attribut der- `Register` Direktive für dieses Benutzer Steuerelement zugewiesen ist, das sich in der Nähe des oberen Rands der hostingwebseite befindet. Ausführliche Informationen zu Anzeigemodi und eine Beschreibung des Quellcodes in diesem Steuerelement finden Sie unter Exemplarische Vorgehensweise [: Ändern der Anzeigemodi auf einer Webparts Seite](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 Der zweite Teil des Code Beispiels ist der Quellcode für die-Schnittstelle und die-Steuerelemente. Die Quelldatei enthält eine einfache Schnittstelle mit dem Namen `IZipCode` . Es gibt auch eine <xref:System.Web.UI.WebControls.WebParts.WebPart> Klasse mit `ZipCodeWebPart` dem Namen, die die-Schnittstelle implementiert und als Anbieter Steuerelement fungiert. Die `ProvideIZipCode` -Methode ist die Rückruf Methode, die das einzige Member der-Schnittstelle implementiert. Die-Methode gibt einfach eine Instanz der-Schnittstelle zurück. Beachten Sie, dass die-Methode in Ihren Metadaten mit einem-Attribut gekennzeichnet ist `ConnectionProvider` . Dies ist der Mechanismus, mit dem die Methode als Rückruf Methode für den Verbindungspunkt des Anbieters identifiziert wird. Die andere <xref:System.Web.UI.WebControls.WebParts.WebPart> Klasse hat den Namen `WeatherWebPart` und fungiert als Consumer für die Verbindung. Diese Klasse verfügt über eine Methode `GetZipCode` mit dem Namen, die eine Instanz der- `IZipCode` Schnittstelle aus dem Anbieter Steuerelement abruft. Beachten Sie, dass diese Methode als Verbindungspunkt Methode des Consumers mit einem- `ConnectionConsumer` Attribut in den Metadaten gekennzeichnet ist.  
  
 Damit das Codebeispiel ausgeführt werden kann, müssen Sie diesen Quellcode kompilieren. Sie können Sie explizit kompilieren und die resultierende Assembly in den bin-Ordner der Website oder in den globalen Assemblycache einfügen. Alternativ dazu können Sie den Quellcode in den App_Code Ordner der Website einfügen, wo er zur Laufzeit dynamisch kompiliert wird. In diesem Codebeispiel wird die dynamische Kompilierung verwendet. Eine exemplarische Vorgehensweise, die das Kompilieren von veranschaulicht, finden Sie unter Exemplarische Vorgehensweise [: entwickeln und Verwenden eines benutzerdefinierten Webserver-Steuer](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)Elements.  
  
 [!code-csharp[WebParts_WebPartConnection_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/ZipCodeComponent.vb#2)]  
  
 Der dritte Teil des Code Beispiels ist die Webseite. Oben sind die `Register` Anweisungen für das Benutzer Steuerelement und die benutzerdefinierten Steuer <xref:System.Web.UI.WebControls.WebParts.WebPart> Elemente. Da im Beispiel die dynamische Kompilierung der Steuerelemente angenommen wird, sollte sich der Quellcode für die Steuerelemente in einem App_Code Unterordner befinden. Das `Register` -Tag auf der Seite verweist nur auf ein beliebiges Tagpräfix und den Namespace der Steuerelemente. Die benutzerdefinierten Steuer <xref:System.Web.UI.WebControls.WebParts.WebPart> Elemente (der Anbieter und der Consumer) werden im-Element der Webseite innerhalb `<asp:webpartzone>` eines-Elements deklariert `<zonetemplate>` .  
  
 Die Seite bietet drei Möglichkeiten, eine Verbindung zwischen den benutzerdefinierten Steuerelementen herzustellen. Die erste Methode ist deklarativ. Im Markup für die Seite `<StaticConnections>` wird ein-Element deklariert, und innerhalb von ist ein-Element `<asp:WebPartConnections>` , wobei die verschiedenen Consumer-und Anbieter Details der Verbindung als Attribute angegeben werden. Dies ist eine Möglichkeit, eine Verbindung zu erstellen, indem Sie direkt auf der Webseite deklariert wird, insbesondere innerhalb des- `<asp:WebPartManager>` Elements. Aufgrund dieser statischen Verbindung wird beim ersten Laden der Seite sofort eine Verbindung zwischen den beiden benutzerdefinierten Steuerelementen erstellt.  
  
 Eine zweite Methode zum bilden einer Verbindung zwischen den-Steuerelementen wird durch das- `<asp:connectionszone>` Element auf der Seite bereitgestellt. Wenn ein Benutzer zur Laufzeit eine Seite in den Verbindungsanzeige Modus wechselt und auf ein Connect-Verb in einem der benutzerdefinierten Steuerelemente klickt, `<asp:connectionszone>` rendert das Element automatisch die Benutzeroberfläche zum Erstellen einer Verbindung.  
  
 Die Seite zeigt auch eine dritte Methode zum Erstellen einer Verbindung, die Sie Programm gesteuert ausführen muss. In der- `Button1_Click` Methode erstellt der Code ein <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> -Objekt für das Anbieter Steuerelement und ruft seine Verbindungspunkt Details durch Aufrufen der- <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> Methode ab. Sie führt eine ähnliche Aufgabe für das Consumer-Steuerelement aus und ruft die- <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> Methode auf. Schließlich wird das neue- <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Objekt durch Aufrufen der- <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> Methode für das-Steuerelement erstellt <xref:System.Web.UI.WebControls.WebParts.WebPartManager> .  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Nachdem Sie die Webseite in einem Browser geladen haben, ist die erste Verbindung bereits vorhanden, da Sie im- `<StaticConnections>` Element deklariert ist. Geben Sie Text im Steuerelement für die **Postleitzahl** ein, das im Steuerelement "Consumer" angezeigt wird. Trennen Sie als nächstes die beiden-Steuerelemente. Ändern Sie die Seite mithilfe des Dropdown Listen-Steuer Elements **Anzeigemodus** in Verbindungsanzeige Modus. Klicken Sie für jedes Steuerelement auf das Verbenmenü (dargestellt durch einen abwärts Pfeil in der Titelleiste) <xref:System.Web.UI.WebControls.WebParts.WebPart> , und beachten Sie, dass jedes Steuerelement über eine **Connect** -Option verfügt. Dies ist ein Connect-Verb, das im Verbenmenü nur angezeigt wird, wenn sich die Seite im Verbindungs Modus befindet. Klicken Sie auf das Connect-Verb für eines der-Steuerelemente, und die vom-Steuerelement bereitgestellte Verbindungs Benutzeroberfläche wird <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> angezeigt. Klicken Sie auf die Schaltfläche **trennen** , um die statische Verbindung zwischen den Steuerelementen zu beenden. Verwenden Sie das Steuerelement **Anzeigemodus** , um die Seite in den Durchsuchenmodus zurückzukehren Versuchen Sie erneut, einen neuen Text in den Anbieter einzugeben, und beachten Sie, dass der Text im Consumer-Steuerelement nicht aktualisiert werden kann, da die Steuerelemente getrennt werden.  
  
 Verwenden Sie als nächstes dieselbe Methode wie oben, um die Seite erneut in den Verbindungsanzeige Modus zu wechseln. Klicken Sie auf ein Connect-Verb für eines der-Steuerelemente. Klicken Sie auf den Link **Verbindung erstellen** , und verwenden Sie die Benutzeroberfläche, die vom Steuerelement bereitgestellt wird, <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> um eine Verbindung zwischen den Steuerelementen herzustellen. Dies ist die zweite Methode zum Erstellen einer Verbindung. Beachten Sie, dass die letzte Zeichenfolge, die Sie im Anbieter Steuerelement eingegeben haben (die nicht angezeigt werden konnte, weil die Steuerelemente getrennt wurden), plötzlich im Consumer angezeigt wird, da die Verbindung neu erstellt wurde. Klicken Sie auf die Schaltfläche " **trennen** ", um die soeben erstellte aktuelle Verbindung zu beenden. Die Seite wird in den Durchsuchenmodus zurückgegeben. Geben Sie im Anbieter einen neuen Text ein, um zu veranschaulichen, dass der Text nicht aktualisiert wurde und dass die Steuerelemente wieder getrennt werden.  
  
 Hiermit wird die Seite zum Verbindungsanzeige Modus zurückgegeben. Anstatt auf ein Connect-Verb zu klicken, klicken Sie auf die Schaltfläche **WebPart-Steuerelemente verbinden** , die die dritte Methode zum bilden einer Verbindung veranschaulicht. Bei diesem Ansatz werden die Steuerelemente in einem einfachen Schritt Programm gesteuert verbunden, ohne dass das Steuerelement verwendet werden muss <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> . Beachten Sie, dass die letzte Zeichenfolge, die Sie im Anbieter eingegeben haben, beim Erstellen der Verbindung plötzlich im Consumer-Steuerelement angezeigt wird.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionsZone" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />
    <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178187(v=vs.100)">Übersicht über Webparts Verbindungen</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Webparts-Steuerelemente</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebPartConnection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebPartConnection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.%23ctor%2A> Konstruktor ist öffentlich, sodass der ASP.NET-Parser eine Instanz erstellen kann, wenn eine Verbindung im Markup einer Webseite deklariert wird. dieser Konstruktor ist nicht für die Verwendung im Entwickler Code vorgesehen.  
  
 Wenn Sie ein-Objekt Programm gesteuert erstellen möchten <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> , sollten Sie die- <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=nameWithType> Methode oder die-Methode verwenden, die <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=nameWithType> im-Steuerelement bereitgestellt wird <xref:System.Web.UI.WebControls.WebParts.WebPartManager> . Diese Methoden verarbeiten die vielen Details zum Erstellen einer Verbindung und geben ein- <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Objekt zurück.  
  
 Der <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.%23ctor%2A> Konstruktor für die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> -Klasse legt die Werte der <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> -Eigenschaft und der-Eigenschaft <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> auf fest `true` . Daher ist der Standardzustand einer neuen Verbindung statisch (was bedeutet, dass Sie im Markup der enthaltenden Webseite deklariert ist) und freigegeben (für alle Benutzer der Seite sichtbar). Dies ist der Fall, wenn Sie im typischen Szenario eine Verbindung hinzufügen, indem Sie die Verbindung im Markup der Seite mit einem-Element deklarieren `<asp:webpartconnection>` . In anderen Fällen hat eine Verbindung jedoch unterschiedliche Werte für diese Eigenschaften. Wenn Sie z. b. eine Verbindung Programm gesteuert hinzufügen, indem Sie das Verbindungs Objekt im Code erstellen, und der Benutzer die Seite im standardmäßigen Benutzer Personalisierungs Bereich anzeigen, wird die Verbindung als dynamischer Benutzer (nur für die jeweilige Benutzer Verbindung sichtbar) erstellt.  
  
> [!NOTE]
>  Die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> -Eigenschaft und die-Eigenschaft sind schreibgeschützt <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> , und die Eigenschaften, die die Art einer Verbindung bestimmen, werden intern vom-Steuerelement festgelegt, <xref:System.Web.UI.WebControls.WebParts.WebPartManager> je nachdem, wie eine Verbindung erstellt wird (deklarativ im Seiten Markup oder Programm gesteuert über den Code oder die Benutzeroberfläche).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Webparts-Steuerelemente</related>
      </Docs>
    </Member>
    <Member MemberName="Consumer">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPart Consumer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPart Consumer" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Consumer As WebPart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPart ^ Consumer { System::Web::UI::WebControls::WebParts::WebPart ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Consumer : System.Web.UI.WebControls.WebParts.WebPart" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />-Objekt ab, das in einer Verbindung als Consumersteuerelement fungiert.</summary>
        <value>Ein <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> stellt das Webparts-Steuerelement dar, das in einer Verbindung als Consumer fungiert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jede Webparts Verbindung besteht aus zwei Steuerelementen, die Daten gemeinsam nutzen. Ein Steuerelement fungiert als Datenanbieter, und das andere Steuerelement fungiert als Consumer und empfängt und verarbeitet die Daten vom Anbieter. Die- <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> Eigenschaft ruft einen Verweis auf das-Steuerelement ab, das <xref:System.Web.UI.WebControls.WebParts.WebPart> in einer Verbindungs Beziehung als Consumer fungiert.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die programmgesteuerte Verwendung der- <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> Eigenschaft veranschaulicht.  
  
 Das Codebeispiel besteht aus vier Teilen:  
  
-   Ein Benutzer Steuerelement, mit dem Sie den Webparts Anzeigemodus auf einer Seite ändern können.  
  
-   Quellcode für eine Schnittstelle und zwei Steuer <xref:System.Web.UI.WebControls.WebParts.WebPart> Elemente, die als Anbieter und der Consumer für eine Verbindung fungieren.  
  
-   Eine Webseite zum Hosten aller Steuerelemente und zum Ausführen des Code Beispiels.  
  
-   Eine Erläuterung zum Ausführen der Beispielseite.  
  
 Der erste Teil dieses Code Beispiels ist das Benutzer Steuerelement, das es Benutzern ermöglicht, Anzeigemodi auf einer Webseite zu ändern. Speichern Sie den folgenden Quellcode in einer ASCX-Datei. Geben Sie dabei den Dateinamen an, der dem- `Src` Attribut der- `Register` Direktive für dieses Benutzer Steuerelement zugewiesen ist, das sich in der Nähe des oberen Rands der hostingwebseite befindet. Ausführliche Informationen zu Anzeigemodi und eine Beschreibung des Quellcodes in diesem Steuerelement finden Sie unter Exemplarische Vorgehensweise [: Ändern der Anzeigemodi auf einer Webparts Seite](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Consumer#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_Consumer#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/DisplayModeMenuVB.ascx#6)]  
  
 Der zweite Teil des Code Beispiels ist der Quellcode für die beiden Steuerelemente, die <xref:System.Web.UI.WebControls.WebParts.WebPart> als Consumer und der Anbieter für die Verbindung fungieren, sowie eine Schnittstelle für die Verbindungspunkte. Damit das Codebeispiel ausgeführt werden kann, müssen Sie diesen Quellcode kompilieren. Sie können Sie explizit kompilieren und die resultierende Assembly in den bin-Ordner der Website oder in den globalen Assemblycache einfügen. Alternativ dazu können Sie den Quellcode in den App_Code Ordner der Website einfügen, wo er zur Laufzeit dynamisch kompiliert wird. In diesem Codebeispiel wird die dynamische Kompilierung verwendet. Eine exemplarische Vorgehensweise, die das Kompilieren von veranschaulicht, finden Sie unter Exemplarische Vorgehensweise [: entwickeln und Verwenden eines benutzerdefinierten Webserver-Steuer](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)Elements.  
  
 [!code-csharp[WebParts_WebPartConnection_Consumer#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Consumer#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/ZipCodeComponent.vb#2)]  
  
 Der dritte Teil des Code Beispiels ist der Code für die Webseite, die die Steuerelemente hostet und die Verwendung der- <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> Eigenschaft veranschaulicht. Am oberen Rand der Seite befinden sich die `Register` Anweisungen für das Benutzer Steuerelement und die benutzerdefinierten Steuerelemente. Da in diesem Beispiel die dynamische Kompilierung verwendet wird, `Register` muss die-Direktive für die Quelldatei nicht auf einen Assemblynamen verweisen, sondern nur ein beliebiges Tagpräfix und den Namespace der Steuerelemente enthalten. In der `Button2_Click` -Methode greift der Code über das-Steuerelement auf das Verbindungs Objekt <xref:System.Web.UI.WebControls.WebParts.WebPartManager> zu und Ruft einen Verweis auf das Consumer-Steuerelement ab.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Consumer#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Consumer#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Nachdem Sie die Seite in einem Browser geladen haben, verwenden Sie das Dropdown Listen-Steuerelement **Anzeigemodus** , um die Seite in den Verbindungs Modus zu wechseln. Klicken Sie in einem der Steuerelemente auf das Verbenmenü (dargestellt durch den abwärts Pfeil in der Titelleiste) <xref:System.Web.UI.WebControls.WebParts.WebPart> , und klicken Sie auf das Connect-Verb. Verwenden Sie die Schaltfläche **WebPart-Steuerelemente verbinden** oder die bereitgestellte Verbindungs Benutzeroberfläche, um eine Verbindung zwischen den beiden Steuerelementen herzustellen. Klicken Sie auf die Schaltfläche **consumerinformationen anzeigen** , um den Code auszuführen, der die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> Eigenschaft veranschaulicht.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die Länge der <see cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" />-Eigenschaft ist 0 (null).</exception>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Webparts-Steuerelemente</related>
      </Docs>
    </Member>
    <Member MemberName="ConsumerConnectionPoint">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint ConsumerConnectionPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint ConsumerConnectionPoint" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ConsumerConnectionPoint As ConsumerConnectionPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::ConsumerConnectionPoint ^ ConsumerConnectionPoint { System::Web::UI::WebControls::WebParts::ConsumerConnectionPoint ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ConsumerConnectionPoint : System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Objekt ab, das als Verbindungspunkt für ein Steuerelement fungiert, das als Consumer in einer Verbindung fungiert.</summary>
        <value>Ein <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />, der dem Consumersteuerelement in einer Verbindung zugeordnet ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Einer der erforderlichen Schritte zum Erstellen einer Verbindung zwischen zwei <xref:System.Web.UI.WebControls.WebParts.WebPart> Steuerelementen besteht darin, für jedes Steuerelement Verbindungspunkte zu erstellen. Der Consumerverbindungspunkt ist ein Objekt, das die Informationen zum Herstellen einer Verbindung mit dem Steuerelement enthält, das als Consumer fungiert. Im Quellcode des Consumers muss eine der-Methoden mit dem-Attribut identifiziert werden `ConnectionConsumer` . Das <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> -Objekt, das einem Consumersteuerelement zugeordnet ist, enthält Details über die-Methode und das-Attribut, einschließlich einer ID für die-Methode, einen anzeigen Amen zur Verwendung in der Benutzeroberfläche (UI) und den Typ der Schnittstelle, die von der Methode abgerufen werden kann. Dieser Satz von Informationen über den Consumer, seine Methode zum bilden von Verbindungen und die Art der Schnittstelle, die er versteht, bildet zusammen einen Consumerverbindungspunkt.  
  
 Standardmäßig kann ein- <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Objekt jeweils nur eine Verbindung mit jeweils einem <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Objekt herstellen. Ein Consumer könnte mehrere Methoden als mögliche Consumerverbindungspunkte identifizieren, aber ein Consumer kann nur an einer Verbindung als Consumer teilnehmen (daher kann nur einer seiner Consumerverbindungspunkte gleichzeitig aktiv sein). Im Gegensatz dazu kann eine eine <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Verbindung mit einer beliebigen Anzahl von <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Objekten herstellen. Dieses Standardverhalten kann durch Überschreiben der- <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A> Eigenschaft für das <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> Attribut geändert werden.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die programmgesteuerte Verwendung der- <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> Eigenschaft veranschaulicht.  
  
 Das Beispiel besteht aus vier Teilen:  
  
-   Ein Benutzer Steuerelement, mit dem Sie den Webparts Anzeigemodus auf einer Seite ändern können.  
  
-   Quellcode für eine Schnittstelle und zwei Steuer <xref:System.Web.UI.WebControls.WebParts.WebPart> Elemente, die als Anbieter und der Consumer für eine Verbindung fungieren.  
  
-   Eine Webseite zum Hosten aller Steuerelemente und zum Ausführen des Code Beispiels.  
  
-   Eine Erläuterung zum Ausführen der Beispielseite.  
  
 Der erste Teil dieses Code Beispiels ist das Benutzer Steuerelement, das es Benutzern ermöglicht, Anzeigemodi auf einer Webseite zu ändern. Speichern Sie den folgenden Quellcode in einer ASCX-Datei. Geben Sie dabei den Dateinamen an, der dem- `Src` Attribut der- `Register` Direktive für dieses Benutzer Steuerelement zugewiesen ist, das sich in der Nähe des oberen Rands der hostingwebseite befindet. Ausführliche Informationen zu Anzeigemodi und eine Beschreibung des Quellcodes in diesem Steuerelement finden Sie unter Exemplarische Vorgehensweise [: Ändern der Anzeigemodi auf einer Webparts Seite](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/DisplayModeMenuVB.ascx#6)]  
  
 Der zweite Teil des Code Beispiels ist der Quellcode für die beiden Steuerelemente, die <xref:System.Web.UI.WebControls.WebParts.WebPart> als Consumer und der Anbieter für die Verbindung fungieren, sowie eine Schnittstelle für die Verbindungspunkte. Damit das Codebeispiel ausgeführt werden kann, müssen Sie diesen Quellcode kompilieren. Sie können Sie explizit kompilieren und die resultierende Assembly in den bin-Ordner der Website oder in den globalen Assemblycache einfügen. Alternativ dazu können Sie den Quellcode in den App_Code Ordner der Website einfügen, wo er zur Laufzeit dynamisch kompiliert wird. In diesem Codebeispiel wird die dynamische Kompilierung verwendet. Eine exemplarische Vorgehensweise, die das Kompilieren von veranschaulicht, finden Sie unter Exemplarische Vorgehensweise [: entwickeln und Verwenden eines benutzerdefinierten Webserver-Steuer](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)Elements.  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/ZipCodeComponent.vb#2)]  
  
 Der dritte Teil des Code Beispiels ist der Code für die Webseite, die die Steuerelemente hostet und die Verwendung der- <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> Eigenschaft veranschaulicht. In der- `Button1_Click` Methode werden alle-Objekte erstellt, die zum bilden einer Verbindung erforderlich sind, einschließlich eines- <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Objekts. Diese Objekte werden alle an die- <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> Methode übermittelt, um die Verbindung zu erstellen. In der `Button2_Click` -Methode greift der Code auf die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> -Eigenschaft zu und zeigt einige Details zum Verbindungspunkt an.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Nachdem Sie die Seite in einem Browser geladen haben, verwenden Sie das Dropdown Listen-Steuerelement **Anzeigemodus** , um die Seite in den Verbindungs Modus zu wechseln. Klicken Sie in einem der Steuerelemente auf das Verbenmenü (dargestellt durch den abwärts Pfeil in der Titelleiste) <xref:System.Web.UI.WebControls.WebParts.WebPart> , und klicken Sie auf das Connect-Verb. Verwenden Sie die Schaltfläche **WebPart-Steuerelemente verbinden** oder die bereitgestellte Verbindungs Benutzeroberfläche, um eine Verbindung zwischen den beiden Steuerelementen zu erstellen. Klicken Sie auf die Schaltfläche " **ConnectionPoint Details** ", um den Code auszuführen, der die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> Eigenschaft veranschaulicht.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Webparts-Steuerelemente</related>
      </Docs>
    </Member>
    <Member MemberName="ConsumerConnectionPointID">
      <MemberSignature Language="C#" Value="public string ConsumerConnectionPointID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConsumerConnectionPointID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID" />
      <MemberSignature Language="VB.NET" Value="Public Property ConsumerConnectionPointID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ConsumerConnectionPointID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConsumerConnectionPointID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue("default")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue("default")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Eigenschaftswert für eine Verbindung ab, der auf die ID des Objekts verweist, das als Consumerverbindungspunkt für diese Verbindung fungiert, oder legt diesen fest.</summary>
        <value>Eine Zeichenfolge, die die ID für den Consumerverbindungspunkt enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Für eine statische Verbindung, die im Markup einer Webseite deklariert wurde, können Entwickler angeben, welcher Consumerverbindungspunkt für die Verbindung verwendet werden soll, indem dem-Attribut des-Elements ein Wert zugewiesen wird `ConsumerConnectionPointID` `<asp:webpartconnection>` . Wenn dem-Attribut kein Wert zugewiesen ist, wird der- <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> Eigenschafts Wert verwendet.  
  
 Wenn Sie dynamische (programmgesteuerte) Verbindungen erstellen, sollten Sie normalerweise nicht den Wert der- <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> Eigenschaft festlegen. Sie können einfach die- <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> Methode für das-Steuerelement aufzurufen und <xref:System.Web.UI.WebControls.WebParts.WebPartManager> Sie an die Consumer-und consumerverbindungspunktobjekte (zusammen mit den anderen erforderlichen Parametern) übergeben. diese Methode bestimmt die richtige ID für den Verbindungspunkt des Consumers. Wenn Sie die Verbindung trennen, können Sie auch die-Methode aufzurufen, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> ohne den <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> Eigenschafts Wert angeben zu müssen.  
  
> [!NOTE]
>  Die ID des Verbindungs Punkts eines Consumers kann bestimmt werden, wenn Sie ein- <xref:System.Web.UI.WebControls.WebParts.WebPart> Steuerelement oder ein anderes Server Steuerelement als Consumer festlegen. Sie müssen eine Methode im Consumer identifizieren, die eine Instanz einer Schnittstelle abruft, die entweder von einem Anbieter Steuerelement oder einem Transformator bereitgestellt wird. Um die Methode zu identifizieren, markieren Sie Sie mit dem `ConnectionConsumer` Code-Attribut. Wenn Sie dieses Attribut hinzufügen, können Sie einen optionalen Parameter für den Zeichen folgen Wert hinzufügen, der als ID für das-Objekt des Consumers fungiert <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> . Wenn Sie einen Wert für den optionalen ID-Parameter angeben, wird dieser Wert zum Wert der- <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> Eigenschaft für die Verbindung. Wenn Sie keinen ID-Wert angeben, wird der- <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> Eigenschafts Wert verwendet.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die deklarative und programmgesteuerte Verwendung der- <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> Eigenschaft veranschaulicht.  
  
 Das Beispiel besteht aus vier Teilen:  
  
-   Ein Benutzer Steuerelement, mit dem Sie den Webparts Anzeigemodus auf einer Seite ändern können.  
  
-   Quellcode für eine Schnittstelle und zwei Steuer <xref:System.Web.UI.WebControls.WebParts.WebPart> Elemente, die als Anbieter und der Consumer für eine Verbindung fungieren.  
  
-   Eine Webseite zum Hosten aller Steuerelemente und zum Ausführen des Code Beispiels.  
  
-   Eine Erläuterung zum Ausführen der Beispielseite.  
  
 Der erste Teil dieses Code Beispiels ist das Benutzer Steuerelement, das es Benutzern ermöglicht, Anzeigemodi auf einer Webseite zu ändern. Speichern Sie den folgenden Quellcode in einer ASCX-Datei. Geben Sie dabei den Dateinamen an, der dem- `Src` Attribut der- `Register` Direktive für dieses Benutzer Steuerelement zugewiesen ist, das sich in der Nähe des oberen Rands der hostingwebseite befindet. Ausführliche Informationen zu Anzeigemodi und eine Beschreibung des Quellcodes in diesem Steuerelement finden Sie unter Exemplarische Vorgehensweise [: Ändern der Anzeigemodi auf einer Webparts Seite](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/DisplayModeMenuVB.ascx#6)]  
  
 Der zweite Teil des Code Beispiels ist der Quellcode für die-Schnittstelle und die Consumer-und Provider-Steuerelemente. Damit das Codebeispiel ausgeführt werden kann, müssen Sie diesen Quellcode kompilieren. Sie können Sie explizit kompilieren und die resultierende Assembly in den bin-Ordner der Website oder in den globalen Assemblycache einfügen. Alternativ dazu können Sie den Quellcode in den App_Code Ordner der Website einfügen, wo er zur Laufzeit dynamisch kompiliert wird. In diesem Codebeispiel wird die dynamische Kompilierung verwendet. Eine exemplarische Vorgehensweise, die das Kompilieren von veranschaulicht, finden Sie unter Exemplarische Vorgehensweise [: entwickeln und Verwenden eines benutzerdefinierten Webserver-Steuer](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)Elements.  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/ZipCodeComponent.vb#2)]  
  
 Der dritte Teil des Code Beispiels ist die Webseite. Beachten Sie, dass eine Verbindung im Seiten Markup mit dem `<StaticConnections>` -Element und dem-Element deklariert wird `<asp:WebPartsConnection>` . Die Verbindungs Deklaration enthält das erforderliche- `ConsumerConnectionPointID` Attribut. Eine zweite Methode zum Erstellen der Verbindung wird in der-Methode angezeigt, in der `Button1_Click` der Code eine neue Verbindung erstellt, wobei der Verbindungspunkt verwendet wird, der im Consumer-Steuerelement definiert ist. Dann `Button2_Click` greift der Code in der-Methode auf die-Eigenschaft zu <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> .  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Nachdem Sie die Seite in einem Browser geladen haben, ist eine Verbindung aufgrund der in der Seite deklarierten statischen Verbindung bereits vorhanden. Geben Sie Text in das Anbieter Steuerelement ein, und beachten Sie, dass er aufgrund der Verbindung im Consumer angezeigt wird. Trennen Sie als nächstes die Steuerelemente. Wechseln Sie mithilfe des Dropdown Listen-Steuer Elements **Anzeigemodus** zur Seite in den Verbindungs Modus. Klicken Sie in einem der Steuerelemente auf das Verbenmenü (dargestellt durch den abwärts Pfeil in der Titelleiste) <xref:System.Web.UI.WebControls.WebParts.WebPart> , und klicken Sie auf das Connect-Verb. Klicken Sie auf die Schaltfläche **trennen** . Verwenden Sie die Schaltfläche **WebPart-Steuerelemente verbinden** , um eine Verbindung zwischen den beiden Steuerelementen wiederherzustellen. Klicken Sie auf die Schaltfläche **Verbindungspunkt Details** , um den Code auszuführen, der auf den <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> Eigenschafts Wert zugreift. Der Wert wird in eine Bezeichnung unterhalb der Steuerelemente geschrieben.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Webparts-Steuerelemente</related>
      </Docs>
    </Member>
    <Member MemberName="ConsumerID">
      <MemberSignature Language="C#" Value="public string ConsumerID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConsumerID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" />
      <MemberSignature Language="VB.NET" Value="Public Property ConsumerID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ConsumerID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConsumerID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue("")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue("")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Eigenschaftswert für eine Verbindung ab, der auf die ID des <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />-Steuerelements verweist, das als Consumer für diese Verbindung fungiert, oder legt diesen fest.</summary>
        <value>Eine Zeichenfolge, die die ID des Steuerelements enthält, das in einer Verbindung als Consumer fungiert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der- <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> Eigenschafts Wert ist erforderlich, wenn Sie eine Verbindung zwischen-Steuer <xref:System.Web.UI.WebControls.WebParts.WebPart> Elementen erstellen. Wenn der-Eigenschaft kein Wert zugewiesen ist, wird eine-Ausnahme ausgelöst, wenn das- <xref:System.Web.UI.WebControls.WebParts.WebPartManager> Steuerelement versucht, die Verbindung zu aktivieren.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die deklarative und programmgesteuerte Verwendung der- <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> Eigenschaft veranschaulicht.  
  
 Das Beispiel besteht aus vier Teilen:  
  
-   Ein Benutzer Steuerelement, mit dem Sie den Webparts Anzeigemodus auf einer Seite ändern können.  
  
-   Quellcode für eine Schnittstelle und zwei Steuer <xref:System.Web.UI.WebControls.WebParts.WebPart> Elemente, die als Anbieter und der Consumer für eine Verbindung fungieren.  
  
-   Eine Webseite zum Hosten aller Steuerelemente und zum Ausführen des Code Beispiels.  
  
-   Eine Erläuterung zum Ausführen der Beispielseite.  
  
 Der erste Teil dieses Code Beispiels ist das Benutzer Steuerelement, das es Benutzern ermöglicht, Anzeigemodi auf einer Webseite zu ändern. Speichern Sie den folgenden Quellcode in einer ASCX-Datei. Geben Sie dabei den Dateinamen an, der dem- `Src` Attribut der- `Register` Direktive für dieses Benutzer Steuerelement zugewiesen ist, das sich in der Nähe des oberen Rands der hostingwebseite befindet. Ausführliche Informationen zu Anzeigemodi und eine Beschreibung des Quellcodes in diesem Steuerelement finden Sie unter Exemplarische Vorgehensweise [: Ändern der Anzeigemodi auf einer Webparts Seite](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/DisplayModeMenuVB.ascx#6)]  
  
 Der zweite Teil des Code Beispiels ist der Quellcode für die-Schnittstelle und die Consumer-und Provider-Steuerelemente. Damit das Codebeispiel ausgeführt werden kann, müssen Sie diesen Quellcode kompilieren. Sie können Sie explizit kompilieren und die resultierende Assembly in den bin-Ordner der Website oder in den globalen Assemblycache einfügen. Alternativ dazu können Sie den Quellcode in den App_Code Ordner der Website einfügen, wo er zur Laufzeit dynamisch kompiliert wird. In diesem Codebeispiel wird die dynamische Kompilierung verwendet. Eine exemplarische Vorgehensweise, die das Kompilieren von veranschaulicht, finden Sie unter Exemplarische Vorgehensweise [: entwickeln und Verwenden eines benutzerdefinierten Webserver-Steuer](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)Elements.  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/ZipCodeComponent.vb#2)]  
  
 Der dritte Teil des Code Beispiels ist die Webseite. Beachten Sie, dass eine Verbindung im Seiten Markup mit dem `<StaticConnections>` -Element und dem-Element deklariert wird `<asp:WebPartsConnection>` . Die Verbindungs Deklaration enthält das erforderliche- `ConsumerID` Attribut. Eine zweite Methode zum Erstellen der Verbindung wird in der-Methode angezeigt, in der `Button1_Click` der Code eine neue Verbindung erstellt, wobei der Verbindungspunkt verwendet wird, der im Consumer-Steuerelement definiert ist. Dann `Button2_Click` greift der Code in der-Methode auf den Wert der <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> -Eigenschaft zu und zeigt ihn in einer Bezeichnung an.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Nachdem Sie die Seite in einem Browser geladen haben, ist eine Verbindung aufgrund der in der Seite deklarierten statischen Verbindung bereits vorhanden. Geben Sie Text in das Anbieter Steuerelement ein, und beachten Sie, dass er aufgrund der Verbindung im Consumer angezeigt wird. Trennen Sie als nächstes die Steuerelemente. Wechseln Sie mithilfe des Dropdown Listen-Steuer Elements **Anzeigemodus** zur Seite in den Verbindungs Modus. Klicken Sie in einem der Steuerelemente auf das Verbenmenü (dargestellt durch den abwärts Pfeil in der Titelleiste) <xref:System.Web.UI.WebControls.WebParts.WebPart> , und klicken Sie auf das Connect-Verb. Klicken Sie auf die Schaltfläche **trennen** . Verwenden Sie die Schaltfläche **WebPart-Steuerelemente verbinden** , um eine Verbindung zwischen den beiden Steuerelementen wiederherzustellen. Klicken Sie auf die Schaltfläche **Consumerdetails** , um den Code auszuführen, der auf den <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> Eigenschafts Wert zugreift  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Webparts-Steuerelemente</related>
      </Docs>
    </Member>
    <Member MemberName="ID">
      <MemberSignature Language="C#" Value="public string ID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ID" />
      <MemberSignature Language="VB.NET" Value="Public Property ID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue("")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue("")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die ID eines <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />-Objekts ab oder legt diese fest.</summary>
        <value>Eine Zeichenfolge, die die ID der <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jedes- <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Objekt verfügt über einen eindeutigen Wert, der der-Eigenschaft zugewiesen ist <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> . Dadurch wird sichergestellt, dass es eine Möglichkeit gibt, zwischen mehreren Verbindungen zu unterscheiden.  
  
 Wenn Sie eine statische Verbindung erstellen, indem Sie ein `<asp:webpartconnection>` Element auf einer Webseite deklarieren und dem `ID` Attribut für die Verbindung keinen Wert zuweisen, wird eine Ausnahme ausgelöst, wenn das Steuerelement <xref:System.Web.UI.WebControls.WebParts.WebPartManager> versucht, die Verbindung zu aktivieren.  
  
 Wenn das- <xref:System.Web.UI.WebControls.WebParts.WebPartManager> Steuerelement eine neue dynamische Verbindung erstellt, wird die-Methode aufgerufen, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID%2A> um eine eindeutige ID für die Verbindung zu generieren.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die deklarative und programmgesteuerte Verwendung der- <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> Eigenschaft veranschaulicht.  
  
 Das Beispiel besteht aus vier Teilen:  
  
-   Ein Benutzer Steuerelement, mit dem Sie den Webparts Anzeigemodus auf einer Seite ändern können.  
  
-   Quellcode für eine Schnittstelle und zwei Steuer <xref:System.Web.UI.WebControls.WebParts.WebPart> Elemente, die als Anbieter und der Consumer für eine Verbindung fungieren.  
  
-   Eine Webseite zum Hosten aller Steuerelemente und zum Ausführen des Code Beispiels.  
  
-   Eine Erläuterung zum Ausführen der Beispielseite.  
  
 Der erste Teil dieses Code Beispiels ist das Benutzer Steuerelement, das es Benutzern ermöglicht, Anzeigemodi auf einer Webseite zu ändern. Speichern Sie den folgenden Quellcode in einer ASCX-Datei. Geben Sie dabei den Dateinamen an, der dem- `Src` Attribut der- `Register` Direktive für dieses Benutzer Steuerelement zugewiesen ist, das sich in der Nähe des oberen Rands der hostingwebseite befindet. Ausführliche Informationen zu Anzeigemodi und eine Beschreibung des Quellcodes in diesem Steuerelement finden Sie unter Exemplarische Vorgehensweise [: Ändern der Anzeigemodi auf einer Webparts Seite](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/DisplayModeMenuVB.ascx#6)]  
  
 Der zweite Teil des Code Beispiels ist der Quellcode für die-Schnittstelle und die Consumer-und Provider-Steuerelemente. Damit das Codebeispiel ausgeführt werden kann, müssen Sie diesen Quellcode kompilieren. Sie können Sie explizit kompilieren und die resultierende Assembly in den bin-Ordner der Website oder in den globalen Assemblycache einfügen. Alternativ dazu können Sie den Quellcode in den App_Code Ordner der Website einfügen, wo er zur Laufzeit dynamisch kompiliert wird. In diesem Codebeispiel wird die dynamische Kompilierung verwendet. Eine exemplarische Vorgehensweise, die das Kompilieren von veranschaulicht, finden Sie unter Exemplarische Vorgehensweise [: entwickeln und Verwenden eines benutzerdefinierten Webserver-Steuer](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)Elements.  
  
 [!code-csharp[WebParts_WebPartConnection_ID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/ZipCodeComponent.vb#2)]  
  
 Der dritte Teil des Code Beispiels ist die Webseite. Beachten Sie, dass eine Verbindung im Seiten Markup mit dem `<StaticConnections>` -Element und dem-Element deklariert wird `<asp:WebPartsConnection>` . Die Verbindungs Deklaration enthält das erforderliche- `ID` Attribut. Eine zweite Methode zum Erstellen der Verbindung wird in der-Methode angezeigt, in der `Button1_Click` der Code eine neue Verbindung erstellt, wobei der Verbindungspunkt verwendet wird, der im Consumer-Steuerelement definiert ist. Hier ist die ID-Eigenschaft nicht erforderlich, da die Verbindung dynamisch ist und das- <xref:System.Web.UI.WebControls.WebParts.WebPartManager> Steuerelement der Verbindung eine ID zuweist. In der `Button2_Click` -Methode greift der Code auf den Wert der <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> -Eigenschaft zu und zeigt ihn in einer Bezeichnung an.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Nachdem Sie die Seite in einem Browser geladen haben, ist eine Verbindung aufgrund der in der Seite deklarierten statischen Verbindung bereits vorhanden. Geben Sie Text in das Anbieter Steuerelement ein, und beachten Sie, dass er aufgrund der Verbindung im Consumer angezeigt wird. Trennen Sie als nächstes die Steuerelemente. Wechseln Sie mithilfe des Dropdown Listen-Steuer Elements **Anzeigemodus** zur Seite in den Verbindungs Modus. Klicken Sie in einem der Steuerelemente auf das Verbenmenü (dargestellt durch den abwärts Pfeil in der Titelleiste) <xref:System.Web.UI.WebControls.WebParts.WebPart> , und klicken Sie auf das Connect-Verb. Klicken Sie auf die Schaltfläche **trennen** . Verwenden Sie die Schaltfläche **WebPart-Steuerelemente verbinden** , um eine Verbindung zwischen den beiden Steuerelementen wiederherzustellen. Klicken Sie auf die Schaltfläche **Verbindungs Details** , um den Code auszuführen, der auf den <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> Eigenschafts Wert zugreift  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Webparts-Steuerelemente</related>
      </Docs>
    </Member>
    <Member MemberName="IsActive">
      <MemberSignature Language="C#" Value="public bool IsActive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsActive" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsActive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsActive { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsActive : bool" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob ein <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />-Objekt derzeit eingerichtet und in der Lage ist, Daten zwischen seinem Anbieter- und seinem Consumersteuerelement auszutauschen.</summary>
        <value><see langword="true" />, wenn die Verbindung aktiv ist, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die- <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> Eigenschaft gibt den Zustand eines- <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Objekts an. Wenn sich die Verbindung in diesem Zustand befindet, kommunizieren die Anbieter-und Consumersteuerelemente in der Verbindung und können Daten über eine gemeinsame Schnittstelle oder ein- <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> Objekt austauschen.  
  
 Wenn ein Benutzer eine gerenderte Seite anzeigt, die eine im normalen Suchmodus festgelegte Verbindung enthält, ist die Verbindung normalerweise aktiv (es sei denn, Sie konnte aufgrund eines Konflikts oder eines anderen Problems beim Laden der Seite nicht aktiviert werden). In den frühen Phasen der Seite und des Lebenszyklus der Steuerelemente ist der-Eigenschafts Wert `false` . Die Verbindung wird unmittelbar nach dem Festlegen des- <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> Ereignisses für das-Steuerelement aktiviert <xref:System.Web.UI.WebControls.WebParts.WebPartManager> . Insbesondere wird die Verbindung aktiviert, nachdem der Consumer eine Instanz der angegebenen Schnittstelle vom Anbieter oder einem-Objekt abgerufen hat <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> .  
  
 Es ist hilfreich zu wissen, ob eine Verbindung aktiv ist, wenn aufgrund mehrerer Verbindungen auf einer Seite Konflikte oder Synchronisierungs Probleme auftreten können. Wenn z. b. ein Konflikt zwischen zwei Verbindungen vorliegt, <xref:System.Web.UI.WebControls.WebParts.WebPartManager> hat das Steuerelement die Option, eine der Verbindungen nicht zu aktivieren, um den Konflikt zu vermeiden.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung der- <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> Eigenschaft veranschaulicht.  
  
 Das Beispiel besteht aus drei Teilen:  
  
-   Quellcode für eine Schnittstelle und zwei Steuer <xref:System.Web.UI.WebControls.WebParts.WebPart> Elemente, die als Anbieter und der Consumer für eine Verbindung fungieren.  
  
-   Eine Webseite zum Hosten aller Steuerelemente und zum Ausführen des Code Beispiels.  
  
-   Eine Erläuterung zum Ausführen der Beispielseite.  
  
 Der erste Teil des Code Beispiels ist der Quellcode für die-Schnittstelle und die Consumer-und Provider-Steuerelemente. Damit das Codebeispiel ausgeführt werden kann, müssen Sie diesen Quellcode kompilieren. Sie können Sie explizit kompilieren und die resultierende Assembly in den bin-Ordner der Website oder in den globalen Assemblycache einfügen. Alternativ dazu können Sie den Quellcode in den App_Code Ordner der Website einfügen, wo er zur Laufzeit dynamisch kompiliert wird. In diesem Codebeispiel wird die dynamische Kompilierung verwendet. Eine exemplarische Vorgehensweise, die das Kompilieren von veranschaulicht, finden Sie unter Exemplarische Vorgehensweise [: entwickeln und Verwenden eines benutzerdefinierten Webserver-Steuer](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)Elements.  
  
 [!code-csharp[WebParts_WebPartConnection_IsActive#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsActive#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/VB/ZipCodeComponent.vb#2)]  
  
 Der zweite Teil des Code Beispiels ist die Webseite. In der Nähe des oberen ist eine- `Register` Direktive, die auf den Quellcode für die beiden dynamisch kompilierten Steuer <xref:System.Web.UI.WebControls.WebParts.WebPart> Elemente verweist. Die statische Verbindung wird innerhalb des- `<StaticConnections>` Elements auf der Seite deklariert. Innerhalb des- `<script>` Elements sind vier Ereignishandler. Jeder Ereignishandler überprüft den Wert der <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> -Eigenschaft auf die statische Verbindung und schreibt eine Meldung in das-Steuerelement, das <xref:System.Web.UI.WebControls.Label> angibt, ob die Verbindung mit dem Zustand der Seite und dem Steuerungs Lebenszyklus aktiv oder inaktiv ist. Dadurch wird veranschaulicht, an welcher Stelle die Verbindung aktiv wird und nach dem Rendern der Seite aktiv bleibt.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsActive#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/CS/wpConnectIsActiveCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsActive#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/VB/wpConnectIsActiveVB.aspx#1)]  
  
 Lädt die Seite in einem Browser. Die statische Verbindung wurde bereits erstellt, und Nachrichten wurden bereits in die Bezeichnungen geschrieben, um anzuzeigen, ob die Verbindung an verschiedenen Punkten im Seiten-und Steuerungs Lebenszyklus aktiv war. Klicken Sie auf die Schaltfläche **Verbindungs Details** . Beachten Sie, dass die Verbindung zu diesem Zeitpunkt nicht aktiv ist. die Verbindung wird jedoch jedes Mal nach dem Ereignis erneut aktiviert, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> und Sie ist nach dem <xref:System.Web.UI.Control.PreRender> Ereignis der Seite noch aktiv (und bleibt unverändert).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.IsStatic" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Webparts-Steuerelemente</related>
      </Docs>
    </Member>
    <Member MemberName="IsShared">
      <MemberSignature Language="C#" Value="public bool IsShared { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsShared" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsShared As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsShared { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsShared : bool" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob ein <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />-Objekt für alle Benutzer oder nur für den aktuellen Benutzer sichtbar ist.</summary>
        <value><see langword="true" />, wenn die Verbindung freigegeben ist, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wie bei den einzelnen Steuerelementen kann es sich bei <xref:System.Web.UI.WebControls.WebParts.WebPart> einem- <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Objekt um eine freigegebene oder eine benutzerspezifische-Instanz handeln. Eine freigegebene Instanz bedeutet, dass die Verbindung für alle Benutzer einer Webseite sichtbar ist, und eine pro-Benutzer-Instanz bedeutet, dass die Verbindung nur für einen bestimmten Benutzer sichtbar ist.  
  
 Im Allgemeinen bestimmt die Art und Weise, wie eine Verbindung zu einer Seite hinzugefügt wird, ob die Verbindung gemeinsam verwendet wird. Wenn die Verbindung im Markup einer Webseite deklariert ist, wird die Verbindung freigegeben, und der- <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> Eigenschafts Wert ist `true` . Wenn sich die Webseite beim Hinzufügen einer Verbindung im freigegebenen Personalisierungs Bereich befindet, wird die Verbindung ebenfalls freigegeben. Wenn ein Benutzer die `<asp:connectionszone>` Benutzeroberfläche (UI) zum Hinzufügen einer Verbindung verwendet, befindet sich die Seite in der Regel im Benutzer Personalisierungs Bereich, sodass die Verbindung nicht freigegeben und der- <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> Eigenschafts Wert ist `false` .  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die programmgesteuerte Verwendung der- <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> Eigenschaft veranschaulicht.  
  
 Das Codebeispiel besteht aus fünf Teilen:  
  
-   Ein Benutzer Steuerelement, mit dem Sie den Webparts Anzeigemodus auf einer Seite ändern können.  
  
-   Quellcode für eine Schnittstelle und zwei Steuer <xref:System.Web.UI.WebControls.WebParts.WebPart> Elemente, die als Anbieter und der Consumer für eine Verbindung fungieren.  
  
-   Eine Webseite zum Hosten aller Steuerelemente und zum Ausführen des Code Beispiels.  
  
-   Ein Eintrag in der Web.config-Datei, die zum Ausführen des Beispiels erforderlich ist.  
  
-   Eine Erläuterung zum Ausführen der Beispielseite.  
  
 Der erste Teil dieses Code Beispiels ist das Benutzer Steuerelement, das es Benutzern ermöglicht, Anzeigemodi auf einer Webseite zu ändern. Speichern Sie den folgenden Quellcode in einer ASCX-Datei. Geben Sie dabei den Dateinamen an, der dem- `Src` Attribut der- `Register` Direktive für dieses Benutzer Steuerelement zugewiesen ist, das sich in der Nähe des oberen Rands der hostingwebseite befindet. Ausführliche Informationen zu Anzeigemodi und eine Beschreibung des Quellcodes in diesem Steuerelement finden Sie unter Exemplarische Vorgehensweise [: Ändern der Anzeigemodi auf einer Webparts Seite](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsShared#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsShared#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/DisplayModeMenuVB.ascx#6)]  
  
 Der zweite Teil des Code Beispiels ist der Quellcode für die-Schnittstelle und die Consumer-und Provider-Steuerelemente. Damit das Codebeispiel ausgeführt werden kann, müssen Sie diesen Quellcode kompilieren. Sie können Sie explizit kompilieren und die resultierende Assembly in den bin-Ordner der Website oder in den globalen Assemblycache einfügen. Alternativ dazu können Sie den Quellcode in den App_Code Ordner der Website einfügen, wo er zur Laufzeit dynamisch kompiliert wird. In diesem Codebeispiel wird die dynamische Kompilierung verwendet. Eine exemplarische Vorgehensweise, die das Kompilieren von veranschaulicht, finden Sie unter Exemplarische Vorgehensweise [: entwickeln und Verwenden eines benutzerdefinierten Webserver-Steuer](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)Elements.  
  
 [!code-csharp[WebParts_WebPartConnection_IsShared#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsShared#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/ZipCodeComponent.vb#2)]  
  
 Der dritte Teil des Code Beispiels ist die Webseite. In der `Button2_Click` -Methode wird die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> -Eigenschaft der vorhandenen Verbindung überprüft und das Ergebnis auf der Seite angezeigt.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsShared#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsShared#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Der vierte Teil des Code Beispiels ist ein Eintrag in der Web.config-Datei, der für das Benutzerkonto erforderlich ist, in dem das Beispiel ausgeführt wird, damit die Seite im freigegebenen Personalisierungs Bereich bearbeitet werden kann. Um dies zu ermöglichen, benötigen Sie einen Eintrag in der Web.config-Datei innerhalb des `<system.web>` Abschnitts, der wie im folgenden Beispiel aussieht.  
  
```  
<webParts>  
  <personalization>  
    <authorization>  
      <allow users="UserAccount"  
             roles="admin"  
             verbs="enterSharedScope"/>  
    </authorization>            
  </personalization>  
</webParts>  
```  
  
 Nachdem Sie die Seite in einem Browser geladen haben, verwenden Sie das Dropdown Listen-Steuerelement **Anzeigemodus** , um die Seite in den Anzeigemodus für die Verbindung zu wechseln. Klicken Sie auf die Schaltfläche **WebPart-Steuerelemente verbinden** , um eine Verbindung herzustellen. Klicken Sie anschließend auf die Schaltfläche **Verbindungs Details** , um anzuzeigen, ob die Verbindung freigegeben ist. Wenn Sie die Verbindung mit der Seite im standardmäßigen Benutzer Personalisierungs Bereich erstellt haben, <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> sollte der Eigenschafts Wert `false` für die Verbindung lauten.  
  
 Klicken Sie im Verbenmenü eines der-Steuer <xref:System.Web.UI.WebControls.WebParts.WebPart> Elemente (angezeigt durch den abwärts Pfeil in der Titelleiste) auf das Connect-Verb. Wenn die Verbindungs Benutzeroberfläche angezeigt wird, klicken Sie auf die Schaltfläche **trennen** , um die Verbindung zu beenden. Verwenden Sie das Steuerelement **Anzeigemodus** , um die Seite in den Durchsuchenmodus zurückzukehren  
  
 Wählen Sie im **Anzeigemodus** -Steuerelement die Option frei **gegeben** aus, um die Seite in den freigegebenen Personalisierungs Bereich zu wechseln. Führen Sie die gleichen Schritte wie oben aus, um eine Verbindung herzustellen, und klicken Sie erneut auf die Schaltfläche **Verbindungs Details** , um anzuzeigen, ob die Verbindung freigegeben ist. In diesem Fall sollte der Wert der- <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> Eigenschaft lauten `true` .  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.IsShared" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Webparts-Steuerelemente</related>
      </Docs>
    </Member>
    <Member MemberName="IsStatic">
      <MemberSignature Language="C#" Value="public bool IsStatic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStatic" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStatic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStatic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStatic : bool" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob ein <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />-Objekt im Markup einer Webseite deklariert ist oder programmgesteuert erstellt wird.</summary>
        <value><see langword="true" />, wenn die Verbindung statisch ist, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verbindungen zwischen Webparts Steuerelementen können statisch oder dynamisch sein. Eine statische Verbindung wird im Markup einer Webseite mit einem- `<asp:WebPartConnection>` Element deklariert. Dynamische Verbindungen werden Programm gesteuert erstellt, oder wenn ein Benutzer über die Benutzeroberfläche (UI) eine Verbindung erstellt, die vom Steuerelement definiert wird <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> .  
  
 Statische Verbindungen sind freigegebene Objekte, d. h., Sie sind für alle Benutzer der Webseite verfügbar. Außerdem sind Sie im Wesentlichen permanent, da Sie wie ein statisches <xref:System.Web.UI.WebControls.WebParts.WebPart> Steuerelement nicht dauerhaft gelöscht werden können.  
  
> [!NOTE]
>  Obwohl ein statisches Verbindungs Objekt nicht dauerhaft gelöscht werden kann, kann es dauerhaft getrennt werden. In diesem Fall wäre das getrennte Objekt auf dem Server vorhanden, aber ein Endbenutzer weiß niemals, ob das Objekt auf einer Seite vorhanden ist.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die programmgesteuerte Verwendung der- <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> Eigenschaft veranschaulicht.  
  
 Das Codebeispiel besteht aus drei Teilen:  
  
-   Quellcode für eine Schnittstelle und zwei Steuer <xref:System.Web.UI.WebControls.WebParts.WebPart> Elemente, die als Anbieter und der Consumer für eine Verbindung fungieren.  
  
-   Eine Webseite zum Hosten der Steuerelemente und zum Ausführen des Code Beispiels.  
  
-   Eine Erläuterung zum Ausführen der Beispielseite.  
  
 Der erste Teil des Code Beispiels ist der Quellcode für die-Schnittstelle und die Consumer-und Provider-Steuerelemente. Damit das Codebeispiel ausgeführt werden kann, müssen Sie diesen Quellcode kompilieren. Sie können Sie explizit kompilieren und die resultierende Assembly in den bin-Ordner der Website oder in den globalen Assemblycache einfügen. Alternativ dazu können Sie den Quellcode in den App_Code Ordner der Website einfügen, wo er zur Laufzeit dynamisch kompiliert wird. In diesem Codebeispiel wird die dynamische Kompilierung verwendet. Eine exemplarische Vorgehensweise, die das Kompilieren von veranschaulicht, finden Sie unter Exemplarische Vorgehensweise [: entwickeln und Verwenden eines benutzerdefinierten Webserver-Steuer](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)Elements.  
  
 [!code-csharp[WebParts_WebPartConnection_IsStatic#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsStatic#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/VB/ZipCodeComponent.vb#2)]  
  
 Der zweite Teil des Code Beispiels ist die Webseite. In der Nähe des oberen ist eine- `Register` Direktive, die auf den Quellcode für die beiden dynamisch kompilierten Steuer <xref:System.Web.UI.WebControls.WebParts.WebPart> Elemente verweist. Die statische Verbindung wird innerhalb des- `<StaticConnections>` Elements auf der Seite deklariert. Die `Button1_Click` Methode greift auf die- <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> Eigenschaft zu, um zu prüfen, ob die Verbindung statisch ist.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsStatic#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/CS/wpConnectIsStaticCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsStatic#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/VB/wpConnectIsStaticVB.aspx#1)]  
  
 Lädt die Seite in einem Browser. Die statische Verbindung wurde bereits erstellt. Geben Sie Text in das Anbieter Steuerelement ein, und beachten Sie, dass der Text im Consumer-Steuerelement angezeigt wird. Klicken Sie auf die Schaltfläche **Verbindungs Details** , um den Wert der- <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> Eigenschaft anzuzeigen.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Webparts-Steuerelemente</related>
      </Docs>
    </Member>
    <Member MemberName="Provider">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPart Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPart Provider" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Provider As WebPart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPart ^ Provider { System::Web::UI::WebControls::WebParts::WebPart ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Provider : System.Web.UI.WebControls.WebParts.WebPart" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />-Steuerelement ab, das in einer Webparts-Verbindung als Anbieter fungiert.</summary>
        <value>Ein <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />-Steuerelement, das als Datenanbieter fungiert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jede Webparts Verbindung besteht aus zwei Steuer <xref:System.Web.UI.WebControls.WebParts.WebPart> Elementen: einem Consumer und einem Anbieter, und die- <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> Eigenschaft gibt einen Verweis auf das Anbieter Steuerelement in einer Verbindung zurück.  
  
 Wie das zugehörige Pendant in einer Verbindung (das Consumer-Steuerelement) ist das Anbieter Steuerelement erforderlich, um eine Verbindung herzustellen. Unabhängig davon, ob Sie die Verbindung Programm gesteuert erstellen oder im Seiten persistenten Format deklarieren, müssen Sie ein-Steuerelement angeben, das als Anbieter für eine Verbindung fungiert.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung der- <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> Eigenschaft veranschaulicht.  
  
 Das Codebeispiel besteht aus drei Teilen:  
  
-   Quellcode für eine Schnittstelle und zwei Steuer <xref:System.Web.UI.WebControls.WebParts.WebPart> Elemente, die als Anbieter und der Consumer für eine Verbindung fungieren.  
  
-   Eine Webseite zum Hosten der Steuerelemente und zum Ausführen des Code Beispiels.  
  
-   Eine Erläuterung zum Ausführen der Beispielseite.  
  
 Der erste Teil des Code Beispiels ist der Quellcode für die-Schnittstelle und die Consumer-und Provider-Steuerelemente. Damit das Codebeispiel ausgeführt werden kann, müssen Sie diesen Quellcode kompilieren. Sie können Sie explizit kompilieren und die resultierende Assembly in den bin-Ordner der Website oder in den globalen Assemblycache einfügen. Alternativ dazu können Sie den Quellcode in den App_Code Ordner der Website einfügen, wo er zur Laufzeit dynamisch kompiliert wird. In diesem Codebeispiel wird die dynamische Kompilierung verwendet. Eine exemplarische Vorgehensweise, die das Kompilieren von veranschaulicht, finden Sie unter Exemplarische Vorgehensweise [: entwickeln und Verwenden eines benutzerdefinierten Webserver-Steuer](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)Elements.  
  
 [!code-csharp[WebParts_WebPartConnection_Provider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Provider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/VB/ZipCodeComponent.vb#2)]  
  
 Der zweite Teil des Code Beispiels ist die Webseite. In der Nähe des oberen ist eine- `Register` Direktive, die auf den Quellcode für die beiden dynamisch kompilierten Steuer <xref:System.Web.UI.WebControls.WebParts.WebPart> Elemente verweist. Die statische Verbindung wird innerhalb des- `<StaticConnections>` Elements auf der Seite deklariert. Beachten Sie, dass `<asp:webpartconnection>` das-Attribut im-Element über `ProviderID` die ID des Anbieter Steuer Elements verfügt, das ihm zugewiesen ist. Dies ist erforderlich, um den Anbieter für die statische Verbindung zu identifizieren. Die `Button1_Click` -Methode greift <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> auf die-Eigenschaft zu und schreibt einige ihrer Details in eine Bezeichnung.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Provider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/CS/wpConnectProviderCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Provider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/VB/wpConnectProviderVB.aspx#1)]  
  
 Lädt die Seite in einem Browser. Die statische Verbindung wurde bereits erstellt. Geben Sie Text in das Anbieter Steuerelement ein, und beachten Sie, dass der Text im Consumer-Steuerelement angezeigt wird. Klicken Sie auf die Schaltfläche **Anbieter Details** , um einige der Eigenschaftswerte anzuzeigen, auf die über die Eigenschaft zugegriffen wird <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die Länge des <see cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />-Eigenschaftswerts ist 0 (null).</exception>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Webparts-Steuerelemente</related>
      </Docs>
    </Member>
    <Member MemberName="ProviderConnectionPoint">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.ProviderConnectionPoint ProviderConnectionPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.ProviderConnectionPoint ProviderConnectionPoint" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ProviderConnectionPoint As ProviderConnectionPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::ProviderConnectionPoint ^ ProviderConnectionPoint { System::Web::UI::WebControls::WebParts::ProviderConnectionPoint ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ProviderConnectionPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Objekt ab, das als Verbindungspunkt für ein <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />-Steuerelement fungiert, das als Anbieter in einer Verbindung fungiert.</summary>
        <value>Ein <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />, der einem Anbietersteuerelement in einer Verbindung zugeordnet ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Einer der erforderlichen Schritte zum Erstellen einer Verbindung zwischen zwei <xref:System.Web.UI.WebControls.WebParts.WebPart> Steuerelementen besteht darin, für jedes Steuerelement Verbindungspunkte zu erstellen. Der Anbieter Verbindungspunkt ist ein Objekt, das die Informationen zum Herstellen einer Verbindung mit dem Steuerelement enthält, das als Anbieter fungiert. Im Quellcode des Anbieters muss eine der Methoden mit dem-Attribut identifiziert werden `ConnectionProvider` . Der <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> , der einem Anbieter Steuerelement zugeordnet ist, enthält Details zur Methode und zum-Attribut, einschließlich einer ID für die-Methode, einen anzeigen Amen zur Verwendung in der Benutzeroberfläche (UI) und den Typ der Schnittstellen Instanz, der von der Methode an ein Consumersteuerelement zurückgegeben werden kann. Dieser Satz von Informationen über den Anbieter, seine Methode zum bilden von Verbindungen und der Typ der Schnittstelle, die er bereitstellt, bildet zusammen einen Anbieter Verbindungspunkt.  
  
 Standardmäßig kann eine eine <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Verbindung mit nur einem <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Objekt gleichzeitig herstellen. Ein Consumer könnte mehrere Methoden als mögliche Consumerverbindungspunkte identifizieren, aber ein Consumer kann nur an einer Verbindung als Consumer teilnehmen (daher kann nur einer seiner Consumerverbindungspunkte gleichzeitig aktiv sein). Im Gegensatz dazu <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> kann ein standardmäßig eine Verbindung mit einer beliebigen Anzahl von <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Objekten herstellen. Beispielsweise könnte ein Anbieter Steuerelement, das eine Postleitzahl bereitstellt, mit mehreren Consumersteuerelementen verbunden werden, die eine Postleitzahl verwenden, um verschiedene Arten von Daten basierend auf einer Postleitzahl zu erstellen, wie z. b. Wetterdaten, Nachrichten usw. Dieses Standardverhalten kann durch Überschreiben der- <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A> Eigenschaft für das <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> Attribut geändert werden.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die programmgesteuerte Verwendung der- <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> Eigenschaft veranschaulicht.  
  
 Das Beispiel besteht aus vier Teilen:  
  
-   Ein Benutzer Steuerelement, mit dem Sie den Webparts Anzeigemodus auf einer Seite ändern können.  
  
-   Quellcode für eine Schnittstelle und zwei Steuer <xref:System.Web.UI.WebControls.WebParts.WebPart> Elemente, die als Anbieter und der Consumer für eine Verbindung fungieren.  
  
-   Eine Webseite zum Hosten aller Steuerelemente und zum Ausführen des Code Beispiels.  
  
-   Eine Erläuterung zum Ausführen der Beispielseite.  
  
 Der erste Teil dieses Code Beispiels ist das Benutzer Steuerelement, das es Benutzern ermöglicht, Anzeigemodi auf einer Webseite zu ändern. Speichern Sie den folgenden Quellcode in einer ASCX-Datei. Geben Sie dabei den Dateinamen an, der dem- `Src` Attribut der- `Register` Direktive für dieses Benutzer Steuerelement zugewiesen ist, das sich in der Nähe des oberen Rands der hostingwebseite befindet. Ausführliche Informationen zu Anzeigemodi und eine Beschreibung des Quellcodes in diesem Steuerelement finden Sie unter Exemplarische Vorgehensweise [: Ändern der Anzeigemodi auf einer Webparts Seite](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/DisplayModeMenuVB.ascx#6)]  
  
 Der zweite Teil des Code Beispiels ist der Quellcode für die beiden Steuerelemente, die <xref:System.Web.UI.WebControls.WebParts.WebPart> als Consumer und der Anbieter für die Verbindung fungieren, sowie eine Schnittstelle für die Verbindungspunkte. Damit das Codebeispiel ausgeführt werden kann, müssen Sie diesen Quellcode kompilieren. Sie können Sie explizit kompilieren und die resultierende Assembly in den bin-Ordner der Website oder in den globalen Assemblycache einfügen. Alternativ dazu können Sie den Quellcode in den App_Code Ordner der Website einfügen, wo er zur Laufzeit dynamisch kompiliert wird. In diesem Codebeispiel wird die dynamische Kompilierung verwendet. Eine exemplarische Vorgehensweise, die das Kompilieren von veranschaulicht, finden Sie unter Exemplarische Vorgehensweise [: entwickeln und Verwenden eines benutzerdefinierten Webserver-Steuer](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)Elements.  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/ZipCodeComponent.vb#2)]  
  
 Der dritte Teil des Code Beispiels ist der Code für die Webseite, die die Steuerelemente hostet und die Verwendung der- <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> Eigenschaft veranschaulicht. In der- `Button1_Click` Methode werden alle-Objekte erstellt, die zum bilden einer Verbindung erforderlich sind, einschließlich eines- <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Objekts. Beachten Sie den-Befehl für die-Methode des- <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> <xref:System.Web.UI.WebControls.WebParts.WebPartManager> Steuer Elements. Die verschiedenen erstellten Objekte werden alle an die- <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> Methode übermittelt, um die Verbindung zu erstellen. In der `Button2_Click` -Methode greift der Code auf die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> -Eigenschaft zu und zeigt einige Details zum Verbindungspunkt an.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Nachdem Sie die Seite in einem Browser geladen haben, verwenden Sie das Dropdown Listen-Steuerelement **Anzeigemodus** , um die Seite in den Verbindungs Modus zu wechseln. Klicken Sie in einem der Steuerelemente auf das Verbenmenü (dargestellt durch den abwärts Pfeil in der Titelleiste) <xref:System.Web.UI.WebControls.WebParts.WebPart> , und klicken Sie auf das Connect-Verb. Verwenden Sie die Schaltfläche **WebPart-Steuerelemente verbinden** oder die bereitgestellte Verbindungs Benutzeroberfläche, um eine Verbindung zwischen den beiden Steuerelementen zu erstellen. Klicken Sie auf die Schaltfläche " **ConnectionPoint Details** ", um den Code auszuführen, der die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> Eigenschaft veranschaulicht.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Webparts-Steuerelemente</related>
      </Docs>
    </Member>
    <Member MemberName="ProviderConnectionPointID">
      <MemberSignature Language="C#" Value="public string ProviderConnectionPointID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderConnectionPointID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID" />
      <MemberSignature Language="VB.NET" Value="Public Property ProviderConnectionPointID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProviderConnectionPointID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ProviderConnectionPointID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue("default")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue("default")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Eigenschaftswert für eine Verbindung ab, der auf die ID des Objekts verweist, das als Anbieterverbindungspunkt für diese Verbindung fungiert, oder legt diesen fest.</summary>
        <value>Eine Zeichenfolge, die die ID für ein Anbieterverbindungspunkt-Objekt enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Für eine statische Verbindung, die im Markup einer Webseite deklariert wurde, können Entwickler angeben, welcher Anbieter Verbindungspunkt für die Verbindung verwendet werden soll, indem Sie dem- `ProviderConnectionPointID` Attribut im-Element einen Wert zuweisen `<asp:webpartconnection>` . Wenn dem-Attribut kein Wert zugewiesen ist, wird der- <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> Eigenschafts Wert verwendet.  
  
 Wenn Sie dynamische (programmgesteuerte) Verbindungen erstellen, sollten Sie normalerweise nicht den Wert der- <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> Eigenschaft festlegen. Sie können einfach die- <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> Methode für das-Steuerelement aufzurufen und <xref:System.Web.UI.WebControls.WebParts.WebPartManager> an den Anbieter und die Anbieter Verbindungspunkt-Objekte (zusammen mit den anderen erforderlichen Parametern) übergeben. diese Methode bestimmt die richtige ID für den Verbindungspunkt des Anbieters. Wenn Sie die Verbindung trennen, können Sie auch die-Methode aufzurufen, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> ohne den <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> Eigenschafts Wert angeben zu müssen.  
  
> [!NOTE]
>  Die ID des Verbindungs Punkts eines Anbieters kann bestimmt werden, wenn Sie ein- <xref:System.Web.UI.WebControls.WebParts.WebPart> Steuerelement oder ein anderes Server Steuerelement als Anbieter festlegen. Sie müssen eine Rückruf Methode im Anbieter identifizieren, die eine Instanz einer Schnittstelle, die Daten für einen Consumer enthält, bedient. Um die Methode zu identifizieren, markieren Sie Sie mit dem `ConnectionProvider` Code-Attribut. Wenn Sie dieses Attribut hinzufügen, können Sie einen optionalen Parameter für den Zeichen folgen Wert hinzufügen, der als ID für das Objekt des Anbieters fungiert <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> . Wenn Sie einen Wert für den optionalen ID-Parameter angeben, wird dieser Wert zum Wert der- <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> Eigenschaft für die Verbindung. Wenn Sie keinen ID-Wert angeben, weist das <xref:System.Web.UI.WebControls.WebParts.WebPartManager> Steuerelement beim Erstellen des Objekts eine Standard-ID zu.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die deklarative und programmgesteuerte Verwendung der- <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> Eigenschaft veranschaulicht.  
  
 Das Beispiel besteht aus vier Teilen:  
  
-   Ein Benutzer Steuerelement, mit dem Sie den Webparts Anzeigemodus auf einer Seite ändern können.  
  
-   Quellcode für eine Schnittstelle und zwei Steuer <xref:System.Web.UI.WebControls.WebParts.WebPart> Elemente, die als Anbieter und der Consumer für eine Verbindung fungieren.  
  
-   Eine Webseite zum Hosten aller Steuerelemente und zum Ausführen des Code Beispiels.  
  
-   Eine Erläuterung zum Ausführen der Beispielseite.  
  
 Der erste Teil dieses Code Beispiels ist das Benutzer Steuerelement, das es Benutzern ermöglicht, Anzeigemodi auf einer Webseite zu ändern. Speichern Sie den folgenden Quellcode in einer ASCX-Datei. Geben Sie dabei den Dateinamen an, der dem- `Src` Attribut der- `Register` Direktive für dieses Benutzer Steuerelement zugewiesen ist, das sich in der Nähe des oberen Rands der hostingwebseite befindet. Ausführliche Informationen zu Anzeigemodi und eine Beschreibung des Quellcodes in diesem Steuerelement finden Sie unter Exemplarische Vorgehensweise [: Ändern der Anzeigemodi auf einer Webparts Seite](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/DisplayModeMenuVB.ascx#6)]  
  
 Der zweite Teil des Code Beispiels ist der Quellcode für die-Schnittstelle und die Consumer-und Provider-Steuerelemente. Damit das Codebeispiel ausgeführt werden kann, müssen Sie diesen Quellcode kompilieren. Sie können Sie explizit kompilieren und die resultierende Assembly in den bin-Ordner der Website oder in den globalen Assemblycache einfügen. Alternativ dazu können Sie den Quellcode in den App_Code Ordner der Website einfügen, wo er zur Laufzeit dynamisch kompiliert wird. In diesem Codebeispiel wird die dynamische Kompilierung verwendet. Eine exemplarische Vorgehensweise, die das Kompilieren von veranschaulicht, finden Sie unter Exemplarische Vorgehensweise [: entwickeln und Verwenden eines benutzerdefinierten Webserver-Steuer](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)Elements.  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/ZipCodeComponent.vb#2)]  
  
 Der dritte Teil des Code Beispiels ist die Webseite. Beachten Sie, dass eine Verbindung im Seiten Markup mit dem `<StaticConnections>` -Element und dem-Element deklariert wird `<asp:WebPartsConnection>` . Die Verbindungs Deklaration enthält das erforderliche- `ProviderConnectionPointID` Attribut. Eine zweite Methode zum Erstellen der Verbindung wird in der-Methode angezeigt, in der `Button1_Click` der Code eine neue Verbindung erstellt und dabei den Verbindungspunkt (und die ID) verwendet, der im Anbieter Steuerelement definiert ist. Dann `Button2_Click` greift der Code in der-Methode auf die-Eigenschaft zu <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> .  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Nachdem Sie die Seite in einem Browser geladen haben, ist eine Verbindung aufgrund der in der Seite deklarierten statischen Verbindung bereits vorhanden. Geben Sie Text in das Anbieter Steuerelement ein, und beachten Sie, dass er aufgrund der Verbindung im Consumer angezeigt wird. Trennen Sie als nächstes die Steuerelemente. Wechseln Sie mithilfe des Dropdown Listen-Steuer Elements **Anzeigemodus** zur Seite in den Verbindungs Modus. Klicken Sie in einem der Steuerelemente auf das Verbenmenü (dargestellt durch den abwärts Pfeil in der Titelleiste) <xref:System.Web.UI.WebControls.WebParts.WebPart> , und klicken Sie auf das Connect-Verb. Klicken Sie auf die Schaltfläche **trennen** . Verwenden Sie die Schaltfläche **WebPart-Steuerelemente verbinden** , um eine Verbindung zwischen den beiden Steuerelementen wiederherzustellen. Klicken Sie auf die Schaltfläche **Verbindungspunkt Details** , um den Code auszuführen, der auf den <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> Eigenschafts Wert zugreift. Der Wert wird in eine Bezeichnung unterhalb der Steuerelemente geschrieben.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Webparts-Steuerelemente</related>
      </Docs>
    </Member>
    <Member MemberName="ProviderID">
      <MemberSignature Language="C#" Value="public string ProviderID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
      <MemberSignature Language="VB.NET" Value="Public Property ProviderID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProviderID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ProviderID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue("")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue("")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Eigenschaftswert für eine Verbindung ab, der auf die ID des <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />-Steuerelements verweist, das als Anbieter für diese Verbindung fungiert, oder legt diesen fest.</summary>
        <value>Eine Zeichenfolge mit der ID des Anbietersteuerelements.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der- <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> Eigenschafts Wert ist erforderlich, wenn Sie eine Verbindung zwischen zwei-Steuer <xref:System.Web.UI.WebControls.WebParts.WebPart> Elementen erstellen. Wenn der-Eigenschaft kein Wert zugewiesen ist, wird eine-Ausnahme ausgelöst, wenn das- <xref:System.Web.UI.WebControls.WebParts.WebPartManager> Steuerelement versucht, die Verbindung zu aktivieren.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die deklarative und programmgesteuerte Verwendung der- <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> Eigenschaft veranschaulicht.  
  
 Das Beispiel besteht aus vier Teilen:  
  
-   Ein Benutzer Steuerelement, mit dem Sie den Webparts Anzeigemodus auf einer Seite ändern können.  
  
-   Quellcode für eine Schnittstelle und zwei Steuer <xref:System.Web.UI.WebControls.WebParts.WebPart> Elemente, die als Anbieter und der Consumer für eine Verbindung fungieren.  
  
-   Eine Webseite zum Hosten aller Steuerelemente und zum Ausführen des Code Beispiels.  
  
-   Eine Erläuterung zum Ausführen der Beispielseite.  
  
 Der erste Teil dieses Code Beispiels ist das Benutzer Steuerelement, das es Benutzern ermöglicht, Anzeigemodi auf einer Webseite zu ändern. Speichern Sie den folgenden Quellcode in einer ASCX-Datei. Geben Sie dabei den Dateinamen an, der dem- `Src` Attribut der- `Register` Direktive für dieses Benutzer Steuerelement zugewiesen ist, das sich in der Nähe des oberen Rands der hostingwebseite befindet. Ausführliche Informationen zu Anzeigemodi und eine Beschreibung des Quellcodes in diesem Steuerelement finden Sie unter Exemplarische Vorgehensweise [: Ändern der Anzeigemodi auf einer Webparts Seite](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/DisplayModeMenuVB.ascx#6)]  
  
 Der zweite Teil des Code Beispiels ist der Quellcode für die-Schnittstelle und die Consumer-und Provider-Steuerelemente. Damit das Codebeispiel ausgeführt werden kann, müssen Sie diesen Quellcode kompilieren. Sie können Sie explizit kompilieren und die resultierende Assembly in den bin-Ordner der Website oder in den globalen Assemblycache einfügen. Alternativ dazu können Sie den Quellcode in den App_Code Ordner der Website einfügen, wo er zur Laufzeit dynamisch kompiliert wird. In diesem Codebeispiel wird die dynamische Kompilierung verwendet. Eine exemplarische Vorgehensweise, die das Kompilieren von veranschaulicht, finden Sie unter Exemplarische Vorgehensweise [: entwickeln und Verwenden eines benutzerdefinierten Webserver-Steuer](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)Elements.  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/ZipCodeComponent.vb#2)]  
  
 Der dritte Teil des Code Beispiels ist die Webseite. Beachten Sie, dass eine Verbindung im Seiten Markup mit dem `<StaticConnections>` -Element und dem-Element deklariert wird `<asp:WebPartsConnection>` . Die Verbindungs Deklaration enthält das erforderliche- `ProviderID` Attribut. Eine zweite Methode zum Erstellen der Verbindung wird in der-Methode angezeigt, in der `Button1_Click` der Code eine neue Verbindung erstellt, wobei der Verbindungspunkt verwendet wird, der im Consumer-Steuerelement definiert ist. Dann `Button2_Click` greift der Code in der-Methode auf den Wert der <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> -Eigenschaft zu und zeigt ihn in einer Bezeichnung an.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Nachdem Sie die Seite in einem Browser geladen haben, ist eine Verbindung aufgrund der in der Seite deklarierten statischen Verbindung bereits vorhanden. Geben Sie Text in das Anbieter Steuerelement ein, und beachten Sie, dass er aufgrund der Verbindung im Consumer angezeigt wird. Trennen Sie als nächstes die Steuerelemente. Verwenden Sie hierzu das Dropdown Listen-Steuerelement **Anzeigemodus** , um die Seite in den Verbindungs Modus zu wechseln. Klicken Sie in einem der Steuerelemente auf das Verbenmenü (dargestellt durch den abwärts Pfeil in der Titelleiste) <xref:System.Web.UI.WebControls.WebParts.WebPart> , und klicken Sie auf das Connect-Verb. Klicken Sie auf die Schaltfläche **trennen** , und die Steuerelemente werden getrennt. Verwenden Sie als nächstes die Schaltfläche **WebPart-Steuerelemente verbinden** , um eine Verbindung zwischen den beiden Steuerelementen wiederherzustellen. Klicken Sie auf die Schaltfläche **Consumerdetails** , um den Code auszuführen, der auf den <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> Eigenschafts Wert zugreift  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Webparts-Steuerelemente</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="webPartConnection.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Überschreibt die geerbte <see cref="M:System.Object.ToString" />-Methode und gibt einen kurzen Typnamen für das Verbindungsobjekt zurück.</summary>
        <returns>Eine Zeichenfolge, die den kurzen (nicht qualifizierten) Typnamen einer <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird hauptsächlich von Steuerelement-Designern verwendet. Es verbessert, wie Verbindungs Objekte in Designansicht mit dem kürzeren Typnamen angezeigt werden, im Gegensatz zu einem voll qualifizierten Typnamen. Die-Methode kann jedoch an einem beliebigen Punkt im Code aufgerufen werden, an dem Sie den Typnamen eines Verbindungs Objekts erkennen möchten.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die-Methode aufgerufen wird <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A> , um den kurzen Typnamen eines-Objekts zurückzugeben <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> .  
  
 Das Codebeispiel besteht aus drei Teilen:  
  
-   Quellcode für eine Schnittstelle und zwei Steuer <xref:System.Web.UI.WebControls.WebParts.WebPart> Elemente, die als Anbieter und der Consumer für eine Verbindung fungieren.  
  
-   Eine Webseite zum Hosten der Steuerelemente und zum Ausführen des Code Beispiels.  
  
-   Eine Erläuterung zum Ausführen der Beispielseite.  
  
 Der erste Teil des Code Beispiels ist der Quellcode für die-Schnittstelle und die Consumer-und Provider-Steuerelemente. Damit das Codebeispiel ausgeführt werden kann, müssen Sie diesen Quellcode kompilieren. Sie können Sie explizit kompilieren und die resultierende Assembly in den bin-Ordner der Website oder in den globalen Assemblycache einfügen. Alternativ dazu können Sie den Quellcode in den App_Code Ordner der Website einfügen, wo er zur Laufzeit dynamisch kompiliert wird. In diesem Codebeispiel wird die dynamische Kompilierung verwendet. Eine exemplarische Vorgehensweise, die das Kompilieren von veranschaulicht, finden Sie unter Exemplarische Vorgehensweise [: entwickeln und Verwenden eines benutzerdefinierten Webserver-Steuer](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)Elements.  
  
 [!code-csharp[WebParts_WebPartConnection_ToString#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ToString#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/VB/ZipCodeComponent.vb#2)]  
  
 Der zweite Teil des Code Beispiels ist die Webseite. In der Nähe des oberen ist eine- `Register` Direktive, die auf den Quellcode für die beiden dynamisch kompilierten Steuer <xref:System.Web.UI.WebControls.WebParts.WebPart> Elemente verweist. Die statische Verbindung wird innerhalb des- `<StaticConnections>` Elements auf der Seite deklariert. Die- `Button1_Click` Methode ruft die- <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A> Methode auf, um den Typnamen der Verbindung in eine Bezeichnung zu schreiben.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ToString#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/CS/wpConnectToStringCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ToString#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/VB/wpConnectToStringVB.aspx#1)]  
  
 Lädt die Seite in einem Browser. Die statische Verbindung wurde bereits erstellt. Geben Sie Text in das Anbieter Steuerelement ein, und beachten Sie, dass der Text im Consumer-Steuerelement angezeigt wird. Klicken Sie auf die Schaltfläche **Verbindungs Details** , um die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A> Methode auszuführen.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.ToString" />
      </Docs>
    </Member>
    <Member MemberName="Transformer">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartTransformer Transformer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartTransformer Transformer" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Transformer As WebPartTransformer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartTransformer ^ Transformer { System::Web::UI::WebControls::WebParts::WebPartTransformer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Transformer : System.Web.UI.WebControls.WebParts.WebPartTransformer" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartTransformer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />-Objekt ab, mit dessen Hilfe Daten zwischen zwei andernfalls nicht kompatiblen Verbindungspunkten in einer Webparts-Verbindung transformiert werden.</summary>
        <value>Ein <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />. Der Standardwert ist <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In einer Webparts Verbindung gibt es zwei Möglichkeiten, wie der Anbieter und die Consumersteuerelemente in der Verbindung eine Verbindung herstellen können. Sie können eine direkte Verbindung über ihre jeweiligen <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> Objekte und einen Schnittstellentyp herstellen, der von beiden Steuerelementen verstanden wird. Wenn Sie nicht kompatibel sind, können Sie indirekt eine Verbindung herstellen, indem Sie ein-Objekt verwenden, <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> das eine Schnittstellen Instanz von einem Anbieter in einen von einem Consumer verständlichen Typ transformiert.  
  
 Wenn ein Transformator als Teil einer Verbindung benötigt wird, stellt die- <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A> Eigenschaft einen Verweis auf das- <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> Objekt bereit. Sie können einen Transformator für eine Verbindung deklarativ im Markup einer Webseite hinzufügen, indem Sie ein Tag für einen benutzerdefinierten Transformator (oder einen der mit dem Webparts Steuersatz bereitgestellten Transformatoren) im-Element hinzufügen `<asp:WebPartConnection>` . Sie können einen Transformator auch Programm gesteuert hinzufügen, eine Instanz davon in Ihrem Code erstellen und die- <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPartTransformer%29> Methode für das- <xref:System.Web.UI.WebControls.WebParts.WebPartManager> Steuerelement aufrufen, um die Verbindung zu erstellen, indem Sie das Transformer-Objekt zusammen mit den anderen erforderlichen Parametern übergeben.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Webparts-Steuerelemente</related>
      </Docs>
    </Member>
    <Member MemberName="Transformers">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartTransformerCollection Transformers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartTransformerCollection Transformers" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Transformers As WebPartTransformerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartTransformerCollection ^ Transformers { System::Web::UI::WebControls::WebParts::WebPartTransformerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Transformers : System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerDefaultProperty)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerDefaultProperty)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartTransformerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine Auflistung von <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />-Objekten ab, die vom Webparts-Steuerelementsatz intern verwendet wird.</summary>
        <value>Eine <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" />-Methode, die <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />-Objekte enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die- <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers%2A> Eigenschaft ist nie für die Verwendung durch Entwickler bestimmt. Um auf den Transformator zuzugreifen, der einer Verbindung zugeordnet ist, sollten Entwickler immer die- <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A> Eigenschaft verwenden.  
  
 Die- <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers%2A> Eigenschaft wird intern vom Webparts-Steuerelement verwendet, um Seiten Entwicklern das Deklarieren von Transformer-Elementen innerhalb des- `<asp:webpartconnection>` Elements im Markup einer Webseite zu ermöglichen.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET Webparts-Steuerelemente</related>
      </Docs>
    </Member>
  </Members>
</Type>

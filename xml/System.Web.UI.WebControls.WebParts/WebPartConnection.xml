<Type Name="WebPartConnection" FullName="System.Web.UI.WebControls.WebParts.WebPartConnection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="15ed81e683f68ca609951a3aef430597f223a2d8" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39938212" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class WebPartConnection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WebPartConnection extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WebPartConnection" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebPartConnection sealed" />
  <TypeSignature Language="F#" Value="type WebPartConnection = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Web.UI.ParseChildren(true, "Transformers")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt ein Objekt bereit, das zwei <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />-Steuerelementen das Herstellen einer Verbindung ermöglicht. Diese Klasse kann nicht vererbt werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der Webparts-Steuerelementsatz, eine Verbindung ist eine Verknüpfung oder die Zuordnung zwischen zwei <xref:System.Web.UI.WebControls.WebParts.WebPart> (oder andere Benutzer) Steuerelemente, die ihnen ermöglicht, Daten gemeinsam nutzen. Diese Möglichkeit, Daten gemeinsam nutzen kann verbundene Steuerelemente in Methoden verwendet werden, die den Funktionsumfang der isolierten Steuerelemente überschreiten. Beispielsweise bietet Wenn ein Steuerelement stellt eine Postleitzahl-Daten bereit, und ein anderes Steuerelement diese Daten lesen kann, und geben Sie Wetter-Informationen, die basierend auf die Postleitzahl, klicken Sie dann die verbundene Funktionen der beiden Steuerelemente Mehrwert für Benutzer. Um dieses Beispiel erweitern, konnte auf andere Steuerelemente, die auch basierend auf eine Postleitzahl, z. B. ein Steuerelement mit Links zu lokalen Nachrichten Anzeigeinformationen erstellt werden, und alle diese Steuerelemente, die mit Postleitzahl-Daten arbeiten können konnte Freigeben von Daten mit dem einzelnen-Steuerelement, das bietet eine die Postleitzahl. Endbenutzer Webparts-Anwendungen erstellen und Verwalten von Verbindungen zwischen solchen kompatiblen Steuerelementen direkt über einen Webbrowser, über die standardverbindungen-Benutzeroberfläche (UI) von bereitgestellten der <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> Steuerelement oder über eine benutzerdefinierte Benutzeroberfläche bereitgestellt, indem ein Entwickler.  
  
 Dies <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Übersicht über die Klasse ist eine allgemeine-Anweisung mit der grundlegenden Details zum Erstellen einer Verbindung. Weitere Informationen über bestimmte Komponenten und Anforderungen, die zum Erstellen von Verbindungen, finden Sie unter [Web Parts Verbindungen Overview](http://msdn.microsoft.com/library/d98cfd0f-ebd6-4871-89d5-abbd2cdef67b), oder finden Sie unter den Verweisklassen und Codebeispiele, die in der folgenden Beschreibung erwähnt. Es gibt mehrere grundlegende Aspekte einer Webparts-Verbindung:  
  
-   Zwei <xref:System.Web.UI.WebControls.WebParts.WebPart> Steuerelemente. Alle Webparts-Verbindung besteht aus zwei Steuerelementen. Es ist möglich, dass ein Steuerelement zur Teilnahme an mehrere Verbindungen gleichzeitig, aber jede einzelne Verbindung besteht aus genau zwei Steuerelementen. Die Steuerelemente können direkt aus Ableiten der <xref:System.Web.UI.WebControls.WebParts.WebPart> Basisklasse, oder sie können andere Steuerelemente, einschließlich ASP.NET Steuerelemente, benutzerdefinierte Serversteuerelemente und Benutzersteuerelemente werden. Steuerelemente, die nicht von abgeleitet sind die <xref:System.Web.UI.WebControls.WebParts.WebPart> Klasse, wenn im platziert eine <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone, werden automatisch mit eingeschlossen sind eine <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> Objekt zur Laufzeit, die ihnen ermöglicht, die von erben die <xref:System.Web.UI.WebControls.WebParts.WebPart> Klassen- und als Laufzeit <xref:System.Web.UI.WebControls.WebParts.WebPart> -Steuerelemente.  
  
-   Steuerelemente, die sich im befinden <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> Zonen. Beide <xref:System.Web.UI.WebControls.WebParts.WebPart> Steuerelemente und einen anderen Typ von Serversteuerelement müssen, befinden sich in einem <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> Zone aus, um die Teilnahme an Webparts-Verbindungen (und die meisten anderen Webparts-Funktionen) können.  
  
-   Consumer und Anbieter. In jeder Webparts-Verbindung. Es gibt zwei Steuerelemente: ein Anbieter von Daten und einen Consumer der Daten. Der Anbieter stellt Daten für den Consumer bereit, über eine angegebene Rückrufmethode, die Daten in Form einer Schnittstelle zurückgibt. (Ein Beispiel für das Erstellen, und geben Sie die Callback-Methode, finden Sie im Abschnitt "Beispiel" dieses Themas.) Diese Callback-Methode wird als ein Anbieterverbindungspunkt bezeichnet. Die Details zu diesem Verbindungspunkt (die "einfachen" Namen, eine ID und den Typ der zurückgegebenen Schnittstelle) befinden sich einem <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Objekt, das Anbietersteuerelement zugeordnet. Der Consumer empfängt die Daten mit einer angegebenen Methode, die eine Instanz der Schnittstelle akzeptieren kann. Diese Methode wird als ein Consumer-Verbindungspunkt bezeichnet, und die Details des Verbindungspunkts (Name, ID und Typ der Schnittstelle) befinden sich einem <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Objekt zugeordnete Consumersteuerelement.  
  
-   Kompatible Steuerelemente oder ein gültiger Transformator. Für eine Verbindung funktioniert, Consumer und Anbieter müssen handeln kompatibel (d. h., dass die angegebene Verbindung Point-Methoden mit den gleichen Typ der Schnittstelle arbeiten können), oder es muss, werden eine <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> Objekt umwandeln des Typs von angeboten werden kann, die der Anbieter in einen Typ, der vom Consumer erkannt wird.  
  
-   Ein <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>-Objekt. Für eine Verbindung vorhanden sein kann, muss eine Instanz von der <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> -Klasse, die Verweise auf die Anbieter und Consumer-Steuerelemente, zusammen mit den Details ihrer Verbindungspunkte enthält. Wenn Anbieter und Consumer nicht kompatibel sind, und verwenden Sie stattdessen eine <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> Objekt, das eine Verbindung herzustellen, die Verbindung verweist auf ein Transformator.  
  
-   Mittel zum Herstellen der Verbindungs. Nach kompatible Consumer- und anbietersteuerelementen ordnungsgemäß mit Punkt Verbindungsmethoden entworfen und in einer Zone abgelegt wurden und ein <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Objekt verfügbar ist, die letzten erforderlichen der grundlegende Schritt zum Initiieren der Verbindung. Eine Möglichkeit, dies kann ist für Benutzer, um die Verbindung über die Benutzeroberfläche zu erstellen. Setzen Sie ein `<asp:connectionszone>` Element auf der Seite, und der andere erforderliche Komponenten für eine Verbindung sind vorhanden, zur Laufzeit, die ein Benutzer kann die Seite wechseln Sie in den Verbindungsanzeigemodus, klicken Sie auf Verbinden-Verb für das Verbenmenü von Anbieter oder Consumer , und eine Benutzeroberfläche für Verbindungen (basierend auf den <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> Steuerelement) wird angezeigt. Mithilfe dieser Benutzeroberfläche kann der Benutzer die Verbindung initiiert. Eine weitere Möglichkeit zum Initiieren der Verbindung ist jedoch auch programmgesteuert auf. In beiden Fällen, ob über die Benutzeroberfläche oder programmgesteuert auf die zugrunde liegende Methode zum Initiieren der Verbindung entspricht. Ruft die Anwendung die <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> Methode (oder die <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> Methode bei Verwendung eines Transformators) auf die <xref:System.Web.UI.WebControls.WebParts.WebPartManager> zu steuern, übergibt Sie an den Anbieter, Consumer und ihre jeweiligen Dienstverbindungspunkt-Objekten, und die Methode gibt eine <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> -Objekt.  
  
 Die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> -Klasse definiert ein Objekt, das die grundlegenden Details eine Verbindung zwischen zwei kapselt <xref:System.Web.UI.WebControls.WebParts.WebPart> Steuerelemente. Die Klasse wird fast ausschließlich Eigenschaften in Bezug auf die Details einer bestimmten Verbindung bestehen. Einige Eigenschaften beziehen sich auf das Consumer-Steuerelement in einer Verbindung. Die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> -Eigenschaft verweist auf das Consumer-Steuerelement selbst, und die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> -Eigenschaft verweist auf die ID des Consumers. Die <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> -Objekt, das die Details des Consumer Verbindungspunkts enthält, wird von des Consumers verwiesen <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> Eigenschaft. Die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> -Eigenschaft verweist auf die ID des dem <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Objekt. All diese Consumer-bezogene Verbindungseigenschaften müssen einen Wert zugewiesen werden, um eine Verbindung zu erstellen.  
  
 Die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> -Klasse verfügt auch über mehrere Eigenschaften, die sich auf das Anbietersteuerelement in einer Verbindung zu beziehen, und diese entsprechen den Eigenschaften für einen Consumer. Die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> Eigenschaft verweist auf den Anbieter selbst, während die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> Eigenschaft verweist, dessen ID bei. Die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> Eigenschaftenverweise der <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> -Objekt, und die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> -Eigenschaft verweist auf die ID der dem Anbieterverbindungspunkt.  
  
 Einige Eigenschaften beziehen sich auf den Zustand der Verbindung. Die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> Eigenschaft gibt an, ob die Verbindung aktiv (momentan Austauschen von Daten) "oder" inaktiv (weiterhin verbundenen jedoch nicht aktiv Daten gemeinsam genutzt). Die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> Eigenschaft gibt an, ob die Verbindung eine freigegebene (für alle Benutzer eine Seite verfügbar) oder einer benutzerspezifischen Verbindung und die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> Eigenschaft gibt an, ob das Steuerelement statisch ist (die im Markup Seite und so dauerhafte deklariert werden) oder Dynamische (programmgesteuert erstellt werden. Dies bedeutet, kann die It gelöscht werden).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Erstellen einer einfachen Verbindungs zwischen zwei <xref:System.Web.UI.WebControls.WebParts.WebPart> Steuerelemente. Im Beispiel wird die drei Möglichkeiten zum Erstellen einer Verbindungs veranschaulicht: deklarativ durch die Platzierung von Tags für die Verbindung im Markup der Webseite programmgesteuert, durch die die Verbindung in Code erstellen; und über die Benutzeroberfläche, indem Sie platzieren einen <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> Steuerelement auf der Seite, die Benutzern ermöglicht, eine Verbindung herzustellen.  
  
 Im Codebeispiel besteht aus vier Teilen:  
  
-   Ein Benutzersteuerelement, das Ihnen ermöglicht, ändern Sie die Webparts-Anzeigemodus auf einer Seite.  
  
-   Quellcode für eine Schnittstelle und die beiden <xref:System.Web.UI.WebControls.WebParts.WebPart> fungiert als Anbieter und Consumer für eine Verbindung steuert.  
  
-   Eine Webseite auf alle Steuerelemente hosten, und führen das Codebeispiel.  
  
-   Eine Erklärung, wie die Beispielseite ausgeführt werden soll.  
  
 Der erste Teil dieses Codebeispiels wird das Benutzersteuerelement, das Benutzern ermöglicht, den Anzeigemodus auf einer Webseite zu ändern. Den folgende Quellcode in einer ASCX-Datei speichern, die durch das Erteilen sie des Dateinamen, die zugewiesen ist, die `Src` Attribut der `Register` die Richtlinie für dieses Steuerelement, das am oberen Rand der Hostingwebseite ist. Weitere Informationen zu Modi und eine Beschreibung des Quellcodes in diesem Steuerelement anzuzeigen, finden Sie unter [Exemplarische Vorgehensweise: Ändern des Anzeigemodus auf einer Webparts-Seite](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 Der zweite Teil des Codebeispiels wird der Quellcode für die Benutzeroberfläche und Steuerelemente. Die Quelldatei enthält eine einfache Schnittstelle mit dem Namen `IZipCode`. Es gibt auch eine <xref:System.Web.UI.WebControls.WebParts.WebPart> Klasse mit dem Namen `ZipCodeWebPart` , implementiert die Schnittstelle, und wie das Anbietersteuerelement fungiert. Die `ProvideIZipCode` Methode ist die Callback-Methode, nur die Member der Schnittstelle implementiert. Die Methode gibt einfach eine Instanz der Schnittstelle zurück. Beachten Sie, die die Methode mit einem `ConnectionProvider` Attribut in seinen Metadaten. Dies ist der Mechanismus für die Methode als die Callback-Methode für den Anbieterverbindungspunkt identifiziert. Die andere <xref:System.Web.UI.WebControls.WebParts.WebPart> Klasse `WeatherWebPart`, und fungiert als Consumer für die Verbindung. Diese Klasse verfügt über eine Methode namens `GetZipCode` , die eine Instanz des ab der `IZipCode` Schnittstelle aus dem Anbietersteuerelement. Beachten Sie, dass diese Methode als die Consumer Verbindung mit gekennzeichnet ist eine `ConnectionConsumer` Attribut in seinen Metadaten.  
  
 Das Codebeispiel ausführen müssen Sie diesen Quellcode kompilieren. Sie können explizit kompilieren und die resultierende Assembly im Bin-Ordner der Website oder im globalen Assemblycache ablegen. Alternativ können Sie den Quellcode im Ordner "App_Code" Ihrer Website, ablegen, wo er zur Laufzeit dynamisch kompiliert wird. Dieses Codebeispiel verwendet die dynamische Kompilierung. Eine exemplarische Vorgehensweise, die zeigt, wie kompiliert wird, finden Sie unter [Exemplarische Vorgehensweise: Entwickeln und Verwenden eines benutzerdefinierten Webserver-Steuerelements](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/ZipCodeComponent.vb#2)]  
  
 Der dritte Teil des Codebeispiels wird die Webseite. Im oberen Bereich werden die `Register` Direktiven für die das Benutzersteuerelement und die benutzerdefinierte <xref:System.Web.UI.WebControls.WebParts.WebPart> Steuerelemente. Da dynamische Kompilierung der Steuerelemente im Beispiel wird davon ausgegangen wird, muss der Quellcode für die Steuerelemente in einem Unterordner "App_Code"; die `Register` -Tag auf der Seite verweist nur auf ein beliebiges Tagpräfix und den Namespace der Steuerelemente. Die benutzerdefinierte <xref:System.Web.UI.WebControls.WebParts.WebPart> Steuerelemente (der Anbieter und Consumer) werden deklariert, innerhalb der Webseite `<asp:webpartzone>` -Element, das im eine `<zonetemplate>` Element.  
  
 Die Seite bietet drei Möglichkeiten zum Herstellen einer Verbindung zwischen den benutzerdefinierten Steuerelementen. Die erste Methode ist deklarativ. Im Markup auf der Seite eine <`StaticConnections>` Element deklariert wird, und innerhalb der ist eine `<asp:WebPartConnections>` Element, mit den verschiedenen Consumer- und Anbietersteuerelement Details der Verbindung als Attribute angegeben. Dies ist eine Möglichkeit, eine Verbindung zu erstellen, deklarieren Sie es direkt auf der Webseite, insbesondere in den `<asp:WebPartManager>` Element. Aufgrund dieser statischen Verbindung wird eine Verbindung zwischen den beiden benutzerdefinierten Steuerelementen direkt beim ersten erstellt, die die Seite geladen wird.  
  
 Eine zweite Methode zum Herstellen einer Verbindung zwischen den Steuerelementen erfolgt über die `<asp:connectionszone>` Elements auf der Seite. Wenn ein Benutzer wechselt von einer Seite in den Verbindungsanzeigemodus zur Laufzeit, und klickt auf ein Verb Connect auf einem der benutzerdefinierten Steuerelemente, die `<asp:connectionszone>` Element rendert automatisch die Benutzeroberfläche zum Erstellen einer Verbindung.  
  
 Die Seite zeigt außerdem eine dritte Möglichkeit zum Herstellen eine Verbindung, handelt es sich jedoch auch programmgesteuert. In der `Button1_Click` -Methode, die der Code erstellt eine <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Objekt für die Provider-Steuerelement, und klicken Sie auf seiner Verbindungspunkts erläutert, durch den Aufruf ruft die <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> Methode. Sie führt eine ähnliche Aufgabe für das Consumersteuerelement Aufrufen der <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> Methode. Schließlich erstellt er die neue <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> -Objekt durch Aufrufen der <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> Methode für die <xref:System.Web.UI.WebControls.WebParts.WebPartManager> Steuerelement.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Laden Sie die Webseite in einem Browser, von die erste Verbindung ist bereits vorhanden ist, da in der er deklariert ist die `<StaticConnections>` Element. Geben Sie Text in die **ZIP Code Provider** -Steuerelement, und es wird im Consumersteuerelement angezeigt werden. Trennen Sie die beiden Steuerelemente. Mithilfe der **Anzeigemodus** Dropdown-Steuerelement, ändern Sie die Seite, um den Anzeigemodus eine Verbindung herstellen. Klicken Sie auf das Verbenmenü (dargestellt durch einen Pfeil in der Titelleiste) für jede der <xref:System.Web.UI.WebControls.WebParts.WebPart> steuert, und beachten Sie, dass jede verfügt über eine **Connect** Option. Dies ist eine Connect-Verb, das Verbenmenü angezeigt wird, nur, wenn die Seite in der Connect-Modus ist. Klicken Sie auf der Connect-Verb für eines der Steuerelemente und die Verbindung vom bereitgestellten Benutzeroberfläche der <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> -Steuerelement angezeigt wird. Klicken Sie auf die **trennen** Schaltfläche, um die statische Verbindung zwischen den Steuerelementen zu beenden. Verwenden der **Anzeigemodus** Steuerelement in den Durchsuchen-Modus zurück. Versuchen Sie, geben Sie neuen Text in den Anbieter erneut, und beachten Sie, dass da die Steuerelemente nicht verbunden sind, nicht der Text im Consumersteuerelement aktualisieren.  
  
 Verwenden Sie anschließend die gleiche Methode wie oben beschrieben, die in den Verbindungsanzeigemodus erneut wechseln. Klicken Sie auf Verbinden-Verb für eines der Steuerelemente. Klicken Sie auf die **erstellen Sie eine Verbindung** verknüpfen, und verwenden Sie die Benutzeroberfläche von bereitgestellten der <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> Steuerelement, um eine Verbindung zwischen den Steuerelementen zu erstellen. Dies ist die zweite Methode zum Erstellen einer Verbindung. Beachten Sie, dass, sobald die Verbindung gebildet wird, die letzte Zeichenfolge in das Anbietersteuerelement eingegebene (die angezeigt werden, da die Steuerelemente getrennt wurden nicht erfüllt) plötzlich im Consumer, angezeigt werden, da die Verbindung neu erstellt wurde. Klicken Sie auf die **trennen** Schaltfläche, um die aktuelle Verbindung zu beenden, die Sie gerade erstellt haben. Geben Sie die Seite, um den Durchsuchen-Modus zurück. Geben Sie die neuen Text in den Anbieter aus, um zu veranschaulichen, dass der Text nicht aktualisiert wird und die Steuerelemente wieder getrennt werden.  
  
 Geben Sie die Seite, um den Anzeigemodus verbinden zurück. Anstatt auf ein Verbindungsverb, klicken Sie auf die **Connect WebPart Controls** Schaltfläche, die die dritte Methode zum Erstellen einer Verbindungs veranschaulicht. Dieser Ansatz stellt eine Verbindung her die Steuerelemente programmgesteuert in einem einfachen Schritt ohne Verwenden der <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> Steuerelement. Beachten Sie, wie die Verbindung erstellt wird, die letzte Zeichenfolge eingegebene im Anbieter plötzlich in das Consumer-Steuerelement angezeigt wird.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionsZone" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />
    <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebPartConnection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebPartConnection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.%23ctor%2A> Konstruktor ist öffentlich, sodass der ASP.NET-Parser eine Instanz erstellen kann, wenn eine Verbindung im Markup einer Webseite deklariert ist, dieser Konstruktor soll nicht in Entwicklercode verwendet werden.  
  
 Wenn Sie erstellen möchten eine <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Objekt programmgesteuert, sollten Sie verwenden die <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=nameWithType> oder <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=nameWithType> Methode bereitgestellt wird, der <xref:System.Web.UI.WebControls.WebParts.WebPartManager> Steuerelement. Diese Methoden verarbeiten die vielen Details zum Herstellen eine Verbindung und Zurückgeben einer <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Objekt.  
  
 Die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.%23ctor%2A> Konstruktor für die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Klasse legt die Werte fest. die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> und <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> Eigenschaften `true`. Daher der Standardzustand einer neuen Verbindung statisch (d. h., dass sie in das Markup der Webseite deklariert ist) und shared (für alle Benutzer der Seite sichtbar). Dies ist der Fall sein, wenn Sie eine Verbindung in einem typischen Szenario hat hinzufügen, indem Sie deklarieren die Verbindung im Markup der Seite mit einer `<asp:webpartconnection>` Element. Allerdings wird eine Verbindung in anderen Fällen unterschiedliche Werte für diese Eigenschaften verfügen. Beispielsweise wird beim Hinzufügen einer Verbindungs programmgesteuert durch Erstellen das Verbindungsobjekt im Code und der Benutzer wird die Seite in den Standardpersonalisierungsbereich des Benutzers anzeigen, die Verbindung als ein pro-User(visible only to the specific user) dynamisch und erstellt die Verbindung.  
  
> [!NOTE]
>  Die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> und <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> Eigenschaften sind schreibgeschützt und Festlegen dieser Eigenschaften, die bestimmen, die Art der Verbindung werden intern von der <xref:System.Web.UI.WebControls.WebParts.WebPartManager> Steuerelement, je nachdem, wie eine Verbindung erstellt wird (deklarativ im Seitenmarkup, oder programmgesteuert über Ihren Code oder die Benutzeroberfläche).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)" />
      </Docs>
    </Member>
    <Member MemberName="Consumer">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPart Consumer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPart Consumer" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Consumer As WebPart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPart ^ Consumer { System::Web::UI::WebControls::WebParts::WebPart ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Consumer : System.Web.UI.WebControls.WebParts.WebPart" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />-Objekt ab, das in einer Verbindung als Consumersteuerelement fungiert.</summary>
        <value>Ein <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> stellt das Webparts-Steuerelement dar, das in einer Verbindung als Consumer fungiert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Alle Webparts-Verbindung besteht aus zwei Steuerelemente, die Daten gemeinsam nutzen. Ein Steuerelement fungiert als Anbieter von Daten und das andere Steuerelement fungiert als Consumer, die Daten vom Anbieter empfangen und verarbeitet. Die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> Eigenschaft ruft einen Verweis auf die <xref:System.Web.UI.WebControls.WebParts.WebPart> steuern als Consumer in einer verbindungsbeziehung fungiert.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, die programmgesteuerte Verwendung der <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> Eigenschaft.  
  
 Im Codebeispiel besteht aus vier Teilen:  
  
-   Ein Benutzersteuerelement, das Ihnen ermöglicht, ändern Sie die Webparts-Anzeigemodus auf einer Seite.  
  
-   Quellcode für eine Schnittstelle und die beiden <xref:System.Web.UI.WebControls.WebParts.WebPart> fungiert als Anbieter und Consumer für eine Verbindung steuert.  
  
-   Eine Webseite auf alle Steuerelemente hosten, und führen das Codebeispiel.  
  
-   Eine Erklärung, wie die Beispielseite ausgeführt werden soll.  
  
 Der erste Teil dieses Codebeispiels wird das Benutzersteuerelement, das Benutzern ermöglicht, den Anzeigemodus auf einer Webseite zu ändern. Den folgende Quellcode in einer ASCX-Datei speichern, die durch das Erteilen sie des Dateinamen, die zugewiesen ist, die `Src` Attribut der `Register` die Richtlinie für dieses Steuerelement, das am oberen Rand der Hostingwebseite ist. Weitere Informationen zu Modi und eine Beschreibung des Quellcodes in diesem Steuerelement anzuzeigen, finden Sie unter [Exemplarische Vorgehensweise: Ändern des Anzeigemodus auf einer Webparts-Seite](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Consumer#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_Consumer#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/DisplayModeMenuVB.ascx#6)]  
  
 Der zweite Teil des Codebeispiels wird der Quellcode für die beiden <xref:System.Web.UI.WebControls.WebParts.WebPart> Steuerelemente, die als Consumer und der Anbieter für die Verbindung, und eine Schnittstelle für die Verbindungspunkte dienen. Das Codebeispiel ausführen müssen Sie diesen Quellcode kompilieren. Sie können explizit kompilieren und die resultierende Assembly im Bin-Ordner der Website oder im globalen Assemblycache ablegen. Alternativ können Sie den Quellcode im Ordner "App_Code" Ihrer Website, ablegen, wo er zur Laufzeit dynamisch kompiliert wird. Dieses Codebeispiel verwendet die dynamische Kompilierung. Eine exemplarische Vorgehensweise, die zeigt, wie kompiliert wird, finden Sie unter [Exemplarische Vorgehensweise: Entwickeln und Verwenden eines benutzerdefinierten Webserver-Steuerelements](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_Consumer#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Consumer#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/ZipCodeComponent.vb#2)]  
  
 Der dritte Teil des Codebeispiels wird der Code für die Webseite, die die Steuerelemente hostet, und veranschaulicht die Verwendung der <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> Eigenschaft. Am oberen Rand der Seite werden die `Register` Direktiven für die das Benutzersteuerelement und die benutzerdefinierten Steuerelemente. Da in diesem Beispiel wird die dynamische Kompilierung, verwendet der `Register` Richtlinie für die Quelldatei muss nicht auf den Namen einer Assembly zu verweisen; sie enthält nur ein beliebiges Tagpräfix und den Namespace der Steuerelemente. In der `Button2_Click` -Methode, der Code greift auf das Verbindungsobjekt, über die <xref:System.Web.UI.WebControls.WebParts.WebPartManager> steuern, und ruft einen Verweis auf das Consumer-Steuerelement.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Consumer#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Consumer#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Nachdem Sie auf die Seite in einem Browser laden, verwenden Sie die **Anzeigemodus** Dropdown-Listenfeld-Steuerelement auf die Seite verbinden-Modus zu wechseln. Klicken Sie auf das Verbenmenü (dargestellt durch den Pfeil nach unten in der Titelleiste) eines der <xref:System.Web.UI.WebControls.WebParts.WebPart> steuert, und klicken Sie auf der Connect-Verb. Verwenden der **Connect WebPart Controls** Schaltfläche oder die angegebene Verbindungs-Benutzeroberfläche (UI), um eine Verbindung zwischen den beiden Steuerelementen zu erstellen. Klicken Sie auf die **Anzeigeinformationen für Consumer** Schaltfläche, um den Code auszuführen, das veranschaulicht, die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> Eigenschaft.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die Länge der <see cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" />-Eigenschaft ist 0 (null).</exception>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
      </Docs>
    </Member>
    <Member MemberName="ConsumerConnectionPoint">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint ConsumerConnectionPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint ConsumerConnectionPoint" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ConsumerConnectionPoint As ConsumerConnectionPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::ConsumerConnectionPoint ^ ConsumerConnectionPoint { System::Web::UI::WebControls::WebParts::ConsumerConnectionPoint ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ConsumerConnectionPoint : System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Objekt ab, das als Verbindungspunkt für ein Steuerelement fungiert, das als Consumer in einer Verbindung fungiert.</summary>
        <value>Ein <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />, der dem Consumersteuerelement in einer Verbindung zugeordnet ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Einer der erforderlichen Schritte zum Erstellen einer Verbindung zwischen zwei <xref:System.Web.UI.WebControls.WebParts.WebPart> Steuerelemente ist das Verbindungspunkte für jedes Steuerelement zu erstellen. Consumer-Verbindungspunkts ist ein Objekt, das die Informationen zum Herstellen einer Verbindung mit das Steuerelement, das als Consumer fungiert enthält. Im Quellcode des Consumers eine der Methoden muss identifiziert werden, mit der `ConnectionConsumer` Attribut. Die <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> -Objekt, das ein Consumer-Steuerelement zugeordnet ist enthält Details über die Methode und das Attribut, einschließlich einer ID für die Methode, einen Anzeigenamen für die Verwendung in der Benutzeroberfläche (UI), und welche Art von Schnittstelle die Methode abrufen kann. Dieser Satz von Informationen zu den Consumer, die Methode zum Herstellen von Verbindungen und den Typ der Schnittstelle, die sie versteht, bildet zusammen einen Consumer-Verbindungspunkt.  
  
 Standardmäßig eine <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Objekt kann nur eine Verbindung <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Objekt zu einem Zeitpunkt. Ein Consumer kann mehrere Methoden, die als mögliche Consumerverbindungspunkten identifiziert haben, aber ein Consumer nur teilnehmen kann eine Verbindung als Consumer (daher nur eine der Consumer die Verbindungspunkte aktiv sein kann) zu einem Zeitpunkt. Im Gegensatz dazu ein <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> können eine Verbindung herstellen, um eine beliebige Anzahl von <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Objekte. Dieses Standardverhalten kann geändert werden, durch Überschreiben der <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A> Eigenschaft für die <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> Attribut.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, die programmgesteuerte Verwendung der <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> Eigenschaft.  
  
 Das Beispiel besteht aus vier Teilen:  
  
-   Ein Benutzersteuerelement, das Ihnen ermöglicht, ändern Sie die Webparts-Anzeigemodus auf einer Seite.  
  
-   Quellcode für eine Schnittstelle und die beiden <xref:System.Web.UI.WebControls.WebParts.WebPart> fungiert als Anbieter und Consumer für eine Verbindung steuert.  
  
-   Eine Webseite auf alle Steuerelemente hosten, und führen das Codebeispiel.  
  
-   Eine Erklärung, wie die Beispielseite ausgeführt werden soll.  
  
 Der erste Teil dieses Codebeispiels wird das Benutzersteuerelement, das Benutzern ermöglicht, den Anzeigemodus auf einer Webseite zu ändern. Den folgende Quellcode in einer ASCX-Datei speichern, die durch das Erteilen sie des Dateinamen, die zugewiesen ist, die `Src` Attribut der `Register` die Richtlinie für dieses Steuerelement, das am oberen Rand der Hostingwebseite ist. Weitere Informationen zu Modi und eine Beschreibung des Quellcodes in diesem Steuerelement anzuzeigen, finden Sie unter [Exemplarische Vorgehensweise: Ändern des Anzeigemodus auf einer Webparts-Seite](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/DisplayModeMenuVB.ascx#6)]  
  
 Der zweite Teil des Codebeispiels wird der Quellcode für die beiden <xref:System.Web.UI.WebControls.WebParts.WebPart> Steuerelemente, die als Consumer und der Anbieter für die Verbindung, und eine Schnittstelle für die Verbindungspunkte dienen. Das Codebeispiel ausführen müssen Sie diesen Quellcode kompilieren. Sie können explizit kompilieren und die resultierende Assembly im Bin-Ordner der Website oder im globalen Assemblycache ablegen. Alternativ können Sie den Quellcode im Ordner "App_Code" Ihrer Website, ablegen, wo er zur Laufzeit dynamisch kompiliert wird. Dieses Codebeispiel verwendet die dynamische Kompilierung. Eine exemplarische Vorgehensweise, die zeigt, wie kompiliert wird, finden Sie unter [Exemplarische Vorgehensweise: Entwickeln und Verwenden eines benutzerdefinierten Webserver-Steuerelements](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/ZipCodeComponent.vb#2)]  
  
 Der dritte Teil des Codebeispiels wird der Code für die Webseite, die die Steuerelemente hostet, und veranschaulicht die Verwendung der <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> Eigenschaft. In der `Button1_Click` -Methode, alle Objekte, die zum Herstellen einer Verbindung erforderlich werden erstellt, einschließlich einer <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Objekt. Diese Objekte werden zum Übergeben der <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> Methode, um die Verbindung zu erstellen. In der `Button2_Click` -Methode, die der Code greift auf die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> -Eigenschaft und zeigt einige Details der Verbindung zeigen.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Nachdem Sie auf die Seite in einem Browser laden, verwenden Sie die **Anzeigemodus** Dropdown-Listenfeld-Steuerelement auf die Seite verbinden-Modus zu wechseln. Klicken Sie auf das Verbenmenü (dargestellt durch den Pfeil nach unten in der Titelleiste) eines der <xref:System.Web.UI.WebControls.WebParts.WebPart> steuert, und klicken Sie auf der Connect-Verb. Verwenden der **Connect WebPart Controls** Schaltfläche oder der angegebenen Verbindung UI, um eine Verbindung zwischen den beiden Steuerelementen zu erstellen. Klicken Sie auf die **ConnectionPoint Details** Schaltfläche, um den Code auszuführen, das veranschaulicht, die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> Eigenschaft.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
      </Docs>
    </Member>
    <Member MemberName="ConsumerConnectionPointID">
      <MemberSignature Language="C#" Value="public string ConsumerConnectionPointID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConsumerConnectionPointID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID" />
      <MemberSignature Language="VB.NET" Value="Public Property ConsumerConnectionPointID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ConsumerConnectionPointID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConsumerConnectionPointID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.DefaultValue("default")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Eigenschaftswert für eine Verbindung ab, der auf die ID des Objekts verweist, das als Consumerverbindungspunkt für diese Verbindung fungiert, oder legt diesen fest.</summary>
        <value>Eine Zeichenfolge, die die ID für den Consumerverbindungspunkt enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Für eine statische Verbindung, die im Markup einer Webseite deklariert wird, können Entwickler angeben, welche Consumer-Verbindungspunkt für die Verbindung verwendet wird durch Zuweisen eines Werts, der `ConsumerConnectionPointID` -Attribut für die `<asp:webpartconnection>` Element. Wenn ein Wert nicht in das Attribut zugewiesen wird die <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> Eigenschaftswert verwendet wird.  
  
 Bei der Erstellung von dynamischer (programmgesteuerter) Verbindungen normalerweise Sie sollte nicht legen Sie den Wert von der <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> Eigenschaft. Sie können einfach Aufrufen der <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> Methode für die <xref:System.Web.UI.WebControls.WebParts.WebPartManager> steuern, an sie übergibt der Consumer und der Consumerverbindungspunkt point-Objekte (zusammen mit den anderen erforderlichen Parameter), und diese Methode bestimmt die richtige ID für die Consumer Verbindung Zeigen Sie. Auf ähnliche Weise, wenn Sie die Verbindung trennen, Sie erreichen die <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> Methode, ohne dass die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> -Eigenschaftswert.  
  
> [!NOTE]
>  Die ID des Consumer Verbindungspunkt kann bestimmt werden, wenn Sie festlegen, eine <xref:System.Web.UI.WebControls.WebParts.WebPart> oder sonstiges Serversteuerelement als Consumer. Sie müssen eine Methode in der Consumer identifizieren, die eine Instanz einer Schnittstelle zur Verfügung gestellt, indem Sie entweder einem Anbietersteuerelement oder ein Transformator abruft. Um die Methode zu identifizieren, markieren Sie sie mit der `ConnectionConsumer` Code-Attribut. Wenn Sie dieses Attribut hinzufügen, können Sie einen optionale Zeichenfolge-Value-Parameter, die als ID für der Consumers dient hinzufügen <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Objekt. Wenn Sie einen Wert für den optionalen ID-Parameter angeben, wird dieser Wert den Wert des der <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> -Eigenschaft für die Verbindung. Wenn Sie keinen ID-Wert angeben der <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> Eigenschaftswert verwendet wird.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, die deklarative und die programmgesteuerte Verwendung von der <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> Eigenschaft.  
  
 Das Beispiel besteht aus vier Teilen:  
  
-   Ein Benutzersteuerelement, das Ihnen ermöglicht, ändern Sie die Webparts-Anzeigemodus auf einer Seite.  
  
-   Quellcode für eine Schnittstelle und die beiden <xref:System.Web.UI.WebControls.WebParts.WebPart> fungiert als Anbieter und Consumer für eine Verbindung steuert.  
  
-   Eine Webseite auf alle Steuerelemente hosten, und führen das Codebeispiel.  
  
-   Eine Erklärung, wie die Beispielseite ausgeführt werden soll.  
  
 Der erste Teil dieses Codebeispiels wird das Benutzersteuerelement, das Benutzern ermöglicht, den Anzeigemodus auf einer Webseite zu ändern. Den folgende Quellcode in einer ASCX-Datei speichern, die durch das Erteilen sie des Dateinamen, die zugewiesen ist, die `Src` Attribut der `Register` die Richtlinie für dieses Steuerelement, das am oberen Rand der Hostingwebseite ist. Weitere Informationen zu Modi und eine Beschreibung des Quellcodes in diesem Steuerelement anzuzeigen, finden Sie unter [Exemplarische Vorgehensweise: Ändern des Anzeigemodus auf einer Webparts-Seite](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/DisplayModeMenuVB.ascx#6)]  
  
 Der zweite Teil des Codebeispiels wird der Quellcode für die Schnittstelle und der Consumer- und anbietersteuerelementen. Das Codebeispiel ausführen müssen Sie diesen Quellcode kompilieren. Sie können explizit kompilieren und die resultierende Assembly im Bin-Ordner der Website oder im globalen Assemblycache ablegen. Alternativ können Sie den Quellcode im Ordner "App_Code" Ihrer Website, ablegen, wo er zur Laufzeit dynamisch kompiliert wird. Dieses Codebeispiel verwendet die dynamische Kompilierung. Eine exemplarische Vorgehensweise, die zeigt, wie kompiliert wird, finden Sie unter [Exemplarische Vorgehensweise: Entwickeln und Verwenden eines benutzerdefinierten Webserver-Steuerelements](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/ZipCodeComponent.vb#2)]  
  
 Der dritte Teil des Codebeispiels wird die Webseite. Beachten Sie, dass eine Verbindung im Seitenmarkup, deklariert wird mithilfe der `<StaticConnections>` und `<asp:WebPartsConnection>` Elemente. Die Verbindungsdeklaration enthält die erforderlichen `ConsumerConnectionPointID` Attribut. Eine zweite Methode zum Herstellen der Verbindung angezeigt wird, der `Button1_Click` -Methode, in dem der Code erstellt eine neue Verbindung mit den Verbindungspunkt, der in das Consumer-Steuerelement definiert. Klicken Sie auf die `Button2_Click` -Methode, die der Code greift auf die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> Eigenschaft.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Nachdem Sie die Seite in einem Browser laden, ist bereits eine Verbindung aufgrund der statischen Verbindung deklariert, die auf der Seite vorhanden. Geben Sie Text im Anbietersteuerelement, und beachten Sie, dass der Consumer aufgrund der Verbindung angezeigt wird. Trennen Sie die Steuerelemente an. Mithilfe der **Anzeigemodus** Dropdown-Listensteuerelement, schalten Sie den Verbindungsmodus. Klicken Sie auf das Verbenmenü (dargestellt durch den Pfeil nach unten in der Titelleiste) eines der <xref:System.Web.UI.WebControls.WebParts.WebPart> steuert, und klicken Sie auf der Connect-Verb. Klicken Sie auf die **trennen** Schaltfläche. Verwenden der **Connect WebPart Controls** Schaltfläche, um eine Verbindung zwischen den beiden Steuerelementen neu zu erstellen. Klicken Sie auf die **ConnectionPoint Details** Schaltfläche, um den Code auszuführen, die greift auf die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> -Eigenschaftswert. Der Wert wird in eine Bezeichnung unterhalb der Steuerelemente geschrieben.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
      </Docs>
    </Member>
    <Member MemberName="ConsumerID">
      <MemberSignature Language="C#" Value="public string ConsumerID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConsumerID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" />
      <MemberSignature Language="VB.NET" Value="Public Property ConsumerID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ConsumerID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConsumerID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Eigenschaftswert für eine Verbindung ab, der auf die ID des <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />-Steuerelements verweist, das als Consumer für diese Verbindung fungiert, oder legt diesen fest.</summary>
        <value>Eine Zeichenfolge, die die ID des Steuerelements enthält, das in einer Verbindung als Consumer fungiert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> Eigenschaftswert ist erforderlich, wenn Sie eine Verbindung zwischen erstellen <xref:System.Web.UI.WebControls.WebParts.WebPart> Steuerelemente. Wenn ein Wert der Eigenschaft nicht zugewiesen ist, eine Ausnahme wird ausgelöst, wenn die <xref:System.Web.UI.WebControls.WebParts.WebPartManager> -Steuerelement versucht, die Verbindung zu aktivieren.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, die deklarative und die programmgesteuerte Verwendung von der <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> Eigenschaft.  
  
 Das Beispiel besteht aus vier Teilen:  
  
-   Ein Benutzersteuerelement, das Ihnen ermöglicht, ändern Sie die Webparts-Anzeigemodus auf einer Seite.  
  
-   Quellcode für eine Schnittstelle und die beiden <xref:System.Web.UI.WebControls.WebParts.WebPart> fungiert als Anbieter und Consumer für eine Verbindung steuert.  
  
-   Eine Webseite auf alle Steuerelemente hosten, und führen das Codebeispiel.  
  
-   Eine Erklärung, wie die Beispielseite ausgeführt werden soll.  
  
 Der erste Teil dieses Codebeispiels wird das Benutzersteuerelement, das Benutzern ermöglicht, den Anzeigemodus auf einer Webseite zu ändern. Den folgende Quellcode in einer ASCX-Datei speichern, die durch das Erteilen sie des Dateinamen, die zugewiesen ist, die `Src` Attribut der `Register` die Richtlinie für dieses Steuerelement, das am oberen Rand der Hostingwebseite ist. Weitere Informationen zu Modi und eine Beschreibung des Quellcodes in diesem Steuerelement anzuzeigen, finden Sie unter [Exemplarische Vorgehensweise: Ändern des Anzeigemodus auf einer Webparts-Seite](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/DisplayModeMenuVB.ascx#6)]  
  
 Der zweite Teil des Codebeispiels wird der Quellcode für die Schnittstelle und der Consumer- und anbietersteuerelementen. Das Codebeispiel ausführen müssen Sie diesen Quellcode kompilieren. Sie können explizit kompilieren und die resultierende Assembly im Bin-Ordner der Website oder im globalen Assemblycache ablegen. Alternativ können Sie den Quellcode im Ordner "App_Code" Ihrer Website, ablegen, wo er zur Laufzeit dynamisch kompiliert wird. Dieses Codebeispiel verwendet die dynamische Kompilierung. Eine exemplarische Vorgehensweise, die zeigt, wie kompiliert wird, finden Sie unter [Exemplarische Vorgehensweise: Entwickeln und Verwenden eines benutzerdefinierten Webserver-Steuerelements](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/ZipCodeComponent.vb#2)]  
  
 Der dritte Teil des Codebeispiels wird die Webseite. Beachten Sie, dass eine Verbindung im Seitenmarkup, deklariert wird mithilfe der `<StaticConnections>` und `<asp:WebPartsConnection>` Elemente. Die Verbindungsdeklaration enthält die erforderlichen `ConsumerID` Attribut. Eine zweite Methode zum Herstellen der Verbindung angezeigt wird, der `Button1_Click` -Methode, in dem der Code erstellt eine neue Verbindung mit den Verbindungspunkt, der in das Consumer-Steuerelement definiert. Klicken Sie auf die `Button2_Click` -Methode, der Code greift auf den Wert des der <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> Eigenschaft und in eine Bezeichnung angezeigt wird.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Nachdem Sie die Seite in einem Browser laden, ist bereits eine Verbindung aufgrund der statischen Verbindung deklariert, die auf der Seite vorhanden. Geben Sie Text im Anbietersteuerelement, und beachten Sie, dass der Consumer aufgrund der Verbindung angezeigt wird. Trennen Sie die Steuerelemente an. Mithilfe der **Anzeigemodus** Dropdown-Listensteuerelement, schalten Sie den Verbindungsmodus. Klicken Sie auf das Verbenmenü (dargestellt durch den Pfeil nach unten in der Titelleiste) eines der <xref:System.Web.UI.WebControls.WebParts.WebPart> steuert, und klicken Sie auf der Connect-Verb. Klicken Sie auf die **trennen** Schaltfläche. Verwenden der **Connect WebPart Controls** Schaltfläche, um eine Verbindung zwischen den beiden Steuerelementen neu zu erstellen. Klicken Sie auf die **Consumer Details** Schaltfläche, um den Code auszuführen, die greift auf die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> -Eigenschaftswert.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
      </Docs>
    </Member>
    <Member MemberName="ID">
      <MemberSignature Language="C#" Value="public string ID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ID" />
      <MemberSignature Language="VB.NET" Value="Public Property ID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die ID eines <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />-Objekts ab oder legt diese fest.</summary>
        <value>Eine Zeichenfolge, die die ID der <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jede <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Objekt verfügt über einen eindeutigen Wert zugewiesen wird, um die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> Eigenschaft. Dadurch wird sichergestellt, dass es eine Möglichkeit, mehrere Verbindungen zu unterscheiden.  
  
 Bei der Erstellung einer Standleitung durch Deklarieren einer `<asp:webpartconnection>` Element in einer Webseite, und Sie weisen einen Wert, der nicht der `ID` -Attribut für die Verbindung, die eine Ausnahme wird ausgelöst, wenn die <xref:System.Web.UI.WebControls.WebParts.WebPartManager> -Steuerelement versucht, die Verbindung zu aktivieren.  
  
 Wenn die <xref:System.Web.UI.WebControls.WebParts.WebPartManager> Steuerelement erstellt eine neue dynamische Verbindung, ruft es die <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID%2A> Methode, um eine eindeutige ID für die Verbindung zu generieren.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, die deklarative und die programmgesteuerte Verwendung von der <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> Eigenschaft.  
  
 Das Beispiel besteht aus vier Teilen:  
  
-   Ein Benutzersteuerelement, das Ihnen ermöglicht, ändern Sie die Webparts-Anzeigemodus auf einer Seite.  
  
-   Quellcode für eine Schnittstelle und die beiden <xref:System.Web.UI.WebControls.WebParts.WebPart> fungiert als Anbieter und Consumer für eine Verbindung steuert.  
  
-   Eine Webseite auf alle Steuerelemente hosten, und führen das Codebeispiel.  
  
-   Eine Erklärung, wie die Beispielseite ausgeführt werden soll.  
  
 Der erste Teil dieses Codebeispiels wird das Benutzersteuerelement, das Benutzern ermöglicht, den Anzeigemodus auf einer Webseite zu ändern. Den folgende Quellcode in einer ASCX-Datei speichern, die durch das Erteilen sie des Dateinamen, die zugewiesen ist, die `Src` Attribut der `Register` die Richtlinie für dieses Steuerelement, das am oberen Rand der Hostingwebseite ist. Weitere Informationen zu Modi und eine Beschreibung des Quellcodes in diesem Steuerelement anzuzeigen, finden Sie unter [Exemplarische Vorgehensweise: Ändern des Anzeigemodus auf einer Webparts-Seite](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/DisplayModeMenuVB.ascx#6)]  
  
 Der zweite Teil des Codebeispiels wird der Quellcode für die Schnittstelle und der Consumer- und anbietersteuerelementen. Das Codebeispiel ausführen müssen Sie diesen Quellcode kompilieren. Sie können explizit kompilieren und die resultierende Assembly im Bin-Ordner der Website oder im globalen Assemblycache ablegen. Alternativ können Sie den Quellcode im Ordner "App_Code" Ihrer Website, ablegen, wo er zur Laufzeit dynamisch kompiliert wird. Dieses Codebeispiel verwendet die dynamische Kompilierung. Eine exemplarische Vorgehensweise, die zeigt, wie kompiliert wird, finden Sie unter [Exemplarische Vorgehensweise: Entwickeln und Verwenden eines benutzerdefinierten Webserver-Steuerelements](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/ZipCodeComponent.vb#2)]  
  
 Der dritte Teil des Codebeispiels wird die Webseite. Beachten Sie, dass eine Verbindung im Seitenmarkup, deklariert wird mithilfe der `<StaticConnections>` und `<asp:WebPartsConnection>` Elemente. Die Verbindungsdeklaration enthält die erforderlichen `ID` Attribut. Eine zweite Methode zum Herstellen der Verbindung angezeigt wird, der `Button1_Click` -Methode, in dem der Code erstellt eine neue Verbindung mit den Verbindungspunkt, der in das Consumer-Steuerelement definiert. Hier ist die ID-Eigenschaft ist nicht erforderlich, da die Verbindung dynamisch ist und die <xref:System.Web.UI.WebControls.WebParts.WebPartManager> Steuerelement die Verbindung eine ID zuweist. In der `Button2_Click` -Methode, der Code greift auf den Wert des der <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> Eigenschaft und in eine Bezeichnung angezeigt wird.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Nachdem Sie die Seite in einem Browser laden, ist bereits eine Verbindung aufgrund der statischen Verbindung deklariert, die auf der Seite vorhanden. Geben Sie Text im Anbietersteuerelement, und beachten Sie, dass der Consumer aufgrund der Verbindung angezeigt wird. Trennen Sie die Steuerelemente an. Mithilfe der **Anzeigemodus** Dropdown-Listensteuerelement, schalten Sie den Verbindungsmodus. Klicken Sie auf das Verbenmenü (dargestellt durch den Pfeil nach unten in der Titelleiste) eines der <xref:System.Web.UI.WebControls.WebParts.WebPart> steuert, und klicken Sie auf der Connect-Verb. Klicken Sie auf die **trennen** Schaltfläche. Verwenden der **Connect WebPart Controls** Schaltfläche, um eine Verbindung zwischen den beiden Steuerelementen neu zu erstellen. Klicken Sie auf die **Verbindungsdetails** Schaltfläche, um den Code auszuführen, die greift auf die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> -Eigenschaftswert.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsActive">
      <MemberSignature Language="C#" Value="public bool IsActive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsActive" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsActive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsActive { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsActive : bool" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob ein <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />-Objekt derzeit eingerichtet und in der Lage ist, Daten zwischen seinem Anbieter- und seinem Consumersteuerelement auszutauschen.</summary>
        <value>
          <see langword="true" />, wenn die Verbindung aktiv ist, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> Eigenschaft gibt einen Zustand einer <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Objekt. Wenn die Verbindung in diesem Zustand ist, werden die Anbieter und Consumer-Steuerelemente in der Verbindung kommuniziert und Austauschen von Daten über eine gemeinsame Schnittstelle oder ein <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> Objekt.  
  
 Wenn ein Benutzer auf eine gerenderte Seite, die eine Verbindung im normalen Durchsuchen-Modus enthält anzeigt, ist die Verbindung in der Regel aktiv, (es sei denn, es konnte nicht aktiviert werden, aufgrund eines Konflikts oder ein anderes Problem, wenn die Seite geladen werden). In den frühen Phasen des Lebenszyklus der Seite und der Steuerelemente, die der Eigenschaftswert ist `false`. Die Verbindung aktiviert ist, direkt nach der <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> Ereignis auf der <xref:System.Web.UI.WebControls.WebParts.WebPartManager> Steuerelement ausgelöst wird. Insbesondere wird die Verbindung aktiviert, nachdem der Consumer eine Instanz der angegebenen Schnittstelle vom Anbieter abgerufen hat oder ein <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> Objekt.  
  
 Es ist hilfreich zu wissen, ob eine Verbindung unter Umständen aktiv ist, wobei möglicherweise Konflikte oder Probleme aufgrund von mehreren Verbindungen auf einer Seite. Angenommen, es ist eine Art von Konflikt zwischen zwei Verbindungen die <xref:System.Web.UI.WebControls.WebParts.WebPartManager> Steuerelement hat die Möglichkeit, eine der Verbindungen nicht zu aktivieren, den Konflikt zu vermeiden.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, mit der <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> Eigenschaft.  
  
 Das Beispiel besteht aus drei Teilen:  
  
-   Quellcode für eine Schnittstelle und die beiden <xref:System.Web.UI.WebControls.WebParts.WebPart> fungiert als Anbieter und Consumer für eine Verbindung steuert.  
  
-   Eine Webseite auf alle Steuerelemente hosten, und führen das Codebeispiel.  
  
-   Eine Erklärung, wie die Beispielseite ausgeführt werden soll.  
  
 Der erste Teil des Codebeispiels wird der Quellcode für die Schnittstelle und der Consumer- und anbietersteuerelementen. Das Codebeispiel ausführen müssen Sie diesen Quellcode kompilieren. Sie können explizit kompilieren und die resultierende Assembly im Bin-Ordner der Website oder im globalen Assemblycache ablegen. Alternativ können Sie den Quellcode im Ordner "App_Code" Ihrer Website, ablegen, wo er zur Laufzeit dynamisch kompiliert wird. Dieses Codebeispiel verwendet die dynamische Kompilierung. Eine exemplarische Vorgehensweise, die zeigt, wie kompiliert wird, finden Sie unter [Exemplarische Vorgehensweise: Entwickeln und Verwenden eines benutzerdefinierten Webserver-Steuerelements](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_IsActive#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsActive#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/VB/ZipCodeComponent.vb#2)]  
  
 Der zweite Teil des Codebeispiels wird die Webseite. Im oberen Bereich ist eine `Register` Richtlinie, die auf den Quellcode für die beiden für dynamisch kompilierte verweist <xref:System.Web.UI.WebControls.WebParts.WebPart> Steuerelemente. Die statische Verbindung wird deklariert, innerhalb der `<StaticConnections>` Element auf der Seite. In der `<script>` Element sind vier Ereignishandler. Jeder Ereignishandler überprüft den Wert der <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> Eigenschaft für die Verbindung statisch und schreibt eine Meldung für die <xref:System.Web.UI.WebControls.Label> Steuerelement, der angibt, ob die Verbindung in diesem Zustand des Lebenszyklus der Seiten- und Steuerelementausgabe aktiv oder inaktiv ist. Dies zeigt, an welchem Punkt die Verbindung aktiv wird, und, dass sie nach der Seite aktiv bleibt, gerendert wird.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsActive#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/CS/wpConnectIsActiveCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsActive#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/VB/wpConnectIsActiveVB.aspx#1)]  
  
 Laden Sie die Seite in einem Browser. Die statische Verbindung bereits erstellt wurde, und Nachrichten, die anzeigt, ob die Verbindung zu verschiedenen Zeitpunkten im Lebenszyklus Seiten- und Steuerelementausgabe Inanspruchnehmen Bezeichnungen wurden bereits geschrieben. Klicken Sie auf die **Verbindungsdetails** Schaltfläche, und beachten Sie, dass die Verbindung zu diesem Zeitpunkt nicht aktiv ist, aber die Verbindung erneut jedes Mal nach dem Aktivieren der <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> Ereignis und noch aktiv ist (und bleiben) nach der <xref:System.Web.UI.Control.PreRender> -Ereignis der Seite.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.IsStatic" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating" />
      </Docs>
    </Member>
    <Member MemberName="IsShared">
      <MemberSignature Language="C#" Value="public bool IsShared { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsShared" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsShared As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsShared { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsShared : bool" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob ein <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />-Objekt für alle Benutzer oder nur für den aktuellen Benutzer sichtbar ist.</summary>
        <value>
          <see langword="true" />, wenn die Verbindung freigegeben ist, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wie bei einzelnen <xref:System.Web.UI.WebControls.WebParts.WebPart> -Steuerelemente, eine <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Objekt kann es sich um eine freigegebene oder eine Instanz pro Benutzer. Eine freigegebene Instanz bedeutet, dass die Verbindung für alle Benutzer einer Webseite sichtbar, und eine Instanz pro Benutzer bedeutet, dass die Verbindung nur für einen bestimmten Benutzer sichtbar ist.  
  
 Im Allgemeinen bestimmt die Möglichkeit, die eine Verbindung zu einer Seite hinzugefügt wird, ob die Verbindung freigegeben ist. Wenn die Verbindung im Markup einer Webseite deklariert ist, wird die Verbindung freigegeben und die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> Eigenschaftswert ist `true`. Darüber hinaus, wenn die Webseite im freigegebenen Personalisierungsbereich ist, wenn eine Verbindung hinzugefügt wird, wird die Verbindung auch gemeinsam genutzt. In der Regel, wenn ein Benutzer verwendet die `<asp:connectionszone>` Benutzeroberfläche (UI) zum Hinzufügen einer Verbindung, die Seite ist im Benutzerpersonalisierungsbereich befindet, damit die Verbindung nicht gemeinsam genutzt wird und die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> Eigenschaftswert ist `false`.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die programmgesteuerte Verwendung von der <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> Eigenschaft.  
  
 Im Codebeispiel besteht aus fünf Teilen:  
  
-   Ein Benutzersteuerelement, das Ihnen ermöglicht, ändern Sie die Webparts-Anzeigemodus auf einer Seite.  
  
-   Quellcode für eine Schnittstelle und die beiden <xref:System.Web.UI.WebControls.WebParts.WebPart> fungiert als Anbieter und Consumer für eine Verbindung steuert.  
  
-   Eine Webseite auf alle Steuerelemente hosten, und führen das Codebeispiel.  
  
-   Ein Eintrag in der Web.config-Datei, die zum Ausführen des Beispiels erforderlich sind.  
  
-   Eine Erklärung, wie die Beispielseite ausgeführt werden soll.  
  
 Der erste Teil dieses Codebeispiels wird das Benutzersteuerelement, das Benutzern ermöglicht, den Anzeigemodus auf einer Webseite zu ändern. Den folgende Quellcode in einer ASCX-Datei speichern, die durch das Erteilen sie des Dateinamen, die zugewiesen ist, die `Src` Attribut der `Register` die Richtlinie für dieses Steuerelement, das am oberen Rand der Hostingwebseite ist. Weitere Informationen zu Modi und eine Beschreibung des Quellcodes in diesem Steuerelement anzuzeigen, finden Sie unter [Exemplarische Vorgehensweise: Ändern des Anzeigemodus auf einer Webparts-Seite](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsShared#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsShared#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/DisplayModeMenuVB.ascx#6)]  
  
 Der zweite Teil des Codebeispiels wird der Quellcode für die Schnittstelle und der Consumer- und anbietersteuerelementen. Das Codebeispiel ausführen müssen Sie diesen Quellcode kompilieren. Sie können explizit kompilieren und die resultierende Assembly im Bin-Ordner der Website oder im globalen Assemblycache ablegen. Alternativ können Sie den Quellcode im Ordner "App_Code" Ihrer Website, ablegen, wo er zur Laufzeit dynamisch kompiliert wird. Dieses Codebeispiel verwendet die dynamische Kompilierung. Eine exemplarische Vorgehensweise, die zeigt, wie kompiliert wird, finden Sie unter [Exemplarische Vorgehensweise: Entwickeln und Verwenden eines benutzerdefinierten Webserver-Steuerelements](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_IsShared#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsShared#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/ZipCodeComponent.vb#2)]  
  
 Der dritte Teil des Codebeispiels wird die Webseite. In der `Button2_Click` -Methode, er überprüft die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> Eigenschaft der vorhandenen Verbindung und das Ergebnis auf der Seite angezeigt.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsShared#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsShared#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Das vierte Teil des Codebeispiels wird ein Eintrag in der Datei "Web.config", die für das Benutzerkonto, das erforderlich ist, die das Beispiel, um die Seite im freigegebenen Personalisierungsbereich bearbeiten können ausgeführt werden. Um dies zu ermöglichen, müssen Sie einen Eintrag in der Datei "Web.config" in der `<system.web>` -Abschnitt, der wie im folgenden Beispiel aussieht.  
  
```  
<webParts>  
  <personalization>  
    <authorization>  
      <allow users="UserAccount"  
             roles="admin"  
             verbs="enterSharedScope"/>  
    </authorization>            
  </personalization>  
</webParts>  
```  
  
 Nachdem Sie auf die Seite in einem Browser laden, verwenden Sie die **Anzeigemodus** Dropdown-Listenfeld-Steuerelement zum Wechseln des Anzeigemodus zu verbinden. Klicken Sie auf die **Connect WebPart Controls** Schaltfläche, um eine Verbindung zu erstellen. Klicken Sie anschließend die **Verbindungsdetails** -Schaltfläche angezeigt, ob die Verbindung freigegeben ist. Wenn Sie die Verbindung mit der Seite in der standardmäßigen Benutzerpersonalisierungsbereich befindet, erstellt die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> -Eigenschaftswert werden `false` für die Verbindung.  
  
 Für das Verbenmenü eines der <xref:System.Web.UI.WebControls.WebParts.WebPart> -Steuerelemente (angezeigt durch den Pfeil nach unten in der Titelleiste), klicken Sie auf der Connect-Verb. Wenn die Benutzeroberfläche für Verbindungen angezeigt wird, klicken Sie auf die **trennen** Schaltfläche, um die Verbindung zu beenden. Verwenden der **Anzeigemodus** Steuerelement in den Durchsuchen-Modus zurück.  
  
 In der **Anzeigemodus** Option die **Shared** Option zum Wechseln von der Seite in freigegebenen Personalisierungsbereich. Führen Sie die gleichen Schritte wie diesen aus, um eine Verbindung erstellen, und klicken Sie erneut auf die **Verbindungsdetails** -Schaltfläche angezeigt, ob die Verbindung freigegeben ist. In diesem Fall wird der Wert, der die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> Eigenschaft sollte sein `true`.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.IsShared" />
      </Docs>
    </Member>
    <Member MemberName="IsStatic">
      <MemberSignature Language="C#" Value="public bool IsStatic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStatic" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStatic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStatic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStatic : bool" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob ein <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />-Objekt im Markup einer Webseite deklariert ist oder programmgesteuert erstellt wird.</summary>
        <value>
          <see langword="true" />, wenn die Verbindung statisch ist, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verbindungen zwischen Webparts-Steuerelemente können entweder statisch oder dynamisch sein. Eine statische Verbindung wird im Markup einer Webseite deklariert mithilfe einer `<asp:WebPartConnection>` Element. Dynamische Verbindungen programmgesteuert erstellt werden, oder wenn ein Benutzer erstellt eine Verbindung über die Benutzeroberfläche (UI) von definiert die <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> Steuerelement.  
  
 Statische Verbindungen sind freigegebene Objekte, was bedeutet, dass sie für alle Benutzer der Webseite verfügbar sind. Darüber hinaus sind sie im Wesentlichen dauerhaft daran, wie Sie eine statische <xref:System.Web.UI.WebControls.WebParts.WebPart> -Steuerelement nicht dauerhaft gelöscht werden.  
  
> [!NOTE]
>  Während ein statisches Verbindungsobjekt dauerhaft gelöscht werden kann, kann es dauerhaft getrennt werden. In diesem Fall würde würde das getrennte Objekt auf dem Server vorhanden, aber ein Endbenutzer nie des Objekts vorhanden ist, auf einer Seite kennen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, die programmgesteuerte Verwendung der <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> Eigenschaft.  
  
 Im Codebeispiel besteht aus drei Teilen:  
  
-   Quellcode für eine Schnittstelle und die beiden <xref:System.Web.UI.WebControls.WebParts.WebPart> fungiert als Anbieter und Consumer für eine Verbindung steuert.  
  
-   Eine Webseite auf die Steuerelemente zu hosten, und führen das Codebeispiel.  
  
-   Eine Erklärung, wie die Beispielseite ausgeführt werden soll.  
  
 Der erste Teil des Codebeispiels wird der Quellcode für die Schnittstelle und der Consumer- und anbietersteuerelementen. Das Codebeispiel ausführen müssen Sie diesen Quellcode kompilieren. Sie können explizit kompilieren und die resultierende Assembly im Bin-Ordner der Website oder im globalen Assemblycache ablegen. Alternativ können Sie den Quellcode im Ordner "App_Code" Ihrer Website, ablegen, wo er zur Laufzeit dynamisch kompiliert wird. Dieses Codebeispiel verwendet die dynamische Kompilierung. Eine exemplarische Vorgehensweise, die zeigt, wie kompiliert wird, finden Sie unter [Exemplarische Vorgehensweise: Entwickeln und Verwenden eines benutzerdefinierten Webserver-Steuerelements](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_IsStatic#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsStatic#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/VB/ZipCodeComponent.vb#2)]  
  
 Der zweite Teil des Codebeispiels wird die Webseite. Im oberen Bereich ist eine `Register` Richtlinie, die auf den Quellcode für die beiden für dynamisch kompilierte verweist <xref:System.Web.UI.WebControls.WebParts.WebPart> Steuerelemente. Die statische Verbindung wird deklariert, innerhalb der `<StaticConnections>` Element auf der Seite. Die `Button1_Click` Methode greift auf die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> Eigenschaft zu überprüfen, ob die Verbindung statisch ist.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsStatic#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/CS/wpConnectIsStaticCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsStatic#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/VB/wpConnectIsStaticVB.aspx#1)]  
  
 Laden Sie die Seite in einem Browser. Die statische Verbindung ist bereits erstellt. Geben Sie Text im Anbietersteuerelement, und beachten Sie, dass der Text in das Consumer-Steuerelement angezeigt wird. Klicken Sie auf die **Verbindungsdetails** Schaltfläche, um den Wert der an die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> Eigenschaft.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections" />
      </Docs>
    </Member>
    <Member MemberName="Provider">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPart Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPart Provider" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Provider As WebPart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPart ^ Provider { System::Web::UI::WebControls::WebParts::WebPart ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Provider : System.Web.UI.WebControls.WebParts.WebPart" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />-Steuerelement ab, das in einer Webparts-Verbindung als Anbieter fungiert.</summary>
        <value>Ein <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />-Steuerelement, das als Datenanbieter fungiert.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Alle Webparts-Verbindung besteht aus zwei <xref:System.Web.UI.WebControls.WebParts.WebPart> Steuerelemente – ein Consumer und Anbieter – und das <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> Eigenschaft gibt einen Verweis auf das Anbietersteuerelement in einer Verbindung.  
  
 Wie sein Gegenstück in einer Verbindung (das Consumersteuerelement) ist das Anbietersteuerelement erforderlich, um eine Verbindung herzustellen. Ob Sie die Verbindung programmgesteuert oder durch Deklarieren Sie ihn im seitenpersistenten Format erstellen, müssen Sie ein Steuerelement fungiert als Anbieter für eine Verbindung angeben.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, mit der <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> Eigenschaft.  
  
 Im Codebeispiel besteht aus drei Teilen:  
  
-   Quellcode für eine Schnittstelle und die beiden <xref:System.Web.UI.WebControls.WebParts.WebPart> fungiert als Anbieter und Consumer für eine Verbindung steuert.  
  
-   Eine Webseite auf die Steuerelemente zu hosten, und führen das Codebeispiel.  
  
-   Eine Erklärung, wie die Beispielseite ausgeführt werden soll.  
  
 Der erste Teil des Codebeispiels wird der Quellcode für die Schnittstelle und der Consumer- und anbietersteuerelementen. Das Codebeispiel ausführen müssen Sie diesen Quellcode kompilieren. Sie können explizit kompilieren und die resultierende Assembly im Bin-Ordner der Website oder im globalen Assemblycache ablegen. Alternativ können Sie den Quellcode im Ordner "App_Code" Ihrer Website, ablegen, wo er zur Laufzeit dynamisch kompiliert wird. Dieses Codebeispiel verwendet die dynamische Kompilierung. Eine exemplarische Vorgehensweise, die zeigt, wie kompiliert wird, finden Sie unter [Exemplarische Vorgehensweise: Entwickeln und Verwenden eines benutzerdefinierten Webserver-Steuerelements](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_Provider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Provider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/VB/ZipCodeComponent.vb#2)]  
  
 Der zweite Teil des Codebeispiels wird die Webseite. Im oberen Bereich ist eine `Register` Richtlinie, die auf den Quellcode für die beiden für dynamisch kompilierte verweist <xref:System.Web.UI.WebControls.WebParts.WebPart> Steuerelemente. Die statische Verbindung wird deklariert, innerhalb der `<StaticConnections>` Element auf der Seite. Beachten Sie, dass in der `<asp:webpartconnection>` -Element, das `ProviderID` Attribut hat die ID des Anbietersteuerelements zugewiesen ist. Dies ist erforderlich, um den Anbieter für die statische Verbindung zu identifizieren. Die `Button1_Click` Methode greift auf die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> Eigenschaft und schreibt Sie einige der zugehörigen Details in eine Bezeichnung.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Provider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/CS/wpConnectProviderCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Provider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/VB/wpConnectProviderVB.aspx#1)]  
  
 Laden Sie die Seite in einem Browser. Die statische Verbindung ist bereits erstellt. Geben Sie Text im Anbietersteuerelement, und beachten Sie, dass der Text in das Consumer-Steuerelement angezeigt wird. Klicken Sie auf die **Anbieterdetails** Schaltfläche, um einige der Zugriff erfolgt über Eigenschaftswerte anzuzeigen, die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> Eigenschaft.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die Länge des <see cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />-Eigenschaftswerts ist 0 (null).</exception>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
      </Docs>
    </Member>
    <Member MemberName="ProviderConnectionPoint">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.ProviderConnectionPoint ProviderConnectionPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.ProviderConnectionPoint ProviderConnectionPoint" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ProviderConnectionPoint As ProviderConnectionPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::ProviderConnectionPoint ^ ProviderConnectionPoint { System::Web::UI::WebControls::WebParts::ProviderConnectionPoint ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ProviderConnectionPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Objekt ab, das als Verbindungspunkt für ein <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />-Steuerelement fungiert, das als Anbieter in einer Verbindung fungiert.</summary>
        <value>Ein <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />, der einem Anbietersteuerelement in einer Verbindung zugeordnet ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Einer der erforderlichen Schritte zum Erstellen einer Verbindung zwischen zwei <xref:System.Web.UI.WebControls.WebParts.WebPart> Steuerelemente ist das Verbindungspunkte für jedes Steuerelement zu erstellen. Der Anbieterverbindungspunkt ist ein Objekt, das die Informationen zum Herstellen einer Verbindung mit das als Anbieter fungierende Steuerelement enthält. Im Quellcode des Anbieters, einer der Methoden muss identifiziert werden, mit der `ConnectionProvider` Attribut. Die <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> , mit einem Anbieter enthält Details zur Methode und das Attribut, einschließlich einer ID für die Methode, einen Anzeigenamen für die Verwendung in der Benutzeroberfläche (UI), und welche Art von clusternetzwerkschnittstellen-Instanz die Methode können an einen Consumer zurückgeben -Steuerelement. Dieser Satz von Informationen über den Anbieter, der die Methode zum Herstellen von Verbindungen und den Typ der Schnittstelle, die sie bereitstellt, bildet zusammen einen Anbieterverbindungspunkt an.  
  
 Standardmäßig eine <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> können eine Verbindung mit nur einer <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Objekt zu einem Zeitpunkt. Ein Consumer kann mehrere Methoden, die als mögliche Consumerverbindungspunkten identifiziert haben, aber ein Consumer nur teilnehmen kann eine Verbindung als Consumer (daher nur eine der Consumer die Verbindungspunkte aktiv sein kann) zu einem Zeitpunkt. Im Gegensatz dazu ein <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> können eine Verbindung herstellen, um eine beliebige Anzahl von <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Objekte in der Standardeinstellung. Beispielsweise kann ein Anbietersteuerelement, das eine Postleitzahl enthält an mehrere Consumersteuerelemente bestehen, die eine Postleitzahl zu verwenden, um verschiedene Arten von Daten basierend auf eine Postleitzahl, z. B. Wetterdaten, Nachrichten und So weiter zu erstellen. Dieses Standardverhalten kann geändert werden, durch Überschreiben der <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A> Eigenschaft für die <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> Attribut.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, die programmgesteuerte Verwendung der <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> Eigenschaft.  
  
 Das Beispiel besteht aus vier Teilen:  
  
-   Ein Benutzersteuerelement, das Ihnen ermöglicht, ändern Sie die Webparts-Anzeigemodus auf einer Seite.  
  
-   Quellcode für eine Schnittstelle und die beiden <xref:System.Web.UI.WebControls.WebParts.WebPart> fungiert als Anbieter und Consumer für eine Verbindung steuert.  
  
-   Eine Webseite auf alle Steuerelemente hosten, und führen das Codebeispiel.  
  
-   Eine Erklärung, wie die Beispielseite ausgeführt werden soll.  
  
 Der erste Teil dieses Codebeispiels wird das Benutzersteuerelement, das Benutzern ermöglicht, den Anzeigemodus auf einer Webseite zu ändern. Den folgende Quellcode in einer ASCX-Datei speichern, die durch das Erteilen sie des Dateinamen, die zugewiesen ist, die `Src` Attribut der `Register` die Richtlinie für dieses Steuerelement, das am oberen Rand der Hostingwebseite ist. Weitere Informationen zu Modi und eine Beschreibung des Quellcodes in diesem Steuerelement anzuzeigen, finden Sie unter [Exemplarische Vorgehensweise: Ändern des Anzeigemodus auf einer Webparts-Seite](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/DisplayModeMenuVB.ascx#6)]  
  
 Der zweite Teil des Codebeispiels wird der Quellcode für die beiden <xref:System.Web.UI.WebControls.WebParts.WebPart> Steuerelemente, die als Consumer und der Anbieter für die Verbindung, und eine Schnittstelle für die Verbindungspunkte dienen. Das Codebeispiel ausführen müssen Sie diesen Quellcode kompilieren. Sie können explizit kompilieren und die resultierende Assembly im Bin-Ordner der Website oder im globalen Assemblycache ablegen. Alternativ können Sie den Quellcode im Ordner "App_Code" Ihrer Website, ablegen, wo er zur Laufzeit dynamisch kompiliert wird. Dieses Codebeispiel verwendet die dynamische Kompilierung. Eine exemplarische Vorgehensweise, die zeigt, wie kompiliert wird, finden Sie unter [Exemplarische Vorgehensweise: Entwickeln und Verwenden eines benutzerdefinierten Webserver-Steuerelements](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/ZipCodeComponent.vb#2)]  
  
 Der dritte Teil des Codebeispiels wird der Code für die Webseite, die die Steuerelemente hostet, und veranschaulicht die Verwendung der <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> Eigenschaft. In der `Button1_Click` -Methode, alle Objekte, die zum Herstellen einer Verbindung erforderlich werden erstellt, einschließlich einer <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Objekt. Beachten Sie den Aufruf der <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> Methode für die <xref:System.Web.UI.WebControls.WebParts.WebPartManager> Steuerelement. Die verschiedenen erstellten Objekte werden zum Übergeben der <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> Methode, um die Verbindung zu erstellen. In der `Button2_Click` -Methode, die der Code greift auf die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> -Eigenschaft und zeigt einige Details der Verbindung zeigen.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Nachdem Sie auf die Seite in einem Browser laden, verwenden Sie die **Anzeigemodus** Dropdown-Listenfeld-Steuerelement auf die Seite verbinden-Modus zu wechseln. Klicken Sie auf das Verbenmenü (dargestellt durch den Pfeil nach unten in der Titelleiste) eines der <xref:System.Web.UI.WebControls.WebParts.WebPart> steuert, und klicken Sie auf der Connect-Verb. Verwenden der **Connect WebPart Controls** Schaltfläche oder der angegebenen Verbindung UI, um eine Verbindung zwischen den beiden Steuerelementen zu erstellen. Klicken Sie auf die **ConnectionPoint Details** Schaltfläche, um den Code auszuführen, das veranschaulicht, die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> Eigenschaft.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
      </Docs>
    </Member>
    <Member MemberName="ProviderConnectionPointID">
      <MemberSignature Language="C#" Value="public string ProviderConnectionPointID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderConnectionPointID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID" />
      <MemberSignature Language="VB.NET" Value="Public Property ProviderConnectionPointID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProviderConnectionPointID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ProviderConnectionPointID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.DefaultValue("default")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Eigenschaftswert für eine Verbindung ab, der auf die ID des Objekts verweist, das als Anbieterverbindungspunkt für diese Verbindung fungiert, oder legt diesen fest.</summary>
        <value>Eine Zeichenfolge, die die ID für ein Anbieterverbindungspunkt-Objekt enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Für eine statische Verbindung, die im Markup einer Webseite deklariert wird, können Entwickler angeben, welche Anbieterverbindungspunkt für die Verbindung verwendet wird durch Zuweisen eines Werts, der `ProviderConnectionPointID` -Attribut für die `<asp:webpartconnection>` Element. Wenn ein Wert nicht in das Attribut zugewiesen wird die <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> Eigenschaftswert verwendet wird.  
  
 Bei der Erstellung von dynamischer (programmgesteuerter) Verbindungen normalerweise Sie sollte nicht legen Sie den Wert von der <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> Eigenschaft. Sie können einfach aufrufen, die <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> Methode für die <xref:System.Web.UI.WebControls.WebParts.WebPartManager> steuern, übergibt Sie an den Anbieter und die anbieterverbindung beziehen, zeigen Sie Objekte (zusammen mit den anderen erforderlichen Parameter), und diese Methode bestimmt die richtige ID für den Anbieter der Verbindung Zeigen Sie. Auf ähnliche Weise, wenn Sie die Verbindung trennen, Sie erreichen die <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> Methode, ohne dass die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> -Eigenschaftswert.  
  
> [!NOTE]
>  Die ID des ein Anbieterverbindungspunkt kann bestimmt werden, wenn Sie festlegen, eine <xref:System.Web.UI.WebControls.WebParts.WebPart> oder sonstiges Serversteuerelement als Anbieter. Sie müssen eine Callback-Methode im Anbieter identifizieren, die eine Instanz einer Schnittstelle, die Daten an einen Consumer verarbeitet. Um die Methode zu identifizieren, markieren Sie sie mit der `ConnectionProvider` Code-Attribut. Wenn Sie dieses Attribut hinzufügen, können Sie einen optionale Zeichenfolge-Value-Parameter, die als ID für des Anbieters fungiert hinzufügen <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Objekt. Wenn Sie einen Wert für den optionalen ID-Parameter angeben, wird dieser Wert den Wert des der <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> -Eigenschaft für die Verbindung. Wenn Sie keinen ID-Wert angeben der <xref:System.Web.UI.WebControls.WebParts.WebPartManager> Steuerelement weist eine Standard-ID aus, wenn das Objekt erstellt wird.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, die deklarative und die programmgesteuerte Verwendung von der <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> Eigenschaft.  
  
 Das Beispiel besteht aus vier Teilen:  
  
-   Ein Benutzersteuerelement, das Ihnen ermöglicht, ändern Sie die Webparts-Anzeigemodus auf einer Seite.  
  
-   Quellcode für eine Schnittstelle und die beiden <xref:System.Web.UI.WebControls.WebParts.WebPart> fungiert als Anbieter und Consumer für eine Verbindung steuert.  
  
-   Eine Webseite auf alle Steuerelemente hosten, und führen das Codebeispiel.  
  
-   Eine Erklärung, wie die Beispielseite ausgeführt werden soll.  
  
 Der erste Teil dieses Codebeispiels wird das Benutzersteuerelement, das Benutzern ermöglicht, den Anzeigemodus auf einer Webseite zu ändern. Den folgende Quellcode in einer ASCX-Datei speichern, die durch das Erteilen sie des Dateinamen, die zugewiesen ist, die `Src` Attribut der `Register` die Richtlinie für dieses Steuerelement, das am oberen Rand der Hostingwebseite ist. Weitere Informationen zu Modi und eine Beschreibung des Quellcodes in diesem Steuerelement anzuzeigen, finden Sie unter [Exemplarische Vorgehensweise: Ändern des Anzeigemodus auf einer Webparts-Seite](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/DisplayModeMenuVB.ascx#6)]  
  
 Der zweite Teil des Codebeispiels wird der Quellcode für die Schnittstelle und der Consumer- und anbietersteuerelementen. Das Codebeispiel ausführen müssen Sie diesen Quellcode kompilieren. Sie können explizit kompilieren und die resultierende Assembly im Bin-Ordner der Website oder im globalen Assemblycache ablegen. Alternativ können Sie den Quellcode im Ordner "App_Code" Ihrer Website, ablegen, wo er zur Laufzeit dynamisch kompiliert wird. Dieses Codebeispiel verwendet die dynamische Kompilierung. Eine exemplarische Vorgehensweise, die zeigt, wie kompiliert wird, finden Sie unter [Exemplarische Vorgehensweise: Entwickeln und Verwenden eines benutzerdefinierten Webserver-Steuerelements](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/ZipCodeComponent.vb#2)]  
  
 Der dritte Teil des Codebeispiels wird die Webseite. Beachten Sie, dass eine Verbindung im Seitenmarkup, deklariert wird mithilfe der `<StaticConnections>` und `<asp:WebPartsConnection>` Elemente. Die Verbindungsdeklaration enthält die erforderlichen `ProviderConnectionPointID` Attribut. Eine zweite Methode zum Herstellen der Verbindung angezeigt wird, der `Button1_Click` -Methode, bei der Code eine neue Verbindung erstellt mithilfe der Verbindungspunkt (und die ID) in das Anbietersteuerelement definiert. Klicken Sie auf die `Button2_Click` -Methode, die der Code greift auf die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> Eigenschaft.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Nachdem Sie die Seite in einem Browser laden, ist bereits eine Verbindung aufgrund der statischen Verbindung deklariert, die auf der Seite vorhanden. Geben Sie Text im Anbietersteuerelement, und beachten Sie, dass der Consumer aufgrund der Verbindung angezeigt wird. Trennen Sie die Steuerelemente an. Mithilfe der **Anzeigemodus** Dropdown-Listensteuerelement, schalten Sie den Verbindungsmodus. Klicken Sie auf das Verbenmenü (dargestellt durch den Pfeil nach unten in der Titelleiste) eines der <xref:System.Web.UI.WebControls.WebParts.WebPart> steuert, und klicken Sie auf der Connect-Verb. Klicken Sie auf die **trennen** Schaltfläche. Verwenden der **Connect WebPart Controls** Schaltfläche, um eine Verbindung zwischen den beiden Steuerelementen neu zu erstellen. Klicken Sie auf die **ConnectionPoint Details** Schaltfläche, um den Code auszuführen, die greift auf die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> -Eigenschaftswert. Der Wert wird in eine Bezeichnung unterhalb der Steuerelemente geschrieben.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
      </Docs>
    </Member>
    <Member MemberName="ProviderID">
      <MemberSignature Language="C#" Value="public string ProviderID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
      <MemberSignature Language="VB.NET" Value="Public Property ProviderID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProviderID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ProviderID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Eigenschaftswert für eine Verbindung ab, der auf die ID des <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />-Steuerelements verweist, das als Anbieter für diese Verbindung fungiert, oder legt diesen fest.</summary>
        <value>Eine Zeichenfolge mit der ID des Anbietersteuerelements.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> Eigenschaftswert ist erforderlich, wenn Sie eine Verbindung zwischen zwei erstellen <xref:System.Web.UI.WebControls.WebParts.WebPart> Steuerelemente. Wenn ein Wert der Eigenschaft nicht zugewiesen ist, eine Ausnahme wird ausgelöst, wenn die <xref:System.Web.UI.WebControls.WebParts.WebPartManager> -Steuerelement versucht, die Verbindung zu aktivieren.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, die deklarative und die programmgesteuerte Verwendung von der <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> Eigenschaft.  
  
 Das Beispiel besteht aus vier Teilen:  
  
-   Ein Benutzersteuerelement, das Ihnen ermöglicht, ändern Sie die Webparts-Anzeigemodus auf einer Seite.  
  
-   Quellcode für eine Schnittstelle und die beiden <xref:System.Web.UI.WebControls.WebParts.WebPart> fungiert als Anbieter und Consumer für eine Verbindung steuert.  
  
-   Eine Webseite auf alle Steuerelemente hosten, und führen das Codebeispiel.  
  
-   Eine Erklärung, wie die Beispielseite ausgeführt werden soll.  
  
 Der erste Teil dieses Codebeispiels wird das Benutzersteuerelement, das Benutzern ermöglicht, den Anzeigemodus auf einer Webseite zu ändern. Den folgende Quellcode in einer ASCX-Datei speichern, die durch das Erteilen sie des Dateinamen, die zugewiesen ist, die `Src` Attribut der `Register` die Richtlinie für dieses Steuerelement, das am oberen Rand der Hostingwebseite ist. Weitere Informationen zu Modi und eine Beschreibung des Quellcodes in diesem Steuerelement anzuzeigen, finden Sie unter [Exemplarische Vorgehensweise: Ändern des Anzeigemodus auf einer Webparts-Seite](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/DisplayModeMenuVB.ascx#6)]  
  
 Der zweite Teil des Codebeispiels wird der Quellcode für die Schnittstelle und der Consumer- und anbietersteuerelementen. Das Codebeispiel ausführen müssen Sie diesen Quellcode kompilieren. Sie können explizit kompilieren und die resultierende Assembly im Bin-Ordner der Website oder im globalen Assemblycache ablegen. Alternativ können Sie den Quellcode im Ordner "App_Code" Ihrer Website, ablegen, wo er zur Laufzeit dynamisch kompiliert wird. Dieses Codebeispiel verwendet die dynamische Kompilierung. Eine exemplarische Vorgehensweise, die zeigt, wie kompiliert wird, finden Sie unter [Exemplarische Vorgehensweise: Entwickeln und Verwenden eines benutzerdefinierten Webserver-Steuerelements](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/ZipCodeComponent.vb#2)]  
  
 Der dritte Teil des Codebeispiels wird die Webseite. Beachten Sie, dass eine Verbindung im Seitenmarkup, deklariert wird mithilfe der `<StaticConnections>` und `<asp:WebPartsConnection>` Elemente. Die Verbindungsdeklaration enthält die erforderlichen `ProviderID` Attribut. Eine zweite Methode zum Herstellen der Verbindung angezeigt wird, der `Button1_Click` -Methode, in dem der Code erstellt eine neue Verbindung mit den Verbindungspunkt, der in das Consumer-Steuerelement definiert. Klicken Sie auf die `Button2_Click` -Methode, der Code greift auf den Wert des der <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> Eigenschaft und in eine Bezeichnung angezeigt wird.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Nachdem Sie die Seite in einem Browser laden, ist bereits eine Verbindung aufgrund der statischen Verbindung deklariert, die auf der Seite vorhanden. Geben Sie Text im Anbietersteuerelement, und beachten Sie, dass der Consumer aufgrund der Verbindung angezeigt wird. Trennen Sie die Steuerelemente an. Zu diesem Zweck verwenden Sie die **Anzeigemodus** Dropdown-Listenfeld-Steuerelement auf die Seite verbinden-Modus zu wechseln. Klicken Sie auf das Verbenmenü (dargestellt durch den Pfeil nach unten in der Titelleiste) eines der <xref:System.Web.UI.WebControls.WebParts.WebPart> steuert, und klicken Sie auf der Connect-Verb. Klicken Sie auf die **trennen** Schaltfläche und die Steuerelemente sind getrennt. Verwenden Sie als Nächstes die **Connect WebPart Controls** Schaltfläche, um eine Verbindung zwischen den beiden Steuerelementen neu zu erstellen. Klicken Sie auf die **Consumer Details** Schaltfläche, um den Code auszuführen, die greift auf die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> -Eigenschaftswert.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="webPartConnection.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Überschreibt die geerbte <see cref="M:System.Object.ToString" />-Methode und gibt einen kurzen Typnamen für das Verbindungsobjekt zurück.</summary>
        <returns>Eine Zeichenfolge, die den kurzen (nicht qualifizierten) Typnamen einer <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird hauptsächlich zur Vereinfachung von Steuerelement-Designern verwendet werden. Dadurch wird verbessert, wie Verbindungsobjekte in der Entwurfsansicht angezeigt werden, mit dem kürzeren Typnamen, im Gegensatz zu einem vollqualifizierten Typnamen. Allerdings kann die Methode aufgerufen werden zu einem beliebigen Zeitpunkt im Code, wo Sie möchten wissen, den Typnamen eines Verbindungsobjekts.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Aufrufen der <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A> -Methode zur Rückgabe der kurze Typname, der eine <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Objekt.  
  
 Im Codebeispiel besteht aus drei Teilen:  
  
-   Quellcode für eine Schnittstelle und die beiden <xref:System.Web.UI.WebControls.WebParts.WebPart> fungiert als Anbieter und Consumer für eine Verbindung steuert.  
  
-   Eine Webseite auf die Steuerelemente zu hosten, und führen das Codebeispiel.  
  
-   Eine Erklärung, wie die Beispielseite ausgeführt werden soll.  
  
 Der erste Teil des Codebeispiels wird der Quellcode für die Schnittstelle und der Consumer- und anbietersteuerelementen. Das Codebeispiel ausführen müssen Sie diesen Quellcode kompilieren. Sie können explizit kompilieren und die resultierende Assembly im Bin-Ordner der Website oder im globalen Assemblycache ablegen. Alternativ können Sie den Quellcode im Ordner "App_Code" Ihrer Website, ablegen, wo er zur Laufzeit dynamisch kompiliert wird. Dieses Codebeispiel verwendet die dynamische Kompilierung. Eine exemplarische Vorgehensweise, die zeigt, wie kompiliert wird, finden Sie unter [Exemplarische Vorgehensweise: Entwickeln und Verwenden eines benutzerdefinierten Webserver-Steuerelements](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ToString#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ToString#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/VB/ZipCodeComponent.vb#2)]  
  
 Der zweite Teil des Codebeispiels wird die Webseite. Im oberen Bereich ist eine `Register` Richtlinie, die auf den Quellcode für die beiden für dynamisch kompilierte verweist <xref:System.Web.UI.WebControls.WebParts.WebPart> Steuerelemente. Die statische Verbindung wird deklariert, innerhalb der `<StaticConnections>` Element auf der Seite. Die `Button1_Click` Methodenaufrufe der <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A> Methode, um den Typnamen der Verbindung mit einer Bezeichnung zu schreiben.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ToString#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/CS/wpConnectToStringCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ToString#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/VB/wpConnectToStringVB.aspx#1)]  
  
 Laden Sie die Seite in einem Browser. Die statische Verbindung ist bereits erstellt. Geben Sie Text im Anbietersteuerelement, und beachten Sie, dass der Text in das Consumer-Steuerelement angezeigt wird. Klicken Sie auf die **Verbindungsdetails** Schaltfläche zum Ausführen der <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A> Methode.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.ToString" />
      </Docs>
    </Member>
    <Member MemberName="Transformer">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartTransformer Transformer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartTransformer Transformer" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Transformer As WebPartTransformer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartTransformer ^ Transformer { System::Web::UI::WebControls::WebParts::WebPartTransformer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Transformer : System.Web.UI.WebControls.WebParts.WebPartTransformer" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartTransformer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />-Objekt ab, mit dessen Hilfe Daten zwischen zwei andernfalls nicht kompatiblen Verbindungspunkten in einer Webparts-Verbindung transformiert werden.</summary>
        <value>Ein <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />. Der Standardwert ist <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Es gibt zwei Möglichkeiten, die in denen der Anbieter und Consumer-Steuerelemente in der Verbindung eine Verbindung herstellen können, in einer Webparts-Verbindung. Sie können eine Verbindung herstellen direkt über den jeweiligen <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> Objekten und einen Schnittstellentyp aufweisen, die von beiden Steuerelementen verstanden wird. Oder, wenn sie nicht kompatibel sind, sie können eine Verbindung indirekt über eine <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> -Objekt, das eine Schnittstelleninstanz von einem Anbieter in einen Typ, der von einem Consumer verstanden transformiert.  
  
 Wenn ein Transformator als Teil einer Verbindung benötigt wird die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A> Eigenschaft stellt einen Verweis auf die <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> Objekt. Sie können einen Transformator für eine Verbindung deklarativ im Markup einer Webseite durch Hinzufügen eines Tags für einen benutzerdefinierten Transformator (oder eine der Transformatoren, die mit dem Webparts-Steuerelementsatz bereitgestellte) hinzufügen, innerhalb der `<asp:WebPartConnection>` Element. Sie können auch einen Transformator programmgesteuert hinzufügen, erstellen eine Instanz davon in Ihrem Code und Aufrufen der <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPartTransformer%29> Methode für die <xref:System.Web.UI.WebControls.WebParts.WebPartManager> Steuerelement zum Erstellen der Verbindung, und übergibt Sie an das Transformatorobjekt zusammen mit anderen erforderlichen Parameter.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />
      </Docs>
    </Member>
    <Member MemberName="Transformers">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartTransformerCollection Transformers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartTransformerCollection Transformers" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Transformers As WebPartTransformerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartTransformerCollection ^ Transformers { System::Web::UI::WebControls::WebParts::WebPartTransformerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Transformers : System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerDefaultProperty)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartTransformerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine Auflistung von <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />-Objekten ab, die vom Webparts-Steuerelementsatz intern verwendet wird.</summary>
        <value>Eine <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" />-Methode, die <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />-Objekte enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers%2A> Eigenschaft ist nie für die Verwendung durch Entwickler vorgesehen. Entwickler sollten den Zugriff auf den eine Verbindung zugeordneten Transformator immer verwenden die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A> Eigenschaft.  
  
 Die <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers%2A> Eigenschaft wird intern verwendet, vom Webparts-Steuerelement, damit Seitenentwickler deklarieren, Transformatorelemente innerhalb der `<asp:webpartconnection>` Element im Markup einer Webseite.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
      </Docs>
    </Member>
  </Members>
</Type>
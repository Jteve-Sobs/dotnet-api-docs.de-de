<Type Name="ClaimsAuthenticationManager" FullName="System.Security.Claims.ClaimsAuthenticationManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="42a1e9b2af0b0e21944401ffe335af36234324db" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="36627192" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ClaimsAuthenticationManager : System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ClaimsAuthenticationManager extends System.Object implements class System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="DocId" Value="T:System.Security.Claims.ClaimsAuthenticationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class ClaimsAuthenticationManager&#xA;Implements ICustomIdentityConfiguration" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClaimsAuthenticationManager : System::IdentityModel::Configuration::ICustomIdentityConfiguration" />
  <TypeSignature Language="F#" Value="type ClaimsAuthenticationManager = class&#xA;    interface ICustomIdentityConfiguration" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IdentityModel.Configuration.ICustomIdentityConfiguration</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Definiert die Basisimplementierung für einen Anspruchsauthentifizierungs-Manager. Der Anspruchsauthentifizierungs-Manager stellt einen Bereich in der Anspruchsverarbeitungs-Pipeline zur Anwendung von Ablauflogik (Filtern, Validierung, Erweiterung) für die Anspruchsauflistung im eingehenden Prinzipal bereit, bevor die Ausführung den Anwendungscode erreicht.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Ansprüche, die Authentifizierungs-Manager bietet ein Erweiterungspunkt darstellen, in der Anwendung Ansprüche Pipeline zur anforderungsverarbeitung, die Sie verwenden können, um zu überprüfen, zu filtern, zu ändern, eingehende Ansprüche an, oder fügen Sie neue Ansprüche in den Satz von Ansprüchen von einem <xref:System.Security.Claims.ClaimsPrincipal> vor Anwendung der vertrauenden Seite Anwendungscode wird ausgeführt. Sie können auch eine benutzerdefinierte Implementierung der zurückgeben <xref:System.Security.Claims.ClaimsPrincipal> Wenn Ihre Anwendung der vertrauenden Seite erforderlich ist. Die standardmäßige Implementierung von der <xref:System.Security.Claims.ClaimsAuthenticationManager> Klasse gibt die Ansprüche in der <xref:System.Security.Claims.ClaimsPrincipal> unverändert; Sie können jedoch von dieser Klasse ableiten und außer Kraft setzen der <xref:System.Security.Claims.ClaimsAuthenticationManager.Authenticate%2A> Methode zum Ändern der Ansprüche in der <xref:System.Security.Claims.ClaimsPrincipal> (oder eine benutzerdefinierte <xref:System.Security.Claims.ClaimsPrincipal>).  
  
 Ein häufiger Grund für das Erstellen einer benutzerdefinierten Anspruchsauthentifizierung-Managers ist auf Hinzufügen, entfernen oder Transformieren von Ansprüchen basierend auf Informationen, die nur bekannt ist, oder vielleicht besser durch Anwendung der vertrauenden Seite verwaltet wird. Z. B. ein Verlauf der Einkäufe der Kunden in eine Warenkorb-Anwendung in einer Datenbank durch Anwendung der vertrauenden Seite verwaltet, und klicken Sie dann die Anspruchs-Prinzipal, der von den anspruchsauthentifizierungs-Manager basierend auf dem Wert eines Namensanspruchs finden Sie im zurückgegebenen hinzugefügt aufbewahrt werden möglicherweise die eingehenden Prinzipal.  
  
 Sie können konfigurieren, dass Ihre Anwendung zur Verwendung einer `ClaimsAuthenticationManager` entweder programmgesteuert mithilfe der <xref:System.IdentityModel.Configuration.IdentityConfiguration> Klasse oder in der Konfiguration über die [ &lt;"ClaimsAuthenticationManager"&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthenticationmanager.md) Element ( Dies ist ein untergeordnetes Element von der [ &lt;IdentityConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/identityconfiguration.md) Element). Können Sie überschreiben die <xref:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration%2A> Methode, um die Verarbeitung für benutzerdefinierte untergeordneten Elemente bereitzustellen, die `<claimsAuthenticationManager>` Element über die Ihre benutzerdefinierten-Manager so konfiguriert werden kann. Die basisimplementierung für <xref:System.Security.Claims.ClaimsAuthenticationManager> keine untergeordneten Elemente nicht behandelt.  
  
 Konfigurieren Ihrer Anwendung für einen anspruchsauthentifizierungs-Manager verwenden, wird sichergestellt, dass es von der Windows Identity Foundation (WIF) aus der Pipeline aufgerufen wird.  
  
   
  
## Examples  
 Der folgende Code zeigt eine einfache Anspruchsauthentifizierung-Manager, der einen Rollenanspruch mit dem eingehenden Prinzipal hinzugefügt werden, ohne dass alle Kontrollkästchen für die eingehenden Ansprüche...  
  
 [!code-csharp[WifWebApplication1#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifwebapplication1/cs/myclaimsauthenticationmanager/simpleclaimsauthenticatonmanager.cs#1)]  
  
 Das folgende XML zeigt die `<claimsAuthenticationManager>` Element.  
  
```xml  
<system.identityModel>  
  <identityConfiguration>  
    <claimsAuthenticationManager type="MyClaimsAuthenticationManager.SimpleClaimsAuthenticatonManager, MyClaimsAuthenticationManager" />  
  
    ...  
  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClaimsAuthenticationManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthenticationManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ClaimsAuthenticationManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Security.Claims.ClaimsAuthenticationManager" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Authenticate">
      <MemberSignature Language="C#" Value="public virtual System.Security.Claims.ClaimsPrincipal Authenticate (string resourceName, System.Security.Claims.ClaimsPrincipal incomingPrincipal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.Claims.ClaimsPrincipal Authenticate(string resourceName, class System.Security.Claims.ClaimsPrincipal incomingPrincipal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthenticationManager.Authenticate(System.String,System.Security.Claims.ClaimsPrincipal)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Authenticate (resourceName As String, incomingPrincipal As ClaimsPrincipal) As ClaimsPrincipal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::Claims::ClaimsPrincipal ^ Authenticate(System::String ^ resourceName, System::Security::Claims::ClaimsPrincipal ^ incomingPrincipal);" />
      <MemberSignature Language="F#" Value="abstract member Authenticate : string * System.Security.Claims.ClaimsPrincipal -&gt; System.Security.Claims.ClaimsPrincipal&#xA;override this.Authenticate : string * System.Security.Claims.ClaimsPrincipal -&gt; System.Security.Claims.ClaimsPrincipal" Usage="claimsAuthenticationManager.Authenticate (resourceName, incomingPrincipal)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Claims.ClaimsPrincipal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceName" Type="System.String" />
        <Parameter Name="incomingPrincipal" Type="System.Security.Claims.ClaimsPrincipal" />
      </Parameters>
      <Docs>
        <param name="resourceName">Die Adresse der Ressource, die angefordert wird.</param>
        <param name="incomingPrincipal">Der Anspruchs-Prinzipal, der den authentifizierten Benutzer darstellt, der versucht, auf die Ressource zuzugreifen.</param>
        <summary>Gibt beim Überschreiben in einer abgeleiteten Klasse ein <see cref="T:System.Security.Claims.ClaimsPrincipal" />-Objekt zurück, das mit den Anforderungen der RP-Anwendung konsistent ist. Die Standardimplementierung ändert nicht das eingehende <see cref="T:System.Security.Claims.ClaimsPrincipal" />-Objekt.</summary>
        <returns>Ein Anspruchs-Prinzipal, der alle Änderungen enthält, die für die RP-Anwendung erforderlich sind. Die Standardimplementierung gibt den eingehenden Anspruchsprinzipal unverändert zurück.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Security.Claims.ClaimsAuthenticationManager.Authenticate%2A> Methode wird aufgerufen, von der Pipeline zur anforderungsverarbeitung können Sie diese Methode in einer abgeleiteten Klasse zum Filtern überschreiben, ändern oder Ansprüche in der Anspruchs-Prinzipal gemäß der Richtlinie von Ihrer Anwendung der vertrauenden Seite einfügen. Je nach den Anforderungen der RP-Anwendung, können Sie auch eine benutzerdefinierte Implementierung der zurückkehren <xref:System.Security.Claims.ClaimsPrincipal>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadCustomConfiguration">
      <MemberSignature Language="C#" Value="public virtual void LoadCustomConfiguration (System.Xml.XmlNodeList nodelist);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadCustomConfiguration(class System.Xml.XmlNodeList nodelist) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration(System.Xml.XmlNodeList)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub LoadCustomConfiguration (nodelist As XmlNodeList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void LoadCustomConfiguration(System::Xml::XmlNodeList ^ nodelist);" />
      <MemberSignature Language="F#" Value="abstract member LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit&#xA;override this.LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit" Usage="claimsAuthenticationManager.LoadCustomConfiguration nodelist" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IdentityModel.Configuration.ICustomIdentityConfiguration.LoadCustomConfiguration(System.Xml.XmlNodeList)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodelist" Type="System.Xml.XmlNodeList" />
      </Parameters>
      <Docs>
        <param name="nodelist">Die benutzerdefinierten Konfigurationselemente. Jeder Knoten in der Liste ist vom Typ <see cref="T:System.Xml.XmlElement" />.</param>
        <summary>Lädt beim Überschreiben in einer abgeleiteten Klasse die benutzerdefinierte Konfiguration aus XML ab.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration%2A> Methode wird von der Konfigurationsinfrastruktur aufgerufen. Wenn diese Methode aufgerufen wird, die `nodelist` enthält der obersten Ebene der untergeordneten Elemente der [ &lt;"ClaimsAuthenticationManager"&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthenticationmanager.md) Element aus der Konfigurationsdatei. Jedes dieser Elemente kann wiederum enthalten Attribute oder untergeordnete Elemente abhängig von dem Konfigurationsschema, die, das Sie für die abgeleitete Klasse zu definieren. Wenn keine untergeordneten Elemente unter angezeigt werden. die `<claimsAuthenticationManager>` Element in der Konfigurationsdatei wird diese Methode wird nicht aufgerufen.  
  
 Die Standardimplementierung löst eine <xref:System.NotImplementedException>. Überschreiben Sie diese Methode in der abgeleiteten Klasse auf die Initialisierung Ihrer anspruchsauthentifizierungs-Manager aus einer Konfigurationsdatei aktivieren. Die Konfigurationselemente können z. B. eine Richtlinie angewendet werden, bei der Authentifizierung eines anforderungsprinzipal beschreiben; oder sie können verwendet werden, um einem Attributspeicher verweisen aus dem sind zusätzliche Ansprüche dem Prinzipal hinzugefügt werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="ClaimsAuthenticationManager" FullName="System.Security.Claims.ClaimsAuthenticationManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="27c8eff9480ebd78c8c71a7eb2fffa5c849843fe" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83953260" /></Metadata><TypeSignature Language="C#" Value="public class ClaimsAuthenticationManager : System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ClaimsAuthenticationManager extends System.Object implements class System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="DocId" Value="T:System.Security.Claims.ClaimsAuthenticationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class ClaimsAuthenticationManager&#xA;Implements ICustomIdentityConfiguration" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClaimsAuthenticationManager : System::IdentityModel::Configuration::ICustomIdentityConfiguration" />
  <TypeSignature Language="F#" Value="type ClaimsAuthenticationManager = class&#xA;    interface ICustomIdentityConfiguration" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IdentityModel.Configuration.ICustomIdentityConfiguration</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Definiert die Basisimplementierung für einen Anspruchsauthentifizierungs-Manager. Der Anspruchsauthentifizierungs-Manager stellt einen Bereich in der Anspruchsverarbeitungs-Pipeline zur Anwendung von Ablauflogik (Filtern, Validierung, Erweiterung) für die Anspruchsauflistung im eingehenden Prinzipal bereit, bevor die Ausführung den Anwendungscode erreicht.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der anspruchsauthentifizierungs-Manager stellt einen Erweiterbarkeits Punkt in der Anspruchs Verarbeitungs Pipeline der Anwendung bereit, mit dem Sie überprüfen, Filtern, ändern, eingehende Ansprüche überprüfen, Filtern, ändern, eingehende Ansprüche einfügen oder neue Ansprüche in den Satz der Ansprüche einfügen können, die von einer <xref:System.Security.Claims.ClaimsPrincipal> vorgelegt werden, bevor der Sie können sogar eine benutzerdefinierte Implementierung von <xref:System.Security.Claims.ClaimsPrincipal> zurückgeben, wenn Ihre RP-Anwendung dies erfordert. Die Standard Implementierung, die von der <xref:System.Security.Claims.ClaimsAuthenticationManager>-Klasse bereitgestellt wird, gibt die Ansprüche in der <xref:System.Security.Claims.ClaimsPrincipal> unverändert zurück; Allerdings können Sie von dieser Klasse ableiten und die <xref:System.Security.Claims.ClaimsAuthenticationManager.Authenticate%2A>-Methode außer Kraft setzen, um die Ansprüche im <xref:System.Security.Claims.ClaimsPrincipal> zu ändern (oder um ein benutzerdefiniertes <xref:System.Security.Claims.ClaimsPrincipal>zurückzugeben).  
  
 Ein typischer Grund für die Erstellung eines benutzerdefinierten Anspruchs Authentifizierungs-Managers ist das Hinzufügen, entfernen oder Transformieren von Ansprüchen auf der Grundlage von Informationen, die nur von bekannt sind oder von der RP-Anwendung möglicherweise besser verwaltet werden. Beispielsweise kann ein Verlauf von Kunden Käufen in einer Einkaufswagen Anwendung in einer von der RP-Anwendung verwalteten DatenbankDatenbank gespeichert und dann dem Anspruchs Prinzipal hinzugefügt werden, der vom anspruchsauthentifizierungs-Manager basierend auf dem Wert eines Namens Anspruchs im eingehenden Prinzipal zurückgegeben wurde.  
  
 Sie können Ihre Anwendung so konfigurieren, dass eine `ClaimsAuthenticationManager` entweder Programm gesteuert mithilfe der <xref:System.IdentityModel.Configuration.IdentityConfiguration>-Klasse oder in der Konfiguration über das [&lt;ClaimsAuthenticationManager-&gt;](/dotnet/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthenticationmanager) Element (das ein untergeordnetes Element des&lt;-Elements [&gt;identityconfiguration](/dotnet/framework/configure-apps/file-schema/windows-identity-foundation/identityconfiguration) ist) verwendet wird. Sie können die <xref:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration%2A>-Methode überschreiben, um die Verarbeitung für benutzerdefinierte untergeordnete Elemente des `<claimsAuthenticationManager>`-Elements bereitzustellen, über das der benutzerdefinierte Manager konfiguriert werden kann. Die Basis Implementierung von <xref:System.Security.Claims.ClaimsAuthenticationManager> behandelt keine untergeordneten Elemente.  
  
 Wenn Sie Ihre Anwendung für die Verwendung eines Anspruchs Authentifizierungs-Managers konfigurieren, wird sichergestellt, dass Sie von der Anforderungs Pipeline von Windows Identity Foundation (WIF) aufgerufen wird.  
  
   
  
## Examples  
 Der folgende Code zeigt einen einfachen anspruchsauthentifizierungs-Manager, der dem eingehenden Prinzipal einen Rollen Anspruch hinzufügt, ohne eine Prüfung der eingehenden Ansprüche auszuführen. 
  
 [!code-csharp[WifWebApplication1#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifwebapplication1/cs/myclaimsauthenticationmanager/simpleclaimsauthenticatonmanager.cs#1)]  
  
 Der folgende XML-Code zeigt das `<claimsAuthenticationManager>` Element.  
  
```xml  
<system.identityModel>  
  <identityConfiguration>  
    <claimsAuthenticationManager type="MyClaimsAuthenticationManager.SimpleClaimsAuthenticatonManager, MyClaimsAuthenticationManager" />  
  
    ...  
  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClaimsAuthenticationManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthenticationManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ClaimsAuthenticationManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der Klasse <see cref="T:System.Security.Claims.ClaimsAuthenticationManager" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Authenticate">
      <MemberSignature Language="C#" Value="public virtual System.Security.Claims.ClaimsPrincipal Authenticate (string resourceName, System.Security.Claims.ClaimsPrincipal incomingPrincipal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.Claims.ClaimsPrincipal Authenticate(string resourceName, class System.Security.Claims.ClaimsPrincipal incomingPrincipal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthenticationManager.Authenticate(System.String,System.Security.Claims.ClaimsPrincipal)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Authenticate (resourceName As String, incomingPrincipal As ClaimsPrincipal) As ClaimsPrincipal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::Claims::ClaimsPrincipal ^ Authenticate(System::String ^ resourceName, System::Security::Claims::ClaimsPrincipal ^ incomingPrincipal);" />
      <MemberSignature Language="F#" Value="abstract member Authenticate : string * System.Security.Claims.ClaimsPrincipal -&gt; System.Security.Claims.ClaimsPrincipal&#xA;override this.Authenticate : string * System.Security.Claims.ClaimsPrincipal -&gt; System.Security.Claims.ClaimsPrincipal" Usage="claimsAuthenticationManager.Authenticate (resourceName, incomingPrincipal)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Claims.ClaimsPrincipal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceName" Type="System.String" />
        <Parameter Name="incomingPrincipal" Type="System.Security.Claims.ClaimsPrincipal" />
      </Parameters>
      <Docs>
        <param name="resourceName">Die Adresse der Ressource, die angefordert wird.</param>
        <param name="incomingPrincipal">Der Anspruchs-Prinzipal, der den authentifizierten Benutzer darstellt, der versucht, auf die Ressource zuzugreifen.</param>
        <summary>Gibt beim Überschreiben in einer abgeleiteten Klasse ein <see cref="T:System.Security.Claims.ClaimsPrincipal" />-Objekt zurück, das mit den Anforderungen der RP-Anwendung konsistent ist. Die Standardimplementierung ändert nicht das eingehende <see cref="T:System.Security.Claims.ClaimsPrincipal" />-Objekt.</summary>
        <returns>Ein Anspruchs-Prinzipal, der alle Änderungen enthält, die für die RP-Anwendung erforderlich sind. Die Standardimplementierung gibt den eingehenden Anspruchsprinzipal unverändert zurück.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Security.Claims.ClaimsAuthenticationManager.Authenticate%2A>-Methode wird von der Anforderungs Verarbeitungs Pipeline aufgerufen. Sie können diese Methode in einer abgeleiteten Klasse überschreiben, um Ansprüche gemäß der Richtlinie Ihrer RP-Anwendung zu filtern, zu ändern oder in den Anspruchs Prinzipal einzufügen. Abhängig von den Anforderungen der RP-Anwendung können Sie sogar eine benutzerdefinierte Implementierung von <xref:System.Security.Claims.ClaimsPrincipal>zurückgeben.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadCustomConfiguration">
      <MemberSignature Language="C#" Value="public virtual void LoadCustomConfiguration (System.Xml.XmlNodeList nodelist);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadCustomConfiguration(class System.Xml.XmlNodeList nodelist) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration(System.Xml.XmlNodeList)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub LoadCustomConfiguration (nodelist As XmlNodeList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void LoadCustomConfiguration(System::Xml::XmlNodeList ^ nodelist);" />
      <MemberSignature Language="F#" Value="abstract member LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit&#xA;override this.LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit" Usage="claimsAuthenticationManager.LoadCustomConfiguration nodelist" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IdentityModel.Configuration.ICustomIdentityConfiguration.LoadCustomConfiguration(System.Xml.XmlNodeList)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodelist" Type="System.Xml.XmlNodeList" />
      </Parameters>
      <Docs>
        <param name="nodelist">Die benutzerdefinierten Konfigurationselemente. Jeder Knoten in der Liste ist vom Typ <see cref="T:System.Xml.XmlElement" />.</param>
        <summary>Lädt beim Überschreiben in einer abgeleiteten Klasse die benutzerdefinierte Konfiguration aus XML ab.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration%2A>-Methode wird von der-Konfigurations Infrastruktur aufgerufen. Wenn diese Methode aufgerufen wird, enthält die `nodelist` die untergeordneten Elemente der obersten Ebene des [&lt;ClaimsAuthenticationManager](/dotnet/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthenticationmanager) -Elements&gt;aus der Konfigurationsdatei. Jedes dieser Elemente kann wiederum Attribute oder untergeordnete Elemente enthalten, abhängig vom Konfigurations Schema, das Sie für die abgeleitete Klasse definieren. Wenn unter dem `<claimsAuthenticationManager>`-Element in der Konfigurationsdatei keine untergeordneten Elemente angezeigt werden, wird diese Methode nicht aufgerufen.  
  
 Die Standard Implementierung löst eine <xref:System.NotImplementedException>aus. Überschreiben Sie diese Methode in der abgeleiteten Klasse, damit der anspruchsauthentifizierungs-Manager von einer Konfigurationsdatei initialisiert werden kann. Beispielsweise können die Konfigurationselemente eine Richtlinie beschreiben, die beim Authentifizieren eines Anspruchs Prinzipals befolgt werden soll. oder Sie können verwendet werden, um auf einen Attribut Speicher zu verweisen, aus dem dem Prinzipal weitere Ansprüche hinzugefügt werden sollen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

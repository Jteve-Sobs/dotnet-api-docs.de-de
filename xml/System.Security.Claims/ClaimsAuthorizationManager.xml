<Type Name="ClaimsAuthorizationManager" FullName="System.Security.Claims.ClaimsAuthorizationManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2502b02e9ef213860055f7bdb25c89cdb9f0b210" /><Meta Name="ms.sourcegitcommit" Value="397961a0164281b579f68064c3bb66c071f374d9" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="07/14/2020" /><Meta Name="ms.locfileid" Value="86361870" /></Metadata><TypeSignature Language="C#" Value="public class ClaimsAuthorizationManager : System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ClaimsAuthorizationManager extends System.Object implements class System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="DocId" Value="T:System.Security.Claims.ClaimsAuthorizationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class ClaimsAuthorizationManager&#xA;Implements ICustomIdentityConfiguration" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClaimsAuthorizationManager : System::IdentityModel::Configuration::ICustomIdentityConfiguration" />
  <TypeSignature Language="F#" Value="type ClaimsAuthorizationManager = class&#xA;    interface ICustomIdentityConfiguration" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IdentityModel.Configuration.ICustomIdentityConfiguration</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Definiert die Basisimplementierung für einen Anspruchsautorisierungs-Manager.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die- <xref:System.Security.Claims.ClaimsAuthorizationManager> Klasse stellt die Basis Implementierung für einen Anspruchs Autorisierungs-Manager bereit. Ein Anspruchs Autorisierungs-Manager kann in den folgenden beiden Szenarien verwendet werden:  
  
-   In webbasierten Anwendungen und Diensten kann ein Anspruchs Autorisierungs-Manager zur Verarbeitungs Pipeline hinzugefügt werden, um einen Erweiterbarkeits Punkt bereitzustellen, von dem aus Sie den Zugriff auf eine Ressource gemäß dem Wert eingehender Ansprüche autorisieren können, bevor der Anwendungscode aufgerufen wird, der die angeforderte Ressource tatsächlich implementiert.  
  
-   Wenn Sie die <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> -Klasse oder die- <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> Klasse verwenden, um entweder imperative oder deklarative Anspruchs basierte Zugriffs Überprüfungen in Ihrem Code auszuführen, wird der anspruchsautorisierungs-Manager, der für Ihre Anwendung konfiguriert ist, vom System aufgerufen, um die Überprüfung durchzuführen. Anspruchs basierte Zugriffs Überprüfungen können sowohl in webbasierten Anwendungen als auch in Desktop Anwendungen ausgeführt werden.  
  
 Die Standard Implementierung, die von der-Klasse bereitgestellt wird, <xref:System.Security.Claims.ClaimsAuthorizationManager> autorisiert den Zugriff für jeden dargestellten Anspruch. Sie können jedoch von dieser Klasse ableiten und die- <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A> Methode überschreiben, um Ihre eigene Autorisierungs Logik bereitzustellen.  
  
 Die Verwendung eines Anspruchs Autorisierungs-Managers ist optional. Sie können Ihre Anwendung so konfigurieren, dass Sie einen Anspruchs Autorisierungs-Manager entweder Programm gesteuert mithilfe der- <xref:System.IdentityModel.Configuration.IdentityConfiguration> Klasse oder deklarativ verwendet, indem Sie das [ &lt; &gt; ClaimsAuthorizationManager](/dotnet/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager) -Element angeben, das ein untergeordnetes Element des [ &lt; identityconfiguration &gt; ](/dotnet/framework/configure-apps/file-schema/windows-identity-foundation/identityconfiguration) -Elements in der Anwendungs Konfigurationsdatei ist. Wenn es sich bei Ihrer Anwendung um eine Website oder eine Webanwendung handelt, die in Internetinformationsdienste (IIS) gehostet wird, müssen Sie auch den <xref:System.IdentityModel.Services.ClaimsAuthorizationModule> in der ASP.net-http-Modul Auflistung hinzufügen.  
  
> [!IMPORTANT]
>  Wenn Sie die- <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> Klasse oder die- <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> Klasse verwenden, ist der anspruchsautorisierungs-Manager, der verwendet wird, um die Zugriffs Überprüfung auszuführen, der, der in der Identitäts Konfiguration unter der-Eigenschaft angegeben ist <xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration%2A?displayProperty=nameWithType> . In einer Konfigurationsdatei ist dies der `<identityConfiguration>` Abschnitt, auf den vom Default-Element verwiesen wird `<federationConfiguration>` . Dies gilt auch für Windows Communication Foundation (WCF)-Dienste und Desktop Anwendungen.  
  
 Die- <xref:System.Security.Claims.ClaimsAuthorizationManager> Basisklasse nimmt keine zusätzliche Konfiguration an; Sie können jedoch die <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> in abgeleiteten Klassen überschreiben, um die Initialisierung Ihres anspruchsautorisierungs-Managers aus untergeordneten Elementen von bereitzustellen `<claimsAuthorizationElement>` . Das typische Szenario besteht darin, diese untergeordneten Elemente zu verwenden, um Autorisierungs Richtlinien anzugeben, die bestimmen, welche Anspruchs Typen und-Werte erforderlich sind, um Zugriff auf die Ressource zu erhalten. Dies ist keine feste Anforderung, Sie können jedoch auch jede beliebige Verwendung und Syntax definieren, die für Ihre Implementierung sinnvoll ist.  
  
   
  
## Examples  
 Die in den Themen verwendeten Codebeispiele stammen <xref:System.Security.Claims.ClaimsAuthorizationManager> aus dem `Claims Based Authorization` Beispiel. Dieses Beispiel stellt einen benutzerdefinierten anspruchsautorisierungs-Manager bereit, der auf der Grundlage einer Richtlinie, die in der Konfiguration angegeben ist, unter Der Autorisierungs-Manager für benutzerdefinierte Ansprüche besteht aus drei grundlegenden Komponenten: einer von abgeleiteten Klasse, die <xref:System.Security.Claims.ClaimsAuthorizationManager> den-Manager implementiert, der `ResourceAction` -Klasse, die eine Ressource und eine Aktion verbindet, und einem Richtlinien Leser, der die in der Konfigurationsdatei angegebene Richtlinie liest und kompiliert. Diese kompilierte Richtlinie kann dann vom anspruchsautorisierungs-Manager zum Auswerten eines Prinzipals verwendet werden, um den Zugriff auf Ressourcen zu autorisieren. Nicht alle Elemente werden aus Gründen der Kürze angezeigt. Informationen zu diesem Beispiel und anderen Beispielen, die für WIF verfügbar sind, und Informationen dazu, wo Sie heruntergeladen werden, finden Sie unter [Beispiel Index für WIF-Code](https://docs.microsoft.com/previous-versions/dotnet/framework/security/wif-code-sample-index)  
  
 Der folgende Code zeigt die Implementierung des benutzerdefinierten Anspruchs Autorisierungs-Managers. Die <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> -Methode liest und kompiliert die Richtlinie aus der Konfiguration mithilfe der Policy Reader Helper-Klasse (nicht gezeigt), und die- <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A> Methode gewährt oder verweigert den Zugriff basierend auf dieser Richtlinie.  
  
 [!code-csharp[WifClaimsBasedAuthorization#2](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#2)]  
  
 Der folgende Code zeigt die-Klasse, die `ResourceAction` vom benutzerdefinierten Anspruchs-Manager verwendet wird.  
  
 [!code-csharp[WifClaimsBasedAuthorization#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/resourceaction.cs#1)]  
  
 Der folgende XML-Code zeigt, wie Sie den oben gezeigten anspruchsautorisierungs-Manager für eine in IIS 7,5 gehostete Webanwendung konfigurieren. Es werden nur die Elemente angezeigt, die für die Konfiguration des Anspruchs Autorisierungs-Managers spezifisch sind. Beachten Sie, dass der Pipeline unter dem-Element ein Verweis auf die- <xref:System.IdentityModel.Services.ClaimsAuthorizationModule> Klasse hinzugefügt werden muss `<system.Webserver>` . Für Websites und Anwendungen, die in IIS-Versionen vor IIS 7 gehostet werden, können die Module der Pipeline unter dem-Element hinzugefügt werden `<system.Web>` . Diese Konfiguration wird angezeigt, aber auskommentiert.  
  
 Die vom Anspruchs Autorisierungs-Manager verwendete Richtlinie wird durch benutzerdefinierte `<policy>` Elemente unter dem [ &lt; ClaimsAuthorizationManager &gt; ](/dotnet/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager) -Element angegeben. In der ersten Richtlinie muss der Prinzipal einen der angegebenen Ansprüche besitzen, um die angegebene Aktion für die angegebene Ressource auszuführen. In der zweiten Richtlinie muss der Prinzipal beide Ansprüche besitzen, um die angegebene Aktion für die angegebene Ressource ausführen zu können. In allen anderen Fällen erhält der Prinzipal automatisch Zugriff, unabhängig von den Ansprüchen, die er besitzt.  
  
```  
<configuration>  
  <configSections>  
    <!--WIF 4.5 sections -->  
    <section name="system.identityModel" type="System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
    ...  
  
  </configSections>  
  
  ...  
  
  <system.web>  
    <httpModules>  
      <!--WIF 4.5 modules -->  
      <!--Not needed here for IIS >= 7 -->  
      <!--<add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>-->  
    </httpModules>  
  </system.web>  
  
  ...  
  
  <system.webServer>  
    <modules>  
      <!--WIF 4.5 modules -->  
      <add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>  
    </modules>  
  </system.webServer>  
  
  ...  
  
  <!-- WIF 4.5 s.im section-->  
  <system.identityModel>  
    <identityConfiguration>  
      <claimsAuthorizationManager type="ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary">  
        <policy resource="http://localhost:28491/Developers.aspx" action="GET">  
          <or>  
            <claim claimType="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" claimValue="developer" />  
            <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
          </or>  
        </policy>  
        <policy resource="http://localhost:28491/Administrators.aspx" action="GET">  
          <and>  
            <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
            <claim claimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country" claimValue="USA" />  
          </and>  
        </policy>  
        <policy resource="http://localhost:28491/Default.aspx" action="GET">  
        </policy>  
        <policy resource="http://localhost:28491/" action="GET">  
        </policy>  
        <policy resource="http://localhost:28491/Claims.aspx" action="GET">  
        </policy>  
      </claimsAuthorizationManager>  
  
      ...  
  
    </identityConfiguration>  
  </system.identityModel>  
  ...  
  
</configuration><configuration>  
  <configSections>  
    <!--WIF 4.5 sections -->  
    <section name="system.identityModel" type="System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
    ...  
  
  </configSections>  
  
  ...  
  
  <system.web>  
    <httpModules>  
      <!--WIF 4.5 modules -->  
      <!--Not needed here for IIS >= 7 -->  
      <!--<add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>-->  
    </httpModules>  
  </system.web>  
  
  ...  
  
  <system.webServer>  
    <modules>  
      <!--WIF 4.5 modules -->  
      <add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>  
    </modules>  
  </system.webServer>  
  
  ...  
  
  <!-- WIF 4.5 s.im section-->  
  <system.identityModel>  
    <identityConfiguration>  
      <claimsAuthorizationManager type="MyClaimsAuthorizationManager.SimpleClaimsAuthorizationManager, MyClaimsAuthorizationManager" />  
      ...  
  
  </system.identityModel>  
  ...  
  
</configuration>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClaimsAuthorizationManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthorizationManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ClaimsAuthorizationManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public virtual bool CheckAccess (System.Security.Claims.AuthorizationContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CheckAccess(class System.Security.Claims.AuthorizationContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess(System.Security.Claims.AuthorizationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CheckAccess (context As AuthorizationContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CheckAccess(System::Security::Claims::AuthorizationContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member CheckAccess : System.Security.Claims.AuthorizationContext -&gt; bool&#xA;override this.CheckAccess : System.Security.Claims.AuthorizationContext -&gt; bool" Usage="claimsAuthorizationManager.CheckAccess context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Security.Claims.AuthorizationContext" />
      </Parameters>
      <Docs>
        <param name="context">Der Autorisierungskontext, der den Betreff, die Ressource und die Aktion enthält, die für die Autorisierung überprüft werden sollen.</param>
        <summary>Überprüft beim Implementieren in einer abgeleiteten Klasse die Autorisierung für den Antragsteller im angegebenen Kontext, die angegebene Aktion für die angegebene Ressource auszuführen.</summary>
        <returns><see langword="true" />, wenn das Subjekt berechtigt ist, die angegebene Ressource für die angegebene Aktion auszuführen; andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Basis Implementierung gibt immer zurück `true` , die den Zugriff autorisiert. Sie können diese Methode in einer abgeleiteten Klasse überschreiben, um den Zugriff basierend auf den Anforderungen Ihrer RP-Anwendung zu autorisieren. Wenn diese Methode zurückgibt `false` , gibt Windows Identity Foundation (WIF) einen nicht autorisierten Fehler an den Aufrufer zurück; andernfalls wird die Ausführung an die RP-Anwendung übergeben.  
  
   
  
## Examples  
 Die in den Themen verwendeten Codebeispiele stammen <xref:System.Security.Claims.ClaimsAuthorizationManager> aus dem `Claims Based Authorization` Beispiel. Dieses Beispiel stellt einen benutzerdefinierten anspruchsautorisierungs-Manager bereit, der auf der Grundlage einer Richtlinie, die in der Konfiguration angegeben ist, unter Der Autorisierungs-Manager für benutzerdefinierte Ansprüche besteht aus drei grundlegenden Komponenten: einer von abgeleiteten Klasse, die <xref:System.Security.Claims.ClaimsAuthorizationManager> den-Manager implementiert, der `ResourceAction` -Klasse, die eine Ressource und eine Aktion verbindet, und einem Richtlinien Leser, der die in der Konfigurationsdatei angegebene Richtlinie liest und kompiliert. Diese kompilierte Richtlinie kann dann vom anspruchsautorisierungs-Manager zum Auswerten eines Prinzipals verwendet werden, um den Zugriff auf Ressourcen zu autorisieren. Nicht alle Elemente werden aus Gründen der Kürze angezeigt. Informationen zu diesem Beispiel und anderen Beispielen, die für WIF verfügbar sind, und Informationen dazu, wo Sie heruntergeladen werden, finden Sie unter [Beispiel Index für WIF-Code](https://docs.microsoft.com/previous-versions/dotnet/framework/security/wif-code-sample-index)  
  
 Der folgende Code zeigt das Überschreiben der- <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A> Methode. Diese Methode gewährt oder verweigert den Zugriff basierend auf einer Richtlinie, die in der Konfigurationsdatei gelesen und kompiliert wird.  
  
 [!code-csharp[WifClaimsBasedAuthorization#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#3)]  
[!code-csharp[WifClaimsBasedAuthorization#5](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#5)]  
  
 Der folgende Code zeigt die-Klasse, die `ResourceAction` vom benutzerdefinierten Anspruchs-Manager verwendet wird.  
  
 [!code-csharp[WifClaimsBasedAuthorization#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/resourceaction.cs#1)]  
  
 Die vom Anspruchs Autorisierungs-Manager verwendete Richtlinie wird durch benutzerdefinierte `<policy>` Elemente unter dem [ &lt; ClaimsAuthorizationManager &gt; ](/dotnet/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager) -Element angegeben. Diese Richtlinie wird von der-Methode gelesen und kompiliert <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> . In der ersten Richtlinie muss der Prinzipal einen der angegebenen Ansprüche besitzen, um die angegebene Aktion für die angegebene Ressource auszuführen. In der zweiten Richtlinie muss der Prinzipal beide Ansprüche besitzen, um die angegebene Aktion für die angegebene Ressource ausführen zu können. In allen anderen Fällen erhält der Prinzipal automatisch Zugriff, unabhängig von den Ansprüchen, die er besitzt.  
  
```  
<system.identityModel>  
  <identityConfiguration>  
    <claimsAuthorizationManager type="ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary">  
      <policy resource="http://localhost:28491/Developers.aspx" action="GET">  
        <or>  
          <claim claimType="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" claimValue="developer" />  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
        </or>  
      </policy>  
      <policy resource="http://localhost:28491/Administrators.aspx" action="GET">  
        <and>  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
          <claim claimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country" claimValue="USA" />  
        </and>  
      </policy>  
      <policy resource="http://localhost:28491/Default.aspx" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/Claims.aspx" action="GET">  
      </policy>  
    </claimsAuthorizationManager>  
  
    ...  
  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadCustomConfiguration">
      <MemberSignature Language="C#" Value="public virtual void LoadCustomConfiguration (System.Xml.XmlNodeList nodelist);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadCustomConfiguration(class System.Xml.XmlNodeList nodelist) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration(System.Xml.XmlNodeList)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub LoadCustomConfiguration (nodelist As XmlNodeList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void LoadCustomConfiguration(System::Xml::XmlNodeList ^ nodelist);" />
      <MemberSignature Language="F#" Value="abstract member LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit&#xA;override this.LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit" Usage="claimsAuthorizationManager.LoadCustomConfiguration nodelist" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IdentityModel.Configuration.ICustomIdentityConfiguration.LoadCustomConfiguration(System.Xml.XmlNodeList)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodelist" Type="System.Xml.XmlNodeList" />
      </Parameters>
      <Docs>
        <param name="nodelist">Die benutzerdefinierten Konfigurationselemente. Jeder Knoten in der Liste ist vom Typ <see cref="T:System.Xml.XmlElement" />.</param>
        <summary>Lädt beim Überschreiben in einer abgeleiteten Klasse die benutzerdefinierte Konfiguration aus XML ab.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die- <xref:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration%2A> Methode wird von der-Konfigurations Infrastruktur aufgerufen. Wenn diese Methode aufgerufen wird, enthält die untergeordneten `nodelist` Elemente der obersten Ebene des [ &lt; ClaimsAuthorizationManager &gt; ](/dotnet/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager) -Elements aus der Konfigurationsdatei. Jedes dieser Elemente kann wiederum Attribute oder untergeordnete Elemente enthalten, abhängig vom Konfigurations Schema, das Sie für die abgeleitete Klasse definieren. Wenn unter dem- `<claimsAuthorizationManager>` Element in der Konfigurationsdatei keine untergeordneten Elemente angezeigt werden, wird diese Methode nicht aufgerufen.  
  
 Die Standard Implementierung löst eine aus <xref:System.NotImplementedException> . Überschreiben Sie diese Methode in der abgeleiteten Klasse, um die Initialisierung Ihres Anspruchs Autorisierungs-Managers aus einer Konfigurationsdatei zu aktivieren. In der Regel werden die Konfigurationselemente verwendet, um eine Autorisierungs Richtlinie auszudrücken. Sie können jedoch Elemente definieren und in beliebiger Weise verwenden, die auf der Grundlage der Anforderungen Ihrer Anwendung sinnvoll ist.  
  
   
  
## Examples  
 Die in den Themen verwendeten Codebeispiele stammen <xref:System.Security.Claims.ClaimsAuthorizationManager> aus dem `Claims Based Authorization` Beispiel. Dieses Beispiel stellt einen benutzerdefinierten anspruchsautorisierungs-Manager bereit, der auf der Grundlage einer Richtlinie, die in der Konfiguration angegeben ist, unter Der Autorisierungs-Manager für benutzerdefinierte Ansprüche besteht aus drei grundlegenden Komponenten: einer von abgeleiteten Klasse, die <xref:System.Security.Claims.ClaimsAuthorizationManager> den-Manager implementiert, der `ResourceAction` -Klasse, die eine Ressource und eine Aktion verbindet, und einem Richtlinien Leser, der die in der Konfigurationsdatei angegebene Richtlinie liest und kompiliert. Diese kompilierte Richtlinie kann dann vom anspruchsautorisierungs-Manager zum Auswerten eines Prinzipals verwendet werden, um den Zugriff auf Ressourcen zu autorisieren. Nicht alle Elemente werden aus Gründen der Kürze angezeigt. Informationen zu diesem Beispiel und anderen Beispielen, die für WIF verfügbar sind, und Informationen dazu, wo Sie heruntergeladen werden, finden Sie unter [Beispiel Index für WIF-Code](https://docs.microsoft.com/previous-versions/dotnet/framework/security/wif-code-sample-index)  
  
 Der folgende Code zeigt das Überschreiben der- <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> Methode. Diese Methode verwendet eine hilfsrichtlinienleseklasse (nicht gezeigt) zum Lesen und Kompilieren von Autorisierungs Richtlinien, die in der Konfigurationsdatei angegeben sind. Die Richtlinien werden einem Wörterbuch hinzugefügt, und der Zugriff erfolgt über ein `ResourceAction` Schlüsselobjekt, das aus der Ressource und der Aktion erstellt wird, für die Sie vorgesehen sind.  
  
 [!code-csharp[WifClaimsBasedAuthorization#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#3)]  
[!code-csharp[WifClaimsBasedAuthorization#4](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#4)]  
  
 Der folgende Code zeigt die-Klasse, die `ResourceAction` vom benutzerdefinierten Anspruchs-Manager verwendet wird.  
  
 [!code-csharp[WifClaimsBasedAuthorization#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/resourceaction.cs#1)]  
  
 Die vom Anspruchs Autorisierungs-Manager verwendete Richtlinie wird durch benutzerdefinierte `<policy>` Elemente unter dem [ &lt; ClaimsAuthorizationManager &gt; ](/dotnet/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager) -Element angegeben. Diese Richtlinie wird von der-Methode gelesen und kompiliert <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> . In der ersten Richtlinie muss der Prinzipal einen der angegebenen Ansprüche besitzen, um die angegebene Aktion für die angegebene Ressource auszuführen. In der zweiten Richtlinie muss der Prinzipal beide Ansprüche besitzen, um die angegebene Aktion für die angegebene Ressource ausführen zu können. In allen anderen Fällen erhält der Prinzipal automatisch Zugriff, unabhängig von den Ansprüchen, die er besitzt.  
  
```  
<system.identityModel>  
  <identityConfiguration>  
    <claimsAuthorizationManager type="ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary">  
      <policy resource="http://localhost:28491/Developers.aspx" action="GET">  
        <or>  
          <claim claimType="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" claimValue="developer" />  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
        </or>  
      </policy>  
      <policy resource="http://localhost:28491/Administrators.aspx" action="GET">  
        <and>  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
          <claim claimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country" claimValue="USA" />  
        </and>  
      </policy>  
      <policy resource="http://localhost:28491/Default.aspx" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/Claims.aspx" action="GET">  
      </policy>  
    </claimsAuthorizationManager>  
  
    ...  
  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

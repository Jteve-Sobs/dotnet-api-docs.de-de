<Type Name="XslCompiledTransform" FullName="System.Xml.Xsl.XslCompiledTransform">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7f0c36a3761347dc57d94d28602e9ed1537a5ca2" />
    <Meta Name="ms.sourcegitcommit" Value="840fd2a3bbdce4224fcbae5a3cea9a7a89e685f5" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="10/24/2018" />
    <Meta Name="ms.locfileid" Value="49962305" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class XslCompiledTransform" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed XslCompiledTransform extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Xsl.XslCompiledTransform" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XslCompiledTransform" />
  <TypeSignature Language="C++ CLI" Value="public ref class XslCompiledTransform sealed" />
  <TypeSignature Language="F#" Value="type XslCompiledTransform = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Transformiert XML-Daten mithilfe eines XSLT-Stylesheets.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Xml.Xsl.XslCompiledTransform> Klasse ist ein XSLT-Prozessor, die XSLT 1.0-Syntax unterstützt. Es ist eine neue Implementierung, und enthält leistungsverbesserungen im Vergleich zu den veralteten <xref:System.Xml.Xsl.XslTransform> Klasse. Die Struktur der <xref:System.Xml.Xsl.XslCompiledTransform> Klasse ähnelt sehr der <xref:System.Xml.Xsl.XslTransform> Klasse. Die <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> Methode lädt und kompiliert das Stylesheet Stylesheets, während die <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> Methode führt die XSLT-Transformation.  
  
 Unterstützung der XSLT `document()` -Funktion und eingebetteter Skriptblöcke sind standardmäßig deaktiviert. Diese Features können aktiviert werden, durch das Erstellen einer <xref:System.Xml.Xsl.XsltSettings> Objekt und übergibt dieses an die <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> Methode.  
  
 Weitere Informationen finden Sie unter [mithilfe der Klasse "XslCompiledTransform"](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) und [Migrieren von der XslTransform-Klasse](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
## <a name="security-considerations"></a>Sicherheitsüberlegungen  
 Beim Erstellen einer Anwendung, die die <xref:System.Xml.Xsl.XslCompiledTransform>-Klasse verwendet, sollten Ihnen die folgenden Elemente und deren Auswirkungen bekannt sein:  
  
-   Die XSLT-Skriptverarbeitung ist standardmäßig deaktiviert. XSLT-Skripts sollten nur aktiviert werden, wenn eine Skriptunterstützung erforderlich ist und Sie mit einer vollständig vertrauenswürdigen Umgebung arbeiten.  
  
-   Die XSLT-`document()`-Funktion ist standardmäßig deaktiviert. Wenn Sie die `document()`-Funktion aktivieren, schränken Sie die verfügbaren Ressourcen ein, indem Sie der <xref:System.Xml.XmlSecureResolver>-Methode ein <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>-Objekt übergeben.  
  
-   Erweiterungsobjekte sind standardmäßig aktiviert. Wenn der <xref:System.Xml.Xsl.XsltArgumentList>-Methode ein <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>-Objekt übergeben wird, das Erweiterungsobjekte enthält, so werden diese verwendet.  
  
-   XSLT-Stylesheets können Verweise auf andere Dateien und eingebettete Skriptblöcke enthalten. Ein böswilliger Benutzer kann dies ausnutzen, indem er Daten oder Stylesheets bereitstellt, deren Verarbeitung die Ressourcen des Computers erschöpft.  
  
-   XSLT-Anwendungen, die in einer teilweise vertrauenswürdigen Umgebung ausgeführt werden, können einem Stylesheet-Spoofing ausgesetzt sein. Ein böswilliger Benutzer könnte z. B. ein Objekt mit einem schädlichen Stylesheet laden und es an einen anderen Benutzer übermitteln, der die <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>-Methode aufruft und die Transformation ausführt.  
  
 Diese Sicherheitsprobleme können durch Deaktivieren von Skripts oder der `document()`-Funktion bei aus nicht vertrauenswürdigen Quellen stammenden Stylesheets und durch das Abweisen von <xref:System.Xml.Xsl.XslCompiledTransform>-Objekten, XSLT-Stylesheets und XML-Quelldaten aus nicht vertrauernswürdigen Quellen reduziert werden.  
  
   
  
## Examples  
 Im folgende Beispiel führt eine Transformation, und es gibt in einer Datei.  
  
 [!code-csharp[XslCompiledTransform.Transform#1](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#1)]
 [!code-vb[XslCompiledTransform.Transform#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#1)]  
  
 Das Beispiel verwendet die folgenden beiden Eingabedateien:  
  
 `books.xml`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/books.xml#2)]  
  
 `output.xsl`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/output.xsl#3)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Die <see cref="T:System.Xml.Xsl.XslCompiledTransform" /> -Objekt threadsicher ist, sobald sie geladen wurde. Das heißt, nach der <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> Methode wurde erfolgreich abgeschlossen wurde, die <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Transform" /> Methode von mehreren Threads gleichzeitig aufgerufen werden kann.  
  
Wenn die <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> -Methode erneut aufgerufen wird, in einem Thread, während die <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Transform" /> Methode in einem anderen Thread aufgerufen wird die <see cref="T:System.Xml.Xsl.XslCompiledTransform" /> Objekt beendet wird, Ausführen der <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Transform" /> aufrufen, indem Sie Sie weiterhin den alten Status verwenden. Der neue Status wird verwendet, wenn die <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> Methode erfolgreich ausgeführt wird.  
  
 <block subset="none" type="note"><para>  
 Die <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> Methode ist nicht threadsicher, wenn von mehreren Threads gleichzeitig aufgerufen wird.  
  
</para></block></threadsafe>
    <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
    <altmember cref="T:System.Xml.Xsl.XsltMessageEncounteredEventArgs" />
    <altmember cref="N:System.Xml" />
    <related type="Article" href="http://msdn.microsoft.com/library/202f8820-224c-494f-b61e-cd127eac6e03">XSLT-Transformationen</related>
    <related type="Article" href="http://msdn.microsoft.com/library/e695047f-3c0f-4045-8708-5baea91cc380">XML-Dokumente und XML-Daten</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Xml.Xsl.XslCompiledTransform" />-Klasse.</summary>
        <related type="Article" href="http://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">Verwenden der XslCompiledTransform-Klasse</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XslCompiledTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XslCompiledTransform();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Xml.Xsl.XslCompiledTransform" />-Klasse.</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">Verwenden der XslCompiledTransform-Klasse</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XslCompiledTransform (bool enableDebug);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool enableDebug) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (enableDebug As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XslCompiledTransform(bool enableDebug);" />
      <MemberSignature Language="F#" Value="new System.Xml.Xsl.XslCompiledTransform : bool -&gt; System.Xml.Xsl.XslCompiledTransform" Usage="new System.Xml.Xsl.XslCompiledTransform enableDebug" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="enableDebug" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enableDebug">
          <see langword="true" />, wenn Debuginformationen generiert werden sollen, andernfalls <see langword="false" />. Wenn dies auf <see langword="true" /> festgelegt ist, können Sie das Stylesheet mit dem Debugger von Microsoft Visual Studio debuggen.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Xml.Xsl.XslCompiledTransform" />-Klasse mit der angegebenen Debugeinstellung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die folgenden Bedingungen müssen erfüllt sein, um den Code schrittweise und Debuggen des Stylesheets:  
  
-   Der `enableDebug`-Parameter ist auf `true` festgelegt.  
  
-   An das das Stylesheet übergeben die <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> Methode entweder als URI oder eine Implementierung von der <xref:System.Xml.XmlReader> Klasse, die implementiert die <xref:System.Xml.IXmlLineInfo> Schnittstelle. Die <xref:System.Xml.IXmlLineInfo> Schnittstelle wird implementiert, auf alle Textanalyse <xref:System.Xml.XmlReader> Objekte.  
  
     Das heißt, wenn das Stylesheet mit geladen wird ein <xref:System.Xml.XPath.IXPathNavigable> Objekt, z. B. eine <xref:System.Xml.XmlDocument> oder <xref:System.Xml.XPath.XPathDocument>, oder ein <xref:System.Xml.XmlReader> Implementierung, die nicht implementiert die <xref:System.Xml.IXmlLineInfo> -Schnittstelle, das Stylesheet kann nicht zum Debuggen.  
  
-   Die <xref:System.Xml.XmlResolver> verwendet, um das Format zu laden Blatt ist eine dateibasierte <xref:System.Xml.XmlResolver>, z. B. die <xref:System.Xml.XmlUrlResolver> (Dies ist die Standardeinstellung <xref:System.Xml.XmlResolver> ein, die die <xref:System.Xml.Xsl.XslCompiledTransform> Klasse).  
  
-   Das Stylesheet ist auf dem lokalen Computer oder im Intranet befinden.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, wie Sie die XSLT-Debuggen aktiviert wird.  
  
 [!code-csharp[XslCompiledTransform.Load#10](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#10)]
 [!code-vb[XslCompiledTransform.Load#10](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#10)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">Verwenden der XslCompiledTransform-Klasse</related>
      </Docs>
    </Member>
    <Member MemberName="CompileToType">
      <MemberSignature Language="C#" Value="public static System.CodeDom.Compiler.CompilerErrorCollection CompileToType (System.Xml.XmlReader stylesheet, System.Xml.Xsl.XsltSettings settings, System.Xml.XmlResolver stylesheetResolver, bool debug, System.Reflection.Emit.TypeBuilder typeBuilder, string scriptAssemblyPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.Compiler.CompilerErrorCollection CompileToType(class System.Xml.XmlReader stylesheet, class System.Xml.Xsl.XsltSettings settings, class System.Xml.XmlResolver stylesheetResolver, bool debug, class System.Reflection.Emit.TypeBuilder typeBuilder, string scriptAssemblyPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.CompileToType(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver,System.Boolean,System.Reflection.Emit.TypeBuilder,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::Compiler::CompilerErrorCollection ^ CompileToType(System::Xml::XmlReader ^ stylesheet, System::Xml::Xsl::XsltSettings ^ settings, System::Xml::XmlResolver ^ stylesheetResolver, bool debug, System::Reflection::Emit::TypeBuilder ^ typeBuilder, System::String ^ scriptAssemblyPath);" />
      <MemberSignature Language="F#" Value="static member CompileToType : System.Xml.XmlReader * System.Xml.Xsl.XsltSettings * System.Xml.XmlResolver * bool * System.Reflection.Emit.TypeBuilder * string -&gt; System.CodeDom.Compiler.CompilerErrorCollection" Usage="System.Xml.Xsl.XslCompiledTransform.CompileToType (stylesheet, settings, stylesheetResolver, debug, typeBuilder, scriptAssemblyPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerErrorCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" />
        <Parameter Name="settings" Type="System.Xml.Xsl.XsltSettings" />
        <Parameter Name="stylesheetResolver" Type="System.Xml.XmlResolver" />
        <Parameter Name="debug" Type="System.Boolean" />
        <Parameter Name="typeBuilder" Type="System.Reflection.Emit.TypeBuilder" />
        <Parameter Name="scriptAssemblyPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stylesheet">Ein <see cref="T:System.Xml.XmlReader" />, der auf den Anfang des zu kompilierenden Stylesheets gesetzt wurde.</param>
        <param name="settings">Die <see cref="T:System.Xml.Xsl.XsltSettings" />, die auf das Stylesheet angewendet werden. Wenn dieser Wert <see langword="null" /> ist, wird <see cref="P:System.Xml.Xsl.XsltSettings.Default" /> angewendet.</param>
        <param name="stylesheetResolver">Der <see cref="T:System.Xml.XmlResolver" /> zum Auflösen von Stylesheetmodulen, auf die in <see langword="xsl:import" />-Elementen und in <see langword="xsl:include" />-Elementen verwiesen wird. Wenn dieser Wert <see langword="null" /> ist, werden externe Ressourcen nicht aufgelöst.</param>
        <param name="debug">Durch Festlegen dieses Werts auf <see langword="true" /> das Debuggen des Stylesheets mit einem Debugger aktiviert.</param>
        <param name="typeBuilder">Der für die Stylesheetkompilierung verwendete <see cref="T:System.Reflection.Emit.TypeBuilder" />. Mit dem bereitgestellten TypeBuilder wird der resultierende Typ generiert.</param>
        <param name="scriptAssemblyPath">Der Basispfad für die Assemblys, die für <see langword="msxsl:script" />-Elemente generiert werden. Wenn nur eine Skriptassembly generiert wird, gibt dieser Parameter den Pfad für diese Assembly an. Bei mehreren Skriptassemblys wird ein unterscheidendes Suffix an den Dateinamen angehängt, um sicherzustellen, dass die Dateinamen der Assemblys eindeutig sind.</param>
        <summary>Kompiliert ein XSLT-Stylesheet in einen angegebenen Typ.</summary>
        <returns>Ein <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />-Objekt, das Compilerfehler und Warnungen als Ergebnisse aus der Kompilierung enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `xsltc.exe` Tool ist ein Wrapper um die <xref:System.Xml.Xsl.XslCompiledTransform.CompileToType%2A> Methode. Kompilieren von Stylesheets mit dem `xsltc.exe` erfüllt die Anforderungen der meisten Anwendungen, die die Verwendung des kompilierten Stylesheets zu nutzen. Die <xref:System.Xml.Xsl.XslCompiledTransform.CompileToType%2A> Methode sollte verwendet werden, wenn benutzerdefinierte Kompilierungstools erstellt.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Kompiliert das Stylesheet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obwohl die Gesamtleistung der <xref:System.Xml.Xsl.XslCompiledTransform>-Klasse besser ist als die der <xref:System.Xml.Xsl.XslTransform>-Klasse, ist die Leistung der <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>-Methode der <xref:System.Xml.Xsl.XslCompiledTransform>-Klasse möglicherweise langsamer als die <xref:System.Xml.Xsl.XslTransform.Load%2A>-Methode der <xref:System.Xml.Xsl.XslTransform>-Klasse, wenn sie zum ersten Mal für eine Transformation aufgerufen wird. Dies liegt daran, dass die XSLT-Datei zunächst kompiliert werden muss, bevor sie geladen wird. Weitere Informationen finden Sie im folgenden Blogbeitrag: [XslCompiledTransform Slower than XslTransform?](http://go.microsoft.com/fwlink/?LinkId=130590) (XslCompiledTransform langsamer als XslTransform)  
  
> [!NOTE]
>  Es gibt Unterschiede zwischen einer XSLT, die im Debugmodus kompiliert wurde, und einer im Releasemodus kompilierten XSLT. In einigen Fällen werden durch Stylesheets, die im Debugmodus kompiliert wurden, während <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> keine Fehler ausgelöst. Die Stylesheets schlagen jedoch später während <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> fehl. Das gleiche, im Releasemodus kompilierte Stylesheet schlägt während <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> fehl. Ein Beispiel für solches Verhalten ist, wenn eine Variable, die kein Knotengruppentyp ist, einem Ausdruck zugeordnet wird, der eine Knotengruppe erfordert.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (string stylesheetUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(string stylesheetUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheetUri As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::String ^ stylesheetUri);" />
      <MemberSignature Language="F#" Value="member this.Load : string -&gt; unit" Usage="xslCompiledTransform.Load stylesheetUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheetUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stylesheetUri">Der URI des Stylesheets.</param>
        <summary>Lädt und kompiliert das am angegebenen URI abgelegte Stylesheet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Xml.Xsl.XslCompiledTransform> Klasse unterstützt die XSLT 1.0-Syntax. XSLT-Stylesheet verwenden, muss die `http://www.w3.org/1999/XSL/Transform` Namespace.  
  
 Diese Methode hat das folgende Verhalten:  
  
-   Ein <xref:System.Xml.XmlUrlResolver> ohne Benutzer-Anmeldeinformationen wird verwendet, um den URI des Stylesheets aufgelöst und verarbeiten alle `xsl:import` oder `xsl:include` Elemente.  
  
-   Ein <xref:System.Xml.XmlReader> mit Standardeinstellungen zum Laden des Stylesheets verwendet wird. DTD-Verarbeitung ist deaktiviert, auf die <xref:System.Xml.XmlReader>. Wenn eine DTD-Verarbeitung erforderlich ist, erstellen Sie eine <xref:System.Xml.XmlReader> mit diesem Feature aktiviert, und übergeben es an der <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> Methode.  
  
-   Die `document()` Funktion ist deaktiviert.  
  
-   Eingebettete Skripts werden nicht unterstützt.  
  
 Können Sie die <xref:System.Xml.Xsl.XslCompiledTransform.Load%28System.String%2CSystem.Xml.Xsl.XsltSettings%2CSystem.Xml.XmlResolver%29> Überladung an eine <xref:System.Xml.XmlResolver> mit den Anmeldeinformationen für die erforderliche Authentifizierung oder andere XSLT-Einstellungen angeben.  
  
   
  
## Examples  
 Im folgende Beispiel führt eine Transformation, und es gibt in einer Datei.  
  
 [!code-csharp[XslCompiledTransform.Transform#1](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#1)]
 [!code-vb[XslCompiledTransform.Transform#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="stylesheetUri" />-Wert ist <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Das Stylesheet enthält einen Fehler.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Das Stylesheet kann nicht gefunden werden.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Der <paramref name="stylesheetUri" />-Wert enthält einen Dateinamen oder ein Verzeichnis, das nicht gefunden werden kann.</exception>
        <exception cref="T:System.Net.WebException">Der <paramref name="stylesheetUri" />-Wert kann nicht aufgelöst werden.  
  
- oder -  
Beim Verarbeiten der Anforderung ist ein Fehler aufgetreten.</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="stylesheetUri" /> ist kein gültiger URI.</exception>
        <exception cref="T:System.Xml.XmlException">Beim Laden des Stylesheets ist ein Analysefehler aufgetreten.</exception>
        <related type="Article" href="http://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">Verwenden der XslCompiledTransform-Klasse</related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (Type compiledStylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Type compiledStylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (compiledStylesheet As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(Type ^ compiledStylesheet);" />
      <MemberSignature Language="F#" Value="member this.Load : Type -&gt; unit" Usage="xslCompiledTransform.Load compiledStylesheet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="compiledStylesheet" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="compiledStylesheet">Der Name der Klasse, die das kompilierte Stylesheet enthält.  
  
Dies ist normalerweise der Name des Stylesheets. Wenn nicht anders angegeben, verwendet xsltc.exe den Namen des Stylesheets als Klassen- und als Assemblynamen.</param>
        <summary>Lädt das kompilierte Stylesheet, das mit dem <see href="https://docs.microsoft.com/dotnet/standard/data/xml/xslt-compiler-xsltc-exe">XSLT-Compiler (xsltc.exe)</see> erstellt wurde.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das Tool xsltc.exe wird zum Kompilieren von Stylesheets und Generieren von Assemblys aus den Stylesheets. Die <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> Methode lädt das kompilierte Stylesheet, aus der Assembly.  
  
> [!NOTE]
>  Sie müssen auch die XSLT-Assembly als Verweis in der Anwendung einschließen.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, wie ein kompilierte Stylesheet aus einer XSLT-Assembly geladen wird. Im Beispiel wird davon ausgegangen, dass das xsltc.exe-Tool zum Erstellen einer Assembly mit dem Namen der mit der Klasse bookOrders bookOrders.dll verwendet wurde.  
  
> [!NOTE]
>  Sie müssen die XSLT-Assembly verweisen, beim Kompilieren des Codes. Beispielsweise `csc /r:system.dll;system.xml.dll;bookOrders.dll myCode.cs`.  
  
```csharp  
// Load the type of the class.  
XslCompiledTransform xslt = new XslCompiledTransform();  
xslt.Load(typeof(bookOrders));  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/672a5ac8-8305-4d28-ba10-11089c2c0924">XSLT-Assembly-Tool (xsltc.exe)</related>
        <related type="Article" href="http://msdn.microsoft.com/library/76ee440b-d134-4f8f-8262-b917ad6dcbf6">Vorgehensweise: Ausführen eine XSLT-Transformation mit einer Assembly</related>
        <related type="Article" href="http://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">Verwenden der XslCompiledTransform-Klasse</related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XmlReader stylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XmlReader stylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XmlReader ^ stylesheet);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XmlReader -&gt; unit" Usage="xslCompiledTransform.Load stylesheet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="stylesheet">Ein <see cref="T:System.Xml.XmlReader" />, der das Stylesheet enthält.</param>
        <summary>Kompiliert das im <see cref="T:System.Xml.XmlReader" /> enthaltene Stylesheet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Xml.Xsl.XslCompiledTransform> Klasse unterstützt die XSLT 1.0-Syntax. XSLT-Stylesheet verwenden, muss die `http://www.w3.org/1999/XSL/Transform` Namespace.  
  
 Das Stylesheet geladen wird, aus dem aktuellen Knoten von der <xref:System.Xml.XmlReader> über alle untergeordneten Elemente. Dadurch können Sie einen Teil eines Dokuments als das Stylesheet verwenden. Nachdem die <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> Methode ausgeführt wird, die <xref:System.Xml.XmlReader> auf den nächsten Knoten positioniert ist, die nach dem Ende des Stylesheets. Wenn das Ende des Dokuments erreicht wird, wird der <xref:System.Xml.XmlReader> am Ende der Datei (EOF) platziert.  
  
 Diese Methode hat das folgende Verhalten:  
  
-   Ein <xref:System.Xml.XmlUrlResolver> ohne Anmeldeinformationen wird zum Verarbeiten eines `xsl:import` oder `xsl:include` Elemente.  
  
-   Die `document()` Funktion ist deaktiviert.  
  
-   Eingebettete Skripts werden nicht unterstützt.  
  
 Können Sie die <xref:System.Xml.Xsl.XslCompiledTransform.Load%28System.Xml.XmlReader%2CSystem.Xml.Xsl.XsltSettings%2CSystem.Xml.XmlResolver%29> Überladung an eine <xref:System.Xml.XmlResolver> mit den Anmeldeinformationen für die erforderliche Authentifizierung oder andere XSLT-Einstellungen angeben.  
  
   
  
## Examples  
 Das folgende Beispiel lädt ein im enthaltenen Stylesheet eine <xref:System.Xml.XmlReader> Objekt.  
  
 [!code-csharp[XslCompiledTransform.Load#5](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#5)]
 [!code-vb[XslCompiledTransform.Load#5](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="stylesheet" />-Wert ist <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Das Stylesheet enthält einen Fehler.</exception>
        <related type="Article" href="http://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">Verwenden der XslCompiledTransform-Klasse</related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.IXPathNavigable stylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.IXPathNavigable stylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As IXPathNavigable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::IXPathNavigable ^ stylesheet);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XPath.IXPathNavigable -&gt; unit" Usage="xslCompiledTransform.Load stylesheet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.IXPathNavigable" />
      </Parameters>
      <Docs>
        <param name="stylesheet">Ein Objekt, das die <see cref="T:System.Xml.XPath.IXPathNavigable" />-Schnittstelle implementiert. In .Microsoft NET Framework kann dies entweder ein <see cref="T:System.Xml.XmlNode" /> (normalerweise ein <see cref="T:System.Xml.XmlDocument" />) oder ein <see cref="T:System.Xml.XPath.XPathDocument" /> mit dem Stylesheet sein.</param>
        <summary>Kompiliert das im <see cref="T:System.Xml.XPath.IXPathNavigable" />-Objekt enthaltene Stylesheet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Xml.Xsl.XslCompiledTransform> Klasse unterstützt die XSLT 1.0-Syntax. XSLT-Stylesheet verwenden, muss die `http://www.w3.org/1999/XSL/Transform` Namespace.  
  
 Diese Methode hat das folgende Verhalten:  
  
-   Ein <xref:System.Xml.XmlUrlResolver> ohne Anmeldeinformationen wird zum Verarbeiten eines `xsl:import` oder `xsl:include` Elemente.  
  
-   Die `document()` Funktion ist deaktiviert.  
  
-   Eingebettete Skripts werden nicht unterstützt.  
  
 Können Sie die <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> Überladung an eine <xref:System.Xml.XmlResolver> mit den Anmeldeinformationen für die erforderliche Authentifizierung oder andere XSLT-Einstellungen angeben.  
  
   
  
## Examples  
 Das folgende Beispiel lädt ein im enthaltenen Stylesheet eine <xref:System.Xml.XPath.XPathDocument> Objekt.  
  
 [!code-csharp[XslCompiledTransform.Load#1](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#1)]
 [!code-vb[XslCompiledTransform.Load#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="stylesheet" />-Wert ist <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Das Stylesheet enthält einen Fehler.</exception>
        <related type="Article" href="http://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">Verwenden der XslCompiledTransform-Klasse</related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Reflection.MethodInfo executeMethod, byte[] queryData, Type[] earlyBoundTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Reflection.MethodInfo executeMethod, unsigned int8[] queryData, class System.Type[] earlyBoundTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Reflection.MethodInfo,System.Byte[],System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (executeMethod As MethodInfo, queryData As Byte(), earlyBoundTypes As Type())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Reflection::MethodInfo ^ executeMethod, cli::array &lt;System::Byte&gt; ^ queryData, cli::array &lt;Type ^&gt; ^ earlyBoundTypes);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Reflection.MethodInfo * byte[] * Type[] -&gt; unit" Usage="xslCompiledTransform.Load (executeMethod, queryData, earlyBoundTypes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="executeMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="queryData" Type="System.Byte[]" />
        <Parameter Name="earlyBoundTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="executeMethod">Ein <see cref="T:System.Reflection.MethodInfo" />-Objekt, das die vom Compiler generierte <c>execute</c>-Methode des kompilierten Stylesheets darstellt.</param>
        <param name="queryData">Ein Bytearray mit serialisierten Datenstrukturen im <c>staticData</c>-Feld des kompilierten Stylesheets, wie es von der <see cref="M:System.Xml.Xsl.XslCompiledTransform.CompileToType(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver,System.Boolean,System.Reflection.Emit.TypeBuilder,System.String)" />-Methode generiert wurde.</param>
        <param name="earlyBoundTypes">Ein Array mit Typen, das im vom Compiler generierten <c>ebTypes</c>-Feld des kompilierten Stylesheets gespeichert ist.</param>
        <summary>Lädt eine Methode aus einem Stylesheet, das mit <see langword="XSLTC.exe" /> kompiliert wurde.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode akzeptiert ein kompilierte Stylesheet in Form von einem <xref:System.Reflection.MethodInfo> -Objekt, ein Bytearray und ein Typarray. <xref:System.Reflection.Emit.DynamicMethod> Objekte können verwendet werden, um das kompilierte Stylesheet Methoden zuzulassen, verworfen, wenn die <xref:System.Xml.Xsl.XslCompiledTransform> Objekt wieder zugänglich gemacht wird.  
  
   
  
## Examples  
 Das Codebeispiel unten verwendet die <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> ein kompilierten Stylesheets zu laden. Die Transformation für den Wert des verringert die `Price` Element um zehn Prozent.  
  
 [!code-csharp[XsltDynamicMethodLoad#1](~/samples/snippets/csharp/VS_Snippets_Data/XsltDynamicMethodLoad/CS/XsltDynamicMethodLoad.cs#1)]
 [!code-vb[XsltDynamicMethodLoad#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XsltDynamicMethodLoad/VB/XsltDynamicMethodLoad.vb#1)]  
  
> [!NOTE]
>  In diesem Beispiel verwendete "Transformieren" Assembly wurde mit dem Hilfsprogramm xsltc.exe erstellt. Ausführliche Informationen zur Verwendung dieses Befehlszeilentool finden Sie unter [wie: Ausführen einer XSLT-Transformation mittels einer Assembly](~/docs/standard/data/xml/how-to-perform-an-xslt-transformation-by-using-an-assembly.md).  
  
 Im obigen Codebeispiel verwendet die folgenden Transformationen:  
  
```  
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"  
  xmlns:msxsl="urn:schemas-microsoft-com:xslt"  
  xmlns:user="urn:my-scripts">  
  <msxsl:script language="C#" implements-prefix="user">  
    <![CDATA[  
  public double modifyPrice(double price){  
    price*=0.9;  
    return price;  
  }  
  ]]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (string stylesheetUri, System.Xml.Xsl.XsltSettings settings, System.Xml.XmlResolver stylesheetResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(string stylesheetUri, class System.Xml.Xsl.XsltSettings settings, class System.Xml.XmlResolver stylesheetResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.String,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheetUri As String, settings As XsltSettings, stylesheetResolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::String ^ stylesheetUri, System::Xml::Xsl::XsltSettings ^ settings, System::Xml::XmlResolver ^ stylesheetResolver);" />
      <MemberSignature Language="F#" Value="member this.Load : string * System.Xml.Xsl.XsltSettings * System.Xml.XmlResolver -&gt; unit" Usage="xslCompiledTransform.Load (stylesheetUri, settings, stylesheetResolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheetUri" Type="System.String" />
        <Parameter Name="settings" Type="System.Xml.Xsl.XsltSettings" />
        <Parameter Name="stylesheetResolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheetUri">Der URI des Stylesheets.</param>
        <param name="settings">Die auf das Stylesheet angewendeten <see cref="T:System.Xml.Xsl.XsltSettings" />. Bei einem Wert von <see langword="null" /> wird die <see cref="P:System.Xml.Xsl.XsltSettings.Default" />-Einstellung angewendet.</param>
        <param name="stylesheetResolver">Der <see cref="T:System.Xml.XmlResolver" />, mit dem der URI des Stylesheets aufgelöst wird, sowie Stylesheets, auf die von <c>import</c>-XSLT-Elementen und <c>include</c>-XSLT-Elementen verwiesen wird.</param>
        <summary>Lädt und kompiliert das vom URI angegebene XSLT-Stylesheet. Der <see cref="T:System.Xml.XmlResolver" /> löst die vorhandenen <c>import</c>-XSLT-Elemente und <c>include</c>-XSLT-Elemente auf, und die XSLT-Einstellungen legen die Berechtigungen für das Stylesheet fest.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Xml.Xsl.XslCompiledTransform> Klasse unterstützt die XSLT 1.0-Syntax. XSLT-Stylesheet verwenden, muss die `http://www.w3.org/1999/XSL/Transform` Namespace.  
  
 Ein <xref:System.Xml.XmlReader> mit Standardeinstellungen zum Laden des Stylesheets verwendet wird. DTD-Verarbeitung ist deaktiviert, auf die <xref:System.Xml.XmlReader>. Wenn eine DTD-Verarbeitung erforderlich ist, erstellen Sie eine <xref:System.Xml.XmlReader> mit diesem Feature aktiviert, und übergeben es an der <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> Methode.  
  
   
  
## Examples  
 Das folgende Beispiel lädt ein Stylesheet, die auf eine Netzwerkressource gespeichert ist. Ein <xref:System.Xml.XmlSecureResolver>-Objekt gibt die Anmeldeinformationen an, die für den Zugriff auf das Stylesheet erforderlich sind.  
  
 [!code-csharp[XslCompiledTransform.Load#2](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#2)]
 [!code-vb[XslCompiledTransform.Load#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="stylesheetUri" />-Wert oder der <paramref name="stylesheetResolver" />-Wert ist <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Das Stylesheet enthält einen Fehler.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Das Stylesheet kann nicht gefunden werden.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Der <paramref name="stylesheetUri" />-Wert enthält einen Dateinamen oder ein Verzeichnis, das nicht gefunden werden kann.</exception>
        <exception cref="T:System.Net.WebException">Der <paramref name="stylesheetUri" />-Wert kann nicht aufgelöst werden.  
  
- oder -  
Beim Verarbeiten der Anforderung ist ein Fehler aufgetreten.</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="stylesheetUri" /> ist kein gültiger URI.</exception>
        <exception cref="T:System.Xml.XmlException">Beim Laden des Stylesheets ist ein Analysefehler aufgetreten.</exception>
        <related type="Article" href="http://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">Verwenden der XslCompiledTransform-Klasse</related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XmlReader stylesheet, System.Xml.Xsl.XsltSettings settings, System.Xml.XmlResolver stylesheetResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XmlReader stylesheet, class System.Xml.Xsl.XsltSettings settings, class System.Xml.XmlResolver stylesheetResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XmlReader, settings As XsltSettings, stylesheetResolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XmlReader ^ stylesheet, System::Xml::Xsl::XsltSettings ^ settings, System::Xml::XmlResolver ^ stylesheetResolver);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XmlReader * System.Xml.Xsl.XsltSettings * System.Xml.XmlResolver -&gt; unit" Usage="xslCompiledTransform.Load (stylesheet, settings, stylesheetResolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" />
        <Parameter Name="settings" Type="System.Xml.Xsl.XsltSettings" />
        <Parameter Name="stylesheetResolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheet">Der <see cref="T:System.Xml.XmlReader" />, der das Stylesheet enthält.</param>
        <param name="settings">Die auf das Stylesheet angewendeten <see cref="T:System.Xml.Xsl.XsltSettings" />. Bei einem Wert von <see langword="null" /> wird die <see cref="P:System.Xml.Xsl.XsltSettings.Default" />-Einstellung angewendet.</param>
        <param name="stylesheetResolver">Der <see cref="T:System.Xml.XmlResolver" /> zum Auflösen vorhandener Stylesheets, auf die in <c>import</c>-XSLT-Elementen und <c>include</c>-XSLT-Elementen verwiesen wird. Bei <see langword="null" /> werden externe Ressourcen nicht aufgelöst.</param>
        <summary>Kompiliert das im <see cref="T:System.Xml.XmlReader" /> enthaltene XSLT-Stylesheet. Der <see cref="T:System.Xml.XmlResolver" /> löst die vorhandenen <c>import</c>-XSLT-Elemente und <c>include</c>-XSLT-Elemente auf, und die XSLT-Einstellungen legen die Berechtigungen für das Stylesheet fest.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Xml.Xsl.XslCompiledTransform> Klasse unterstützt die XSLT 1.0-Syntax. XSLT-Stylesheet verwenden, muss die `http://www.w3.org/1999/XSL/Transform` Namespace.  
  
 Das Stylesheet geladen wird, aus dem aktuellen Knoten von der <xref:System.Xml.XmlReader> über alle untergeordneten Elemente. Dadurch können Sie einen Teil eines Dokuments als das Stylesheet verwenden. Nachdem die <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> Methode ausgeführt wird, die <xref:System.Xml.XmlReader> auf den nächsten Knoten positioniert ist, die nach dem Ende des Stylesheets. Wenn das Ende des Dokuments erreicht wird, wird der <xref:System.Xml.XmlReader> am Ende der Datei (EOF) platziert.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Stylesheet geladen und aktiviert die Unterstützung für XSLT-Skripterstellung.  
  
 [!code-csharp[XslCompiledTransform.Load#3](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#3)]
 [!code-vb[XslCompiledTransform.Load#3](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="stylesheet" />-Wert ist <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Das Stylesheet enthält einen Fehler.</exception>
        <related type="Article" href="http://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">Verwenden der XslCompiledTransform-Klasse</related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.IXPathNavigable stylesheet, System.Xml.Xsl.XsltSettings settings, System.Xml.XmlResolver stylesheetResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.IXPathNavigable stylesheet, class System.Xml.Xsl.XsltSettings settings, class System.Xml.XmlResolver stylesheetResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As IXPathNavigable, settings As XsltSettings, stylesheetResolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::IXPathNavigable ^ stylesheet, System::Xml::Xsl::XsltSettings ^ settings, System::Xml::XmlResolver ^ stylesheetResolver);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltSettings * System.Xml.XmlResolver -&gt; unit" Usage="xslCompiledTransform.Load (stylesheet, settings, stylesheetResolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="settings" Type="System.Xml.Xsl.XsltSettings" />
        <Parameter Name="stylesheetResolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheet">Ein Objekt, das die <see cref="T:System.Xml.XPath.IXPathNavigable" />-Schnittstelle implementiert. In .Microsoft NET Framework kann dies entweder ein <see cref="T:System.Xml.XmlNode" /> (normalerweise ein <see cref="T:System.Xml.XmlDocument" />) oder ein <see cref="T:System.Xml.XPath.XPathDocument" /> mit dem Stylesheet sein.</param>
        <param name="settings">Die auf das Stylesheet angewendeten <see cref="T:System.Xml.Xsl.XsltSettings" />. Bei einem Wert von <see langword="null" /> wird die <see cref="P:System.Xml.Xsl.XsltSettings.Default" />-Einstellung angewendet.</param>
        <param name="stylesheetResolver">Der <see cref="T:System.Xml.XmlResolver" /> zum Auflösen vorhandener Stylesheets, auf die in <c>import</c>-XSLT-Elementen und <c>include</c>-XSLT-Elementen verwiesen wird. Bei <see langword="null" /> werden externe Ressourcen nicht aufgelöst.</param>
        <summary>Kompiliert das im <see cref="T:System.Xml.XPath.IXPathNavigable" /> enthaltene XSLT-Stylesheet. Der <see cref="T:System.Xml.XmlResolver" /> löst die vorhandenen <c>import</c>-XSLT-Elemente und <c>include</c>-XSLT-Elemente auf, und die XSLT-Einstellungen legen die Berechtigungen für das Stylesheet fest.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Xml.Xsl.XslCompiledTransform> Klasse unterstützt die XSLT 1.0-Syntax. XSLT-Stylesheet verwenden, muss die `http://www.w3.org/1999/XSL/Transform` Namespace.  
  
   
  
## Examples  
 Im folgende Beispiel wird ein Stylesheet geladen. Die <xref:System.Xml.XmlSecureResolver> Objekt enthält die notwendigen Informationen für den Zugriff auf `import` oder `include` Elemente, die im Stylesheet gefunden.  
  
 [!code-csharp[XslCompiledTransform.Load#4](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#4)]
 [!code-vb[XslCompiledTransform.Load#4](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="stylesheet" />-Wert ist <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Das Stylesheet enthält einen Fehler.</exception>
        <related type="Article" href="http://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">Verwenden der XslCompiledTransform-Klasse</related>
      </Docs>
    </Member>
    <Member MemberName="OutputSettings">
      <MemberSignature Language="C#" Value="public System.Xml.XmlWriterSettings OutputSettings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlWriterSettings OutputSettings" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OutputSettings As XmlWriterSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlWriterSettings ^ OutputSettings { System::Xml::XmlWriterSettings ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OutputSettings : System.Xml.XmlWriterSettings" Usage="System.Xml.Xsl.XslCompiledTransform.OutputSettings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriterSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein <see cref="T:System.Xml.XmlWriterSettings" />-Objekt mit den Ausgabeinformationen ab, die vom <c>xsl:output</c>-Element des Stylesheets abgeleitet sind.</summary>
        <value>Ein schreibgeschütztes <see cref="T:System.Xml.XmlWriterSettings" /> von abgeleitetes Objekt, das Ausgabeinformationen enthält, die <c>xsl: output</c> -Element des Stylesheets. Dieser Wert kann <see langword="null" /> sein.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft wird angegeben, nach einem erfolgreichen Aufruf der <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> Methode. Es enthält Informationen, die von abgeleiteten der `xsl:output` -Element eines kompilierten Stylesheets. Dies <xref:System.Xml.XmlWriterSettings> Objekt übergeben werden, um die <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> Methode zum Erstellen der <xref:System.Xml.XmlWriter> Objekt auf die Sie ausgeben möchten.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, wie Sie mit der <xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings%2A> Eigenschaft zum Erstellen einer <xref:System.Xml.XmlWriter> -Objekt, das Text in die Konsole schreibt.  
  
 [!code-csharp[XslCompiledTransform.OutputSettings#1](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.OutputSettings/CS/xslt_OutputSettings.cs#1)]
 [!code-vb[XslCompiledTransform.OutputSettings#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.OutputSettings/VB/xslt_OutputSettings.vb#1)]  
  
 Im Beispiel wird die `books.xml` und `outputConsole.xsl` als Eingabe.  
  
 `books.xml`  
  
 [!code-xml[XslCompiledTransform.OutputSettings#2](~/samples/snippets/xml/VS_Snippets_Data/XslCompiledTransform.OutputSettings/XML/books.xml#2)]  
  
 `outputConsole.xsl`  
  
 [!code-xml[XslCompiledTransform.OutputSettings#3](~/samples/snippets/xml/VS_Snippets_Data/XslCompiledTransform.OutputSettings/XML/outputConsole.xsl#3)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">Verwenden der XslCompiledTransform-Klasse</related>
      </Docs>
    </Member>
    <Member MemberName="TemporaryFiles">
      <MemberSignature Language="C#" Value="public System.CodeDom.Compiler.TempFileCollection TemporaryFiles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.Compiler.TempFileCollection TemporaryFiles" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Xsl.XslCompiledTransform.TemporaryFiles" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TemporaryFiles As TempFileCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::Compiler::TempFileCollection ^ TemporaryFiles { System::CodeDom::Compiler::TempFileCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TemporaryFiles : System.CodeDom.Compiler.TempFileCollection" Usage="System.Xml.Xsl.XslCompiledTransform.TemporaryFiles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.TempFileCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> ab, die die temporären Dateien enthält, die nach einem erfolgreichen Aufruf der <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" />-Methode auf dem Datenträger generiert werden.</summary>
        <value>Die <see cref="T:System.CodeDom.Compiler.TempFileCollection" />, die die auf dem Datenträger generierten temporären Dateien enthält. Wenn die <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" />-Methode nicht erfolgreich aufgerufen wurde oder Debuggen nicht aktiviert ist, ist dieser Wert <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft identifiziert, die Dateien, die während der XSLT-generiert wurden verarbeitet. Die Dateien befinden sich in Ihrem Temp-Verzeichnis (angegeben durch die Umgebungsvariable "TEMP") können Sie diese Dateien löschen, nachdem die XSLT-Verarbeitung abgeschlossen wurde.  
  
   
  
## Examples  
 Im folgenden Beispiel werden die Namen von temporären Dateien in die Konsole geschrieben.  
  
> [!NOTE]
>  Temporäre Dateien werden nur erstellt, wenn Stylesheets mit Laden von Style \<msxsl: SCRIPT > Blöcke.  
  
 [!code-csharp[XslCompiledTransform.Transform#8](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#8)]
 [!code-vb[XslCompiledTransform.Transform#8](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#8)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">Verwenden der XslCompiledTransform-Klasse</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Transform">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Führt die XSLT-Transformation aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Es gibt Unterschiede zwischen einer XSLT, die im Debugmodus kompiliert wurde, und einer im Releasemodus kompilierten XSLT. In einigen Fällen werden durch Stylesheets, die im Debugmodus kompiliert wurden, während <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> keine Fehler ausgelöst. Die Stylesheets schlagen jedoch später während <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> fehl. Das gleiche, im Releasemodus kompilierte Stylesheet schlägt während <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> fehl. Ein Beispiel für solches Verhalten ist, wenn eine Variable, die kein Knotengruppentyp ist, einem Ausdruck zugeordnet wird, der eine Knotengruppe erfordert.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">Verwenden der XslCompiledTransform-Klasse</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, string resultsFile);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputUri, string resultsFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputUri As String, resultsFile As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputUri, System::String ^ resultsFile);" />
      <MemberSignature Language="F#" Value="member this.Transform : string * string -&gt; unit" Usage="xslCompiledTransform.Transform (inputUri, resultsFile)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="resultsFile" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputUri">Der URI des Eingabedokuments.</param>
        <param name="resultsFile">Der URI der Ausgabedatei.</param>
        <summary>Führt die Transformation anhand des vom URI angegebenen Eingabedokuments aus und gibt die Ergebnisse in eine Datei aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode verwendet den Standardwert <xref:System.Xml.XmlUrlResolver> ohne Benutzeranmeldeinformationen, um die Eingabe- und Dokumente zu beheben. Wenn diese Ressourcen auf einer Netzwerkressource, die eine Authentifizierung erforderlich ist gespeichert sind, verwenden Sie die Überladung mit einem <xref:System.Xml.XmlResolver> als eines ihrer Argumente, und geben Sie eine <xref:System.Xml.XmlResolver> mit den erforderlichen Anmeldeinformationen.  
  
 Ein <xref:System.Xml.XmlReader> mit Standardeinstellungen zum Laden des Eingabedokuments verwendet wird. DTD-Verarbeitung ist deaktiviert, auf die <xref:System.Xml.XmlReader>. Wenn eine DTD-Verarbeitung erforderlich ist, erstellen Sie eine <xref:System.Xml.XmlReader> mit diesem Feature aktiviert, und übergeben es an der <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> Methode.  
  
   
  
## Examples  
 Im folgende Beispiel führt eine Transformation, und es gibt in einer Datei.  
  
 [!code-csharp[XslCompiledTransform.Transform#1](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#1)]
 [!code-vb[XslCompiledTransform.Transform#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#1)]  
  
 Das Beispiel verwendet die folgenden beiden Eingabedateien:  
  
 `books.xml`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/books.xml#2)]  
  
 `output.xsl`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/output.xsl#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="inputUri" />-Wert oder der <paramref name="resultsFile" />-Wert ist <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Bei der Ausführung der XSLT-Transformation ist ein Fehler aufgetreten.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Das Eingabedokument kann nicht gefunden werden.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Der <paramref name="inputUri" />-Wert oder der <paramref name="resultsFile" />-Wert enthält einen Dateinamen oder ein Verzeichnis, das nicht gefunden werden kann.</exception>
        <exception cref="T:System.Net.WebException">Der <paramref name="inputUri" />-Wert oder der <paramref name="resultsFile" />-Wert kann nicht aufgelöst werden.  
  
- oder -  
Fehler bei der Verarbeitung der Anforderung.</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="inputUri" /> oder <paramref name="resultsFile" /> ist kein gültiger URI.</exception>
        <exception cref="T:System.Xml.XmlException">Beim Laden des Eingabedokuments ist ein Analysefehler aufgetreten.</exception>
        <related type="Article" href="http://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">Verwenden der XslCompiledTransform-Klasse</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputUri, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputUri As String, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputUri, System::Xml::XmlWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : string * System.Xml.XmlWriter -&gt; unit" Usage="xslCompiledTransform.Transform (inputUri, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="inputUri">Der URI des Eingabedokuments.</param>
        <param name="results">Der <see cref="T:System.Xml.XmlWriter" />, an den die Ausgabe erfolgen soll.  
  
Wenn das Stylesheet ein <c>xsl:output</c>-Element enthält, müssen Sie den <see cref="T:System.Xml.XmlWriter" /> mithilfe des <see cref="T:System.Xml.XmlWriterSettings" />-Objekts erstellen, das von der <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />-Eigenschaft zurückgegeben wird. Dieses Verfahren stellt sicher, dass <see cref="T:System.Xml.XmlWriter" /> die richtigen Ausgabeeinstellungen verwendet.</param>
        <summary>Führt die Transformation anhand des vom URI angegebenen Eingabedokuments aus und gibt die Ergebnisse an einen <see cref="T:System.Xml.XmlWriter" /> aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode verwendet den Standardwert <xref:System.Xml.XmlUrlResolver> ohne Benutzeranmeldeinformationen zum Auflösen des Eingabedokuments und alle Instanzen von XSLT `document()` -Funktion, die im Stylesheet gefunden. Wenn diese Ressourcen auf einer Netzwerkressource, die eine Authentifizierung erforderlich ist gespeichert sind, verwenden Sie die Überladung mit einem <xref:System.Xml.XmlResolver> als eines ihrer Argumente, und geben Sie eine <xref:System.Xml.XmlResolver> mit den erforderlichen Anmeldeinformationen.  
  
 Ein <xref:System.Xml.XmlReader> mit Standardeinstellungen zum Laden des Eingabedokuments verwendet wird. DTD-Verarbeitung ist deaktiviert, auf die <xref:System.Xml.XmlReader>. Wenn eine DTD-Verarbeitung erforderlich ist, erstellen Sie eine <xref:System.Xml.XmlReader> mit diesem Feature aktiviert, und übergeben es an der <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> Methode.  
  
 Diese Methode unterstützt nicht die `xsl:strip-space` Element. Wenn sich das kompilierte Stylesheet enthalten die `xsl:strip-space` -Element, verwenden Sie die <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> Überladung nimmt eine <xref:System.Xml.XmlReader> als das Eingabeargument.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine XSLT-Transformation ausgeführt und gibt eine <xref:System.Xml.XmlWriter> Objekt.  
  
 [!code-csharp[XslCompiledTransform.Transform#2](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#2)]
 [!code-vb[XslCompiledTransform.Transform#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="inputUri" />-Wert oder der <paramref name="results" />-Wert ist <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Bei der Ausführung der XSLT-Transformation ist ein Fehler aufgetreten.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Der <paramref name="inputUri" />-Wert enthält einen Dateinamen oder ein Verzeichnis, das nicht gefunden werden kann.</exception>
        <exception cref="T:System.Net.WebException">Der <paramref name="inputUri" />-Wert kann nicht aufgelöst werden.  
  
- oder -  
Beim Verarbeiten der Anforderung ist ein Fehler aufgetreten.</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="inputUri" /> ist kein gültiger URI.</exception>
        <exception cref="T:System.Xml.XmlException">Beim Laden des Eingabedokuments ist ein Analysefehler aufgetreten.</exception>
        <related type="Article" href="http://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">Verwenden der XslCompiledTransform-Klasse</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XmlReader input, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XmlReader, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XmlReader ^ input, System::Xml::XmlWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XmlReader * System.Xml.XmlWriter -&gt; unit" Usage="xslCompiledTransform.Transform (input, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XmlReader" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input">Der <see cref="T:System.Xml.XmlReader" />, der das Eingabedokument enthält.</param>
        <param name="results">Der <see cref="T:System.Xml.XmlWriter" />, an den die Ausgabe erfolgen soll.  
  
Wenn das Stylesheet ein <c>xsl:output</c>-Element enthält, müssen Sie den <see cref="T:System.Xml.XmlWriter" /> mithilfe des <see cref="T:System.Xml.XmlWriterSettings" />-Objekts erstellen, das von der <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />-Eigenschaft zurückgegeben wird. Dieses Verfahren stellt sicher, dass <see cref="T:System.Xml.XmlWriter" /> die richtigen Ausgabeeinstellungen verwendet.</param>
        <summary>Führt die Transformation anhand des vom <see cref="T:System.Xml.XmlReader" />-Objekt angegebenen Eingabedokuments aus und gibt die Ergebnisse an einen <see cref="T:System.Xml.XmlWriter" /> aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die XSLT `document()` Funktion aktiviert ist, erfolgt die Auflösung anhand einer <xref:System.Xml.XmlUrlResolver> ohne Benutzeranmeldeinformationen. Wenn die externe Ressource auf eine Netzwerkressource, die eine Authentifizierung erforderlich ist befindet, verwenden Sie die Überladung, die akzeptiert eine <xref:System.Xml.XmlResolver> als eines ihrer Argumente und geben Sie eine <xref:System.Xml.XmlResolver> mit den erforderlichen Anmeldeinformationen.  
  
   
  
## Examples  
 Im folgende Beispiel transformiert das erste Buch in der Datei books.xml.  
  
 [!code-csharp[XslCompiledTransform.Transform#7](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#7)]
 [!code-vb[XslCompiledTransform.Transform#7](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="input" />-Wert oder der <paramref name="results" />-Wert ist <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Bei der Ausführung der XSLT-Transformation ist ein Fehler aufgetreten.</exception>
        <related type="Article" href="http://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">Verwenden der XslCompiledTransform-Klasse</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::XmlWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.XmlWriter -&gt; unit" Usage="xslCompiledTransform.Transform (input, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input">Ein Objekt, das die <see cref="T:System.Xml.XPath.IXPathNavigable" />-Schnittstelle implementiert. Dabei kann es sich in Microsoft .NET Framework entweder um einen <see cref="T:System.Xml.XmlNode" /> (i. d. R. ein <see cref="T:System.Xml.XmlDocument" />) oder um ein <see cref="T:System.Xml.XPath.XPathDocument" /> mit den zu transformierenden Daten handeln.</param>
        <param name="results">Der <see cref="T:System.Xml.XmlWriter" />, an den die Ausgabe erfolgen soll.  
  
Wenn das Stylesheet ein <c>xsl:output</c>-Element enthält, müssen Sie den <see cref="T:System.Xml.XmlWriter" /> mithilfe des <see cref="T:System.Xml.XmlWriterSettings" />-Objekts erstellen, das von der <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />-Eigenschaft zurückgegeben wird. Dieses Verfahren stellt sicher, dass <see cref="T:System.Xml.XmlWriter" /> die richtigen Ausgabeeinstellungen verwendet.</param>
        <summary>Führt die Transformation anhand des vom <see cref="T:System.Xml.XPath.IXPathNavigable" />-Objekt angegebenen Eingabedokuments aus und gibt die Ergebnisse an einen <see cref="T:System.Xml.XmlWriter" /> aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die XSLT `document()` Funktion aktiviert ist, erfolgt die Auflösung anhand einer <xref:System.Xml.XmlUrlResolver> ohne Benutzeranmeldeinformationen. Wenn die externe Ressource auf eine Netzwerkressource, die eine Authentifizierung erforderlich ist befindet, verwenden Sie die Überladung, die akzeptiert eine <xref:System.Xml.XmlResolver> als eines ihrer Argumente und geben Sie eine <xref:System.Xml.XmlResolver> mit den erforderlichen Anmeldeinformationen.  
  
 Diese Methode unterstützt nicht die `xsl:strip-space` Element. Wenn sich das kompilierte Stylesheet enthalten die `xsl:strip-space` -Element, verwenden Sie die <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> Überladung nimmt eine <xref:System.Xml.XmlReader> als das Eingabeargument.  
  
 Die <xref:System.Xml.XPath.IXPathNavigable>-Schnittstelle ist in der <xref:System.Xml.XmlNode>-Klasse und der <xref:System.Xml.XPath.XPathDocument>-Klasse implementiert. Diese Klassen stellen einen speicherinternen Cache der XML-Daten dar.  
  
-   Die <xref:System.Xml.XmlNode>-Klasse basiert auf dem W3C-DOM (Document Object Model) und umfasst Bearbeitungsfunktionen.  
  
-   Die <xref:System.Xml.XPath.XPathDocument>-Klasse ist ein schreibgeschützter Datenspeicher, der auf dem XPath-Datenmodell basiert. <xref:System.Xml.XPath.XPathDocument> ist die empfohlene Klasse zu XSLT-Verarbeitung. Im Vergleich zur <xref:System.Xml.XmlNode>-Klasse bietet sie eine schnellere Leistung.  
  
 Transformationen werden auf das gesamte Dokument angewendet. Wenn Sie einen anderen Knoten als den Stammknoten des Dokuments übergeben, wird dadurch nicht verhindert, dass im Transformationsprozess auf alle Knoten im geladenen Dokument zugegriffen wird. Zum Transformieren eines Knotenfragments müssen Sie ein Objekt erstellen, das nur das Knotenfragment enthält, und dieses Objekt an die <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>-Methode übergeben. Weitere Informationen finden Sie unter [Gewusst wie: Transformieren eines Knotenfragments](~/docs/standard/data/xml/how-to-transform-a-node-fragment.md).  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine XSLT-Transformation ausgeführt und gibt eine <xref:System.Xml.XmlWriter> Objekt.  
  
 [!code-csharp[XslCompiledTransform.Transform#5](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#5)]
 [!code-vb[XslCompiledTransform.Transform#5](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="input" />-Wert oder der <paramref name="results" />-Wert ist <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Bei der Ausführung der XSLT-Transformation ist ein Fehler aufgetreten.</exception>
        <related type="Article" href="http://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">Verwenden der XslCompiledTransform-Klasse</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, System.Xml.Xsl.XsltArgumentList arguments, System.IO.Stream results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputUri, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.Stream results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputUri As String, arguments As XsltArgumentList, results As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputUri, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::Stream ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : string * System.Xml.Xsl.XsltArgumentList * System.IO.Stream -&gt; unit" Usage="xslCompiledTransform.Transform (inputUri, arguments, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="inputUri">Der URI des Eingabedokuments.</param>
        <param name="arguments">Eine <see cref="T:System.Xml.Xsl.XsltArgumentList" /> mit durch Namespaces gekennzeichneten Argumenten, die als Eingabe für die Transformation verwendet werden. Dieser Wert kann <see langword="null" /> sein.</param>
        <param name="results">Der Stream, in den ausgegeben werden soll.</param>
        <summary>Führt die Transformation anhand des vom URI angegebenen Eingabedokuments aus und gibt die Ergebnisse an einen Stream aus. Die <see cref="T:System.Xml.Xsl.XsltArgumentList" /> stellt zusätzliche Laufzeitargumente bereit.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode verwendet den Standardwert <xref:System.Xml.XmlUrlResolver> ohne Benutzeranmeldeinformationen zum Auflösen des Eingabedokuments und alle Instanzen von XSLT `document()` -Funktion, die im Stylesheet gefunden. Wenn diese Ressourcen auf einer Netzwerkressource, die eine Authentifizierung erforderlich ist gespeichert sind, verwenden Sie die Überladung mit einem <xref:System.Xml.XmlResolver> als eines ihrer Argumente, und geben Sie eine <xref:System.Xml.XmlResolver> mit den erforderlichen Anmeldeinformationen.  
  
 Ein <xref:System.Xml.XmlReader> mit Standardeinstellungen zum Laden des Eingabedokuments verwendet wird. DTD-Verarbeitung ist deaktiviert, auf die <xref:System.Xml.XmlReader>. Wenn eine DTD-Verarbeitung erforderlich ist, erstellen Sie eine <xref:System.Xml.XmlReader> mit diesem Feature aktiviert, und übergeben es an der <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> Methode.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="inputUri" />-Wert oder der <paramref name="results" />-Wert ist <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Bei der Ausführung der XSLT-Transformation ist ein Fehler aufgetreten.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Der <paramref name="inputUri" />-Wert enthält einen Dateinamen oder ein Verzeichnis, das nicht gefunden werden kann.</exception>
        <exception cref="T:System.Net.WebException">Der <paramref name="inputUri" />-Wert kann nicht aufgelöst werden.  
  
- oder -  
Fehler bei der Verarbeitung der Anforderung.</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="inputUri" /> ist kein gültiger URI.</exception>
        <exception cref="T:System.Xml.XmlException">Beim Laden des Eingabedokuments ist ein Analysefehler aufgetreten.</exception>
        <related type="Article" href="http://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">Verwenden der XslCompiledTransform-Klasse</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, System.Xml.Xsl.XsltArgumentList arguments, System.IO.TextWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputUri, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.TextWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputUri As String, arguments As XsltArgumentList, results As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputUri, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::TextWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : string * System.Xml.Xsl.XsltArgumentList * System.IO.TextWriter -&gt; unit" Usage="xslCompiledTransform.Transform (inputUri, arguments, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="inputUri">Der URI des Eingabedokuments.</param>
        <param name="arguments">Eine <see cref="T:System.Xml.Xsl.XsltArgumentList" /> mit durch Namespaces gekennzeichneten Argumenten, die als Eingabe für die Transformation verwendet werden. Dieser Wert kann <see langword="null" /> sein.</param>
        <param name="results">Der <see cref="T:System.IO.TextWriter" />, an den die Ausgabe erfolgen soll.</param>
        <summary>Führt die Transformation anhand des vom URI angegebenen Eingabedokuments aus und gibt die Ergebnisse an einen <see cref="T:System.IO.TextWriter" /> aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode verwendet den Standardwert <xref:System.Xml.XmlUrlResolver> ohne Benutzeranmeldeinformationen zum Auflösen des Eingabedokuments und alle Instanzen von XSLT `document()` -Funktion, die im Stylesheet gefunden. Wenn diese Ressourcen auf einer Netzwerkressource, die eine Authentifizierung erforderlich ist gespeichert sind, verwenden Sie die Überladung mit einem <xref:System.Xml.XmlResolver> als eines ihrer Argumente, und geben Sie eine <xref:System.Xml.XmlResolver> mit den erforderlichen Anmeldeinformationen.  
  
 Ein <xref:System.Xml.XmlReader> mit Standardeinstellungen zum Laden des Eingabedokuments verwendet wird. DTD-Verarbeitung ist deaktiviert, auf die <xref:System.Xml.XmlReader>. Wenn eine DTD-Verarbeitung erforderlich ist, erstellen Sie eine <xref:System.Xml.XmlReader> mit diesem Feature aktiviert, und übergeben es an der <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> Methode.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine XSLT-Transformation ausgeführt und gibt eine Zeichenfolge.  
  
 [!code-csharp[XslCompiledTransform.Transform#3](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#3)]
 [!code-vb[XslCompiledTransform.Transform#3](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="inputUri" />-Wert oder der <paramref name="results" />-Wert ist <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Bei der Ausführung der XSLT-Transformation ist ein Fehler aufgetreten.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Der <paramref name="inputUri" />-Wert enthält einen Dateinamen oder ein Verzeichnis, das nicht gefunden werden kann.</exception>
        <exception cref="T:System.Net.WebException">Der <paramref name="inputUri" />-Wert kann nicht aufgelöst werden.  
  
- oder -  
Fehler bei der Verarbeitung der Anforderung.</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="inputUri" /> ist kein gültiger URI.</exception>
        <exception cref="T:System.Xml.XmlException">Beim Laden des Eingabedokuments ist ein Analysefehler aufgetreten.</exception>
        <related type="Article" href="http://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">Verwenden der XslCompiledTransform-Klasse</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputUri, class System.Xml.Xsl.XsltArgumentList arguments, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputUri As String, arguments As XsltArgumentList, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputUri, System::Xml::Xsl::XsltArgumentList ^ arguments, System::Xml::XmlWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : string * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter -&gt; unit" Usage="xslCompiledTransform.Transform (inputUri, arguments, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="inputUri">Der URI des Eingabedokuments.</param>
        <param name="arguments">Eine <see cref="T:System.Xml.Xsl.XsltArgumentList" /> mit durch Namespaces gekennzeichneten Argumenten, die als Eingabe für die Transformation verwendet werden. Dieser Wert kann <see langword="null" /> sein.</param>
        <param name="results">Der <see cref="T:System.Xml.XmlWriter" />, an den die Ausgabe erfolgen soll.  
  
Wenn das Stylesheet ein <c>xsl:output</c>-Element enthält, müssen Sie den <see cref="T:System.Xml.XmlWriter" /> mithilfe des <see cref="T:System.Xml.XmlWriterSettings" />-Objekts erstellen, das von der <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />-Eigenschaft zurückgegeben wird. Dieses Verfahren stellt sicher, dass <see cref="T:System.Xml.XmlWriter" /> die richtigen Ausgabeeinstellungen verwendet.</param>
        <summary>Führt die Transformation anhand des vom URI angegebenen Eingabedokuments aus und gibt die Ergebnisse an einen <see cref="T:System.Xml.XmlWriter" /> aus. Die <see cref="T:System.Xml.Xsl.XsltArgumentList" /> stellt zusätzliche Laufzeitargumente bereit.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode verwendet den Standardwert <xref:System.Xml.XmlUrlResolver> ohne Benutzeranmeldeinformationen zum Auflösen des Eingabedokuments und alle Instanzen von XSLT `document()` -Funktion, die im Stylesheet gefunden. Wenn diese Ressourcen auf einer Netzwerkressource, die eine Authentifizierung erforderlich ist gespeichert sind, verwenden Sie die Überladung mit einem <xref:System.Xml.XmlResolver> als eines ihrer Argumente, und geben Sie eine <xref:System.Xml.XmlResolver> mit den erforderlichen Anmeldeinformationen.  
  
 Ein <xref:System.Xml.XmlReader> mit Standardeinstellungen zum Laden des Eingabedokuments verwendet wird. DTD-Verarbeitung ist deaktiviert, auf die <xref:System.Xml.XmlReader>. Wenn eine DTD-Verarbeitung erforderlich ist, erstellen Sie eine <xref:System.Xml.XmlReader> mit diesem Feature aktiviert, und übergeben es an der <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> Methode.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein <xref:System.Xml.Xsl.XsltArgumentList> Objekt, das Erstellen eines Parameters, der das aktuelle Datum und die Uhrzeit darstellt.  
  
 [!code-csharp[XsltArgumentList.AddParam#1](~/samples/snippets/csharp/VS_Snippets_Data/XsltArgumentList.AddParam/CS/addparam.cs#1)]
 [!code-vb[XsltArgumentList.AddParam#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XsltArgumentList.AddParam/VB/addparam.vb#1)]  
  
 Im Beispiel werden die folgenden beiden Dateien als Eingabe verwendet.  
  
 order.xml  
  
 [!code-xml[XsltArgumentList.AddParam#2](~/samples/snippets/xml/VS_Snippets_Data/XsltArgumentList.AddParam/XML/order.xml#2)]  
  
 Order.Xsl  
  
 [!code-xml[XsltArgumentList.AddParam#3](~/samples/snippets/xml/VS_Snippets_Data/XsltArgumentList.AddParam/XML/order.xsl#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="inputUri" />-Wert oder der <paramref name="results" />-Wert ist <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Bei der Ausführung der XSLT-Transformation ist ein Fehler aufgetreten.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Der <paramref name="inputtUri" />-Wert enthält einen Dateinamen oder ein Verzeichnis, das nicht gefunden werden kann.</exception>
        <exception cref="T:System.Net.WebException">Der <paramref name="inputUri" />-Wert kann nicht aufgelöst werden.  
  
- oder -  
Beim Verarbeiten der Anforderung ist ein Fehler aufgetreten.</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="inputUri" /> ist kein gültiger URI.</exception>
        <exception cref="T:System.Xml.XmlException">Beim Laden des Eingabedokuments ist ein Analysefehler aufgetreten.</exception>
        <related type="Article" href="http://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">Verwenden der XslCompiledTransform-Klasse</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.Xsl.XsltArgumentList arguments, System.IO.Stream results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XmlReader input, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.Stream results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XmlReader, arguments As XsltArgumentList, results As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XmlReader ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::Stream ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XmlReader * System.Xml.Xsl.XsltArgumentList * System.IO.Stream -&gt; unit" Usage="xslCompiledTransform.Transform (input, arguments, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XmlReader" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="input">Der <see cref="T:System.Xml.XmlReader" />, der das Eingabedokument enthält.</param>
        <param name="arguments">Eine <see cref="T:System.Xml.Xsl.XsltArgumentList" /> mit durch Namespaces gekennzeichneten Argumenten, die als Eingabe für die Transformation verwendet werden. Dieser Wert kann <see langword="null" /> sein.</param>
        <param name="results">Der Stream, in den ausgegeben werden soll.</param>
        <summary>Führt die Transformation anhand des vom <see cref="T:System.Xml.XmlReader" />-Objekt angegebenen Eingabedokuments aus und gibt die Ergebnisse an einen Stream aus. Die <see cref="T:System.Xml.Xsl.XsltArgumentList" /> stellt zusätzliche Laufzeitargumente bereit.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn das Stylesheet eine XSLT-Transformation enthält `document()` -Funktion, wird er aufgelöst, die mit einer <xref:System.Xml.XmlUrlResolver> ohne Benutzeranmeldeinformationen. Wenn die externe Ressource auf eine Netzwerkressource, die eine Authentifizierung erforderlich ist befindet, verwenden Sie die Überladung, die akzeptiert eine <xref:System.Xml.XmlResolver> als eines ihrer Argumente und geben Sie eine <xref:System.Xml.XmlResolver> mit den erforderlichen Anmeldeinformationen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="input" />-Wert oder der <paramref name="results" />-Wert ist <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Bei der Ausführung der XSLT-Transformation ist ein Fehler aufgetreten.</exception>
        <related type="Article" href="http://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">Verwenden der XslCompiledTransform-Klasse</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.Xsl.XsltArgumentList arguments, System.IO.TextWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XmlReader input, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.TextWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XmlReader, arguments As XsltArgumentList, results As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XmlReader ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::TextWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XmlReader * System.Xml.Xsl.XsltArgumentList * System.IO.TextWriter -&gt; unit" Usage="xslCompiledTransform.Transform (input, arguments, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XmlReader" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="input">Der <see cref="T:System.Xml.XmlReader" />, der das Eingabedokument enthält.</param>
        <param name="arguments">Eine <see cref="T:System.Xml.Xsl.XsltArgumentList" /> mit durch Namespaces gekennzeichneten Argumenten, die als Eingabe für die Transformation verwendet werden. Dieser Wert kann <see langword="null" /> sein.</param>
        <param name="results">Der <see cref="T:System.IO.TextWriter" />, an den die Ausgabe erfolgen soll.</param>
        <summary>Führt die Transformation anhand des vom <see cref="T:System.Xml.XmlReader" />-Objekt angegebenen Eingabedokuments aus und gibt die Ergebnisse an einen <see cref="T:System.IO.TextWriter" /> aus. Die <see cref="T:System.Xml.Xsl.XsltArgumentList" /> stellt zusätzliche Laufzeitargumente bereit.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn das Stylesheet eine XSLT-Transformation enthält `document()` -Funktion, wird er aufgelöst, die mit einer <xref:System.Xml.XmlUrlResolver> ohne Benutzeranmeldeinformationen. Wenn die externe Ressource auf eine Netzwerkressource, die eine Authentifizierung erforderlich ist befindet, verwenden Sie die Überladung, die akzeptiert eine <xref:System.Xml.XmlResolver> als eines ihrer Argumente und geben Sie eine <xref:System.Xml.XmlResolver> mit den erforderlichen Anmeldeinformationen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="input" />-Wert oder der <paramref name="results" />-Wert ist <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Bei der Ausführung der XSLT-Transformation ist ein Fehler aufgetreten.</exception>
        <related type="Article" href="http://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">Verwenden der XslCompiledTransform-Klasse</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XmlReader input, class System.Xml.Xsl.XsltArgumentList arguments, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XmlReader, arguments As XsltArgumentList, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XmlReader ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::Xml::XmlWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XmlReader * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter -&gt; unit" Usage="xslCompiledTransform.Transform (input, arguments, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XmlReader" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input">Der <see cref="T:System.Xml.XmlReader" />, der das Eingabedokument enthält.</param>
        <param name="arguments">Eine <see cref="T:System.Xml.Xsl.XsltArgumentList" /> mit durch Namespaces gekennzeichneten Argumenten, die als Eingabe für die Transformation verwendet werden. Dieser Wert kann <see langword="null" /> sein.</param>
        <param name="results">Der <see cref="T:System.Xml.XmlWriter" />, an den die Ausgabe erfolgen soll.  
  
Wenn das Stylesheet ein <c>xsl:output</c>-Element enthält, müssen Sie den <see cref="T:System.Xml.XmlWriter" /> mithilfe des <see cref="T:System.Xml.XmlWriterSettings" />-Objekts erstellen, das von der <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />-Eigenschaft zurückgegeben wird. Dieses Verfahren stellt sicher, dass <see cref="T:System.Xml.XmlWriter" /> die richtigen Ausgabeeinstellungen verwendet.</param>
        <summary>Führt die Transformation anhand des vom <see cref="T:System.Xml.XmlReader" />-Objekt angegebenen Eingabedokuments aus und gibt die Ergebnisse an einen <see cref="T:System.Xml.XmlWriter" /> aus. Die <see cref="T:System.Xml.Xsl.XsltArgumentList" /> stellt zusätzliche Laufzeitargumente bereit.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn das Stylesheet eine XSLT-Transformation enthält `document()` -Funktion, wird er aufgelöst, die mit einer <xref:System.Xml.XmlUrlResolver> ohne Benutzeranmeldeinformationen. Wenn die externe Ressource auf eine Netzwerkressource, die eine Authentifizierung erforderlich ist befindet, verwenden Sie die Überladung, die akzeptiert eine <xref:System.Xml.XmlResolver> als eines ihrer Argumente und geben Sie eine <xref:System.Xml.XmlResolver> mit den erforderlichen Anmeldeinformationen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="input" />-Wert oder der <paramref name="results" />-Wert ist <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Bei der Ausführung der XSLT-Transformation ist ein Fehler aufgetreten.</exception>
        <related type="Article" href="http://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">Verwenden der XslCompiledTransform-Klasse</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList arguments, System.IO.Stream results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.Stream results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, arguments As XsltArgumentList, results As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::Stream ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.IO.Stream -&gt; unit" Usage="xslCompiledTransform.Transform (input, arguments, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="input">Ein Objekt, das die <see cref="T:System.Xml.XPath.IXPathNavigable" />-Schnittstelle implementiert. Dabei kann es sich in Microsoft .NET Framework entweder um einen <see cref="T:System.Xml.XmlNode" /> (i. d. R. ein <see cref="T:System.Xml.XmlDocument" />) oder um ein <see cref="T:System.Xml.XPath.XPathDocument" /> mit den zu transformierenden Daten handeln.</param>
        <param name="arguments">Eine <see cref="T:System.Xml.Xsl.XsltArgumentList" /> mit durch Namespaces gekennzeichneten Argumenten, die als Eingabe für die Transformation verwendet werden. Dieser Wert kann <see langword="null" /> sein.</param>
        <param name="results">Der Stream, in den ausgegeben werden soll.</param>
        <summary>Führt die Transformation anhand des vom <see cref="T:System.Xml.XPath.IXPathNavigable" />-Objekt angegebenen Eingabedokuments aus und gibt die Ergebnisse an einen Stream aus. Die <see cref="T:System.Xml.Xsl.XsltArgumentList" /> stellt zusätzliche Laufzeitargumente bereit.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die XSLT `document()` Funktion aktiviert ist, erfolgt die Auflösung anhand einer <xref:System.Xml.XmlUrlResolver> ohne Benutzeranmeldeinformationen. Wenn die externe Ressource auf eine Netzwerkressource, die eine Authentifizierung erforderlich ist befindet, verwenden Sie die Überladung, die akzeptiert eine <xref:System.Xml.XmlResolver> als eines ihrer Argumente und geben Sie eine <xref:System.Xml.XmlResolver> mit den erforderlichen Anmeldeinformationen.  
  
 Diese Methode unterstützt nicht die `xsl:strip-space` Element. Wenn sich das kompilierte Stylesheet enthalten die `xsl:strip-space` -Element, verwenden Sie die <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> Überladung nimmt eine <xref:System.Xml.XmlReader> als das Eingabeargument.  
  
 Die <xref:System.Xml.XPath.IXPathNavigable>-Schnittstelle ist in der <xref:System.Xml.XmlNode>-Klasse und der <xref:System.Xml.XPath.XPathDocument>-Klasse implementiert. Diese Klassen stellen einen speicherinternen Cache der XML-Daten dar.  
  
-   Die <xref:System.Xml.XmlNode>-Klasse basiert auf dem W3C-DOM (Document Object Model) und umfasst Bearbeitungsfunktionen.  
  
-   Die <xref:System.Xml.XPath.XPathDocument>-Klasse ist ein schreibgeschützter Datenspeicher, der auf dem XPath-Datenmodell basiert. <xref:System.Xml.XPath.XPathDocument> ist die empfohlene Klasse zu XSLT-Verarbeitung. Im Vergleich zur <xref:System.Xml.XmlNode>-Klasse bietet sie eine schnellere Leistung.  
  
 Transformationen werden auf das gesamte Dokument angewendet. Wenn Sie einen anderen Knoten als den Stammknoten des Dokuments übergeben, wird dadurch nicht verhindert, dass im Transformationsprozess auf alle Knoten im geladenen Dokument zugegriffen wird. Zum Transformieren eines Knotenfragments müssen Sie ein Objekt erstellen, das nur das Knotenfragment enthält, und dieses Objekt an die <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>-Methode übergeben. Weitere Informationen finden Sie unter [Gewusst wie: Transformieren eines Knotenfragments](~/docs/standard/data/xml/how-to-transform-a-node-fragment.md).  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine XSLT-Transformation ausgeführt und gibt eine <xref:System.IO.FileStream>.  
  
 [!code-csharp[XslCompiledTransform.Transform#6](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#6)]
 [!code-vb[XslCompiledTransform.Transform#6](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="input" />-Wert oder der <paramref name="results" />-Wert ist <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Bei der Ausführung der XSLT-Transformation ist ein Fehler aufgetreten.</exception>
        <related type="Article" href="http://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">Verwenden der XslCompiledTransform-Klasse</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList arguments, System.IO.TextWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.TextWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, arguments As XsltArgumentList, results As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::TextWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.IO.TextWriter -&gt; unit" Usage="xslCompiledTransform.Transform (input, arguments, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="input">Ein Objekt, das die <see cref="T:System.Xml.XPath.IXPathNavigable" />-Schnittstelle implementiert. Dabei kann es sich in Microsoft .NET Framework entweder um einen <see cref="T:System.Xml.XmlNode" /> (i. d. R. ein <see cref="T:System.Xml.XmlDocument" />) oder um ein <see cref="T:System.Xml.XPath.XPathDocument" /> mit den zu transformierenden Daten handeln.</param>
        <param name="arguments">Eine <see cref="T:System.Xml.Xsl.XsltArgumentList" /> mit durch Namespaces gekennzeichneten Argumenten, die als Eingabe für die Transformation verwendet werden. Dieser Wert kann <see langword="null" /> sein.</param>
        <param name="results">Der <see cref="T:System.IO.TextWriter" />, an den die Ausgabe erfolgen soll.</param>
        <summary>Führt die Transformation anhand des vom <see cref="T:System.Xml.XPath.IXPathNavigable" />-Objekt angegebenen Eingabedokuments aus und gibt die Ergebnisse an einen <see cref="T:System.IO.TextWriter" /> aus. Die <see cref="T:System.Xml.Xsl.XsltArgumentList" /> stellt zusätzliche Laufzeitargumente bereit.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die XSLT `document()` Funktion aktiviert ist, erfolgt die Auflösung anhand einer <xref:System.Xml.XmlUrlResolver> ohne Benutzeranmeldeinformationen. Wenn die externe Ressource auf eine Netzwerkressource, die eine Authentifizierung erforderlich ist befindet, verwenden Sie die Überladung, die akzeptiert eine <xref:System.Xml.XmlResolver> als eines ihrer Argumente und geben Sie eine <xref:System.Xml.XmlResolver> mit den erforderlichen Anmeldeinformationen.  
  
 Diese Methode unterstützt nicht die `xsl:strip-space` Element. Wenn sich das kompilierte Stylesheet enthalten die `xsl:strip-space` -Element, verwenden Sie die <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> Überladung nimmt eine <xref:System.Xml.XmlReader> als das Eingabeargument.  
  
 Die <xref:System.Xml.XPath.IXPathNavigable>-Schnittstelle ist in der <xref:System.Xml.XmlNode>-Klasse und der <xref:System.Xml.XPath.XPathDocument>-Klasse implementiert. Diese Klassen stellen einen speicherinternen Cache der XML-Daten dar.  
  
-   Die <xref:System.Xml.XmlNode>-Klasse basiert auf dem W3C-DOM (Document Object Model) und umfasst Bearbeitungsfunktionen.  
  
-   Die <xref:System.Xml.XPath.XPathDocument>-Klasse ist ein schreibgeschützter Datenspeicher, der auf dem XPath-Datenmodell basiert. <xref:System.Xml.XPath.XPathDocument> ist die empfohlene Klasse zu XSLT-Verarbeitung. Im Vergleich zur <xref:System.Xml.XmlNode>-Klasse bietet sie eine schnellere Leistung.  
  
 Transformationen werden auf das gesamte Dokument angewendet. Wenn Sie einen anderen Knoten als den Stammknoten des Dokuments übergeben, wird dadurch nicht verhindert, dass im Transformationsprozess auf alle Knoten im geladenen Dokument zugegriffen wird. Zum Transformieren eines Knotenfragments müssen Sie ein Objekt erstellen, das nur das Knotenfragment enthält, und dieses Objekt an die <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>-Methode übergeben. Weitere Informationen finden Sie unter [Gewusst wie: Transformieren eines Knotenfragments](~/docs/standard/data/xml/how-to-transform-a-node-fragment.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="input" />-Wert oder der <paramref name="results" />-Wert ist <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Bei der Ausführung der XSLT-Transformation ist ein Fehler aufgetreten.</exception>
        <related type="Article" href="http://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">Verwenden der XslCompiledTransform-Klasse</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList arguments, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, arguments As XsltArgumentList, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::Xml::XmlWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter -&gt; unit" Usage="xslCompiledTransform.Transform (input, arguments, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input">Ein Objekt, das die <see cref="T:System.Xml.XPath.IXPathNavigable" />-Schnittstelle implementiert. Dabei kann es sich in Microsoft .NET Framework entweder um einen <see cref="T:System.Xml.XmlNode" /> (i. d. R. ein <see cref="T:System.Xml.XmlDocument" />) oder um ein <see cref="T:System.Xml.XPath.XPathDocument" /> mit den zu transformierenden Daten handeln.</param>
        <param name="arguments">Eine <see cref="T:System.Xml.Xsl.XsltArgumentList" /> mit durch Namespaces gekennzeichneten Argumenten, die als Eingabe für die Transformation verwendet werden. Dieser Wert kann <see langword="null" /> sein.</param>
        <param name="results">Der <see cref="T:System.Xml.XmlWriter" />, an den die Ausgabe erfolgen soll.  
  
Wenn das Stylesheet ein <c>xsl:output</c>-Element enthält, müssen Sie den <see cref="T:System.Xml.XmlWriter" /> mithilfe des <see cref="T:System.Xml.XmlWriterSettings" />-Objekts erstellen, das von der <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />-Eigenschaft zurückgegeben wird. Dieses Verfahren stellt sicher, dass <see cref="T:System.Xml.XmlWriter" /> die richtigen Ausgabeeinstellungen verwendet.</param>
        <summary>Führt die Transformation anhand des vom <see cref="T:System.Xml.XPath.IXPathNavigable" />-Objekt angegebenen Eingabedokuments aus und gibt die Ergebnisse an einen <see cref="T:System.Xml.XmlWriter" /> aus. Die <see cref="T:System.Xml.Xsl.XsltArgumentList" /> stellt zusätzliche Laufzeitargumente bereit.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die XSLT `document()` Funktion aktiviert ist, erfolgt die Auflösung anhand einer <xref:System.Xml.XmlUrlResolver> ohne Benutzeranmeldeinformationen. Wenn die externe Ressource auf eine Netzwerkressource, die eine Authentifizierung erforderlich ist befindet, verwenden Sie die Überladung, die akzeptiert eine <xref:System.Xml.XmlResolver> als eines ihrer Argumente und geben Sie eine <xref:System.Xml.XmlResolver> mit den erforderlichen Anmeldeinformationen.  
  
 Diese Methode unterstützt nicht die `xsl:strip-space` Element. Wenn sich das kompilierte Stylesheet enthalten die `xsl:strip-space` -Element, verwenden Sie die <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> Überladung nimmt eine <xref:System.Xml.XmlReader> als das Eingabeargument.  
  
 Die <xref:System.Xml.XPath.IXPathNavigable>-Schnittstelle ist in der <xref:System.Xml.XmlNode>-Klasse und der <xref:System.Xml.XPath.XPathDocument>-Klasse implementiert. Diese Klassen stellen einen speicherinternen Cache der XML-Daten dar.  
  
-   Die <xref:System.Xml.XmlNode>-Klasse basiert auf dem W3C-DOM (Document Object Model) und umfasst Bearbeitungsfunktionen.  
  
-   Die <xref:System.Xml.XPath.XPathDocument>-Klasse ist ein schreibgeschützter Datenspeicher, der auf dem XPath-Datenmodell basiert. <xref:System.Xml.XPath.XPathDocument> ist die empfohlene Klasse zu XSLT-Verarbeitung. Im Vergleich zur <xref:System.Xml.XmlNode>-Klasse bietet sie eine schnellere Leistung.  
  
 Transformationen werden auf das gesamte Dokument angewendet. Wenn Sie einen anderen Knoten als den Stammknoten des Dokuments übergeben, wird dadurch nicht verhindert, dass im Transformationsprozess auf alle Knoten im geladenen Dokument zugegriffen wird. Zum Transformieren eines Knotenfragments müssen Sie ein Objekt erstellen, das nur das Knotenfragment enthält, und dieses Objekt an die <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>-Methode übergeben. Weitere Informationen finden Sie unter [Gewusst wie: Transformieren eines Knotenfragments](~/docs/standard/data/xml/how-to-transform-a-node-fragment.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="input" />-Wert oder der <paramref name="results" />-Wert ist <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Bei der Ausführung der XSLT-Transformation ist ein Fehler aufgetreten.</exception>
        <related type="Article" href="http://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">Verwenden der XslCompiledTransform-Klasse</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results, System.Xml.XmlResolver documentResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XmlReader input, class System.Xml.Xsl.XsltArgumentList arguments, class System.Xml.XmlWriter results, class System.Xml.XmlResolver documentResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XmlReader, arguments As XsltArgumentList, results As XmlWriter, documentResolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XmlReader ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::Xml::XmlWriter ^ results, System::Xml::XmlResolver ^ documentResolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XmlReader * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter * System.Xml.XmlResolver -&gt; unit" Usage="xslCompiledTransform.Transform (input, arguments, results, documentResolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XmlReader" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
        <Parameter Name="documentResolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">Der <see cref="T:System.Xml.XmlReader" />, der das Eingabedokument enthält.</param>
        <param name="arguments">Eine <see cref="T:System.Xml.Xsl.XsltArgumentList" /> mit durch Namespaces gekennzeichneten Argumenten, die als Eingabe für die Transformation verwendet werden. Dieser Wert kann <see langword="null" /> sein.</param>
        <param name="results">Der <see cref="T:System.Xml.XmlWriter" />, an den die Ausgabe erfolgen soll.  
  
Wenn das Stylesheet ein <c>xsl:output</c>-Element enthält, müssen Sie den <see cref="T:System.Xml.XmlWriter" /> mithilfe des <see cref="T:System.Xml.XmlWriterSettings" />-Objekts erstellen, das von der <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />-Eigenschaft zurückgegeben wird. Dieses Verfahren stellt sicher, dass <see cref="T:System.Xml.XmlWriter" /> die richtigen Ausgabeeinstellungen verwendet.</param>
        <param name="documentResolver">Der zum Auflösen der XSLT-<c>document()</c>-Funktion verwendete <see cref="T:System.Xml.XmlResolver" />. Wenn dies <see langword="null" /> ist, wird die <c>document()</c>-Funktion nicht aufgelöst.</param>
        <summary>Führt die Transformation anhand des vom <see cref="T:System.Xml.XmlReader" />-Objekt angegebenen Eingabedokuments aus und gibt die Ergebnisse an einen <see cref="T:System.Xml.XmlWriter" /> aus. Die <see cref="T:System.Xml.Xsl.XsltArgumentList" /> stellt zusätzliche Laufzeitargumente bereit, und der XmlResolver löst die <c>document()</c>-XSLT-Funktion auf.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird ein <xref:System.Xml.XmlSecureResolver> zum Auflösen der XSLT- `document()` Funktion.  
  
 [!code-csharp[XslCompiledTransform.Transform#4](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#4)]
 [!code-vb[XslCompiledTransform.Transform#4](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="input" />-Wert oder der <paramref name="results" />-Wert ist <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Bei der Ausführung der XSLT-Transformation ist ein Fehler aufgetreten.</exception>
        <related type="Article" href="http://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">Verwenden der XslCompiledTransform-Klasse</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results, System.Xml.XmlResolver documentResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList arguments, class System.Xml.XmlWriter results, class System.Xml.XmlResolver documentResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, arguments As XsltArgumentList, results As XmlWriter, documentResolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::Xml::XmlWriter ^ results, System::Xml::XmlResolver ^ documentResolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter * System.Xml.XmlResolver -&gt; unit" Usage="xslCompiledTransform.Transform (input, arguments, results, documentResolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
        <Parameter Name="documentResolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">Das zu transformierende Dokument, das vom <see cref="T:System.Xml.XPath.IXPathNavigable" />-Objekt angegeben wird.</param>
        <param name="arguments">Argumentliste als <see cref="T:System.Xml.Xsl.XsltArgumentList" />.</param>
        <param name="results">Der <see cref="T:System.Xml.XmlWriter" />, an den die Ausgabe erfolgen soll.  
  
Wenn das Stylesheet ein <see langword="xsl:output" />-Element enthält, müssen Sie den <see cref="T:System.Xml.XmlWriter" /> mithilfe des <see cref="T:System.Xml.XmlWriterSettings" />-Objekts erstellen, das von der <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />-Eigenschaft zurückgegeben wird. Dieses Verfahren stellt sicher, dass <see cref="T:System.Xml.XmlWriter" /> die richtigen Ausgabeeinstellungen verwendet.</param>
        <param name="documentResolver">Der zum Auflösen der XSLT-<see langword="document()" />-Funktion verwendete <see cref="T:System.Xml.XmlResolver" />. Wenn dies <see langword="null" /> ist, wird die <see langword="document()" />-Funktion nicht aufgelöst.</param>
        <summary>Führt die Transformation anhand des vom <see cref="T:System.Xml.XPath.IXPathNavigable" />-Objekt angegebenen Eingabedokuments aus und gibt die Ergebnisse an einen <see cref="T:System.Xml.XmlWriter" /> aus. Die <see cref="T:System.Xml.Xsl.XsltArgumentList" /> stellt zusätzliche Laufzeitargumente bereit, und der <see cref="T:System.Xml.XmlResolver" /> löst die XSLT-<see langword="document()" />-Funktion auf.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
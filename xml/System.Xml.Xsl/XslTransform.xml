<Type Name="XslTransform" FullName="System.Xml.Xsl.XslTransform">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fb28f082335e4e40942b3534adb8e26e90fd39b5" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83919802" /></Metadata><TypeSignature Language="C#" Value="public sealed class XslTransform" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XslTransform extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Xsl.XslTransform" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XslTransform" />
  <TypeSignature Language="C++ CLI" Value="public ref class XslTransform sealed" />
  <TypeSignature Language="F#" Value="type XslTransform = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Xml.ReaderWriter" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Obsolete("This class has been deprecated. Please use System.Xml.Xsl.XslCompiledTransform instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Transformiert XML-Daten unter Verwendung eines XSLT (Extensible Stylesheet Language for Transformations)-Stylesheets.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Die <xref:System.Xml.Xsl.XslTransform>-Klasse ist in Microsoft .NET Framework, Version 2,0, veraltet. Die <xref:System.Xml.Xsl.XslCompiledTransform>-Klasse ist der neue XSLT-Prozessor. Weitere Informationen finden Sie unter [Verwenden der XslCompiledTransform-Klasse](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) und [Migrieren von der XslTransform-Klasse](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class).  
  
 <xref:System.Xml.Xsl.XslTransform> unterstützt die XSLT 1,0-Syntax. Das XSLT-Stylesheet muss den Namespace `http://www.w3.org/1999/XSL/Transform`verwenden.  
  
 Zusätzliche Argumente können auch mit der <xref:System.Xml.Xsl.XsltArgumentList>-Klasse dem Stylesheet hinzugefügt werden. Diese Klasse enthält Eingabeparameter für das Stylesheet und Erweiterungs Objekte, die aus dem Stylesheet aufgerufen werden können.  
  
 So transformieren Sie XML-Daten:  
  
1.  Erstellen Sie ein <xref:System.Xml.Xsl.XslTransform>-Objekt.  
  
2.  Verwenden Sie die <xref:System.Xml.Xsl.XslTransform.Load%2A>-Methode, um das Stylesheet für die Transformation zu laden. Diese Methode verfügt über mehrere über Ladungen und kann ein Stylesheet mit einem <xref:System.Xml.XmlReader>, <xref:System.Xml.XPath.XPathNavigator>, <xref:System.Xml.XPath.IXPathNavigable>oder einer URL mit dem Speicherort der Datei laden.  
  
3.  Verwenden Sie die <xref:System.Xml.Xsl.XslTransform.Transform%2A>-Methode, um die XML-Daten zu transformieren. Diese Methode verfügt über mehrere über Ladungen und kann verschiedene Eingabe-und Ausgabetypen verarbeiten. Sie können auch eine <xref:System.Xml.Xsl.XsltArgumentList> angeben, die zusätzliche Argumente enthält, die während der Transformation als Eingabe verwendet werden sollen.  
  
 **Sicherheitshinweise**  
  
 Beim Erstellen einer Anwendung, die die <xref:System.Xml.Xsl.XslTransform>-Klasse verwendet, sollten Ihnen die folgenden Elemente und deren Auswirkungen bekannt sein:  
  
-   Erweiterungsobjekte sind standardmäßig aktiviert. Wenn der <xref:System.Xml.Xsl.XsltArgumentList>-Methode ein <xref:System.Xml.Xsl.XslTransform.Transform%2A>-Objekt übergeben wird, das Erweiterungsobjekte enthält, so werden diese verwendet.  
  
-   XSLT-Stylesheets können Verweise auf andere Dateien und eingebettete Skriptblöcke enthalten. Ein böswilliger Benutzer kann dies ausnutzen, indem er Daten oder Stylesheets bereitstellt, die bei der Ausführung dazu führt, dass das System so lange verarbeitet, bis die Ressourcen des Computers niedrig sind.  
  
-   XSLT-Anwendungen, die in einer teilweise vertrauenswürdigen Umgebung ausgeführt werden, können einem Stylesheet-Spoofing ausgesetzt sein. Ein böswilliger Benutzer könnte z. B. ein Objekt mit einem schädlichen Stylesheet laden und es an einen anderen Benutzer übermitteln, der die <xref:System.Xml.Xsl.XslTransform.Transform%2A>-Methode aufruft und die Transformation ausführt.  
  
 Diese Sicherheitsprobleme können verringert werden, indem <xref:System.Xml.Xsl.XslTransform>-Objekte, XSLT-Stylesheets oder XML-Quelldaten aus nicht vertrauenswürdigen Quellen nicht akzeptiert werden.  
  
 **Skriptunterstützung**  
  
 Diese Klasse unterstützt die eingebettete Skripterstellung mithilfe des `msxsl:script`-Elements.  
  
 In Version 1,1 des .NET Framework legt der Beweis des Stylesheets fest, welche Berechtigungen eingebetteten Skripts erteilt werden.  
  
-   Wenn das Stylesheet aus einer Uniform Resource Identifier (URI) geladen wurde, wird der URI verwendet, um den Beweis zu erstellen. Dieser Beweis enthält den URI zusammen mit der Website und der Zone.  
  
-   Wenn das Stylesheet mit einer anderen Quelle geladen wurde, können Sie einen Beweis bereitstellen, indem Sie ein <xref:System.Security.Policy.Evidence?displayProperty=nameWithType> Objekt an die <xref:System.Xml.Xsl.XslTransform.Load%2A>-Methode übergeben. Andernfalls hat die skripterassembly volle Vertrauenswürdigkeit.  
  
 Teilweise vertrauenswürdige Aufrufer: für die Kompilierung des eingebetteten Skripts ist `UnmanagedCode` Berechtigung erforderlich. `ControlEvidence` Berechtigung ist erforderlich, um <xref:System.Security.Policy.Evidence> für die <xref:System.Xml.Xsl.XslTransform.Load%2A>-Methode bereitzustellen. Eine <xref:System.Security.SecurityException> wird ausgelöst, wenn der Aufrufer nicht über die erforderlichen Berechtigungen verfügt. Weitere Informationen finden Sie unter <xref:System.Security.Permissions.SecurityPermission?displayProperty=nameWithType> und <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=nameWithType>.  
  
 Das `msxsl:script`-Element weist die folgenden Anforderungen auf:  
  
-   Das `msxsl:script`-Element gehört zum `urn:schemas-microsoft-com:xslt`-Namespace. Das Stylesheet muss die Namespace Deklaration `xmlns:msxsl=urn:schemas-microsoft-com:xslt`enthalten.  
  
-   Das `msxsl:script`-Element kann ein `language` Attribut enthalten, das die zu verwendende Skriptsprache angibt. Der Wert des `language`-Attributs muss einer der folgenden sein: C#, CSharp, VB, VisualBasic, JScript oder JavaScript. Da der Sprachen Name nicht zwischen Groß-und Kleinschreibung unterscheidet, sind JavaScript und JavaScript beide gültig. Wenn kein `language` Attribut angegeben ist, wird standardmäßig JScript verwendet.  
  
-   Das `msxsl:script`-Element muss ein `implements-prefix` Attribut enthalten, das das Präfix enthält, das den dem Skriptblock zugeordneten Namespace darstellt. Dieser Namespace muss innerhalb des Stylesheets definiert werden. Ein Stylesheet kann mehrere Skriptblöcke enthalten, die nach Namespace gruppiert sind. Skriptblöcke mit mehreren Sprachen innerhalb desselben Namespace sind nicht möglich. Skriptblöcke können eine Funktion aufzurufen, die in einem anderen Skriptblock definiert ist, vorausgesetzt, die Skriptblöcke befinden sich im selben Namespace. Der Inhalt eines Skript Blocks wird gemäß den Regeln und der Syntax der Skriptsprache (angegeben durch das `language`-Attribut) analysiert. Wenn Sie z. b. einen C# Skriptblock hatten, werden den `//` Zeichen Kommentare vorangestellt. Die Kommentare müssen gültige XML-Inhalte sein.  
  
> [!NOTE]
> Es wird empfohlen, Skriptblöcke in einem CDATA-Abschnitt zu verpacken.
  
 [!INCLUDE [xsltransform-script](~/includes/xsltransform-script.md)] 
   
 Funktionen können innerhalb des `msxsl:script`-Elements deklariert werden. In der folgenden Tabelle werden die Namespaces angezeigt, die standardmäßig unterstützt werden.  
  
|Unterstützte Namespaces|BESCHREIBUNG|  
|--------------------------|-----------------|  
|`System`|System Klassen.|  
|`System.Collection`|Auflistungsklassen.|  
|`System.Text`|Klassen für die Text Behandlung.|  
|`System.Xml`|Kern-XML-Klassen.|  
|`System.Xml.Xsl`|XSLT-Klassen.|  
|`System.Xml.XPath`|XPath-Klassen (XML Path Language).|  
  
 Die bereitgestellten Argumente und Rückgabewerte, die von den Skriptfunktionen definiert werden, müssen einer der unten aufgeführten World Wide Web Consortium (W3C) Typen sein. In der folgenden Tabelle wird die Zuordnung zwischen den W3C-Typen, entweder XPath oder XSLT, und den entsprechenden .NET Framework-Klassen erläutert.  
  
|W3C-Typ|Äquivalente .NET-Klasse|  
|--------------|---------------------------|  
|Zeichenfolge (XPath)|`System.String`|  
|Boolescher Wert (XPath)|`System.Boolean`|  
|Zahl (XPath)|`System.Double`|  
|Ergebnis Struktur Fragment (XSLT)|`System.Xml.XPath.XPathNavigator`|  
|Knotengruppe (XPath)|`System.Xml.XPath.XPathNodeIterator`|  
  
 Wenn die Skriptfunktion einen der folgenden numerischen Typen verwendet: Int16, UInt16, Int32, UInt32, Int64, UInt64, Single oder Decimal, werden diese Typen in double umgewandelt, was der W3C-XPath-Typnummer zugeordnet ist.  
  
 Eine-Ausnahme wird ausgelöst, wenn eine-Funktion aufgerufen wird, die das Argument Ergebnis nicht in einen der erforderlichen Typen konvertieren kann.  
  
> [!NOTE]
>  `msxsl:script` und `msxsl:node-list` sind die einzigen Funktionen aus dem `urn:schemas-microsoft-com:xslt` Namespace, die von der <xref:System.Xml.Xsl.XslTransform>-Klasse unterstützt werden.  
  
 <xref:System.Xml.Xsl.XslTransform> kann Common Language Runtime (CLR)-Code als Erweiterungsmechanismus verwenden. Dies wird erreicht, indem eine Instanz einer Klasse an die <xref:System.Xml.Xsl.XslTransform> Klasse übergeben und die öffentlichen Methoden innerhalb eines XSLT-Stylesheets aufgerufen werden. Methoden, die mit dem `params`-Schlüsselwort definiert werden, das eine nicht angegebene Anzahl von Parametern zulässt, funktionieren in diesem Szenario nicht ordnungsgemäß. Weitere [Informationen finden Sie](/dotnet/csharp/language-reference/keywords/params) unter "Parameter".  
  
 Weitere Informationen finden Sie unter [XSLT-Transformationen mit der XslTransform-Klasse](/dotnet/standard/data/xml/xslt-transformations-with-the-xsltransform-class).  
  
   
  
## Examples  
 Im folgenden Beispiel wird das angegebene XML-Dokument transformiert, und das Ergebnis wird an die Konsole ausgegeben.  
  
 [!code-csharp[Classic WebData XslTransform Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XslTransform Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XslTransform Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XslTransform Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><see cref="T:System.Xml.Xsl.XslTransform" /> Objekte sind nur für Transformations Vorgänge Thread sicher. Andere Vorgänge sind nicht garantiert Thread sicher. Sie müssen sicherstellen, dass bei Ladevorgängen keine anderen Methoden für das Objekt aufgerufen werden.</threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XslTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XslTransform();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der Klasse <see cref="T:System.Xml.Xsl.XslTransform" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Lädt das XSLT-Stylesheet einschließlich aller Stylesheets, auf die in <see langword="xsl:include" />-Elementen und <see langword="xsl:import" />-Elementen verwiesen wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Die <xref:System.Xml.Xsl.XslTransform>-Klasse ist in der .NET Framework Version 2,0 veraltet. Die <xref:System.Xml.Xsl.XslCompiledTransform>-Klasse ist der neue XSLT-Prozessor. Weitere Informationen finden Sie unter [Verwenden der XslCompiledTransform-Klasse](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) und [Migrieren von der XslTransform-Klasse](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (url As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::String ^ url);" />
      <MemberSignature Language="F#" Value="member this.Load : string -&gt; unit" Usage="xslTransform.Load url" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">Die URL, die das zu ladende XSLT-Stylesheet angibt.</param>
        <summary>Lädt das durch eine URL angegebene XSLT-Stylesheet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Die <xref:System.Xml.Xsl.XslTransform>-Klasse ist in der .NET Framework Version 2,0 veraltet. Die <xref:System.Xml.Xsl.XslCompiledTransform>-Klasse ist der neue XSLT-Prozessor. Weitere Informationen finden Sie unter [Verwenden der XslCompiledTransform-Klasse](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) und [Migrieren von der XslTransform-Klasse](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class).  
  
 <xref:System.Xml.Xsl.XslTransform> unterstützt die XSLT 1,0-Syntax. Das XSLT-Stylesheet muss die Namespace Deklaration `xmlns:xsl="http://www.w3.org/1999/XSL/Transform"`enthalten.  
  
 Diese Methode lädt das XSLT-Stylesheet, einschließlich aller Stylesheets, auf die in `xsl:include` und `xsl:import` Elementen verwiesen wird. Externe Ressourcen werden mithilfe eines <xref:System.Xml.XmlUrlResolver> ohne Benutzer Anmelde Informationen aufgelöst. Wenn sich die Stylesheets in einer Netzwerkressource befinden, für die eine Authentifizierung erforderlich ist, verwenden Sie die-Überladung, die eine <xref:System.Xml.XmlResolver> als eines ihrer Argumente annimmt, und geben Sie eine <xref:System.Xml.XmlResolver> mit den erforderlichen Anmelde Informationen an.  
  
 Wenn das Stylesheet eingebettete Skripts enthält, wird das Skript in eine Assembly kompiliert. Der URI des Stylesheets wird zum Erstellen von beweisen verwendet, die auf die Assembly angewendet werden.
  
> [!NOTE]
>  Wenn der Aufrufer nicht über `UnmanagedCode` Berechtigung verfügt, wird das eingebettete Skript nicht kompiliert, und es wird eine <xref:System.Security.SecurityException> ausgelöst. Weitere Informationen finden Sie unter <xref:System.Security.Permissions.SecurityPermission> und <xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein XML-Dokument in ein HTML-Dokument transformiert. Es zeigt die ISBN, den Titel und den Preis für jedes Buch in einer Tabelle an.  
  
 [!code-cpp[Classic WebData XslTransform.Transform7 Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XslTransform.Transform7 Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XslTransform.Transform7 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/VB/source.vb#1)]  
  
 In diesem Beispiel werden die folgenden beiden Eingabedateien verwendet:  
  
 `books.xml`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/books.xml#2)]  
  
 `output.xsl`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/output.xsl#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">Die geladene Ressource ist kein gültiges Stylesheet.</exception>
        <exception cref="T:System.Security.SecurityException">Das Stylesheet enthält eingebettete Skripts, und der Aufrufer verfügt nicht über die <see langword="UnmanagedCode" />-Berechtigung.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XmlReader stylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XmlReader stylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XmlReader ^ stylesheet);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XmlReader -&gt; unit" Usage="xslTransform.Load stylesheet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass evidence to Load() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="stylesheet">Ein <see cref="T:System.Xml.XmlReader" />-Objekt, das das XSLT-Stylesheet enthält.</param>
        <summary>Lädt das im <see cref="T:System.Xml.XmlReader" /> enthaltene XSLT-Stylesheet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Die <xref:System.Xml.Xsl.XslTransform>-Klasse ist in der .NET Framework Version 2,0 veraltet. Die <xref:System.Xml.Xsl.XslCompiledTransform>-Klasse ist der neue XSLT-Prozessor. Weitere Informationen finden Sie unter [Verwenden der XslCompiledTransform-Klasse](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) und [Migrieren von der XslTransform-Klasse](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class).  
  
 <xref:System.Xml.Xsl.XslTransform> unterstützt die XSLT 1,0-Syntax. Das XSLT-Stylesheet muss die Namespace Deklaration `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`enthalten.  
  
 Diese Methode lädt das XSLT-Stylesheet, einschließlich aller Stylesheets, auf die in `xsl:include` und `xsl:import` Elementen verwiesen wird. Externe Ressourcen werden mithilfe eines <xref:System.Xml.XmlUrlResolver> ohne Benutzer Anmelde Informationen aufgelöst. Wenn sich die Stylesheets in einer Netzwerkressource befinden, für die eine Authentifizierung erforderlich ist, verwenden Sie die-Überladung, die eine <xref:System.Xml.XmlResolver> als eines ihrer Argumente annimmt, und geben Sie eine <xref:System.Xml.XmlResolver> mit den erforderlichen Anmelde Informationen an.  
  
 Das Stylesheet wird vom aktuellen Knoten des <xref:System.Xml.XmlReader> über alle untergeordneten Elemente geladen. Dies ermöglicht es Ihnen, einen Teil eines Dokuments als Stylesheet zu verwenden. Nachdem die <xref:System.Xml.Xsl.XslTransform.Load%2A>-Methode zurückgegeben wurde, wird die <xref:System.Xml.XmlReader> auf dem nächsten Knoten nach dem Ende des Stylesheets positioniert. Wenn das Ende des Dokuments erreicht wird, wird der <xref:System.Xml.XmlReader> am Ende der Datei (EOF) platziert.  
  
 Wenn das Stylesheet Entitäten enthält, sollten Sie einen <xref:System.Xml.XmlReader> angeben, der Entitäten auflösen kann (<xref:System.Xml.XmlReader.CanResolveEntity%2A?displayProperty=nameWithType> gibt `true`zurück). In diesem Fall kann eine <xref:System.Xml.XmlValidatingReader> verwendet werden.  
  
 Wenn das Stylesheet eingebettete Skripts enthält, wird das Skript in eine Assembly kompiliert. Die Assembly verfügt über volle Vertrauenswürdigkeit. Die empfohlene Vorgehensweise ist das Bereitstellen von beweisen mithilfe der <xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XmlReader%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29>-Methode.
  
> [!NOTE]
>  Wenn der Aufrufer nicht über `UnmanagedCode` Berechtigung verfügt, wird das eingebettete Skript nicht kompiliert, und es wird eine <xref:System.Security.SecurityException> ausgelöst. Weitere Informationen finden Sie unter <xref:System.Security.Permissions.SecurityPermission> und <xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine XML-Datei transformiert, in der alle Bücher nach Titel sortiert werden.  
  
 [!code-cpp[XslTransform.Load3#1](~/samples/snippets/cpp/VS_Snippets_Data/XslTransform.Load3/CPP/trans3.cpp#1)]
 [!code-csharp[XslTransform.Load3#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Load3/CS/trans3.cs#1)]
 [!code-vb[XslTransform.Load3#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Load3/VB/trans3.vb#1)]  
  
 In diesem Beispiel werden die folgenden Datendateien als Eingabe verwendet.  
  
 `books.xml`  
  
 [!code-xml[XslTransform.Load3#2](~/samples/snippets/xml/VS_Snippets_Data/XslTransform.Load3/XML/books.xml#2)]  
  
 `titles.xsl`  
  
 [!code-xml[XslTransform.Load3#3](~/samples/snippets/xml/VS_Snippets_Data/XslTransform.Load3/XML/titles.xsl#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">Der aktuelle Knoten entspricht keinem gültigen Stylesheet.</exception>
        <exception cref="T:System.Security.SecurityException">Das Stylesheet enthält eingebettete Skripts, und der Aufrufer verfügt nicht über die <see langword="UnmanagedCode" />-Berechtigung.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.IXPathNavigable stylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.IXPathNavigable stylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As IXPathNavigable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::IXPathNavigable ^ stylesheet);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XPath.IXPathNavigable -&gt; unit" Usage="xslTransform.Load stylesheet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass evidence to Load() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.IXPathNavigable" />
      </Parameters>
      <Docs>
        <param name="stylesheet">Ein Objekt, das die <see cref="T:System.Xml.XPath.IXPathNavigable" />-Schnittstelle implementiert. In .NET Framework kann dies entweder ein <see cref="T:System.Xml.XmlNode" /> (normalerweise ein <see cref="T:System.Xml.XmlDocument" />) oder ein <see cref="T:System.Xml.XPath.XPathDocument" /> sein, das das XSLT-Stylesheet enthält.</param>
        <summary>Lädt das im <see cref="T:System.Xml.XPath.IXPathNavigable" /> enthaltene XSLT-Stylesheet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Die <xref:System.Xml.Xsl.XslTransform>-Klasse ist in der .NET Framework Version 2,0 veraltet. Die <xref:System.Xml.Xsl.XslCompiledTransform>-Klasse ist der neue XSLT-Prozessor. Weitere Informationen finden Sie unter [Verwenden der XslCompiledTransform-Klasse](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) und [Migrieren von der XslTransform-Klasse](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class).  
  
 <xref:System.Xml.Xsl.XslTransform> unterstützt die XSLT 1,0-Syntax. Das XSLT-Stylesheet muss die Namespace Deklaration `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`enthalten.  
  
 Diese Methode lädt das XSLT-Stylesheet, einschließlich aller Stylesheets, auf die in `xsl:include` und `xsl:import` Elementen verwiesen wird. Externe Ressourcen werden mithilfe eines <xref:System.Xml.XmlUrlResolver> ohne Benutzer Anmelde Informationen aufgelöst. Wenn sich die Stylesheets in einer Netzwerkressource befinden, für die eine Authentifizierung erforderlich ist, verwenden Sie die-Überladung, die eine <xref:System.Xml.XmlResolver> als eines ihrer Argumente annimmt, und geben Sie eine <xref:System.Xml.XmlResolver> mit den erforderlichen Anmelde Informationen an.  
  
 Wenn das Stylesheet eingebettete Skripts enthält, wird das Skript in eine Assembly kompiliert. Die Assembly verfügt über volle Vertrauenswürdigkeit. Die empfohlene Vorgehensweise ist das Bereitstellen von beweisen mithilfe der <xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XPath.IXPathNavigable%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29>-Methode.
  
> [!NOTE]
>  Wenn der Aufrufer nicht über `UnmanagedCode` Berechtigung verfügt, wird das eingebettete Skript nicht kompiliert, und es wird eine <xref:System.Security.SecurityException> ausgelöst. Weitere Informationen finden Sie unter <xref:System.Security.Permissions.SecurityPermission> und <xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">Die geladene Ressource ist kein gültiges Stylesheet.</exception>
        <exception cref="T:System.Security.SecurityException">Das Stylesheet enthält eingebettete Skripts, und der Aufrufer verfügt nicht über die <see langword="UnmanagedCode" />-Berechtigung.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.XPathNavigator stylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.XPathNavigator stylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XPathNavigator)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::XPathNavigator ^ stylesheet);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XPath.XPathNavigator -&gt; unit" Usage="xslTransform.Load stylesheet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass evidence to Load() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.XPathNavigator" />
      </Parameters>
      <Docs>
        <param name="stylesheet">Ein <see cref="T:System.Xml.XPath.XPathNavigator" />-Objekt, das das XSLT-Stylesheet enthält.</param>
        <summary>Lädt das im <see cref="T:System.Xml.XPath.XPathNavigator" /> enthaltene XSLT-Stylesheet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Die <xref:System.Xml.Xsl.XslTransform>-Klasse ist in der .NET Framework Version 2,0 veraltet. Die <xref:System.Xml.Xsl.XslCompiledTransform>-Klasse ist der neue XSLT-Prozessor. Weitere Informationen finden Sie unter [Verwenden der XslCompiledTransform-Klasse](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) und [Migrieren von der XslTransform-Klasse](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class).  
  
 <xref:System.Xml.Xsl.XslTransform> unterstützt die XSLT 1,0-Syntax. Das XSLT-Stylesheet muss die Namespace Deklaration `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`enthalten.  
  
 Diese Methode lädt das XSLT-Stylesheet, einschließlich aller Stylesheets, auf die in `xsl:include` und `xsl:import` Elementen verwiesen wird. Externe Ressourcen werden mithilfe eines <xref:System.Xml.XmlUrlResolver> ohne Benutzer Anmelde Informationen aufgelöst. Wenn sich die Stylesheets in einer Netzwerkressource befinden, für die eine Authentifizierung erforderlich ist, verwenden Sie die-Überladung, die eine <xref:System.Xml.XmlResolver> als eines ihrer Argumente annimmt, und geben Sie eine <xref:System.Xml.XmlResolver> mit den erforderlichen Anmelde Informationen an.  
  
 Das Stylesheet wird von der aktuellen Position des <xref:System.Xml.XPath.XPathNavigator>geladen. Um nur einen Teil des geladenen Dokuments als Stylesheet zu verwenden, navigieren Sie zu dem Knoten, der dem Anfang des Stylesheets entspricht. Nachdem die <xref:System.Xml.Xsl.XslTransform.Load%2A>-Methode zurückgegeben wurde, wird die <xref:System.Xml.XPath.XPathNavigator> am Anfang des Stylesheets (auf dem `xsl:style sheet`-Knoten) positioniert.  
  
 Wenn das Stylesheet eingebettete Skripts enthält, wird das Skript in eine Assembly kompiliert. Die Assembly verfügt über volle Vertrauenswürdigkeit. Die empfohlene Vorgehensweise ist das Bereitstellen von beweisen mithilfe der <xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XPath.XPathNavigator%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29>-Methode.
  
> [!NOTE]
>  Wenn der Aufrufer nicht über `UnmanagedCode` Berechtigung verfügt, wird das eingebettete Skript nicht kompiliert, und es wird eine <xref:System.Security.SecurityException> ausgelöst. Weitere Informationen finden Sie unter <xref:System.Security.Permissions.SecurityPermission> und <xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">Der aktuelle Knoten entspricht keinem gültigen Stylesheet.</exception>
        <exception cref="T:System.Security.SecurityException">Das Stylesheet enthält eingebettete Skripts, und der Aufrufer verfügt nicht über die <see langword="UnmanagedCode" />-Berechtigung.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (string url, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(string url, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.String,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (url As String, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::String ^ url, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Load : string * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Load (url, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="url">Die URL, die das zu ladende XSLT-Stylesheet angibt.</param>
        <param name="resolver"><see cref="T:System.Xml.XmlResolver" /> wird zum Laden des Stylesheets und ggf. zum Laden weiterer Stylesheets verwendet, auf die im <c>xsl:import</c>-Element und im <c>xsl:include</c>-Element verwiesen wird.  
  
Bei <see langword="null" /> wird das Stylesheet mit einem Standard-<see cref="T:System.Xml.XmlUrlResolver" /> ohne Benutzeranmeldeinformationen geöffnet. Der Standard-<see cref="T:System.Xml.XmlUrlResolver" /> wird nicht zum Auflösen externer Ressourcen im Stylesheet verwendet. <c>xsl:import</c>-Elemente und <c>xsl:include</c>-Elemente werden daher nicht aufgelöst.  
  
Der <see cref="T:System.Xml.XmlResolver" /> wird nach Abschluss der <see cref="M:System.Xml.Xsl.XslTransform.Load(System.String,System.Xml.XmlResolver)" />-Methode nicht zwischengespeichert.</param>
        <summary>Lädt das durch eine URL angegebene XSLT-Stylesheet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Die <xref:System.Xml.Xsl.XslTransform>-Klasse ist in der .NET Framework Version 2,0 veraltet. Die <xref:System.Xml.Xsl.XslCompiledTransform>-Klasse ist der neue XSLT-Prozessor. Weitere Informationen finden Sie unter [Verwenden der XslCompiledTransform-Klasse](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) und [Migrieren von der XslTransform-Klasse](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class).  
  
 <xref:System.Xml.Xsl.XslTransform> unterstützt die XSLT 1,0-Syntax. Das XSLT-Stylesheet muss die Namespace Deklaration `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`enthalten.  
  
 Wenn das Stylesheet eingebettete Skripts enthält, wird das Skript in eine Assembly kompiliert. Der URI des Stylesheets wird zum Erstellen von beweisen verwendet, die auf die Assembly angewendet werden.
  
> [!NOTE]
>  Wenn der Aufrufer nicht über `UnmanagedCode` Berechtigung verfügt, wird das eingebettete Skript nicht kompiliert, und es wird eine <xref:System.Security.SecurityException> ausgelöst. Weitere Informationen finden Sie unter <xref:System.Security.Permissions.SecurityPermission> und <xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein XML-Dokument in ein HTML-Dokument transformiert. Im Beispiel wird ein XSLT-Stylesheet geladen, das ein `xsl:include`-Element enthält, das auf ein anderes Stylesheet verweist. Ein <xref:System.Xml.XmlUrlResolver> wird an die <xref:System.Xml.Xsl.XslTransform.Load%2A>-Methode übermittelt, die die für den Zugriff auf die Netzwerkressource erforderlichen Anmelde Informationen für das enthaltene Stylesheet festlegt.  
  
 [!code-csharp[XslTransform.Load2#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Load2/CS/trans2.cs#1)]
 [!code-vb[XslTransform.Load2#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Load2/VB/trans2.vb#1)]  
  
 In diesem Beispiel werden die folgenden Datendateien als Eingabe verwendet.  
  
 `books.xml`  
  
 [!code-xml[XslTransform.Load2#2](~/samples/snippets/xml/VS_Snippets_Data/XslTransform.Load2/XML/books.xml#2)]  
  
 `sort.xsl`  
  
 [!code-xml[XslTransform.Load2#3](~/samples/snippets/xml/VS_Snippets_Data/XslTransform.Load2/XML/sort.xsl#3)]  
  
 `includefile.xsl`  
  
 [!code-xml[XslTransform.Load2#4](~/samples/snippets/xml/VS_Snippets_Data/XslTransform.Load2/XML/includefile.xsl#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">Die geladene Ressource ist kein gültiges Stylesheet.</exception>
        <exception cref="T:System.Security.SecurityException">Das Stylesheet enthält eingebettete Skripts, und der Aufrufer verfügt nicht über die <see langword="UnmanagedCode" />-Berechtigung.</exception>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XmlReader stylesheet, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XmlReader stylesheet, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XmlReader, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XmlReader ^ stylesheet, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XmlReader * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Load (stylesheet, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass evidence to Load() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheet">Ein <see cref="T:System.Xml.XmlReader" />-Objekt, das das XSLT-Stylesheet enthält.</param>
        <param name="resolver"><see cref="T:System.Xml.XmlResolver" /> wird zum Laden von Stylesheets verwendet, auf die im <c>xsl:import</c>-Element und im <c>xsl:include</c>-Element verwiesen wird. Bei <see langword="null" /> werden externe Ressourcen nicht aufgelöst.  
  
Der <see cref="T:System.Xml.XmlResolver" /> wird nach Abschluss der <see cref="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver)" />-Methode nicht zwischengespeichert.</param>
        <summary>Lädt das im <see cref="T:System.Xml.XmlReader" /> enthaltene XSLT-Stylesheet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Die <xref:System.Xml.Xsl.XslTransform>-Klasse ist in der .NET Framework Version 2,0 veraltet. Die <xref:System.Xml.Xsl.XslCompiledTransform>-Klasse ist der neue XSLT-Prozessor. Weitere Informationen finden Sie unter [Verwenden der XslCompiledTransform-Klasse](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) und [Migrieren von der XslTransform-Klasse](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class).  
  
 <xref:System.Xml.Xsl.XslTransform> unterstützt die XSLT 1,0-Syntax. Das XSLT-Stylesheet muss die Namespace Deklaration `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`enthalten.  
  
 Diese Methode lädt das XSLT-Stylesheet, einschließlich aller Stylesheets, auf die in `xsl:include` und `xsl:import` Elementen verwiesen wird. Das Stylesheet wird vom aktuellen Knoten des <xref:System.Xml.XmlReader> über alle untergeordneten Elemente geladen. Dies ermöglicht es Ihnen, einen Teil eines Dokuments als Stylesheet zu verwenden.  
  
 Nachdem die <xref:System.Xml.Xsl.XslTransform.Load%2A>-Methode zurückgegeben wurde, wird die <xref:System.Xml.XmlReader> auf dem nächsten Knoten nach dem Ende des Stylesheets positioniert. Wenn das Ende des Dokuments erreicht wird, wird der <xref:System.Xml.XmlReader> am Ende der Datei (EOF) platziert.  
  
 Wenn das Stylesheet Entitäten enthält, sollten Sie einen <xref:System.Xml.XmlReader> angeben, der Entitäten auflösen kann (<xref:System.Xml.XmlReader.CanResolveEntity%2A?displayProperty=nameWithType> gibt `true`zurück). In diesem Fall kann eine <xref:System.Xml.XmlValidatingReader> verwendet werden.  
  
 Wenn das Stylesheet eingebettete Skripts enthält, wird das Skript in eine Assembly kompiliert. Die Assembly verfügt über volle Vertrauenswürdigkeit. Die empfohlene Vorgehensweise ist das Bereitstellen von beweisen mithilfe der <xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XmlReader%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29>-Methode.
  
> [!NOTE]
>  Wenn der Aufrufer nicht über `UnmanagedCode` Berechtigung verfügt, wird das eingebettete Skript nicht kompiliert, und es wird eine <xref:System.Security.SecurityException> ausgelöst. Weitere Informationen finden Sie unter <xref:System.Security.Permissions.SecurityPermission> und <xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">Der aktuelle Knoten entspricht keinem gültigen Stylesheet.</exception>
        <exception cref="T:System.Security.SecurityException">Das Stylesheet enthält eingebettete Skripts, und der Aufrufer verfügt nicht über die <see langword="UnmanagedCode" />-Berechtigung.</exception>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.IXPathNavigable stylesheet, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.IXPathNavigable stylesheet, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As IXPathNavigable, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::IXPathNavigable ^ stylesheet, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XPath.IXPathNavigable * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Load (stylesheet, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass evidence to Load() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheet">Ein Objekt, das die <see cref="T:System.Xml.XPath.IXPathNavigable" />-Schnittstelle implementiert. In .NET Framework kann dies entweder ein <see cref="T:System.Xml.XmlNode" /> (normalerweise ein <see cref="T:System.Xml.XmlDocument" />) oder ein <see cref="T:System.Xml.XPath.XPathDocument" /> sein, das das XSLT-Stylesheet enthält.</param>
        <param name="resolver"><see cref="T:System.Xml.XmlResolver" /> wird zum Laden von Stylesheets verwendet, auf die im <c>xsl:import</c>-Element und im <c>xsl:include</c>-Element verwiesen wird. Bei <see langword="null" /> werden externe Ressourcen nicht aufgelöst.  
  
Der <see cref="T:System.Xml.XmlResolver" /> wird nach Abschluss der <see cref="Overload:System.Xml.Xsl.XslTransform.Load" />-Methode nicht zwischengespeichert.</param>
        <summary>Lädt das im <see cref="T:System.Xml.XPath.IXPathNavigable" /> enthaltene XSLT-Stylesheet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Die <xref:System.Xml.Xsl.XslTransform>-Klasse ist in der .NET Framework Version 2,0 veraltet. Die <xref:System.Xml.Xsl.XslCompiledTransform>-Klasse ist der neue XSLT-Prozessor. Weitere Informationen finden Sie unter [Verwenden der XslCompiledTransform-Klasse](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) und [Migrieren von der XslTransform-Klasse](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class).  
  
 <xref:System.Xml.Xsl.XslTransform> unterstützt die XSLT 1,0-Syntax. Das XSLT-Stylesheet muss die Namespace Deklaration `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`enthalten.  
  
 Wenn das Stylesheet eingebettete Skripts enthält, wird das Skript in eine Assembly kompiliert. Die Assembly verfügt über volle Vertrauenswürdigkeit. Die empfohlene Vorgehensweise ist das Bereitstellen von beweisen mithilfe der <xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XPath.IXPathNavigable%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29>-Methode.
  
> [!NOTE]
>  Wenn der Aufrufer nicht über `UnmanagedCode` Berechtigung verfügt, wird das eingebettete Skript nicht kompiliert, und es wird eine <xref:System.Security.SecurityException> ausgelöst. Weitere Informationen finden Sie unter <xref:System.Security.Permissions.SecurityPermission> und <xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">Die geladene Ressource ist kein gültiges Stylesheet.</exception>
        <exception cref="T:System.Security.SecurityException">Das Stylesheet enthält eingebettete Skripts, und der Aufrufer verfügt nicht über die <see langword="UnmanagedCode" />-Berechtigung.</exception>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.XPathNavigator stylesheet, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.XPathNavigator stylesheet, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XPathNavigator, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::XPathNavigator ^ stylesheet, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XPath.XPathNavigator * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Load (stylesheet, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass evidence to Load() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheet">Ein <see cref="T:System.Xml.XPath.XPathNavigator" />-Objekt, das das XSLT-Stylesheet enthält.</param>
        <param name="resolver"><see cref="T:System.Xml.XmlResolver" /> wird zum Laden von Stylesheets verwendet, auf die im <c>xsl:import</c>-Element und im <c>xsl:include</c>-Element verwiesen wird. Bei <see langword="null" /> werden externe Ressourcen nicht aufgelöst.  
  
Der <see cref="T:System.Xml.XmlResolver" /> wird nach Abschluss der <see cref="Overload:System.Xml.Xsl.XslTransform.Load" />-Methode nicht zwischengespeichert.</param>
        <summary>Lädt das im <see cref="T:System.Xml.XPath.XPathNavigator" /> enthaltene XSLT-Stylesheet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Die <xref:System.Xml.Xsl.XslTransform>-Klasse ist in der .NET Framework Version 2,0 veraltet. Die <xref:System.Xml.Xsl.XslCompiledTransform>-Klasse ist der neue XSLT-Prozessor. Weitere Informationen finden Sie unter [Verwenden der XslCompiledTransform-Klasse](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) und [Migrieren von der XslTransform-Klasse](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class).  
  
 <xref:System.Xml.Xsl.XslTransform> unterstützt die XSLT 1,0-Syntax. Das XSLT-Stylesheet muss die Namespace Deklaration `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`enthalten.  
  
 Das Stylesheet wird von der aktuellen Position des <xref:System.Xml.XPath.XPathNavigator>geladen. Um einen Teil des geladenen Dokuments als Stylesheet zu verwenden, navigieren Sie zu dem Knoten, der dem Anfang des Stylesheets entspricht. Nachdem die <xref:System.Xml.Xsl.XslTransform.Load%2A>-Methode zurückgegeben wurde, wird die <xref:System.Xml.XPath.XPathNavigator> am Anfang des Stylesheets (auf dem `xsl:style sheet`-Knoten) positioniert.  
  
 Wenn das Stylesheet eingebettete Skripts enthält, wird das Skript in eine Assembly kompiliert. Die Assembly verfügt über volle Vertrauenswürdigkeit. Die empfohlene Vorgehensweise ist das Bereitstellen von beweisen mithilfe der <xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XPath.XPathNavigator%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29>.
  
> [!NOTE]
>  Wenn der Aufrufer nicht über `UnmanagedCode` Berechtigung verfügt, wird das eingebettete Skript nicht kompiliert, und es wird eine <xref:System.Security.SecurityException> ausgelöst. Weitere Informationen finden Sie unter <xref:System.Security.Permissions.SecurityPermission> und <xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">Der aktuelle Knoten entspricht keinem gültigen Stylesheet.</exception>
        <exception cref="T:System.Security.SecurityException">Das Stylesheet enthält eingebettete Skripts, und der Aufrufer verfügt nicht über die <see langword="UnmanagedCode" />-Berechtigung.</exception>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XmlReader stylesheet, System.Xml.XmlResolver resolver, System.Security.Policy.Evidence evidence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XmlReader stylesheet, class System.Xml.XmlResolver resolver, class System.Security.Policy.Evidence evidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver,System.Security.Policy.Evidence)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XmlReader, resolver As XmlResolver, evidence As Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XmlReader ^ stylesheet, System::Xml::XmlResolver ^ resolver, System::Security::Policy::Evidence ^ evidence);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XmlReader * System.Xml.XmlResolver * System.Security.Policy.Evidence -&gt; unit" Usage="xslTransform.Load (stylesheet, resolver, evidence)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="stylesheet">Ein <see cref="T:System.Xml.XmlReader" />-Objekt, das das zu ladende Stylesheet enthält.</param>
        <param name="resolver"><see cref="T:System.Xml.XmlResolver" /> wird zum Laden von Stylesheets verwendet, auf die im <c>xsl:import</c>-Element und im <c>xsl:include</c>-Element verwiesen wird. Bei <see langword="null" /> werden externe Ressourcen nicht aufgelöst.  
  
Der <see cref="T:System.Xml.XmlResolver" /> wird nach Abschluss der <see cref="Overload:System.Xml.Xsl.XslTransform.Load" />-Methode nicht zwischengespeichert.</param>
        <param name="evidence">Der für die Assembly festgelegte <see cref="T:System.Security.Policy.Evidence" />, die für den Skriptblock im XSLT-Stylesheet generiert wurde.  
  
Bei <see langword="null" /> werden Skriptblöcke nicht verarbeitet, die XSLT-<c>document()</c>-Funktion wird nicht unterstützt, und privilegierte Erweiterungsobjekte sind nicht zulässig.  
  
Der Aufrufer muss über die <see langword="ControlEvidence" />-Berechtigung verfügen, um Beweise für die Skriptassembly bereitzustellen. Teilweise vertrauenswürdige Aufrufer können diesen Parameter auf <see langword="null" /> festlegen.</param>
        <summary>Lädt das im <see cref="T:System.Xml.XmlReader" /> enthaltene XSLT-Stylesheet. Mit dieser Methode können Sie die Berechtigungen für das Stylesheet einschränken, indem Sie Beweise angeben.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Die <xref:System.Xml.Xsl.XslTransform>-Klasse ist in der .NET Framework Version 2,0 veraltet. Die <xref:System.Xml.Xsl.XslCompiledTransform>-Klasse ist der neue XSLT-Prozessor. Weitere Informationen finden Sie unter [Verwenden der XslCompiledTransform-Klasse](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) und [Migrieren von der XslTransform-Klasse](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class).  
  
 <xref:System.Xml.Xsl.XslTransform> unterstützt die XSLT 1,0-Syntax. Das XSLT-Stylesheet muss die Namespace Deklaration `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`enthalten.  
  
 Diese Methode lädt das XSLT-Stylesheet, einschließlich aller Stylesheets, auf die in `xsl:include` und `xsl:import` Elementen verwiesen wird. Das Stylesheet wird vom aktuellen Knoten des <xref:System.Xml.XmlReader> über alle untergeordneten Elemente geladen. Dies ermöglicht es Ihnen, einen Teil eines Dokuments als Stylesheet zu verwenden.  
  
 Nachdem die <xref:System.Xml.Xsl.XslTransform.Load%2A>-Methode zurückgegeben wurde, wird die <xref:System.Xml.XmlReader> auf dem nächsten Knoten nach dem Ende des Stylesheets positioniert. Wenn das Ende des Dokuments erreicht wird, wird der <xref:System.Xml.XmlReader> am Ende der Datei (EOF) platziert.  
  
 Wenn das Stylesheet Entitäten enthält, sollten Sie einen <xref:System.Xml.XmlReader> angeben, der Entitäten auflösen kann (<xref:System.Xml.XmlReader.CanResolveEntity%2A?displayProperty=nameWithType> gibt `true`zurück). In diesem Fall kann eine <xref:System.Xml.XmlValidatingReader> verwendet werden.  
  

  
 Es gibt verschiedene Möglichkeiten zum Bereitstellen von beweisen. In der folgenden Tabelle wird beschrieben, welche Art von Beweisen für gängige Benutzer Szenarien bereitgestellt werden muss.  
  
|Szenario|Typ der bereitgestellten Beweise|  
|--------------|---------------------------------|  
|Das XSLT-Stylesheet ist eigenständig oder stammt aus einer Codebasis, die Sie als vertrauenswürdig einstufen.|Verwenden Sie die Beweise aus der Assembly.<br /><br /> <pre><code class="lang-csharp">XsltTransform xslt = new XslTransform(); &#13;&#10;xslt.Load(xslReader, resolver, this.GetType().Assembly.Evidence);</code></pre>|  
|Das XSLT-Stylesheet stammt aus einer externen Quelle. Der Ursprung der Quelle ist bekannt, und es gibt eine überprüfbare URL.|Erstellen Sie Beweise mithilfe der URL.<br /><br /> <pre><code class="lang-csharp">XsltTransform xslt = new XslTransform();&#13;&#10; Evidence evidence = XmlSecureResolver.CreateEvidenceForUrl(stylesheetURL); &#13;&#10;xslt.Load(xslReader,resolver,evidence);</code></pre>|  
|Das XSLT-Stylesheet stammt aus einer externen Quelle. Der Ursprung der Quelle ist unbekannt.|Legen Sie den Beweis auf `null` fest. Skriptblöcke werden nicht verarbeitet, die XSLT-Funktion `document()` wird nicht unterstützt, und privilegierte Erweiterungsobjekte sind nicht zulässig.<br /><br /> Außerdem können Sie den `resolver`-Parameter auf `null`festlegen. Dadurch wird sichergestellt, dass die Elemente `xsl:import` und `xsl:include` nicht verarbeitet werden.|  
|Das XSLT-Stylesheet stammt aus einer externen Quelle. Der Ursprung der Quelle ist unbekannt, aber die Skriptunterstützung wird benötigt.|Fordern Sie einen Beweis vom Aufrufer an. Die API des Aufrufers muss eine Möglichkeit zur Bereitstellung von beweisen bereitstellen, in der Regel die <xref:System.Security.Policy.Evidence> Klasse.|  
  
     
## Examples  
 Im folgenden Beispiel wird eine XSLT-Transformation durchführt, bei der `xsltReader` ein <xref:System.Xml.XmlReader> mit einem Stylesheet und `secureURL` eine vertrauenswürdige URL ist, die zum Erstellen von <xref:System.Security.Policy.Evidence>verwendet werden kann. Die <xref:System.Xml.XmlSecureResolver.CreateEvidenceForUrl%2A?displayProperty=nameWithType>-Methode wird verwendet, um <xref:System.Security.Policy.Evidence> zu erstellen, die auf das Stylesheet angewendet wird.  
  
 [!code-cpp[XslTransform.Load4#1](~/samples/snippets/cpp/VS_Snippets_Data/XslTransform.Load4/CPP/trans_ev.cpp#1)]
 [!code-csharp[XslTransform.Load4#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Load4/CS/trans_ev.cs#1)]
 [!code-vb[XslTransform.Load4#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Load4/VB/trans_ev.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">Der aktuelle Knoten entspricht keinem gültigen Stylesheet.</exception>
        <exception cref="T:System.Security.SecurityException">Für das Stylesheet, auf das verwiesen wird, ist eine Funktion erforderlich, die für den bereitgestellten Beweis nicht zulässig ist.  
  
Der Aufrufer versucht, Beweise zur Verfügung zu stellen, und verfügt nicht über die <see langword="ControlEvidence" />-Berechtigung.</exception>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Security.SecurityZone" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="M:System.Xml.XmlSecureResolver.CreateEvidenceForUrl(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.IXPathNavigable stylesheet, System.Xml.XmlResolver resolver, System.Security.Policy.Evidence evidence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.IXPathNavigable stylesheet, class System.Xml.XmlResolver resolver, class System.Security.Policy.Evidence evidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.XmlResolver,System.Security.Policy.Evidence)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As IXPathNavigable, resolver As XmlResolver, evidence As Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::IXPathNavigable ^ stylesheet, System::Xml::XmlResolver ^ resolver, System::Security::Policy::Evidence ^ evidence);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XPath.IXPathNavigable * System.Xml.XmlResolver * System.Security.Policy.Evidence -&gt; unit" Usage="xslTransform.Load (stylesheet, resolver, evidence)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.IXPathNavigable" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="stylesheet">Ein Objekt, das die <see cref="T:System.Xml.XPath.IXPathNavigable" />-Schnittstelle implementiert. In .NET Framework kann dies entweder ein <see cref="T:System.Xml.XmlNode" /> (normalerweise ein <see cref="T:System.Xml.XmlDocument" />) oder ein <see cref="T:System.Xml.XPath.XPathDocument" /> sein, das das XSLT-Stylesheet enthält.</param>
        <param name="resolver"><see cref="T:System.Xml.XmlResolver" /> wird zum Laden von Stylesheets verwendet, auf die im <c>xsl:import</c>-Element und im <c>xsl:include</c>-Element verwiesen wird. Bei <see langword="null" /> werden externe Ressourcen nicht aufgelöst.  
  
Der <see cref="T:System.Xml.XmlResolver" /> wird nach Abschluss der <see cref="Overload:System.Xml.Xsl.XslTransform.Load" />-Methode nicht zwischengespeichert.</param>
        <param name="evidence">Der für die Assembly festgelegte <see cref="T:System.Security.Policy.Evidence" />, die für den Skriptblock im XSLT-Stylesheet generiert wurde.  
  
Bei <see langword="null" /> werden Skriptblöcke nicht verarbeitet, die XSLT-<c>document()</c>-Funktion wird nicht unterstützt, und privilegierte Erweiterungsobjekte sind nicht zulässig.  
  
Der Aufrufer muss über die <see langword="ControlEvidence" />-Berechtigung verfügen, um Beweise für die Skriptassembly bereitzustellen. Teilweise vertrauenswürdige Aufrufer können diesen Parameter auf <see langword="null" /> festlegen.</param>
        <summary>Lädt das im <see cref="T:System.Xml.XPath.IXPathNavigable" /> enthaltene XSLT-Stylesheet. Mit dieser Methode können Sie die Berechtigungen für das Stylesheet einschränken, indem Sie Beweise angeben.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Die <xref:System.Xml.Xsl.XslTransform>-Klasse ist in der .NET Framework Version 2,0 veraltet. Die <xref:System.Xml.Xsl.XslCompiledTransform>-Klasse ist der neue XSLT-Prozessor. Weitere Informationen finden Sie unter [Verwenden der XslCompiledTransform-Klasse](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) und [Migrieren von der XslTransform-Klasse](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class).  
  
 <xref:System.Xml.Xsl.XslTransform> unterstützt die XSLT 1,0-Syntax. Das XSLT-Stylesheet muss die Namespace Deklaration `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`enthalten.  
  

  
 Es gibt verschiedene Möglichkeiten zum Bereitstellen von beweisen. In der folgenden Tabelle wird beschrieben, welche Art von Beweisen für gängige Benutzer Szenarien bereitgestellt werden muss.  
  
|Szenario|Typ der bereitgestellten Beweise|  
|--------------|---------------------------------|  
|Das XSLT-Stylesheet ist eigenständig oder stammt aus einer Codebasis, die Sie als vertrauenswürdig einstufen.|Verwenden Sie die Beweise aus der Assembly.<br /><br /> <pre><code class="lang-csharp">XsltTransform xslt = new XslTransform(); &#13;&#10;xslt.Load(style sheet, resolver, this.GetType().Assembly.Evidence);</code></pre>|  
|Das XSLT-Stylesheet stammt aus einer externen Quelle. Der Ursprung der Quelle ist bekannt, und es gibt eine überprüfbare URL.|Erstellen Sie Beweise mithilfe der URL.<br /><br /> <pre><code class="lang-csharp">XsltTransform xslt = new XslTransform(); &#13;&#10;Evidence evidence = XmlSecureResolver.CreateEvidenceForUrl(style sheetURL); &#13;&#10;xslt.Load(style sheet,resolver,evidence);</code></pre>|  
|Das XSLT-Stylesheet stammt aus einer externen Quelle. Der Ursprung der Quelle ist unbekannt.|Legen Sie den Beweis auf `null` fest. Skriptblöcke werden nicht verarbeitet, die XSLT-Funktion `document()` wird nicht unterstützt, und privilegierte Erweiterungsobjekte sind nicht zulässig.<br /><br /> Außerdem können Sie den `resolver`-Parameter auf `null`festlegen. Dadurch wird sichergestellt, dass die Elemente `xsl:import` und `xsl:include` nicht verarbeitet werden.|  
|Das XSLT-Stylesheet stammt aus einer externen Quelle. Der Ursprung der Quelle ist unbekannt, aber die Skriptunterstützung wird benötigt.|Fordern Sie einen Beweis vom Aufrufer an. Die API des Aufrufers muss eine Möglichkeit zur Bereitstellung von beweisen bereitstellen, in der Regel die <xref:System.Security.Policy.Evidence> Klasse.|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">Die geladene Ressource ist kein gültiges Stylesheet.</exception>
        <exception cref="T:System.Security.SecurityException">Für das Stylesheet, auf das verwiesen wird, ist eine Funktion erforderlich, die für den bereitgestellten Beweis nicht zulässig ist.  
  
Der Aufrufer versucht, Beweise zur Verfügung zu stellen, und verfügt nicht über die <see langword="ControlEvidence" />-Berechtigung.</exception>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Security.SecurityZone" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="M:System.Xml.XmlSecureResolver.CreateEvidenceForUrl(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.XPathNavigator stylesheet, System.Xml.XmlResolver resolver, System.Security.Policy.Evidence evidence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.XPathNavigator stylesheet, class System.Xml.XmlResolver resolver, class System.Security.Policy.Evidence evidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator,System.Xml.XmlResolver,System.Security.Policy.Evidence)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XPathNavigator, resolver As XmlResolver, evidence As Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::XPathNavigator ^ stylesheet, System::Xml::XmlResolver ^ resolver, System::Security::Policy::Evidence ^ evidence);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XPath.XPathNavigator * System.Xml.XmlResolver * System.Security.Policy.Evidence -&gt; unit" Usage="xslTransform.Load (stylesheet, resolver, evidence)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.XPathNavigator" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="stylesheet">Ein <see cref="T:System.Xml.XPath.XPathNavigator" />-Objekt, das das zu ladende Stylesheet enthält.</param>
        <param name="resolver"><see cref="T:System.Xml.XmlResolver" /> wird zum Laden von Stylesheets verwendet, auf die im <c>xsl:import</c>-Element und im <c>xsl:include</c>-Element verwiesen wird. Bei <see langword="null" /> werden externe Ressourcen nicht aufgelöst.  
  
Der <see cref="T:System.Xml.XmlResolver" /> wird nach Abschluss der <see cref="Overload:System.Xml.Xsl.XslTransform.Load" />-Methode nicht zwischengespeichert.</param>
        <param name="evidence">Der für die Assembly festgelegte <see cref="T:System.Security.Policy.Evidence" />, die für den Skriptblock im XSLT-Stylesheet generiert wurde.  
  
Bei <see langword="null" /> werden Skriptblöcke nicht verarbeitet, die XSLT-<c>document()</c>-Funktion wird nicht unterstützt, und privilegierte Erweiterungsobjekte sind nicht zulässig.  
  
Der Aufrufer muss über die <see langword="ControlEvidence" />-Berechtigung verfügen, um Beweise für die Skriptassembly bereitzustellen. Teilweise vertrauenswürdige Aufrufer können diesen Parameter auf <see langword="null" /> festlegen.</param>
        <summary>Lädt das im <see cref="T:System.Xml.XPath.XPathNavigator" /> enthaltene XSLT-Stylesheet. Mit dieser Methode können Sie die Berechtigungen für das Stylesheet einschränken, indem Sie Beweise angeben.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Die <xref:System.Xml.Xsl.XslTransform>-Klasse ist in der .NET Framework Version 2,0 veraltet. Die <xref:System.Xml.Xsl.XslCompiledTransform>-Klasse ist der neue XSLT-Prozessor. Weitere Informationen finden Sie unter [Verwenden der XslCompiledTransform-Klasse](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) und [Migrieren von der XslTransform-Klasse](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class).  
  
 <xref:System.Xml.Xsl.XslTransform> unterstützt die XSLT 1,0-Syntax. Das XSLT-Stylesheet muss die Namespace Deklaration `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`enthalten.  
  
 Das Stylesheet wird von der aktuellen Position des <xref:System.Xml.XPath.XPathNavigator>geladen. Um einen Teil des geladenen Dokuments als Stylesheet zu verwenden, navigieren Sie zu dem Knoten, der dem Anfang des Stylesheets entspricht. Nachdem die <xref:System.Xml.Xsl.XslTransform.Load%2A>-Methode zurückgegeben wurde, wird die <xref:System.Xml.XPath.XPathNavigator> am Anfang des Stylesheets (auf dem `xsl:style sheet`-Knoten) positioniert.  
  

  
 Es gibt verschiedene Möglichkeiten zum Bereitstellen von beweisen. In der folgenden Tabelle wird beschrieben, welche Art von Beweisen für gängige Benutzer Szenarien bereitgestellt werden muss.  
  
|Szenario|Typ der bereitgestellten Beweise|  
|--------------|---------------------------------|  
|Das XSLT-Stylesheet ist eigenständig oder stammt aus einer Codebasis, die Sie als vertrauenswürdig einstufen.|Verwenden Sie die Beweise aus der Assembly.<br /><br /> <pre><code class="lang-csharp">XsltTransform xslt = new XslTransform(); &#13;&#10;xslt.Load(xslNav, resolver, this.GetType().Assembly.Evidence);</code></pre>|  
|Das XSLT-Stylesheet stammt aus einer externen Quelle. Der Ursprung der Quelle ist bekannt, und es gibt eine überprüfbare URL.|Erstellen Sie Beweise mithilfe der URL.<br /><br /> <pre><code class="lang-csharp">XsltTransform xslt = new XslTransform(); &#13;&#10;Evidence evidence = XmlSecureResolver.CreateEvidenceForUrl(style sheetURL); &#13;&#10;xslt.Load(xslNav,resolver,evidence);</code></pre>|  
|Das XSLT-Stylesheet stammt aus einer externen Quelle. Der Ursprung der Quelle ist unbekannt.|Legen Sie den Beweis auf `null` fest. Skriptblöcke werden nicht verarbeitet, die XSLT-Funktion `document()` wird nicht unterstützt, und privilegierte Erweiterungsobjekte sind nicht zulässig.<br /><br /> Außerdem können Sie den `resolver`-Parameter auf `null`festlegen. Dadurch wird sichergestellt, dass die Elemente `xsl:import` und `xsl:include` nicht verarbeitet werden.|  
|Das XSLT-Stylesheet stammt aus einer externen Quelle. Der Ursprung der Quelle ist unbekannt, aber die Skriptunterstützung wird benötigt.|Fordern Sie einen Beweis vom Aufrufer an. Die API des Aufrufers muss eine Möglichkeit zur Bereitstellung von beweisen bereitstellen, in der Regel die `Evidence` Klasse.|  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine XSLT-Transformation mithilfe eines Stylesheets aus einer externen Quelle durchführt. Da das Stylesheet aus einer nicht vertrauenswürdigen Quelle stammt, werden die Parameter `resolver` und `evidence` auf `null`festgelegt.  
 
 [!code-csharp[XslTransform.Load5#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Load5/CS/trans_noev.cs#1)]
 [!code-vb[XslTransform.Load5#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Load5/VB/trans_noev.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">Der aktuelle Knoten entspricht keinem gültigen Stylesheet.</exception>
        <exception cref="T:System.Security.SecurityException">Für das Stylesheet, auf das verwiesen wird, ist eine Funktion erforderlich, die für den bereitgestellten Beweis nicht zulässig ist.  
  
Der Aufrufer versucht, Beweise zur Verfügung zu stellen, und verfügt nicht über die <see langword="ControlEvidence" />-Berechtigung.</exception>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Security.SecurityZone" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="M:System.Xml.XmlSecureResolver.CreateEvidenceForUrl(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Transform">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Transformiert die XML-Daten mithilfe des geladenen XSLT-Stylesheets.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Die <xref:System.Xml.Xsl.XslTransform>-Klasse ist in der .NET Framework Version 2,0 veraltet. Die <xref:System.Xml.Xsl.XslCompiledTransform>-Klasse ist der neue XSLT-Prozessor. Weitere Informationen finden Sie unter [Verwenden der XslCompiledTransform-Klasse](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) und [Migrieren von der XslTransform-Klasse](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputfile, string outputfile);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputfile, string outputfile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputfile As String, outputfile As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputfile, System::String ^ outputfile);" />
      <MemberSignature Language="F#" Value="member this.Transform : string * string -&gt; unit" Usage="xslTransform.Transform (inputfile, outputfile)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass XmlResolver to Transform() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputfile" Type="System.String" />
        <Parameter Name="outputfile" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputfile">Die URL des Quelldokuments, das transformiert werden soll.</param>
        <param name="outputfile">Die URL der Ausgabedatei.</param>
        <summary>Transformiert die XML-Daten in der Eingabedatei und gibt das Ergebnis in eine Ausgabedatei aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Die <xref:System.Xml.Xsl.XslTransform>-Klasse ist in der .NET Framework Version 2,0 veraltet. Die <xref:System.Xml.Xsl.XslCompiledTransform>-Klasse ist der neue XSLT-Prozessor. Weitere Informationen finden Sie unter [Verwenden der XslCompiledTransform-Klasse](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) und [Migrieren von der XslTransform-Klasse](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class).  
  
 <xref:System.Xml.Xsl.XslTransform> unterstützt die XSLT 1,0-Syntax. Das XSLT-Stylesheet muss die Namespace Deklaration `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`enthalten.  
  
> [!NOTE]
>  Diese Methode ist veraltet in Version 1,1 der .NET Framework. Die Einstellung der <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A>-Eigenschaft bestimmt, wie die XSLT-`document()`-Funktion aufgelöst wird. Es wird empfohlen, die <xref:System.Xml.Xsl.XslTransform.Transform%2A>-Methode zu verwenden, die ein <xref:System.Xml.XmlResolver>-Objekt als eines der Argumente annimmt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `books.xml` Datei mithilfe des `output.xsl` Stylesheets transformiert und die Ergebnisse in der `books.html`-Datei ausgegeben.  
  
 [!code-cpp[XslTransform.Transform3#1](~/samples/snippets/cpp/VS_Snippets_Data/xsltransform.transform3/CPP/trans_snip2.cpp#1)]
 [!code-csharp[XslTransform.Transform3#1](~/samples/snippets/csharp/VS_Snippets_Data/xsltransform.transform3/CS/trans_snip2.cs#1)]
 [!code-vb[XslTransform.Transform3#1](~/samples/snippets/visualbasic/VS_Snippets_Data/xsltransform.transform3/VB/trans_snip2.vb#1)]  
  
 Das Beispiel verwendet die folgenden beiden Eingabedateien:  
  
 `books.xml`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/books.xml#2)]  
  
 `output.xsl`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/output.xsl#3)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">Implementierung von freigegebenen Verhaltensweisen in der XslTransform-Klasse</related>
        <related type="Article" href="https://msdn.microsoft.com/library/8e149d32-4b2f-493f-9e4b-d0d93475acde">Ausgaben aus "XslTransform"</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReader Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList)" />
      <MemberSignature Language="VB.NET" Value="Public Function Transform (input As IXPathNavigable, args As XsltArgumentList) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReader ^ Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList -&gt; System.Xml.XmlReader" Usage="xslTransform.Transform (input, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass XmlResolver to Transform() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
      </Parameters>
      <Docs>
        <param name="input">Ein Objekt, das die <see cref="T:System.Xml.XPath.IXPathNavigable" />-Schnittstelle implementiert. Dabei kann es sich in .NET Framework entweder um einen <see cref="T:System.Xml.XmlNode" /> (in der Regel ein <see cref="T:System.Xml.XmlDocument" />) oder um ein <see cref="T:System.Xml.XPath.XPathDocument" /> mit den zu transformierenden Daten handeln.</param>
        <param name="args">Eine <see cref="T:System.Xml.Xsl.XsltArgumentList" />, die die mit dem Namespace gekennzeichneten Argumente enthält, die als Eingabe für die Transformation verwendet werden.</param>
        <summary>Transformiert die XML-Daten in <see cref="T:System.Xml.XPath.IXPathNavigable" /> unter Verwendung der angegebenen <paramref name="args" /> und gibt das Ergebnis an einen <see cref="T:System.Xml.XmlReader" /> aus.</summary>
        <returns>Ein <see cref="T:System.Xml.XmlReader" />, der die Ergebnisse der Transformation enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Die <xref:System.Xml.Xsl.XslTransform>-Klasse ist in der .NET Framework Version 2,0 veraltet. Die <xref:System.Xml.Xsl.XslCompiledTransform>-Klasse ist der neue XSLT-Prozessor. Weitere Informationen finden Sie unter [Verwenden der XslCompiledTransform-Klasse](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) und [Migrieren von der XslTransform-Klasse](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class).  
  
 <xref:System.Xml.Xsl.XslTransform> unterstützt die XSLT 1,0-Syntax. Das XSLT-Stylesheet muss die Namespace Deklaration `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`enthalten.  
  
> [!NOTE]
>  Diese Methode ist mittlerweile veraltet. Die Einstellung der <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A>-Eigenschaft bestimmt, wie die XSLT-`document()`-Funktion aufgelöst wird. Es wird empfohlen, die <xref:System.Xml.Xsl.XslTransform.Transform%2A>-Methode zu verwenden, die ein <xref:System.Xml.XmlResolver>-Objekt als eines der Argumente annimmt.  
  
 Die `args` werden mit den `xsl:param` Elementen abgeglichen, die im Stylesheet definiert sind. Das `xsl:output`-Element wird nicht unterstützt, wenn die Ausgabe an einen <xref:System.Xml.XmlReader> erfolgt (das `xsl:output`-Element wird ignoriert). Weitere Informationen finden Sie [Unterausgaben aus XslTransform](/dotnet/standard/data/xml/outputs-from-an-xsltransform) .  
  
 Diese Methode ermöglicht es Ihnen, eine asynchrone Transformation des Quelldokuments durchzuführen.  
  
 Transformationen werden auf das gesamte Dokument angewendet. Wenn Sie einen anderen Knoten als den Stammknoten des Dokuments übergeben, wird dadurch nicht verhindert, dass im Transformationsprozess auf alle Knoten im geladenen Dokument zugegriffen wird. Zum Transformieren eines Knoten Fragments müssen Sie eine <xref:System.Xml.XmlDocument> erstellen, die nur das Knoten Fragment enthält, und dieses <xref:System.Xml.XmlDocument> an die <xref:System.Xml.Xsl.XslTransform.Transform%2A>-Methode übergeben.  
  
 Im folgenden Beispiel wird eine Transformation für ein Knoten Fragment durchführt.  
  
```csharp  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out);  
```  
  
 Im Beispiel werden die `library.xml`-und `print_root.xsl` Dateien als Eingabe verwendet und Folgendes an die Konsole ausgegeben.  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```xml  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```xml  
<stylesheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />   
  <template match="/">  
     Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">Implementierung von freigegebenen Verhaltensweisen in der XslTransform-Klasse</related>
        <related type="Article" href="https://msdn.microsoft.com/library/8e149d32-4b2f-493f-9e4b-d0d93475acde">Ausgaben aus "XslTransform"</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReader Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList)" />
      <MemberSignature Language="VB.NET" Value="Public Function Transform (input As XPathNavigator, args As XsltArgumentList) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReader ^ Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.XPathNavigator * System.Xml.Xsl.XsltArgumentList -&gt; System.Xml.XmlReader" Usage="xslTransform.Transform (input, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass XmlResolver to Transform() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
      </Parameters>
      <Docs>
        <param name="input">Ein <see cref="T:System.Xml.XPath.XPathNavigator" />, der die zu transformierenden Daten enthält.</param>
        <param name="args">Eine <see cref="T:System.Xml.Xsl.XsltArgumentList" />, die die mit dem Namespace gekennzeichneten Argumente enthält, die als Eingabe für die Transformation verwendet werden.</param>
        <summary>Transformiert die XML-Daten in <see cref="T:System.Xml.XPath.XPathNavigator" /> unter Verwendung der angegebenen <paramref name="args" /> und gibt das Ergebnis an einen <see cref="T:System.Xml.XmlReader" /> aus.</summary>
        <returns>Ein <see cref="T:System.Xml.XmlReader" />, der die Ergebnisse der Transformation enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Die <xref:System.Xml.Xsl.XslTransform>-Klasse ist in der .NET Framework Version 2,0 veraltet. Die <xref:System.Xml.Xsl.XslCompiledTransform>-Klasse ist der neue XSLT-Prozessor. Weitere Informationen finden Sie unter [Verwenden der XslCompiledTransform-Klasse](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) und [Migrieren von der XslTransform-Klasse](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class).  
  
 <xref:System.Xml.Xsl.XslTransform> unterstützt die XSLT 1,0-Syntax. Das XSLT-Stylesheet muss die Namespace Deklaration `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`enthalten.  
  
 Die `args` werden mit den `xsl:param` Elementen abgeglichen, die im Stylesheet definiert sind. Die Auswahl der Transformation gilt für das gesamte Dokument. Anders ausgedrückt: Wenn der aktuelle Knoten in einer anderen Knoten Struktur als dem Stamm Knoten des Dokuments festgelegt ist, verhindert dies, dass der Transformationsprozess auf alle Knoten im geladenen Dokument zugreift. Nachdem die Transformation ausgeführt wurde, verbleibt der <xref:System.Xml.XPath.XPathNavigator> in seinem ursprünglichen Zustand. Dies bedeutet, dass der Knoten, der vor dem Transformationsprozess aktuell ist, der aktuelle Knoten bleibt, nachdem die <xref:System.Xml.Xsl.XslTransform.Transform%2A>-Methode aufgerufen wurde.  
  
 Da <xref:System.Xml.XmlReader> schreibgeschützte Ausgabe bereitstellt, wird das `xsl:output`-Element ignoriert. Weitere Informationen finden Sie [Unterausgaben aus XslTransform](/dotnet/standard/data/xml/outputs-from-an-xsltransform) .  
  
 Diese Methode ermöglicht es Ihnen, eine asynchrone Transformation des Quelldokuments durchzuführen.  
  
> [!NOTE]
>  Diese Methode ist veraltet. Die-Einstellung der <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A>-Eigenschaft bestimmt, wie die XSLT-document ()-Funktion aufgelöst wird. Es wird empfohlen, die <xref:System.Xml.Xsl.XslTransform.Transform%2A>-Methode zu verwenden, die ein <xref:System.Xml.XmlResolver>-Objekt als eines der Argumente annimmt.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Beim Verarbeiten der XSLT-Transformation ist ein Fehler aufgetreten.  
  
Hinweis: Dies ist eine Änderung im Verhalten gegenüber früheren Versionen. Eine <see cref="T:System.Xml.Xsl.XsltException" /> wird ausgelöst, wenn Sie Microsoft .NET Framework, Version 1.1 oder früher, verwenden.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">Implementierung von freigegebenen Verhaltensweisen in der XslTransform-Klasse</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputfile, string outputfile, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputfile, string outputfile, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.String,System.String,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputfile As String, outputfile As String, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputfile, System::String ^ outputfile, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : string * string * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Transform (inputfile, outputfile, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputfile" Type="System.String" />
        <Parameter Name="outputfile" Type="System.String" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="inputfile">Die URL des Quelldokuments, das transformiert werden soll.</param>
        <param name="outputfile">Die URL der Ausgabedatei.</param>
        <param name="resolver">Der zum Auflösen der XSLT-<c>document()</c>-Funktion verwendete <see cref="T:System.Xml.XmlResolver" />. Wenn dies <see langword="null" /> ist, wird die <c>document()</c>-Funktion nicht aufgelöst.  
  
Der <see cref="T:System.Xml.XmlResolver" /> wird nach Abschluss der <see cref="Overload:System.Xml.Xsl.XslTransform.Transform" />-Methode nicht zwischengespeichert.</param>
        <summary>Transformiert die XML-Daten in der Eingabedatei und gibt das Ergebnis in eine Ausgabedatei aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Die <xref:System.Xml.Xsl.XslTransform>-Klasse ist in der .NET Framework Version 2,0 veraltet. Die <xref:System.Xml.Xsl.XslCompiledTransform>-Klasse ist der neue XSLT-Prozessor. Weitere Informationen finden Sie unter [Verwenden der XslCompiledTransform-Klasse](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) und [Migrieren von der XslTransform-Klasse](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class).  
  
 <xref:System.Xml.Xsl.XslTransform> unterstützt die XSLT 1,0-Syntax. Das XSLT-Stylesheet muss die Namespace Deklaration `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`enthalten.  
  
   
  
## Examples  
 Im folgenden Beispiel werden eine XSLT-Transformation und Ausgaben in eine Datei durchführt. Eine <xref:System.Xml.XmlUrlResolver> mit Standard Anmelde Informationen wird verwendet, um externe Ressourcen aufzulösen. Einzelheiten dazu finden Sie unter <xref:System.Net.CredentialCache.DefaultCredentials%2A>.  
  
 [!code-cpp[XslTransform.Transform7#1](~/samples/snippets/cpp/VS_Snippets_Data/XslTRansform.Transform7/CPP/trans_snip4.cpp#1)]
 [!code-csharp[XslTransform.Transform7#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTRansform.Transform7/CS/trans_snip4.cs#1)]
 [!code-vb[XslTransform.Transform7#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTRansform.Transform7/VB/trans_snip4.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.IO.Stream output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.Stream output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, args As XsltArgumentList, output As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::Stream ^ output);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.IO.Stream -&gt; unit" Usage="xslTransform.Transform (input, args, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass XmlResolver to Transform() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="input">Ein Objekt, das die <see cref="T:System.Xml.XPath.IXPathNavigable" />-Schnittstelle implementiert. Dabei kann es sich in .NET Framework entweder um einen <see cref="T:System.Xml.XmlNode" /> (in der Regel ein <see cref="T:System.Xml.XmlDocument" />) oder um ein <see cref="T:System.Xml.XPath.XPathDocument" /> mit den zu transformierenden Daten handeln.</param>
        <param name="args">Eine <see cref="T:System.Xml.Xsl.XsltArgumentList" />, die die mit dem Namespace gekennzeichneten Argumente enthält, die als Eingabe für die Transformation verwendet werden.</param>
        <param name="output">Der Stream, in den ausgegeben werden soll.</param>
        <summary>Transformiert die XML-Daten in <see cref="T:System.Xml.XPath.IXPathNavigable" /> unter Verwendung der angegebenen <paramref name="args" /> und gibt das Ergebnis an einen <see cref="T:System.IO.Stream" /> aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Die <xref:System.Xml.Xsl.XslTransform>-Klasse ist in der .NET Framework Version 2,0 veraltet. Die <xref:System.Xml.Xsl.XslCompiledTransform>-Klasse ist der neue XSLT-Prozessor. Weitere Informationen finden Sie unter [Verwenden der XslCompiledTransform-Klasse](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) und [Migrieren von der XslTransform-Klasse](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class).  
  
 <xref:System.Xml.Xsl.XslTransform> unterstützt die XSLT 1,0-Syntax. Das XSLT-Stylesheet muss die Namespace Deklaration `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`enthalten.  
  
> [!NOTE]
>  Diese Methode ist mittlerweile veraltet. Die Einstellung der <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A>-Eigenschaft bestimmt, wie die XSLT-`document()`-Funktion aufgelöst wird. Es wird empfohlen, die <xref:System.Xml.Xsl.XslTransform.Transform%2A>-Methode zu verwenden, die ein <xref:System.Xml.XmlResolver>-Objekt als eines der Argumente annimmt.  
  
 Die `args` werden mit den `xsl:param` Elementen abgeglichen, die im Stylesheet definiert sind.  
  
 Transformationen werden auf das gesamte Dokument angewendet. Wenn Sie einen anderen Knoten als den Stammknoten des Dokuments übergeben, wird dadurch nicht verhindert, dass im Transformationsprozess auf alle Knoten im geladenen Dokument zugegriffen wird. Zum Transformieren eines Knoten Fragments müssen Sie eine <xref:System.Xml.XmlDocument> erstellen, die nur das Knoten Fragment enthält, und dieses <xref:System.Xml.XmlDocument> an die <xref:System.Xml.Xsl.XslTransform.Transform%2A>-Methode übergeben.  
  
 Im folgenden Beispiel wird eine Transformation für ein Knoten Fragment durchführt.  
  
```csharp  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out);  
```  
  
 Im Beispiel werden die `library.xml`-und `print_root.xsl` Dateien als Eingabe verwendet und Folgendes an die Konsole ausgegeben.  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```xml  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```xml  
<stylesheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />   
  <template match="/">  
     Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Beim Verarbeiten der XSLT-Transformation ist ein Fehler aufgetreten.  
  
Hinweis: Dies ist eine Änderung im Verhalten gegenüber früheren Versionen. Eine <see cref="T:System.Xml.Xsl.XsltException" /> wird ausgelöst, wenn Sie Microsoft .NET Framework, Version 1.1 oder früher, verwenden.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">Implementierung von freigegebenen Verhaltensweisen in der XslTransform-Klasse</related>
        <related type="Article" href="https://msdn.microsoft.com/library/8e149d32-4b2f-493f-9e4b-d0d93475acde">Ausgaben aus "XslTransform"</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, args As XsltArgumentList, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.IO.TextWriter -&gt; unit" Usage="xslTransform.Transform (input, args, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass XmlResolver to Transform() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="input">Ein Objekt, das die <see cref="T:System.Xml.XPath.IXPathNavigable" />-Schnittstelle implementiert. Dabei kann es sich in .NET Framework entweder um einen <see cref="T:System.Xml.XmlNode" /> (in der Regel ein <see cref="T:System.Xml.XmlDocument" />) oder um ein <see cref="T:System.Xml.XPath.XPathDocument" /> mit den zu transformierenden Daten handeln.</param>
        <param name="args">Eine <see cref="T:System.Xml.Xsl.XsltArgumentList" />, die die mit dem Namespace gekennzeichneten Argumente enthält, die als Eingabe für die Transformation verwendet werden.</param>
        <param name="output">Der <see cref="T:System.IO.TextWriter" />, an den die Ausgabe erfolgen soll.</param>
        <summary>Transformiert die XML-Daten in <see cref="T:System.Xml.XPath.IXPathNavigable" /> unter Verwendung der angegebenen <paramref name="args" /> und gibt das Ergebnis an einen <see cref="T:System.IO.TextWriter" /> aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Die <xref:System.Xml.Xsl.XslTransform>-Klasse ist in der .NET Framework Version 2,0 veraltet. Die <xref:System.Xml.Xsl.XslCompiledTransform>-Klasse ist der neue XSLT-Prozessor. Weitere Informationen finden Sie unter [Verwenden der XslCompiledTransform-Klasse](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) und [Migrieren von der XslTransform-Klasse](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class).  
  
 <xref:System.Xml.Xsl.XslTransform> unterstützt die XSLT 1,0-Syntax. Das XSLT-Stylesheet muss die Namespace Deklaration `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`enthalten.  
  
> [!NOTE]
>  Diese Methode ist mittlerweile veraltet. Die Einstellung der <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A>-Eigenschaft bestimmt, wie die XSLT-`document()`-Funktion aufgelöst wird. Es wird empfohlen, die <xref:System.Xml.Xsl.XslTransform.Transform%2A>-Methode zu verwenden, die ein <xref:System.Xml.XmlResolver>-Objekt als eines der Argumente annimmt.  
  
 Die `args` werden mit den `xsl:param` Elementen abgeglichen, die im Stylesheet definiert sind.  
  
 Das Codierungs Attribut für ein `xsl:output` Element wird bei der Ausgabe an einen <xref:System.IO.TextWriter>nicht unterstützt. Einzelheiten dazu, welche `xsl:output` Attribute unterstützt werden, finden Sie unter [Ausgaben aus XslTransform](/dotnet/standard/data/xml/outputs-from-an-xsltransform) .  
  
 Transformationen werden auf das gesamte Dokument angewendet. Wenn Sie einen anderen Knoten als den Stammknoten des Dokuments übergeben, wird dadurch nicht verhindert, dass im Transformationsprozess auf alle Knoten im geladenen Dokument zugegriffen wird. Zum Transformieren eines Knoten Fragments müssen Sie eine <xref:System.Xml.XmlDocument> erstellen, die nur das Knoten Fragment enthält, und dieses <xref:System.Xml.XmlDocument> an die <xref:System.Xml.Xsl.XslTransform.Transform%2A>-Methode übergeben.  
  
 Im folgenden Beispiel wird eine Transformation für ein Knoten Fragment durchführt.  
  
```csharp  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out);  
```  
  
 Im Beispiel werden die `library.xml`-und `print_root.xsl` Dateien als Eingabe verwendet und Folgendes an die Konsole ausgegeben.  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```xml  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```xml  
<stylesheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />   
  <template match="/">  
     Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Beim Verarbeiten der XSLT-Transformation ist ein Fehler aufgetreten.  
  
Hinweis: Dies ist eine Änderung im Verhalten gegenüber früheren Versionen. Eine <see cref="T:System.Xml.Xsl.XsltException" /> wird ausgelöst, wenn Sie Microsoft .NET Framework, Version 1.1 oder früher, verwenden.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">Implementierung von freigegebenen Verhaltensweisen in der XslTransform-Klasse</related>
        <related type="Article" href="https://msdn.microsoft.com/library/8e149d32-4b2f-493f-9e4b-d0d93475acde">Ausgaben aus "XslTransform"</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReader Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Function Transform (input As IXPathNavigable, args As XsltArgumentList, resolver As XmlResolver) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReader ^ Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlResolver -&gt; System.Xml.XmlReader" Usage="xslTransform.Transform (input, args, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">Ein Objekt, das die <see cref="T:System.Xml.XPath.IXPathNavigable" />-Schnittstelle implementiert. Dabei kann es sich in .NET Framework entweder um einen <see cref="T:System.Xml.XmlNode" /> (in der Regel ein <see cref="T:System.Xml.XmlDocument" />) oder um ein <see cref="T:System.Xml.XPath.XPathDocument" /> mit den zu transformierenden Daten handeln.</param>
        <param name="args">Eine <see cref="T:System.Xml.Xsl.XsltArgumentList" />, die die mit dem Namespace gekennzeichneten Argumente enthält, die als Eingabe für die Transformation verwendet werden.</param>
        <param name="resolver">Der zum Auflösen der XSLT-<c>document()</c>-Funktion verwendete <see cref="T:System.Xml.XmlResolver" />. Wenn dies <see langword="null" /> ist, wird die <c>document()</c>-Funktion nicht aufgelöst.  
  
Der <see cref="T:System.Xml.XmlResolver" /> wird nach Abschluss der <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" />-Methode nicht zwischengespeichert.</param>
        <summary>Transformiert die XML-Daten in <see cref="T:System.Xml.XPath.IXPathNavigable" /> unter Verwendung der angegebenen <paramref name="args" /> und gibt das Ergebnis an einen <see cref="T:System.Xml.XmlReader" /> aus.</summary>
        <returns>Ein <see cref="T:System.Xml.XmlReader" />, der die Ergebnisse der Transformation enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Die <xref:System.Xml.Xsl.XslTransform>-Klasse ist in der .NET Framework Version 2,0 veraltet. Die <xref:System.Xml.Xsl.XslCompiledTransform>-Klasse ist der neue XSLT-Prozessor. Weitere Informationen finden Sie unter [Verwenden der XslCompiledTransform-Klasse](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) und [Migrieren von der XslTransform-Klasse](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class).  
  
 <xref:System.Xml.Xsl.XslTransform> unterstützt die XSLT 1,0-Syntax. Das XSLT-Stylesheet muss die Namespace Deklaration `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`enthalten.  
  
 Die `args` werden mit den `xsl:param` Elementen abgeglichen, die im Stylesheet definiert sind. Das `xsl:output`-Element wird nicht unterstützt, wenn die Ausgabe an einen <xref:System.Xml.XmlReader> erfolgt (das `xsl:output`-Element wird ignoriert). Weitere Informationen finden Sie [Unterausgaben aus XslTransform](/dotnet/standard/data/xml/outputs-from-an-xsltransform) .  
  
 Diese Methode ermöglicht es Ihnen, eine asynchrone Transformation des Quelldokuments durchzuführen.  
  
 Transformationen werden auf das gesamte Dokument angewendet. Wenn Sie einen anderen Knoten als den Stammknoten des Dokuments übergeben, wird dadurch nicht verhindert, dass im Transformationsprozess auf alle Knoten im geladenen Dokument zugegriffen wird. Zum Transformieren eines Knoten Fragments müssen Sie eine <xref:System.Xml.XmlDocument> erstellen, die nur das Knoten Fragment enthält, und dieses <xref:System.Xml.XmlDocument> an die <xref:System.Xml.Xsl.XslTransform.Transform%2A>-Methode übergeben.  
  
 Im folgenden Beispiel wird eine Transformation für ein Knoten Fragment durchführt.  
  
```csharp  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out, null);  
```  
  
 Im Beispiel werden die `library.xml`-und `print_root.xsl` Dateien als Eingabe verwendet und Folgendes an die Konsole ausgegeben.  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```xml  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```xml  
<stylesheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />   
  <template match="/">  
     Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</stylesheet>  
```  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein XML-Dokument transformiert und die Ergebnisse an einen `XmlReader`ausgegeben. Eine <xref:System.Xml.XmlUrlResolver> mit den erforderlichen Anmelde Informationen wird verwendet, um XSLT-`document()` Funktionen zu verarbeiten.  
  
 [!code-cpp[XslTransform.Transform4#1](~/samples/snippets/cpp/VS_Snippets_Data/XslTransform.Transform4/CPP/trans_snip3.cpp#1)]
 [!code-csharp[XslTransform.Transform4#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Transform4/CS/trans_snip3.cs#1)]
 [!code-vb[XslTransform.Transform4#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Transform4/VB/trans_snip3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">Implementierung von freigegebenen Verhaltensweisen in der XslTransform-Klasse</related>
        <related type="Article" href="https://msdn.microsoft.com/library/8e149d32-4b2f-493f-9e4b-d0d93475acde">Ausgaben aus "XslTransform"</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.Xml.XmlWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, args As XsltArgumentList, output As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::Xml::XmlWriter ^ output);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter -&gt; unit" Usage="xslTransform.Transform (input, args, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass XmlResolver to Transform() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input">Ein Objekt, das die <see cref="T:System.Xml.XPath.IXPathNavigable" />-Schnittstelle implementiert. Dabei kann es sich in .NET Framework entweder um einen <see cref="T:System.Xml.XmlNode" /> (in der Regel ein <see cref="T:System.Xml.XmlDocument" />) oder um ein <see cref="T:System.Xml.XPath.XPathDocument" /> mit den zu transformierenden Daten handeln.</param>
        <param name="args">Eine <see cref="T:System.Xml.Xsl.XsltArgumentList" />, die die mit dem Namespace gekennzeichneten Argumente enthält, die als Eingabe für die Transformation verwendet werden.</param>
        <param name="output">Der <see cref="T:System.Xml.XmlWriter" />, an den die Ausgabe erfolgen soll.</param>
        <summary>Transformiert die XML-Daten in <see cref="T:System.Xml.XPath.IXPathNavigable" /> unter Verwendung der angegebenen <paramref name="args" /> und gibt das Ergebnis an einen <see cref="T:System.Xml.XmlWriter" /> aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Die <xref:System.Xml.Xsl.XslTransform>-Klasse ist in der .NET Framework Version 2,0 veraltet. Die <xref:System.Xml.Xsl.XslCompiledTransform>-Klasse ist der neue XSLT-Prozessor. Weitere Informationen finden Sie unter [Verwenden der XslCompiledTransform-Klasse](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) und [Migrieren von der XslTransform-Klasse](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class).  
  
 <xref:System.Xml.Xsl.XslTransform> unterstützt die XSLT 1,0-Syntax. Das XSLT-Stylesheet muss die Namespace Deklaration `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`enthalten.  
  
> [!NOTE]
>  Diese Methode ist mittlerweile veraltet. Die Einstellung der <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A>-Eigenschaft bestimmt, wie die XSLT-`document()`-Funktion aufgelöst wird. Es wird empfohlen, die <xref:System.Xml.Xsl.XslTransform.Transform%2A>-Methode zu verwenden, die ein <xref:System.Xml.XmlResolver>-Objekt als eines der Argumente annimmt.  
  
 Die `args` werden mit den `xsl:param` Elementen abgeglichen, die im Stylesheet definiert sind. Das `xsl:output`-Element wird nicht unterstützt, wenn die Ausgabe an eine <xref:System.Xml.XmlWriter> erfolgt (`xsl:output` wird ignoriert). Weitere Informationen finden Sie [Unterausgaben aus XslTransform](/dotnet/standard/data/xml/outputs-from-an-xsltransform) .  
  
 Transformationen werden auf das gesamte Dokument angewendet. Wenn Sie einen anderen Knoten als den Stammknoten des Dokuments übergeben, wird dadurch nicht verhindert, dass im Transformationsprozess auf alle Knoten im geladenen Dokument zugegriffen wird. Zum Transformieren eines Knoten Fragments müssen Sie eine <xref:System.Xml.XmlDocument> erstellen, die nur das Knoten Fragment enthält, und dieses <xref:System.Xml.XmlDocument> an die <xref:System.Xml.Xsl.XslTransform.Transform%2A>-Methode übergeben.  
  
 Im folgenden Beispiel wird eine Transformation für ein Knoten Fragment durchführt.  
  
```csharp  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out);  
```  
  
 Im Beispiel werden die `library.xml`-und `print_root.xsl` Dateien als Eingabe verwendet und Folgendes an die Konsole ausgegeben.  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```xml  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```xml  
<stylesheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />  
  <template match="/">  
  Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Beim Verarbeiten der XSLT-Transformation ist ein Fehler aufgetreten.  
  
Hinweis: Dies ist eine Änderung im Verhalten gegenüber früheren Versionen. Eine <see cref="T:System.Xml.Xsl.XsltException" /> wird ausgelöst, wenn Sie Microsoft .NET Framework, Version 1.1 oder früher, verwenden.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">Implementierung von freigegebenen Verhaltensweisen in der XslTransform-Klasse</related>
        <related type="Article" href="https://msdn.microsoft.com/library/8e149d32-4b2f-493f-9e4b-d0d93475acde">Ausgaben aus "XslTransform"</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.IO.Stream output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.Stream output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XPathNavigator, args As XsltArgumentList, output As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::Stream ^ output);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.XPathNavigator * System.Xml.Xsl.XsltArgumentList * System.IO.Stream -&gt; unit" Usage="xslTransform.Transform (input, args, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass XmlResolver to Transform() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="input">Ein <see cref="T:System.Xml.XPath.XPathNavigator" />, der die zu transformierenden Daten enthält.</param>
        <param name="args">Eine <see cref="T:System.Xml.Xsl.XsltArgumentList" />, die die mit dem Namespace gekennzeichneten Argumente enthält, die als Eingabe für die Transformation verwendet werden.</param>
        <param name="output">Der Stream, in den ausgegeben werden soll.</param>
        <summary>Transformiert die XML-Daten in <see cref="T:System.Xml.XPath.XPathNavigator" /> unter Verwendung der angegebenen <paramref name="args" /> und gibt das Ergebnis an einen <see cref="T:System.IO.Stream" /> aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Die <xref:System.Xml.Xsl.XslTransform>-Klasse ist in der .NET Framework Version 2,0 veraltet. Die <xref:System.Xml.Xsl.XslCompiledTransform>-Klasse ist der neue XSLT-Prozessor. Weitere Informationen finden Sie unter [Verwenden der XslCompiledTransform-Klasse](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) und [Migrieren von der XslTransform-Klasse](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class).  
  
 <xref:System.Xml.Xsl.XslTransform> unterstützt die XSLT 1,0-Syntax. Das XSLT-Stylesheet muss die Namespace Deklaration `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`enthalten.  
  
 Die `args` werden mit den `xsl:param` Elementen abgeglichen, die im Stylesheet definiert sind. Die Auswahl der Transformation gilt für das gesamte Dokument. Anders ausgedrückt: Wenn der aktuelle Knoten in einer anderen Knoten Struktur als dem Stamm Knoten des Dokuments festgelegt ist, verhindert dies, dass der Transformationsprozess auf alle Knoten im geladenen Dokument zugreift. Nachdem die Transformation ausgeführt wurde, verbleibt der <xref:System.Xml.XPath.XPathNavigator> in seinem ursprünglichen Zustand. Dies bedeutet, dass der Knoten, der vor dem Transformationsprozess aktuell ist, der aktuelle Knoten bleibt, nachdem die <xref:System.Xml.Xsl.XslTransform.Transform%2A>-Methode aufgerufen wurde.  
  
 Einzelheiten dazu, welche `xsl:output` Attribute unterstützt werden, finden Sie unter [Ausgaben aus XslTransform](/dotnet/standard/data/xml/outputs-from-an-xsltransform) .  
  
> [!NOTE]
>  Diese Methode ist mittlerweile veraltet. Die Einstellung der <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A>-Eigenschaft bestimmt, wie die XSLT-`document()`-Funktion aufgelöst wird. Es wird empfohlen, die <xref:System.Xml.Xsl.XslTransform.Transform%2A>-Methode zu verwenden, die ein <xref:System.Xml.XmlResolver>-Objekt als eines der Argumente annimmt.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Beim Verarbeiten der XSLT-Transformation ist ein Fehler aufgetreten.  
  
Hinweis: Dies ist eine Änderung im Verhalten gegenüber früheren Versionen. Eine <see cref="T:System.Xml.Xsl.XsltException" /> wird ausgelöst, wenn Sie Microsoft .NET Framework, Version 1.1 oder früher, verwenden.</exception>
        <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">Implementierung von freigegebenen Verhaltensweisen in der XslTransform-Klasse</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XPathNavigator, args As XsltArgumentList, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.XPathNavigator * System.Xml.Xsl.XsltArgumentList * System.IO.TextWriter -&gt; unit" Usage="xslTransform.Transform (input, args, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass XmlResolver to Transform() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="input">Ein <see cref="T:System.Xml.XPath.XPathNavigator" />, der die zu transformierenden Daten enthält.</param>
        <param name="args">Eine <see cref="T:System.Xml.Xsl.XsltArgumentList" />, die die mit dem Namespace gekennzeichneten Argumente enthält, die als Eingabe für die Transformation verwendet werden.</param>
        <param name="output">Der <see cref="T:System.IO.TextWriter" />, an den die Ausgabe erfolgen soll.</param>
        <summary>Transformiert die XML-Daten in <see cref="T:System.Xml.XPath.XPathNavigator" /> unter Verwendung der angegebenen <paramref name="args" /> und gibt das Ergebnis an einen <see cref="T:System.IO.TextWriter" /> aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Die <xref:System.Xml.Xsl.XslTransform>-Klasse ist in der .NET Framework Version 2,0 veraltet. Die <xref:System.Xml.Xsl.XslCompiledTransform>-Klasse ist der neue XSLT-Prozessor. Weitere Informationen finden Sie unter [Verwenden der XslCompiledTransform-Klasse](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) und [Migrieren von der XslTransform-Klasse](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class).  
  
 <xref:System.Xml.Xsl.XslTransform> unterstützt die XSLT 1,0-Syntax. Das XSLT-Stylesheet muss die Namespace Deklaration `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`enthalten.  
  
 Die `args` werden mit den `xsl:param` Elementen abgeglichen, die im Stylesheet definiert sind. Die Auswahl der Transformation gilt für das gesamte Dokument. Anders ausgedrückt: Wenn der aktuelle Knoten in einer anderen Knoten Struktur als dem Stamm Knoten des Dokuments festgelegt ist, verhindert dies, dass der Transformationsprozess auf alle Knoten im geladenen Dokument zugreift. Nachdem die Transformation ausgeführt wurde, verbleibt der <xref:System.Xml.XPath.XPathNavigator> in seinem ursprünglichen Zustand. Dies bedeutet, dass der Knoten, der vor dem Transformationsprozess aktuell ist, der aktuelle Knoten bleibt, nachdem die <xref:System.Xml.Xsl.XslTransform.Transform%2A>-Methode aufgerufen wurde.  
  
 Das Codierungs Attribut für ein `xsl:output` Element wird bei der Ausgabe an einen <xref:System.IO.TextWriter>nicht unterstützt. Einzelheiten dazu, welche `xsl:output` Attribute unterstützt werden, finden Sie unter [Ausgaben aus XslTransform](/dotnet/standard/data/xml/outputs-from-an-xsltransform) .  
  
> [!NOTE]
>  Diese Methode ist mittlerweile veraltet. Die Einstellung der <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A>-Eigenschaft bestimmt, wie die XSLT-`document()`-Funktion aufgelöst wird. Es wird empfohlen, die <xref:System.Xml.Xsl.XslTransform.Transform%2A>-Methode zu verwenden, die ein <xref:System.Xml.XmlResolver>-Objekt als eines der Argumente annimmt.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Beim Verarbeiten der XSLT-Transformation ist ein Fehler aufgetreten.  
  
Hinweis: Dies ist eine Änderung im Verhalten gegenüber früheren Versionen. Eine <see cref="T:System.Xml.Xsl.XsltException" /> wird ausgelöst, wenn Sie Microsoft .NET Framework, Version 1.1 oder früher, verwenden.</exception>
        <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">Implementierung von freigegebenen Verhaltensweisen in der XslTransform-Klasse</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReader Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Function Transform (input As XPathNavigator, args As XsltArgumentList, resolver As XmlResolver) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReader ^ Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.XPathNavigator * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlResolver -&gt; System.Xml.XmlReader" Usage="xslTransform.Transform (input, args, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">Ein <see cref="T:System.Xml.XPath.XPathNavigator" />, der die zu transformierenden Daten enthält.</param>
        <param name="args">Eine <see cref="T:System.Xml.Xsl.XsltArgumentList" />, die die mit dem Namespace gekennzeichneten Argumente enthält, die als Eingabe für die Transformation verwendet werden.</param>
        <param name="resolver">Der zum Auflösen der XSLT-<c>document()</c>-Funktion verwendete <see cref="T:System.Xml.XmlResolver" />. Wenn dies <see langword="null" /> ist, wird die <c>document()</c>-Funktion nicht aufgelöst.  
  
Der <see cref="T:System.Xml.XmlResolver" /> wird nach Abschluss der <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" />-Methode nicht zwischengespeichert.</param>
        <summary>Transformiert die XML-Daten in <see cref="T:System.Xml.XPath.XPathNavigator" /> unter Verwendung der angegebenen <paramref name="args" /> und gibt das Ergebnis an einen <see cref="T:System.Xml.XmlReader" /> aus.</summary>
        <returns>Ein <see cref="T:System.Xml.XmlReader" />, der die Ergebnisse der Transformation enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Die <xref:System.Xml.Xsl.XslTransform>-Klasse ist in der .NET Framework Version 2,0 veraltet. Die <xref:System.Xml.Xsl.XslCompiledTransform>-Klasse ist der neue XSLT-Prozessor. Weitere Informationen finden Sie unter [Verwenden der XslCompiledTransform-Klasse](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) und [Migrieren von der XslTransform-Klasse](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class).  
  
 <xref:System.Xml.Xsl.XslTransform> unterstützt die XSLT 1,0-Syntax. Das XSLT-Stylesheet muss die Namespace Deklaration `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`enthalten.  
  
 Die `args` werden mit den `xsl:param` Elementen abgeglichen, die im Stylesheet definiert sind. Die Auswahl der Transformation gilt für das gesamte Dokument. Anders ausgedrückt: Wenn der aktuelle Knoten in einer anderen Knoten Struktur als dem Stamm Knoten des Dokuments festgelegt ist, verhindert dies, dass der Transformationsprozess auf alle Knoten im geladenen Dokument zugreift. Nachdem die Transformation ausgeführt wurde, verbleibt der <xref:System.Xml.XPath.XPathNavigator> in seinem ursprünglichen Zustand. Dies bedeutet, dass der Knoten, der vor dem Transformationsprozess aktuell ist, der aktuelle Knoten bleibt, nachdem die <xref:System.Xml.Xsl.XslTransform.Transform%2A>-Methode aufgerufen wurde.  
  
 Da <xref:System.Xml.XmlReader> schreibgeschützte Ausgabe bereitstellt, wird das `xsl:output`-Element ignoriert. Weitere Informationen finden Sie [Unterausgaben aus XslTransform](/dotnet/standard/data/xml/outputs-from-an-xsltransform) .  
  
 Diese Methode ermöglicht es Ihnen, eine asynchrone Transformation des Quelldokuments durchzuführen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Beim Verarbeiten der XSLT-Transformation ist ein Fehler aufgetreten.  
  
Hinweis: Dies ist eine Änderung im Verhalten gegenüber früheren Versionen. Eine <see cref="T:System.Xml.Xsl.XsltException" /> wird ausgelöst, wenn Sie Microsoft .NET Framework, Version 1.1 oder früher, verwenden.</exception>
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">Implementierung von freigegebenen Verhaltensweisen in der XslTransform-Klasse</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.Xml.XmlWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XPathNavigator, args As XsltArgumentList, output As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::Xml::XmlWriter ^ output);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.XPathNavigator * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter -&gt; unit" Usage="xslTransform.Transform (input, args, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass XmlResolver to Transform() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input">Ein <see cref="T:System.Xml.XPath.XPathNavigator" />, der die zu transformierenden Daten enthält.</param>
        <param name="args">Eine <see cref="T:System.Xml.Xsl.XsltArgumentList" />, die die mit dem Namespace gekennzeichneten Argumente enthält, die als Eingabe für die Transformation verwendet werden.</param>
        <param name="output">Der <see cref="T:System.Xml.XmlWriter" />, an den die Ausgabe erfolgen soll.</param>
        <summary>Transformiert die XML-Daten im <see cref="T:System.Xml.XPath.XPathNavigator" /> unter Verwendung der angegebenen args und gibt das Ergebnis an einen <see cref="T:System.Xml.XmlWriter" /> aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Die <xref:System.Xml.Xsl.XslTransform>-Klasse ist in der .NET Framework Version 2,0 veraltet. Die <xref:System.Xml.Xsl.XslCompiledTransform>-Klasse ist der neue XSLT-Prozessor. Weitere Informationen finden Sie unter [Verwenden der XslCompiledTransform-Klasse](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) und [Migrieren von der XslTransform-Klasse](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class).  
  
 <xref:System.Xml.Xsl.XslTransform> unterstützt die XSLT 1,0-Syntax. Das XSLT-Stylesheet muss die Namespace Deklaration `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`enthalten.  
  
 Die `args` werden mit den `xsl:param` Elementen abgeglichen, die im Stylesheet definiert sind. Die Auswahl der Transformation gilt für das gesamte Dokument. Anders ausgedrückt: Wenn der aktuelle Knoten in einer anderen Knoten Struktur als dem Stamm Knoten des Dokuments festgelegt ist, verhindert dies, dass der Transformationsprozess auf alle Knoten im geladenen Dokument zugreift. Nachdem die Transformation ausgeführt wurde, verbleibt der <xref:System.Xml.XPath.XPathNavigator> in seinem ursprünglichen Zustand. Dies bedeutet, dass der Knoten, der vor dem Transformationsprozess aktuell ist, der aktuelle Knoten bleibt, nachdem die <xref:System.Xml.Xsl.XslTransform.Transform%2A>-Methode aufgerufen wurde.  
  
 Das `xsl:output`-Element wird nicht unterstützt, wenn die Ausgabe an eine <xref:System.Xml.XmlWriter> erfolgt (`xsl:output` wird ignoriert). Weitere Informationen finden Sie [Unterausgaben aus XslTransform](/dotnet/standard/data/xml/outputs-from-an-xsltransform) .  
  
> [!NOTE]
>  Diese Methode ist mittlerweile veraltet. Die Einstellung der <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A>-Eigenschaft bestimmt, wie die XSLT-`document()`-Funktion aufgelöst wird. Es wird empfohlen, die <xref:System.Xml.Xsl.XslTransform.Transform%2A>-Methode zu verwenden, die ein <xref:System.Xml.XmlResolver>-Objekt als eines der Argumente annimmt.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Beim Verarbeiten der XSLT-Transformation ist ein Fehler aufgetreten.  
  
Hinweis: Dies ist eine Änderung im Verhalten gegenüber früheren Versionen. Eine <see cref="T:System.Xml.Xsl.XsltException" /> wird ausgelöst, wenn Sie Microsoft .NET Framework, Version 1.1 oder früher, verwenden.</exception>
        <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">Implementierung von freigegebenen Verhaltensweisen in der XslTransform-Klasse</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.IO.Stream output, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.Stream output, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, args As XsltArgumentList, output As Stream, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::Stream ^ output, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.IO.Stream * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Transform (input, args, output, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.Stream" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">Ein Objekt, das die <see cref="T:System.Xml.XPath.IXPathNavigable" />-Schnittstelle implementiert. Dabei kann es sich in .NET Framework entweder um einen <see cref="T:System.Xml.XmlNode" /> (in der Regel ein <see cref="T:System.Xml.XmlDocument" />) oder um ein <see cref="T:System.Xml.XPath.XPathDocument" /> mit den zu transformierenden Daten handeln.</param>
        <param name="args">Eine <see cref="T:System.Xml.Xsl.XsltArgumentList" />, die die mit dem Namespace gekennzeichneten Argumente enthält, die als Eingabe für die Transformation verwendet werden.</param>
        <param name="output">Der Stream, in den ausgegeben werden soll.</param>
        <param name="resolver">Der zum Auflösen der XSLT-<c>document()</c>-Funktion verwendete <see cref="T:System.Xml.XmlResolver" />. Wenn dies <see langword="null" /> ist, wird die <c>document()</c>-Funktion nicht aufgelöst.  
  
Der <see cref="T:System.Xml.XmlResolver" /> wird nach Abschluss der <see cref="Overload:System.Xml.Xsl.XslTransform.Transform" />-Methode nicht zwischengespeichert.</param>
        <summary>Transformiert die XML-Daten in <see cref="T:System.Xml.XPath.IXPathNavigable" /> unter Verwendung der angegebenen <paramref name="args" /> und gibt das Ergebnis an einen <see cref="T:System.IO.Stream" /> aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Die <xref:System.Xml.Xsl.XslTransform>-Klasse ist in der .NET Framework Version 2,0 veraltet. Die <xref:System.Xml.Xsl.XslCompiledTransform>-Klasse ist der neue XSLT-Prozessor. Weitere Informationen finden Sie unter [Verwenden der XslCompiledTransform-Klasse](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) und [Migrieren von der XslTransform-Klasse](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class).  
  
 <xref:System.Xml.Xsl.XslTransform> unterstützt die XSLT 1,0-Syntax. Das XSLT-Stylesheet muss die Namespace Deklaration `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`enthalten.  
  
 Die `args` werden mit den `xsl:param` Elementen abgeglichen, die im Stylesheet definiert sind.  
  
 Transformationen werden auf das gesamte Dokument angewendet. Wenn Sie einen anderen Knoten als den Stammknoten des Dokuments übergeben, wird dadurch nicht verhindert, dass im Transformationsprozess auf alle Knoten im geladenen Dokument zugegriffen wird. Zum Transformieren eines Knoten Fragments müssen Sie eine <xref:System.Xml.XmlDocument> erstellen, die nur das Knoten Fragment enthält, und dieses <xref:System.Xml.XmlDocument> an die <xref:System.Xml.Xsl.XslTransform.Transform%2A>-Methode übergeben.  
  
 Im folgenden Beispiel wird eine Transformation für ein Knoten Fragment durchführt.  
  
```csharp  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out, null);  
```  
  
 Im Beispiel werden die `library.xml`-und `print_root.xsl` Dateien als Eingabe verwendet und Folgendes an die Konsole ausgegeben.  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```xml  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```xml  
<stylesheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />   
  <template match="/">  
     Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</stylesheet>  
```  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine Transformation innerhalb einer ASP.NET-Seite durchführt.  
  
 [!code-aspx-csharp[XslTransform.Transform5#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Transform5/CS/transcs.aspx#1)]
 [!code-aspx-vb[XslTransform.Transform5#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Transform5/VB/transvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Beim Verarbeiten der XSLT-Transformation ist ein Fehler aufgetreten.  
  
Hinweis: Dies ist eine Änderung im Verhalten gegenüber früheren Versionen. Eine <see cref="T:System.Xml.Xsl.XsltException" /> wird ausgelöst, wenn Sie Microsoft .NET Framework, Version 1.1 oder früher, verwenden.</exception>
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">Implementierung von freigegebenen Verhaltensweisen in der XslTransform-Klasse</related>
        <related type="Article" href="https://msdn.microsoft.com/library/8e149d32-4b2f-493f-9e4b-d0d93475acde">Ausgaben aus "XslTransform"</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.IO.TextWriter output, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.TextWriter output, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, args As XsltArgumentList, output As TextWriter, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::TextWriter ^ output, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.IO.TextWriter * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Transform (input, args, output, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">Ein Objekt, das die <see cref="T:System.Xml.XPath.IXPathNavigable" />-Schnittstelle implementiert. Dabei kann es sich in .NET Framework entweder um einen <see cref="T:System.Xml.XmlNode" /> (in der Regel ein <see cref="T:System.Xml.XmlDocument" />) oder um ein <see cref="T:System.Xml.XPath.XPathDocument" /> mit den zu transformierenden Daten handeln.</param>
        <param name="args">Eine <see cref="T:System.Xml.Xsl.XsltArgumentList" />, die die mit dem Namespace gekennzeichneten Argumente enthält, die als Eingabe für die Transformation verwendet werden.</param>
        <param name="output">Der <see cref="T:System.IO.TextWriter" />, an den die Ausgabe erfolgen soll.</param>
        <param name="resolver">Der zum Auflösen der XSLT-<c>document()</c>-Funktion verwendete <see cref="T:System.Xml.XmlResolver" />. Wenn dies <see langword="null" /> ist, wird die <c>document()</c>-Funktion nicht aufgelöst.  
  
Der <see cref="T:System.Xml.XmlResolver" /> wird nach Abschluss der <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)" />-Methode nicht zwischengespeichert.</param>
        <summary>Transformiert die XML-Daten in <see cref="T:System.Xml.XPath.IXPathNavigable" /> unter Verwendung der angegebenen <paramref name="args" /> und gibt das Ergebnis an einen <see cref="T:System.IO.TextWriter" /> aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Die <xref:System.Xml.Xsl.XslTransform>-Klasse ist in der .NET Framework Version 2,0 veraltet. Die <xref:System.Xml.Xsl.XslCompiledTransform>-Klasse ist der neue XSLT-Prozessor. Weitere Informationen finden Sie unter [Verwenden der XslCompiledTransform-Klasse](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) und [Migrieren von der XslTransform-Klasse](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class).  
  
 <xref:System.Xml.Xsl.XslTransform> unterstützt die XSLT 1,0-Syntax. Das XSLT-Stylesheet muss die Namespace Deklaration `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`enthalten.  
  
 Die `args` werden mit den `xsl:param` Elementen abgeglichen, die im Stylesheet definiert sind.  
  
 Das Codierungs Attribut für ein `xsl:output` Element wird bei der Ausgabe an einen <xref:System.IO.TextWriter>nicht unterstützt. Einzelheiten dazu, welche `xsl:output` Attribute unterstützt werden, finden Sie unter [Ausgaben aus XslTransform](/dotnet/standard/data/xml/outputs-from-an-xsltransform) .  
  
 Transformationen werden auf das gesamte Dokument angewendet. Wenn Sie einen anderen Knoten als den Stammknoten des Dokuments übergeben, wird dadurch nicht verhindert, dass im Transformationsprozess auf alle Knoten im geladenen Dokument zugegriffen wird. Zum Transformieren eines Knoten Fragments müssen Sie eine <xref:System.Xml.XmlDocument> erstellen, die nur das Knoten Fragment enthält, und dieses <xref:System.Xml.XmlDocument> an die <xref:System.Xml.Xsl.XslTransform.Transform%2A>-Methode übergeben.  
  
 Im folgenden Beispiel wird eine Transformation für ein Knoten Fragment durchführt.  
  
```csharp  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out, null);  
```  
  
 Im Beispiel werden die `library.xml`-und `print_root.xsl` Dateien als Eingabe verwendet und Folgendes an die Konsole ausgegeben.  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```xml  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```xml  
<stylesheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />   
  <template match="/">  
     Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</stylesheet>  
```  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine XML-Datei transformiert und eine HTML-Zeichenfolge ausgegeben. Die Klassen <xref:System.IO.StringReader> und <xref:System.IO.StringWriter> werden verwendet, um die Zeichen folgen zu lesen und zu schreiben.  
  
 [!code-csharp[XslTransform.Transform6#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Transform6/CS/transstring.cs#1)]
 [!code-vb[XslTransform.Transform6#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Transform6/VB/transstring.vb#1)]  
  
 In diesem Beispiel wird die Datei `books.xml` als Eingabe verwendet.  
  
 [!code-xml[XslTransform.Transform6#2](~/samples/snippets/xml/VS_Snippets_Data/XslTransform.Transform6/XML/books.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Beim Verarbeiten der XSLT-Transformation ist ein Fehler aufgetreten.  
  
Hinweis: Dies ist eine Änderung im Verhalten gegenüber früheren Versionen. Eine <see cref="T:System.Xml.Xsl.XsltException" /> wird ausgelöst, wenn Sie Microsoft .NET Framework, Version 1.1 oder früher, verwenden.</exception>
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">Implementierung von freigegebenen Verhaltensweisen in der XslTransform-Klasse</related>
        <related type="Article" href="https://msdn.microsoft.com/library/8e149d32-4b2f-493f-9e4b-d0d93475acde">Ausgaben aus "XslTransform"</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlWriter output, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.Xml.XmlWriter output, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, args As XsltArgumentList, output As XmlWriter, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::Xml::XmlWriter ^ output, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Transform (input, args, output, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.Xml.XmlWriter" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">Ein Objekt, das die <see cref="T:System.Xml.XPath.IXPathNavigable" />-Schnittstelle implementiert. Dabei kann es sich in .NET Framework entweder um einen <see cref="T:System.Xml.XmlNode" /> (in der Regel ein <see cref="T:System.Xml.XmlDocument" />) oder um ein <see cref="T:System.Xml.XPath.XPathDocument" /> mit den zu transformierenden Daten handeln.</param>
        <param name="args">Eine <see cref="T:System.Xml.Xsl.XsltArgumentList" />, die die mit dem Namespace gekennzeichneten Argumente enthält, die als Eingabe für die Transformation verwendet werden.</param>
        <param name="output">Der <see cref="T:System.Xml.XmlWriter" />, an den die Ausgabe erfolgen soll.</param>
        <param name="resolver">Der zum Auflösen der XSLT-<c>document()</c>-Funktion verwendete <see cref="T:System.Xml.XmlResolver" />. Wenn dies <see langword="null" /> ist, wird die <c>document()</c>-Funktion nicht aufgelöst.  
  
Der <see cref="T:System.Xml.XmlResolver" /> wird nach Abschluss der <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" />-Methode nicht zwischengespeichert.</param>
        <summary>Transformiert die XML-Daten in <see cref="T:System.Xml.XPath.IXPathNavigable" /> unter Verwendung der angegebenen <paramref name="args" /> und gibt das Ergebnis an einen <see cref="T:System.Xml.XmlWriter" /> aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Die <xref:System.Xml.Xsl.XslTransform>-Klasse ist in der .NET Framework Version 2,0 veraltet. Die <xref:System.Xml.Xsl.XslCompiledTransform>-Klasse ist der neue XSLT-Prozessor. Weitere Informationen finden Sie unter [Verwenden der XslCompiledTransform-Klasse](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) und [Migrieren von der XslTransform-Klasse](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class).  
  
 <xref:System.Xml.Xsl.XslTransform> unterstützt die XSLT 1,0-Syntax. Das XSLT-Stylesheet muss die Namespace Deklaration `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`enthalten.  
  
 Die `args` werden mit den `xsl:param` Elementen abgeglichen, die im Stylesheet definiert sind. Das `xsl:output`-Element wird nicht unterstützt, wenn die Ausgabe an eine <xref:System.Xml.XmlWriter> erfolgt (`xsl:output` wird ignoriert). Weitere Informationen finden Sie [Unterausgaben aus XslTransform](/dotnet/standard/data/xml/outputs-from-an-xsltransform) .  
  
 Transformationen werden auf das gesamte Dokument angewendet. Wenn Sie einen anderen Knoten als den Stammknoten des Dokuments übergeben, wird dadurch nicht verhindert, dass im Transformationsprozess auf alle Knoten im geladenen Dokument zugegriffen wird. Zum Transformieren eines Knoten Fragments müssen Sie eine <xref:System.Xml.XmlDocument> erstellen, die nur das Knoten Fragment enthält, und dieses <xref:System.Xml.XmlDocument> an die <xref:System.Xml.Xsl.XslTransform.Transform%2A>-Methode übergeben.  
  
 Im folgenden Beispiel wird eine Transformation für ein Knoten Fragment durchführt.  
  
```csharp  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out, null);  
```  
  
 Im Beispiel werden die `library.xml`-und `print_root.xsl` Dateien als Eingabe verwendet und Folgendes an die Konsole ausgegeben.  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```xml  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```xml  
<stylesheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />  
  <template match="/">  
  Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</stylesheet>  
```  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein XML-Dokument in ein HTML-Dokument transformiert. Es zeigt die ISBN, den Titel und den Preis für jedes Buch in einer Tabelle an.  
  
 [!code-cpp[Classic WebData XslTransform.Transform7 Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XslTransform.Transform7 Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XslTransform.Transform7 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/VB/source.vb#1)]  
  
 In diesem Beispiel werden die folgenden beiden Eingabedateien verwendet:  
  
 `books.xml`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/books.xml#2)]  
  
 `output.xsl`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/output.xsl#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Beim Verarbeiten der XSLT-Transformation ist ein Fehler aufgetreten.  
  
Hinweis: Dies ist eine Änderung im Verhalten gegenüber früheren Versionen. Eine <see cref="T:System.Xml.Xsl.XsltException" /> wird ausgelöst, wenn Sie Microsoft .NET Framework, Version 1.1 oder früher, verwenden.</exception>
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">Implementierung von freigegebenen Verhaltensweisen in der XslTransform-Klasse</related>
        <related type="Article" href="https://msdn.microsoft.com/library/8e149d32-4b2f-493f-9e4b-d0d93475acde">Ausgaben aus "XslTransform"</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.IO.Stream output, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.Stream output, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XPathNavigator, args As XsltArgumentList, output As Stream, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::Stream ^ output, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.XPathNavigator * System.Xml.Xsl.XsltArgumentList * System.IO.Stream * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Transform (input, args, output, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.Stream" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">Ein <see cref="T:System.Xml.XPath.XPathNavigator" />, der die zu transformierenden Daten enthält.</param>
        <param name="args">Eine <see cref="T:System.Xml.Xsl.XsltArgumentList" />, die die mit dem Namespace gekennzeichneten Argumente enthält, die als Eingabe für die Transformation verwendet werden.</param>
        <param name="output">Der Stream, in den ausgegeben werden soll.</param>
        <param name="resolver">Der zum Auflösen der XSLT-<c>document()</c>-Funktion verwendete <see cref="T:System.Xml.XmlResolver" />. Wenn dies <see langword="null" /> ist, wird die <c>document()</c>-Funktion nicht aufgelöst.  
  
Der <see cref="T:System.Xml.XmlResolver" /> wird nach Abschluss der <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)" />-Methode nicht zwischengespeichert.</param>
        <summary>Transformiert die XML-Daten in <see cref="T:System.Xml.XPath.XPathNavigator" /> unter Verwendung der angegebenen <paramref name="args" /> und gibt das Ergebnis an einen <see cref="T:System.IO.Stream" /> aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Die <xref:System.Xml.Xsl.XslTransform>-Klasse ist in der .NET Framework Version 2,0 veraltet. Die <xref:System.Xml.Xsl.XslCompiledTransform>-Klasse ist der neue XSLT-Prozessor. Weitere Informationen finden Sie unter [Verwenden der XslCompiledTransform-Klasse](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) und [Migrieren von der XslTransform-Klasse](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class).  
  
 <xref:System.Xml.Xsl.XslTransform> unterstützt die XSLT 1,0-Syntax. Das XSLT-Stylesheet muss die Namespace Deklaration `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`enthalten.  
  
 Die `args` werden mit den `xsl:param` Elementen abgeglichen, die im Stylesheet definiert sind. Die Auswahl der Transformation gilt für das gesamte Dokument. Anders ausgedrückt: Wenn der aktuelle Knoten in einer anderen Knoten Struktur als dem Stamm Knoten des Dokuments festgelegt ist, verhindert dies, dass der Transformationsprozess auf alle Knoten im geladenen Dokument zugreift. Nachdem die Transformation ausgeführt wurde, verbleibt der <xref:System.Xml.XPath.XPathNavigator> in seinem ursprünglichen Zustand. Dies bedeutet, dass der Knoten, der vor dem Transformationsprozess aktuell ist, der aktuelle Knoten bleibt, nachdem die <xref:System.Xml.Xsl.XslTransform.Transform%2A>-Methode aufgerufen wurde.  
  
 Einzelheiten dazu, welche `xsl:output` Attribute unterstützt werden, finden Sie unter [Ausgaben aus XslTransform](/dotnet/standard/data/xml/outputs-from-an-xsltransform) .  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine Customer-Tabelle in eine <xref:System.Xml.XmlDataDocument> geladen und eine XSLT-Transformation durchführt, um die Kundendaten in eine HTML-Tabelle zu überführen. Im Beispiel wird die Microsoft SQL Server 2000-Datenbank Northwind verwendet.  
  
 [!code-csharp[XmlDataDocument.CreateNavigator#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlDataDocument.CreateNavigator/CS/dataset_trans.cs#1)]
 [!code-vb[XmlDataDocument.CreateNavigator#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlDataDocument.CreateNavigator/VB/dataset_trans.vb#1)]  
  
 In diesem Beispiel wird die Datei `customers.xsl` als Eingabe verwendet.  
  
 [!code-xml[XmlDataDocument.CreateNavigator#2](~/samples/snippets/xml/VS_Snippets_Data/XmlDataDocument.CreateNavigator/XML/customers.xsl#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Beim Verarbeiten der XSLT-Transformation ist ein Fehler aufgetreten.  
  
Hinweis: Dies ist eine Änderung im Verhalten gegenüber früheren Versionen. Eine <see cref="T:System.Xml.Xsl.XsltException" /> wird ausgelöst, wenn Sie Microsoft .NET Framework, Version 1.1 oder früher, verwenden.</exception>
        <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">Implementierung von freigegebenen Verhaltensweisen in der XslTransform-Klasse</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.IO.TextWriter output, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.TextWriter output, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XPathNavigator, args As XsltArgumentList, output As TextWriter, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::TextWriter ^ output, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.XPathNavigator * System.Xml.Xsl.XsltArgumentList * System.IO.TextWriter * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Transform (input, args, output, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">Ein <see cref="T:System.Xml.XPath.XPathNavigator" />, der die zu transformierenden Daten enthält.</param>
        <param name="args">Eine <see cref="T:System.Xml.Xsl.XsltArgumentList" />, die die mit dem Namespace gekennzeichneten Argumente enthält, die als Eingabe für die Transformation verwendet werden.</param>
        <param name="output">Der <see cref="T:System.IO.TextWriter" />, an den die Ausgabe erfolgen soll.</param>
        <param name="resolver">Der zum Auflösen der XSLT-<c>document()</c>-Funktion verwendete <see cref="T:System.Xml.XmlResolver" />. Wenn dies <see langword="null" /> ist, wird die <c>document()</c>-Funktion nicht aufgelöst.  
  
Der <see cref="T:System.Xml.XmlResolver" /> wird nach Abschluss der <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)" />-Methode nicht zwischengespeichert.</param>
        <summary>Transformiert die XML-Daten in <see cref="T:System.Xml.XPath.XPathNavigator" /> unter Verwendung der angegebenen <paramref name="args" /> und gibt das Ergebnis an einen <see cref="T:System.IO.TextWriter" /> aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Die <xref:System.Xml.Xsl.XslTransform>-Klasse ist in der .NET Framework Version 2,0 veraltet. Die <xref:System.Xml.Xsl.XslCompiledTransform>-Klasse ist der neue XSLT-Prozessor. Weitere Informationen finden Sie unter [Verwenden der XslCompiledTransform-Klasse](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) und [Migrieren von der XslTransform-Klasse](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class).  
  
 <xref:System.Xml.Xsl.XslTransform> unterstützt die XSLT 1,0-Syntax. Das XSLT-Stylesheet muss die Namespace Deklaration `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`enthalten.  
  
 Die `args` werden mit den `xsl:param` Elementen abgeglichen, die im Stylesheet definiert sind. Die Auswahl der Transformation gilt für das gesamte Dokument. Anders ausgedrückt: Wenn der aktuelle Knoten in einer anderen Knoten Struktur als dem Stamm Knoten des Dokuments festgelegt ist, verhindert dies, dass der Transformationsprozess auf alle Knoten im geladenen Dokument zugreift. Nachdem die Transformation ausgeführt wurde, verbleibt der <xref:System.Xml.XPath.XPathNavigator> in seinem ursprünglichen Zustand. Dies bedeutet, dass der Knoten, der vor dem Transformationsprozess aktuell ist, der aktuelle Knoten bleibt, nachdem die <xref:System.Xml.Xsl.XslTransform.Transform%2A>-Methode aufgerufen wurde.  
  
 Das Codierungs Attribut für ein `xsl:output` Element wird bei der Ausgabe an einen <xref:System.IO.TextWriter>nicht unterstützt. Einzelheiten dazu, welche `xsl:output` Attribute unterstützt werden, finden Sie unter [Ausgaben aus XslTransform](/dotnet/standard/data/xml/outputs-from-an-xsltransform) .  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Beim Verarbeiten der XSLT-Transformation ist ein Fehler aufgetreten.  
  
Hinweis: Dies ist eine Änderung im Verhalten gegenüber früheren Versionen. Eine <see cref="T:System.Xml.Xsl.XsltException" /> wird ausgelöst, wenn Sie Microsoft .NET Framework, Version 1.1 oder früher, verwenden.</exception>
        <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">Implementierung von freigegebenen Verhaltensweisen in der XslTransform-Klasse</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlWriter output, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.Xml.XmlWriter output, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XPathNavigator, args As XsltArgumentList, output As XmlWriter, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::Xml::XmlWriter ^ output, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.XPathNavigator * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Transform (input, args, output, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.Xml.XmlWriter" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">Ein <see cref="T:System.Xml.XPath.XPathNavigator" />, der die zu transformierenden Daten enthält.</param>
        <param name="args">Eine <see cref="T:System.Xml.Xsl.XsltArgumentList" />, die die mit dem Namespace gekennzeichneten Argumente enthält, die als Eingabe für die Transformation verwendet werden.</param>
        <param name="output">Der <see cref="T:System.Xml.XmlWriter" />, an den die Ausgabe erfolgen soll.</param>
        <param name="resolver">Der zum Auflösen der XSLT-<c>document()</c>-Funktion verwendete <see cref="T:System.Xml.XmlResolver" />. Wenn dies <see langword="null" /> ist, wird die <c>document()</c>-Funktion nicht aufgelöst.  
  
Der <see cref="T:System.Xml.XmlResolver" /> wird nach Abschluss der <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" />-Methode nicht zwischengespeichert.</param>
        <summary>Transformiert die XML-Daten im <see cref="T:System.Xml.XPath.XPathNavigator" /> unter Verwendung der angegebenen args und gibt das Ergebnis an einen <see cref="T:System.Xml.XmlWriter" /> aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Die <xref:System.Xml.Xsl.XslTransform>-Klasse ist in der .NET Framework Version 2,0 veraltet. Die <xref:System.Xml.Xsl.XslCompiledTransform>-Klasse ist der neue XSLT-Prozessor. Weitere Informationen finden Sie unter [Verwenden der XslCompiledTransform-Klasse](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) und [Migrieren von der XslTransform-Klasse](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class).  
  
 <xref:System.Xml.Xsl.XslTransform> unterstützt die XSLT 1,0-Syntax. Das XSLT-Stylesheet muss die Namespace Deklaration `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`enthalten.  
  
 Die `args` werden mit den `xsl:param` Elementen abgeglichen, die im Stylesheet definiert sind. Die Auswahl der Transformation gilt für das gesamte Dokument. Anders ausgedrückt: Wenn der aktuelle Knoten in einer anderen Knoten Struktur als dem Stamm Knoten des Dokuments festgelegt ist, verhindert dies, dass der Transformationsprozess auf alle Knoten im geladenen Dokument zugreift. Nachdem die Transformation ausgeführt wurde, verbleibt der <xref:System.Xml.XPath.XPathNavigator> in seinem ursprünglichen Zustand. Dies bedeutet, dass der Knoten, der vor dem Transformationsprozess aktuell ist, der aktuelle Knoten bleibt, nachdem die <xref:System.Xml.Xsl.XslTransform.Transform%2A>-Methode aufgerufen wurde.  
  
 Das `xsl:output`-Element wird nicht unterstützt, wenn die Ausgabe an eine <xref:System.Xml.XmlWriter> erfolgt (`xsl:output` wird ignoriert). Weitere Informationen finden Sie [Unterausgaben aus XslTransform](/dotnet/standard/data/xml/outputs-from-an-xsltransform) .  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein XML-Dokument geladen und bearbeitet, bevor eine XSLT-Transformation durchgeführt wird.  
  
 [!code-cpp[XslTransform.Transform2#1](~/samples/snippets/cpp/VS_Snippets_Data/XslTransform.Transform2/CPP/trans_snip.cpp#1)]
 [!code-csharp[XslTransform.Transform2#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Transform2/CS/trans_snip.cs#1)]
 [!code-vb[XslTransform.Transform2#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Transform2/VB/trans_snip.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Beim Verarbeiten der XSLT-Transformation ist ein Fehler aufgetreten.  
  
Hinweis: Dies ist eine Änderung im Verhalten gegenüber früheren Versionen. Eine <see cref="T:System.Xml.Xsl.XsltException" /> wird ausgelöst, wenn Sie Microsoft .NET Framework, Version 1.1 oder früher, verwenden.</exception>
        <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">Implementierung von freigegebenen Verhaltensweisen in der XslTransform-Klasse</related>
      </Docs>
    </Member>
    <Member MemberName="XmlResolver">
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver XmlResolver { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver XmlResolver" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Xsl.XslTransform.XmlResolver" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlResolver As XmlResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlResolver ^ XmlResolver {  void set(System::Xml::XmlResolver ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlResolver : System.Xml.XmlResolver" Usage="System.Xml.Xsl.XslTransform.XmlResolver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass XmlResolver to Transform() method")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Legt den <see cref="T:System.Xml.XmlResolver" /> fest, der zum Auflösen externer Ressourcen verwendet wird, wenn die <see cref="Overload:System.Xml.Xsl.XslTransform.Transform" />-Methode aufgerufen wird.</summary>
        <value>Der bei der Transformation zu verwendende <see cref="T:System.Xml.XmlResolver" />. Wenn <see langword="null" />festgelegt ist, wird die XSLT- <c>Document ()</c> -Funktion nicht aufgelöst.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Die <xref:System.Xml.Xsl.XslTransform>-Klasse ist in der .NET Framework Version 2,0 veraltet. Die <xref:System.Xml.Xsl.XslCompiledTransform>-Klasse ist der neue XSLT-Prozessor. Weitere Informationen finden Sie unter [Verwenden der XslCompiledTransform-Klasse](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) und [Migrieren von der XslTransform-Klasse](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class).  
  
 In Version 1,1 des .NET Framework bestimmt die Vertrauens Ebene der Anwendung das Standardverhalten:  
  
 `Fully trusted code:` eine Standard <xref:System.Xml.XmlUrlResolver> ohne Benutzer Anmelde Informationen verwendet, um die `document()`-Funktion aufzulösen. Wenn für den Zugriff auf die externe Ressource eine Authentifizierung erforderlich ist, verwenden Sie diese Eigenschaft, um eine <xref:System.Xml.XmlResolver> mit den erforderlichen Anmelde Informationen anzugeben.  
  
 `Semi-trusted code:` die-Eigenschaft auf `null`festgelegt ist, bedeutet dies, dass die `document()`-Funktion nicht aufgelöst wird. Da für die Angabe eines <xref:System.Xml.XmlResolver>volle Vertrauenswürdigkeit erforderlich ist, kann diese Eigenschaft ebenfalls nicht festgelegt werden.  
  
 Dieser Konflikt Löser wird verwendet, wenn die XSLT-`document()` Funktion aufgerufen wird. Er wird nicht verwendet, um `xsl:import` und `xsl:include` Elemente aufzulösen, auf die im Stylesheet verwiesen wird. Um einen <xref:System.Xml.XmlResolver> anzugeben, der zum Auflösen `xsl:import` und `xsl:include` Elemente verwendet werden soll, auf die im Stylesheet verwiesen wird, verwenden Sie die-<xref:System.Xml.Xsl.XslTransform.Load%2A> Überladung, die einen <xref:System.Xml.XmlResolver> als eines seiner Argumente annimmt.  
  
> [!NOTE]
>  Diese Eigenschaft ist in Version 1,1 des .NET Framework veraltet. Das Angeben einer <xref:System.Xml.XmlResolver> mithilfe der <xref:System.Xml.Xsl.XslTransform.Transform%2A> Methode ist die empfohlene Vorgehensweise. In diesem Fall wird der <xref:System.Xml.XmlResolver> nicht zwischengespeichert, nachdem die <xref:System.Xml.Xsl.XslTransform.Transform%2A>-Methode abgeschlossen wurde.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
      </Docs>
    </Member>
  </Members>
</Type>

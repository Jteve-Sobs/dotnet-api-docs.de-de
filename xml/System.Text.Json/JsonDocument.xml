<Type Name="JsonDocument" FullName="System.Text.Json.JsonDocument">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7cb6573dc8ebcc99bc57891401b7523f4130c8d6" /><Meta Name="ms.sourcegitcommit" Value="75eca440f8f4d595506405f48961f38649e160d7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="06/01/2019" /><Meta Name="ms.locfileid" Value="66458000" /></Metadata><TypeSignature Language="C#" Value="public sealed class JsonDocument : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit JsonDocument extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.JsonDocument" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class JsonDocument&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class JsonDocument sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type JsonDocument = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Stellt einen Mechanismus zum Untersuchen des strukturellen Inhalts eines JSON-Werts ohne automatisches Instanziieren von Datenwerten bereit.</summary>
    <remarks>
      <format><![CDATA[
      
Diese Klasse verwendet Ressourcen von Poolspeicher zur Verringerung der Auswirkungen der Garbage collection (GC) in High-Szenarios. Fehler beim Verwerfen der dieses Objekt führt in den Arbeitsspeicher nicht zurückgegeben werden, um den Pool, der wodurch GC Auswirkungen auf die verschiedenen Teile von Framework erhöht wird.
              
      ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonDocument.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="jsonDocument.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Text.Json.JsonDocument Parse (System.Buffers.ReadOnlySequence&lt;byte&gt; utf8Json, System.Text.Json.JsonReaderOptions readerOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.Json.JsonDocument Parse(valuetype System.Buffers.ReadOnlySequence`1&lt;unsigned int8&gt; utf8Json, valuetype System.Text.Json.JsonReaderOptions readerOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonDocument.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonReaderOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (utf8Json As ReadOnlySequence(Of Byte), Optional readerOptions As JsonReaderOptions = null) As JsonDocument" />
      <MemberSignature Language="F#" Value="static member Parse : System.Buffers.ReadOnlySequence&lt;byte&gt; * System.Text.Json.JsonReaderOptions -&gt; System.Text.Json.JsonDocument" Usage="System.Text.Json.JsonDocument.Parse (utf8Json, readerOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.Buffers.ReadOnlySequence&lt;System.Byte&gt;" />
        <Parameter Name="readerOptions" Type="System.Text.Json.JsonReaderOptions" />
      </Parameters>
      <Docs>
        <param name="utf8Json">Ruft den zu analysierenden JSON-Text ab.</param>
        <param name="readerOptions">Optionen zum Steuern des Readerverhaltens während der Analyse.</param>
        <summary>Analysiert eine Sequenz als UTF-8-codierten Text, der einen einzelnen JSON-Bytewert in einem JsonDocument darstellt.</summary>
        <returns>Eine JsonDocument-Darstellung des JSON-Werts.</returns>
        <remarks>
          <format><![CDATA[
          
Die <xref:System.Buffers.ReadOnlySequence%601> kann verwendet werden, für die gesamte Lebensdauer des Objekts JsonDocument, und der Aufrufer muss sicherstellen, dass die Daten darin nicht während der Lebensdauer eines Objekts ändert.
               
Da die Eingabe ist Text, muss eine UTF-8-Byte-Order-Mark (BOM) nicht vorhanden sein.

          ]]></format>
        </remarks>
        <exception cref="T:System.Text.Json.JsonException"><paramref name="utf8Json" /> stellt keinen gültigen einzelnen JSON-Wert dar.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="readerOptions" /> enthält nicht unterstützte Optionen.</exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Text.Json.JsonDocument Parse (System.IO.Stream utf8Json, System.Text.Json.JsonReaderOptions readerOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.Json.JsonDocument Parse(class System.IO.Stream utf8Json, valuetype System.Text.Json.JsonReaderOptions readerOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonDocument.Parse(System.IO.Stream,System.Text.Json.JsonReaderOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (utf8Json As Stream, Optional readerOptions As JsonReaderOptions = null) As JsonDocument" />
      <MemberSignature Language="F#" Value="static member Parse : System.IO.Stream * System.Text.Json.JsonReaderOptions -&gt; System.Text.Json.JsonDocument" Usage="System.Text.Json.JsonDocument.Parse (utf8Json, readerOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="readerOptions" Type="System.Text.Json.JsonReaderOptions" />
      </Parameters>
      <Docs>
        <param name="utf8Json">Die zu analysierenden JSON-Daten.</param>
        <param name="readerOptions">Optionen zum Steuern des Readerverhaltens während der Analyse.</param>
        <summary>Analysiert einen <see cref="T:System.IO.Stream" /> als UTF-8-codierte Daten, die einen einzelnen JSON-Wert in einem JsonDocument darstellen. Der Stream wird vollständig gelesen.</summary>
        <returns>Eine JsonDocument-Darstellung des JSON-Werts.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.Json.JsonException"><paramref name="utf8Json" /> stellt keinen gültigen einzelnen JSON-Wert dar.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="readerOptions" /> enthält nicht unterstützte Optionen.</exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Text.Json.JsonDocument Parse (ReadOnlyMemory&lt;byte&gt; utf8Json, System.Text.Json.JsonReaderOptions readerOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.Json.JsonDocument Parse(valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt; utf8Json, valuetype System.Text.Json.JsonReaderOptions readerOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonReaderOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (utf8Json As ReadOnlyMemory(Of Byte), Optional readerOptions As JsonReaderOptions = null) As JsonDocument" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlyMemory&lt;byte&gt; * System.Text.Json.JsonReaderOptions -&gt; System.Text.Json.JsonDocument" Usage="System.Text.Json.JsonDocument.Parse (utf8Json, readerOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.ReadOnlyMemory&lt;System.Byte&gt;" />
        <Parameter Name="readerOptions" Type="System.Text.Json.JsonReaderOptions" />
      </Parameters>
      <Docs>
        <param name="utf8Json">Ruft den zu analysierenden JSON-Text ab.</param>
        <param name="readerOptions">Optionen zum Steuern des Readerverhaltens während der Analyse.</param>
        <summary>Analysiert Arbeitsspeicher als UTF-8-codierten Text, der einen einzelnen JSON-Bytewert in einem JsonDocument darstellt.</summary>
        <returns>Eine JsonDocument-Darstellung des JSON-Werts.</returns>
        <remarks>
          <format><![CDATA[

Die <xref:System.ReadOnlyMemory%601> Wert für die gesamte Lebensdauer des Objekts JsonDocument verwendet werden, und der Aufrufer muss sicherstellen, dass die Daten darin nicht während der Lebensdauer eines Objekts ändert.

Da die Eingabe ist Text, muss eine UTF-8-Byte-Order-Mark (BOM) nicht vorhanden sein.
                 
          ]]></format>
        </remarks>
        <exception cref="T:System.Text.Json.JsonException"><paramref name="utf8Json" /> stellt keinen gültigen einzelnen JSON-Wert dar.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="readerOptions" /> enthält nicht unterstützte Optionen.</exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Text.Json.JsonDocument Parse (ReadOnlyMemory&lt;char&gt; json, System.Text.Json.JsonReaderOptions readerOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.Json.JsonDocument Parse(valuetype System.ReadOnlyMemory`1&lt;char&gt; json, valuetype System.Text.Json.JsonReaderOptions readerOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonReaderOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (json As ReadOnlyMemory(Of Char), Optional readerOptions As JsonReaderOptions = null) As JsonDocument" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlyMemory&lt;char&gt; * System.Text.Json.JsonReaderOptions -&gt; System.Text.Json.JsonDocument" Usage="System.Text.Json.JsonDocument.Parse (json, readerOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="json" Type="System.ReadOnlyMemory&lt;System.Char&gt;" />
        <Parameter Name="readerOptions" Type="System.Text.Json.JsonReaderOptions" />
      </Parameters>
      <Docs>
        <param name="json">Ruft den zu analysierenden JSON-Text ab.</param>
        <param name="readerOptions">Optionen zum Steuern des Readerverhaltens während der Analyse.</param>
        <summary>Analysiert Text, der einen einzelnen JSON-Zeichenwert in einem JsonDocument darstellt.</summary>
        <returns>Eine JsonDocument-Darstellung des JSON-Werts.</returns>
        <remarks>
          <format><![CDATA[
          
Die <xref:System.ReadOnlyMemory%601> verwendet werden, für die gesamte Lebensdauer des Objekts JsonDocument und der Aufrufer muss sicherstellen, dass die Daten darin nicht während der Lebensdauer eines Objekts ändert.

          ]]></format>
        </remarks>
        <exception cref="T:System.Text.Json.JsonException"><paramref name="json" /> stellt keinen gültigen einzelnen JSON-Wert dar.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="readerOptions" /> enthält nicht unterstützte Optionen.</exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Text.Json.JsonDocument Parse (string json, System.Text.Json.JsonReaderOptions readerOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.Json.JsonDocument Parse(string json, valuetype System.Text.Json.JsonReaderOptions readerOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonDocument.Parse(System.String,System.Text.Json.JsonReaderOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (json As String, Optional readerOptions As JsonReaderOptions = null) As JsonDocument" />
      <MemberSignature Language="F#" Value="static member Parse : string * System.Text.Json.JsonReaderOptions -&gt; System.Text.Json.JsonDocument" Usage="System.Text.Json.JsonDocument.Parse (json, readerOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="json" Type="System.String" />
        <Parameter Name="readerOptions" Type="System.Text.Json.JsonReaderOptions" />
      </Parameters>
      <Docs>
        <param name="json">Ruft den zu analysierenden JSON-Text ab.</param>
        <param name="readerOptions">Optionen zum Steuern des Readerverhaltens während der Analyse.</param>
        <summary>Analysiert Text, der einen einzelnen JSON-Zeichenfolgenwert in einem JsonDocument darstellt.</summary>
        <returns>Eine JsonDocument-Darstellung des JSON-Werts.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.Json.JsonException"><paramref name="json" /> stellt keinen gültigen einzelnen JSON-Wert dar.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="readerOptions" /> enthält nicht unterstützte Optionen.</exception>
      </Docs>
    </Member>
    <Member MemberName="ParseAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Text.Json.JsonDocument&gt; ParseAsync (System.IO.Stream utf8Json, System.Text.Json.JsonReaderOptions readerOptions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Text.Json.JsonDocument&gt; ParseAsync(class System.IO.Stream utf8Json, valuetype System.Text.Json.JsonReaderOptions readerOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonDocument.ParseAsync(System.IO.Stream,System.Text.Json.JsonReaderOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member ParseAsync : System.IO.Stream * System.Text.Json.JsonReaderOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Text.Json.JsonDocument&gt;" Usage="System.Text.Json.JsonDocument.ParseAsync (utf8Json, readerOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Text.Json.JsonDocument&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="readerOptions" Type="System.Text.Json.JsonReaderOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="utf8Json">Die zu analysierenden JSON-Daten.</param>
        <param name="readerOptions">Optionen zum Steuern des Readerverhaltens während der Analyse.</param>
        <param name="cancellationToken">Das Token zum Überwachen von Abbruchanforderungen.</param>
        <summary>Analysiert einen <see cref="T:System.IO.Stream" /> als UTF-8-codierte Daten, die einen einzelnen JSON-Wert in einem JsonDocument darstellen. Der Stream wird vollständig gelesen.</summary>
        <returns>Eine Aufgabe zum Produzieren einer JsonDocument-Darstellung des JSON-Werts.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.Json.JsonException"><paramref name="utf8Json" /> stellt keinen gültigen einzelnen JSON-Wert dar.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="readerOptions" /> enthält nicht unterstützte Optionen.</exception>
      </Docs>
    </Member>
    <Member MemberName="ParseValue">
      <MemberSignature Language="C#" Value="public static System.Text.Json.JsonDocument ParseValue (ref System.Text.Json.Utf8JsonReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.Json.JsonDocument ParseValue(valuetype System.Text.Json.Utf8JsonReader&amp; reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonDocument.ParseValue(System.Text.Json.Utf8JsonReader@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseValue (ByRef reader As Utf8JsonReader) As JsonDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::Json::JsonDocument ^ ParseValue(System::Text::Json::Utf8JsonReader % reader);" />
      <MemberSignature Language="F#" Value="static member ParseValue :  -&gt; System.Text.Json.JsonDocument" Usage="System.Text.Json.JsonDocument.ParseValue reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Text.Json.Utf8JsonReader" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="reader">Der Reader zum Lesen.</param>
        <summary>Analysiert einen JSON-Wert (einschließlich Objekte oder Arrays) aus dem angegebenen Reader.</summary>
        <returns>Ein JsonDocument, das den Wert (und geschachtelte Werte) darstellt, die aus dem Reader gelesen werden.</returns>
        <remarks>
          <format><![CDATA[

Wenn die <xref:System.Text.Json.Utf8JsonReader.TokenType> Eigenschaft `reader` ist <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> oder <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>, der Reader wird durch einen Aufruf von fortgefahren <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> auf den Anfang des Werts bestimmen.
               
Nach Abschluss dieser Methode `reader` das letzte Token in der JSON-Wert positioniert ist. Wenn eine Ausnahme ausgelöst wird, wird der Reader auf den Zustand zurückgesetzt, geändert, wenn die Methode aufgerufen wurde.
               
Diese Methode erstellt eine Kopie der Daten den Reader, behandelt, daher keine Notwendigkeit der Aufrufer besteht die Datenintegrität, nach der Rückkehr dieser Methode.

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="reader" /> enthält nicht unterstützte Optionen.</exception>
        <exception cref="T:System.Text.Json.JsonException">Es konnte kein Wert aus dem Reader gelesen werden.</exception>
      </Docs>
    </Member>
    <Member MemberName="RootElement">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonElement RootElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonElement RootElement" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonDocument.RootElement" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RootElement As JsonElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonElement RootElement { System::Text::Json::JsonElement get(); };" />
      <MemberSignature Language="F#" Value="member this.RootElement : System.Text.Json.JsonElement" Usage="System.Text.Json.JsonDocument.RootElement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Stammelement dieses JSON-Dokuments ab.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseValue">
      <MemberSignature Language="C#" Value="public static bool TryParseValue (ref System.Text.Json.Utf8JsonReader reader, out System.Text.Json.JsonDocument document);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseValue(valuetype System.Text.Json.Utf8JsonReader&amp; reader, [out] class System.Text.Json.JsonDocument&amp; document) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonDocument.TryParseValue(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonDocument@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseValue (ByRef reader As Utf8JsonReader, ByRef document As JsonDocument) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseValue(System::Text::Json::Utf8JsonReader % reader, [Runtime::InteropServices::Out] System::Text::Json::JsonDocument ^ % document);" />
      <MemberSignature Language="F#" Value="static member TryParseValue :  *  -&gt; bool" Usage="System.Text.Json.JsonDocument.TryParseValue (reader, document)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Text.Json.Utf8JsonReader" RefType="ref" />
        <Parameter Name="document" Type="System.Text.Json.JsonDocument" RefType="out" />
      </Parameters>
      <Docs>
        <param name="reader">Der Reader zum Lesen.</param>
        <param name="document">Wenn diese Methode zurückgegeben wird, enthält sie das analysierte Dokument.</param>
        <summary>Versucht, einen JSON-Wert (einschließlich Objekte oder Arrays) aus dem angegebenen Reader zu analysieren.</summary>
        <returns><see langword="true" />, wenn ein Wert gelesen und in ein JsonDocument analysiert wurde; <see langword="false" />, wenn dem Reader beim Analysieren die Daten ausgegangen sind. Alle anderen Fälle führen dazu, dass eine Ausnahme ausgelöst wird.</returns>
        <remarks>
          <format><![CDATA[
          
Wenn die <xref:System.Text.Json.Utf8JsonReader.TokenType> Eigenschaft `reader` ist <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> oder <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>, der Reader wird durch einen Aufruf von fortgefahren <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> auf den Anfang des Werts bestimmen.
               
Nach Abschluss dieser Methode `reader` das letzte Token in der JSON-Wert positioniert ist. Wenn eine Ausnahme ausgelöst wird oder `false` zurückgegeben wird, wird der Reader wird zurückgesetzt, um den Status, wenn die Methode aufgerufen wurde.
               
Diese Methode erstellt eine Kopie der Daten den Reader, behandelt, daher keine Notwendigkeit der Aufrufer besteht die Datenintegrität, nach der Rückkehr dieser Methode.
                 
               ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="reader" /> enthält nicht unterstützte Optionen.</exception>
        <exception cref="T:System.Text.Json.JsonException">Es konnte kein Wert aus dem Reader gelesen werden.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
<Type Name="Utf8JsonReader" FullName="System.Text.Json.Utf8JsonReader">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ac22bdd9cb1a846d957131e63ee0b9a6a0ee62bb" /><Meta Name="ms.sourcegitcommit" Value="bc24a3ba616ee1df8b858f9400cae4f058ea3a7e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="06/19/2019" /><Meta Name="ms.locfileid" Value="67243704" /></Metadata><TypeSignature Language="C#" Value="public struct Utf8JsonReader" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit Utf8JsonReader extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.Utf8JsonReader" />
  <TypeSignature Language="VB.NET" Value="Public Structure Utf8JsonReader" />
  <TypeSignature Language="C++ CLI" Value="public value class Utf8JsonReader" />
  <TypeSignature Language="F#" Value="type Utf8JsonReader = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Bietet eine leistungsstarke API für schreibgeschützten Zugriff auf den UTF-8-codierten JSON-Text in Vorwärtsrichtung.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## Remarks

`Utf8JsonReader` Prozesse, die der Text nacheinander mit kein Zwischenspeichern und in der Standardeinstellung entspricht genau zu der [JSON RFC](https://tools.ietf.org/html/rfc8259).

Wenn `Utf8JsonReader` trifft Ungültiges JSON-Format, löst er eine <xref:System.Text.Json.JsonReaderException> mit grundlegenden Informationen wie Anzahl und die Byte-Position der Zeile in der Zeile.

Da dieser Typ eine Verweisstruktur ist, unterstützt nicht direkt asynchronen. Es bietet jedoch Unterstützung für erneutes eintreten, um unvollständige Daten zu lesen, und fahren, sobald weitere Daten dargestellt werden.

In der Lage, legen Sie die maximale Tiefe während des Lesens oder zulassen, wird übersprungen, Kommentare, erstellen Sie eine Instanz des <xref:System.Text.Json.JsonReaderState> und übergeben es an dem Reader.

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonReader (ref System.Buffers.ReadOnlySequence&lt;byte&gt; jsonData, bool isFinalBlock, System.Text.Json.JsonReaderState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor([in]valuetype System.Buffers.ReadOnlySequence`1&lt;unsigned int8&gt;&amp; jsonData, bool isFinalBlock, valuetype System.Text.Json.JsonReaderState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte}@,System.Boolean,System.Text.Json.JsonReaderState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ByRef jsonData As ReadOnlySequence(Of Byte), isFinalBlock As Boolean, state As JsonReaderState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Utf8JsonReader(System::Buffers::ReadOnlySequence&lt;System::Byte&gt; % jsonData, bool isFinalBlock, System::Text::Json::JsonReaderState state);" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonReader :  * bool * System.Text.Json.JsonReaderState -&gt; System.Text.Json.Utf8JsonReader" Usage="new System.Text.Json.Utf8JsonReader (jsonData, isFinalBlock, state)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="jsonData" Type="System.Buffers.ReadOnlySequence&lt;System.Byte&gt;" RefType="ref">
          <Attributes>
            <Attribute>
              <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="isFinalBlock" Type="System.Boolean" />
        <Parameter Name="state" Type="System.Text.Json.JsonReaderState" />
      </Parameters>
      <Docs>
        <param name="jsonData">Der zu verarbeitende UTF-8 codierte JSON-Text.</param>
        <param name="isFinalBlock"><see langword="true" />, wenn die Eingabesequenz die gesamten zu verarbeitenden Daten enthält. <see langword="false" />, nur wenn bekannt ist, dass der Eingabebereich Teildaten enthält, auf die weitere Daten folgen.</param>
        <param name="state">Wenn dies der erste Aufruf des Konstruktors ist, übergeben Sie einen Standardzustand. Andernfalls erfassen Sie den Zustand aus der vorherigen Instanz von <see cref="T:System.Text.Json.Utf8JsonReader" />, und geben Sie diesen zurück.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Text.Json.Utf8JsonReader" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

Da dieser Typ einer Referenzstruktur handelt, ist eine Art ausschließlich stapelbezogene, und alle Einschränkungen von referenzstrukturen darauf anwenden.
Dies ist der Grund, warum der Konstruktor akzeptiert, ein <xref:System.Text.Json.JsonReaderState>.

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonReader (ReadOnlySpan&lt;byte&gt; jsonData, bool isFinalBlock, System.Text.Json.JsonReaderState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; jsonData, bool isFinalBlock, valuetype System.Text.Json.JsonReaderState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (jsonData As ReadOnlySpan(Of Byte), isFinalBlock As Boolean, state As JsonReaderState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Utf8JsonReader(ReadOnlySpan&lt;System::Byte&gt; jsonData, bool isFinalBlock, System::Text::Json::JsonReaderState state);" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonReader : ReadOnlySpan&lt;byte&gt; * bool * System.Text.Json.JsonReaderState -&gt; System.Text.Json.Utf8JsonReader" Usage="new System.Text.Json.Utf8JsonReader (jsonData, isFinalBlock, state)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="jsonData" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="isFinalBlock" Type="System.Boolean" />
        <Parameter Name="state" Type="System.Text.Json.JsonReaderState" />
      </Parameters>
      <Docs>
        <param name="jsonData">Der zu verarbeitende UTF-8 codierte JSON-Text.</param>
        <param name="isFinalBlock"><see langword="true" />, wenn der Eingabebereich die gesamten zu verarbeitenden Daten enthält. <see langword="false" />, nur wenn bekannt ist, dass der Eingabebereich Teildaten enthält, auf die weitere Daten folgen.</param>
        <param name="state">Eine Struktur, die den Readerzustand enthält. Beim ersten Aufruf des Konstruktors sollte sie einen Standardzustand wiederspiegeln. Andernfalls sollte der Zustand aus der vorherigen Instanz von <see cref="T:System.Text.Json.Utf8JsonReader" /> erfasst und zurückgegeben werden.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Text.Json.Utf8JsonReader" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

Da dieser Typ einer Referenzstruktur handelt, ist eine Art ausschließlich stapelbezogene, und alle Einschränkungen von referenzstrukturen darauf anwenden.
Dies ist der Grund, warum der Konstruktor akzeptiert, ein <xref:System.Text.Json.JsonReaderState>.

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BytesConsumed">
      <MemberSignature Language="C#" Value="public long BytesConsumed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 BytesConsumed" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.BytesConsumed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesConsumed As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long BytesConsumed { long get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesConsumed : int64" Usage="System.Text.Json.Utf8JsonReader.BytesConsumed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Gesamtzahl der Bytes ab, die bisher vom <see cref="T:System.Text.Json.Utf8JsonReader" /> für die aktuelle Instanz von <see cref="T:System.Text.Json.Utf8JsonReader" /> mit dem angegebenen UTF-8-codierten Eingabetext verwendet wurden.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentDepth">
      <MemberSignature Language="C#" Value="public int CurrentDepth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentDepth" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.CurrentDepth" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentDepth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentDepth { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDepth : int" Usage="System.Text.Json.Utf8JsonReader.CurrentDepth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Tiefe des aktuellen Tokens ab.</summary>
        <value>Die Tiefe des aktuellen Tokens.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

Die `CurrentDepth` Eigenschaft verfolgt die rekursive Tiefe der geschachtelten Objekte / arrays im JSON-Text, der bisher verarbeiteten.

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentState">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonReaderState CurrentState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonReaderState CurrentState" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.CurrentState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentState As JsonReaderState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonReaderState CurrentState { System::Text::Json::JsonReaderState get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentState : System.Text.Json.JsonReaderState" Usage="System.Text.Json.Utf8JsonReader.CurrentState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonReaderState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die aktuelle Momentaufnahme des Zustands von <see cref="T:System.Text.Json.Utf8JsonReader" /> ab, der vom Aufrufer erfasst und an den <see cref="T:System.Text.Json.Utf8JsonReader" />-Konstruktor mit weiteren Daten zurückgegeben werden muss.</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

Im Gegensatz zu den <xref:System.Text.Json.Utf8JsonReader>, d.h. ein Ref Struct, der Status "Async/await" hinweg überstehen kann und daher ist dieser Typ erforderlich, um mehr Daten lesen, asynchron, bevor Sie eine neue Instanz der fortsetzen unterstützen die <xref:System.Text.Json.Utf8JsonReader>.

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBoolean">
      <MemberSignature Language="C#" Value="public bool GetBoolean ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetBoolean() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetBoolean" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBoolean () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetBoolean();" />
      <MemberSignature Language="F#" Value="member this.GetBoolean : unit -&gt; bool" Usage="utf8JsonReader.GetBoolean " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Liest den nächsten JSON-Tokenwert aus der Quelle als einen <see cref="T:System.Boolean" />-Wert.</summary>
        <returns><see langword="true" />, wenn <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> den Wert <see cref="F:System.Text.Json.JsonTokenType.True" /> hat. <see langword="false" />, wenn <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> den Wert <see cref="F:System.Text.Json.JsonTokenType.False" /> hat.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Der Wert des JSON-Tokens ist kein boolescher Wert (d.h. <see cref="F:System.Text.Json.JsonTokenType.True" /> oder <see cref="F:System.Text.Json.JsonTokenType.False" />).</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetBytesFromBase64">
      <MemberSignature Language="C#" Value="public byte[] GetBytesFromBase64 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] GetBytesFromBase64() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetBytesFromBase64" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBytesFromBase64 () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ GetBytesFromBase64();" />
      <MemberSignature Language="F#" Value="member this.GetBytesFromBase64 : unit -&gt; byte[]" Usage="utf8JsonReader.GetBytesFromBase64 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetComment">
      <MemberSignature Language="C#" Value="public string GetComment ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetComment() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetComment" />
      <MemberSignature Language="VB.NET" Value="Public Function GetComment () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetComment();" />
      <MemberSignature Language="F#" Value="member this.GetComment : unit -&gt; string" Usage="utf8JsonReader.GetComment " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDateTime">
      <MemberSignature Language="C#" Value="public DateTime GetDateTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime GetDateTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetDateTime" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTime () As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime GetDateTime();" />
      <MemberSignature Language="F#" Value="member this.GetDateTime : unit -&gt; DateTime" Usage="utf8JsonReader.GetDateTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Liest den nächsten JSON-Tokenwert aus der Quelle und analysiert ihn in einen <see cref="T:System.DateTime" />-Wert.</summary>
        <returns>Datum und Uhrzeit, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich analysiert werden kann.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Der Wert des JSON-Tokens ist kein <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
        <exception cref="T:System.FormatException">Der Wert des JSON-Tokens liegt in einem nicht unterstützten Format vor. Nur eine Teilmenge der ISO 8601-Formate wird unterstützt.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeOffset">
      <MemberSignature Language="C#" Value="public DateTimeOffset GetDateTimeOffset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset GetDateTimeOffset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetDateTimeOffset" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeOffset () As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset GetDateTimeOffset();" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeOffset : unit -&gt; DateTimeOffset" Usage="utf8JsonReader.GetDateTimeOffset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Liest den nächsten JSON-Tokenwert aus der Quelle und analysiert ihn in einen <see cref="T:System.DateTimeOffset" />-Wert.</summary>
        <returns>Datum und Uhrzeit, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich analysiert werden kann.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Der Wert des JSON-Tokens ist kein <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
        <exception cref="T:System.FormatException">Der Wert des JSON-Tokens liegt in einem nicht unterstützten Format vor. Nur eine Teilmenge der ISO 8601-Formate wird unterstützt.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetDecimal">
      <MemberSignature Language="C#" Value="public decimal GetDecimal ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Decimal GetDecimal() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetDecimal" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDecimal () As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Decimal GetDecimal();" />
      <MemberSignature Language="F#" Value="member this.GetDecimal : unit -&gt; decimal" Usage="utf8JsonReader.GetDecimal " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Liest den nächsten JSON-Tokenwert aus der Quelle und analysiert ihn in einen <see cref="T:System.Decimal" />-Wert.</summary>
        <returns>Der in einen <see cref="T:System.Decimal" />-Wert analysierte UTF-8 codierte Tokenwert.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

Die `GetDecimal` Methode löst eine Ausnahme aus, wenn der gesamten UTF-8 codierte Wert für vorlagentoken kann nicht analysiert werden, um eine <xref:System.Decimal> Wert.

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</exception>
        <exception cref="T:System.FormatException">Der JSON-Tokenwert stellt eine Zahl dar, die kleiner als <see cref="F:System.Decimal.MinValue" /> oder größer als <see cref="F:System.Decimal.MaxValue" /> ist.</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetDouble">
      <MemberSignature Language="C#" Value="public double GetDouble ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 GetDouble() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetDouble" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDouble () As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GetDouble();" />
      <MemberSignature Language="F#" Value="member this.GetDouble : unit -&gt; double" Usage="utf8JsonReader.GetDouble " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Liest den nächsten JSON-Tokenwert aus der Quelle und analysiert ihn in einen <see cref="T:System.Double" />-Wert.</summary>
        <returns>Der in einen <see cref="T:System.Double" />-Wert analysierte UTF-8 codierte Tokenwert.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

Die `GetDouble` Methode löst eine Ausnahme aus, wenn der gesamten UTF-8 codierte Wert für vorlagentoken kann nicht analysiert werden, um eine <xref:System.Double> Wert.

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</exception>
        <exception cref="T:System.FormatException">Der JSON-Tokenwert stellt eine Zahl dar, die kleiner als <see cref="F:System.Double.MinValue" /> oder größer als <see cref="F:System.Double.MaxValue" /> ist.</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetGuid">
      <MemberSignature Language="C#" Value="public Guid GetGuid ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Guid GetGuid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetGuid" />
      <MemberSignature Language="VB.NET" Value="Public Function GetGuid () As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Guid GetGuid();" />
      <MemberSignature Language="F#" Value="member this.GetGuid : unit -&gt; Guid" Usage="utf8JsonReader.GetGuid " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Liest den nächsten JSON-Tokenwert aus der Quelle und analysiert ihn in einen <see cref="T:System.Guid" />-Wert.</summary>
        <returns>Der GUID-Wert, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich analysiert werden kann.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Der Wert des JSON-Tokens ist kein <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
        <exception cref="T:System.FormatException">Der Wert des JSON-Tokens liegt in einem für eine GUID nicht unterstützten Format vor.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetInt32">
      <MemberSignature Language="C#" Value="public int GetInt32 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetInt32() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetInt32" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInt32 () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetInt32();" />
      <MemberSignature Language="F#" Value="member this.GetInt32 : unit -&gt; int" Usage="utf8JsonReader.GetInt32 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Liest den nächsten JSON-Tokenwert aus der Quelle und analysiert ihn in einen <see cref="T:System.Int32" />-Wert.</summary>
        <returns>Der in einen <see cref="T:System.Int32" />-Wert analysierte UTF-8 codierte Tokenwert.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

Die `GetInt32` Methode löst eine Ausnahme aus, wenn der gesamten UTF-8 codierte Wert für vorlagentoken kann nicht analysiert werden, um eine <xref:System.Int32> Wert.

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</exception>
        <exception cref="T:System.FormatException">Der JSON-Tokenwert hat das falsche numerische Format. Er enthält z.B. eine Dezimalzahl oder ist in wissenschaftlicher Schreibweise geschrieben.
            
- oder -

Der JSON-Tokenwert stellt eine Zahl dar, die kleiner als <see cref="F:System.Int32.MinValue" /> oder größer als <see cref="F:System.Int32.MaxValue" /> ist.</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetInt64">
      <MemberSignature Language="C#" Value="public long GetInt64 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 GetInt64() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetInt64" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInt64 () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long GetInt64();" />
      <MemberSignature Language="F#" Value="member this.GetInt64 : unit -&gt; int64" Usage="utf8JsonReader.GetInt64 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Liest den nächsten JSON-Tokenwert aus der Quelle und analysiert ihn in einen <see cref="T:System.Int64" />-Wert.</summary>
        <returns>Der in einen <see cref="T:System.Int64" />-Wert analysierte UTF-8 codierte Tokenwert.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

Die `GetInt64` Methode löst eine Ausnahme aus, wenn der gesamten UTF-8 codierte Wert für vorlagentoken kann nicht analysiert werden, um eine <xref:System.Int64> Wert.

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</exception>
        <exception cref="T:System.FormatException">Der JSON-Tokenwert hat das falsche numerische Format. Er enthält z.B. eine Dezimalzahl oder ist in wissenschaftlicher Schreibweise geschrieben.
            
- oder -

Der JSON-Tokenwert stellt eine Zahl dar, die kleiner als <see cref="F:System.Int64.MinValue" /> oder größer als <see cref="F:System.Int64.MaxValue" /> ist.</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetSingle">
      <MemberSignature Language="C#" Value="public float GetSingle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float32 GetSingle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetSingle" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSingle () As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; float GetSingle();" />
      <MemberSignature Language="F#" Value="member this.GetSingle : unit -&gt; single" Usage="utf8JsonReader.GetSingle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Liest den nächsten JSON-Tokenwert aus der Quelle und analysiert ihn in einen <see cref="T:System.Single" />-Wert.</summary>
        <returns>Der in einen <see cref="T:System.Single" />-Wert analysierte UTF-8 codierte Tokenwert.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

Die `GetSingle` Methode löst eine Ausnahme aus, wenn der gesamten UTF-8 codierte Wert für vorlagentoken kann nicht analysiert werden, um eine <xref:System.Single> Wert.

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</exception>
        <exception cref="T:System.FormatException">Der JSON-Tokenwert stellt eine Zahl dar, die kleiner als <see cref="F:System.Single.MinValue" /> oder größer als <see cref="F:System.Single.MaxValue" /> ist.</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public string GetString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetString" />
      <MemberSignature Language="VB.NET" Value="Public Function GetString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetString();" />
      <MemberSignature Language="F#" Value="member this.GetString : unit -&gt; string" Usage="utf8JsonReader.GetString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Liest den nächsten JSON-Tokenwert aus der Quelle, ohne Escapezeichen und als <see cref="T:System.String" />-Wert transcodiert.</summary>
        <returns>Der in einen <see cref="T:System.String" />-Wert analysierte Tokenwert.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Der JSON-Tokenwert ist keine Zeichenfolge (d.h. nicht <see cref="F:System.Text.Json.JsonTokenType.String" /> oder <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />).

- oder -

Die JSON-Zeichenfolge enthält ungültige UTF-8-Bytes oder ungültige UTF-16-Ersatzzeichen.</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetUInt32">
      <MemberSignature Language="C#" Value="public uint GetUInt32 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int32 GetUInt32() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetUInt32" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUInt32 () As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::UInt32 GetUInt32();" />
      <MemberSignature Language="F#" Value="member this.GetUInt32 : unit -&gt; uint32" Usage="utf8JsonReader.GetUInt32 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Liest den nächsten JSON-Tokenwert aus der Quelle und analysiert ihn in einen <see cref="T:System.UInt32" />-Wert.</summary>
        <returns>Der in einen <see cref="T:System.UInt32" />-Wert analysierte UTF-8 codierte Tokenwert.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</exception>
        <exception cref="T:System.FormatException">Der JSON-Tokenwert hat das falsche numerische Format. Er enthält z.B. eine Dezimalzahl oder ist in wissenschaftlicher Schreibweise geschrieben.
            
- oder -

Der JSON-Tokenwert stellt eine Zahl dar, die kleiner als <see cref="F:System.UInt32.MinValue" /> oder größer als <see cref="F:System.UInt32.MaxValue" /> ist.</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetUInt64">
      <MemberSignature Language="C#" Value="public ulong GetUInt64 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int64 GetUInt64() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetUInt64" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUInt64 () As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::UInt64 GetUInt64();" />
      <MemberSignature Language="F#" Value="member this.GetUInt64 : unit -&gt; uint64" Usage="utf8JsonReader.GetUInt64 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Liest den nächsten JSON-Tokenwert aus der Quelle und analysiert ihn in einen <see cref="T:System.UInt64" />-Wert.</summary>
        <returns>Der in einen <see cref="T:System.UInt64" />-Wert analysierte UTF-8 codierte Tokenwert.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</exception>
        <exception cref="T:System.FormatException">Der JSON-Tokenwert hat das falsche numerische Format. Er enthält z.B. eine Dezimalzahl oder ist in wissenschaftlicher Schreibweise geschrieben.
            
- oder -

Der JSON-Tokenwert stellt eine Zahl dar, die kleiner als <see cref="F:System.UInt64.MinValue" /> oder größer als <see cref="F:System.UInt64.MaxValue" /> ist.</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="HasValueSequence">
      <MemberSignature Language="C#" Value="public bool HasValueSequence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasValueSequence" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.HasValueSequence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasValueSequence As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasValueSequence { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasValueSequence : bool" Usage="System.Text.Json.Utf8JsonReader.HasValueSequence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert an, der angibt, welche <c>Value</c>-Eigenschaft zum Abrufen des Tokenwerts zu verwenden ist.</summary>
        <value><see langword="true" /> Wenn <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" /> sollte verwendet werden, um den Tokenwert zu erhalten. <see langword="false" /> Wenn <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" /> sollte stattdessen verwendet werden.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

Wenn `HasValueSequence` ist `false`, <xref:System.Text.Json.Utf8JsonReader.ValueSequence> ist leer. Aus diesem Grund lesen Sie den Tokenwert mithilfe der <xref:System.Text.Json.Utf8JsonReader.ValueSpan> Eigenschaft.

Für die Eingabedaten in einem `ReadOnlySpan<byte>`wird in diesem gibt immer `false`. Für die Eingabedaten in einem `ReadOnlySequence<byte>`, dies nur zurück `true` Wenn der Wert für vorlagentoken umspannt mehr als ein einzelnes segment und kann daher nicht als eine Spanne dargestellt werden.

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFinalBlock">
      <MemberSignature Language="C#" Value="public bool IsFinalBlock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFinalBlock" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.IsFinalBlock" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFinalBlock As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFinalBlock { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFinalBlock : bool" Usage="System.Text.Json.Utf8JsonReader.IsFinalBlock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public SequencePosition Position { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.SequencePosition Position" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.Position" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Position As SequencePosition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property SequencePosition Position { SequencePosition get(); };" />
      <MemberSignature Language="F#" Value="member this.Position : SequencePosition" Usage="System.Text.Json.Utf8JsonReader.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SequencePosition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die aktuelle <see cref="T:System.SequencePosition" /> innerhalb des bereitgestellten UTF-8-codierten ReadOnlySequence&lt;Byte&gt; der Eingabe oder einen <see cref="T:System.SequencePosition" />-Standardwert ab, wenn die <see cref="T:System.Text.Json.Utf8JsonReader" />-Struktur mit einem ReadOnlySpan&lt;Byte&gt; erstellt wurde.</summary>
        <value>Die aktuelle <see cref="T:System.SequencePosition" /> Geben Sie in der bereitgestellten UTF-8 codierte ReadOnlySequence&lt;Byte&gt; oder einen Standardwert <see cref="T:System.SequencePosition" /> Wenn die <see cref="T:System.Text.Json.Utf8JsonReader" /> Struktur erstellt wurde, mit der ein ReadOnlySpan&lt;Byte&gt;.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public bool Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.Read" />
      <MemberSignature Language="VB.NET" Value="Public Function Read () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Read();" />
      <MemberSignature Language="F#" Value="member this.Read : unit -&gt; bool" Usage="utf8JsonReader.Read " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Lesen des nächsten JSON-Tokens aus der Eingabequelle.</summary>
        <returns><see langword="false" />, wenn das Token erfolgreich gelesen wurde, andernfalls <see langword="true" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.Json.JsonReaderException">Es wurde ein ungültiges JSON-Token gefunden.
            
- oder -

Die aktuelle Tiefe übersteigt den rekursiven Grenzwert, der durch die maximale Tiefe festgelegt ist.</exception>
        <exception cref="T:System.Text.Json.JsonException">Ein gemäß JSON RFC ungültiges JSON-Token wurde festgestellt.
        
- oder -

Die aktuelle Tiefe übersteigt den rekursiven Grenzwert, der durch die maximale Tiefe festgelegt ist.</exception>
      </Docs>
    </Member>
    <Member MemberName="Skip">
      <MemberSignature Language="C#" Value="public void Skip ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Skip() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.Skip" />
      <MemberSignature Language="VB.NET" Value="Public Sub Skip ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Skip();" />
      <MemberSignature Language="F#" Value="member this.Skip : unit -&gt; unit" Usage="utf8JsonReader.Skip " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextEquals">
      <MemberSignature Language="C#" Value="public bool TextEquals (ReadOnlySpan&lt;byte&gt; otherUtf8Text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TextEquals(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; otherUtf8Text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TextEquals(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Function TextEquals (otherUtf8Text As ReadOnlySpan(Of Byte)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TextEquals(ReadOnlySpan&lt;System::Byte&gt; otherUtf8Text);" />
      <MemberSignature Language="F#" Value="member this.TextEquals : ReadOnlySpan&lt;byte&gt; -&gt; bool" Usage="utf8JsonReader.TextEquals otherUtf8Text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherUtf8Text" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="otherUtf8Text">Der UTF-8-codierte Text für den Vergleich.</param>
        <summary>Vergleicht den UTF-8-codierten Text mit dem JSON-Tokenwert ohne Escapezeichen in der Quelle und gibt <see langword="true" /> zurück, wenn sie übereinstimmen.</summary>
        <returns><see langword="true" />, wenn der JSON-Tokenwert in der Quelle mit dem UTF-8-codierten Suchtext übereinstimmt; andernfalls <see langword="false" />.</returns>
        <remarks>
          <format><![CDATA[
          
Die Methode gibt zurück, wenn die suchen Text ungültige UTF-8-Text ist, `false` da Sie ungültige UTF-8 in der JSON-Nutzlast haben können.

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Das JSON-Token ist keine Zeichenfolge (d.h., sein Typ ist nicht <see cref="F:System.Text.Json.JsonTokenType.String" /> oder <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />).</exception>
      </Docs>
    </Member>
    <Member MemberName="TextEquals">
      <MemberSignature Language="C#" Value="public bool TextEquals (ReadOnlySpan&lt;char&gt; otherText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TextEquals(valuetype System.ReadOnlySpan`1&lt;char&gt; otherText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TextEquals(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Function TextEquals (otherText As ReadOnlySpan(Of Char)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TextEquals(ReadOnlySpan&lt;char&gt; otherText);" />
      <MemberSignature Language="F#" Value="member this.TextEquals : ReadOnlySpan&lt;char&gt; -&gt; bool" Usage="utf8JsonReader.TextEquals otherText" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherText" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="otherText">Der UTF-16-codierte Text für den Vergleich.</param>
        <summary>Vergleicht den UTF-16-codierten Text mit dem JSON-Tokenwert ohne Escapezeichen in der Quelle und gibt „True“ zurück, wenn sie übereinstimmen.</summary>
        <returns><see langword="true" />, wenn der JSON-Tokenwert in der Quelle mit dem UTF-16-codierten Suchtext übereinstimmt; andernfalls <see langword="false" />.</returns>
        <remarks>
          <format><![CDATA[
          
Die Methode gibt zurück, wenn die suchen Text ungültig oder unvollständig UTF-16-Text (z. B. Ersatzzeichen) ist, `false` da dürfen sich nicht in der JSON-Nutzlast ungültige UTF-16.
            
            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Der JSON-Text ist keine Zeichenfolge (sein Typ ist nicht <see cref="F:System.Text.Json.JsonTokenType.String" /> oder <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />).</exception>
      </Docs>
    </Member>
    <Member MemberName="TokenStartIndex">
      <MemberSignature Language="C#" Value="public long TokenStartIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 TokenStartIndex" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.TokenStartIndex" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TokenStartIndex As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long TokenStartIndex { long get(); };" />
      <MemberSignature Language="F#" Value="member this.TokenStartIndex : int64" Usage="System.Text.Json.Utf8JsonReader.TokenStartIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenType">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonTokenType TokenType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonTokenType TokenType" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.TokenType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TokenType As JsonTokenType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonTokenType TokenType { System::Text::Json::JsonTokenType get(); };" />
      <MemberSignature Language="F#" Value="member this.TokenType : System.Text.Json.JsonTokenType" Usage="System.Text.Json.Utf8JsonReader.TokenType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonTokenType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Typ des zuletzt verarbeiteten JSON-Tokens im UTF-8-codierten JSON-Text ab.</summary>
        <value>Der Typ des letzten verarbeiteten JSON-Token.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetBytesFromBase64">
      <MemberSignature Language="C#" Value="public bool TryGetBytesFromBase64 (out byte[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetBytesFromBase64([out] unsigned int8[]&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetBytesFromBase64(System.Byte[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetBytesFromBase64 (ByRef value As Byte()) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetBytesFromBase64([Runtime::InteropServices::Out] cli::array &lt;System::Byte&gt; ^ % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetBytesFromBase64 :  -&gt; bool" Usage="utf8JsonReader.TryGetBytesFromBase64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte[]" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetDateTime">
      <MemberSignature Language="C#" Value="public bool TryGetDateTime (out DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetDateTime([out] valuetype System.DateTime&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetDateTime(System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetDateTime (ByRef value As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetDateTime([Runtime::InteropServices::Out] DateTime % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetDateTime :  -&gt; bool" Usage="utf8JsonReader.TryGetDateTime value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">Wenn diese Methode zurückgegeben wird, enthält sie den analysierten Wert.</param>
        <summary>Liest den nächsten JSON-Tokenwert aus der Quelle und analysiert ihn in einen <see cref="T:System.DateTime" />-Wert.</summary>
        <returns><see langword="true" />, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich in einen <see cref="T:System.DateTime" />-Wert analysiert werden kann, andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Der Wert des JSON-Tokens ist kein <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetDateTimeOffset">
      <MemberSignature Language="C#" Value="public bool TryGetDateTimeOffset (out DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetDateTimeOffset([out] valuetype System.DateTimeOffset&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetDateTimeOffset(System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetDateTimeOffset (ByRef value As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetDateTimeOffset([Runtime::InteropServices::Out] DateTimeOffset % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetDateTimeOffset :  -&gt; bool" Usage="utf8JsonReader.TryGetDateTimeOffset value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">Wenn diese Methode zurückgegeben wird, enthält sie den analysierten Wert.</param>
        <summary>Liest den nächsten JSON-Tokenwert aus der Quelle und analysiert ihn in einen <see cref="T:System.DateTimeOffset" />-Wert.</summary>
        <returns><see langword="true" />, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich in einen <see cref="T:System.DateTimeOffset" />-Wert analysiert werden kann, andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Der Wert des JSON-Tokens ist kein <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetDecimal">
      <MemberSignature Language="C#" Value="public bool TryGetDecimal (out decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetDecimal([out] valuetype System.Decimal&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetDecimal(System.Decimal@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetDecimal (ByRef value As Decimal) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetDecimal([Runtime::InteropServices::Out] System::Decimal % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetDecimal :  -&gt; bool" Usage="utf8JsonReader.TryGetDecimal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">Wenn diese Methode zurückgegeben wird, enthält sie den analysierten Wert.</param>
        <summary>Liest den nächsten JSON-Tokenwert aus der Quelle und analysiert ihn in einen <see cref="T:System.Decimal" />-Wert.</summary>
        <returns><see langword="true" />, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich in einen <see cref="T:System.Decimal" />-Wert analysiert werden kann, andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetDouble">
      <MemberSignature Language="C#" Value="public bool TryGetDouble (out double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetDouble([out] float64&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetDouble(System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetDouble (ByRef value As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetDouble([Runtime::InteropServices::Out] double % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetDouble :  -&gt; bool" Usage="utf8JsonReader.TryGetDouble value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">Wenn diese Methode zurückgegeben wird, enthält sie den analysierten Wert.</param>
        <summary>Liest den nächsten JSON-Tokenwert aus der Quelle und analysiert ihn in einen <see cref="T:System.Double" />-Wert.</summary>
        <returns><see langword="true" />, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich in einen <see cref="T:System.Double" />-Wert analysiert werden kann, andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetGuid">
      <MemberSignature Language="C#" Value="public bool TryGetGuid (out Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetGuid([out] valuetype System.Guid&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetGuid(System.Guid@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetGuid (ByRef value As Guid) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetGuid([Runtime::InteropServices::Out] Guid % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetGuid :  -&gt; bool" Usage="utf8JsonReader.TryGetGuid value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Guid" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">Wenn diese Methode zurückgegeben wird, enthält sie den analysierten Wert.</param>
        <summary>Liest den nächsten JSON-Tokenwert aus der Quelle und analysiert ihn in einen <see cref="T:System.Guid" />-Wert.</summary>
        <returns><see langword="true" />, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich in einen <see cref="T:System.Guid" />-Wert analysiert werden kann, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

Diese Methode nur analysiert <xref:System.Guid> Werte mit Bindestrichen und ohne umgebenden Ergänzungen. 

         ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Der Wert des JSON-Tokens ist kein <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetInt32">
      <MemberSignature Language="C#" Value="public bool TryGetInt32 (out int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetInt32([out] int32&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetInt32(System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetInt32 (ByRef value As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetInt32([Runtime::InteropServices::Out] int % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetInt32 :  -&gt; bool" Usage="utf8JsonReader.TryGetInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">Wenn diese Methode zurückgegeben wird, enthält sie den analysierten Wert.</param>
        <summary>Liest den nächsten JSON-Tokenwert aus der Quelle und analysiert ihn in einen <see cref="T:System.Int32" />-Wert.</summary>
        <returns><see langword="true" />, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich in einen <see cref="T:System.Int32" />-Wert analysiert werden kann, andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetInt64">
      <MemberSignature Language="C#" Value="public bool TryGetInt64 (out long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetInt64([out] int64&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetInt64(System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetInt64 (ByRef value As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetInt64([Runtime::InteropServices::Out] long % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetInt64 :  -&gt; bool" Usage="utf8JsonReader.TryGetInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">Wenn diese Methode zurückgegeben wird, enthält sie den analysierten Wert.</param>
        <summary>Liest den nächsten JSON-Tokenwert aus der Quelle und analysiert ihn in einen <see cref="T:System.Int64" />-Wert.</summary>
        <returns><see langword="true" />, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich in einen <see cref="T:System.Int64" />-Wert analysiert werden kann, andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetSingle">
      <MemberSignature Language="C#" Value="public bool TryGetSingle (out float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetSingle([out] float32&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetSingle(System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetSingle (ByRef value As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetSingle([Runtime::InteropServices::Out] float % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetSingle :  -&gt; bool" Usage="utf8JsonReader.TryGetSingle value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">Wenn diese Methode zurückgegeben wird, enthält sie den analysierten Wert.</param>
        <summary>Liest den nächsten JSON-Tokenwert aus der Quelle und analysiert ihn in einen <see cref="T:System.Single" />-Wert.</summary>
        <returns><see langword="true" />, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich in einen <see cref="T:System.Single" />-Wert analysiert werden kann, andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetUInt32">
      <MemberSignature Language="C#" Value="public bool TryGetUInt32 (out uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetUInt32([out] unsigned int32&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetUInt32(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetUInt32 (ByRef value As UInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetUInt32([Runtime::InteropServices::Out] System::UInt32 % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetUInt32 :  -&gt; bool" Usage="utf8JsonReader.TryGetUInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">Wenn diese Methode zurückgegeben wird, enthält sie den analysierten Wert.</param>
        <summary>Liest den nächsten JSON-Tokenwert aus der Quelle und analysiert ihn in einen <see cref="T:System.UInt32" />-Wert.</summary>
        <returns><see langword="true" />, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich in einen <see cref="T:System.UInt32" />-Wert analysiert werden kann, andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetUInt64">
      <MemberSignature Language="C#" Value="public bool TryGetUInt64 (out ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetUInt64([out] unsigned int64&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetUInt64(System.UInt64@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetUInt64 (ByRef value As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetUInt64([Runtime::InteropServices::Out] System::UInt64 % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetUInt64 :  -&gt; bool" Usage="utf8JsonReader.TryGetUInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">Wenn diese Methode zurückgegeben wird, enthält sie den analysierten Wert.</param>
        <summary>Liest den nächsten JSON-Tokenwert aus der Quelle und analysiert ihn in einen <see cref="T:System.UInt64" />-Wert.</summary>
        <returns><see langword="true" />, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich in einen <see cref="T:System.UInt64" />-Wert analysiert werden kann, andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TrySkip">
      <MemberSignature Language="C#" Value="public bool TrySkip ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TrySkip() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TrySkip" />
      <MemberSignature Language="VB.NET" Value="Public Function TrySkip () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TrySkip();" />
      <MemberSignature Language="F#" Value="member this.TrySkip : unit -&gt; bool" Usage="utf8JsonReader.TrySkip " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueSequence">
      <MemberSignature Language="C#" Value="public System.Buffers.ReadOnlySequence&lt;byte&gt; ValueSequence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Buffers.ReadOnlySequence`1&lt;unsigned int8&gt; ValueSequence" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.ValueSequence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValueSequence As ReadOnlySequence(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Buffers::ReadOnlySequence&lt;System::Byte&gt; ValueSequence { System::Buffers::ReadOnlySequence&lt;System::Byte&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.ValueSequence : System.Buffers.ReadOnlySequence&lt;byte&gt;" Usage="System.Text.Json.Utf8JsonReader.ValueSequence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.ReadOnlySequence&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Wert des zuletzt verarbeiteten Tokens als einen ReadOnlySpan&lt;Byte&gt;-Slice der Eingabenutzlast ab. Wenn der JSON-Code innerhalb eines ReadOnlySequence&lt;Byte&gt; bereitgestellt wird und der Slice, der den Tokenwert darstellt, in ein einzelnes Segment passt, enthält <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" /> den Slicewert, da es als ein Bereich dargestellt werden kann.
Andernfalls enthält <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" /> den Tokenwert.</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks


Wenn <xref:System.Text.Json.Utf8JsonReader.HasValueSequence> ist `false`, `ValueSequence` ist leer. Aus diesem Grund nur Zugriff auf `ValueSequence` Wenn <xref:System.Text.Json.Utf8JsonReader.HasValueSequence> ist `true`.
Andernfalls muss der Tokenwert aus zugegriffen werden <xref:System.Text.Json.Utf8JsonReader.ValueSpan>.

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueSpan">
      <MemberSignature Language="C#" Value="public ReadOnlySpan&lt;byte&gt; ValueSpan { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; ValueSpan" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.ValueSpan" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValueSpan As ReadOnlySpan(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property ReadOnlySpan&lt;System::Byte&gt; ValueSpan { ReadOnlySpan&lt;System::Byte&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.ValueSpan : ReadOnlySpan&lt;byte&gt;" Usage="System.Text.Json.Utf8JsonReader.ValueSpan" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Wert des zuletzt verarbeiteten Tokens als einen ReadOnlySpan&lt;Byte&gt;-Slice der Eingabenutzlast ab. Wenn der JSON-Code innerhalb eines ReadOnlySequence&lt;Byte&gt; bereitgestellt wird und der Slice, der den Tokenwert darstellt, in ein einzelnes Segment passt, enthält <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" /> den Slicewert, da es als ein Bereich dargestellt werden kann.
Andernfalls enthält <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" /> den Tokenwert.</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

Wenn <xref:System.Text.Json.Utf8JsonReader.HasValueSequence> ist `true`, <xref:System.Text.Json.Utf8JsonReader.ValueSpan> ist leer. Aus diesem Grund nur Zugriff auf `ValueSpan` Wenn <xref:System.Text.Json.Utf8JsonReader.HasValueSequence> ist `false`.
Andernfalls muss der Tokenwert aus zugegriffen werden <xref:System.Text.Json.Utf8JsonReader.ValueSequence>.

 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
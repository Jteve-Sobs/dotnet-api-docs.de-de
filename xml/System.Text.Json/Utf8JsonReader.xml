<Type Name="Utf8JsonReader" FullName="System.Text.Json.Utf8JsonReader">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7e3de822fc6bc069344292addd24eba53fba3652" /><Meta Name="ms.sourcegitcommit" Value="252460010cd20c7b0dab38785e7164d932fa2768" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/30/2019" /><Meta Name="ms.locfileid" Value="70170018" /></Metadata><TypeSignature Language="C#" Value="public struct Utf8JsonReader" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit Utf8JsonReader extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.Utf8JsonReader" />
  <TypeSignature Language="VB.NET" Value="Public Structure Utf8JsonReader" />
  <TypeSignature Language="C++ CLI" Value="public value class Utf8JsonReader" />
  <TypeSignature Language="F#" Value="type Utf8JsonReader = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="760be-101">Stellt eine leistungsstarke API für schreibgeschützten Zugriff auf UTF-8-codierten JSON-Text in Vorwärtsrichtung bereit.</span><span class="sxs-lookup"><span data-stu-id="760be-101">Provides a high-performance API for forward-only, read-only access to UTF-8 encoded JSON text.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="760be-102">`Utf8JsonReader`verarbeitet den Text sequenziell ohne Zwischenspeichern und entspricht standardmäßig strikt der [JSON-RFC](https://tools.ietf.org/html/rfc8259).</span><span class="sxs-lookup"><span data-stu-id="760be-102">`Utf8JsonReader` processes the text sequentially with no caching and by default adheres strictly to the [JSON RFC](https://tools.ietf.org/html/rfc8259).</span></span>

<span data-ttu-id="760be-103">Wenn `Utf8JsonReader` ein ungültiges JSON-Zeichen gefunden <xref:System.Text.Json.JsonException> wird, löst es eine mit grundlegenden Fehlerinformationen wie Zeilennummer und Byte Position in der Zeile aus.</span><span class="sxs-lookup"><span data-stu-id="760be-103">When `Utf8JsonReader` encounters invalid JSON, it throws a <xref:System.Text.Json.JsonException> with basic error information like line number and byte position on the line.</span></span>

<span data-ttu-id="760be-104">Da dieser Typ eine Ref-Struktur ist, wird Async nicht direkt unterstützt.</span><span class="sxs-lookup"><span data-stu-id="760be-104">Since this type is a ref struct, it doesn't directly support async.</span></span> <span data-ttu-id="760be-105">Es bietet jedoch Unterstützung für den erneuten eintreten zum Lesen unvollständiger Daten und zum weiteren lesen, wenn weitere Daten angezeigt werden.</span><span class="sxs-lookup"><span data-stu-id="760be-105">However, it does provide support for reentrancy to read incomplete data and to continue reading once more data is presented.</span></span>

<span data-ttu-id="760be-106">Um die maximale Tiefe beim Lesen oder Zulassen von Kommentaren festlegen zu können, erstellen Sie eine Instanz von <xref:System.Text.Json.JsonReaderState> , und übergeben Sie Sie an den Reader.</span><span class="sxs-lookup"><span data-stu-id="760be-106">To be able to set max depth while reading OR allow skipping comments, create an instance of <xref:System.Text.Json.JsonReaderState> and pass it to the reader.</span></span>

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonReader (System.Buffers.ReadOnlySequence&lt;byte&gt; jsonData, System.Text.Json.JsonReaderOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Buffers.ReadOnlySequence`1&lt;unsigned int8&gt; jsonData, valuetype System.Text.Json.JsonReaderOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonReaderOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (jsonData As ReadOnlySequence(Of Byte), Optional options As JsonReaderOptions = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonReader : System.Buffers.ReadOnlySequence&lt;byte&gt; * System.Text.Json.JsonReaderOptions -&gt; System.Text.Json.Utf8JsonReader" Usage="new System.Text.Json.Utf8JsonReader (jsonData, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="jsonData" Type="System.Buffers.ReadOnlySequence&lt;System.Byte&gt;" />
        <Parameter Name="options" Type="System.Text.Json.JsonReaderOptions" />
      </Parameters>
      <Docs>
        <param name="jsonData"><span data-ttu-id="760be-107">Der zu verarbeitende UTF-8 codierte JSON-Text.</span><span class="sxs-lookup"><span data-stu-id="760be-107">The UTF-8 encoded JSON text to process.</span></span></param>
        <param name="options"><span data-ttu-id="760be-108">Ein Objekt, mit dem das benutzerdefinierte Verhalten für das <see cref="T:System.Text.Json.Utf8JsonReader" />-Element definiert wird, das sich vom JSON RFC unterscheidet (z. B. die Handhabung von Kommentaren oder die maximal zulässige Tiefe beim Lesen).</span><span class="sxs-lookup"><span data-stu-id="760be-108">An object that defines customized behavior of the <see cref="T:System.Text.Json.Utf8JsonReader" /> that differs from the JSON RFC (for example how to handle comments or maximum depth allowed when reading).</span></span> <span data-ttu-id="760be-109">In der Standardeinstellung folgt <see cref="T:System.Text.Json.Utf8JsonReader" /> streng dem JSON RFC. Kommentare im JSON-Code sind ungültig, und die maximale Tiefe beträgt 64.</span><span class="sxs-lookup"><span data-stu-id="760be-109">By default, the <see cref="T:System.Text.Json.Utf8JsonReader" /> follows the JSON RFC strictly; comments within the JSON are invalid, and the maximum depth is 64.</span></span></param>
        <summary><span data-ttu-id="760be-110">Initialisiert eine neue Instanz der <see cref="T:System.Text.Json.Utf8JsonReader" />-Struktur, mit der eine schreibgeschützte Sequenz mit UTF-8-codiertem Text verarbeitet wird, indem die angegebenen Optionen verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="760be-110">Initializes a new instance of the <see cref="T:System.Text.Json.Utf8JsonReader" /> structure that processes a read-only sequence of UTF-8 encoded text using the specified options.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="760be-111">Da dieser Typ eine Ref-Struktur ist, handelt es sich um einen reinen Stapel Datentyp, und alle Einschränkungen von Verweis Strukturen gelten für ihn.</span><span class="sxs-lookup"><span data-stu-id="760be-111">Since this type is a ref struct, it is a stack-only type, and all the limitations of ref structs apply to it.</span></span>

<span data-ttu-id="760be-112">Dieser Konstruktor geht davon aus, dass die gesamte JSON- `jsonData`Nutzlast in enthalten ist, <xref:System.Text.Json.Utf8JsonReader.IsFinalBlock?displayProperty=nameWithType>und  =  `true`entspricht.</span><span class="sxs-lookup"><span data-stu-id="760be-112">This constructor assumes that the entire JSON payload is contained in `jsonData`; it is equivalent to <xref:System.Text.Json.Utf8JsonReader.IsFinalBlock?displayProperty=nameWithType> = `true`.</span></span>
              
          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonReader (ReadOnlySpan&lt;byte&gt; jsonData, System.Text.Json.JsonReaderOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; jsonData, valuetype System.Text.Json.JsonReaderOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonReaderOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (jsonData As ReadOnlySpan(Of Byte), Optional options As JsonReaderOptions = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonReader : ReadOnlySpan&lt;byte&gt; * System.Text.Json.JsonReaderOptions -&gt; System.Text.Json.Utf8JsonReader" Usage="new System.Text.Json.Utf8JsonReader (jsonData, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="jsonData" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="options" Type="System.Text.Json.JsonReaderOptions" />
      </Parameters>
      <Docs>
        <param name="jsonData"><span data-ttu-id="760be-113">Der zu verarbeitende UTF-8 codierte JSON-Text.</span><span class="sxs-lookup"><span data-stu-id="760be-113">The UTF-8 encoded JSON text to process.</span></span></param>
        <param name="options"><span data-ttu-id="760be-114">Ein Objekt, mit dem das benutzerdefinierte Verhalten für das <see cref="T:System.Text.Json.Utf8JsonReader" />-Element definiert wird, das sich vom JSON RFC unterscheidet (z. B. die Handhabung von Kommentaren oder die maximal zulässige Tiefe beim Lesen).</span><span class="sxs-lookup"><span data-stu-id="760be-114">An object that defines customized behavior of the <see cref="T:System.Text.Json.Utf8JsonReader" /> that differs from the JSON RFC (for example how to handle comments or maximum depth allowed when reading).</span></span> <span data-ttu-id="760be-115">In der Standardeinstellung folgt <see cref="T:System.Text.Json.Utf8JsonReader" /> streng dem JSON RFC. Kommentare im JSON-Code sind ungültig, und die maximale Tiefe beträgt 64.</span><span class="sxs-lookup"><span data-stu-id="760be-115">By default, the <see cref="T:System.Text.Json.Utf8JsonReader" /> follows the JSON RFC strictly; comments within the JSON are invalid, and the maximum depth is 64.</span></span></param>
        <summary><span data-ttu-id="760be-116">Initialisiert eine neue Instanz der <see cref="T:System.Text.Json.Utf8JsonReader" />-Struktur, mit der ein schreibgeschützter Bereich mit UTF-8-codiertem Text verarbeitet wird, indem die angegebenen Optionen verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="760be-116">Initializes a new instance of the <see cref="T:System.Text.Json.Utf8JsonReader" /> structure that processes a read-only span of UTF-8 encoded text using the specified options.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="760be-117">Da dieser Typ eine Ref-Struktur ist, handelt es sich um einen reinen Stapel Datentyp, und alle Einschränkungen von Verweis Strukturen gelten für ihn.</span><span class="sxs-lookup"><span data-stu-id="760be-117">Since this type is a ref struct, it is a stack-only type, and all the limitations of ref structs apply to it.</span></span>

<span data-ttu-id="760be-118">Dieser Konstruktor geht davon aus, dass die gesamte JSON- `jsonData`Nutzlast in enthalten ist, <xref:System.Text.Json.Utf8JsonReader.IsFinalBlock?displayProperty=nameWithType>und  =  `true`entspricht.</span><span class="sxs-lookup"><span data-stu-id="760be-118">This constructor assumes that the entire JSON payload is contained in `jsonData`; it is equivalent to <xref:System.Text.Json.Utf8JsonReader.IsFinalBlock?displayProperty=nameWithType> = `true`.</span></span>
              
          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonReader (System.Buffers.ReadOnlySequence&lt;byte&gt; jsonData, bool isFinalBlock, System.Text.Json.JsonReaderState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Buffers.ReadOnlySequence`1&lt;unsigned int8&gt; jsonData, bool isFinalBlock, valuetype System.Text.Json.JsonReaderState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (jsonData As ReadOnlySequence(Of Byte), isFinalBlock As Boolean, state As JsonReaderState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Utf8JsonReader(System::Buffers::ReadOnlySequence&lt;System::Byte&gt; jsonData, bool isFinalBlock, System::Text::Json::JsonReaderState state);" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonReader : System.Buffers.ReadOnlySequence&lt;byte&gt; * bool * System.Text.Json.JsonReaderState -&gt; System.Text.Json.Utf8JsonReader" Usage="new System.Text.Json.Utf8JsonReader (jsonData, isFinalBlock, state)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="jsonData" Type="System.Buffers.ReadOnlySequence&lt;System.Byte&gt;" />
        <Parameter Name="isFinalBlock" Type="System.Boolean" />
        <Parameter Name="state" Type="System.Text.Json.JsonReaderState" />
      </Parameters>
      <Docs>
        <param name="jsonData"><span data-ttu-id="760be-119">Der zu verarbeitende UTF-8 codierte JSON-Text.</span><span class="sxs-lookup"><span data-stu-id="760be-119">The UTF-8 encoded JSON text to process.</span></span></param>
        <param name="isFinalBlock"><span data-ttu-id="760be-120"><see langword="true" />, wenn die Eingabesequenz die gesamten zu verarbeitenden Daten enthält. <see langword="false" />, wenn der Eingabebereich nur einen Teil der Daten enthält und weitere Daten später folgen.</span><span class="sxs-lookup"><span data-stu-id="760be-120"><see langword="true" /> if the input sequence contains the entire data to process; <see langword="false" /> only the input span contains partial data with more data to follow.</span></span></param>
        <param name="state"><span data-ttu-id="760be-121">Ein Objekt, das den Readerzustand enthält.</span><span class="sxs-lookup"><span data-stu-id="760be-121">An object that contains the reader state.</span></span> <span data-ttu-id="760be-122">Wenn dies der erste Aufruf des Konstruktors ist, übergeben Sie einen Standardzustand.</span><span class="sxs-lookup"><span data-stu-id="760be-122">If this is the first call to the constructor, pass in a default state.</span></span> <span data-ttu-id="760be-123">Andernfalls erfassen Sie den Zustand aus der vorherigen Instanz von <see cref="T:System.Text.Json.Utf8JsonReader" />, und geben Sie diesen zurück.</span><span class="sxs-lookup"><span data-stu-id="760be-123">Otherwise, capture the state from the previous instance of the <see cref="T:System.Text.Json.Utf8JsonReader" /> and pass that back.</span></span></param>
        <summary><span data-ttu-id="760be-124">Initialisiert eine neue Instanz der <see cref="T:System.Text.Json.Utf8JsonReader" />-Struktur, mit der eine schreibgeschützte Sequenz mit UTF-8-codiertem Text verarbeitet und angegeben wird, ob die Eingabe den gesamten zu verarbeitenden Text enthält.</span><span class="sxs-lookup"><span data-stu-id="760be-124">Initializes a new instance of the <see cref="T:System.Text.Json.Utf8JsonReader" /> structure that processes a read-only sequence of UTF-8 encoded text and indicates whether the input contains all the text to process.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="760be-125">Da dieser Typ eine Ref-Struktur ist, handelt es sich um einen reinen Stapel Datentyp, und alle Einschränkungen von Verweis Strukturen gelten für ihn.</span><span class="sxs-lookup"><span data-stu-id="760be-125">Since this type is a ref struct, it is a stack-only type, and all the limitations of ref structs apply to it.</span></span>
<span data-ttu-id="760be-126">Dies ist der Grund, warum der Konstruktor eine <xref:System.Text.Json.JsonReaderState>akzeptiert.</span><span class="sxs-lookup"><span data-stu-id="760be-126">This is the reason why the constructor accepts a <xref:System.Text.Json.JsonReaderState>.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonReader (ReadOnlySpan&lt;byte&gt; jsonData, bool isFinalBlock, System.Text.Json.JsonReaderState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; jsonData, bool isFinalBlock, valuetype System.Text.Json.JsonReaderState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (jsonData As ReadOnlySpan(Of Byte), isFinalBlock As Boolean, state As JsonReaderState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Utf8JsonReader(ReadOnlySpan&lt;System::Byte&gt; jsonData, bool isFinalBlock, System::Text::Json::JsonReaderState state);" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonReader : ReadOnlySpan&lt;byte&gt; * bool * System.Text.Json.JsonReaderState -&gt; System.Text.Json.Utf8JsonReader" Usage="new System.Text.Json.Utf8JsonReader (jsonData, isFinalBlock, state)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="jsonData" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="isFinalBlock" Type="System.Boolean" />
        <Parameter Name="state" Type="System.Text.Json.JsonReaderState" />
      </Parameters>
      <Docs>
        <param name="jsonData"><span data-ttu-id="760be-127">Der zu verarbeitende UTF-8 codierte JSON-Text.</span><span class="sxs-lookup"><span data-stu-id="760be-127">The UTF-8 encoded JSON text to process.</span></span></param>
        <param name="isFinalBlock"><span data-ttu-id="760be-128"><see langword="true" />, wenn die Eingabesequenz die gesamten zu verarbeitenden Daten enthält. <see langword="false" />, wenn der Eingabebereich nur einen Teil der Daten enthält und weitere Daten später folgen.</span><span class="sxs-lookup"><span data-stu-id="760be-128"><see langword="true" /> if the input sequence contains the entire data to process; <see langword="false" /> if the input span contains partial data with more data to follow.</span></span></param>
        <param name="state"><span data-ttu-id="760be-129">Ein Objekt, das den Readerzustand enthält.</span><span class="sxs-lookup"><span data-stu-id="760be-129">An object that contains the reader state.</span></span> <span data-ttu-id="760be-130">Wenn es sich um den ersten Aufruf des Konstruktors handelt, sollte ein Standardzustand widergespiegelt werden. Andernfalls sollte der Zustand aus der vorherigen Instanz von <see cref="T:System.Text.Json.Utf8JsonReader" /> erfasst und zurückgegeben werden.</span><span class="sxs-lookup"><span data-stu-id="760be-130">If it's the first call to the constructor, it should reflect a default state; otherwise, it should capture the state from the previous instance instance of the <see cref="T:System.Text.Json.Utf8JsonReader" /> and pass that back.</span></span></param>
        <summary><span data-ttu-id="760be-131">Initialisiert eine neue Instanz der <see cref="T:System.Text.Json.Utf8JsonReader" />-Struktur, mit der ein schreibgeschützter Bereich mit UTF-8-codiertem Text verarbeitet und angegeben wird, ob die Eingabe den gesamten zu verarbeitenden Text enthält.</span><span class="sxs-lookup"><span data-stu-id="760be-131">Initializes a new instance of the <see cref="T:System.Text.Json.Utf8JsonReader" /> structure that processes a read-only span of UTF-8 encoded text and indicates whether the input contains all the text to process.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="760be-132">Da dieser Typ eine Ref-Struktur ist, handelt es sich um einen reinen Stapel Datentyp, und alle Einschränkungen von Verweis Strukturen gelten für ihn.</span><span class="sxs-lookup"><span data-stu-id="760be-132">Since this type is a ref struct, it is a stack-only type, and all the limitations of ref structs apply to it.</span></span>
<span data-ttu-id="760be-133">Dies ist der Grund, warum der Konstruktor eine <xref:System.Text.Json.JsonReaderState>akzeptiert.</span><span class="sxs-lookup"><span data-stu-id="760be-133">This is the reason why the constructor accepts a <xref:System.Text.Json.JsonReaderState>.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BytesConsumed">
      <MemberSignature Language="C#" Value="public long BytesConsumed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 BytesConsumed" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.BytesConsumed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesConsumed As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long BytesConsumed { long get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesConsumed : int64" Usage="System.Text.Json.Utf8JsonReader.BytesConsumed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="760be-134">Ruft die gesamte Anzahl von Bytes ab, die von dieser Instanz von <see cref="T:System.Text.Json.Utf8JsonReader" /> bisher verbraucht wurden.</span><span class="sxs-lookup"><span data-stu-id="760be-134">Gets the total number of bytes consumed so far by this instance of the <see cref="T:System.Text.Json.Utf8JsonReader" />.</span></span></summary>
        <value><span data-ttu-id="760be-135">Die bisher verbrauchte Gesamtanzahl von Bytes.</span><span class="sxs-lookup"><span data-stu-id="760be-135">The total number of bytes consumed so far.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentDepth">
      <MemberSignature Language="C#" Value="public int CurrentDepth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentDepth" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.CurrentDepth" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentDepth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentDepth { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDepth : int" Usage="System.Text.Json.Utf8JsonReader.CurrentDepth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="760be-136">Ruft die Tiefe des aktuellen Tokens ab.</span><span class="sxs-lookup"><span data-stu-id="760be-136">Gets the depth of the current token.</span></span></summary>
        <value><span data-ttu-id="760be-137">Die Tiefe des aktuellen Tokens.</span><span class="sxs-lookup"><span data-stu-id="760be-137">The depth of the current token.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="760be-138">Die `CurrentDepth` -Eigenschaft verfolgt die rekursive Tiefe der geschachtelten Objekte oder Arrays im bisher verarbeiteten JSON-Text.</span><span class="sxs-lookup"><span data-stu-id="760be-138">The `CurrentDepth` property tracks the recursive depth of the nested objects or arrays within the JSON text processed so far.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentState">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonReaderState CurrentState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonReaderState CurrentState" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.CurrentState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentState As JsonReaderState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonReaderState CurrentState { System::Text::Json::JsonReaderState get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentState : System.Text.Json.JsonReaderState" Usage="System.Text.Json.Utf8JsonReader.CurrentState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonReaderState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="760be-139">Ruft den aktuellen <see cref="T:System.Text.Json.Utf8JsonReader" />-Zustand ab, um ihn an einen <see cref="T:System.Text.Json.Utf8JsonReader" />-Konstruktor mit weiteren Daten zu übergeben.</span><span class="sxs-lookup"><span data-stu-id="760be-139">Gets the current <see cref="T:System.Text.Json.Utf8JsonReader" /> state to pass to a <see cref="T:System.Text.Json.Utf8JsonReader" /> constructor with more data.</span></span></summary>
        <value><span data-ttu-id="760be-140">Der aktuelle Reader-Zustand.</span><span class="sxs-lookup"><span data-stu-id="760be-140">The current reader state.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="760be-141">Im Gegensatz <xref:System.Text.Json.Utf8JsonReader>zum, bei dem es sich um eine Ref-Struktur handelt, kann der Zustand über die asynchrone/warte weite Grenzen hinweg</span><span class="sxs-lookup"><span data-stu-id="760be-141">Unlike the <xref:System.Text.Json.Utf8JsonReader>, which is a ref struct, the state can survive across async/await boundaries.</span></span> <span data-ttu-id="760be-142">Dieser Typ ist erforderlich, um Unterstützung für das asynchrone Lesen von Daten vor dem <xref:System.Text.Json.Utf8JsonReader>fortsetzen einer neuen Instanz von zu bieten.</span><span class="sxs-lookup"><span data-stu-id="760be-142">This type is required to provide support for reading in more data asynchronously before continuing with a new instance of the <xref:System.Text.Json.Utf8JsonReader>.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBoolean">
      <MemberSignature Language="C#" Value="public bool GetBoolean ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetBoolean() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetBoolean" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBoolean () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetBoolean();" />
      <MemberSignature Language="F#" Value="member this.GetBoolean : unit -&gt; bool" Usage="utf8JsonReader.GetBoolean " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="760be-143">Liest den nächsten JSON-Tokenwert aus der Quelle als einen <see cref="T:System.Boolean" />-Wert.</span><span class="sxs-lookup"><span data-stu-id="760be-143">Reads the next JSON token value from the source as a <see cref="T:System.Boolean" />.</span></span></summary>
        <returns><span data-ttu-id="760be-144"><see langword="true" />, wenn <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> den Wert <see cref="F:System.Text.Json.JsonTokenType.True" /> hat. <see langword="false" />, wenn <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> den Wert <see cref="F:System.Text.Json.JsonTokenType.False" /> hat.</span><span class="sxs-lookup"><span data-stu-id="760be-144"><see langword="true" /> if the <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> is <see cref="F:System.Text.Json.JsonTokenType.True" />; <see langword="false" /> if the <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> is <see cref="F:System.Text.Json.JsonTokenType.False" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="760be-145">Der Wert des JSON-Tokens ist kein boolescher Wert (d.h. <see cref="F:System.Text.Json.JsonTokenType.True" /> oder <see cref="F:System.Text.Json.JsonTokenType.False" />).</span><span class="sxs-lookup"><span data-stu-id="760be-145">The value of the JSON token isn't a boolean value (that is, <see cref="F:System.Text.Json.JsonTokenType.True" /> or <see cref="F:System.Text.Json.JsonTokenType.False" />).</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetByte">
      <MemberSignature Language="C#" Value="public byte GetByte ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8 GetByte() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetByte" />
      <MemberSignature Language="VB.NET" Value="Public Function GetByte () As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Byte GetByte();" />
      <MemberSignature Language="F#" Value="member this.GetByte : unit -&gt; byte" Usage="utf8JsonReader.GetByte " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="760be-146">Analysiert den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.Byte" />.</span><span class="sxs-lookup"><span data-stu-id="760be-146">Parses the current JSON token value from the source as a <see cref="T:System.Byte" />.</span></span></summary>
        <returns><span data-ttu-id="760be-147">Der Wert des UTF-8-codierten Tokens.</span><span class="sxs-lookup"><span data-stu-id="760be-147">The value of the UTF-8 encoded token.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="760be-148">Der Wert des JSON-Tokens ist keine <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span><span class="sxs-lookup"><span data-stu-id="760be-148">The value of the JSON token is not a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="760be-149">Das numerische Format des JSON-Tokenwerts ist falsch (enthält beispielsweise einen Bruch oder ist in wissenschaftlicher Notation geschrieben).</span><span class="sxs-lookup"><span data-stu-id="760be-149">The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation).</span></span>
          
<span data-ttu-id="760be-150">- oder -</span><span class="sxs-lookup"><span data-stu-id="760be-150">-or-</span></span>

<span data-ttu-id="760be-151">Der JSON-Tokenwert stellt eine Zahl dar, die kleiner als <see cref="F:System.Byte.MinValue" /> oder größer als <see cref="F:System.Byte.MaxValue" /> ist.</span><span class="sxs-lookup"><span data-stu-id="760be-151">The JSON token value represents a number less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetBytesFromBase64">
      <MemberSignature Language="C#" Value="public byte[] GetBytesFromBase64 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] GetBytesFromBase64() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetBytesFromBase64" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBytesFromBase64 () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ GetBytesFromBase64();" />
      <MemberSignature Language="F#" Value="member this.GetBytesFromBase64 : unit -&gt; byte[]" Usage="utf8JsonReader.GetBytesFromBase64 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="760be-152">Analysiert den Wert des aktuellen JSON-Tokens aus der Quelle und decodiert die Base64-codierte JSON-Zeichenfolge als Bytearray.</span><span class="sxs-lookup"><span data-stu-id="760be-152">Parses the current JSON token value from the source and decodes the Base64 encoded JSON string as a byte array.</span></span></summary>
        <returns><span data-ttu-id="760be-153">Das Bytearray, das den Wert des aktuellen JSON-Tokens darstellt.</span><span class="sxs-lookup"><span data-stu-id="760be-153">The byte array that represents the current JSON token value.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="760be-154">Der Typ des JSON-Tokens ist kein <see cref="F:System.Text.Json.JsonTokenType.String" />.</span><span class="sxs-lookup"><span data-stu-id="760be-154">The type of the JSON token is not a <see cref="F:System.Text.Json.JsonTokenType.String" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="760be-155">Der Wert wird nicht als Base64-Text codiert und kann daher nicht in Bytes decodiert werden.</span><span class="sxs-lookup"><span data-stu-id="760be-155">The value is not encoded as Base64 text, so it can't be decoded to bytes.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetComment">
      <MemberSignature Language="C#" Value="public string GetComment ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetComment() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetComment" />
      <MemberSignature Language="VB.NET" Value="Public Function GetComment () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetComment();" />
      <MemberSignature Language="F#" Value="member this.GetComment : unit -&gt; string" Usage="utf8JsonReader.GetComment " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="760be-156">Analysiert den Wert des aktuellen JSON-Tokens aus der Quelle als Kommentar, in einen <see cref="T:System.String" /> transcodiert.</span><span class="sxs-lookup"><span data-stu-id="760be-156">Parses the current JSON token value from the source as a comment, transcoded it as a <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="760be-157">Der Kommentar, der den Wert des aktuellen JSON-Tokens darstellt.</span><span class="sxs-lookup"><span data-stu-id="760be-157">The comment that represents the current JSON token value.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="760be-158">Das JSON-Token ist kein Kommentar.</span><span class="sxs-lookup"><span data-stu-id="760be-158">The JSON token is not a comment.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetDateTime">
      <MemberSignature Language="C#" Value="public DateTime GetDateTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime GetDateTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetDateTime" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTime () As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime GetDateTime();" />
      <MemberSignature Language="F#" Value="member this.GetDateTime : unit -&gt; DateTime" Usage="utf8JsonReader.GetDateTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="760be-159">Liest den nächsten JSON-Tokenwert aus der Quelle und analysiert ihn in einen <see cref="T:System.DateTime" />-Wert.</span><span class="sxs-lookup"><span data-stu-id="760be-159">Reads the next JSON token value from the source and parses it to a <see cref="T:System.DateTime" />.</span></span></summary>
        <returns><span data-ttu-id="760be-160">Datum und Uhrzeit, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich analysiert werden kann.</span><span class="sxs-lookup"><span data-stu-id="760be-160">The date and time, if the entire UTF-8 encoded token value can be successfully parsed.</span></span></returns>
        <remarks><span data-ttu-id="760be-161">Diese Methode erstellt nur eine DateTime-Darstellung von JSON-Zeichen folgen, die dem erweiterten ISO 8601-1-Format entsprechen (Weitere Informationen finden Sie [unter DateTime-und DateTimeOffset-Unterstützung in System. Text. JSON](~/docs/standard/datetime/system-text-json-support.md)).</span><span class="sxs-lookup"><span data-stu-id="760be-161">This method only creates a DateTime representation of JSON strings that conform to the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)).</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="760be-162">Der Wert des JSON-Tokens ist kein <see cref="F:System.Text.Json.JsonTokenType.String" />.</span><span class="sxs-lookup"><span data-stu-id="760be-162">The value of the JSON token isn't a <see cref="F:System.Text.Json.JsonTokenType.String" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="760be-163">Der Wert des JSON-Tokens darf nicht als <see cref="T:System.DateTime" /> gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="760be-163">The JSON token value cannot be read as a <see cref="T:System.DateTime" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeOffset">
      <MemberSignature Language="C#" Value="public DateTimeOffset GetDateTimeOffset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset GetDateTimeOffset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetDateTimeOffset" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeOffset () As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset GetDateTimeOffset();" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeOffset : unit -&gt; DateTimeOffset" Usage="utf8JsonReader.GetDateTimeOffset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="760be-164">Liest den nächsten JSON-Tokenwert aus der Quelle und analysiert ihn in einen <see cref="T:System.DateTimeOffset" />-Wert.</span><span class="sxs-lookup"><span data-stu-id="760be-164">Reads the next JSON token value from the source and parses it to a <see cref="T:System.DateTimeOffset" />.</span></span></summary>
        <returns><span data-ttu-id="760be-165">Datum und Uhrzeit, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich analysiert werden kann.</span><span class="sxs-lookup"><span data-stu-id="760be-165">The date and time value, if the entire UTF-8 encoded token value can be successfully parsed.</span></span></returns>
        <remarks><span data-ttu-id="760be-166">Diese Methode erstellt nur eine DateTimeOffset-Darstellung von JSON-Zeichen folgen, die dem erweiterten ISO 8601-1-Format entsprechen (Weitere Informationen finden Sie [unter DateTime-und DateTimeOffset-Unterstützung in System. Text. JSON](~/docs/standard/datetime/system-text-json-support.md)).</span><span class="sxs-lookup"><span data-stu-id="760be-166">This method only creates a DateTimeOffset representation of JSON strings that conform to the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)).</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="760be-167">Der Wert des JSON-Tokens ist kein <see cref="F:System.Text.Json.JsonTokenType.String" />.</span><span class="sxs-lookup"><span data-stu-id="760be-167">The value of the JSON token isn't a <see cref="F:System.Text.Json.JsonTokenType.String" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="760be-168">Der Wert des JSON-Tokens darf nicht als <see cref="T:System.DateTimeOffset" /> gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="760be-168">The JSON token value cannot be read as a <see cref="T:System.DateTimeOffset" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetDecimal">
      <MemberSignature Language="C#" Value="public decimal GetDecimal ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Decimal GetDecimal() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetDecimal" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDecimal () As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Decimal GetDecimal();" />
      <MemberSignature Language="F#" Value="member this.GetDecimal : unit -&gt; decimal" Usage="utf8JsonReader.GetDecimal " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="760be-169">Liest den nächsten JSON-Tokenwert aus der Quelle und analysiert ihn in einen <see cref="T:System.Decimal" />-Wert.</span><span class="sxs-lookup"><span data-stu-id="760be-169">Reads the next JSON token value from the source and parses it to a <see cref="T:System.Decimal" />.</span></span></summary>
        <returns><span data-ttu-id="760be-170">Der in einen <see cref="T:System.Decimal" />-Wert analysierte UTF-8 codierte Tokenwert.</span><span class="sxs-lookup"><span data-stu-id="760be-170">The UTF-8 encoded token value parsed to a <see cref="T:System.Decimal" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="760be-171">Die `GetDecimal` -Methode löst eine Ausnahme aus, wenn der gesamte UTF-8-codierte Tokenwert nicht <xref:System.Decimal> in einen-Wert analysiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="760be-171">The `GetDecimal` method throws an exception if the entire UTF-8 encoded token value cannnot be parsed to a <xref:System.Decimal> value.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="760be-172">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</span><span class="sxs-lookup"><span data-stu-id="760be-172">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="760be-173">Der JSON-Tokenwert stellt eine Zahl dar, die kleiner als <see cref="F:System.Decimal.MinValue" /> oder größer als <see cref="F:System.Decimal.MaxValue" /> ist.</span><span class="sxs-lookup"><span data-stu-id="760be-173">The JSON token value represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetDouble">
      <MemberSignature Language="C#" Value="public double GetDouble ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 GetDouble() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetDouble" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDouble () As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GetDouble();" />
      <MemberSignature Language="F#" Value="member this.GetDouble : unit -&gt; double" Usage="utf8JsonReader.GetDouble " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="760be-174">Liest den nächsten JSON-Tokenwert aus der Quelle und analysiert ihn in einen <see cref="T:System.Double" />-Wert.</span><span class="sxs-lookup"><span data-stu-id="760be-174">Reads the next JSON token value from the source and parses it to a <see cref="T:System.Double" />.</span></span></summary>
        <returns><span data-ttu-id="760be-175">Der in einen <see cref="T:System.Double" />-Wert analysierte UTF-8 codierte Tokenwert.</span><span class="sxs-lookup"><span data-stu-id="760be-175">The UTF-8 encoded token value parsed to a <see cref="T:System.Double" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="760be-176">Die `GetDouble` -Methode löst eine Ausnahme aus, wenn der gesamte UTF-8-codierte Tokenwert nicht <xref:System.Double> in einen-Wert analysiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="760be-176">The `GetDouble` method throws an exception if the entire UTF-8 encoded token value cannnot be parsed to a <xref:System.Double> value.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="760be-177">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</span><span class="sxs-lookup"><span data-stu-id="760be-177">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="760be-178">Der JSON-Tokenwert stellt eine Zahl dar, die kleiner als <see cref="F:System.Double.MinValue" /> oder größer als <see cref="F:System.Double.MaxValue" /> ist.</span><span class="sxs-lookup"><span data-stu-id="760be-178">The JSON token value represents a number less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetGuid">
      <MemberSignature Language="C#" Value="public Guid GetGuid ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Guid GetGuid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetGuid" />
      <MemberSignature Language="VB.NET" Value="Public Function GetGuid () As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Guid GetGuid();" />
      <MemberSignature Language="F#" Value="member this.GetGuid : unit -&gt; Guid" Usage="utf8JsonReader.GetGuid " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="760be-179">Liest den nächsten JSON-Tokenwert aus der Quelle und analysiert ihn in einen <see cref="T:System.Guid" />-Wert.</span><span class="sxs-lookup"><span data-stu-id="760be-179">Reads the next JSON token value from the source and parses it to a <see cref="T:System.Guid" />.</span></span></summary>
        <returns><span data-ttu-id="760be-180">Der GUID-Wert, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich analysiert werden kann.</span><span class="sxs-lookup"><span data-stu-id="760be-180">The GUID value, if the entire UTF-8 encoded token value can be successfully parsed.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="760be-181">Der Wert des JSON-Tokens ist kein <see cref="F:System.Text.Json.JsonTokenType.String" />.</span><span class="sxs-lookup"><span data-stu-id="760be-181">The value of the JSON token isn't a <see cref="F:System.Text.Json.JsonTokenType.String" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="760be-182">Der Wert des JSON-Tokens liegt in einem für eine GUID nicht unterstützten Format vor.</span><span class="sxs-lookup"><span data-stu-id="760be-182">The JSON token value is in an unsupported format for a Guid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetInt16">
      <MemberSignature Language="C#" Value="public short GetInt16 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int16 GetInt16() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetInt16" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInt16 () As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; short GetInt16();" />
      <MemberSignature Language="F#" Value="member this.GetInt16 : unit -&gt; int16" Usage="utf8JsonReader.GetInt16 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="760be-183">Analysiert den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.Int16" />.</span><span class="sxs-lookup"><span data-stu-id="760be-183">Parses the current JSON token value from the source as a <see cref="T:System.Int16" />.</span></span></summary>
        <returns><span data-ttu-id="760be-184">Der in einen <see cref="T:System.Int16" />-Wert analysierte UTF-8 codierte Tokenwert.</span><span class="sxs-lookup"><span data-stu-id="760be-184">The UTF-8 encoded token value parsed to an <see cref="T:System.Int16" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="760be-185">Der Wert des JSON-Tokens ist keine <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span><span class="sxs-lookup"><span data-stu-id="760be-185">The value of the JSON token is not a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="760be-186">Das numerische Format des JSON-Tokenwerts ist falsch (enthält beispielsweise einen Bruch oder ist in wissenschaftlicher Notation geschrieben).</span><span class="sxs-lookup"><span data-stu-id="760be-186">The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation).</span></span>
          
<span data-ttu-id="760be-187">- oder -</span><span class="sxs-lookup"><span data-stu-id="760be-187">-or-</span></span>

<span data-ttu-id="760be-188">Der JSON-Tokenwert stellt eine Zahl dar, die kleiner als <see cref="F:System.Int16.MinValue" /> oder größer als <see cref="F:System.Int16.MaxValue" /> ist.</span><span class="sxs-lookup"><span data-stu-id="760be-188">The JSON token value represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetInt32">
      <MemberSignature Language="C#" Value="public int GetInt32 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetInt32() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetInt32" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInt32 () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetInt32();" />
      <MemberSignature Language="F#" Value="member this.GetInt32 : unit -&gt; int" Usage="utf8JsonReader.GetInt32 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="760be-189">Liest den nächsten JSON-Tokenwert aus der Quelle und analysiert ihn in einen <see cref="T:System.Int32" />-Wert.</span><span class="sxs-lookup"><span data-stu-id="760be-189">Reads the next JSON token value from the source and parses it to an <see cref="T:System.Int32" />.</span></span></summary>
        <returns><span data-ttu-id="760be-190">Der in einen <see cref="T:System.Int32" />-Wert analysierte UTF-8 codierte Tokenwert.</span><span class="sxs-lookup"><span data-stu-id="760be-190">The UTF-8 encoded token value parsed to an <see cref="T:System.Int32" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="760be-191">Die `GetInt32` -Methode löst eine Ausnahme aus, wenn der gesamte UTF-8-codierte Tokenwert nicht <xref:System.Int32> in einen-Wert analysiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="760be-191">The `GetInt32` method throws an exception if the entire UTF-8 encoded token value cannnot be parsed to a <xref:System.Int32> value.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="760be-192">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</span><span class="sxs-lookup"><span data-stu-id="760be-192">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="760be-193">Der JSON-Tokenwert hat das falsche numerische Format.</span><span class="sxs-lookup"><span data-stu-id="760be-193">The JSON token value is of the incorrect numeric format.</span></span> <span data-ttu-id="760be-194">Er enthält z.B. eine Dezimalzahl oder ist in wissenschaftlicher Schreibweise geschrieben.</span><span class="sxs-lookup"><span data-stu-id="760be-194">For example, it contains a decimal or is written in scientific notation.</span></span>
            
<span data-ttu-id="760be-195">- oder -</span><span class="sxs-lookup"><span data-stu-id="760be-195">-or-</span></span>

<span data-ttu-id="760be-196">Der JSON-Tokenwert stellt eine Zahl dar, die kleiner als <see cref="F:System.Int32.MinValue" /> oder größer als <see cref="F:System.Int32.MaxValue" /> ist.</span><span class="sxs-lookup"><span data-stu-id="760be-196">The JSON token value represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetInt64">
      <MemberSignature Language="C#" Value="public long GetInt64 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 GetInt64() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetInt64" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInt64 () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long GetInt64();" />
      <MemberSignature Language="F#" Value="member this.GetInt64 : unit -&gt; int64" Usage="utf8JsonReader.GetInt64 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="760be-197">Liest den nächsten JSON-Tokenwert aus der Quelle und analysiert ihn in einen <see cref="T:System.Int64" />-Wert.</span><span class="sxs-lookup"><span data-stu-id="760be-197">Reads the next JSON token value from the source and parses it to an <see cref="T:System.Int64" />.</span></span></summary>
        <returns><span data-ttu-id="760be-198">Der in einen <see cref="T:System.Int64" />-Wert analysierte UTF-8 codierte Tokenwert.</span><span class="sxs-lookup"><span data-stu-id="760be-198">The UTF-8 encoded token value parsed to an <see cref="T:System.Int64" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="760be-199">Die `GetInt64` -Methode löst eine Ausnahme aus, wenn der gesamte UTF-8-codierte Tokenwert nicht <xref:System.Int64> in einen-Wert analysiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="760be-199">The `GetInt64` method throws an exception if the entire UTF-8 encoded token value cannnot be parsed to a <xref:System.Int64> value.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="760be-200">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</span><span class="sxs-lookup"><span data-stu-id="760be-200">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="760be-201">Der JSON-Tokenwert hat das falsche numerische Format.</span><span class="sxs-lookup"><span data-stu-id="760be-201">The JSON token value is of the incorrect numeric format.</span></span> <span data-ttu-id="760be-202">Er enthält z.B. eine Dezimalzahl oder ist in wissenschaftlicher Schreibweise geschrieben.</span><span class="sxs-lookup"><span data-stu-id="760be-202">For example, it contains a decimal or is written in scientific notation.</span></span>
            
<span data-ttu-id="760be-203">- oder -</span><span class="sxs-lookup"><span data-stu-id="760be-203">-or-</span></span>

<span data-ttu-id="760be-204">Der JSON-Tokenwert stellt eine Zahl dar, die kleiner als <see cref="F:System.Int64.MinValue" /> oder größer als <see cref="F:System.Int64.MaxValue" /> ist.</span><span class="sxs-lookup"><span data-stu-id="760be-204">The JSON token value represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetSByte">
      <MemberSignature Language="C#" Value="public sbyte GetSByte ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int8 GetSByte() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetSByte" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSByte () As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::SByte GetSByte();" />
      <MemberSignature Language="F#" Value="member this.GetSByte : unit -&gt; sbyte" Usage="utf8JsonReader.GetSByte " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="760be-205">Analysiert den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.SByte" />.</span><span class="sxs-lookup"><span data-stu-id="760be-205">Parses the current JSON token value from the source as an <see cref="T:System.SByte" />.</span></span></summary>
        <returns><span data-ttu-id="760be-206">Der in einen <see cref="T:System.SByte" />-Wert analysierte UTF-8 codierte Tokenwert.</span><span class="sxs-lookup"><span data-stu-id="760be-206">The UTF-8 encoded token value parsed to an <see cref="T:System.SByte" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="760be-207">Der Wert des JSON-Tokens ist keine <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span><span class="sxs-lookup"><span data-stu-id="760be-207">The value of the JSON token is not a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="760be-208">Das numerische Format des JSON-Tokenwerts ist falsch (enthält beispielsweise einen Bruch oder ist in wissenschaftlicher Notation geschrieben).</span><span class="sxs-lookup"><span data-stu-id="760be-208">The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation).</span></span>
          
<span data-ttu-id="760be-209">- oder -</span><span class="sxs-lookup"><span data-stu-id="760be-209">-or-</span></span>

<span data-ttu-id="760be-210">Der JSON-Tokenwert stellt eine Zahl dar, die kleiner als <see cref="F:System.SByte.MinValue" /> oder größer als <see cref="F:System.SByte.MaxValue" /> ist.</span><span class="sxs-lookup"><span data-stu-id="760be-210">The JSON token value represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetSingle">
      <MemberSignature Language="C#" Value="public float GetSingle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float32 GetSingle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetSingle" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSingle () As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; float GetSingle();" />
      <MemberSignature Language="F#" Value="member this.GetSingle : unit -&gt; single" Usage="utf8JsonReader.GetSingle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="760be-211">Liest den nächsten JSON-Tokenwert aus der Quelle und analysiert ihn in einen <see cref="T:System.Single" />-Wert.</span><span class="sxs-lookup"><span data-stu-id="760be-211">Reads the next JSON token value from the source and parses it to a <see cref="T:System.Single" />.</span></span></summary>
        <returns><span data-ttu-id="760be-212">Der in einen <see cref="T:System.Single" />-Wert analysierte UTF-8 codierte Tokenwert.</span><span class="sxs-lookup"><span data-stu-id="760be-212">The UTF-8 encoded token value parsed to a <see cref="T:System.Single" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="760be-213">Die `GetSingle` -Methode löst eine Ausnahme aus, wenn der gesamte UTF-8-codierte Tokenwert nicht <xref:System.Single> in einen-Wert analysiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="760be-213">The `GetSingle` method throws an exception if the entire UTF-8 encoded token value cannnot be parsed to a <xref:System.Single> value.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="760be-214">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</span><span class="sxs-lookup"><span data-stu-id="760be-214">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="760be-215">Der JSON-Tokenwert stellt eine Zahl dar, die kleiner als <see cref="F:System.Single.MinValue" /> oder größer als <see cref="F:System.Single.MaxValue" /> ist.</span><span class="sxs-lookup"><span data-stu-id="760be-215">The JSON token value represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public string GetString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetString" />
      <MemberSignature Language="VB.NET" Value="Public Function GetString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetString();" />
      <MemberSignature Language="F#" Value="member this.GetString : unit -&gt; string" Usage="utf8JsonReader.GetString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="760be-216">Liest den nächsten JSON-Tokenwert aus der Quelle (ohne Escapezeichen und als Zeichenfolge transcodiert).</span><span class="sxs-lookup"><span data-stu-id="760be-216">Reads the next JSON token value from the source, unescaped, and transcoded as a string.</span></span></summary>
        <returns><span data-ttu-id="760be-217">Der in eine Zeichenfolge analysierte Tokenwert oder <see langword="null" />, wenn <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> auf <see cref="F:System.Text.Json.JsonTokenType.Null" /> festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="760be-217">The token value parsed to a string, or <see langword="null" /> if <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> is <see cref="F:System.Text.Json.JsonTokenType.Null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="760be-218">Gibt `null` zurück <xref:System.Text.Json.Utf8JsonReader.TokenType> , <xref:System.Text.Json.JsonTokenType.Null?displayProperty=nameWithType>wenn ist.</span><span class="sxs-lookup"><span data-stu-id="760be-218">Returns `null` when <xref:System.Text.Json.Utf8JsonReader.TokenType> is <xref:System.Text.Json.JsonTokenType.Null?displayProperty=nameWithType>.</span></span>

          ]]></format>
        </remarks>
         <exception cref="T:System.InvalidOperationException"><span data-ttu-id="760be-219">Der Wert des JSON-Tokens ist keine Zeichenfolge (d. h. keine <see cref="F:System.Text.Json.JsonTokenType.String" />-, <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />- oder <see cref="F:System.Text.Json.JsonTokenType.Null" />-Enumeration).</span><span class="sxs-lookup"><span data-stu-id="760be-219">The JSON token value isn't a string (that is, not a <see cref="F:System.Text.Json.JsonTokenType.String" />, <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />, or <see cref="F:System.Text.Json.JsonTokenType.Null" />).</span></span>

<span data-ttu-id="760be-220">- oder -</span><span class="sxs-lookup"><span data-stu-id="760be-220">-or-</span></span>

<span data-ttu-id="760be-221">Die JSON-Zeichenfolge enthält ungültige UTF-8-Bytes oder ungültige UTF-16-Ersatzzeichen.</span><span class="sxs-lookup"><span data-stu-id="760be-221">The JSON string contains invalid UTF-8 bytes or invalid UTF-16 surrogates.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetUInt16">
      <MemberSignature Language="C#" Value="public ushort GetUInt16 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int16 GetUInt16() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetUInt16" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUInt16 () As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::UInt16 GetUInt16();" />
      <MemberSignature Language="F#" Value="member this.GetUInt16 : unit -&gt; uint16" Usage="utf8JsonReader.GetUInt16 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="760be-222">Analysiert den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.UInt16" />.</span><span class="sxs-lookup"><span data-stu-id="760be-222">Parses the current JSON token value from the source as a <see cref="T:System.UInt16" />.</span></span></summary>
        <returns><span data-ttu-id="760be-223">Der in einen <see cref="T:System.UInt16" />-Wert analysierte UTF-8 codierte Tokenwert.</span><span class="sxs-lookup"><span data-stu-id="760be-223">The UTF-8 encoded token value parsed to a <see cref="T:System.UInt16" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="760be-224">Der Wert des JSON-Tokens ist keine <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span><span class="sxs-lookup"><span data-stu-id="760be-224">The value of the JSON token is not a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="760be-225">Das numerische Format des JSON-Tokenwerts ist falsch (enthält beispielsweise einen Bruch oder ist in wissenschaftlicher Notation geschrieben).</span><span class="sxs-lookup"><span data-stu-id="760be-225">The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation).</span></span>
          
<span data-ttu-id="760be-226">- oder -</span><span class="sxs-lookup"><span data-stu-id="760be-226">-or-</span></span>

<span data-ttu-id="760be-227">Der JSON-Tokenwert stellt eine Zahl dar, die kleiner als <see cref="F:System.UInt16.MinValue" /> oder größer als <see cref="F:System.UInt16.MaxValue" /> ist.</span><span class="sxs-lookup"><span data-stu-id="760be-227">The JSON token value represents a number less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetUInt32">
      <MemberSignature Language="C#" Value="public uint GetUInt32 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int32 GetUInt32() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetUInt32" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUInt32 () As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::UInt32 GetUInt32();" />
      <MemberSignature Language="F#" Value="member this.GetUInt32 : unit -&gt; uint32" Usage="utf8JsonReader.GetUInt32 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="760be-228">Liest den nächsten JSON-Tokenwert aus der Quelle und analysiert ihn in einen <see cref="T:System.UInt32" />-Wert.</span><span class="sxs-lookup"><span data-stu-id="760be-228">Reads the next JSON token value from the source and parses it to a <see cref="T:System.UInt32" />.</span></span></summary>
        <returns><span data-ttu-id="760be-229">Der in einen <see cref="T:System.UInt32" />-Wert analysierte UTF-8 codierte Tokenwert.</span><span class="sxs-lookup"><span data-stu-id="760be-229">The UTF-8 encoded token value parsed to a <see cref="T:System.UInt32" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="760be-230">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</span><span class="sxs-lookup"><span data-stu-id="760be-230">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="760be-231">Der JSON-Tokenwert hat das falsche numerische Format.</span><span class="sxs-lookup"><span data-stu-id="760be-231">The JSON token value is of the incorrect numeric format.</span></span> <span data-ttu-id="760be-232">Er enthält z.B. eine Dezimalzahl oder ist in wissenschaftlicher Schreibweise geschrieben.</span><span class="sxs-lookup"><span data-stu-id="760be-232">For example, it contains a decimal or is written in scientific notation.</span></span>

<span data-ttu-id="760be-233">- oder -</span><span class="sxs-lookup"><span data-stu-id="760be-233">-or-</span></span>

<span data-ttu-id="760be-234">Der JSON-Tokenwert stellt eine Zahl dar, die kleiner als <see cref="F:System.UInt32.MinValue" /> oder größer als <see cref="F:System.UInt32.MaxValue" /> ist.</span><span class="sxs-lookup"><span data-stu-id="760be-234">The JSON token value represents a number less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetUInt64">
      <MemberSignature Language="C#" Value="public ulong GetUInt64 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int64 GetUInt64() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetUInt64" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUInt64 () As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::UInt64 GetUInt64();" />
      <MemberSignature Language="F#" Value="member this.GetUInt64 : unit -&gt; uint64" Usage="utf8JsonReader.GetUInt64 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="760be-235">Liest den nächsten JSON-Tokenwert aus der Quelle und analysiert ihn in einen <see cref="T:System.UInt64" />-Wert.</span><span class="sxs-lookup"><span data-stu-id="760be-235">Reads the next JSON token value from the source and parses it to a <see cref="T:System.UInt64" />.</span></span></summary>
        <returns><span data-ttu-id="760be-236">Der in einen <see cref="T:System.UInt64" />-Wert analysierte UTF-8 codierte Tokenwert.</span><span class="sxs-lookup"><span data-stu-id="760be-236">The UTF-8 encoded token value parsed to a <see cref="T:System.UInt64" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="760be-237">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</span><span class="sxs-lookup"><span data-stu-id="760be-237">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="760be-238">Der JSON-Tokenwert hat das falsche numerische Format.</span><span class="sxs-lookup"><span data-stu-id="760be-238">The JSON token value is of the incorrect numeric format.</span></span> <span data-ttu-id="760be-239">Er enthält z.B. eine Dezimalzahl oder ist in wissenschaftlicher Schreibweise geschrieben.</span><span class="sxs-lookup"><span data-stu-id="760be-239">For example, it contains a decimal or is written in scientific notation.</span></span>
            
<span data-ttu-id="760be-240">- oder -</span><span class="sxs-lookup"><span data-stu-id="760be-240">-or-</span></span>

<span data-ttu-id="760be-241">Der JSON-Tokenwert stellt eine Zahl dar, die kleiner als <see cref="F:System.UInt64.MinValue" /> oder größer als <see cref="F:System.UInt64.MaxValue" /> ist.</span><span class="sxs-lookup"><span data-stu-id="760be-241">The JSON token value represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="HasValueSequence">
      <MemberSignature Language="C#" Value="public bool HasValueSequence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasValueSequence" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.HasValueSequence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasValueSequence As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasValueSequence { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasValueSequence : bool" Usage="System.Text.Json.Utf8JsonReader.HasValueSequence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="760be-242">Ruft einen Wert an, der angibt, welche <c>Value</c>-Eigenschaft zum Abrufen des Tokenwerts zu verwenden ist.</span><span class="sxs-lookup"><span data-stu-id="760be-242">Gets a value that indicates which <c>Value</c> property to use to get the token value.</span></span></summary>
        <value><span data-ttu-id="760be-243"><see langword="true" />, <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" /> wenn verwendet werden soll, um den Tokenwert zu erhalten. <see langword="false" /> Wenn<see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" /> stattdessen verwendet werden soll.</span><span class="sxs-lookup"><span data-stu-id="760be-243"><see langword="true" /> if <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" /> should be used to get the token value; <see langword="false" /> if <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" /> should be used instead.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="760be-244">Wenn `HasValueSequence` ist `false` ,<xref:System.Text.Json.Utf8JsonReader.ValueSequence> ist leer.</span><span class="sxs-lookup"><span data-stu-id="760be-244">If `HasValueSequence` is `false`, <xref:System.Text.Json.Utf8JsonReader.ValueSequence> is empty.</span></span> <span data-ttu-id="760be-245">Lesen Sie daher den Tokenwert mithilfe <xref:System.Text.Json.Utf8JsonReader.ValueSpan> der-Eigenschaft.</span><span class="sxs-lookup"><span data-stu-id="760be-245">Therefore, read the token value using the <xref:System.Text.Json.Utf8JsonReader.ValueSpan> property.</span></span>

<span data-ttu-id="760be-246">Für Eingabedaten in einem `ReadOnlySpan<byte>`gibt dies immer zurück `false`.</span><span class="sxs-lookup"><span data-stu-id="760be-246">For input data within a `ReadOnlySpan<byte>`, this always returns `false`.</span></span> <span data-ttu-id="760be-247">Bei Eingabedaten in einem `ReadOnlySequence<byte>`gibt dies nur dann `true` zurück, wenn der Tokenwert mehr als ein einzelnes Segment überschreitet und daher nicht als Spanne dargestellt werden kann.</span><span class="sxs-lookup"><span data-stu-id="760be-247">For input data within a `ReadOnlySequence<byte>`, this only returns `true` if the token value straddles more than a single segment and hence can't be represented as a span.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFinalBlock">
      <MemberSignature Language="C#" Value="public bool IsFinalBlock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFinalBlock" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.IsFinalBlock" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFinalBlock As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFinalBlock { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFinalBlock : bool" Usage="System.Text.Json.Utf8JsonReader.IsFinalBlock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="760be-248">Ruft den Modus dieser Instanz von <see cref="T:System.Text.Json.Utf8JsonReader" /> ab, der angibt, ob die gesamten JSON-Daten übergeben wurden oder weitere folgen.</span><span class="sxs-lookup"><span data-stu-id="760be-248">Gets the mode of this instance of the <see cref="T:System.Text.Json.Utf8JsonReader" /> which indicates whether all the JSON data was provided or there is more data to come.</span></span></summary>
        <value><span data-ttu-id="760be-249"><see langword="true" />, wenn der Reader mit der Eingabe Spanne oder Sequenz erstellt wurde, die die gesamten JSON-Daten enthält, die verarbeitet werden sollen. <see langword="false" /> , wenn der Reader mit einer Eingabe Spanne oder Sequenz erstellt wurde, die möglicherweise partielle JSON-Daten mit weiteren Daten enthält, die befolgt werden sollen.</span><span class="sxs-lookup"><span data-stu-id="760be-249"><see langword="true" /> if the reader was constructed with the input span or sequence containing the entire JSON data to process; <see langword="false" /> if the reader was constructed with an input span or sequence that may contain partial JSON data with more data to follow.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public SequencePosition Position { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.SequencePosition Position" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.Position" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Position As SequencePosition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property SequencePosition Position { SequencePosition get(); };" />
      <MemberSignature Language="F#" Value="member this.Position : SequencePosition" Usage="System.Text.Json.Utf8JsonReader.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SequencePosition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="760be-250">Ruft die aktuelle <see cref="T:System.SequencePosition" /> innerhalb des bereitgestellten UTF-8-codierten ReadOnlySequence&lt;Byte&gt; der Eingabe oder einen <see cref="T:System.SequencePosition" />-Standardwert ab, wenn die <see cref="T:System.Text.Json.Utf8JsonReader" />-Struktur mit einem ReadOnlySpan&lt;Byte&gt; erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="760be-250">Gets the current <see cref="T:System.SequencePosition" /> within the provided UTF-8 encoded input ReadOnlySequence&lt;byte&gt; or a default <see cref="T:System.SequencePosition" /> if the <see cref="T:System.Text.Json.Utf8JsonReader" /> struct was constructed with a ReadOnlySpan&lt;byte&gt;.</span></span></summary>
        <value><span data-ttu-id="760be-251">Der aktuelle <see cref="T:System.SequencePosition" /> innerhalb des bereitgestellten UTF-8-codierten Eingabe-sequenzbyte <see cref="T:System.SequencePosition" /> &gt;&lt;&gt; oder <see cref="T:System.Text.Json.Utf8JsonReader" /> ein Standardwert, wenn die Struktur mit einem&lt;Read-lyspan-Byte erstellt wurde.</span><span class="sxs-lookup"><span data-stu-id="760be-251">The current <see cref="T:System.SequencePosition" /> within the provided UTF-8 encoded input ReadOnlySequence&lt;byte&gt; or a default <see cref="T:System.SequencePosition" /> if the <see cref="T:System.Text.Json.Utf8JsonReader" /> struct was constructed with a ReadOnlySpan&lt;byte&gt;.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public bool Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.Read" />
      <MemberSignature Language="VB.NET" Value="Public Function Read () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Read();" />
      <MemberSignature Language="F#" Value="member this.Read : unit -&gt; bool" Usage="utf8JsonReader.Read " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="760be-252">Liest das nächste JSON-Token aus der Eingabequelle.</span><span class="sxs-lookup"><span data-stu-id="760be-252">Reads the next JSON token from the input source.</span></span></summary>
        <returns><span data-ttu-id="760be-253"><see langword="false" />, wenn das Token erfolgreich gelesen wurde, andernfalls <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="760be-253"><see langword="true" /> if the token was read successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="760be-254">Ein gemäß JSON RFC ungültiges JSON-Token wurde festgestellt.</span><span class="sxs-lookup"><span data-stu-id="760be-254">An invalid JSON token according to the JSON RFC is encountered.</span></span>
        
<span data-ttu-id="760be-255">- oder -</span><span class="sxs-lookup"><span data-stu-id="760be-255">-or-</span></span>

<span data-ttu-id="760be-256">Die aktuelle Tiefe übersteigt den rekursiven Grenzwert, der durch die maximale Tiefe festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="760be-256">The current depth exceeds the recursive limit set by the maximum depth.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Skip">
      <MemberSignature Language="C#" Value="public void Skip ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Skip() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.Skip" />
      <MemberSignature Language="VB.NET" Value="Public Sub Skip ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Skip();" />
      <MemberSignature Language="F#" Value="member this.Skip : unit -&gt; unit" Usage="utf8JsonReader.Skip " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="760be-257">Überspringt die untergeordneten Elemente des aktuellen JSON-Tokens.</span><span class="sxs-lookup"><span data-stu-id="760be-257">Skips the children of the current JSON token.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="760be-258">Wenn <xref:System.Text.Json.Utf8JsonReader.TokenType>den Wert hat,wechseltderReaderzuerstinden-EigenschaftsWert.<xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="760be-258">When <xref:System.Text.Json.Utf8JsonReader.TokenType> is <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType>, the reader first moves to the property value.</span></span>

<span data-ttu-id="760be-259">Wenn <xref:System.Text.Json.Utf8JsonReader.TokenType> (ursprünglich oder nach der Weiterentwicklung) <xref:System.Text.Json.JsonTokenType.StartObject?displayProperty=nameWithtype> oder <xref:System.Text.Json.JsonTokenType.StartArray?displayProperty=nameWithType>ist, wechselt der Reader zum passenden <xref:System.Text.Json.JsonTokenType.EndObject?displayProperty=nameWithType> oder <xref:System.Text.Json.JsonTokenType.EndArray?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="760be-259">When <xref:System.Text.Json.Utf8JsonReader.TokenType> (originally, or after advancing) is <xref:System.Text.Json.JsonTokenType.StartObject?displayProperty=nameWithtype> or  <xref:System.Text.Json.JsonTokenType.StartArray?displayProperty=nameWithType>, the reader advances to the matching <xref:System.Text.Json.JsonTokenType.EndObject?displayProperty=nameWithType> or <xref:System.Text.Json.JsonTokenType.EndArray?displayProperty=nameWithType>.</span></span>
            
<span data-ttu-id="760be-260">Für alle anderen Tokentypen wird der Reader nicht verschoben.</span><span class="sxs-lookup"><span data-stu-id="760be-260">For all other token types, the reader does not move.</span></span> <span data-ttu-id="760be-261">Nach dem nächsten <xref:System.Text.Json.Utf8JsonReader.Read>-Vorgang wird der Reader beim nächsten Wert (in einem Array), beim nächsten Eigenschaftsnamen (bei einem-Objekt) oder beim endarray-/Objekttoken verwendet.</span><span class="sxs-lookup"><span data-stu-id="760be-261">After the next call to <xref:System.Text.Json.Utf8JsonReader.Read>, the reader will be at the next value (when in an array), the next property name (when in an object), or the end array/object token.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="760be-262">Dem Reader wurden Teildaten übergeben, und weitere Daten folgen (d.h., <see cref="P:System.Text.Json.Utf8JsonReader.IsFinalBlock" /> ist <see langword="false" />).</span><span class="sxs-lookup"><span data-stu-id="760be-262">The reader was given partial data with more data to follow (that is, <see cref="P:System.Text.Json.Utf8JsonReader.IsFinalBlock" /> is <see langword="false" />).</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="760be-263">Beim Überspringen wurde ein gemäß JSON-RFC ungültiges JSON-Token gefunden.</span><span class="sxs-lookup"><span data-stu-id="760be-263">An invalid JSON token was encountered while skipping, according to the JSON RFC.</span></span>

<span data-ttu-id="760be-264">- oder -</span><span class="sxs-lookup"><span data-stu-id="760be-264">-or-</span></span>

<span data-ttu-id="760be-265">Die aktuelle Tiefe übersteigt den rekursiven Grenzwert, der durch die maximale Tiefe festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="760be-265">The current depth exceeds the recursive limit set by the maximum depth.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TokenStartIndex">
      <MemberSignature Language="C#" Value="public long TokenStartIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 TokenStartIndex" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.TokenStartIndex" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TokenStartIndex As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long TokenStartIndex { long get(); };" />
      <MemberSignature Language="F#" Value="member this.TokenStartIndex : int64" Usage="System.Text.Json.Utf8JsonReader.TokenStartIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="760be-266">Ruft den Index ab, an dem das zuletzt verarbeitete JSON-Token beginnt (innerhalb des angegebenen UTF-8-codierten Eingabetexts), wobei Leerraum übersprungen wird.</span><span class="sxs-lookup"><span data-stu-id="760be-266">Gets the index that the last processed JSON token starts at (within the given UTF-8 encoded input text), skipping any white space.</span></span></summary>
        <value><span data-ttu-id="760be-267">Der Start Index des letzten verarbeiteten JSON-Tokens innerhalb des angegebenen UTF-8-codierten Eingabe Texts.</span><span class="sxs-lookup"><span data-stu-id="760be-267">The starting index of the last processed JSON token within the given UTF-8 encoded input text.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="760be-268">Bei JSON-Zeichen folgen (einschließlich Eigenschaftsnamen) verweist dieser Wert auf vor dem Start Anführungszeichen.</span><span class="sxs-lookup"><span data-stu-id="760be-268">For JSON strings (including property names), this value points to before the start quote.</span></span>

<span data-ttu-id="760be-269">Für Kommentare verweist dieser Wert auf vor dem ersten Kommentar Trennzeichen (d. h. "/").</span><span class="sxs-lookup"><span data-stu-id="760be-269">For comments, this value points to before the first comment delimiter (that is, '/').</span></span>

            ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenType">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonTokenType TokenType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonTokenType TokenType" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.TokenType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TokenType As JsonTokenType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonTokenType TokenType { System::Text::Json::JsonTokenType get(); };" />
      <MemberSignature Language="F#" Value="member this.TokenType : System.Text.Json.JsonTokenType" Usage="System.Text.Json.Utf8JsonReader.TokenType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonTokenType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="760be-270">Ruft den Typ des zuletzt verarbeiteten JSON-Tokens im UTF-8-codierten JSON-Text ab.</span><span class="sxs-lookup"><span data-stu-id="760be-270">Gets the type of the last processed JSON token in the UTF-8 encoded JSON text.</span></span></summary>
        <value><span data-ttu-id="760be-271">Der Typ des zuletzt verarbeiteten JSON-Tokens.</span><span class="sxs-lookup"><span data-stu-id="760be-271">The type of the last processed JSON token.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetByte">
      <MemberSignature Language="C#" Value="public bool TryGetByte (out byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetByte([out] unsigned int8&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetByte(System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetByte (ByRef value As Byte) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetByte([Runtime::InteropServices::Out] System::Byte % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetByte :  -&gt; bool" Usage="utf8JsonReader.TryGetByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="760be-272">Wenn diese Methode zurückgegeben wird, enthält sie den analysierten Wert.</span><span class="sxs-lookup"><span data-stu-id="760be-272">When this method returns, contains the parsed value.</span></span></param>
        <summary><span data-ttu-id="760be-273">Es wird versucht, den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.Byte" /> zu analysieren, und es wird ein Wert zurückgegeben, mit dem der Erfolg bzw. Misserfolg des Vorgangs angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="760be-273">Tries to parse the current JSON token value from the source as a <see cref="T:System.Byte" /> and returns a value that indicates whether the operation succeeded.</span></span></summary>
        <returns><span data-ttu-id="760be-274"><see langword="true" />, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich in einen <see cref="T:System.Byte" />-Wert analysiert werden kann, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="760be-274"><see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.Byte" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="760be-275">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</span><span class="sxs-lookup"><span data-stu-id="760be-275">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetBytesFromBase64">
      <MemberSignature Language="C#" Value="public bool TryGetBytesFromBase64 (out byte[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetBytesFromBase64([out] unsigned int8[]&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetBytesFromBase64(System.Byte[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetBytesFromBase64 (ByRef value As Byte()) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetBytesFromBase64([Runtime::InteropServices::Out] cli::array &lt;System::Byte&gt; ^ % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetBytesFromBase64 :  -&gt; bool" Usage="utf8JsonReader.TryGetBytesFromBase64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte[]" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="760be-276">Wenn diese Methode zurückgegeben wird, ist die decodierte binäre Darstellung des Base64-Texts enthalten.</span><span class="sxs-lookup"><span data-stu-id="760be-276">When this method returns, contains the decoded binary representation of the Base64 text.</span></span></param>
        <summary><span data-ttu-id="760be-277">Es wird versucht, den aktuellen JSON-Tokenwert aus der Quelle zu analysieren. Die Base64-codierte JSON-Zeichenfolge wird als Bytearray decodiert, und es wird ein Wert zurückgegeben, mit dem der Erfolg bzw. Misserfolg des Vorgangs angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="760be-277">Tries to parse the current JSON token value from the source and decodes the Base64 encoded JSON string as a byte array and returns a value that indicates whether the operation succeeded.</span></span></summary>
        <returns><span data-ttu-id="760be-278"><see langword="true" />, wenn der gesamte Tokenwert als gültiger Base64-Text codiert ist und erfolgreich in Bytes decodiert werden kann; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="760be-278"><see langword="true" /> if the entire token value is encoded as valid Base64 text and can be successfully decoded to bytes; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="760be-279">Das JSON-Token ist kein <see cref="F:System.Text.Json.JsonTokenType.String" />.</span><span class="sxs-lookup"><span data-stu-id="760be-279">The JSON token is not a <see cref="F:System.Text.Json.JsonTokenType.String" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetDateTime">
      <MemberSignature Language="C#" Value="public bool TryGetDateTime (out DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetDateTime([out] valuetype System.DateTime&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetDateTime(System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetDateTime (ByRef value As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetDateTime([Runtime::InteropServices::Out] DateTime % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetDateTime :  -&gt; bool" Usage="utf8JsonReader.TryGetDateTime value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="760be-280">Wenn diese Methode zurückgegeben wird, enthält sie den analysierten Wert.</span><span class="sxs-lookup"><span data-stu-id="760be-280">When this method returns, contains the parsed value.</span></span></param>
        <summary><span data-ttu-id="760be-281">Es wird versucht, den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.DateTime" /> zu analysieren, und es wird ein Wert zurückgegeben, mit dem der Erfolg bzw. Misserfolg des Vorgangs angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="760be-281">Tries to parse the current JSON token value from the source as a <see cref="T:System.DateTime" /> and returns a value that indicates whether the operation succeeded.</span></span></summary>
        <returns><span data-ttu-id="760be-282"><see langword="true" />, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich in einen <see cref="T:System.DateTime" />-Wert analysiert werden kann, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="760be-282"><see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.DateTime" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks><span data-ttu-id="760be-283">Diese Methode erstellt nur eine DateTime-Darstellung von JSON-Zeichen folgen, die dem erweiterten ISO 8601-1-Format entsprechen (Weitere Informationen finden Sie [unter DateTime-und DateTimeOffset-Unterstützung in System. Text. JSON](~/docs/standard/datetime/system-text-json-support.md)).</span><span class="sxs-lookup"><span data-stu-id="760be-283">This method only creates a DateTime representation of JSON strings that conform to the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)).</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="760be-284">Der Wert des JSON-Tokens ist kein <see cref="F:System.Text.Json.JsonTokenType.String" />.</span><span class="sxs-lookup"><span data-stu-id="760be-284">The value of the JSON token isn't a <see cref="F:System.Text.Json.JsonTokenType.String" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetDateTimeOffset">
      <MemberSignature Language="C#" Value="public bool TryGetDateTimeOffset (out DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetDateTimeOffset([out] valuetype System.DateTimeOffset&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetDateTimeOffset(System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetDateTimeOffset (ByRef value As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetDateTimeOffset([Runtime::InteropServices::Out] DateTimeOffset % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetDateTimeOffset :  -&gt; bool" Usage="utf8JsonReader.TryGetDateTimeOffset value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="760be-285">Wenn diese Methode zurückgegeben wird, enthält sie den analysierten Wert.</span><span class="sxs-lookup"><span data-stu-id="760be-285">When this method returns, contains the parsed value.</span></span></param>
        <summary><span data-ttu-id="760be-286">Es wird versucht, den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.DateTimeOffset" /> zu analysieren, und es wird ein Wert zurückgegeben, mit dem der Erfolg bzw. Misserfolg des Vorgangs angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="760be-286">Tries to parse the current JSON token value from the source as a <see cref="T:System.DateTimeOffset" /> and returns a value that indicates whether the operation succeeded.</span></span></summary>
        <returns><span data-ttu-id="760be-287"><see langword="true" />, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich in einen <see cref="T:System.DateTimeOffset" />-Wert analysiert werden kann, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="760be-287"><see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.DateTimeOffset" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks><span data-ttu-id="760be-288">Diese Methode erstellt nur eine DateTimeOffset-Darstellung von JSON-Zeichen folgen, die dem erweiterten ISO 8601-1-Format entsprechen (Weitere Informationen finden Sie [unter DateTime-und DateTimeOffset-Unterstützung in System. Text. JSON](~/docs/standard/datetime/system-text-json-support.md)).</span><span class="sxs-lookup"><span data-stu-id="760be-288">This method only creates a DateTimeOffset representation of JSON strings that conform to the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)).</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="760be-289">Der Wert des JSON-Tokens ist kein <see cref="F:System.Text.Json.JsonTokenType.String" />.</span><span class="sxs-lookup"><span data-stu-id="760be-289">The value of the JSON token isn't a <see cref="F:System.Text.Json.JsonTokenType.String" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetDecimal">
      <MemberSignature Language="C#" Value="public bool TryGetDecimal (out decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetDecimal([out] valuetype System.Decimal&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetDecimal(System.Decimal@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetDecimal (ByRef value As Decimal) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetDecimal([Runtime::InteropServices::Out] System::Decimal % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetDecimal :  -&gt; bool" Usage="utf8JsonReader.TryGetDecimal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="760be-290">Wenn diese Methode zurückgegeben wird, enthält sie den analysierten Wert.</span><span class="sxs-lookup"><span data-stu-id="760be-290">When this method returns, contains the parsed value.</span></span></param>
        <summary><span data-ttu-id="760be-291">Es wird versucht, den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.Decimal" /> zu analysieren, und es wird ein Wert zurückgegeben, mit dem der Erfolg bzw. Misserfolg des Vorgangs angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="760be-291">Tries to parse the current JSON token value from the source as a <see cref="T:System.Decimal" /> and returns a value that indicates whether the operation succeeded.</span></span></summary>
        <returns><span data-ttu-id="760be-292"><see langword="true" />, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich in einen <see cref="T:System.Decimal" />-Wert analysiert werden kann, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="760be-292"><see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.Decimal" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="760be-293">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</span><span class="sxs-lookup"><span data-stu-id="760be-293">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetDouble">
      <MemberSignature Language="C#" Value="public bool TryGetDouble (out double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetDouble([out] float64&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetDouble(System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetDouble (ByRef value As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetDouble([Runtime::InteropServices::Out] double % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetDouble :  -&gt; bool" Usage="utf8JsonReader.TryGetDouble value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="760be-294">Wenn diese Methode zurückgegeben wird, enthält sie den analysierten Wert.</span><span class="sxs-lookup"><span data-stu-id="760be-294">When this method returns, contains the parsed value.</span></span></param>
        <summary><span data-ttu-id="760be-295">Es wird versucht, den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.Double" /> zu analysieren, und es wird ein Wert zurückgegeben, mit dem der Erfolg bzw. Misserfolg des Vorgangs angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="760be-295">Tries to parse the current JSON token value from the source as a <see cref="T:System.Double" /> and returns a value that indicates whether the operation succeeded.</span></span></summary>
        <returns><span data-ttu-id="760be-296"><see langword="true" />, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich in einen <see cref="T:System.Double" />-Wert analysiert werden kann, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="760be-296"><see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.Double" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="760be-297">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</span><span class="sxs-lookup"><span data-stu-id="760be-297">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetGuid">
      <MemberSignature Language="C#" Value="public bool TryGetGuid (out Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetGuid([out] valuetype System.Guid&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetGuid(System.Guid@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetGuid (ByRef value As Guid) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetGuid([Runtime::InteropServices::Out] Guid % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetGuid :  -&gt; bool" Usage="utf8JsonReader.TryGetGuid value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Guid" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="760be-298">Wenn diese Methode zurückgegeben wird, enthält sie den analysierten Wert.</span><span class="sxs-lookup"><span data-stu-id="760be-298">When this method returns, contains the parsed value.</span></span></param>
        <summary><span data-ttu-id="760be-299">Es wird versucht, den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.Guid" /> zu analysieren, und es wird ein Wert zurückgegeben, mit dem der Erfolg bzw. Misserfolg des Vorgangs angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="760be-299">Tries to parse the current JSON token value from the source as a <see cref="T:System.Guid" /> and returns a value that indicates whether the operation succeeded.</span></span></summary>
        <returns><span data-ttu-id="760be-300"><see langword="true" />, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich in einen <see cref="T:System.Guid" />-Wert analysiert werden kann, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="760be-300"><see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.Guid" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="760be-301">Diese Methode analysiert <xref:System.Guid> nur Werte mit Bindestrichen und ohne umgebende Dekorationen.</span><span class="sxs-lookup"><span data-stu-id="760be-301">This method only parses <xref:System.Guid> values with hyphens and without any surrounding decorations.</span></span> 

         ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="760be-302">Der Wert des JSON-Tokens ist kein <see cref="F:System.Text.Json.JsonTokenType.String" />.</span><span class="sxs-lookup"><span data-stu-id="760be-302">The value of the JSON token isn't a <see cref="F:System.Text.Json.JsonTokenType.String" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetInt16">
      <MemberSignature Language="C#" Value="public bool TryGetInt16 (out short value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetInt16([out] int16&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetInt16(System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetInt16 (ByRef value As Short) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetInt16([Runtime::InteropServices::Out] short % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetInt16 :  -&gt; bool" Usage="utf8JsonReader.TryGetInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="760be-303">Wenn diese Methode zurückgegeben wird, enthält sie den analysierten Wert.</span><span class="sxs-lookup"><span data-stu-id="760be-303">When this method returns, contains the parsed value.</span></span></param>
        <summary><span data-ttu-id="760be-304">Es wird versucht, den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.Int16" /> zu analysieren, und es wird ein Wert zurückgegeben, mit dem der Erfolg bzw. Misserfolg des Vorgangs angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="760be-304">Tries to parse the current JSON token value from the source as an <see cref="T:System.Int16" /> and returns a value that indicates whether the operation succeeded.</span></span></summary>
        <returns><span data-ttu-id="760be-305"><see langword="true" />, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich in einen <see cref="T:System.Int16" />-Wert analysiert werden kann, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="760be-305"><see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.Int16" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="760be-306">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</span><span class="sxs-lookup"><span data-stu-id="760be-306">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetInt32">
      <MemberSignature Language="C#" Value="public bool TryGetInt32 (out int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetInt32([out] int32&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetInt32(System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetInt32 (ByRef value As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetInt32([Runtime::InteropServices::Out] int % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetInt32 :  -&gt; bool" Usage="utf8JsonReader.TryGetInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="760be-307">Wenn diese Methode zurückgegeben wird, enthält sie den analysierten Wert.</span><span class="sxs-lookup"><span data-stu-id="760be-307">When this method returns, contains the parsed value.</span></span></param>
        <summary><span data-ttu-id="760be-308">Es wird versucht, den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.Int32" /> zu analysieren, und es wird ein Wert zurückgegeben, mit dem der Erfolg bzw. Misserfolg des Vorgangs angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="760be-308">Tries to parse the current JSON token value from the source as an <see cref="T:System.Int32" /> and returns a value that indicates whether the operation succeeded.</span></span></summary>
        <returns><span data-ttu-id="760be-309"><see langword="true" />, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich in einen <see cref="T:System.Int32" />-Wert analysiert werden kann, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="760be-309"><see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to an <see cref="T:System.Int32" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="760be-310">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</span><span class="sxs-lookup"><span data-stu-id="760be-310">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetInt64">
      <MemberSignature Language="C#" Value="public bool TryGetInt64 (out long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetInt64([out] int64&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetInt64(System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetInt64 (ByRef value As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetInt64([Runtime::InteropServices::Out] long % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetInt64 :  -&gt; bool" Usage="utf8JsonReader.TryGetInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="760be-311">Wenn diese Methode zurückgegeben wird, enthält sie den analysierten Wert.</span><span class="sxs-lookup"><span data-stu-id="760be-311">When this method returns, contains the parsed value.</span></span></param>
        <summary><span data-ttu-id="760be-312">Es wird versucht, den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.Int64" /> zu analysieren, und es wird ein Wert zurückgegeben, mit dem der Erfolg bzw. Misserfolg des Vorgangs angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="760be-312">Tries to parse the current JSON token value from the source as an <see cref="T:System.Int64" /> and returns a value that indicates whether the operation succeeded.</span></span></summary>
        <returns><span data-ttu-id="760be-313"><see langword="true" />, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich in einen <see cref="T:System.Int64" />-Wert analysiert werden kann, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="760be-313"><see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to an <see cref="T:System.Int64" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="760be-314">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</span><span class="sxs-lookup"><span data-stu-id="760be-314">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetSByte">
      <MemberSignature Language="C#" Value="public bool TryGetSByte (out sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetSByte([out] int8&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetSByte(System.SByte@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetSByte (ByRef value As SByte) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetSByte([Runtime::InteropServices::Out] System::SByte % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetSByte :  -&gt; bool" Usage="utf8JsonReader.TryGetSByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="760be-315">Wenn diese Methode zurückgegeben wird, enthält sie den analysierten Wert.</span><span class="sxs-lookup"><span data-stu-id="760be-315">When this method returns, contains the parsed value.</span></span></param>
        <summary><span data-ttu-id="760be-316">Es wird versucht, den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.SByte" /> zu analysieren, und es wird ein Wert zurückgegeben, mit dem der Erfolg bzw. Misserfolg des Vorgangs angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="760be-316">Tries to parse the current JSON token value from the source as an <see cref="T:System.SByte" /> and returns a value that indicates whether the operation succeeded.</span></span></summary>
        <returns><span data-ttu-id="760be-317"><see langword="true" />, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich in einen <see cref="T:System.SByte" />-Wert analysiert werden kann, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="760be-317"><see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to an <see cref="T:System.SByte" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="760be-318">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</span><span class="sxs-lookup"><span data-stu-id="760be-318">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetSingle">
      <MemberSignature Language="C#" Value="public bool TryGetSingle (out float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetSingle([out] float32&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetSingle(System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetSingle (ByRef value As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetSingle([Runtime::InteropServices::Out] float % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetSingle :  -&gt; bool" Usage="utf8JsonReader.TryGetSingle value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="760be-319">Wenn diese Methode zurückgegeben wird, enthält sie den analysierten Wert.</span><span class="sxs-lookup"><span data-stu-id="760be-319">When this method returns, contains the parsed value.</span></span></param>
        <summary><span data-ttu-id="760be-320">Es wird versucht, den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.Single" /> zu analysieren, und es wird ein Wert zurückgegeben, mit dem der Erfolg bzw. Misserfolg des Vorgangs angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="760be-320">Tries to parse the current JSON token value from the source as a <see cref="T:System.Single" /> and returns a value that indicates whether the operation succeeded.</span></span></summary>
        <returns><span data-ttu-id="760be-321"><see langword="true" />, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich in einen <see cref="T:System.Single" />-Wert analysiert werden kann, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="760be-321"><see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to an <see cref="T:System.Single" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="760be-322">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</span><span class="sxs-lookup"><span data-stu-id="760be-322">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetUInt16">
      <MemberSignature Language="C#" Value="public bool TryGetUInt16 (out ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetUInt16([out] unsigned int16&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetUInt16(System.UInt16@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetUInt16 (ByRef value As UShort) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetUInt16([Runtime::InteropServices::Out] System::UInt16 % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetUInt16 :  -&gt; bool" Usage="utf8JsonReader.TryGetUInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="760be-323">Wenn diese Methode zurückgegeben wird, enthält sie den analysierten Wert.</span><span class="sxs-lookup"><span data-stu-id="760be-323">When this method returns, contains the parsed value.</span></span></param>
        <summary><span data-ttu-id="760be-324">Es wird versucht, den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.UInt16" /> zu analysieren, und es wird ein Wert zurückgegeben, mit dem der Erfolg bzw. Misserfolg des Vorgangs angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="760be-324">Tries to parse the current JSON token value from the source as a <see cref="T:System.UInt16" /> and returns a value that indicates whether the operation succeeded.</span></span></summary>
        <returns><span data-ttu-id="760be-325"><see langword="true" />, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich in einen <see cref="T:System.UInt16" />-Wert analysiert werden kann, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="760be-325"><see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.UInt16" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="760be-326">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</span><span class="sxs-lookup"><span data-stu-id="760be-326">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetUInt32">
      <MemberSignature Language="C#" Value="public bool TryGetUInt32 (out uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetUInt32([out] unsigned int32&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetUInt32(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetUInt32 (ByRef value As UInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetUInt32([Runtime::InteropServices::Out] System::UInt32 % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetUInt32 :  -&gt; bool" Usage="utf8JsonReader.TryGetUInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="760be-327">Wenn diese Methode zurückgegeben wird, enthält sie den analysierten Wert.</span><span class="sxs-lookup"><span data-stu-id="760be-327">When this method returns, contains the parsed value.</span></span></param>
        <summary><span data-ttu-id="760be-328">Es wird versucht, den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.UInt32" /> zu analysieren, und es wird ein Wert zurückgegeben, mit dem der Erfolg bzw. Misserfolg des Vorgangs angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="760be-328">Tries to parse the current JSON token value from the source as a <see cref="T:System.UInt32" /> and returns a value that indicates whether the operation succeeded.</span></span></summary>
        <returns><span data-ttu-id="760be-329"><see langword="true" />, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich in einen <see cref="T:System.UInt32" />-Wert analysiert werden kann, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="760be-329"><see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.UInt32" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="760be-330">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</span><span class="sxs-lookup"><span data-stu-id="760be-330">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetUInt64">
      <MemberSignature Language="C#" Value="public bool TryGetUInt64 (out ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetUInt64([out] unsigned int64&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetUInt64(System.UInt64@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetUInt64 (ByRef value As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetUInt64([Runtime::InteropServices::Out] System::UInt64 % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetUInt64 :  -&gt; bool" Usage="utf8JsonReader.TryGetUInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="760be-331">Wenn diese Methode zurückgegeben wird, enthält sie den analysierten Wert.</span><span class="sxs-lookup"><span data-stu-id="760be-331">When this method returns, contains the parsed value.</span></span></param>
        <summary><span data-ttu-id="760be-332">Es wird versucht, den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.UInt64" /> zu analysieren, und es wird ein Wert zurückgegeben, mit dem der Erfolg bzw. Misserfolg des Vorgangs angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="760be-332">Tries to parse the current JSON token value from the source as a <see cref="T:System.UInt64" /> and returns a value that indicates whether the operation succeeded.</span></span></summary>
        <returns><span data-ttu-id="760be-333"><see langword="true" />, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich in einen <see cref="T:System.UInt64" />-Wert analysiert werden kann, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="760be-333"><see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.UInt64" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="760be-334">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</span><span class="sxs-lookup"><span data-stu-id="760be-334">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TrySkip">
      <MemberSignature Language="C#" Value="public bool TrySkip ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TrySkip() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TrySkip" />
      <MemberSignature Language="VB.NET" Value="Public Function TrySkip () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TrySkip();" />
      <MemberSignature Language="F#" Value="member this.TrySkip : unit -&gt; bool" Usage="utf8JsonReader.TrySkip " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="760be-335">Versucht, die untergeordneten Elemente des aktuellen JSON-Tokens zu überspringen.</span><span class="sxs-lookup"><span data-stu-id="760be-335">Tries to skip the children of the current JSON token.</span></span></summary>
        <returns><span data-ttu-id="760be-336"><see langword="true" /> wenn genügend Daten vorhanden waren, um die untergeordneten Elemente erfolgreich zu überspringen; andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="760be-336"><see langword="true" /> if there was enough data for the children to be skipped successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="760be-337">Wenn der Reader nicht über genügend Daten verfügt, um die untergeordneten Elemente des aktuellen Tokens vollständig zu überspringen, wird er auf den Zustand zurückgesetzt, in dem er sich vor dem Aufrufen der-Methode befand.</span><span class="sxs-lookup"><span data-stu-id="760be-337">If the reader did not have enough data to completely skip the children of the current token, it will be reset to the state it was in before the method was called.</span></span>
              
<span data-ttu-id="760be-338">Wenn <xref:System.Text.Json.Utf8JsonReader.TokenType>den Wert hat,wechseltderReaderzuerstinden-EigenschaftsWert.<xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="760be-338">When <xref:System.Text.Json.Utf8JsonReader.TokenType> is <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType>, the reader first moves to the property value.</span></span>

<span data-ttu-id="760be-339">Wenn <xref:System.Text.Json.Utf8JsonReader.TokenType> (ursprünglich oder nach der Weiterentwicklung) <xref:System.Text.Json.JsonTokenType.StartObject?displayProperty=nameWithType> oder <xref:System.Text.Json.JsonTokenType.StartArray?displayProperty=nameWithType>ist, wechselt der Reader zum passenden <xref:System.Text.Json.JsonTokenType.EndObject?displayProperty=nameWithType> oder <xref:System.Text.Json.JsonTokenType.EndArray?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="760be-339">When <xref:System.Text.Json.Utf8JsonReader.TokenType> (originally, or after advancing) is <xref:System.Text.Json.JsonTokenType.StartObject?displayProperty=nameWithType> or <xref:System.Text.Json.JsonTokenType.StartArray?displayProperty=nameWithType>, the reader advances to the matching <xref:System.Text.Json.JsonTokenType.EndObject?displayProperty=nameWithType> or <xref:System.Text.Json.JsonTokenType.EndArray?displayProperty=nameWithType>.</span></span>
            
<span data-ttu-id="760be-340">Für alle anderen Tokentypen wird der Reader nicht verschoben.</span><span class="sxs-lookup"><span data-stu-id="760be-340">For all other token types, the reader does not move.</span></span> <span data-ttu-id="760be-341">Nach dem nächsten <xref:System.Text.Json.Utf8JsonReader.Read>-Vorgang wird der Reader beim nächsten Wert (in einem Array), beim nächsten Eigenschaftsnamen (bei einem-Objekt) oder beim endarray-/Objekttoken verwendet.</span><span class="sxs-lookup"><span data-stu-id="760be-341">After the next call to <xref:System.Text.Json.Utf8JsonReader.Read>, the reader will be at the next value (when in an array), the next property name (when in an object), or the end array/object token.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="760be-342">Beim Überspringen wurde ein gemäß JSON-RFC ungültiges JSON-Token gefunden.</span><span class="sxs-lookup"><span data-stu-id="760be-342">An invalid JSON token was encountered while skipping, according to the JSON RFC.</span></span>
          
<span data-ttu-id="760be-343">- oder -</span><span class="sxs-lookup"><span data-stu-id="760be-343">-or -</span></span>

<span data-ttu-id="760be-344">Die aktuelle Tiefe übersteigt den rekursiven Grenzwert, der durch die maximale Tiefe festgelegt ist.</span><span class="sxs-lookup"><span data-stu-id="760be-344">The current depth exceeds the recursive limit set by the maximum depth.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ValueSequence">
      <MemberSignature Language="C#" Value="public System.Buffers.ReadOnlySequence&lt;byte&gt; ValueSequence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Buffers.ReadOnlySequence`1&lt;unsigned int8&gt; ValueSequence" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.ValueSequence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValueSequence As ReadOnlySequence(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Buffers::ReadOnlySequence&lt;System::Byte&gt; ValueSequence { System::Buffers::ReadOnlySequence&lt;System::Byte&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.ValueSequence : System.Buffers.ReadOnlySequence&lt;byte&gt;" Usage="System.Text.Json.Utf8JsonReader.ValueSequence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Buffers.ReadOnlySequence&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="760be-345">Ruft den Wert des zuletzt verarbeiteten Tokens als einen <see cref="T:System.ReadOnlySpan`1" />-Slice der Eingabenutzlast ab.</span><span class="sxs-lookup"><span data-stu-id="760be-345">Gets the value of the last processed token as a <see cref="T:System.ReadOnlySpan`1" /> slice of the input payload.</span></span> <span data-ttu-id="760be-346">Wenn der JSON-Code innerhalb eines <see cref="T:System.Buffers.ReadOnlySequence`1" /> bereitgestellt wird und der Slice, der den Tokenwert darstellt, in ein einzelnes Segment passt, enthält <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" /> den Slicewert, weil die Darstellung als Bereich möglich ist.</span><span class="sxs-lookup"><span data-stu-id="760be-346">If the JSON is provided within a <see cref="T:System.Buffers.ReadOnlySequence`1" /> and the slice that represents the token value fits in a single segment, then <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" /> contains the sliced value since it can be represented as a span.</span></span> <span data-ttu-id="760be-347">Andernfalls enthält <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" /> den Tokenwert.</span><span class="sxs-lookup"><span data-stu-id="760be-347">Otherwise, <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" /> contains the token value.</span></span></summary>
        <value><span data-ttu-id="760be-348">Eine schreibgeschützte Byte-Sequenz.</span><span class="sxs-lookup"><span data-stu-id="760be-348">A byte read-only sequence.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks


<span data-ttu-id="760be-349">Wenn <xref:System.Text.Json.Utf8JsonReader.HasValueSequence> ist `false` ,`ValueSequence` ist leer.</span><span class="sxs-lookup"><span data-stu-id="760be-349">If <xref:System.Text.Json.Utf8JsonReader.HasValueSequence> is `false`, `ValueSequence` is empty.</span></span> <span data-ttu-id="760be-350">Daher wird `ValueSequence` <xref:System.Text.Json.Utf8JsonReader.HasValueSequence> nur`true`auf zugegriffen, wenn den Wert hat.</span><span class="sxs-lookup"><span data-stu-id="760be-350">Therefore, only access `ValueSequence` if <xref:System.Text.Json.Utf8JsonReader.HasValueSequence> is `true`.</span></span>
<span data-ttu-id="760be-351">Andernfalls muss auf den Tokenwert von <xref:System.Text.Json.Utf8JsonReader.ValueSpan>zugegriffen werden.</span><span class="sxs-lookup"><span data-stu-id="760be-351">Otherwise, the token value must be accessed from <xref:System.Text.Json.Utf8JsonReader.ValueSpan>.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueSpan">
      <MemberSignature Language="C#" Value="public ReadOnlySpan&lt;byte&gt; ValueSpan { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; ValueSpan" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.ValueSpan" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValueSpan As ReadOnlySpan(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property ReadOnlySpan&lt;System::Byte&gt; ValueSpan { ReadOnlySpan&lt;System::Byte&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.ValueSpan : ReadOnlySpan&lt;byte&gt;" Usage="System.Text.Json.Utf8JsonReader.ValueSpan" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="760be-352">Ruft den Wert des zuletzt verarbeiteten Tokens als einen ReadOnlySpan&lt;Byte&gt;-Slice der Eingabenutzlast ab.</span><span class="sxs-lookup"><span data-stu-id="760be-352">Gets the value of the last processed token as a ReadOnlySpan&lt;byte&gt; slice of the input payload.</span></span> <span data-ttu-id="760be-353">Wenn der JSON-Code innerhalb eines ReadOnlySequence&lt;Byte&gt; bereitgestellt wird und der Slice, der den Tokenwert darstellt, in ein einzelnes Segment passt, enthält <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" /> den Slicewert, da es als ein Bereich dargestellt werden kann.</span><span class="sxs-lookup"><span data-stu-id="760be-353">If the JSON is provided within a ReadOnlySequence&lt;byte&gt; and the slice that represents the token value fits in a single segment, then <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" /> contains the sliced value since it can be represented as a span.</span></span> <span data-ttu-id="760be-354">Andernfalls enthält <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" /> den Tokenwert.</span><span class="sxs-lookup"><span data-stu-id="760be-354">Otherwise, the <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" /> contains the token value.</span></span></summary>
        <value><span data-ttu-id="760be-355">Ein schreibgeschützter Bytes-Span.</span><span class="sxs-lookup"><span data-stu-id="760be-355">A read-only span of bytes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="760be-356">Wenn <xref:System.Text.Json.Utf8JsonReader.HasValueSequence> ist `true` ,<xref:System.Text.Json.Utf8JsonReader.ValueSpan> ist leer.</span><span class="sxs-lookup"><span data-stu-id="760be-356">If <xref:System.Text.Json.Utf8JsonReader.HasValueSequence> is `true`, <xref:System.Text.Json.Utf8JsonReader.ValueSpan> is empty.</span></span> <span data-ttu-id="760be-357">Daher wird `ValueSpan` <xref:System.Text.Json.Utf8JsonReader.HasValueSequence> nur`false`auf zugegriffen, wenn den Wert hat.</span><span class="sxs-lookup"><span data-stu-id="760be-357">Therefore, only access `ValueSpan` if <xref:System.Text.Json.Utf8JsonReader.HasValueSequence> is `false`.</span></span>
<span data-ttu-id="760be-358">Andernfalls muss auf den Tokenwert von <xref:System.Text.Json.Utf8JsonReader.ValueSequence>zugegriffen werden.</span><span class="sxs-lookup"><span data-stu-id="760be-358">Otherwise, the token value must be accessed from <xref:System.Text.Json.Utf8JsonReader.ValueSequence>.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ValueTextEquals">
      <Docs>
        <summary><span data-ttu-id="760be-359">Vergleicht den angegebenen Text mit dem JSON-Tokenwert ohne Escapezeichen in der Quelle und gibt einen Wert zurück, der angibt, ob eine Übereinstimmung besteht.</span><span class="sxs-lookup"><span data-stu-id="760be-359">Compares the specified text to the unescaped JSON token value in the source and returns a value that indicates whether they match.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="760be-360">Wenn der Suchtext einen ungültigen UTF-8-Text hat, gibt die `false` Methode zurück, da Sie in der JSON-Nutzlast keinen ungültigen UTF-8-Wert haben können.</span><span class="sxs-lookup"><span data-stu-id="760be-360">If the look-up text is invalid UTF-8 text, the method returns `false` since you can't have invalid UTF-8 within the JSON payload.</span></span>

<span data-ttu-id="760be-361">Der Vergleich des JSON-tokenwerts in der Quelle und dem Suchtext erfolgt durch das erste Escapezeichen des JSON-Werts in der Quelle (falls erforderlich).</span><span class="sxs-lookup"><span data-stu-id="760be-361">The comparison of the JSON token value in the source and the lookup text is done by first unescaping the JSON value in source, if required.</span></span> <span data-ttu-id="760be-362">Der Suchtext wird unverändert abgeglichen.</span><span class="sxs-lookup"><span data-stu-id="760be-362">The look-up text is matched as is, without any modification.</span></span>

         ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ValueTextEquals">
      <MemberSignature Language="C#" Value="public bool ValueTextEquals (ReadOnlySpan&lt;byte&gt; utf8Text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ValueTextEquals(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Function ValueTextEquals (utf8Text As ReadOnlySpan(Of Byte)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ValueTextEquals(ReadOnlySpan&lt;System::Byte&gt; utf8Text);" />
      <MemberSignature Language="F#" Value="member this.ValueTextEquals : ReadOnlySpan&lt;byte&gt; -&gt; bool" Usage="utf8JsonReader.ValueTextEquals utf8Text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Text" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8Text"><span data-ttu-id="760be-363">Der UTF-8-codierte Text für den Vergleich.</span><span class="sxs-lookup"><span data-stu-id="760be-363">The UTF-8 encoded text to compare against.</span></span></param>
        <summary><span data-ttu-id="760be-364">Vergleicht den UTF-8-codierten Text in einem schreibgeschützten Bytebereich mit dem JSON-Tokenwert ohne Escapezeichen in der Quelle und gibt einen Wert zurück, der angibt, ob eine Übereinstimmung besteht.</span><span class="sxs-lookup"><span data-stu-id="760be-364">Compares the UTF-8 encoded text in a read-only byte span to the unescaped JSON token value in the source and returns a value that indicates whether they match.</span></span></summary>
        <returns><span data-ttu-id="760be-365"><see langword="true" />, wenn der JSON-Tokenwert in der Quelle mit dem UTF-8-codierten Suchtext übereinstimmt, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="760be-365"><see langword="true" /> if the JSON token value in the source matches the UTF-8 encoded lookup text; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="760be-366">Wenn der Suchtext einen ungültigen UTF-8-Text hat, gibt `false` die Methode zurück, da Sie in der JSON-Nutzlast keinen ungültigen UTF-8-Wert haben können.</span><span class="sxs-lookup"><span data-stu-id="760be-366">If the lookup text is invalid UTF-8 text, the method returns `false` since you can't have invalid UTF-8 within the JSON payload.</span></span>
              
<span data-ttu-id="760be-367">Der Vergleich des JSON-tokenwerts in der Quelle und dem Suchtext erfolgt durch das erste Escapezeichen des JSON-Werts in der Quelle (falls erforderlich).</span><span class="sxs-lookup"><span data-stu-id="760be-367">The comparison of the JSON token value in the source and the lookup text is done by first unescaping the JSON value in source, if required.</span></span> <span data-ttu-id="760be-368">Der Suchtext wird unverändert abgeglichen, ohne dass Änderungen vorgenommen werden.</span><span class="sxs-lookup"><span data-stu-id="760be-368">The lookup text is matched as is, without any modifications to it.</span></span>
              
          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="760be-369">Das JSON-Token, bei dem es sich nicht um eine Zeichenfolge handelt (also nicht <see cref="F:System.Text.Json.JsonTokenType.String" /> oder <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />).</span><span class="sxs-lookup"><span data-stu-id="760be-369">The JSON token that is not a string (that is, it is not <see cref="F:System.Text.Json.JsonTokenType.String" /> or <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ValueTextEquals">
      <MemberSignature Language="C#" Value="public bool ValueTextEquals (ReadOnlySpan&lt;char&gt; text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ValueTextEquals(valuetype System.ReadOnlySpan`1&lt;char&gt; text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Function ValueTextEquals (text As ReadOnlySpan(Of Char)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ValueTextEquals(ReadOnlySpan&lt;char&gt; text);" />
      <MemberSignature Language="F#" Value="member this.ValueTextEquals : ReadOnlySpan&lt;char&gt; -&gt; bool" Usage="utf8JsonReader.ValueTextEquals text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="760be-370">Der UTF-8-codierte Text für den Vergleich.</span><span class="sxs-lookup"><span data-stu-id="760be-370">The UTF-8 encoded text to compare against.</span></span></param>
        <summary><span data-ttu-id="760be-371">Vergleicht den UTF-8-codierten Text in einem schreibgeschützten Zeichenbereich mit dem JSON-Tokenwert ohne Escapezeichen in der Quelle und gibt einen Wert zurück, der angibt, ob eine Übereinstimmung besteht.</span><span class="sxs-lookup"><span data-stu-id="760be-371">Compares the UTF-8 encoded text in a read-only character span to the unescaped JSON token value in the source and returns a value that indicates whether they match.</span></span></summary>
        <returns><span data-ttu-id="760be-372"><see langword="true" />, wenn der JSON-Tokenwert in der Quelle mit dem UTF-8-codierten Suchtext übereinstimmt, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="760be-372"><see langword="true" /> if the JSON token value in the source matches the UTF-8 encoded lookup text; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="760be-373">Wenn es sich bei dem Suchtext um einen ungültigen oder unvollständigen UTF-16-Text handelt (d. h. nicht `false` zugeordnete Surrogates), gibt die Methode zurück, da Sie in der JSON-Nutzlast kein ungültiges UTF-16-</span><span class="sxs-lookup"><span data-stu-id="760be-373">If the lookup text is invalid or incomplete UTF-16 text (that is, unpaired surrogates), the method returns `false` since you can't have invalid UTF-16 within the JSON payload.</span></span>
              
<span data-ttu-id="760be-374">Der Vergleich des JSON-tokenwerts in der Quelle und dem Suchtext erfolgt durch das erste Escapezeichen des JSON-Werts in der Quelle (falls erforderlich).</span><span class="sxs-lookup"><span data-stu-id="760be-374">The comparison of the JSON token value in the source and the lookup text is done by first unescaping the JSON value in source, if required.</span></span> <span data-ttu-id="760be-375">Der Suchtext wird unverändert abgeglichen, ohne dass Änderungen vorgenommen werden.</span><span class="sxs-lookup"><span data-stu-id="760be-375">The lookup text is matched as is, without any modifications to it.</span></span>
              
          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="760be-376">Das JSON-Token, bei dem es sich nicht um eine Zeichenfolge handelt (also nicht <see cref="F:System.Text.Json.JsonTokenType.String" /> oder <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />).</span><span class="sxs-lookup"><span data-stu-id="760be-376">The JSON token that is not a string (that is, it is not <see cref="F:System.Text.Json.JsonTokenType.String" /> or <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ValueTextEquals">
      <MemberSignature Language="C#" Value="public bool ValueTextEquals (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ValueTextEquals(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ValueTextEquals (text As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ValueTextEquals(System::String ^ text);" />
      <MemberSignature Language="F#" Value="member this.ValueTextEquals : string -&gt; bool" Usage="utf8JsonReader.ValueTextEquals text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="760be-377">Der Text, mit dem verglichen werden soll.</span><span class="sxs-lookup"><span data-stu-id="760be-377">The text to compare against.</span></span></param>
        <summary><span data-ttu-id="760be-378">Vergleicht den Text in einem schreibgeschützten Zeichenbereich mit dem JSON-Tokenwert ohne Escapezeichen in der Quelle und gibt einen Wert zurück, der angibt, ob eine Übereinstimmung besteht.</span><span class="sxs-lookup"><span data-stu-id="760be-378">Compares the text in a character span to the unescaped JSON token value in the source and returns a value that indicates whether they match.</span></span></summary>
        <returns><span data-ttu-id="760be-379"><see langword="true" />, wenn der JSON-Tokenwert in der Quelle mit dem Suchtext übereinstimmt, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="760be-379"><see langword="true" /> if the JSON token value in the source matches the lookup text; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="760be-380">Wenn der Suchtext einen ungültigen UTF-8-Text hat, gibt `false` die Methode zurück, da Sie in der JSON-Nutzlast keinen ungültigen UTF-8-Wert haben können.</span><span class="sxs-lookup"><span data-stu-id="760be-380">If the lookup text is invalid UTF-8 text, the method returns `false` since you can't have invalid UTF-8 within the JSON payload.</span></span>
              
<span data-ttu-id="760be-381">Der Vergleich des JSON-tokenwerts in der Quelle und dem Suchtext erfolgt durch das erste Escapezeichen des JSON-Werts in der Quelle (falls erforderlich).</span><span class="sxs-lookup"><span data-stu-id="760be-381">The comparison of the JSON token value in the source and the lookup text is done by first unescaping the JSON value in source, if required.</span></span> <span data-ttu-id="760be-382">Der Suchtext wird unverändert abgeglichen, ohne dass Änderungen vorgenommen werden.</span><span class="sxs-lookup"><span data-stu-id="760be-382">The lookup text is matched as is, without any modifications to it.</span></span>
              
          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="760be-383">Das JSON-Token, bei dem es sich nicht um eine Zeichenfolge handelt (also nicht <see cref="F:System.Text.Json.JsonTokenType.String" /> oder <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />).</span><span class="sxs-lookup"><span data-stu-id="760be-383">The JSON token that is not a string (that is, it is not <see cref="F:System.Text.Json.JsonTokenType.String" /> or <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />).</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>

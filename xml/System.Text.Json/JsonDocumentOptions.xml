<Type Name="JsonDocumentOptions" FullName="System.Text.Json.JsonDocumentOptions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="10c51c86214ad125be68ba900907e9e72abed297" /><Meta Name="ms.sourcegitcommit" Value="394eb46af92ad32373cd2c7855b688846886ed40" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="11/23/2019" /><Meta Name="ms.locfileid" Value="74425695" /></Metadata><TypeSignature Language="C#" Value="public struct JsonDocumentOptions" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit JsonDocumentOptions extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.JsonDocumentOptions" />
  <TypeSignature Language="VB.NET" Value="Public Structure JsonDocumentOptions" />
  <TypeSignature Language="C++ CLI" Value="public value class JsonDocumentOptions" />
  <TypeSignature Language="F#" Value="type JsonDocumentOptions = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Bietet dem Benutzer die Möglichkeit, benutzerdefiniertes Verhalten beim Analysieren von JSON zum Erstellen von <see cref="T:System.Text.Json.JsonDocument" /> zu definieren.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

Weitere Informationen finden Sie unter Gewusst [wie: Serialisieren und Deserialisieren von JSON](~/docs/standard/serialization/system-text-json-how-to.md).

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AllowTrailingCommas">
      <MemberSignature Language="C#" Value="public bool AllowTrailingCommas { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowTrailingCommas" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonDocumentOptions.AllowTrailingCommas" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowTrailingCommas As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowTrailingCommas { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowTrailingCommas : bool with get, set" Usage="System.Text.Json.JsonDocumentOptions.AllowTrailingCommas" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob ein zusätzliches Komma am Ende einer Liste von JSON-Werten in einem Objekt oder Array in der gelesenen JSON-Nutzlast zulässig ist (und ignoriert wird), oder legt diesen Wert fest.</summary>
        <value><see langword="true" />, wenn ein zusätzliches Komma am Ende einer Liste von JSON-Werten in einem Objekt oder Array zulässig ist. Andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Standardmäßig ist `AllowTrailingCommas` auf `false`festgelegt, und es wird eine <xref:System.Text.Json.JsonException> ausgelöst, wenn ein nach gestelltes Komma auftritt.

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommentHandling">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonCommentHandling CommentHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonCommentHandling CommentHandling" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonDocumentOptions.CommentHandling" />
      <MemberSignature Language="VB.NET" Value="Public Property CommentHandling As JsonCommentHandling" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonCommentHandling CommentHandling { System::Text::Json::JsonCommentHandling get(); void set(System::Text::Json::JsonCommentHandling value); };" />
      <MemberSignature Language="F#" Value="member this.CommentHandling : System.Text.Json.JsonCommentHandling with get, set" Usage="System.Text.Json.JsonDocumentOptions.CommentHandling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonCommentHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der bestimmt, wie <see cref="T:System.Text.Json.JsonDocument" /> beim Durchlesen der JSON-Daten Kommentare behandelt, oder legt diesen fest.</summary>
        <value>Einer der Enumerationswerte, der angibt, wie Kommentare behandelt werden.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Standardmäßig wird eine <xref:System.Text.Json.JsonException> ausgelöst, wenn ein Kommentar auftritt.

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Enumeration für die Kommentarbehandlung wird auf einen Wert festgelegt, der nicht unterstützt wird (oder nicht innerhalb des <see cref="T:System.Text.Json.JsonCommentHandling" />-Enumeratiosbereichs liegt).</exception>
      </Docs>
    </Member>
    <Member MemberName="MaxDepth">
      <MemberSignature Language="C#" Value="public int MaxDepth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxDepth" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonDocumentOptions.MaxDepth" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxDepth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxDepth { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaxDepth : int with get, set" Usage="System.Text.Json.JsonDocumentOptions.MaxDepth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die beim Analysieren von JSON-Daten maximal zulässige Tiefe ab oder legt sie fest, wobei standardmäßig (d.h. 0 ) eine maximale Tiefe von 64 angegeben wird.</summary>
        <value>Die maximal zulässige Tiefe beim Auswerten von JSON-Daten.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Wenn Sie diese Tiefe überschreiten, wird eine <xref:System.Text.Json.JsonException>ausgelöst.

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die maximale Tiefe wird auf einen negativen Wert festgelegt.</exception>
      </Docs>
    </Member>
  </Members>
</Type>

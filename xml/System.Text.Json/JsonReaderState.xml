<Type Name="JsonReaderState" FullName="System.Text.Json.JsonReaderState">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d386b281807892b675f776fc4588d6c1b2e7df63" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69145147" /></Metadata><TypeSignature Language="C#" Value="public struct JsonReaderState" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit JsonReaderState extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.JsonReaderState" />
  <TypeSignature Language="VB.NET" Value="Public Structure JsonReaderState" />
  <TypeSignature Language="C++ CLI" Value="public value class JsonReaderState" />
  <TypeSignature Language="F#" Value="type JsonReaderState = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Definiert einen nicht transparenten Typ, der alle relevanten Statusinformationen enthält und speichert, die <see cref="T:System.Text.Json.Utf8JsonReader" /> bereitgestellt werden müssen, um den Lesevorgang nach der Verarbeitung unvollständiger Daten fortzusetzen.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

`JsonReaderState`ist erforderlich, um das erneute eintreten beim Lesen unvollständiger Daten zu unterstützen, und um das Lesen fortzusetzen, sobald weitere Daten verfügbar sind. Anders als <xref:System.Text.Json.Utf8JsonReader> bei der Struktur, bei der es sich um eine Ref-Struktur handelt, kann dieser Typ über asynchrone/warte Ende Grenzen hinweg überstehen. Daher muss er Unterstützung für das asynchrone Lesen von <xref:System.Text.Json.Utf8JsonReader>Daten vor dem Fortsetzen einer neuen Instanz von bereitstellen.

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JsonReaderState (System.Text.Json.JsonReaderOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Text.Json.JsonReaderOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonReaderState.#ctor(System.Text.Json.JsonReaderOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (Optional options As JsonReaderOptions = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.JsonReaderState : System.Text.Json.JsonReaderOptions -&gt; System.Text.Json.JsonReaderState" Usage="new System.Text.Json.JsonReaderState options" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="options" Type="System.Text.Json.JsonReaderOptions" />
      </Parameters>
      <Docs>
        <param name="options">Definiert das benutzerdefinierte Verhalten des <see cref="T:System.Text.Json.Utf8JsonReader" />, das sich vom JSON RFC unterscheidet (z.B. die Handhabung von Kommentaren oder die maximal zulässige Tiefe beim Lesen). In der Standardeinstellung folgt <see cref="T:System.Text.Json.Utf8JsonReader" /> streng dem JSON RFC (Kommentare im JSON-Code sind ungültig) und liest bis zu einer maximalen Tiefe von 64.</param>
        <summary>Erstellt eine neue <see cref="T:System.Text.Json.JsonReaderState" />-Instanz.</summary>
        <remarks>
          <format><![CDATA[
          
Eine Instanz dieses Zustands muss mit den JSON- <xref:System.Text.Json.Utf8JsonReader> Daten an den Konstruktor übergeben werden. Anders als <xref:System.Text.Json.Utf8JsonReader>bei der, bei der es sich um eine Ref-Struktur handelt, kann der Zustand über asynchrone/warte Ende Grenzen hinweg bestehen. Daher muss dieser Typ Unterstützung für das asynchrone Lesen <xref:System.Text.Json.Utf8JsonReader>von Daten vor dem Fortsetzen einer neuen Instanz von bieten.
            
            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Die maximale Tiefe wird auf einen nicht positiven Wert (&lt; 0) festgelegt.</exception>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonReaderOptions Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonReaderOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonReaderState.Options" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Options As JsonReaderOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonReaderOptions Options { System::Text::Json::JsonReaderOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Text.Json.JsonReaderOptions" Usage="System.Text.Json.JsonReaderState.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonReaderOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das benutzerdefinierte Verhalten ab, das beim Lesen von JSON-Daten mithilfe der <see cref="T:System.Text.Json.Utf8JsonReader" />-Struktur verwendet werden soll und möglicherweise von der strengen Einhaltung der JSON-Spezifikation abweicht, die das Standardverhalten darstellt.</summary>
        <value>Das beim Lesen von JSON-Daten zu verwendende benutzerdefinierte Verhalten.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>

<Type Name="JsonSerializer" FullName="System.Text.Json.JsonSerializer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="55efe259c3954694d75aef7b8fdde8fe9e9d2cf0" /><Meta Name="ms.sourcegitcommit" Value="8544f14c8194a55eb22d46721b0bbe46f345c063" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/21/2019" /><Meta Name="ms.locfileid" Value="69669156" /></Metadata><TypeSignature Language="C#" Value="public static class JsonSerializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit JsonSerializer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.JsonSerializer" />
  <TypeSignature Language="VB.NET" Value="Public Class JsonSerializer" />
  <TypeSignature Language="C++ CLI" Value="public ref class JsonSerializer abstract sealed" />
  <TypeSignature Language="F#" Value="type JsonSerializer = class" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt Funktionen zum Serialisieren von Objekten oder Werttypen in JSON und zum Deserialisieren von JSON in Objekte oder Werttypen bereit.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public static object Deserialize (ReadOnlySpan&lt;byte&gt; utf8Json, Type returnType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Deserialize(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Json, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize(System.ReadOnlySpan{System.Byte},System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize (utf8Json As ReadOnlySpan(Of Byte), returnType As Type, Optional options As JsonSerializerOptions = null) As Object" />
      <MemberSignature Language="F#" Value="static member Deserialize : ReadOnlySpan&lt;byte&gt; * Type * System.Text.Json.JsonSerializerOptions -&gt; obj" Usage="System.Text.Json.JsonSerializer.Deserialize (utf8Json, returnType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="utf8Json">Ruft den zu analysierenden JSON-Text ab.</param>
        <param name="returnType">Der Typ des Objekts, in das konvertiert und das zurückgegeben werden soll.</param>
        <param name="options">Optionen zum Steuern des Verhaltens während der Analyse.</param>
        <summary>Analysiert den UTF-8-codierten Text, der einen einzelnen JSON-Wert darstellt, in eine Instanz eines angegebenen Typs.</summary>
        <returns>Eine <paramref name="returnType" />-Darstellung des JSON-Werts.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="returnType" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.Text.Json.JsonException">Der JSON-Code ist ungültig, <paramref name="returnType" /> ist nicht mit dem JSON-Code kompatibel, oder es verbleibende Daten im Datenstrom.</exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public static object Deserialize (string json, Type returnType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Deserialize(string json, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize(System.String,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize (json As String, returnType As Type, Optional options As JsonSerializerOptions = null) As Object" />
      <MemberSignature Language="F#" Value="static member Deserialize : string * Type * System.Text.Json.JsonSerializerOptions -&gt; obj" Usage="System.Text.Json.JsonSerializer.Deserialize (json, returnType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="json" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="json">Ruft den zu analysierenden JSON-Text ab.</param>
        <param name="returnType">Der Typ des Objekts, in das konvertiert und das zurückgegeben werden soll.</param>
        <param name="options">Optionen zum Steuern des Verhaltens während der Analyse.</param>
        <summary>Analysiert den Text, der einen einzelnen JSON-Wert darstellt, in eine Instanz eines angegebenen Typs.</summary>
        <returns>Eine <paramref name="returnType" />-Darstellung des JSON-Werts.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Die Verwendung <xref:System.String> eines ist nicht so effizient wie die Verwendung der UTF-8-Methoden, da die Implementierung UTF-8 nativ verwendet.

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="json" /> oder <paramref name="returnType" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.Text.Json.JsonException">Der JSON-Code ist ungültig, der <paramref name="returnType" /> ist nicht mit dem JSON-Code kompatibel, oder es verbleibende Daten im Datenstrom.</exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public static object Deserialize (ref System.Text.Json.Utf8JsonReader reader, Type returnType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Deserialize(valuetype System.Text.Json.Utf8JsonReader&amp; reader, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize (ByRef reader As Utf8JsonReader, returnType As Type, Optional options As JsonSerializerOptions = null) As Object" />
      <MemberSignature Language="F#" Value="static member Deserialize :  * Type * System.Text.Json.JsonSerializerOptions -&gt; obj" Usage="System.Text.Json.JsonSerializer.Deserialize (reader, returnType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Text.Json.Utf8JsonReader" RefType="ref" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="reader">Der Reader zum Lesen.</param>
        <param name="returnType">Der Typ des Objekts, in das konvertiert und das zurückgegeben werden soll.</param>
        <param name="options">Optionen zum Steuern des Serialisiererverhaltens während des Lesevorgangs.</param>
        <summary>Liest einen JSON-Wert (einschließlich Objekten oder Arrays) aus dem bereitgestellten Reader und konvertiert ihn in eine Instanz eines angegebenen Typs.</summary>
        <returns>Eine <paramref name="returnType" />-Darstellung des JSON-Werts.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Wenn die <xref:System.Text.Json.Utf8JsonReader.TokenType> -Eigenschaft `reader` von <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> oder <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>ist, wird der Reader durch einen-Rückruf <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> erweitert, um den Anfang des Werts zu bestimmen.

Nach Abschluss dieser Methode `reader` wird am endgültigen Token im JSON-Wert positioniert.  Wenn eine Ausnahme ausgelöst wird, wird der Reader auf den Zustand zurückgesetzt, in dem er sich befand, als die-Methode aufgerufen wurde.

Diese Methode erstellt eine Kopie der Daten, auf die der Reader reagiert hat, sodass keine aufruferanforderung vorhanden ist, die die Datenintegrität über die Rückgabe dieser Methode hinaus aufrechtzuerhalten.

Der <xref:System.Text.Json.JsonReaderOptions> , der zum Erstellen der Instanz <xref:System.Text.Json.Utf8JsonReader> von verwendet wird, hat <xref:System.Text.Json.JsonSerializerOptions> Vorrang vor dem, wenn Sie einen Konflikt verursachen. Daher werden, und<xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType> beim Lesen verwendet. <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType> <xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType>
               
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="returnType" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.Text.Json.JsonException">Der JSON-Code ist ungültig, <paramref name="returnType" /> ist nicht mit dem JSON-Code kompatibel, oder ein Wert konnte nicht aus dem Reader gelesen werden.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="reader" /> verwendet nicht unterstützte Optionen.</exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue Deserialize&lt;TValue&gt; (ReadOnlySpan&lt;byte&gt; utf8Json, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue Deserialize&lt;TValue&gt;(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Json, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize``1(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize(Of TValue) (utf8Json As ReadOnlySpan(Of Byte), Optional options As JsonSerializerOptions = null) As TValue" />
      <MemberSignature Language="F#" Value="static member Deserialize : ReadOnlySpan&lt;byte&gt; * System.Text.Json.JsonSerializerOptions -&gt; 'Value" Usage="System.Text.Json.JsonSerializer.Deserialize (utf8Json, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue">Der Zieltyp des UTF-8-codierten Texts.</typeparam>
        <param name="utf8Json">Ruft den zu analysierenden JSON-Text ab.</param>
        <param name="options">Optionen zum Steuern des Verhaltens während der Analyse.</param>
        <summary>Analysiert den UTF-8-codierten Text, der einen einzelnen JSON-Wert darstellt, in eine Instanz des Typs, der durch einen generischen Typparameter angegeben wird.</summary>
        <returns>Eine <typeparamref name="TValue" />-Darstellung des JSON-Werts.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.Json.JsonException">Der JSON-Code ist ungültig.
          
- oder -

<typeparamref name="TValue" /> ist nicht mit dem JSON-Code kompatibel.

- oder -

Es verbleiben Daten im Datenstrom.</exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue Deserialize&lt;TValue&gt; (string json, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue Deserialize&lt;TValue&gt;(string json, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize``1(System.String,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize(Of TValue) (json As String, Optional options As JsonSerializerOptions = null) As TValue" />
      <MemberSignature Language="F#" Value="static member Deserialize : string * System.Text.Json.JsonSerializerOptions -&gt; 'Value" Usage="System.Text.Json.JsonSerializer.Deserialize (json, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="json" Type="System.String" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue">Der Zieltyp des JSON-Werts.</typeparam>
        <param name="json">Ruft den zu analysierenden JSON-Text ab.</param>
        <param name="options">Optionen zum Steuern des Verhaltens während der Analyse.</param>
        <summary>Analysiert den Text, der einen einzelnen JSON-Wert darstellt, in eine Instanz des Typs, der durch einen generischen Typparameter angegeben wird.</summary>
        <returns>Eine <typeparamref name="TValue" />-Darstellung des JSON-Werts.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Die Verwendung <xref:System.String> eines ist nicht so effizient wie die Verwendung der UTF-8-Methoden, da die Implementierung UTF-8 nativ verwendet.
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="json" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.Text.Json.JsonException">Der JSON-Code ist ungültig.
          
- oder -

<typeparamref name="TValue" /> ist nicht mit dem JSON-Code kompatibel.

- oder -

Es verbleiben Daten im Datenstrom.</exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue Deserialize&lt;TValue&gt; (ref System.Text.Json.Utf8JsonReader reader, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue Deserialize&lt;TValue&gt;(valuetype System.Text.Json.Utf8JsonReader&amp; reader, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize(Of TValue) (ByRef reader As Utf8JsonReader, Optional options As JsonSerializerOptions = null) As TValue" />
      <MemberSignature Language="F#" Value="static member Deserialize :  * System.Text.Json.JsonSerializerOptions -&gt; 'Value" Usage="System.Text.Json.JsonSerializer.Deserialize (reader, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="reader" Type="System.Text.Json.Utf8JsonReader" RefType="ref" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue">Der Zieltyp des JSON-Werts.</typeparam>
        <param name="reader">Der Reader zum Lesen.</param>
        <param name="options">Optionen zum Steuern des Serialisiererverhaltens während des Lesevorgangs.</param>
        <summary>Liest einen JSON-Wert (einschließlich Objekten oder Arrays) aus dem bereitgestellten Reader in eine Instanz des Typs, der durch einen generischen Typparameter angegeben wird.</summary>
        <returns>Eine <typeparamref name="TValue" />-Darstellung des JSON-Werts.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Wenn die <xref:System.Text.Json.Utf8JsonReader.TokenType> -Eigenschaft `reader` von <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> oder <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>ist, wird der Reader durch einen-Rückruf <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> erweitert, um den Anfang des Werts zu bestimmen.
               
Nach Abschluss dieser Methode `reader` wird am endgültigen Token im JSON-Wert positioniert. Wenn eine Ausnahme ausgelöst wird, wird der Reader auf den Zustand zurückgesetzt, in dem er sich befand, als die-Methode aufgerufen wurde.
               
Diese Methode erstellt eine Kopie der Daten, auf die der Reader reagiert hat, sodass keine aufruferanforderung vorhanden ist, die die Datenintegrität über die Rückgabe dieser Methode hinaus aufrechtzuerhalten.
               
Der <xref:System.Text.Json.JsonReaderOptions> , der zum Erstellen der Instanz <xref:System.Text.Json.Utf8JsonReader> von verwendet wird, hat <xref:System.Text.Json.JsonSerializerOptions> Vorrang vor dem, wenn Sie einen Konflikt verursachen. Daher werden, und<xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType> beim Lesen verwendet. <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType> <xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType>
               
          ]]></format>
        </remarks>
        <exception cref="T:System.Text.Json.JsonException">Der JSON-Code ist ungültig.
          
- oder -

<typeparamref name="TValue" /> ist nicht mit dem JSON-Code kompatibel.

- oder -

Es verbleiben Daten im Datenstrom.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="reader" /> verwendet nicht unterstützte Optionen.</exception>
      </Docs>
    </Member>
    <Member MemberName="DeserializeAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;object&gt; DeserializeAsync (System.IO.Stream utf8Json, Type returnType, System.Text.Json.JsonSerializerOptions options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;object&gt; DeserializeAsync(class System.IO.Stream utf8Json, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.DeserializeAsync(System.IO.Stream,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member DeserializeAsync : System.IO.Stream * Type * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;obj&gt;" Usage="System.Text.Json.JsonSerializer.DeserializeAsync (utf8Json, returnType, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="utf8Json">Die zu analysierenden JSON-Daten.</param>
        <param name="returnType">Der Typ des Objekts, in das konvertiert und das zurückgegeben werden soll.</param>
        <param name="options">Optionen zum Steuern des Verhaltens während des Lesevorgangs.</param>
        <param name="cancellationToken">Ein Abbruchtoken, das verwendet werden kann, um den Lesevorgang abzubrechen.</param>
        <summary>Liest den UTF-8-codierten Text, der einen einzelnen JSON-Wert darstellt, asynchron in eine Instanz eines angegebenen Typs. Der Datenstrom wird vollständig gelesen.</summary>
        <returns>Eine <paramref name="returnType" />-Darstellung des JSON-Werts.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="utf8Json" /> oder <paramref name="returnType" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.Text.Json.JsonException">Der JSON-Code ist ungültig.
          
- oder -

<typeparamref name="TValue" /> ist nicht mit dem JSON-Code kompatibel.

- oder -

Es verbleiben Daten im Datenstrom.</exception>
      </Docs>
    </Member>
    <Member MemberName="DeserializeAsync&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TValue&gt; DeserializeAsync&lt;TValue&gt; (System.IO.Stream utf8Json, System.Text.Json.JsonSerializerOptions options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TValue&gt; DeserializeAsync&lt;TValue&gt;(class System.IO.Stream utf8Json, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.DeserializeAsync``1(System.IO.Stream,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member DeserializeAsync : System.IO.Stream * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Value&gt;" Usage="System.Text.Json.JsonSerializer.DeserializeAsync (utf8Json, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TValue">Der Zieltyp des JSON-Werts.</typeparam>
        <param name="utf8Json">Die zu analysierenden JSON-Daten.</param>
        <param name="options">Optionen zum Steuern des Verhaltens während des Lesevorgangs.</param>
        <param name="cancellationToken">Ein Token, das verwendet werden kann, um den Lesevorgang abzubrechen.</param>
        <summary>Kiest den UTF-8-codierten Text, der einen einzelnen JSON-Wert darstellt, asynchron in eine Instanz des Typs, der durch einen generischen Typparameter angegeben wird. Der Datenstrom wird vollständig gelesen.</summary>
        <returns>Eine <typeparamref name="TValue" />-Darstellung des JSON-Werts.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.Json.JsonException">Der JSON-Code ist ungültig.
          
- oder -

<typeparamref name="TValue" /> ist nicht mit dem JSON-Code kompatibel.

- oder -

Es verbleiben Daten im Datenstrom.</exception>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public static string Serialize (object value, Type type, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Serialize(object value, class System.Type type, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Serialize (value As Object, inputType As Type, Optional options As JsonSerializerOptions = null) As String" />
      <MemberSignature Language="F#" Value="static member Serialize : obj * Type * System.Text.Json.JsonSerializerOptions -&gt; string" Usage="System.Text.Json.JsonSerializer.Serialize (value, type, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="value">Der zu konvertierende Wert.</param>
        <param name="type">Der Typ des <paramref name="value" />-Elements, das konvertiert werden soll.</param>
        <param name="options">Optionen zum Steuern des Konvertierungsverhaltens.</param>
        <summary>Konvertiert den Wert eines angegebenen Typs in ein <see cref="T:System.String" />-Element.</summary>
        <returns>Die Zeichenfolgendarstellung des Werts.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Die Verwendung <xref:System.String> eines ist nicht so effizient wie die Verwendung der UTF-8-Codierung, da die Implementierung UTF-8 intern verwendet. Siehe auch <xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)> und <xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)>.

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public static void Serialize (System.Text.Json.Utf8JsonWriter writer, object value, Type type, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Serialize(class System.Text.Json.Utf8JsonWriter writer, object value, class System.Type type, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize(System.Text.Json.Utf8JsonWriter,System.Object,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Serialize (writer As Utf8JsonWriter, value As Object, inputType As Type, Optional options As JsonSerializerOptions = null)" />
      <MemberSignature Language="F#" Value="static member Serialize : System.Text.Json.Utf8JsonWriter * obj * Type * System.Text.Json.JsonSerializerOptions -&gt; unit" Usage="System.Text.Json.JsonSerializer.Serialize (writer, value, type, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Text.Json.Utf8JsonWriter" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="writer">Der JSON-Writer.</param>
        <param name="value">Der zu konvertierende und zu schreibende Wert.</param>
        <param name="type">Der Typ des <paramref name="value" />-Elements, das konvertiert werden soll.</param>
        <param name="options">Optionen zum Steuern des Serialisierungsverhaltens.</param>
        <summary>Schreibt einen JSON-Wert (einschließlich Objekten oder Arrays) eines angegebenen Typs in den bereitgestellten Writer.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Serialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static string Serialize&lt;TValue&gt; (TValue value, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Serialize&lt;TValue&gt;(!!TValue value, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize``1(``0,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Serialize(Of TValue) (value As TValue, Optional options As JsonSerializerOptions = null) As String" />
      <MemberSignature Language="F#" Value="static member Serialize : 'Value * System.Text.Json.JsonSerializerOptions -&gt; string" Usage="System.Text.Json.JsonSerializer.Serialize (value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue">Der Typ des zu serialisierenden Werts.</typeparam>
        <param name="value">Der zu konvertierende Wert.</param>
        <param name="options">Optionen zum Steuern des Serialisierungsverhaltens.</param>
        <summary>Konvertiert den Wert eines Typs, der durch einen generischen Typparameter angegeben wird, in ein <see cref="T:System.String" />-Element.</summary>
        <returns>Eine Zeichenfolgendarstellung des Werts.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Die Verwendung <xref:System.String> eines ist nicht so effizient wie die Verwendung der UTF-8-Codierung, da die Implementierung UTF-8 intern verwendet. Siehe auch <xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)> und <xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)>.

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Serialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static void Serialize&lt;TValue&gt; (System.Text.Json.Utf8JsonWriter writer, TValue value, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Serialize&lt;TValue&gt;(class System.Text.Json.Utf8JsonWriter writer, !!TValue value, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize``1(System.Text.Json.Utf8JsonWriter,``0,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Serialize(Of TValue) (writer As Utf8JsonWriter, value As TValue, Optional options As JsonSerializerOptions = null)" />
      <MemberSignature Language="F#" Value="static member Serialize : System.Text.Json.Utf8JsonWriter * 'Value * System.Text.Json.JsonSerializerOptions -&gt; unit" Usage="System.Text.Json.JsonSerializer.Serialize (writer, value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="writer" Type="System.Text.Json.Utf8JsonWriter" />
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue">Der Typ des zu serialisierenden Werts.</typeparam>
        <param name="writer">Ein JSON-Writer.</param>
        <param name="value">Der zu konvertierende und zu schreibende Wert.</param>
        <param name="options">Optionen zum Steuern des Serialisierungsverhaltens.</param>
        <summary>Schreibt einen JSON-Wert (einschließlich Objekten oder Arrays) eines Typs, der durch einen generischen Typparameter angegeben wird, in den bereitgestellten Writer.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task SerializeAsync (System.IO.Stream utf8Json, object value, Type type, System.Text.Json.JsonSerializerOptions options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task SerializeAsync(class System.IO.Stream utf8Json, object value, class System.Type type, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member SerializeAsync : System.IO.Stream * obj * Type * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Text.Json.JsonSerializer.SerializeAsync (utf8Json, value, type, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="utf8Json">Der UTF-8-Datenstrom, in den geschrieben werden soll.</param>
        <param name="value">Der zu konvertierende Wert.</param>
        <param name="type">Der Typ des <paramref name="value" />-Elements, das konvertiert werden soll.</param>
        <param name="options">Optionen zum Steuern des Serialisierungsverhaltens.</param>
        <param name="cancellationToken">Ein Token, das verwendet werden kann, um den Schreibvorgang abzubrechen.</param>
        <summary>Konvertiert den Wert eines angegebenen Typs asynchron in UTF-8-codierten JSON-Text und schreibt ihn in den angegebenen Datenstrom.</summary>
        <returns>Eine Aufgabe, die den asynchronen Schreibvorgang darstellt.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeAsync&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task SerializeAsync&lt;TValue&gt; (System.IO.Stream utf8Json, TValue value, System.Text.Json.JsonSerializerOptions options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task SerializeAsync&lt;TValue&gt;(class System.IO.Stream utf8Json, !!TValue value, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeAsync``1(System.IO.Stream,``0,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member SerializeAsync : System.IO.Stream * 'Value * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Text.Json.JsonSerializer.SerializeAsync (utf8Json, value, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TValue">Der Typ des zu serialisierenden Werts.</typeparam>
        <param name="utf8Json">Der UTF-8-Datenstrom, in den geschrieben werden soll.</param>
        <param name="value">Der zu konvertierende Wert.</param>
        <param name="options">Optionen zum Steuern des Serialisierungsverhaltens.</param>
        <param name="cancellationToken">Ein Token, das verwendet werden kann, um den Schreibvorgang abzubrechen.</param>
        <summary>Konvertiert einen Wert eines Typs, der durch einen generischen Typparameter angegeben wird, asynchron in UTF-8-codierten JSON-Text und schreibt ihn in einen Datenstrom.</summary>
        <returns>Eine Aufgabe, die den asynchronen Schreibvorgang darstellt.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeToUtf8Bytes">
      <MemberSignature Language="C#" Value="public static byte[] SerializeToUtf8Bytes (object value, Type type, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] SerializeToUtf8Bytes(object value, class System.Type type, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SerializeToUtf8Bytes (value As Object, inputType As Type, Optional options As JsonSerializerOptions = null) As Byte()" />
      <MemberSignature Language="F#" Value="static member SerializeToUtf8Bytes : obj * Type * System.Text.Json.JsonSerializerOptions -&gt; byte[]" Usage="System.Text.Json.JsonSerializer.SerializeToUtf8Bytes (value, type, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="value">Der zu konvertierende Wert.</param>
        <param name="type">Der Typ des <paramref name="value" />-Elements, das konvertiert werden soll.</param>
        <param name="options">Optionen zum Steuern des Konvertierungsverhaltens.</param>
        <summary>Konvertiert einen Wert des angegebenen Typs in ein UTF8-codiertes Bytearray.</summary>
        <returns>Eine UTF-8-Darstellung des Werts.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeToUtf8Bytes&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static byte[] SerializeToUtf8Bytes&lt;TValue&gt; (TValue value, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] SerializeToUtf8Bytes&lt;TValue&gt;(!!TValue value, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes``1(``0,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SerializeToUtf8Bytes(Of TValue) (value As TValue, Optional options As JsonSerializerOptions = null) As Byte()" />
      <MemberSignature Language="F#" Value="static member SerializeToUtf8Bytes : 'Value * System.Text.Json.JsonSerializerOptions -&gt; byte[]" Usage="System.Text.Json.JsonSerializer.SerializeToUtf8Bytes (value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue">Der Typ des Werts.</typeparam>
        <param name="value">Der zu konvertierende Wert.</param>
        <param name="options">Optionen zum Steuern des Konvertierungsverhaltens.</param>
        <summary>Konvertiert den Wert eines Typs, der durch einen generischen Typparameter angegeben wird, in ein UTF8-codiertes Bytearray.</summary>
        <returns>Eine UTF-8-Darstellung des Werts.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>

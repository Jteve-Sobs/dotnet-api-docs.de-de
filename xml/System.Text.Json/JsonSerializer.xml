<Type Name="JsonSerializer" FullName="System.Text.Json.JsonSerializer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fd659440a98b40ede45f035e97eaedb2c282453b" /><Meta Name="ms.sourcegitcommit" Value="0959d8d88abd48debd487e54e54df29d51634f7f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/02/2019" /><Meta Name="ms.locfileid" Value="68731955" /></Metadata><TypeSignature Language="C#" Value="public static class JsonSerializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit JsonSerializer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.JsonSerializer" />
  <TypeSignature Language="VB.NET" Value="Public Class JsonSerializer" />
  <TypeSignature Language="C++ CLI" Value="public ref class JsonSerializer abstract sealed" />
  <TypeSignature Language="F#" Value="type JsonSerializer = class" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="c55b2-101">Stellt Funktionen zum Serialisieren von Objekten oder Werttypen in JSON und zum Deserialisieren von JSON in Objekte oder Werttypen bereit.</span><span class="sxs-lookup"><span data-stu-id="c55b2-101">Provides functionality to serialize objects or value types to JSON and to deserialize JSON into objects or value types.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public static object Deserialize (ReadOnlySpan&lt;byte&gt; utf8Json, Type returnType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Deserialize(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Json, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize(System.ReadOnlySpan{System.Byte},System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize (utf8Json As ReadOnlySpan(Of Byte), returnType As Type, Optional options As JsonSerializerOptions = null) As Object" />
      <MemberSignature Language="F#" Value="static member Deserialize : ReadOnlySpan&lt;byte&gt; * Type * System.Text.Json.JsonSerializerOptions -&gt; obj" Usage="System.Text.Json.JsonSerializer.Deserialize (utf8Json, returnType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="c55b2-102">Ruft den zu analysierenden JSON-Text ab.</span><span class="sxs-lookup"><span data-stu-id="c55b2-102">The JSON text to parse.</span></span></param>
        <param name="returnType"><span data-ttu-id="c55b2-103">Der Typ des Objekts, in das konvertiert und das zurückgegeben werden soll.</span><span class="sxs-lookup"><span data-stu-id="c55b2-103">The type of the object to convert to and return.</span></span></param>
        <param name="options"><span data-ttu-id="c55b2-104">Optionen zum Steuern des Verhaltens während der Analyse.</span><span class="sxs-lookup"><span data-stu-id="c55b2-104">Options to control the behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="c55b2-105">Analysiert den UTF-8-codierten Text, der einen einzelnen JSON-Wert darstellt, in eine Instanz eines angegebenen Typs.</span><span class="sxs-lookup"><span data-stu-id="c55b2-105">Parses the UTF-8 encoded text representing a single JSON value into an instance of a specified type.</span></span></summary>
        <returns><span data-ttu-id="c55b2-106">Eine <paramref name="returnType" />-Darstellung des JSON-Werts.</span><span class="sxs-lookup"><span data-stu-id="c55b2-106">A <paramref name="returnType" /> representation of the JSON value.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c55b2-107"><paramref name="returnType" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c55b2-107"><paramref name="returnType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="c55b2-108">Der JSON-Code ist ungültig, <paramref name="returnType" /> ist nicht mit dem JSON-Code kompatibel, oder es verbleibende Daten im Datenstrom.</span><span class="sxs-lookup"><span data-stu-id="c55b2-108">The JSON is invalid, <paramref name="returnType" /> is not compatible with the JSON, or when there is remaining data in the Stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public static object Deserialize (string json, Type returnType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Deserialize(string json, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize(System.String,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize (json As String, returnType As Type, Optional options As JsonSerializerOptions = null) As Object" />
      <MemberSignature Language="F#" Value="static member Deserialize : string * Type * System.Text.Json.JsonSerializerOptions -&gt; obj" Usage="System.Text.Json.JsonSerializer.Deserialize (json, returnType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="json" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="json"><span data-ttu-id="c55b2-109">Ruft den zu analysierenden JSON-Text ab.</span><span class="sxs-lookup"><span data-stu-id="c55b2-109">The JSON text to parse.</span></span></param>
        <param name="returnType"><span data-ttu-id="c55b2-110">Der Typ des Objekts, in das konvertiert und das zurückgegeben werden soll.</span><span class="sxs-lookup"><span data-stu-id="c55b2-110">The type of the object to convert to and return.</span></span></param>
        <param name="options"><span data-ttu-id="c55b2-111">Optionen zum Steuern des Verhaltens während der Analyse.</span><span class="sxs-lookup"><span data-stu-id="c55b2-111">Options to control the behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="c55b2-112">Analysiert den Text, der einen einzelnen JSON-Wert darstellt, in eine Instanz eines angegebenen Typs.</span><span class="sxs-lookup"><span data-stu-id="c55b2-112">Parses the text representing a single JSON value into an instance of a specified type.</span></span></summary>
        <returns><span data-ttu-id="c55b2-113">Eine <paramref name="returnType" />-Darstellung des JSON-Werts.</span><span class="sxs-lookup"><span data-stu-id="c55b2-113">A <paramref name="returnType" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="c55b2-114">Die Verwendung <xref:System.String> eines ist nicht so effizient wie die Verwendung der UTF-8-Methoden, da die Implementierung UTF-8 nativ verwendet.</span><span class="sxs-lookup"><span data-stu-id="c55b2-114">Using a <xref:System.String> is not as efficient as using the UTF-8 methods since the implementation natively uses UTF-8.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c55b2-115"><paramref name="json" /> oder <paramref name="returnType" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c55b2-115"><paramref name="json" /> or <paramref name="returnType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="c55b2-116">Der JSON-Code ist ungültig, der <paramref name="returnType" /> ist nicht mit dem JSON-Code kompatibel, oder es verbleibende Daten im Datenstrom.</span><span class="sxs-lookup"><span data-stu-id="c55b2-116">The JSON is invalid, the <paramref name="returnType" /> is not compatible with the JSON, or when there is remaining data in the Stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public static object Deserialize (ref System.Text.Json.Utf8JsonReader reader, Type returnType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Deserialize(valuetype System.Text.Json.Utf8JsonReader&amp; reader, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize (ByRef reader As Utf8JsonReader, returnType As Type, Optional options As JsonSerializerOptions = null) As Object" />
      <MemberSignature Language="F#" Value="static member Deserialize :  * Type * System.Text.Json.JsonSerializerOptions -&gt; obj" Usage="System.Text.Json.JsonSerializer.Deserialize (reader, returnType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Text.Json.Utf8JsonReader" RefType="ref" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="c55b2-117">Der Reader zum Lesen.</span><span class="sxs-lookup"><span data-stu-id="c55b2-117">The reader to read.</span></span></param>
        <param name="returnType"><span data-ttu-id="c55b2-118">Der Typ des Objekts, in das konvertiert und das zurückgegeben werden soll.</span><span class="sxs-lookup"><span data-stu-id="c55b2-118">The type of the object to convert to and return.</span></span></param>
        <param name="options"><span data-ttu-id="c55b2-119">Optionen zum Steuern des Serialisiererverhaltens während des Lesevorgangs.</span><span class="sxs-lookup"><span data-stu-id="c55b2-119">Options to control the serializer behavior during reading.</span></span></param>
        <summary><span data-ttu-id="c55b2-120">Liest einen JSON-Wert (einschließlich Objekten oder Arrays) aus dem bereitgestellten Reader und konvertiert ihn in eine Instanz eines angegebenen Typs.</span><span class="sxs-lookup"><span data-stu-id="c55b2-120">Reads one JSON value (including objects or arrays) from the provided reader and converts it into an instance of  a specified type.</span></span></summary>
        <returns><span data-ttu-id="c55b2-121">Eine <paramref name="returnType" />-Darstellung des JSON-Werts.</span><span class="sxs-lookup"><span data-stu-id="c55b2-121">A <paramref name="returnType" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="c55b2-122">Wenn die <xref:System.Text.Json.Utf8JsonReader.TokenType> -Eigenschaft `reader` von <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> oder <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>ist, wird der Reader durch einen-Rückruf <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> erweitert, um den Anfang des Werts zu bestimmen.</span><span class="sxs-lookup"><span data-stu-id="c55b2-122">If the <xref:System.Text.Json.Utf8JsonReader.TokenType> property of `reader` is <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> or <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>, the reader will be advanced by one call to <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> to determine the start of the value.</span></span>

<span data-ttu-id="c55b2-123">Nach Abschluss dieser Methode `reader` wird am endgültigen Token im JSON-Wert positioniert.</span><span class="sxs-lookup"><span data-stu-id="c55b2-123">Upon completion of this method, `reader` will be positioned at the final token in the JSON value.</span></span>  <span data-ttu-id="c55b2-124">Wenn eine Ausnahme ausgelöst wird, wird der Reader auf den Zustand zurückgesetzt, in dem er sich befand, als die-Methode aufgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="c55b2-124">If an exception is thrown, the reader is reset to the state it was in when the method was called.</span></span>

<span data-ttu-id="c55b2-125">Diese Methode erstellt eine Kopie der Daten, auf die der Reader reagiert hat, sodass keine aufruferanforderung vorhanden ist, die die Datenintegrität über die Rückgabe dieser Methode hinaus aufrechtzuerhalten.</span><span class="sxs-lookup"><span data-stu-id="c55b2-125">This method makes a copy of the data the reader acted on, so there is no caller requirement to maintain data integrity beyond the return of this method.</span></span>

<span data-ttu-id="c55b2-126">Der <xref:System.Text.Json.JsonReaderOptions> , der zum Erstellen der Instanz <xref:System.Text.Json.Utf8JsonReader> von verwendet wird, hat <xref:System.Text.Json.JsonSerializerOptions> Vorrang vor dem, wenn Sie einen Konflikt verursachen.</span><span class="sxs-lookup"><span data-stu-id="c55b2-126">The <xref:System.Text.Json.JsonReaderOptions> used to create the instance of the <xref:System.Text.Json.Utf8JsonReader> take precedence over the <xref:System.Text.Json.JsonSerializerOptions> when they conflict.</span></span> <span data-ttu-id="c55b2-127">Daher werden, und<xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType> beim Lesen verwendet. <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType> <xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="c55b2-127">Hence, <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType>, <xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType>, and <xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType> are used while reading.</span></span>
               
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c55b2-128"><paramref name="returnType" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c55b2-128"><paramref name="returnType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="c55b2-129">Der JSON-Code ist ungültig, <paramref name="returnType" /> ist nicht mit dem JSON-Code kompatibel, oder ein Wert konnte nicht aus dem Reader gelesen werden.</span><span class="sxs-lookup"><span data-stu-id="c55b2-129">The JSON is invalid, <paramref name="returnType" /> is not compatible with the JSON, or a value could not be read from the reader.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue Deserialize&lt;TValue&gt; (ReadOnlySpan&lt;byte&gt; utf8Json, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue Deserialize&lt;TValue&gt;(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Json, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize``1(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize(Of TValue) (utf8Json As ReadOnlySpan(Of Byte), Optional options As JsonSerializerOptions = null) As TValue" />
      <MemberSignature Language="F#" Value="static member Deserialize : ReadOnlySpan&lt;byte&gt; * System.Text.Json.JsonSerializerOptions -&gt; 'Value" Usage="System.Text.Json.JsonSerializer.Deserialize (utf8Json, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="c55b2-130">Der Zieltyp des UTF-8-codierten Texts.</span><span class="sxs-lookup"><span data-stu-id="c55b2-130">The target type of the UTF-8 encoded text.</span></span></typeparam>
        <param name="utf8Json"><span data-ttu-id="c55b2-131">Ruft den zu analysierenden JSON-Text ab.</span><span class="sxs-lookup"><span data-stu-id="c55b2-131">The JSON text to parse.</span></span></param>
        <param name="options"><span data-ttu-id="c55b2-132">Optionen zum Steuern des Verhaltens während der Analyse.</span><span class="sxs-lookup"><span data-stu-id="c55b2-132">Options to control the behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="c55b2-133">Analysiert den UTF-8-codierten Text, der einen einzelnen JSON-Wert darstellt, in eine Instanz des Typs, der durch einen generischen Typparameter angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="c55b2-133">Parses the UTF-8 encoded text representing a single JSON value into an instance of the type specified by a generic type parameter.</span></span></summary>
        <returns><span data-ttu-id="c55b2-134">Eine <typeparamref name="TValue" />-Darstellung des JSON-Werts.</span><span class="sxs-lookup"><span data-stu-id="c55b2-134">A <typeparamref name="TValue" /> representation of the JSON value.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="c55b2-135">Der JSON-Code ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="c55b2-135">The JSON is invalid.</span></span>
          
<span data-ttu-id="c55b2-136">- oder -</span><span class="sxs-lookup"><span data-stu-id="c55b2-136">-or-</span></span>

<span data-ttu-id="c55b2-137"><typeparamref name="TValue" /> ist nicht mit dem JSON-Code kompatibel.</span><span class="sxs-lookup"><span data-stu-id="c55b2-137"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="c55b2-138">- oder -</span><span class="sxs-lookup"><span data-stu-id="c55b2-138">-or-</span></span>

<span data-ttu-id="c55b2-139">Es verbleiben Daten im Datenstrom.</span><span class="sxs-lookup"><span data-stu-id="c55b2-139">There is remaining data in the stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue Deserialize&lt;TValue&gt; (string json, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue Deserialize&lt;TValue&gt;(string json, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize``1(System.String,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize(Of TValue) (json As String, Optional options As JsonSerializerOptions = null) As TValue" />
      <MemberSignature Language="F#" Value="static member Deserialize : string * System.Text.Json.JsonSerializerOptions -&gt; 'Value" Usage="System.Text.Json.JsonSerializer.Deserialize (json, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="json" Type="System.String" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="c55b2-140">Der Zieltyp des JSON-Werts.</span><span class="sxs-lookup"><span data-stu-id="c55b2-140">The target type of the JSON value.</span></span></typeparam>
        <param name="json"><span data-ttu-id="c55b2-141">Ruft den zu analysierenden JSON-Text ab.</span><span class="sxs-lookup"><span data-stu-id="c55b2-141">The JSON text to parse.</span></span></param>
        <param name="options"><span data-ttu-id="c55b2-142">Optionen zum Steuern des Verhaltens während der Analyse.</span><span class="sxs-lookup"><span data-stu-id="c55b2-142">Options to control the behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="c55b2-143">Analysiert den Text, der einen einzelnen JSON-Wert darstellt, in eine Instanz des Typs, der durch einen generischen Typparameter angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="c55b2-143">Parses the text representing a single JSON value into an instance of the type specified by a generic type parameter.</span></span></summary>
        <returns><span data-ttu-id="c55b2-144">Eine <typeparamref name="TValue" />-Darstellung des JSON-Werts.</span><span class="sxs-lookup"><span data-stu-id="c55b2-144">A <typeparamref name="TValue" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="c55b2-145">Die Verwendung <xref:System.String> eines ist nicht so effizient wie die Verwendung der UTF-8-Methoden, da die Implementierung UTF-8 nativ verwendet.</span><span class="sxs-lookup"><span data-stu-id="c55b2-145">Using a <xref:System.String> is not as efficient as using the UTF-8 methods since the implementation natively uses UTF-8.</span></span>
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c55b2-146"><paramref name="json" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c55b2-146"><paramref name="json" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="c55b2-147">Der JSON-Code ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="c55b2-147">The JSON is invalid.</span></span>
          
<span data-ttu-id="c55b2-148">- oder -</span><span class="sxs-lookup"><span data-stu-id="c55b2-148">-or-</span></span>

<span data-ttu-id="c55b2-149"><typeparamref name="TValue" /> ist nicht mit dem JSON-Code kompatibel.</span><span class="sxs-lookup"><span data-stu-id="c55b2-149"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="c55b2-150">- oder -</span><span class="sxs-lookup"><span data-stu-id="c55b2-150">-or-</span></span>

<span data-ttu-id="c55b2-151">Es verbleiben Daten im Datenstrom.</span><span class="sxs-lookup"><span data-stu-id="c55b2-151">There is remaining data in the stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue Deserialize&lt;TValue&gt; (ref System.Text.Json.Utf8JsonReader reader, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue Deserialize&lt;TValue&gt;(valuetype System.Text.Json.Utf8JsonReader&amp; reader, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize(Of TValue) (ByRef reader As Utf8JsonReader, Optional options As JsonSerializerOptions = null) As TValue" />
      <MemberSignature Language="F#" Value="static member Deserialize :  * System.Text.Json.JsonSerializerOptions -&gt; 'Value" Usage="System.Text.Json.JsonSerializer.Deserialize (reader, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="reader" Type="System.Text.Json.Utf8JsonReader" RefType="ref" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="c55b2-152">Der Zieltyp des JSON-Werts.</span><span class="sxs-lookup"><span data-stu-id="c55b2-152">The target type of the JSON value.</span></span></typeparam>
        <param name="reader"><span data-ttu-id="c55b2-153">Der Reader zum Lesen.</span><span class="sxs-lookup"><span data-stu-id="c55b2-153">The reader to read.</span></span></param>
        <param name="options"><span data-ttu-id="c55b2-154">Optionen zum Steuern des Serialisiererverhaltens während des Lesevorgangs.</span><span class="sxs-lookup"><span data-stu-id="c55b2-154">Options to control serializer behavior during reading.</span></span></param>
        <summary><span data-ttu-id="c55b2-155">Liest einen JSON-Wert (einschließlich Objekten oder Arrays) aus dem bereitgestellten Reader in eine Instanz des Typs, der durch einen generischen Typparameter angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="c55b2-155">Reads one JSON value (including objects or arrays) from the provided reader into an instance of the type specified by a generic type parameter.</span></span></summary>
        <returns><span data-ttu-id="c55b2-156">Eine <typeparamref name="TValue" />-Darstellung des JSON-Werts.</span><span class="sxs-lookup"><span data-stu-id="c55b2-156">A <typeparamref name="TValue" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="c55b2-157">Wenn die <xref:System.Text.Json.Utf8JsonReader.TokenType> -Eigenschaft `reader` von <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> oder <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>ist, wird der Reader durch einen-Rückruf <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> erweitert, um den Anfang des Werts zu bestimmen.</span><span class="sxs-lookup"><span data-stu-id="c55b2-157">If the <xref:System.Text.Json.Utf8JsonReader.TokenType> property of `reader` is <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> or <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>, the reader will be advanced by one call to <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> to determine the start of the value.</span></span>
               
<span data-ttu-id="c55b2-158">Nach Abschluss dieser Methode `reader` wird am endgültigen Token im JSON-Wert positioniert.</span><span class="sxs-lookup"><span data-stu-id="c55b2-158">Upon completion of this method, `reader` will be positioned at the final token in the JSON value.</span></span> <span data-ttu-id="c55b2-159">Wenn eine Ausnahme ausgelöst wird, wird der Reader auf den Zustand zurückgesetzt, in dem er sich befand, als die-Methode aufgerufen wurde.</span><span class="sxs-lookup"><span data-stu-id="c55b2-159">If an exception is thrown, the reader is reset to the state it was in when the method was called.</span></span>
               
<span data-ttu-id="c55b2-160">Diese Methode erstellt eine Kopie der Daten, auf die der Reader reagiert hat, sodass keine aufruferanforderung vorhanden ist, die die Datenintegrität über die Rückgabe dieser Methode hinaus aufrechtzuerhalten.</span><span class="sxs-lookup"><span data-stu-id="c55b2-160">This method makes a copy of the data the reader acted on, so there is no caller requirement to maintain data integrity beyond the return of this method.</span></span>
               
<span data-ttu-id="c55b2-161">Der <xref:System.Text.Json.JsonReaderOptions> , der zum Erstellen der Instanz <xref:System.Text.Json.Utf8JsonReader> von verwendet wird, hat <xref:System.Text.Json.JsonSerializerOptions> Vorrang vor dem, wenn Sie einen Konflikt verursachen.</span><span class="sxs-lookup"><span data-stu-id="c55b2-161">The <xref:System.Text.Json.JsonReaderOptions> used to create the instance of the <xref:System.Text.Json.Utf8JsonReader> take precedence over the <xref:System.Text.Json.JsonSerializerOptions> when they conflict.</span></span> <span data-ttu-id="c55b2-162">Daher werden, und<xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType> beim Lesen verwendet. <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType> <xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="c55b2-162">Hence, <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType>, <xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType>, and <xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType> are used while reading.</span></span>
               
          ]]></format>
        </remarks>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="c55b2-163">Der JSON-Code ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="c55b2-163">The JSON is invalid.</span></span>
          
<span data-ttu-id="c55b2-164">- oder -</span><span class="sxs-lookup"><span data-stu-id="c55b2-164">-or-</span></span>

<span data-ttu-id="c55b2-165"><typeparamref name="TValue" /> ist nicht mit dem JSON-Code kompatibel.</span><span class="sxs-lookup"><span data-stu-id="c55b2-165"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="c55b2-166">- oder -</span><span class="sxs-lookup"><span data-stu-id="c55b2-166">-or-</span></span>

<span data-ttu-id="c55b2-167">Es verbleiben Daten im Datenstrom.</span><span class="sxs-lookup"><span data-stu-id="c55b2-167">There is remaining data in the stream.</span></span></exception> 
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c55b2-168"><paramref name="reader" /> verwendet nicht unterstützte Optionen.</span><span class="sxs-lookup"><span data-stu-id="c55b2-168"><paramref name="reader" /> uses unsupported options.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeserializeAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;object&gt; DeserializeAsync (System.IO.Stream utf8Json, Type returnType, System.Text.Json.JsonSerializerOptions options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;object&gt; DeserializeAsync(class System.IO.Stream utf8Json, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.DeserializeAsync(System.IO.Stream,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member DeserializeAsync : System.IO.Stream * Type * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;obj&gt;" Usage="System.Text.Json.JsonSerializer.DeserializeAsync (utf8Json, returnType, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="c55b2-169">Die zu analysierenden JSON-Daten.</span><span class="sxs-lookup"><span data-stu-id="c55b2-169">The JSON data to parse.</span></span></param>
        <param name="returnType"><span data-ttu-id="c55b2-170">Der Typ des Objekts, in das konvertiert und das zurückgegeben werden soll.</span><span class="sxs-lookup"><span data-stu-id="c55b2-170">The type of the object to convert to and return.</span></span></param>
        <param name="options"><span data-ttu-id="c55b2-171">Optionen zum Steuern des Verhaltens während des Lesevorgangs.</span><span class="sxs-lookup"><span data-stu-id="c55b2-171">Options to control the behavior during reading.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="c55b2-172">Ein Abbruchtoken, das verwendet werden kann, um den Lesevorgang abzubrechen.</span><span class="sxs-lookup"><span data-stu-id="c55b2-172">A cancellation token that may be used to cancel the read operation.</span></span></param>
        <summary><span data-ttu-id="c55b2-173">Liest den UTF-8-codierten Text, der einen einzelnen JSON-Wert darstellt, asynchron in eine Instanz eines angegebenen Typs.</span><span class="sxs-lookup"><span data-stu-id="c55b2-173">Asynchronously reads the UTF-8 encoded text representing a single JSON value into an instance of a specified type.</span></span> <span data-ttu-id="c55b2-174">Der Datenstrom wird vollständig gelesen.</span><span class="sxs-lookup"><span data-stu-id="c55b2-174">The stream will be read to completion.</span></span></summary>
        <returns><span data-ttu-id="c55b2-175">Eine <paramref name="returnType" />-Darstellung des JSON-Werts.</span><span class="sxs-lookup"><span data-stu-id="c55b2-175">A <paramref name="returnType" /> representation of the JSON value.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c55b2-176"><paramref name="utf8Json" /> oder <paramref name="returnType" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c55b2-176"><paramref name="utf8Json" /> or <paramref name="returnType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="c55b2-177">Der JSON-Code ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="c55b2-177">The JSON is invalid.</span></span>
          
<span data-ttu-id="c55b2-178">- oder -</span><span class="sxs-lookup"><span data-stu-id="c55b2-178">-or-</span></span>

<span data-ttu-id="c55b2-179"><typeparamref name="TValue" /> ist nicht mit dem JSON-Code kompatibel.</span><span class="sxs-lookup"><span data-stu-id="c55b2-179"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="c55b2-180">- oder -</span><span class="sxs-lookup"><span data-stu-id="c55b2-180">-or-</span></span>

<span data-ttu-id="c55b2-181">Es verbleiben Daten im Datenstrom.</span><span class="sxs-lookup"><span data-stu-id="c55b2-181">There is remaining data in the stream.</span></span></exception> 
      </Docs>
    </Member>
    <Member MemberName="DeserializeAsync&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TValue&gt; DeserializeAsync&lt;TValue&gt; (System.IO.Stream utf8Json, System.Text.Json.JsonSerializerOptions options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TValue&gt; DeserializeAsync&lt;TValue&gt;(class System.IO.Stream utf8Json, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.DeserializeAsync``1(System.IO.Stream,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member DeserializeAsync : System.IO.Stream * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Value&gt;" Usage="System.Text.Json.JsonSerializer.DeserializeAsync (utf8Json, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="c55b2-182">Der Zieltyp des JSON-Werts.</span><span class="sxs-lookup"><span data-stu-id="c55b2-182">The target type of the JSON value.</span></span></typeparam>
        <param name="utf8Json"><span data-ttu-id="c55b2-183">Die zu analysierenden JSON-Daten.</span><span class="sxs-lookup"><span data-stu-id="c55b2-183">The JSON data to parse.</span></span></param>
        <param name="options"><span data-ttu-id="c55b2-184">Optionen zum Steuern des Verhaltens während des Lesevorgangs.</span><span class="sxs-lookup"><span data-stu-id="c55b2-184">Options to control the behavior during reading.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="c55b2-185">Ein Token, das verwendet werden kann, um den Lesevorgang abzubrechen.</span><span class="sxs-lookup"><span data-stu-id="c55b2-185">A token that may be used to cancel the read operation.</span></span></param>
        <summary><span data-ttu-id="c55b2-186">Kiest den UTF-8-codierten Text, der einen einzelnen JSON-Wert darstellt, asynchron in eine Instanz des Typs, der durch einen generischen Typparameter angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="c55b2-186">Asynchronously reads the UTF-8 encoded text representing a single JSON value into an instance of a type specified by a generic type parameter.</span></span> <span data-ttu-id="c55b2-187">Der Datenstrom wird vollständig gelesen.</span><span class="sxs-lookup"><span data-stu-id="c55b2-187">The stream will be read to completion.</span></span></summary>
        <returns><span data-ttu-id="c55b2-188">Eine <typeparamref name="TValue" />-Darstellung des JSON-Werts.</span><span class="sxs-lookup"><span data-stu-id="c55b2-188">A <typeparamref name="TValue" /> representation of the JSON value.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="c55b2-189">Der JSON-Code ist ungültig.</span><span class="sxs-lookup"><span data-stu-id="c55b2-189">The JSON is invalid.</span></span>
          
<span data-ttu-id="c55b2-190">- oder -</span><span class="sxs-lookup"><span data-stu-id="c55b2-190">-or-</span></span>

<span data-ttu-id="c55b2-191"><typeparamref name="TValue" /> ist nicht mit dem JSON-Code kompatibel.</span><span class="sxs-lookup"><span data-stu-id="c55b2-191"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="c55b2-192">- oder -</span><span class="sxs-lookup"><span data-stu-id="c55b2-192">-or-</span></span>

<span data-ttu-id="c55b2-193">Es verbleiben Daten im Datenstrom.</span><span class="sxs-lookup"><span data-stu-id="c55b2-193">There is remaining data in the stream.</span></span></exception> 
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public static string Serialize (object value, Type inputType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Serialize(object value, class System.Type inputType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Serialize (value As Object, inputType As Type, Optional options As JsonSerializerOptions = null) As String" />
      <MemberSignature Language="F#" Value="static member Serialize : obj * Type * System.Text.Json.JsonSerializerOptions -&gt; string" Usage="System.Text.Json.JsonSerializer.Serialize (value, inputType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="inputType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="c55b2-194">Der zu konvertierende Wert.</span><span class="sxs-lookup"><span data-stu-id="c55b2-194">The value to convert.</span></span></param>
        <param name="inputType"><span data-ttu-id="c55b2-195">Der Typ des <paramref name="value" />-Elements, das konvertiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="c55b2-195">The type of the <paramref name="value" /> to convert.</span></span></param>
        <param name="options"><span data-ttu-id="c55b2-196">Optionen zum Steuern des Konvertierungsverhaltens.</span><span class="sxs-lookup"><span data-stu-id="c55b2-196">Options to control the conversion behavior.</span></span></param>
        <summary><span data-ttu-id="c55b2-197">Konvertiert den Wert eines angegebenen Typs in ein <see cref="T:System.String" />-Element.</span><span class="sxs-lookup"><span data-stu-id="c55b2-197">Converts the value of a specified type into a <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="c55b2-198">Die Zeichenfolgendarstellung des Werts.</span><span class="sxs-lookup"><span data-stu-id="c55b2-198">The string representation of the value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="c55b2-199">Die Verwendung <xref:System.String> eines ist nicht so effizient wie die Verwendung der UTF-8-Codierung, da die Implementierung UTF-8 intern verwendet.</span><span class="sxs-lookup"><span data-stu-id="c55b2-199">Using a <xref:System.String> is not as efficient as using UTF-8 encoding since the implementation internally uses UTF-8.</span></span> <span data-ttu-id="c55b2-200">Siehe auch <xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)> und <xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)>.</span><span class="sxs-lookup"><span data-stu-id="c55b2-200">See also <xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)> and <xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)>.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public static void Serialize (System.Text.Json.Utf8JsonWriter writer, object value, Type inputType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Serialize(class System.Text.Json.Utf8JsonWriter writer, object value, class System.Type inputType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize(System.Text.Json.Utf8JsonWriter,System.Object,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Serialize (writer As Utf8JsonWriter, value As Object, inputType As Type, Optional options As JsonSerializerOptions = null)" />
      <MemberSignature Language="F#" Value="static member Serialize : System.Text.Json.Utf8JsonWriter * obj * Type * System.Text.Json.JsonSerializerOptions -&gt; unit" Usage="System.Text.Json.JsonSerializer.Serialize (writer, value, inputType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Text.Json.Utf8JsonWriter" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="inputType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="c55b2-201">Der JSON-Writer.</span><span class="sxs-lookup"><span data-stu-id="c55b2-201">The JSON writer.</span></span></param>
        <param name="value"><span data-ttu-id="c55b2-202">Der zu konvertierende und zu schreibende Wert.</span><span class="sxs-lookup"><span data-stu-id="c55b2-202">The value to convert and write.</span></span></param>
        <param name="inputType"><span data-ttu-id="c55b2-203">Der <paramref name="value" />-Typ.</span><span class="sxs-lookup"><span data-stu-id="c55b2-203">The type of <paramref name="value" />.</span></span></param>
        <param name="options"><span data-ttu-id="c55b2-204">Optionen zum Steuern des Serialisierungsverhaltens.</span><span class="sxs-lookup"><span data-stu-id="c55b2-204">Options to control serialization behavior.</span></span></param>
        <summary><span data-ttu-id="c55b2-205">Schreibt einen JSON-Wert (einschließlich Objekten oder Arrays) eines angegebenen Typs in den bereitgestellten Writer.</span><span class="sxs-lookup"><span data-stu-id="c55b2-205">Writes one JSON value (including objects or arrays) of a specified type to the provided writer.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Serialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static string Serialize&lt;TValue&gt; (TValue value, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Serialize&lt;TValue&gt;(!!TValue value, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize``1(``0,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Serialize(Of TValue) (value As TValue, Optional options As JsonSerializerOptions = null) As String" />
      <MemberSignature Language="F#" Value="static member Serialize : 'Value * System.Text.Json.JsonSerializerOptions -&gt; string" Usage="System.Text.Json.JsonSerializer.Serialize (value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="c55b2-206">Der Typ des zu serialisierenden Werts.</span><span class="sxs-lookup"><span data-stu-id="c55b2-206">The type of the value to serialize.</span></span></typeparam>
        <param name="value"><span data-ttu-id="c55b2-207">Der zu konvertierende Wert.</span><span class="sxs-lookup"><span data-stu-id="c55b2-207">The value to convert.</span></span></param>
        <param name="options"><span data-ttu-id="c55b2-208">Optionen zum Steuern des Serialisierungsverhaltens.</span><span class="sxs-lookup"><span data-stu-id="c55b2-208">Options to control serialization behavior.</span></span></param>
        <summary><span data-ttu-id="c55b2-209">Konvertiert den Wert eines Typs, der durch einen generischen Typparameter angegeben wird, in ein <see cref="T:System.String" />-Element.</span><span class="sxs-lookup"><span data-stu-id="c55b2-209">Converts the value of a type specified by a generic type parameter into a <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="c55b2-210">Eine Zeichenfolgendarstellung des Werts.</span><span class="sxs-lookup"><span data-stu-id="c55b2-210">A string representation of the value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="c55b2-211">Die Verwendung <xref:System.String> eines ist nicht so effizient wie die Verwendung der UTF-8-Codierung, da die Implementierung UTF-8 intern verwendet.</span><span class="sxs-lookup"><span data-stu-id="c55b2-211">Using a <xref:System.String> is not as efficient as using UTF-8 encoding since the implementation internally uses UTF-8.</span></span> <span data-ttu-id="c55b2-212">Siehe auch <xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)> und <xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)>.</span><span class="sxs-lookup"><span data-stu-id="c55b2-212">See also <xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)> and <xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)>.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Serialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static void Serialize&lt;TValue&gt; (System.Text.Json.Utf8JsonWriter writer, TValue value, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Serialize&lt;TValue&gt;(class System.Text.Json.Utf8JsonWriter writer, !!TValue value, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize``1(System.Text.Json.Utf8JsonWriter,``0,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Serialize(Of TValue) (writer As Utf8JsonWriter, value As TValue, Optional options As JsonSerializerOptions = null)" />
      <MemberSignature Language="F#" Value="static member Serialize : System.Text.Json.Utf8JsonWriter * 'Value * System.Text.Json.JsonSerializerOptions -&gt; unit" Usage="System.Text.Json.JsonSerializer.Serialize (writer, value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="writer" Type="System.Text.Json.Utf8JsonWriter" />
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="c55b2-213">Der Typ des zu serialisierenden Werts.</span><span class="sxs-lookup"><span data-stu-id="c55b2-213">The type of the value to serialize.</span></span></typeparam>
        <param name="writer"><span data-ttu-id="c55b2-214">Ein JSON-Writer.</span><span class="sxs-lookup"><span data-stu-id="c55b2-214">A JSON writer.</span></span></param>
        <param name="value"><span data-ttu-id="c55b2-215">Der zu konvertierende und zu schreibende Wert.</span><span class="sxs-lookup"><span data-stu-id="c55b2-215">The value to convert and write.</span></span></param>
        <param name="options"><span data-ttu-id="c55b2-216">Optionen zum Steuern des Serialisierungsverhaltens.</span><span class="sxs-lookup"><span data-stu-id="c55b2-216">Options to control serialization behavior.</span></span></param>
        <summary><span data-ttu-id="c55b2-217">Schreibt einen JSON-Wert (einschließlich Objekten oder Arrays) eines Typs, der durch einen generischen Typparameter angegeben wird, in den bereitgestellten Writer.</span><span class="sxs-lookup"><span data-stu-id="c55b2-217">Writes one JSON value (including objects or arrays) of a type specified by a generic type parameter to the provided writer.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task SerializeAsync (System.IO.Stream utf8Json, object value, Type inputType, System.Text.Json.JsonSerializerOptions options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task SerializeAsync(class System.IO.Stream utf8Json, object value, class System.Type inputType, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member SerializeAsync : System.IO.Stream * obj * Type * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Text.Json.JsonSerializer.SerializeAsync (utf8Json, value, inputType, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="inputType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="c55b2-218">Der UTF-8-Datenstrom, in den geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="c55b2-218">The UTF-8 stream to write to.</span></span></param>
        <param name="value"><span data-ttu-id="c55b2-219">Der zu konvertierende Wert.</span><span class="sxs-lookup"><span data-stu-id="c55b2-219">The value to convert.</span></span></param>
        <param name="inputType"><span data-ttu-id="c55b2-220">Der Typ des zu konvertierenden Werts.</span><span class="sxs-lookup"><span data-stu-id="c55b2-220">The type of the value to convert.</span></span></param>
        <param name="options"><span data-ttu-id="c55b2-221">Optionen zum Steuern des Serialisierungsverhaltens.</span><span class="sxs-lookup"><span data-stu-id="c55b2-221">Options to control serialization behavior.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="c55b2-222">Ein Token, das verwendet werden kann, um den Schreibvorgang abzubrechen.</span><span class="sxs-lookup"><span data-stu-id="c55b2-222">A token that may be used to cancel the write operation.</span></span></param>
        <summary><span data-ttu-id="c55b2-223">Konvertiert den Wert eines angegebenen Typs asynchron in UTF-8-codierten JSON-Text und schreibt ihn in den angegebenen Datenstrom.</span><span class="sxs-lookup"><span data-stu-id="c55b2-223">Asynchronously converts the value of a specified type to UTF-8 encoded JSON text and writes it to the specified stream.</span></span></summary>
        <returns><span data-ttu-id="c55b2-224">Eine Aufgabe, die den asynchronen Schreibvorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c55b2-224">A task that represents the asynchronous write operation.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeAsync&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task SerializeAsync&lt;TValue&gt; (System.IO.Stream utf8Json, TValue value, System.Text.Json.JsonSerializerOptions options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task SerializeAsync&lt;TValue&gt;(class System.IO.Stream utf8Json, !!TValue value, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeAsync``1(System.IO.Stream,``0,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member SerializeAsync : System.IO.Stream * 'Value * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Text.Json.JsonSerializer.SerializeAsync (utf8Json, value, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="c55b2-225">Der Typ des zu serialisierenden Werts.</span><span class="sxs-lookup"><span data-stu-id="c55b2-225">The type of the value to serialize.</span></span></typeparam>
        <param name="utf8Json"><span data-ttu-id="c55b2-226">Der UTF-8-Datenstrom, in den geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="c55b2-226">The UTF-8 stream to write to.</span></span></param>
        <param name="value"><span data-ttu-id="c55b2-227">Der zu konvertierende Wert.</span><span class="sxs-lookup"><span data-stu-id="c55b2-227">The value to convert.</span></span></param>
        <param name="options"><span data-ttu-id="c55b2-228">Optionen zum Steuern des Serialisierungsverhaltens.</span><span class="sxs-lookup"><span data-stu-id="c55b2-228">Options to control serialization behavior.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="c55b2-229">Ein Token, das verwendet werden kann, um den Schreibvorgang abzubrechen.</span><span class="sxs-lookup"><span data-stu-id="c55b2-229">A token that may be used to cancel the write operation.</span></span></param>
        <summary><span data-ttu-id="c55b2-230">Konvertiert einen Wert eines Typs, der durch einen generischen Typparameter angegeben wird, asynchron in UTF-8-codierten JSON-Text und schreibt ihn in einen Datenstrom.</span><span class="sxs-lookup"><span data-stu-id="c55b2-230">Asynchronously converts a value of a type specified by a generic type parametaer to UTF-8 encoded JSON text and writes it to a stream.</span></span></summary>
        <returns><span data-ttu-id="c55b2-231">Eine Aufgabe, die den asynchronen Schreibvorgang darstellt.</span><span class="sxs-lookup"><span data-stu-id="c55b2-231">A task that represents the asynchronous write operation.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeToUtf8Bytes">
      <MemberSignature Language="C#" Value="public static byte[] SerializeToUtf8Bytes (object value, Type inputType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] SerializeToUtf8Bytes(object value, class System.Type inputType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SerializeToUtf8Bytes (value As Object, inputType As Type, Optional options As JsonSerializerOptions = null) As Byte()" />
      <MemberSignature Language="F#" Value="static member SerializeToUtf8Bytes : obj * Type * System.Text.Json.JsonSerializerOptions -&gt; byte[]" Usage="System.Text.Json.JsonSerializer.SerializeToUtf8Bytes (value, inputType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="inputType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="c55b2-232">Der zu konvertierende Wert.</span><span class="sxs-lookup"><span data-stu-id="c55b2-232">The value to convert.</span></span></param>
        <param name="inputType"><span data-ttu-id="c55b2-233">Der Typ des zu konvertierenden Werts.</span><span class="sxs-lookup"><span data-stu-id="c55b2-233">The type of the value to convert.</span></span></param>
        <param name="options"><span data-ttu-id="c55b2-234">Optionen zum Steuern des Konvertierungsverhaltens.</span><span class="sxs-lookup"><span data-stu-id="c55b2-234">Options to control the conversion behavior.</span></span></param>
        <summary><span data-ttu-id="c55b2-235">Konvertiert einen Wert des angegebenen Typs in ein UTF8-codiertes Bytearray.</span><span class="sxs-lookup"><span data-stu-id="c55b2-235">Converts a value of the specified type into a UTF8-encoded byte array.</span></span></summary>
        <returns><span data-ttu-id="c55b2-236">Eine UTF-8-Darstellung des Werts.</span><span class="sxs-lookup"><span data-stu-id="c55b2-236">A UTF-8 representation of the value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeToUtf8Bytes&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static byte[] SerializeToUtf8Bytes&lt;TValue&gt; (TValue value, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] SerializeToUtf8Bytes&lt;TValue&gt;(!!TValue value, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes``1(``0,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SerializeToUtf8Bytes(Of TValue) (value As TValue, Optional options As JsonSerializerOptions = null) As Byte()" />
      <MemberSignature Language="F#" Value="static member SerializeToUtf8Bytes : 'Value * System.Text.Json.JsonSerializerOptions -&gt; byte[]" Usage="System.Text.Json.JsonSerializer.SerializeToUtf8Bytes (value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="c55b2-237">Der Typ des Werts.</span><span class="sxs-lookup"><span data-stu-id="c55b2-237">The type of the value.</span></span></typeparam>
        <param name="value"><span data-ttu-id="c55b2-238">Der zu konvertierende Wert.</span><span class="sxs-lookup"><span data-stu-id="c55b2-238">The value to convert.</span></span></param>
        <param name="options"><span data-ttu-id="c55b2-239">Optionen zum Steuern des Konvertierungsverhaltens.</span><span class="sxs-lookup"><span data-stu-id="c55b2-239">Options to control the conversion behavior.</span></span></param>
        <summary><span data-ttu-id="c55b2-240">Konvertiert den Wert eines Typs, der durch einen generischen Typparameter angegeben wird, in ein UTF8-codiertes Bytearray.</span><span class="sxs-lookup"><span data-stu-id="c55b2-240">Converts the value of a type specifed by a generic type parameter into a UTF8-encoded byte array.</span></span></summary>
        <returns><span data-ttu-id="c55b2-241">Eine UTF-8-Darstellung des Werts.</span><span class="sxs-lookup"><span data-stu-id="c55b2-241">A UTF-8 representation of the value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>

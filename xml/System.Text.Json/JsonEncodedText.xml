<Type Name="JsonEncodedText" FullName="System.Text.Json.JsonEncodedText">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8dede60b7fce5569ce7e0a0ba9fad4be2ac91bdb" /><Meta Name="ms.sourcegitcommit" Value="0959d8d88abd48debd487e54e54df29d51634f7f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/02/2019" /><Meta Name="ms.locfileid" Value="68731922" /></Metadata><TypeSignature Language="C#" Value="public struct JsonEncodedText : IEquatable&lt;System.Text.Json.JsonEncodedText&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit JsonEncodedText extends System.ValueType implements class System.IEquatable`1&lt;valuetype System.Text.Json.JsonEncodedText&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.JsonEncodedText" />
  <TypeSignature Language="VB.NET" Value="Public Structure JsonEncodedText&#xA;Implements IEquatable(Of JsonEncodedText)" />
  <TypeSignature Language="C++ CLI" Value="public value class JsonEncodedText : IEquatable&lt;System::Text::Json::JsonEncodedText&gt;" />
  <TypeSignature Language="F#" Value="type JsonEncodedText = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Text.Json.JsonEncodedText&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="6621d-101">Stellt Methoden zum Transformieren von UTF-8- oder UTF-16-codiertem Text in eine Form bereit, die für JSON geeignet ist.</span><span class="sxs-lookup"><span data-stu-id="6621d-101">Provides methods to transform UTF-8 or UTF-16 encoded text into a form that is suitable for JSON.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="6621d-102">Dieser Typ kann zum Zwischenspeichern und speichern bekannter Zeichen folgen verwendet werden, die für das Schreiben von JSON im Voraus verwendet werden, indem diese vorab codiert werden.</span><span class="sxs-lookup"><span data-stu-id="6621d-102">This type can be used to cache and store known strings used for writing JSON ahead of time by pre-encoding them up front.</span></span>

            ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Encode">
      <MemberSignature Language="C#" Value="public static System.Text.Json.JsonEncodedText Encode (ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Text.Json.JsonEncodedText Encode(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonEncodedText.Encode(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Encode (utf8Value As ReadOnlySpan(Of Byte)) As JsonEncodedText" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::Json::JsonEncodedText Encode(ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="static member Encode : ReadOnlySpan&lt;byte&gt; -&gt; System.Text.Json.JsonEncodedText" Usage="System.Text.Json.JsonEncodedText.Encode utf8Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonEncodedText</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8Value"><span data-ttu-id="6621d-103">Der UTF-8-codierte Wert, der als JSON-codierter Text transformiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="6621d-103">The UTF-8 encoded value to be transformed as JSON encoded text.</span></span></param>
        <summary><span data-ttu-id="6621d-104">Codiert eine UTF-8-codierte Bytespanne als JSON-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6621d-104">Encodes a UTF-8 encoded byte span as a JSON string.</span></span></summary>
        <returns><span data-ttu-id="6621d-105">Die JSON Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6621d-105">The JSON string.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6621d-106"><paramref name="utf8Value" /> ist zu groß oder enthält ungültige UTF-8-Bytes.</span><span class="sxs-lookup"><span data-stu-id="6621d-106"><paramref name="utf8Value" /> is too large or contains invalid UTF-8 bytes.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Encode">
      <MemberSignature Language="C#" Value="public static System.Text.Json.JsonEncodedText Encode (ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Text.Json.JsonEncodedText Encode(valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonEncodedText.Encode(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Encode (value As ReadOnlySpan(Of Char)) As JsonEncodedText" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::Json::JsonEncodedText Encode(ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="static member Encode : ReadOnlySpan&lt;char&gt; -&gt; System.Text.Json.JsonEncodedText" Usage="System.Text.Json.JsonEncodedText.Encode value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonEncodedText</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="6621d-107">Der Wert, der in JSON-codierten Text transformiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="6621d-107">The value to be transformed as JSON encoded text.</span></span></param>
        <summary><span data-ttu-id="6621d-108">Codiert eine UTF-16-codierte Zeichenspanne als JSON-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6621d-108">Encodes a UTF-16 encoded character span as a JSON string.</span></span></summary>
        <returns><span data-ttu-id="6621d-109">Die JSON Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6621d-109">The JSON string.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6621d-110"><paramref name="value" /> ist zu groß oder enthält ungültige UTF-16-Zeichen.</span><span class="sxs-lookup"><span data-stu-id="6621d-110"><paramref name="value" /> is too large or contains invalid UTF-16 characters.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Encode">
      <MemberSignature Language="C#" Value="public static System.Text.Json.JsonEncodedText Encode (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Text.Json.JsonEncodedText Encode(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonEncodedText.Encode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Encode (value As String) As JsonEncodedText" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::Json::JsonEncodedText Encode(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member Encode : string -&gt; System.Text.Json.JsonEncodedText" Usage="System.Text.Json.JsonEncodedText.Encode value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonEncodedText</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="6621d-111">Der Wert, der in JSON-codierten Text transformiert werden soll.</span><span class="sxs-lookup"><span data-stu-id="6621d-111">The value to be transformed as JSON encoded text.</span></span></param>
        <summary><span data-ttu-id="6621d-112">Codiert den Textwert der Zeichenfolge als JSON-Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6621d-112">Encodes the string text value as a JSON string.</span></span></summary>
        <returns><span data-ttu-id="6621d-113">Die als JSON-Zeichenfolge codierte Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6621d-113">The string encoded as a JSON string.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6621d-114"><paramref name="value" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="6621d-114"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6621d-115"><paramref name="value" /> ist zu groß oder enthält ungültige UTF-16-Zeichen.</span><span class="sxs-lookup"><span data-stu-id="6621d-115"><paramref name="value" /> is too large or contains invalid UTF-16 characters.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EncodedUtf8Bytes">
      <MemberSignature Language="C#" Value="public ReadOnlySpan&lt;byte&gt; EncodedUtf8Bytes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; EncodedUtf8Bytes" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonEncodedText.EncodedUtf8Bytes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EncodedUtf8Bytes As ReadOnlySpan(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property ReadOnlySpan&lt;System::Byte&gt; EncodedUtf8Bytes { ReadOnlySpan&lt;System::Byte&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.EncodedUtf8Bytes : ReadOnlySpan&lt;byte&gt;" Usage="System.Text.Json.JsonEncodedText.EncodedUtf8Bytes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6621d-116">Ruft die UTF-8-codierte Darstellung des vorcodierten JSON-Texts ab.</span><span class="sxs-lookup"><span data-stu-id="6621d-116">Gets the UTF-8 encoded representation of the pre-encoded JSON text.</span></span></summary>
        <value><span data-ttu-id="6621d-117">Die UTF-8-codierte Darstellung des vorcodierten JSON-Texts.</span><span class="sxs-lookup"><span data-stu-id="6621d-117">The UTF-8 encoded representation of the pre-encoded JSON text.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonEncodedText.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="jsonEncodedText.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="6621d-118">Das mit dieser Instanz zu vergleichende Objekt.</span><span class="sxs-lookup"><span data-stu-id="6621d-118">The object to compare to this instance.</span></span></param>
        <summary><span data-ttu-id="6621d-119">Bestimmt, ob diese Instanz und ein angegebenes Objekt, das ebenfalls eine <see cref="T:System.Text.Json.JsonEncodedText" />-Instanz sein muss, denselben Wert haben.</span><span class="sxs-lookup"><span data-stu-id="6621d-119">Determines whether this instance and a specified object, which must also be a <see cref="T:System.Text.Json.JsonEncodedText" /> instance, have the same value.</span></span></summary>
        <returns><span data-ttu-id="6621d-120"><see langword="true" />, wenn die angegebene Instanz und <paramref name="obj" /> gleich sind, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="6621d-120"><see langword="true" /> if the current instance and <paramref name="obj" /> are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="6621d-121">Wenn `obj` gleich `null` ist, gibt die Methode `false` zurück.</span><span class="sxs-lookup"><span data-stu-id="6621d-121">If `obj` is `null`, the method returns `false`.</span></span>

            ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Text.Json.JsonEncodedText other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.Text.Json.JsonEncodedText other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonEncodedText.Equals(System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As JsonEncodedText) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Text::Json::JsonEncodedText other);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Text.Json.JsonEncodedText -&gt; bool" Usage="jsonEncodedText.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="6621d-122">Das mit dieser Instanz zu vergleichende Objekt.</span><span class="sxs-lookup"><span data-stu-id="6621d-122">The object to compare to this instance.</span></span></param>
        <summary><span data-ttu-id="6621d-123">Bestimmt, ob diese Instanz und eine andere angegebene <see cref="T:System.Text.Json.JsonEncodedText" />-Instanz denselben Wert haben.</span><span class="sxs-lookup"><span data-stu-id="6621d-123">Determines whether this instance and another specified <see cref="T:System.Text.Json.JsonEncodedText" /> instance have the same value.</span></span></summary>
        <returns><span data-ttu-id="6621d-124"><see langword="true" />, wenn diese Instanz und <paramref name="other" /> den gleichen Wert haben, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="6621d-124"><see langword="true" /> if this instance and <paramref name="other" /> have the same value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="6621d-125">Standard Instanzen von <xref:System.Text.Json.JsonEncodedText> werden als gleich behandelt.</span><span class="sxs-lookup"><span data-stu-id="6621d-125">Default instances of <xref:System.Text.Json.JsonEncodedText> are treated as equal.</span></span>

            ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonEncodedText.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="jsonEncodedText.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6621d-126">Gibt den Hashcode für diese <see cref="T:System.Text.Json.JsonEncodedText" /> zurück.</span><span class="sxs-lookup"><span data-stu-id="6621d-126">Returns the hash code for this <see cref="T:System.Text.Json.JsonEncodedText" />.</span></span></summary>
        <returns><span data-ttu-id="6621d-127">Der Hashcode für diese Instanz.</span><span class="sxs-lookup"><span data-stu-id="6621d-127">The hash code for this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="6621d-128">Diese Methode gibt 0 für eine Standard Instanz von <xref:System.Text.Json.JsonEncodedText>zurück.</span><span class="sxs-lookup"><span data-stu-id="6621d-128">This method returns 0 on a default instance of <xref:System.Text.Json.JsonEncodedText>.</span></span>

            ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonEncodedText.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="jsonEncodedText.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6621d-129">Konvertiert den Wert dieser Instanz in einen <see cref="T:System.String" />.</span><span class="sxs-lookup"><span data-stu-id="6621d-129">Converts the value of this instance to a <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="6621d-130">Die zugrunde liegende UTF-16-codierte Zeichenfolge.</span><span class="sxs-lookup"><span data-stu-id="6621d-130">The underlying UTF-16 encoded string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="6621d-131">Diese Methode gibt eine leere Zeichenfolge für eine Standard Instanz <xref:System.Text.Json.JsonEncodedText>von zurück.</span><span class="sxs-lookup"><span data-stu-id="6621d-131">This method returns an empty string on a default instance of <xref:System.Text.Json.JsonEncodedText>.</span></span>

            ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>

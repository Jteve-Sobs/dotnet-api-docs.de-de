<Type Name="JsonWriterOptions" FullName="System.Text.Json.JsonWriterOptions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cdf62fb82c2065e506a1cdde9519dcfdd4051504" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="65006695" /></Metadata><TypeSignature Language="C#" Value="public struct JsonWriterOptions" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit JsonWriterOptions extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.JsonWriterOptions" />
  <TypeSignature Language="VB.NET" Value="Public Structure JsonWriterOptions" />
  <TypeSignature Language="C++ CLI" Value="public value class JsonWriterOptions" />
  <TypeSignature Language="F#" Value="type JsonWriterOptions = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Ermöglicht dem Benutzer das Definieren von benutzerdefiniertem Verhalten beim Schreiben von JSON mit dem <see cref="T:System.Text.Json.Utf8JsonWriter" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

Standardmäßig wird der JSON-Code ohne Einzug oder zusätzlichen Leerraum geschrieben. Löst auch <xref:System.Text.Json.Utf8JsonWriter> eine Ausnahme aus, wenn der Benutzer versucht, strukturell ungültiges JSON-Code zu schreiben.

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Indented">
      <MemberSignature Language="C#" Value="public bool Indented { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Indented" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonWriterOptions.Indented" />
      <MemberSignature Language="VB.NET" Value="Public Property Indented As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Indented { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Indented : bool with get, set" Usage="System.Text.Json.JsonWriterOptions.Indented" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab oder legt einen Wert fest, der angibt, ob der <see cref="T:System.Text.Json.Utf8JsonWriter" /> die JSON-Ausgabe formatieren soll. Dazu gehört das Einrücken geschachtelter JSON-Token, das Hinzufügen neuer Zeilen und das Einfügen von Leerzeichen zwischen Eigenschaftsnamen und -werten.</summary>
        <value><see langword="true" />So formatieren Sie die JSON-Ausgabe <see langword="false" /> , wenn ohne zusätzlichen Leerraum geschrieben werden soll. Die Standardeinstellung ist <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SkipValidation">
      <MemberSignature Language="C#" Value="public bool SkipValidation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SkipValidation" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonWriterOptions.SkipValidation" />
      <MemberSignature Language="VB.NET" Value="Public Property SkipValidation As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SkipValidation { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SkipValidation : bool with get, set" Usage="System.Text.Json.JsonWriterOptions.SkipValidation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab oder legt einen Wert fest, der angibt, ob der <see cref="T:System.Text.Json.Utf8JsonWriter" /> die strukturelle Überprüfung überspringen und dem Benutzer das Schreiben von ungültigem JSON ermöglichen soll.</summary>
        <value><see langword="true" />um die strukturelle Validierung zu überspringen und ungültige JSON zuzulassen. , um bei jedem Versuch, einen ungültigen JSON-Code zu schreiben, eine <see cref="T:System.InvalidOperationException" />auszulösen <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

Wenn bekannt ist, dass der JSON-Code korrekt ist, kann die Leistung durch das Überspringen der Validierung `true`(durch Festlegen dieser Eigenschaft auf) verbessert werden.
Ein Beispiel für eine ungültige JSON, bei der der Writer `SkipValidation` auslöst (wenn `false`auf festgelegt ist), ist, wenn Sie einen Wert in einem JSON-Objekt ohne Eigenschaftsnamen schreiben. 

 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
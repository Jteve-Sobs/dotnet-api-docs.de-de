<Type Name="JsonReaderOptions" FullName="System.Text.Json.JsonReaderOptions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f2dcdc3397d99e5459be827dc2967745b1f5aecf" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83979050" /></Metadata><TypeSignature Language="C#" Value="public struct JsonReaderOptions" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit JsonReaderOptions extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.JsonReaderOptions" />
  <TypeSignature Language="VB.NET" Value="Public Structure JsonReaderOptions" />
  <TypeSignature Language="C++ CLI" Value="public value class JsonReaderOptions" />
  <TypeSignature Language="F#" Value="type JsonReaderOptions = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="9c438-101">Bietet dem Benutzer die Möglichkeit, benutzerdefiniertes Verhalten beim Lesen von JSON zu definieren.</span><span class="sxs-lookup"><span data-stu-id="9c438-101">Provides the ability for the user to define custom behavior when reading JSON.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="9c438-102">Weitere Informationen finden Sie unter Gewusst [wie: Serialisieren und Deserialisieren von JSON](/dotnet/standard/serialization/system-text-json-how-to#use-utf8jsonreader).</span><span class="sxs-lookup"><span data-stu-id="9c438-102">For more information, see [How to serialize and deserialize JSON](/dotnet/standard/serialization/system-text-json-how-to#use-utf8jsonreader).</span></span>

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AllowTrailingCommas">
      <MemberSignature Language="C#" Value="public bool AllowTrailingCommas { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowTrailingCommas" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonReaderOptions.AllowTrailingCommas" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowTrailingCommas As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowTrailingCommas { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowTrailingCommas : bool with get, set" Usage="System.Text.Json.JsonReaderOptions.AllowTrailingCommas" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9c438-103">Ruft einen Wert ab, der definiert, ob ein zusätzliches Komma am Ende einer Liste von JSON-Werten in einem Objekt oder Array in der gelesenen JSON-Nutzlast zulässig ist (und ignoriert wird), oder legt diesen fest.</span><span class="sxs-lookup"><span data-stu-id="9c438-103">Gets or sets a value that defines whether an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored) within the JSON payload being read.</span></span></summary>
        <value><span data-ttu-id="9c438-104"><see langword="true" />, wenn ein zusätzliches Komma zulässig ist. Andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="9c438-104"><see langword="true" /> if an extra comma is allowed; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="9c438-105">Standardmäßig ist diese Eigenschaft auf `false`festgelegt, und es wird eine <xref:System.Text.Json.JsonException> ausgelöst, wenn ein nach gestelltes Komma auftritt.</span><span class="sxs-lookup"><span data-stu-id="9c438-105">By default, this property is set to `false`, and a <xref:System.Text.Json.JsonException> is thrown if a trailing comma is encountered.</span></span>

            ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommentHandling">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonCommentHandling CommentHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonCommentHandling CommentHandling" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonReaderOptions.CommentHandling" />
      <MemberSignature Language="VB.NET" Value="Public Property CommentHandling As JsonCommentHandling" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonCommentHandling CommentHandling { System::Text::Json::JsonCommentHandling get(); void set(System::Text::Json::JsonCommentHandling value); };" />
      <MemberSignature Language="F#" Value="member this.CommentHandling : System.Text.Json.JsonCommentHandling with get, set" Usage="System.Text.Json.JsonReaderOptions.CommentHandling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonCommentHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9c438-106">Ruft einen Wert ab, der bestimmt, wie <see cref="T:System.Text.Json.Utf8JsonReader" /> beim Durchlesen der JSON-Daten Kommentare behandelt, oder legt diesen fest.</span><span class="sxs-lookup"><span data-stu-id="9c438-106">Gets or sets a value that determines how the <see cref="T:System.Text.Json.Utf8JsonReader" /> handles comments when reading through the JSON data.</span></span></summary>
        <value><span data-ttu-id="9c438-107">Einer der Enumerationswerte, der angibt, wie Kommentare behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="9c438-107">One of the enumeration values that indicates how comments are handled.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="9c438-108">Standardmäßig löst der Reader einen <xref:System.Text.Json.JsonException> aus, wenn er auf einen Kommentar stößt.</span><span class="sxs-lookup"><span data-stu-id="9c438-108">By default, the reader throws a <xref:System.Text.Json.JsonException> if it encounters a comment.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9c438-109">Die Eigenschaft wird auf einen Wert festgelegt, der kein Element der <see cref="T:System.Text.Json.JsonCommentHandling" />-Enumeration ist.</span><span class="sxs-lookup"><span data-stu-id="9c438-109">The property is being set to a value that is not a member of the <see cref="T:System.Text.Json.JsonCommentHandling" /> enumeration.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MaxDepth">
      <MemberSignature Language="C#" Value="public int MaxDepth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxDepth" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonReaderOptions.MaxDepth" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxDepth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxDepth { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaxDepth : int with get, set" Usage="System.Text.Json.JsonReaderOptions.MaxDepth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9c438-110">Ruft die beim Lesen von JSON maximal zulässige Tiefe ab oder legt sie fest, wobei standardmäßig (d.h. 0 (null)) eine maximale Tiefe von 64 angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="9c438-110">Gets or sets the maximum depth allowed when reading JSON, with the default (that is, 0) indicating a maximum depth of 64.</span></span></summary>
        <value><span data-ttu-id="9c438-111">Die maximal zulässige Tiefe beim Lesen von JSON.</span><span class="sxs-lookup"><span data-stu-id="9c438-111">The maximum depth allowed when reading JSON.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="9c438-112">Das Lesen über diese Tiefe hinaus löst eine <xref:System.Text.Json.JsonException> aus.</span><span class="sxs-lookup"><span data-stu-id="9c438-112">Reading past this depth will throw a <xref:System.Text.Json.JsonException>.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9c438-113">Die maximale Tiefe wird auf einen negativen Wert festgelegt.</span><span class="sxs-lookup"><span data-stu-id="9c438-113">The maximum depth is being set to a negative value.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>

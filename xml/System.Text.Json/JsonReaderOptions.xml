<Type Name="JsonReaderOptions" FullName="System.Text.Json.JsonReaderOptions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f58fe1c41bb57c09a2b378a047805db6b57aa255" /><Meta Name="ms.sourcegitcommit" Value="ef1f0c8985003a14413f66c3de381b8f3b6e4436" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="05/30/2019" /><Meta Name="ms.locfileid" Value="66380686" /></Metadata><TypeSignature Language="C#" Value="public struct JsonReaderOptions" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit JsonReaderOptions extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.JsonReaderOptions" />
  <TypeSignature Language="VB.NET" Value="Public Structure JsonReaderOptions" />
  <TypeSignature Language="C++ CLI" Value="public value class JsonReaderOptions" />
  <TypeSignature Language="F#" Value="type JsonReaderOptions = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="d08cb-101">Bietet dem Benutzer die Möglichkeit, benutzerdefiniertes Verhalten beim Lesen von JSON zu definieren.</span><span class="sxs-lookup"><span data-stu-id="d08cb-101">Provides the ability for the user to define custom behavior when reading JSON.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AllowTrailingCommas">
      <MemberSignature Language="C#" Value="public bool AllowTrailingCommas { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowTrailingCommas" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonReaderOptions.AllowTrailingCommas" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowTrailingCommas As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowTrailingCommas { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowTrailingCommas : bool with get, set" Usage="System.Text.Json.JsonReaderOptions.AllowTrailingCommas" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d08cb-102">Definiert, ob ein zusätzliches Komma am Ende einer Liste von JSON-Werten in einem Objekt oder Array in der gelesenen JSON-Nutzlast zulässig ist (und ignoriert wird).</span><span class="sxs-lookup"><span data-stu-id="d08cb-102">Defines whether an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored) within the JSON payload being read.</span></span> <span data-ttu-id="d08cb-103">In der Standardeinstellung ist hierfür „False“ festgelegt, und wenn ein nachfolgendes Komma gefunden wird, wird eine <exception cref="T:System.Text.Json.JsonException" /> ausgelöst.</span><span class="sxs-lookup"><span data-stu-id="d08cb-103">By default, it's set to false, and a <exception cref="T:System.Text.Json.JsonException" /> is thrown if a trailing comma is encountered.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommentHandling">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonCommentHandling CommentHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonCommentHandling CommentHandling" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonReaderOptions.CommentHandling" />
      <MemberSignature Language="VB.NET" Value="Public Property CommentHandling As JsonCommentHandling" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonCommentHandling CommentHandling { System::Text::Json::JsonCommentHandling get(); void set(System::Text::Json::JsonCommentHandling value); };" />
      <MemberSignature Language="F#" Value="member this.CommentHandling : System.Text.Json.JsonCommentHandling with get, set" Usage="System.Text.Json.JsonReaderOptions.CommentHandling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonCommentHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d08cb-104">Ruft ab oder gibt an, wie die <see cref="T:System.Text.Json.Utf8JsonReader" />-Struktur Kommentare beim Lesen der JSON-Daten handhabt.</span><span class="sxs-lookup"><span data-stu-id="d08cb-104">Gets or sets how the <see cref="T:System.Text.Json.Utf8JsonReader" /> struct handles comments when reading through the JSON data.</span></span></summary>
        <value><span data-ttu-id="d08cb-105">Einer der Enumerationswerte, der angibt, wie Kommentare behandelt werden.</span><span class="sxs-lookup"><span data-stu-id="d08cb-105">One of the enumeration values that indicates how comments are handled.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d08cb-106">Der Reader löst standardmäßig eine <xref:System.Text.Json.JsonReaderException> , wenn es sich um einen Kommentar trifft.</span><span class="sxs-lookup"><span data-stu-id="d08cb-106">By default, the reader throws a <xref:System.Text.Json.JsonReaderException> if it encounters a comment.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxDepth">
      <MemberSignature Language="C#" Value="public int MaxDepth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxDepth" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonReaderOptions.MaxDepth" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxDepth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxDepth { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaxDepth : int with get, set" Usage="System.Text.Json.JsonReaderOptions.MaxDepth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d08cb-107">Ruft die beim Lesen von JSON maximal zulässige Tiefe ab oder legt sie fest, wobei standardmäßig (d.h. 0 (null)) eine maximale Tiefe von 64 angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="d08cb-107">Gets or sets the maximum depth allowed when reading JSON, with the default (i.e. 0) indicating a max depth of 64.</span></span> <span data-ttu-id="d08cb-108">Das Lesen über diese Tiefe hinaus löst eine <exception cref="T:System.Text.Json.JsonException" /> aus.</span><span class="sxs-lookup"><span data-stu-id="d08cb-108">Reading past this depth will throw a <exception cref="T:System.Text.Json.JsonException" />.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
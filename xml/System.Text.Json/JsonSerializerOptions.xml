<Type Name="JsonSerializerOptions" FullName="System.Text.Json.JsonSerializerOptions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b881f9fc052d051240dbbbf5ce20b765480c2f88" /><Meta Name="ms.sourcegitcommit" Value="2f78d0752398ee2d15afbf06143cb62a01dc6d71" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="08/14/2020" /><Meta Name="ms.locfileid" Value="88242414" /></Metadata><TypeSignature Language="C#" Value="public sealed class JsonSerializerOptions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit JsonSerializerOptions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.JsonSerializerOptions" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class JsonSerializerOptions" />
  <TypeSignature Language="C++ CLI" Value="public ref class JsonSerializerOptions sealed" />
  <TypeSignature Language="F#" Value="type JsonSerializerOptions = class" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="66cc8-101">Stellt Optionen bereit, die mit der <see cref="T:System.Text.Json.JsonSerializer" />-Klasse verwendet werden sollen</span><span class="sxs-lookup"><span data-stu-id="66cc8-101">Provides options to be used with <see cref="T:System.Text.Json.JsonSerializer" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="66cc8-102">Weitere Informationen finden Sie unter Gewusst [wie: Serialisieren und Deserialisieren von JSON](/dotnet/standard/serialization/system-text-json-how-to).</span><span class="sxs-lookup"><span data-stu-id="66cc8-102">For more information, see [How to serialize and deserialize JSON](/dotnet/standard/serialization/system-text-json-how-to).</span></span>

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JsonSerializerOptions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializerOptions.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; JsonSerializerOptions();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="66cc8-103">Initialisiert eine neue Instanz der <see cref="T:System.Text.Json.JsonSerializerOptions" />-Klasse.</span><span class="sxs-lookup"><span data-stu-id="66cc8-103">Initializes a new instance of the <see cref="T:System.Text.Json.JsonSerializerOptions" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JsonSerializerOptions (System.Text.Json.JsonSerializerDefaults defaults);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Text.Json.JsonSerializerDefaults defaults) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializerOptions.#ctor(System.Text.Json.JsonSerializerDefaults)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (defaults As JsonSerializerDefaults)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; JsonSerializerOptions(System::Text::Json::JsonSerializerDefaults defaults);" />
      <MemberSignature Language="F#" Value="new System.Text.Json.JsonSerializerOptions : System.Text.Json.JsonSerializerDefaults -&gt; System.Text.Json.JsonSerializerOptions" Usage="new System.Text.Json.JsonSerializerOptions defaults" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaults" Type="System.Text.Json.JsonSerializerDefaults" Index="0" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="defaults"><span data-ttu-id="66cc8-104">Der zu diskutierende <see cref="T:System.Text.Json.JsonSerializerDefaults" />.</span><span class="sxs-lookup"><span data-stu-id="66cc8-104">The <see cref="T:System.Text.Json.JsonSerializerDefaults" /> to reason about.</span></span></param>
        <summary><span data-ttu-id="66cc8-105">Konstruiert eine neue <see cref="T:System.Text.Json.JsonSerializerOptions" />-Instanz mit einer vordefinierten Menge von Optionen, die durch die angegebenen <see cref="T:System.Text.Json.JsonSerializerDefaults" /> bestimmt wird.</span><span class="sxs-lookup"><span data-stu-id="66cc8-105">Constructs a new <see cref="T:System.Text.Json.JsonSerializerOptions" /> instance with a predefined set of options determined by the specified <see cref="T:System.Text.Json.JsonSerializerDefaults" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JsonSerializerOptions (System.Text.Json.JsonSerializerOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializerOptions.#ctor(System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (options As JsonSerializerOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; JsonSerializerOptions(System::Text::Json::JsonSerializerOptions ^ options);" />
      <MemberSignature Language="F#" Value="new System.Text.Json.JsonSerializerOptions : System.Text.Json.JsonSerializerOptions -&gt; System.Text.Json.JsonSerializerOptions" Usage="new System.Text.Json.JsonSerializerOptions options" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" Index="0" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="options"><span data-ttu-id="66cc8-106">Die Optionsinstanz, aus der Optionen kopiert werden sollen.</span><span class="sxs-lookup"><span data-stu-id="66cc8-106">The options instance to copy options from.</span></span></param>
        <summary><span data-ttu-id="66cc8-107">Kopiert die Optionen aus einer <see cref="T:System.Text.Json.JsonSerializerOptions" />-Instanz in eine neue Instanz.</span><span class="sxs-lookup"><span data-stu-id="66cc8-107">Copies the options from a <see cref="T:System.Text.Json.JsonSerializerOptions" /> instance to a new instance.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="66cc8-108"><paramref name="options" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="66cc8-108"><paramref name="options" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AllowTrailingCommas">
      <MemberSignature Language="C#" Value="public bool AllowTrailingCommas { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowTrailingCommas" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.AllowTrailingCommas" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowTrailingCommas As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowTrailingCommas { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowTrailingCommas : bool with get, set" Usage="System.Text.Json.JsonSerializerOptions.AllowTrailingCommas" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66cc8-109">Ruft einen Wert ab oder legt einen Wert fest, der angibt, ob ein zusätzliches Komma am Ende einer Liste von JSON-Werten in einem Objekt oder Array in der deserialisierten JSON-Nutzlast zulässig ist (und ignoriert wird)</span><span class="sxs-lookup"><span data-stu-id="66cc8-109">Get or sets a value that indicates whether an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored) within the JSON payload being deserialized.</span></span></summary>
        <value><span data-ttu-id="66cc8-110"><see langword="true" /> , wenn ein zusätzliches Komma am Ende einer Liste von JSON-Werten in einem Objekt oder Array zulässig ist (und ignoriert wird); <see langword="false" /> andernfalls.</span><span class="sxs-lookup"><span data-stu-id="66cc8-110"><see langword="true" /> if an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored); <see langword="false" /> otherwise.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="66cc8-111">Standardmäßig `AllowTrailingCommas` ist auf festgelegt `false` , und <xref:System.Text.Json.JsonException> während der Deserialisierung wird eine ausgelöst, wenn ein nach gestelltes Komma auftritt.</span><span class="sxs-lookup"><span data-stu-id="66cc8-111">By default, `AllowTrailingCommas` is set to `false`, and a <xref:System.Text.Json.JsonException> is thrown during deserialization if a trailing comma is encountered.</span></span>

<span data-ttu-id="66cc8-112">Weitere Informationen finden Sie unter Gewusst [wie: Serialisieren und Deserialisieren von JSON](/dotnet/standard/serialization/system-text-json-how-to#allow-comments-and-trailing-commas).</span><span class="sxs-lookup"><span data-stu-id="66cc8-112">For more information, see [How to serialize and deserialize JSON](/dotnet/standard/serialization/system-text-json-how-to#allow-comments-and-trailing-commas).</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="66cc8-113">Diese Eigenschaft wurde festgelegt, nachdem die Serialisierung oder Deserialisierung stattgefunden hat.</span><span class="sxs-lookup"><span data-stu-id="66cc8-113">This property was set after serialization or deserialization has occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Converters">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Text.Json.Serialization.JsonConverter&gt;? Converters { get; }" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Text.Json.Serialization.JsonConverter&gt; Converters" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.Converters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Converters As IList(Of JsonConverter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;System::Text::Json::Serialization::JsonConverter ^&gt; ^ Converters { System::Collections::Generic::IList&lt;System::Text::Json::Serialization::JsonConverter ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Converters : System.Collections.Generic.IList&lt;System.Text.Json.Serialization.JsonConverter&gt;" Usage="System.Text.Json.JsonSerializerOptions.Converters" />
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Text.Json.Serialization.JsonConverter&gt; Converters { get; }" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Text.Json.Serialization.JsonConverter&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66cc8-114">Ruft die Liste der registrierten benutzerdefinierten Konverter ab</span><span class="sxs-lookup"><span data-stu-id="66cc8-114">Gets the list of user-defined converters that were registered.</span></span></summary>
        <value><span data-ttu-id="66cc8-115">Die Liste der benutzerdefinierten Konverter.</span><span class="sxs-lookup"><span data-stu-id="66cc8-115">The list of custom converters.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="66cc8-116">Nach der Serialisierung oder Deserialisierung kann die Liste nicht geändert werden.</span><span class="sxs-lookup"><span data-stu-id="66cc8-116">Once serialization or deserialization occurs, the list cannot be modified.</span></span>

<span data-ttu-id="66cc8-117">Weitere Informationen finden Sie unter [Vorgehensweise: Schreiben benutzerdefinierter Konverter](/dotnet/standard/serialization/system-text-json-converters-how-to#registration-sample---converters-collection).</span><span class="sxs-lookup"><span data-stu-id="66cc8-117">For more information, see [How to write custom converters](/dotnet/standard/serialization/system-text-json-converters-how-to#registration-sample---converters-collection).</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultBufferSize">
      <MemberSignature Language="C#" Value="public int DefaultBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DefaultBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.DefaultBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int DefaultBufferSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultBufferSize : int with get, set" Usage="System.Text.Json.JsonSerializerOptions.DefaultBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66cc8-118">Ruft die Standardpuffergröße in Byte ab, die beim Erstellen temporärer Puffer verwendet werden soll, oder legt diese fest.</span><span class="sxs-lookup"><span data-stu-id="66cc8-118">Gets or sets the default buffer size, in bytes, to use when creating temporary buffers.</span></span></summary>
        <value><span data-ttu-id="66cc8-119">Die Standardpuffergröße in Bytes.</span><span class="sxs-lookup"><span data-stu-id="66cc8-119">The default buffer size in bytes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="66cc8-120">Die Standardpuffergröße in Bytes ist 16.384.</span><span class="sxs-lookup"><span data-stu-id="66cc8-120">The default buffer size, in bytes, is 16,384.</span></span>
<span data-ttu-id="66cc8-121">Bei den meisten Arbeits Auslastungen ist die Standardgröße eine angemessene Menge an JSON, die beim Lesen aus einem Stream oder beim Schreiben in einen Stream gepuffert werden kann.</span><span class="sxs-lookup"><span data-stu-id="66cc8-121">For most workloads, the default size is a reasonable amount of JSON to buffer while reading from a stream or writing to a stream.</span></span>
<span data-ttu-id="66cc8-122">Das heißt, Sie führt eine gute Leistung aus, ohne Objekte auf dem Large Object Heap für den Garbage Collector (GC) zu erstellen, der nachverfolgt werden soll. In Szenarien ohne Streaming könnte das Erhöhen der Standardpuffergröße die Leistung für große JSON-Zeichen folgen oder UTF-8-Byte Arrays verbessern.</span><span class="sxs-lookup"><span data-stu-id="66cc8-122">That is, it performs well without creating objects on the Large Object Heap for the Garbage Collector (GC) to track. In non-streaming scenarios, increasing the default buffer size could improve performance for large JSON strings or UTF-8 byte arrays.</span></span>
<span data-ttu-id="66cc8-123">Es wird empfohlen, diesen Wert unverändert zu lassen, wenn er nicht geändert werden kann.</span><span class="sxs-lookup"><span data-stu-id="66cc8-123">We recommend that you leave this value unchanged unless changing it makes an observable difference in performance.</span></span>


          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="66cc8-124">Die Puffergröße ist kleiner als 1.</span><span class="sxs-lookup"><span data-stu-id="66cc8-124">The buffer size is less than 1.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="66cc8-125">Diese Eigenschaft wurde festgelegt, nachdem die Serialisierung oder Deserialisierung stattgefunden hat.</span><span class="sxs-lookup"><span data-stu-id="66cc8-125">This property was set after serialization or deserialization has occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefaultIgnoreCondition">
      <MemberSignature Language="C#" Value="public System.Text.Json.Serialization.JsonIgnoreCondition DefaultIgnoreCondition { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.Serialization.JsonIgnoreCondition DefaultIgnoreCondition" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.DefaultIgnoreCondition" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultIgnoreCondition As JsonIgnoreCondition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::Serialization::JsonIgnoreCondition DefaultIgnoreCondition { System::Text::Json::Serialization::JsonIgnoreCondition get(); void set(System::Text::Json::Serialization::JsonIgnoreCondition value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultIgnoreCondition : System.Text.Json.Serialization.JsonIgnoreCondition with get, set" Usage="System.Text.Json.JsonSerializerOptions.DefaultIgnoreCondition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.Serialization.JsonIgnoreCondition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66cc8-126">Gibt eine Bedingung an, um festzulegen, wann Eigenschaften mit Standardwerten bei der Serialisierung oder Deserialisierung ignoriert werden.</span><span class="sxs-lookup"><span data-stu-id="66cc8-126">Specifies a condition to determine when properties with default values are ignored during serialization or deserialization.</span></span>
<span data-ttu-id="66cc8-127">Der Standardwert ist <see cref="F:System.Text.Json.Serialization.JsonIgnoreCondition.Never" />.</span><span class="sxs-lookup"><span data-stu-id="66cc8-127">The default value is <see cref="F:System.Text.Json.Serialization.JsonIgnoreCondition.Never" />.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="66cc8-128">Die Eigenschaft ist auf <see cref="F:System.Text.Json.Serialization.JsonIgnoreCondition.Always" /> festgelegt.</span><span class="sxs-lookup"><span data-stu-id="66cc8-128">This property is set to <see cref="F:System.Text.Json.Serialization.JsonIgnoreCondition.Always" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="66cc8-129">Diese Eigenschaft wird festgelegt, nachdem die Serialisierung oder Deserialisierung stattgefunden hat.</span><span class="sxs-lookup"><span data-stu-id="66cc8-129">This property is set after serialization or deserialization has occurred.</span></span>

<span data-ttu-id="66cc8-130">- oder -</span><span class="sxs-lookup"><span data-stu-id="66cc8-130">-or-</span></span>

<span data-ttu-id="66cc8-131"><see cref="P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues" /> wurde auf <see langword="true" /> festgelegt.</span><span class="sxs-lookup"><span data-stu-id="66cc8-131"><see cref="P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues" /> has been set to <see langword="true" />.</span></span> <span data-ttu-id="66cc8-132">Diese Eigenschaften können nicht gleichzeitig verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="66cc8-132">These properties cannot be used together.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DictionaryKeyPolicy">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonNamingPolicy DictionaryKeyPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Json.JsonNamingPolicy DictionaryKeyPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.DictionaryKeyPolicy" />
      <MemberSignature Language="VB.NET" Value="Public Property DictionaryKeyPolicy As JsonNamingPolicy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonNamingPolicy ^ DictionaryKeyPolicy { System::Text::Json::JsonNamingPolicy ^ get(); void set(System::Text::Json::JsonNamingPolicy ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DictionaryKeyPolicy : System.Text.Json.JsonNamingPolicy with get, set" Usage="System.Text.Json.JsonSerializerOptions.DictionaryKeyPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonNamingPolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66cc8-133">Ruft die Richtlinie ab, die zum Konvertieren des Namens eines <see cref="T:System.Collections.IDictionary" />-Schlüssels in ein anderes Format (z. B. die Camel-Case-Schreibweise) verwendet wird, oder legt sie fest.</span><span class="sxs-lookup"><span data-stu-id="66cc8-133">Gets or sets the policy used to convert a <see cref="T:System.Collections.IDictionary" /> key's name to another format, such as camel-casing.</span></span></summary>
        <value><span data-ttu-id="66cc8-134">Die Richtlinie, die verwendet wird, um einen <see cref="T:System.Collections.IDictionary" /> Schlüsselnamen in ein anderes Format zu konvertieren.</span><span class="sxs-lookup"><span data-stu-id="66cc8-134">The policy used to convert a <see cref="T:System.Collections.IDictionary" /> key's name to another format.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="66cc8-135">Diese Eigenschaft kann auf festgelegt werden <xref:System.Text.Json.JsonNamingPolicy.CamelCase?displayProperty=nameWithType> , um eine Richtlinie für die Kamel-Schreibweise anzugeben.</span><span class="sxs-lookup"><span data-stu-id="66cc8-135">This property can be set to <xref:System.Text.Json.JsonNamingPolicy.CamelCase?displayProperty=nameWithType> to specify a camel-casing policy.</span></span>

<span data-ttu-id="66cc8-136">Diese Eigenschaft kann auf festgelegt werden <xref:System.Text.Json.JsonNamingPolicy.CamelCase> , um eine Richtlinie für die Kamel-Schreibweise anzugeben.</span><span class="sxs-lookup"><span data-stu-id="66cc8-136">This property can be set to <xref:System.Text.Json.JsonNamingPolicy.CamelCase> to specify a camel-casing policy.</span></span>

<span data-ttu-id="66cc8-137">Sie wird bei der Deserialisierung nicht verwendet.</span><span class="sxs-lookup"><span data-stu-id="66cc8-137">It is not used when deserializing.</span></span>

<span data-ttu-id="66cc8-138">Weitere Informationen finden Sie unter Gewusst [wie: Serialisieren und Deserialisieren von JSON](/dotnet/standard/serialization/system-text-json-how-to#camel-case-dictionary-keys).</span><span class="sxs-lookup"><span data-stu-id="66cc8-138">For more information, see [How to serialize and deserialize JSON](/dotnet/standard/serialization/system-text-json-how-to#camel-case-dictionary-keys).</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Encoder">
      <MemberSignature Language="C#" Value="public System.Text.Encodings.Web.JavaScriptEncoder Encoder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encodings.Web.JavaScriptEncoder Encoder" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.Encoder" />
      <MemberSignature Language="VB.NET" Value="Public Property Encoder As JavaScriptEncoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encodings::Web::JavaScriptEncoder ^ Encoder { System::Text::Encodings::Web::JavaScriptEncoder ^ get(); void set(System::Text::Encodings::Web::JavaScriptEncoder ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Encoder : System.Text.Encodings.Web.JavaScriptEncoder with get, set" Usage="System.Text.Json.JsonSerializerOptions.Encoder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encodings.Web.JavaScriptEncoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66cc8-139">Ruft den Encoder ab oder legt den Encoder fest, der beim Versehen von Zeichenfolgen mit Escapezeichen verwendet wird, oder <see langword="null" />, um den Standardencoder zu verwenden.</span><span class="sxs-lookup"><span data-stu-id="66cc8-139">Gets or sets the encoder to use when escaping strings, or <see langword="null" /> to use the default encoder.</span></span></summary>
        <value><span data-ttu-id="66cc8-140">Die JavaScript-Zeichencodierung.</span><span class="sxs-lookup"><span data-stu-id="66cc8-140">The JavaScript character encoding.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="66cc8-141">Weitere Informationen finden Sie unter Gewusst [wie: Serialisieren und Deserialisieren von JSON](/dotnet/standard/serialization/system-text-json-how-to#customize-character-encoding).</span><span class="sxs-lookup"><span data-stu-id="66cc8-141">For more information, see [How to serialize and deserialize JSON](/dotnet/standard/serialization/system-text-json-how-to#customize-character-encoding).</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConverter">
      <MemberSignature Language="C#" Value="public System.Text.Json.Serialization.JsonConverter GetConverter (Type typeToConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.Json.Serialization.JsonConverter GetConverter(class System.Type typeToConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializerOptions.GetConverter(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConverter (typeToConvert As Type) As JsonConverter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::Json::Serialization::JsonConverter ^ GetConverter(Type ^ typeToConvert);" />
      <MemberSignature Language="F#" Value="member this.GetConverter : Type -&gt; System.Text.Json.Serialization.JsonConverter" Usage="jsonSerializerOptions.GetConverter typeToConvert" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.Serialization.JsonConverter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeToConvert" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="typeToConvert"><span data-ttu-id="66cc8-142">Der Typ, für den ein Konverter zurückgegeben wird</span><span class="sxs-lookup"><span data-stu-id="66cc8-142">The type to return a converter for.</span></span></param>
        <summary><span data-ttu-id="66cc8-143">Gibt den Konverter für den angegebenen Typ zurück</span><span class="sxs-lookup"><span data-stu-id="66cc8-143">Returns the converter for the specified type.</span></span></summary>
        <returns><span data-ttu-id="66cc8-144">Der erste Konverter, der den angegebenen Typ unterstützt, oder <see langword="null" />, wenn kein Konverter vorhanden ist</span><span class="sxs-lookup"><span data-stu-id="66cc8-144">The first converter that supports the given type, or <see langword="null" /> if there is no converter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="66cc8-145">Weitere Informationen finden Sie unter Gewusst [wie: Serialisieren und Deserialisieren von JSON](/dotnet/standard/serialization/system-text-json-how-to#sample-factory-pattern-converter).</span><span class="sxs-lookup"><span data-stu-id="66cc8-145">For more information, see [How to serialize and deserialize JSON](/dotnet/standard/serialization/system-text-json-how-to#sample-factory-pattern-converter).</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="66cc8-146">Der konfigurierte <see cref="System.Text.Json.Serialization.JsonConverter" /> für <paramref name="typeToConvert" /> gab einen ungültigen Konverter zurück.</span><span class="sxs-lookup"><span data-stu-id="66cc8-146">The configured <see cref="System.Text.Json.Serialization.JsonConverter" /> for <paramref name="typeToConvert" /> returned an invalid converter.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="66cc8-147">Es ist kein kompatibler <see cref="System.Text.Json.Serialization.JsonConverter" /> für <paramref name="typeToConvert" /> oder seine serialisierbaren Member vorhanden.</span><span class="sxs-lookup"><span data-stu-id="66cc8-147">There is no compatible <see cref="System.Text.Json.Serialization.JsonConverter" /> for <paramref name="typeToConvert" /> or its serializable members.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IgnoreNullValues">
      <MemberSignature Language="C#" Value="public bool IgnoreNullValues { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreNullValues" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreNullValues As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreNullValues { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreNullValues : bool with get, set" Usage="System.Text.Json.JsonSerializerOptions.IgnoreNullValues" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66cc8-148">Ruft einen Wert ab, der bestimmt, ob <see langword="null" />-Werte während der Serialisierung und Deserialisierung ignoriert werden, oder legt ihn fest.</span><span class="sxs-lookup"><span data-stu-id="66cc8-148">Gets or sets a value that determines whether <see langword="null" /> values are ignored during serialization and deserialization.</span></span> <span data-ttu-id="66cc8-149">Der Standardwert ist <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="66cc8-149">The default value is <see langword="false" />.</span></span></summary>
        <value><span data-ttu-id="66cc8-150"><see langword="true" /> So ignorieren Sie NULL-Werte während der Serialisierung und Deserialisierung andernfalls Siehe langword = "false"/ &gt; .</span><span class="sxs-lookup"><span data-stu-id="66cc8-150"><see langword="true" /> to ignore null values during serialization and deserialization; otherwise, see langword="false" /&gt;.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="66cc8-151">Weitere Informationen finden Sie unter [ausschließen aller NULL-Wert Eigenschaften](/dotnet/standard/serialization/system-text-json-how-to#exclude-all-null-value-properties) und [Ignorieren von NULL bei der Deserialisierung](/dotnet/standard/serialization/system-text-json-how-to#ignore-null-when-deserializing).</span><span class="sxs-lookup"><span data-stu-id="66cc8-151">For more information, see [Exclude all null value properties](/dotnet/standard/serialization/system-text-json-how-to#exclude-all-null-value-properties) and [Ignore null when deserializing](/dotnet/standard/serialization/system-text-json-how-to#ignore-null-when-deserializing).</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="66cc8-152">Diese Eigenschaft wurde festgelegt, nachdem die Serialisierung oder Deserialisierung stattgefunden hat.</span><span class="sxs-lookup"><span data-stu-id="66cc8-152">This property was set after serialization or deserialization has occurred.</span></span>

<span data-ttu-id="66cc8-153">- oder -</span><span class="sxs-lookup"><span data-stu-id="66cc8-153">-or-</span></span>

<span data-ttu-id="66cc8-154"><see cref="P:System.Text.Json.JsonSerializerOptions.DefaultIgnoreCondition" /> wurde auf nicht auf einen Standardwert festgelegt.</span><span class="sxs-lookup"><span data-stu-id="66cc8-154"><see cref="P:System.Text.Json.JsonSerializerOptions.DefaultIgnoreCondition" /> has been set to a non-default value.</span></span> <span data-ttu-id="66cc8-155">Diese Eigenschaften können nicht gleichzeitig verwendet werden.</span><span class="sxs-lookup"><span data-stu-id="66cc8-155">These properties cannot be used together.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IgnoreReadOnlyProperties">
      <MemberSignature Language="C#" Value="public bool IgnoreReadOnlyProperties { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreReadOnlyProperties" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.IgnoreReadOnlyProperties" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreReadOnlyProperties As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreReadOnlyProperties { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreReadOnlyProperties : bool with get, set" Usage="System.Text.Json.JsonSerializerOptions.IgnoreReadOnlyProperties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66cc8-156">Ruft einen Wert ab, der bestimmt, ob schreibgeschützte Eigenschaften während der Serialisierung ignoriert werden</span><span class="sxs-lookup"><span data-stu-id="66cc8-156">Gets a value that determines whether read-only properties are ignored during serialization.</span></span> <span data-ttu-id="66cc8-157">Der Standardwert ist <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="66cc8-157">The default value is <see langword="false" />.</span></span></summary>
        <value><span data-ttu-id="66cc8-158"><see langword="true" /> So ignorieren Sie schreibgeschützte Eigenschaften während der Serialisierung andernfalls <see langword="false" /> .</span><span class="sxs-lookup"><span data-stu-id="66cc8-158"><see langword="true" /> to ignore read-only properties during serialization; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="66cc8-159">Eine Eigenschaft ist schreibgeschützt, wenn sie einen öffentlichen Getter, aber keinen öffentlichen Setter enthält.</span><span class="sxs-lookup"><span data-stu-id="66cc8-159">A property is read-only if it contains a public getter but not a public setter.</span></span> 

<span data-ttu-id="66cc8-160">Schreibgeschützte Eigenschaften werden unabhängig von dieser Einstellung nicht deserialisiert.</span><span class="sxs-lookup"><span data-stu-id="66cc8-160">Read-only properties are not deserialized regardless of this setting.</span></span>

<span data-ttu-id="66cc8-161">Weitere Informationen finden Sie unter Gewusst [wie: Serialisieren und Deserialisieren von JSON](/dotnet/standard/serialization/system-text-json-how-to#exclude-all-read-only-properties).</span><span class="sxs-lookup"><span data-stu-id="66cc8-161">For more information, see [How to serialize and deserialize JSON](/dotnet/standard/serialization/system-text-json-how-to#exclude-all-read-only-properties).</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="66cc8-162">Diese Eigenschaft wurde festgelegt, nachdem die Serialisierung oder Deserialisierung stattgefunden hat.</span><span class="sxs-lookup"><span data-stu-id="66cc8-162">This property was set after serialization or deserialization has occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MaxDepth">
      <MemberSignature Language="C#" Value="public int MaxDepth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxDepth" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.MaxDepth" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxDepth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxDepth { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaxDepth : int with get, set" Usage="System.Text.Json.JsonSerializerOptions.MaxDepth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66cc8-163">Ruft die bei der Serialisierung oder Deserialisierung von JSON maximal zulässige Tiefe ab oder legt sie auf den Standardwert 0 (null) fest, wobei eine maximale Tiefe von 64 angegeben wird.</span><span class="sxs-lookup"><span data-stu-id="66cc8-163">Gets or sets the maximum depth allowed when serializing or deserializing JSON, with the default value of 0 indicating a maximum depth of 64.</span></span></summary>
        <value><span data-ttu-id="66cc8-164">Die maximal zulässige Tiefe bei der Serialisierung oder Deserialisierung von JSON.</span><span class="sxs-lookup"><span data-stu-id="66cc8-164">The maximum depth allowed when serializing or deserializing JSON.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="66cc8-165">Wenn Sie diese Tiefe überschreiten, wird eine ausgelöst <xref:System.Text.Json.JsonException> .</span><span class="sxs-lookup"><span data-stu-id="66cc8-165">Going past this depth throws a <xref:System.Text.Json.JsonException>.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="66cc8-166">Diese Eigenschaft wurde festgelegt, nachdem die Serialisierung oder Deserialisierung stattgefunden hat.</span><span class="sxs-lookup"><span data-stu-id="66cc8-166">This property was set after serialization or deserialization has occurred.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="66cc8-167">Die maximale Tiefe wird auf einen negativen Wert festgelegt.</span><span class="sxs-lookup"><span data-stu-id="66cc8-167">The max depth is set to a negative value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PropertyNameCaseInsensitive">
      <MemberSignature Language="C#" Value="public bool PropertyNameCaseInsensitive { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PropertyNameCaseInsensitive" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.PropertyNameCaseInsensitive" />
      <MemberSignature Language="VB.NET" Value="Public Property PropertyNameCaseInsensitive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool PropertyNameCaseInsensitive { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.PropertyNameCaseInsensitive : bool with get, set" Usage="System.Text.Json.JsonSerializerOptions.PropertyNameCaseInsensitive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66cc8-168">Ruft einen Wert ab oder legt einen Wert fest, der bestimmt, ob der Name einer Eigenschaft bei der Deserialisierung einen Vergleich ohne Beachtung der Groß-/Kleinschreibung verwendet.</span><span class="sxs-lookup"><span data-stu-id="66cc8-168">Gets or sets a value that determines whether a property's name uses a case-insensitive comparison during deserialization.</span></span> <span data-ttu-id="66cc8-169">Der Standardwert ist <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="66cc8-169">The default value is <see langword="false" />.</span></span></summary>
        <value><span data-ttu-id="66cc8-170"><see langword="true" /> So vergleichen Sie Eigenschaftsnamen unter Berücksichtigung der Groß-/Kleinschreibung andernfalls <see langword="false" /> .</span><span class="sxs-lookup"><span data-stu-id="66cc8-170"><see langword="true" /> to compare property names using case-insensitive comparison; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="66cc8-171">Der Vergleich ohne Berücksichtigung der Groß-/Kleinschreibung ist mit Leistungseinbußen verbunden (d. h., wenn `PropertyNameCaseInsensitive` ist `true` ).</span><span class="sxs-lookup"><span data-stu-id="66cc8-171">There is a performance cost associated with case-insensitive comparison (that is, when `PropertyNameCaseInsensitive` is `true`).</span></span>

<span data-ttu-id="66cc8-172">Weitere Informationen finden Sie unter Gewusst [wie: Serialisieren und Deserialisieren von JSON](/dotnet/standard/serialization/system-text-json-how-to#case-insensitive-property-matching).</span><span class="sxs-lookup"><span data-stu-id="66cc8-172">For more information, see [How to serialize and deserialize JSON](/dotnet/standard/serialization/system-text-json-how-to#case-insensitive-property-matching).</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyNamingPolicy">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonNamingPolicy PropertyNamingPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Json.JsonNamingPolicy PropertyNamingPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.PropertyNamingPolicy" />
      <MemberSignature Language="VB.NET" Value="Public Property PropertyNamingPolicy As JsonNamingPolicy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonNamingPolicy ^ PropertyNamingPolicy { System::Text::Json::JsonNamingPolicy ^ get(); void set(System::Text::Json::JsonNamingPolicy ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PropertyNamingPolicy : System.Text.Json.JsonNamingPolicy with get, set" Usage="System.Text.Json.JsonSerializerOptions.PropertyNamingPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonNamingPolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66cc8-173">Ruft einen Wert ab oder legt einen Wert fest, der die Richtlinie angibt, mit der der Name einer Eigenschaft in einem Objekt in ein anderes Format konvertiert wird (z. B. Camel-Case), oder <see langword="null" />, um die Eigenschaftsnamen unverändert zu lassen</span><span class="sxs-lookup"><span data-stu-id="66cc8-173">Gets or sets a value that specifies the policy used to convert a property's name on an object to another format, such as camel-casing, or <see langword="null" /> to leave property names unchanged.</span></span></summary>
        <value><span data-ttu-id="66cc8-174">Eine Benennungs Richtlinie für Eigenschaften oder, <see langword="null" /> um Eigenschaftsnamen unverändert zu lassen.</span><span class="sxs-lookup"><span data-stu-id="66cc8-174">A property naming policy, or <see langword="null" /> to leave property names unchanged.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="66cc8-175">Es wird erwartet, dass der resultierende Eigenschaftsname bei der Deserialisierung mit der JSON-Nutzlast übereinstimmt und beim Schreiben des Eigenschafts namens während der Serialisierung verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="66cc8-175">The resulting property name is expected to match the JSON payload during deserialization, and will be used when writing the property name during serialization.</span></span>

<span data-ttu-id="66cc8-176">Die Richtlinie wird nicht für Eigenschaften verwendet, auf die ein <xref:System.Text.Json.Serialization.JsonPropertyNameAttribute> angewendet wird.</span><span class="sxs-lookup"><span data-stu-id="66cc8-176">The policy is not used for properties that have a <xref:System.Text.Json.Serialization.JsonPropertyNameAttribute> applied.</span></span>

<span data-ttu-id="66cc8-177">Diese Eigenschaft kann auf festgelegt werden <xref:System.Text.Json.JsonNamingPolicy.CamelCase?displayProperty=nameWithType> , um eine Richtlinie für die Kamel-Schreibweise anzugeben.</span><span class="sxs-lookup"><span data-stu-id="66cc8-177">This property can be set to <xref:System.Text.Json.JsonNamingPolicy.CamelCase?displayProperty=nameWithType> to specify a camel-casing policy.</span></span>

<span data-ttu-id="66cc8-178">Weitere Informationen finden Sie unter Gewusst [wie: Serialisieren und Deserialisieren von JSON](/dotnet/standard/serialization/system-text-json-how-to#customize-json-names-and-values).</span><span class="sxs-lookup"><span data-stu-id="66cc8-178">For more information, see [How to serialize and deserialize JSON](/dotnet/standard/serialization/system-text-json-how-to#customize-json-names-and-values).</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadCommentHandling">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonCommentHandling ReadCommentHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonCommentHandling ReadCommentHandling" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.ReadCommentHandling" />
      <MemberSignature Language="VB.NET" Value="Public Property ReadCommentHandling As JsonCommentHandling" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonCommentHandling ReadCommentHandling { System::Text::Json::JsonCommentHandling get(); void set(System::Text::Json::JsonCommentHandling value); };" />
      <MemberSignature Language="F#" Value="member this.ReadCommentHandling : System.Text.Json.JsonCommentHandling with get, set" Usage="System.Text.Json.JsonSerializerOptions.ReadCommentHandling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonCommentHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66cc8-179">Ruft einen Wert ab oder legt einen Wert fest, der definiert, wie Kommentare während der Deserialisierung behandelt werden</span><span class="sxs-lookup"><span data-stu-id="66cc8-179">Gets or sets a value that defines how comments are handled during deserialization.</span></span></summary>
        <value><span data-ttu-id="66cc8-180">Ein Wert, der angibt, ob Kommentare zulässig, unzulässig oder übersprungen werden.</span><span class="sxs-lookup"><span data-stu-id="66cc8-180">A value that indicates whether comments are allowed, disallowed, or skipped.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="66cc8-181">Standardmäßig wird eine <xref:System.Text.Json.JsonException> während der Deserialisierung ausgelöst, wenn ein Kommentar auftritt.</span><span class="sxs-lookup"><span data-stu-id="66cc8-181">By default, a <xref:System.Text.Json.JsonException> is thrown during deserialization if a comment is encountered.</span></span>

<span data-ttu-id="66cc8-182">Weitere Informationen finden Sie unter Gewusst [wie: Serialisieren und Deserialisieren von JSON](/dotnet/standard/serialization/system-text-json-how-to#allow-comments-and-trailing-commas).</span><span class="sxs-lookup"><span data-stu-id="66cc8-182">For more information, see [How to serialize and deserialize JSON](/dotnet/standard/serialization/system-text-json-how-to#allow-comments-and-trailing-commas).</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="66cc8-183">Diese Eigenschaft wurde festgelegt, nachdem die Serialisierung oder Deserialisierung stattgefunden hat.</span><span class="sxs-lookup"><span data-stu-id="66cc8-183">This property was set after serialization or deserialization has occurred.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="66cc8-184">Die Enumeration für die Kommentarbehandlung wird auf einen Wert festgelegt, der nicht unterstützt wird (oder nicht innerhalb des <see cref="T:System.Text.Json.JsonCommentHandling" />-Enumeratiosbereichs liegt).</span><span class="sxs-lookup"><span data-stu-id="66cc8-184">The comment handling enum is set to a value that is not supported (or not within the <see cref="T:System.Text.Json.JsonCommentHandling" /> enum range).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReferenceHandler">
      <MemberSignature Language="C#" Value="public System.Text.Json.Serialization.ReferenceHandler ReferenceHandler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Json.Serialization.ReferenceHandler ReferenceHandler" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.ReferenceHandler" />
      <MemberSignature Language="VB.NET" Value="Public Property ReferenceHandler As ReferenceHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::Serialization::ReferenceHandler ^ ReferenceHandler { System::Text::Json::Serialization::ReferenceHandler ^ get(); void set(System::Text::Json::Serialization::ReferenceHandler ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ReferenceHandler : System.Text.Json.Serialization.ReferenceHandler with get, set" Usage="System.Text.Json.JsonSerializerOptions.ReferenceHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.Serialization.ReferenceHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66cc8-185">Konfiguriert, wie Objektverweise beim Lesen und Schreiben von JSON behandelt werden sollen.</span><span class="sxs-lookup"><span data-stu-id="66cc8-185">Configures how object references are handled when reading and writing JSON.</span></span></summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="66cc8-186">Standardmäßig werden Objekte mit Zyklen von der Serialisierung nicht unterstützt, und doppelte Verweise werden nicht beibehalten.</span><span class="sxs-lookup"><span data-stu-id="66cc8-186">By default, serialization does not support objects with cycles and does not preserve duplicate references.</span></span> <span data-ttu-id="66cc8-187">Beim Serialisieren von Verweis Typen werden keine Metadateneigenschaften geschrieben und werden bei der Deserialisierung als reguläre Eigenschaften behandelt.</span><span class="sxs-lookup"><span data-stu-id="66cc8-187">Metadata properties will not be written when serializing reference types and will be treated as regular properties on deserialize.</span></span>
 
* <span data-ttu-id="66cc8-188">Beim Serialisieren:</span><span class="sxs-lookup"><span data-stu-id="66cc8-188">On Serialize:</span></span>

  * <span data-ttu-id="66cc8-189">Behandelt doppelte Objekt Verweise so, als wären Sie eindeutig und schreibt alle zugehörigen Eigenschaften.</span><span class="sxs-lookup"><span data-stu-id="66cc8-189">Treats duplicate object references as if they were unique and writes all their properties.</span></span>
  * <span data-ttu-id="66cc8-190">Das Serialisierungsprogramm löst eine aus, <xref:System.Text.Json.JsonException> Wenn ein-Objekt einen-Durchlauf enthält.</span><span class="sxs-lookup"><span data-stu-id="66cc8-190">The serializer throws a <xref:System.Text.Json.JsonException> if an object contains a cycle.</span></span>

* <span data-ttu-id="66cc8-191">Beim Deserialisieren:</span><span class="sxs-lookup"><span data-stu-id="66cc8-191">On Deserialize:</span></span>

  * <span data-ttu-id="66cc8-192">Metadateneigenschaften ( `$id` , `$values` und `$ref` ) werden nicht verbraucht und werden daher als reguläre JSON-Eigenschaften behandelt.</span><span class="sxs-lookup"><span data-stu-id="66cc8-192">Metadata properties (`$id`, `$values`, and `$ref`) will not be consumed and therefore will be treated as regular JSON properties.</span></span>
  * <span data-ttu-id="66cc8-193">Die Metadateneigenschaften können einer echten Eigenschaft für das zurückgegebene Objekt zugeordnet werden, wenn die Eigenschaftsnamen entsprechen, oder dem <xref:System.Text.Json.Serialization.JsonExtensionDataAttribute> Überlauf Wörterbuch hinzugefügt werden, sofern vorhanden. andernfalls werden Sie ignoriert.</span><span class="sxs-lookup"><span data-stu-id="66cc8-193">The metadata properties can map to a real property on the returned object if the property names match, or will be added to the <xref:System.Text.Json.Serialization.JsonExtensionDataAttribute> overflow dictionary, if one exists; otherwise, they are ignored.</span></span>

<span data-ttu-id="66cc8-194">Verwenden Sie <xref:System.Text.Json.Serialization.ReferenceHandler.Preserve> , um eine eindeutige Objekt Verweis Beibehaltung für die Serialisierung und den metadatenverbrauch zu aktivieren</span><span class="sxs-lookup"><span data-stu-id="66cc8-194">Use <xref:System.Text.Json.Serialization.ReferenceHandler.Preserve> to enable unique object reference preservation on serialization and metadata consumption to read preserved references on deserialization.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteIndented">
      <MemberSignature Language="C#" Value="public bool WriteIndented { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool WriteIndented" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.WriteIndented" />
      <MemberSignature Language="VB.NET" Value="Public Property WriteIndented As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool WriteIndented { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.WriteIndented : bool with get, set" Usage="System.Text.Json.JsonSerializerOptions.WriteIndented" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66cc8-195">Ruft einen Wert ab oder legt einen Wert fest, der definiert, ob JSON eine automatische Strukturierung und Einrückung verwenden soll.</span><span class="sxs-lookup"><span data-stu-id="66cc8-195">Gets or sets a value that defines whether JSON should use pretty printing.</span></span> <span data-ttu-id="66cc8-196">Standardmäßig wird JSON ohne zusätzlichen Leerraum serialisiert.</span><span class="sxs-lookup"><span data-stu-id="66cc8-196">By default, JSON is serialized without any extra white space.</span></span></summary>
        <value><span data-ttu-id="66cc8-197"><see langword="true" /> , wenn JSON bei der Serialisierung Recht gedruckt werden soll. andernfalls <see langword="false" /> .</span><span class="sxs-lookup"><span data-stu-id="66cc8-197"><see langword="true" /> if JSON should pretty print on serialization; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="66cc8-198">Der Standardwert ist <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="66cc8-198">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="66cc8-199">Ein hübsches Drucken umfasst Folgendes:</span><span class="sxs-lookup"><span data-stu-id="66cc8-199">Pretty printing includes:</span></span> 

- <span data-ttu-id="66cc8-200">Geschaltete JSON-Token werden eingefügt.</span><span class="sxs-lookup"><span data-stu-id="66cc8-200">Indenting nested JSON tokens.</span></span>
- <span data-ttu-id="66cc8-201">Neue Zeilen werden hinzugefügt</span><span class="sxs-lookup"><span data-stu-id="66cc8-201">Adding new lines</span></span>
- <span data-ttu-id="66cc8-202">Leerzeichen zwischen Eigenschaftsnamen und-Werten werden hinzugefügt.</span><span class="sxs-lookup"><span data-stu-id="66cc8-202">Adding white space between property names and values.</span></span> 

<span data-ttu-id="66cc8-203">Weitere Informationen finden Sie unter Gewusst [wie: Serialisieren und Deserialisieren von JSON](/dotnet/standard/serialization/system-text-json-how-to#serialize-to-formatted-json).</span><span class="sxs-lookup"><span data-stu-id="66cc8-203">For more information, see [How to serialize and deserialize JSON](/dotnet/standard/serialization/system-text-json-how-to#serialize-to-formatted-json).</span></span>

         ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="66cc8-204">Diese Eigenschaft wurde festgelegt, nachdem die Serialisierung oder Deserialisierung stattgefunden hat.</span><span class="sxs-lookup"><span data-stu-id="66cc8-204">This property was set after serialization or deserialization has occurred.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>

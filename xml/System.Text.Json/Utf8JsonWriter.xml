<Type Name="Utf8JsonWriter" FullName="System.Text.Json.Utf8JsonWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6bf8bd7fdfd80ccc415cee28e69de81768b96942" /><Meta Name="ms.sourcegitcommit" Value="e28b7b371ead27d99e20387b8243f09b0cdb9fb3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="04/12/2019" /><Meta Name="ms.locfileid" Value="59541644" /></Metadata><TypeSignature Language="C#" Value="public struct Utf8JsonWriter" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit Utf8JsonWriter extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.Utf8JsonWriter" />
  <TypeSignature Language="VB.NET" Value="Public Structure Utf8JsonWriter" />
  <TypeSignature Language="C++ CLI" Value="public value class Utf8JsonWriter" />
  <TypeSignature Language="F#" Value="type Utf8JsonWriter = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="4a2af-101">Bietet eine leistungsstarke API für das Schreiben von UTF-8-codiertem JSON-Text in Vorwärtsrichtung ohne Zwischenspeicherung.</span><span class="sxs-lookup"><span data-stu-id="4a2af-101">Provides a high-performance API for forward-only, non-cached writing of UTF-8 encoded JSON text.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="4a2af-102">`Utf8JsonWriter` schreibt der Text nacheinander mit kein Zwischenspeichern und in der Standardeinstellung entspricht die [JSON RFC](https://tools.ietf.org/html/rfc8259), mit Ausnahme von das Schreiben von Kommentaren.</span><span class="sxs-lookup"><span data-stu-id="4a2af-102">`Utf8JsonWriter` writes the text sequentially with no caching and by default adheres to the [JSON RFC](https://tools.ietf.org/html/rfc8259), with the exception of writing comments.</span></span>

<span data-ttu-id="4a2af-103">Eine Methode, die versucht, ungültiges JSON-Format zu schreiben, wenn die Validierung ist aktiviert, löst eine <xref:System.InvalidOperationException> mit einer kontextspezifischen Fehlermeldung angezeigt.</span><span class="sxs-lookup"><span data-stu-id="4a2af-103">A method that attempts to write invalid JSON when validation is enabled throws a <xref:System.InvalidOperationException> with a context-specific error message.</span></span>
<span data-ttu-id="4a2af-104">Da dieser Typ einer Referenzstruktur handelt, unterstützt es Async nicht direkt.</span><span class="sxs-lookup"><span data-stu-id="4a2af-104">Since this type is a ref struct, it does not directly support async.</span></span> <span data-ttu-id="4a2af-105">Es bietet jedoch Unterstützung für erneutes eintreten, Teil der Daten geschrieben und mit dem Schreiben in kleinen Blöcken fortzufahren.</span><span class="sxs-lookup"><span data-stu-id="4a2af-105">However, it does provide support for reentrancy to write partial data and to continue writing in chunks.</span></span>
<span data-ttu-id="4a2af-106">Um zum Formatieren der Ausgabe mit Einzug und Leerzeichen oder zum Überspringen der Überprüfung können, erstellen Sie eine Instanz des <xref:System.Text.Json.JsonWriterState> und übergeben Sie dies in dem Writer.</span><span class="sxs-lookup"><span data-stu-id="4a2af-106">To be able to format the output with indentation and white space OR to skip validation, create an instance of <xref:System.Text.Json.JsonWriterState> and pass that in to the writer.</span></span>

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonWriter (System.Buffers.IBufferWriter&lt;byte&gt; bufferWriter, System.Text.Json.JsonWriterState state = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Buffers.IBufferWriter`1&lt;unsigned int8&gt; bufferWriter, valuetype System.Text.Json.JsonWriterState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.#ctor(System.Buffers.IBufferWriter{System.Byte},System.Text.Json.JsonWriterState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bufferWriter As IBufferWriter(Of Byte), Optional state As JsonWriterState = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonWriter : System.Buffers.IBufferWriter&lt;byte&gt; * System.Text.Json.JsonWriterState -&gt; System.Text.Json.Utf8JsonWriter" Usage="new System.Text.Json.Utf8JsonWriter (bufferWriter, state)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bufferWriter" Type="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />
        <Parameter Name="state" Type="System.Text.Json.JsonWriterState" />
      </Parameters>
      <Docs>
        <param name="bufferWriter"><span data-ttu-id="4a2af-107">Eine Instanz von <see cref="T:System.Buffers.IBufferWriter`1" />, die als Ziel für das Schreiben von JSON-Text verwendet wird.</span><span class="sxs-lookup"><span data-stu-id="4a2af-107">An instance of <see cref="T:System.Buffers.IBufferWriter`1" /> used as a destination for writing JSON text.</span></span></param>
        <param name="state"><span data-ttu-id="4a2af-108">Eine Struktur, die den Readerzustand enthält.</span><span class="sxs-lookup"><span data-stu-id="4a2af-108">A struct that contains the reader state.</span></span> <span data-ttu-id="4a2af-109">Beim ersten Aufruf des Konstruktors sollte sie einen Standardzustand wiederspiegeln. Andernfalls sollte der Zustand aus der vorherigen Instanz von <see cref="T:System.Text.Json.Utf8JsonWriter" /> erfasst und zurückgegeben werden.</span><span class="sxs-lookup"><span data-stu-id="4a2af-109">On the first call to the constructor, it should reflect a default state; otherwise, it should capture the state from the previous instance instance of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> and pass that back.</span></span></param>
        <summary><span data-ttu-id="4a2af-110">Initialisiert eine neue Instanz der <see cref="T:System.Text.Json.Utf8JsonWriter" />-Klasse mit der angegebenen <paramref name="bufferWriter" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-110">Initializes a new instance of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> class with the specified <paramref name="bufferWriter" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="4a2af-111">Da dieser Typ einer Referenzstruktur handelt, ist eine Art ausschließlich stapelbezogene, und alle Einschränkungen von referenzstrukturen darauf anwenden.</span><span class="sxs-lookup"><span data-stu-id="4a2af-111">Since this type is a ref struct, it is a stack-only type, and all the limitations of ref structs apply to it.</span></span>
<span data-ttu-id="4a2af-112">Dies ist der Grund, warum der Konstruktor akzeptiert, ein <xref:System.Text.Json.JsonWriterState>.</span><span class="sxs-lookup"><span data-stu-id="4a2af-112">This is the reason why the constructor accepts a <xref:System.Text.Json.JsonWriterState>.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4a2af-113"><paramref name="bufferWriter" /> ist <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-113"><paramref name="bufferWriter" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BytesCommitted">
      <MemberSignature Language="C#" Value="public long BytesCommitted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 BytesCommitted" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.BytesCommitted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesCommitted As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long BytesCommitted { long get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesCommitted : int64" Usage="System.Text.Json.Utf8JsonWriter.BytesCommitted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4a2af-114">Ruft die Gesamtzahl der Bytes ab, für die von <see cref="T:System.Text.Json.Utf8JsonWriter" /> bisher ein Commit an die Ausgabe für die aktuelle Instanz von <see cref="T:System.Text.Json.Utf8JsonWriter" /> ausgeführt wurde.</span><span class="sxs-lookup"><span data-stu-id="4a2af-114">Gets the total number of bytes committed to the output by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far for the current instance of the <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span></span>
<span data-ttu-id="4a2af-115">Dies gibt an, um wie viel <see cref="T:System.Buffers.IBufferWriter`1" /> fortgeschritten ist.</span><span class="sxs-lookup"><span data-stu-id="4a2af-115">This indicates how much the <see cref="T:System.Buffers.IBufferWriter`1" /> has advanced.</span></span></summary>
        <value><span data-ttu-id="4a2af-116">Die Gesamtzahl der Bytes, die ein Commit ausgeführt, die Ausgabe von der <see cref="T:System.Text.Json.Utf8JsonWriter" /> bisher.</span><span class="sxs-lookup"><span data-stu-id="4a2af-116">The total number of bytes committed to the output by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BytesWritten">
      <MemberSignature Language="C#" Value="public long BytesWritten { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 BytesWritten" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.BytesWritten" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesWritten As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long BytesWritten { long get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesWritten : int64" Usage="System.Text.Json.Utf8JsonWriter.BytesWritten" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4a2af-117">Ruft die Gesamtzahl der Bytes ab, die von <see cref="T:System.Text.Json.Utf8JsonWriter" /> bisher für die aktuelle Instanz von <see cref="T:System.Text.Json.Utf8JsonWriter" /> geschrieben wurden.</span><span class="sxs-lookup"><span data-stu-id="4a2af-117">Gets the total number of bytes written by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far for the current instance of the <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span></span>
<span data-ttu-id="4a2af-118">Dazu gehören Daten, die über das hinaus geschrieben wurden, für das bereits ein Commit ausgeführt wurde.</span><span class="sxs-lookup"><span data-stu-id="4a2af-118">This includes data that has been written beyond what has already been committed.</span></span></summary>
        <value><span data-ttu-id="4a2af-119">Die Gesamtanzahl von Bytes, die geschrieben werden, indem die <see cref="T:System.Text.Json.Utf8JsonWriter" /> bisher.</span><span class="sxs-lookup"><span data-stu-id="4a2af-119">The total number of bytes written by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentDepth">
      <MemberSignature Language="C#" Value="public int CurrentDepth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentDepth" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.CurrentDepth" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentDepth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentDepth { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDepth : int" Usage="System.Text.Json.Utf8JsonWriter.CurrentDepth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4a2af-120">Ruft die Tiefe des aktuellen Tokens ab.</span><span class="sxs-lookup"><span data-stu-id="4a2af-120">Gets the depth of the current token.</span></span></summary>
        <value><span data-ttu-id="4a2af-121">Die Tiefe des aktuellen Tokens.</span><span class="sxs-lookup"><span data-stu-id="4a2af-121">The depth of the current token.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="4a2af-122">Die `CurrentDepth` Eigenschaft verfolgt die rekursive Tiefe der geschachtelten Objekte / arrays in der JSON-Text, die bisher geschrieben.</span><span class="sxs-lookup"><span data-stu-id="4a2af-122">The `CurrentDepth` property tracks the recursive depth of the nested objects / arrays within the JSON text written so far.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush (bool isFinalBlock = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush(bool isFinalBlock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Flush(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush (Optional isFinalBlock As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.Flush : bool -&gt; unit" Usage="utf8JsonWriter.Flush isFinalBlock" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isFinalBlock" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isFinalBlock"><span data-ttu-id="4a2af-123"><see langword="true" />, um anzugeben, dass keine weiteren Daten geschrieben werden, andernfalls <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-123"><see langword="true" /> to indicate no more data will be written; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="4a2af-124">Hiermit wird überprüft, ob der bisher geschriebene JSON-Code strukturell gültig ist, wenn keine weiteren Daten folgen.</span><span class="sxs-lookup"><span data-stu-id="4a2af-124">This is used to validate that the JSON written so far is structurally valid if no more data is to follow.</span></span></param>
        <summary><span data-ttu-id="4a2af-125">Setzt den zugrunde liegenden <see cref="T:System.Buffers.IBufferWriter`1" /> basierend auf dem bisher geschriebenen Code fort.</span><span class="sxs-lookup"><span data-stu-id="4a2af-125">Advances the underlying <see cref="T:System.Buffers.IBufferWriter`1" /> based on what has been written so far.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-126">Es wurde unvollständiger JSON-Code geschrieben, und <paramref name="isFinalBlock" /> ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-126">Incomplete JSON has been written and <paramref name="isFinalBlock" /> is <see langword="true" />.</span></span> <span data-ttu-id="4a2af-127">Wenn z.B. ein offenes Objekt oder Array geschlossen werden muss.</span><span class="sxs-lookup"><span data-stu-id="4a2af-127">For example, when an open object or array needs to be closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentState">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonWriterState GetCurrentState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Text.Json.JsonWriterState GetCurrentState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.GetCurrentState" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentState () As JsonWriterState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::Json::JsonWriterState GetCurrentState();" />
      <MemberSignature Language="F#" Value="member this.GetCurrentState : unit -&gt; System.Text.Json.JsonWriterState" Usage="utf8JsonWriter.GetCurrentState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonWriterState</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4a2af-128">Gibt die aktuelle Momentaufnahme des Zustands von <see cref="T:System.Text.Json.Utf8JsonWriter" /> zurück, der vom Aufrufer erfasst und an den <see cref="T:System.Text.Json.Utf8JsonWriter" />-Konstruktor mit weiteren Daten zurückgegeben werden muss.</span><span class="sxs-lookup"><span data-stu-id="4a2af-128">Returns the current snapshot of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> state that must be captured by the caller and passed back in to the <see cref="T:System.Text.Json.Utf8JsonWriter" /> constructor with more data.</span></span></summary>
        <returns><span data-ttu-id="4a2af-129">Die aktuelle Momentaufnahme des <see cref="T:System.Text.Json.Utf8JsonWriter" />-Zustands.</span><span class="sxs-lookup"><span data-stu-id="4a2af-129">The current snapshot of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> state.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="4a2af-130">Im Gegensatz zu den <xref:System.Text.Json.Utf8JsonWriter>, d.h. ein Ref Struct, der Status "Async/await" hinweg überstehen kann und daher ist dieser Typ erforderlich, um mehr Daten lesen, asynchron, bevor Sie eine neue Instanz der fortsetzen unterstützen die <xref:System.Text.Json.Utf8JsonWriter>.</span><span class="sxs-lookup"><span data-stu-id="4a2af-130">Unlike the <xref:System.Text.Json.Utf8JsonWriter>, which is a ref struct, the state can survive across async/await boundaries, and hence this type is required to provide support for reading in more data asynchronously before continuing with a new instance of the <xref:System.Text.Json.Utf8JsonWriter>.</span></span>

<span data-ttu-id="4a2af-131">Abrufen des Status zum Erstellen einer neuen <see cref="T:System.Text.Json.Utf8JsonWriter" /> Struktur ohne das erste Ausführen eines Commits für die Daten, die geschrieben wurden in einem inkonsistenten Zustand führen würde.</span><span class="sxs-lookup"><span data-stu-id="4a2af-131">Getting the state for creating a new <see cref="T:System.Text.Json.Utf8JsonWriter" /> struct without first committing the data that has been written would result in an inconsistent state.</span></span> <span data-ttu-id="4a2af-132">Rufen Sie <xref:System.Text.Json.Utf8JsonWriter.Flush%2A> vor dem Abrufen des aktuellen Status.</span><span class="sxs-lookup"><span data-stu-id="4a2af-132">Call <xref:System.Text.Json.Utf8JsonWriter.Flush%2A> before getting the current state.</span></span>  

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-133">Die JSON-Daten wurden geschrieben und gepuffert, aber noch nicht in <see cref="T:System.Buffers.IBufferWriter`1" /> geleert.</span><span class="sxs-lookup"><span data-stu-id="4a2af-133">The JSON data has been written and buffered but not yet flushed to the <see cref="T:System.Buffers.IBufferWriter`1" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Byte},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (utf8PropertyName As ReadOnlySpan(Of Byte), value As Boolean, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : ReadOnlySpan&lt;byte&gt; * bool * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Boolean" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="4a2af-134">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-134">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="4a2af-135">Der Wert, der als JSON-Literal „true“ oder „false“ als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-135">The value to be written as a JSON literal "true" or "false" as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-136"><see langword="false" />, um anzugeben, dass der Writer davon ausgehen soll, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und den entsprechenden Schritt überspringt, andernfalls <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-136"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a2af-137">Dies ist ein optionaler Parameter. Der Standardwert ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-137">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a2af-138">Schreibt den Eigenschaftennamen und <see cref="T:System.Boolean" />-Wert (als JSON-Literal „true“ oder „false“) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-138">Writes the property name and <see cref="T:System.Boolean" /> value (as a JSON literal "true" or "false") as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-139"><paramref name="utf8PropertyName" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="4a2af-139"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-140">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-140">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (ReadOnlySpan&lt;char&gt; propertyName, bool value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Char},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As ReadOnlySpan(Of Char), value As Boolean, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : ReadOnlySpan&lt;char&gt; * bool * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Boolean" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a2af-141">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="4a2af-141">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="4a2af-142">Der Wert, der als JSON-Literal „true“ oder „false“ als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-142">The value to be written as a JSON literal "true" or "false" as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-143"><see langword="false" />, um anzugeben, dass der Writer davon ausgehen soll, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und den entsprechenden Schritt überspringt, andernfalls <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-143"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a2af-144">Dies ist ein optionaler Parameter, und der Standardwert ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-144">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a2af-145">Schreibt den Eigenschaftennamen und <see cref="T:System.Boolean" />-Wert (als JSON-Literal „true“ oder „false“) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-145">Writes the property name and <see cref="T:System.Boolean" /> value (as a JSON literal "true" or "false") as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-146"><paramref name="propertyName" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="4a2af-146"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-147">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-147">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (string propertyName, bool value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(string propertyName, bool value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As String, value As Boolean, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : string * bool * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Boolean" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a2af-148">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="4a2af-148">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="4a2af-149">Der Wert, der als JSON-Literal „true“ oder „false“ als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-149">The value to be written as a JSON literal "true" or "false" as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-150"><see langword="false" />, um anzugeben, dass der Writer davon ausgehen soll, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und den entsprechenden Schritt überspringt, andernfalls <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-150"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a2af-151">Dies ist ein optionaler Parameter, und der Standardwert ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-151">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a2af-152">Schreibt den Eigenschaftennamen und <see cref="T:System.Boolean" />-Wert (als JSON-Literal „true“ oder „false“) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-152">Writes the property name and <see cref="T:System.Boolean" /> value (as a JSON literal "true" or "false") as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-153"><paramref name="propertyName" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="4a2af-153"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-154">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-154">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBooleanValue">
      <MemberSignature Language="C#" Value="public void WriteBooleanValue (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBooleanValue(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBooleanValue(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBooleanValue (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBooleanValue(bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBooleanValue : bool -&gt; unit" Usage="utf8JsonWriter.WriteBooleanValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4a2af-155">Der Wert, der als JSON-Literal „true“ oder „false“ als ein Element eines JSON-Arrays geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-155">The value to be written as a JSON literal "true" or "false" as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="4a2af-156">Schreibt den <see cref="T:System.Boolean" />-Wert (als JSON-Literal „true“ oder „false“) als ein Element eines JSON-Arrays.</span><span class="sxs-lookup"><span data-stu-id="4a2af-156">Writes the <see cref="T:System.Boolean" /> value (as a JSON literal "true" or "false") as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-157">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-157">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue (utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8Value"><span data-ttu-id="4a2af-158">Der UTF-8-codierte Wert, der als JSON-Kommentar geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-158">The UTF-8 encoded value to be written as a JSON comment.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-159"><see langword="false" />, um anzugeben, dass der Writer davon ausgehen soll, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und den entsprechenden Schritt überspringt, andernfalls <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-159"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a2af-160">Dies ist ein optionaler Parameter, und der Standardwert ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-160">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a2af-161">Schreibt den UTF-8-Textwert als einen JSON-Kommentar (in <c>/*..*/</c>).</span><span class="sxs-lookup"><span data-stu-id="4a2af-161">Writes the UTF-8 text value as a JSON comment (within <c>/*..*/</c>).</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-162"><paramref name="utf8Value" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="4a2af-162"><paramref name="utf8Value" /> is too large.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue (value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4a2af-163">Der UTF-16-codierte Wert, der als UTF-8-transcodierter JSON-Kommentar geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-163">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-164"><see langword="false" />, um anzugeben, dass der Writer davon ausgehen soll, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und den entsprechenden Schritt überspringt, andernfalls <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-164"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a2af-165">Dies ist ein optionaler Parameter, und der Standardwert ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-165">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a2af-166">Schreibt den UTF-16-Textwert als einen JSON-Kommentar (in <c>/*..*/</c>).</span><span class="sxs-lookup"><span data-stu-id="4a2af-166">Writes the UTF-16 text value as a JSON comment (within <c>/*..*/</c>).</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-167"><paramref name="value" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="4a2af-167"><paramref name="value" /> is too large.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue (value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4a2af-168">Der UTF-16-codierte Wert, der als UTF-8-transcodierter JSON-Kommentar geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-168">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-169"><see langword="false" />, um anzugeben, dass der Writer davon ausgehen soll, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und den entsprechenden Schritt überspringt, andernfalls <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-169"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a2af-170">Dies ist ein optionaler Parameter, und der Standardwert ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-170">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a2af-171">Schreibt den Zeichenfolgentextwert als einen JSON-Kommentar (in <c>/*..*/</c>).</span><span class="sxs-lookup"><span data-stu-id="4a2af-171">Writes the string text value as a JSON comment (within <c>/*..*/</c>).</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-172"><paramref name="value" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="4a2af-172"><paramref name="value" /> is too large.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndArray">
      <MemberSignature Language="C#" Value="public void WriteEndArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEndArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteEndArray" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEndArray ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEndArray();" />
      <MemberSignature Language="F#" Value="member this.WriteEndArray : unit -&gt; unit" Usage="utf8JsonWriter.WriteEndArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4a2af-173">Schreibt das Ende eines JSON-Arrays.</span><span class="sxs-lookup"><span data-stu-id="4a2af-173">Writes the end of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-174">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-174">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndObject">
      <MemberSignature Language="C#" Value="public void WriteEndObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEndObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteEndObject" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEndObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEndObject();" />
      <MemberSignature Language="F#" Value="member this.WriteEndObject : unit -&gt; unit" Usage="utf8JsonWriter.WriteEndObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4a2af-175">Schreibt das Ende eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-175">Writes the end of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-176">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-176">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (utf8PropertyName As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNull : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteNull (utf8PropertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="4a2af-177">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-177">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-178"><see langword="false" />, um anzugeben, dass der Writer davon ausgehen soll, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und den entsprechenden Schritt überspringt, andernfalls <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-178"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a2af-179">Dies ist ein optionaler Parameter. Der Standardwert ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-179">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a2af-180">Schreibt den Eigenschaftennamen und das JSON-Literal „null“ als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-180">Writes the property name and the JSON literal "null" as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-181"><paramref name="utf8PropertyName" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="4a2af-181"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-182">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-182">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (ReadOnlySpan&lt;char&gt; propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNull : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteNull (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a2af-183">Der UTF-16-codierte Eigenschaftenname des zu transcodierenden und als UTF-8 zu schreibenden JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-183">The UTF-16 encoded property name of the JSON object to transcode and write as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-184"><see langword="false" />, um anzugeben, dass der Writer davon ausgehen soll, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und den entsprechenden Schritt überspringt, andernfalls <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-184"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a2af-185">Dies ist ein optionaler Parameter. Der Standardwert ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-185">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a2af-186">Schreibt den Eigenschaftennamen und das JSON-Literal „null“ als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-186">Writes the property name and the JSON literal "null" as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-187"><paramref name="propertyName" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="4a2af-187"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-188">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-188">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (string propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(string propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNull : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteNull (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a2af-189">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="4a2af-189">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-190"><see langword="false" />, um anzugeben, dass der Writer davon ausgehen soll, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und den entsprechenden Schritt überspringt, andernfalls <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-190"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a2af-191">Dies ist ein optionaler Parameter. Der Standardwert ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-191">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a2af-192">Schreibt den Eigenschaftennamen und das JSON-Literal „null“ als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-192">Writes the property name and the JSON literal "null" as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-193"><paramref name="propertyName" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="4a2af-193"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-194">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-194">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNullValue">
      <MemberSignature Language="C#" Value="public void WriteNullValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNullValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNullValue" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNullValue ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNullValue();" />
      <MemberSignature Language="F#" Value="member this.WriteNullValue : unit -&gt; unit" Usage="utf8JsonWriter.WriteNullValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4a2af-195">Schreibt das JSON-Literal „null“ als ein Element eines JSON-Arrays.</span><span class="sxs-lookup"><span data-stu-id="4a2af-195">Writes the JSON literal "null" as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-196">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-196">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, decimal value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Decimal value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Decimal,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Decimal, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * decimal * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="4a2af-197">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-197">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="4a2af-198">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-198">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-199"><see langword="false" />, um anzugeben, dass der Writer davon ausgehen soll, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und den entsprechenden Schritt überspringt, andernfalls <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-199"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a2af-200">Dies ist ein optionaler Parameter. Der Standardwert ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-200">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a2af-201">Schreibt den Eigenschaftennamen und <see cref="T:System.Decimal" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-201">Writes the property name and <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a2af-202">Schreibt die <see cref="T:System.Decimal" /> über das standardmäßige <see cref="T:System.Buffers.StandardFormat" /> (d.h., ' G').</span><span class="sxs-lookup"><span data-stu-id="4a2af-202">Writes the <see cref="T:System.Decimal" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-203"><paramref name="utf8PropertyName" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="4a2af-203"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-204">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-204">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, double value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, float64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Double, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * double * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="4a2af-205">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-205">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="4a2af-206">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-206">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-207"><see langword="false" />, um anzugeben, dass der Writer davon ausgehen soll, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und den entsprechenden Schritt überspringt, andernfalls <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-207"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a2af-208">Dies ist ein optionaler Parameter. Der Standardwert ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-208">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a2af-209">Schreibt den Eigenschaftennamen und <see cref="T:System.Double" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-209">Writes the property name and <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a2af-210">Schreibt die <see cref="T:System.Double" /> über das standardmäßige <see cref="T:System.Buffers.StandardFormat" /> (d.h., ' G').</span><span class="sxs-lookup"><span data-stu-id="4a2af-210">Writes the <see cref="T:System.Double" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-211"><paramref name="utf8PropertyName" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="4a2af-211"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-212">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-212">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, int value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Integer, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * int * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="4a2af-213">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-213">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="4a2af-214">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-214">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-215"><see langword="false" />, um anzugeben, dass der Writer davon ausgehen soll, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und den entsprechenden Schritt überspringt, andernfalls <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-215"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a2af-216">Dies ist ein optionaler Parameter. Der Standardwert ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-216">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a2af-217">Schreibt den Eigenschaftennamen und <see cref="T:System.Int32" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-217">Writes the property name and <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a2af-218">Schreibt die <see cref="T:System.Int32" /> über das standardmäßige <see cref="T:System.Buffers.StandardFormat" /> (d.h., ' G').</span><span class="sxs-lookup"><span data-stu-id="4a2af-218">Writes the <see cref="T:System.Int32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="4a2af-219">Beispiel: 32767.</span><span class="sxs-lookup"><span data-stu-id="4a2af-219">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-220"><paramref name="utf8PropertyName" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="4a2af-220"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-221">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-221">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, long value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Long, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * int64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="4a2af-222">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-222">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="4a2af-223">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-223">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-224"><see langword="false" />, um anzugeben, dass der Writer davon ausgehen soll, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und den entsprechenden Schritt überspringt, andernfalls <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-224"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a2af-225">Dies ist ein optionaler Parameter. Der Standardwert ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-225">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a2af-226">Schreibt den Eigenschaftennamen und <see cref="T:System.Int64" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-226">Writes the property name and <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a2af-227">Schreibt die <see cref="T:System.Int64" /> über das standardmäßige <see cref="T:System.Buffers.StandardFormat" /> (d.h., ' G').</span><span class="sxs-lookup"><span data-stu-id="4a2af-227">Writes the <see cref="T:System.Int64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="4a2af-228">Beispiel: 32767.</span><span class="sxs-lookup"><span data-stu-id="4a2af-228">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-229"><paramref name="utf8PropertyName" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="4a2af-229"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-230">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-230">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, float value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, float32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Single,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Single, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * single * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="4a2af-231">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-231">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="4a2af-232">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-232">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-233"><see langword="false" />, um anzugeben, dass der Writer davon ausgehen soll, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und den entsprechenden Schritt überspringt, andernfalls <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-233"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a2af-234">Dies ist ein optionaler Parameter. Der Standardwert ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-234">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a2af-235">Schreibt den Eigenschaftennamen und <see cref="T:System.Single" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-235">Writes the property name and <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a2af-236">Schreibt die <see cref="T:System.Single" /> über das standardmäßige <see cref="T:System.Buffers.StandardFormat" /> (d.h., ' G').</span><span class="sxs-lookup"><span data-stu-id="4a2af-236">Writes the <see cref="T:System.Single" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-237"><paramref name="utf8PropertyName" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="4a2af-237"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-238">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-238">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, uint value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, unsigned int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As UInteger, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * uint32 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="4a2af-239">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-239">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="4a2af-240">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-240">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-241"><see langword="false" />, um anzugeben, dass der Writer davon ausgehen soll, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und den entsprechenden Schritt überspringt, andernfalls <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-241"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a2af-242">Dies ist ein optionaler Parameter. Der Standardwert ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-242">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a2af-243">Schreibt den Eigenschaftennamen und <see cref="T:System.UInt32" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-243">Writes the property name and <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a2af-244">Schreibt die <see cref="T:System.UInt32" /> über das standardmäßige <see cref="T:System.Buffers.StandardFormat" /> (d.h., ' G').</span><span class="sxs-lookup"><span data-stu-id="4a2af-244">Writes the <see cref="T:System.UInt32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="4a2af-245">Beispiel: 32767.</span><span class="sxs-lookup"><span data-stu-id="4a2af-245">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-246"><paramref name="utf8PropertyName" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="4a2af-246"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-247">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-247">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ulong value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, unsigned int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As ULong, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * uint64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="4a2af-248">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-248">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="4a2af-249">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-249">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-250"><see langword="false" />, um anzugeben, dass der Writer davon ausgehen soll, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und den entsprechenden Schritt überspringt, andernfalls <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-250"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a2af-251">Dies ist ein optionaler Parameter. Der Standardwert ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-251">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a2af-252">Schreibt den Eigenschaftennamen und <see cref="T:System.UInt64" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-252">Writes the property name and <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a2af-253">Schreibt die <see cref="T:System.UInt64" /> über das standardmäßige <see cref="T:System.Buffers.StandardFormat" /> (d.h., ' G').</span><span class="sxs-lookup"><span data-stu-id="4a2af-253">Writes the <see cref="T:System.UInt64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="4a2af-254">Beispiel: 32767.</span><span class="sxs-lookup"><span data-stu-id="4a2af-254">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-255"><paramref name="utf8PropertyName" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="4a2af-255"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-256">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-256">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, decimal value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Decimal value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Decimal,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Decimal, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * decimal * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a2af-257">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="4a2af-257">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="4a2af-258">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-258">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-259"><see langword="false" />, um anzugeben, dass der Writer davon ausgehen soll, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und den entsprechenden Schritt überspringt, andernfalls <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-259"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a2af-260">Dies ist ein optionaler Parameter. Der Standardwert ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-260">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a2af-261">Schreibt den Eigenschaftennamen und <see cref="T:System.Decimal" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-261">Writes the property name and <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a2af-262">Schreibt die <see cref="T:System.Decimal" /> über das standardmäßige <see cref="T:System.Buffers.StandardFormat" /> (d.h., ' G').</span><span class="sxs-lookup"><span data-stu-id="4a2af-262">Writes the <see cref="T:System.Decimal" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-263"><paramref name="propertyName" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="4a2af-263"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-264">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-264">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, double value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, float64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Double, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * double * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a2af-265">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="4a2af-265">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="4a2af-266">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-266">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-267"><see langword="false" />, um anzugeben, dass der Writer davon ausgehen soll, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und den entsprechenden Schritt überspringt, andernfalls <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-267"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a2af-268">Dies ist ein optionaler Parameter. Der Standardwert ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-268">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a2af-269">Schreibt den Eigenschaftennamen und <see cref="T:System.Double" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-269">Writes the property name and <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a2af-270">Schreibt die <see cref="T:System.Double" /> über das standardmäßige <see cref="T:System.Buffers.StandardFormat" /> (d.h., ' G').</span><span class="sxs-lookup"><span data-stu-id="4a2af-270">Writes the <see cref="T:System.Double" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-271"><paramref name="propertyName" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="4a2af-271"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-272">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-272">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, int value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Integer, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * int * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a2af-273">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="4a2af-273">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="4a2af-274">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-274">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-275"><see langword="false" />, um anzugeben, dass der Writer davon ausgehen soll, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und den entsprechenden Schritt überspringt, andernfalls <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-275"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a2af-276">Dies ist ein optionaler Parameter. Der Standardwert ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-276">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a2af-277">Schreibt den Eigenschaftennamen und <see cref="T:System.Int32" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-277">Writes the property name and <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a2af-278">Schreibt die <see cref="T:System.Int32" /> über das standardmäßige <see cref="T:System.Buffers.StandardFormat" /> (d.h., ' G').</span><span class="sxs-lookup"><span data-stu-id="4a2af-278">Writes the <see cref="T:System.Int32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="4a2af-279">Beispiel: 32767.</span><span class="sxs-lookup"><span data-stu-id="4a2af-279">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-280"><paramref name="propertyName" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="4a2af-280"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-281">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-281">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, long value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Long, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * int64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a2af-282">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="4a2af-282">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="4a2af-283">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-283">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-284"><see langword="false" />, um anzugeben, dass der Writer davon ausgehen soll, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und den entsprechenden Schritt überspringt, andernfalls <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-284"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a2af-285">Dies ist ein optionaler Parameter. Der Standardwert ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-285">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a2af-286">Schreibt den Eigenschaftennamen und <see cref="T:System.Int64" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-286">Writes the property name and <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a2af-287">Schreibt die <see cref="T:System.Int64" /> über das standardmäßige <see cref="T:System.Buffers.StandardFormat" /> (d.h., ' G').</span><span class="sxs-lookup"><span data-stu-id="4a2af-287">Writes the <see cref="T:System.Int64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="4a2af-288">Beispiel: 32767.</span><span class="sxs-lookup"><span data-stu-id="4a2af-288">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-289"><paramref name="propertyName" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="4a2af-289"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-290">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-290">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, float value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, float32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Single,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Single, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * single * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a2af-291">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="4a2af-291">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="4a2af-292">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-292">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-293"><see langword="false" />, um anzugeben, dass der Writer davon ausgehen soll, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und den entsprechenden Schritt überspringt, andernfalls <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-293"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a2af-294">Dies ist ein optionaler Parameter. Der Standardwert ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-294">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a2af-295">Schreibt den Eigenschaftennamen und <see cref="T:System.Single" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-295">Writes the property name and <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a2af-296">Schreibt die <see cref="T:System.Single" /> über das standardmäßige <see cref="T:System.Buffers.StandardFormat" /> (d.h., ' G').</span><span class="sxs-lookup"><span data-stu-id="4a2af-296">Writes the <see cref="T:System.Single" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-297"><paramref name="propertyName" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="4a2af-297"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-298">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-298">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, uint value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, unsigned int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As UInteger, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * uint32 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a2af-299">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="4a2af-299">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="4a2af-300">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-300">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-301"><see langword="false" />, um anzugeben, dass der Writer davon ausgehen soll, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und den entsprechenden Schritt überspringt, andernfalls <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-301"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a2af-302">Dies ist ein optionaler Parameter. Der Standardwert ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-302">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a2af-303">Schreibt den Eigenschaftennamen und <see cref="T:System.UInt32" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-303">Writes the property name and <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a2af-304">Schreibt die <see cref="T:System.UInt32" /> über das standardmäßige <see cref="T:System.Buffers.StandardFormat" /> (d.h., ' G').</span><span class="sxs-lookup"><span data-stu-id="4a2af-304">Writes the <see cref="T:System.UInt32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="4a2af-305">Beispiel: 32767.</span><span class="sxs-lookup"><span data-stu-id="4a2af-305">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-306"><paramref name="propertyName" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="4a2af-306"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-307">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-307">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, ulong value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, unsigned int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As ULong, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * uint64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a2af-308">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="4a2af-308">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="4a2af-309">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-309">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-310"><see langword="false" />, um anzugeben, dass der Writer davon ausgehen soll, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und den entsprechenden Schritt überspringt, andernfalls <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-310"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a2af-311">Dies ist ein optionaler Parameter. Der Standardwert ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-311">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a2af-312">Schreibt den Eigenschaftennamen und <see cref="T:System.UInt64" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-312">Writes the property name and <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a2af-313">Schreibt die <see cref="T:System.UInt64" /> über das standardmäßige <see cref="T:System.Buffers.StandardFormat" /> (d.h., ' G').</span><span class="sxs-lookup"><span data-stu-id="4a2af-313">Writes the <see cref="T:System.UInt64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="4a2af-314">Beispiel: 32767.</span><span class="sxs-lookup"><span data-stu-id="4a2af-314">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-315"><paramref name="propertyName" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="4a2af-315"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-316">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-316">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, decimal value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, valuetype System.Decimal value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Decimal,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Decimal, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * decimal * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a2af-317">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="4a2af-317">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="4a2af-318">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-318">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-319"><see langword="false" />, um anzugeben, dass der Writer davon ausgehen soll, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und den entsprechenden Schritt überspringt, andernfalls <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-319"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a2af-320">Dies ist ein optionaler Parameter. Der Standardwert ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-320">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a2af-321">Schreibt den Eigenschaftennamen und <see cref="T:System.Decimal" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-321">Writes the property name and <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a2af-322">Schreibt die <see cref="T:System.Decimal" /> über das standardmäßige <see cref="T:System.Buffers.StandardFormat" /> (d.h., ' G').</span><span class="sxs-lookup"><span data-stu-id="4a2af-322">Writes the <see cref="T:System.Decimal" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-323"><paramref name="propertyName" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="4a2af-323"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-324">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-324">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, double value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, float64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Double, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * double * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a2af-325">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="4a2af-325">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="4a2af-326">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-326">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-327"><see langword="false" />, um anzugeben, dass der Writer davon ausgehen soll, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und den entsprechenden Schritt überspringt, andernfalls <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-327"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a2af-328">Dies ist ein optionaler Parameter. Der Standardwert ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-328">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a2af-329">Schreibt den Eigenschaftennamen und <see cref="T:System.Double" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-329">Writes the property name and <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a2af-330">Schreibt die <see cref="T:System.Double" /> über das standardmäßige <see cref="T:System.Buffers.StandardFormat" /> (d.h., ' G').</span><span class="sxs-lookup"><span data-stu-id="4a2af-330">Writes the <see cref="T:System.Double" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-331"><paramref name="propertyName" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="4a2af-331"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-332">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-332">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, int value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Integer, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * int * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a2af-333">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="4a2af-333">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="4a2af-334">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-334">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-335"><see langword="false" />, um anzugeben, dass der Writer davon ausgehen soll, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und den entsprechenden Schritt überspringt, andernfalls <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-335"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a2af-336">Dies ist ein optionaler Parameter. Der Standardwert ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-336">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a2af-337">Schreibt den Eigenschaftennamen und <see cref="T:System.Int32" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-337">Writes the property name and <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a2af-338">Schreibt die <see cref="T:System.Int32" /> über das standardmäßige <see cref="T:System.Buffers.StandardFormat" /> (d.h., ' G').</span><span class="sxs-lookup"><span data-stu-id="4a2af-338">Writes the <see cref="T:System.Int32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="4a2af-339">Beispiel: 32767.</span><span class="sxs-lookup"><span data-stu-id="4a2af-339">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-340"><paramref name="propertyName" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="4a2af-340"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-341">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-341">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, long value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Long, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * int64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a2af-342">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="4a2af-342">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="4a2af-343">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-343">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-344"><see langword="false" />, um anzugeben, dass der Writer davon ausgehen soll, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und den entsprechenden Schritt überspringt, andernfalls <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-344"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a2af-345">Dies ist ein optionaler Parameter. Der Standardwert ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-345">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a2af-346">Schreibt den Eigenschaftennamen und <see cref="T:System.Int64" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-346">Writes the property name and <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a2af-347">Schreibt die <see cref="T:System.Int64" /> über das standardmäßige <see cref="T:System.Buffers.StandardFormat" /> (d.h., ' G').</span><span class="sxs-lookup"><span data-stu-id="4a2af-347">Writes the <see cref="T:System.Int64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="4a2af-348">Beispiel: 32767.</span><span class="sxs-lookup"><span data-stu-id="4a2af-348">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-349"><paramref name="propertyName" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="4a2af-349"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-350">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-350">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, float value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, float32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Single,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Single, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * single * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a2af-351">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="4a2af-351">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="4a2af-352">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-352">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-353"><see langword="false" />, um anzugeben, dass der Writer davon ausgehen soll, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und den entsprechenden Schritt überspringt, andernfalls <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-353"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a2af-354">Dies ist ein optionaler Parameter. Der Standardwert ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-354">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a2af-355">Schreibt den Eigenschaftennamen und <see cref="T:System.Single" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-355">Writes the property name and <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a2af-356">Schreibt die <see cref="T:System.Single" /> über das standardmäßige <see cref="T:System.Buffers.StandardFormat" /> (d.h., ' G').</span><span class="sxs-lookup"><span data-stu-id="4a2af-356">Writes the <see cref="T:System.Single" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-357"><paramref name="propertyName" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="4a2af-357"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-358">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-358">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, uint value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, unsigned int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As UInteger, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * uint32 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a2af-359">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="4a2af-359">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="4a2af-360">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-360">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-361"><see langword="false" />, um anzugeben, dass der Writer davon ausgehen soll, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und den entsprechenden Schritt überspringt, andernfalls <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-361"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a2af-362">Dies ist ein optionaler Parameter. Der Standardwert ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-362">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a2af-363">Schreibt den Eigenschaftennamen und <see cref="T:System.UInt32" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-363">Writes the property name and <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a2af-364">Schreibt die <see cref="T:System.UInt32" /> über das standardmäßige <see cref="T:System.Buffers.StandardFormat" /> (d.h., ' G').</span><span class="sxs-lookup"><span data-stu-id="4a2af-364">Writes the <see cref="T:System.UInt32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="4a2af-365">Beispiel: 32767.</span><span class="sxs-lookup"><span data-stu-id="4a2af-365">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-366"><paramref name="propertyName" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="4a2af-366"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-367">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-367">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, ulong value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, unsigned int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As ULong, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * uint64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a2af-368">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="4a2af-368">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="4a2af-369">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-369">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-370"><see langword="false" />, um anzugeben, dass der Writer davon ausgehen soll, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und den entsprechenden Schritt überspringt, andernfalls <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-370"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a2af-371">Dies ist ein optionaler Parameter. Der Standardwert ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-371">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a2af-372">Schreibt den Eigenschaftennamen und <see cref="T:System.UInt64" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-372">Writes the property name and <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a2af-373">Schreibt die <see cref="T:System.UInt64" /> über das standardmäßige <see cref="T:System.Buffers.StandardFormat" /> (d.h., ' G').</span><span class="sxs-lookup"><span data-stu-id="4a2af-373">Writes the <see cref="T:System.UInt64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="4a2af-374">Beispiel: 32767.</span><span class="sxs-lookup"><span data-stu-id="4a2af-374">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-375"><paramref name="propertyName" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="4a2af-375"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-376">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-376">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4a2af-377">Der Wert, der als JSON-Zahl als ein Element eines JSON-Arrays geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-377">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="4a2af-378">Schreibt den <see cref="T:System.Decimal" />-Wert (als JSON-Zahl) als ein Element eines JSON-Arrays.</span><span class="sxs-lookup"><span data-stu-id="4a2af-378">Writes the <see cref="T:System.Decimal" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="4a2af-379">Schreibt die <see cref="T:System.Decimal" /> über das standardmäßige <see cref="T:System.Buffers.StandardFormat" /> (d.h., ' G').</span><span class="sxs-lookup"><span data-stu-id="4a2af-379">Writes the <see cref="T:System.Decimal" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-380">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-380">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : double -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4a2af-381">Der Wert, der als JSON-Zahl als ein Element eines JSON-Arrays geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-381">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="4a2af-382">Schreibt den <see cref="T:System.Double" />-Wert (als JSON-Zahl) als ein Element eines JSON-Arrays.</span><span class="sxs-lookup"><span data-stu-id="4a2af-382">Writes the <see cref="T:System.Double" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="4a2af-383">Schreibt die <see cref="T:System.Double" /> über das standardmäßige <see cref="T:System.Buffers.StandardFormat" /> (d.h., ' G').</span><span class="sxs-lookup"><span data-stu-id="4a2af-383">Writes the <see cref="T:System.Double" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-384">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-384">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : int -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4a2af-385">Der Wert, der als JSON-Zahl als ein Element eines JSON-Arrays geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-385">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="4a2af-386">Schreibt den <see cref="T:System.Int32" />-Wert (als JSON-Zahl) als ein Element eines JSON-Arrays.</span><span class="sxs-lookup"><span data-stu-id="4a2af-386">Writes the <see cref="T:System.Int32" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="4a2af-387">Schreibt die <see cref="T:System.Int32" /> über das standardmäßige <see cref="T:System.Buffers.StandardFormat" /> (d.h., ' G').</span><span class="sxs-lookup"><span data-stu-id="4a2af-387">Writes the <see cref="T:System.Int32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="4a2af-388">Beispiel: 32767.</span><span class="sxs-lookup"><span data-stu-id="4a2af-388">For example, 32767.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-389">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-389">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4a2af-390">Der Wert, der als JSON-Zahl als ein Element eines JSON-Arrays geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-390">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="4a2af-391">Schreibt den <see cref="T:System.Int64" />-Wert (als JSON-Zahl) als ein Element eines JSON-Arrays.</span><span class="sxs-lookup"><span data-stu-id="4a2af-391">Writes the <see cref="T:System.Int64" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="4a2af-392">Schreibt die <see cref="T:System.Int64" /> über das standardmäßige <see cref="T:System.Buffers.StandardFormat" /> (d.h., ' G').</span><span class="sxs-lookup"><span data-stu-id="4a2af-392">Writes the <see cref="T:System.Int64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="4a2af-393">Beispiel: 32767.</span><span class="sxs-lookup"><span data-stu-id="4a2af-393">For example, 32767.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-394">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-394">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : single -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4a2af-395">Der Wert, der als JSON-Zahl als ein Element eines JSON-Arrays geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-395">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="4a2af-396">Schreibt den <see cref="T:System.Single" />-Wert (als JSON-Zahl) als ein Element eines JSON-Arrays.</span><span class="sxs-lookup"><span data-stu-id="4a2af-396">Writes the <see cref="T:System.Single" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="4a2af-397">Schreibt die <see cref="T:System.Single" /> über das standardmäßige <see cref="T:System.Buffers.StandardFormat" /> (d.h., ' G').</span><span class="sxs-lookup"><span data-stu-id="4a2af-397">Writes the <see cref="T:System.Single" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-398">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-398">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4a2af-399">Der Wert, der als JSON-Zahl als ein Element eines JSON-Arrays geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-399">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="4a2af-400">Schreibt den <see cref="T:System.UInt32" />-Wert (als JSON-Zahl) als ein Element eines JSON-Arrays.</span><span class="sxs-lookup"><span data-stu-id="4a2af-400">Writes the <see cref="T:System.UInt32" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="4a2af-401">Schreibt die <see cref="T:System.UInt32" /> über das standardmäßige <see cref="T:System.Buffers.StandardFormat" /> (d.h., ' G').</span><span class="sxs-lookup"><span data-stu-id="4a2af-401">Writes the <see cref="T:System.UInt32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="4a2af-402">Beispiel: 32767.</span><span class="sxs-lookup"><span data-stu-id="4a2af-402">For example, 32767.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-403">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-403">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4a2af-404">Der Wert, der als JSON-Zahl als ein Element eines JSON-Arrays geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-404">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="4a2af-405">Schreibt den <see cref="T:System.UInt64" />-Wert (als JSON-Zahl) als ein Element eines JSON-Arrays.</span><span class="sxs-lookup"><span data-stu-id="4a2af-405">Writes the <see cref="T:System.UInt64" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="4a2af-406">Schreibt die <see cref="T:System.UInt64" /> über das standardmäßige <see cref="T:System.Buffers.StandardFormat" /> (d.h., ' G').</span><span class="sxs-lookup"><span data-stu-id="4a2af-406">Writes the <see cref="T:System.UInt64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="4a2af-407">Beispiel: 32767.</span><span class="sxs-lookup"><span data-stu-id="4a2af-407">For example, 32767.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-408">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-408">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray();" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : unit -&gt; unit" Usage="utf8JsonWriter.WriteStartArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4a2af-409">Schreibt den Anfang eines JSON-Arrays.</span><span class="sxs-lookup"><span data-stu-id="4a2af-409">Writes the beginning of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-410">Die Tiefe des JSON-Codes hat die maximale Tiefe von 1000 überschritten.</span><span class="sxs-lookup"><span data-stu-id="4a2af-410">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="4a2af-411">- oder -</span><span class="sxs-lookup"><span data-stu-id="4a2af-411">-or-</span></span>

<span data-ttu-id="4a2af-412">Wenn dies zum Schreiben von ungültigem JSON führt (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-412">if this would result in an invalid JSON to be written (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (utf8PropertyName As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartArray (utf8PropertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="4a2af-413">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Arrays.</span><span class="sxs-lookup"><span data-stu-id="4a2af-413">The UTF-8 encoded property name of the JSON array to be written.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-414"><see langword="false" />, um anzugeben, dass der Writer davon ausgehen soll, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und den entsprechenden Schritt überspringt, andernfalls <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-414"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a2af-415">Dies ist ein optionaler Parameter. Der Standardwert ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-415">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a2af-416">Schreibt den Anfang eines JSON-Arrays mit einem Eigenschaftennamen als Schlüssel.</span><span class="sxs-lookup"><span data-stu-id="4a2af-416">Writes the beginning of a JSON array with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-417"><paramref name="utf8PropertyName" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="4a2af-417"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-418">Die Tiefe des JSON-Codes hat die maximale Tiefe von 1000 überschritten.</span><span class="sxs-lookup"><span data-stu-id="4a2af-418">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="4a2af-419">- oder -</span><span class="sxs-lookup"><span data-stu-id="4a2af-419">-or-</span></span>

<span data-ttu-id="4a2af-420">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-420">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (ReadOnlySpan&lt;char&gt; propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartArray (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a2af-421">Der UTF-16-codierte Eigenschaftenname des JSON-Arrays, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="4a2af-421">The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-422"><see langword="false" />, um anzugeben, dass der Writer davon ausgehen soll, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und den entsprechenden Schritt überspringt, andernfalls <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-422"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a2af-423">Dies ist ein optionaler Parameter. Der Standardwert ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-423">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a2af-424">Schreibt den Anfang eines JSON-Arrays mit einem Eigenschaftennamen als Schlüssel.</span><span class="sxs-lookup"><span data-stu-id="4a2af-424">Writes the beginning of a JSON array with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-425"><paramref name="propertyName" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="4a2af-425"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-426">Die Tiefe des JSON-Codes hat die maximale Tiefe von 1000 überschritten.</span><span class="sxs-lookup"><span data-stu-id="4a2af-426">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="4a2af-427">- oder -</span><span class="sxs-lookup"><span data-stu-id="4a2af-427">-or-</span></span>

<span data-ttu-id="4a2af-428">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-428">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (string propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(string propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartArray (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a2af-429">Der UTF-16-codierte Eigenschaftenname des JSON-Arrays, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="4a2af-429">The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-430"><see langword="false" />, um anzugeben, dass der Writer davon ausgehen soll, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und den entsprechenden Schritt überspringt, andernfalls <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-430"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a2af-431">Dies ist ein optionaler Parameter. Der Standardwert ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-431">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a2af-432">Schreibt den Anfang eines JSON-Arrays mit einem Eigenschaftennamen als Schlüssel.</span><span class="sxs-lookup"><span data-stu-id="4a2af-432">Writes the beginning of a JSON array with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-433"><paramref name="propertyName" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="4a2af-433"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-434">Die Tiefe des JSON-Codes hat die maximale Tiefe von 1000 überschritten.</span><span class="sxs-lookup"><span data-stu-id="4a2af-434">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="4a2af-435">- oder -</span><span class="sxs-lookup"><span data-stu-id="4a2af-435">-or-</span></span>

<span data-ttu-id="4a2af-436">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-436">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject();" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : unit -&gt; unit" Usage="utf8JsonWriter.WriteStartObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4a2af-437">Schreibt den Anfang eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-437">Writes the beginning of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-438">Die Tiefe des JSON-Codes hat die maximale Tiefe von 1000 überschritten.</span><span class="sxs-lookup"><span data-stu-id="4a2af-438">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="4a2af-439">- oder -</span><span class="sxs-lookup"><span data-stu-id="4a2af-439">-or-</span></span>

<span data-ttu-id="4a2af-440">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-440">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (utf8PropertyName As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartObject (utf8PropertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="4a2af-441">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-441">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-442"><see langword="false" />, um anzugeben, dass der Writer davon ausgehen soll, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und den entsprechenden Schritt überspringt, andernfalls <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-442"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a2af-443">Dies ist ein optionaler Parameter. Der Standardwert ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-443">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a2af-444">Schreibt den Anfang eines JSON-Objekts mit einem Eigenschaftennamen als Schlüssel.</span><span class="sxs-lookup"><span data-stu-id="4a2af-444">Writes the beginning of a JSON object with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-445"><paramref name="utf8PropertyName" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="4a2af-445"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-446">Die Tiefe des JSON-Codes hat die maximale Tiefe von 1000 überschritten.</span><span class="sxs-lookup"><span data-stu-id="4a2af-446">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="4a2af-447">- oder -</span><span class="sxs-lookup"><span data-stu-id="4a2af-447">-or-</span></span>

<span data-ttu-id="4a2af-448">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-448">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (ReadOnlySpan&lt;char&gt; propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartObject (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a2af-449">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="4a2af-449">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-450"><see langword="false" />, um anzugeben, dass der Writer davon ausgehen soll, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und den entsprechenden Schritt überspringt, andernfalls <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-450"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a2af-451">Dies ist ein optionaler Parameter. Der Standardwert ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-451">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a2af-452">Schreibt den Anfang eines JSON-Objekts mit einem Eigenschaftennamen als Schlüssel.</span><span class="sxs-lookup"><span data-stu-id="4a2af-452">Writes the beginning of a JSON object with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-453"><paramref name="propertyName" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="4a2af-453"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-454">Die Tiefe des JSON-Codes hat die maximale Tiefe von 1000 überschritten.</span><span class="sxs-lookup"><span data-stu-id="4a2af-454">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="4a2af-455">- oder -</span><span class="sxs-lookup"><span data-stu-id="4a2af-455">-or-</span></span>

<span data-ttu-id="4a2af-456">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-456">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (string propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(string propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartObject (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a2af-457">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="4a2af-457">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-458"><see langword="false" />, um anzugeben, dass der Writer davon ausgehen soll, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und den entsprechenden Schritt überspringt, andernfalls <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-458"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a2af-459">Dies ist ein optionaler Parameter. Der Standardwert ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-459">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a2af-460">Schreibt den Anfang eines JSON-Objekts mit einem Eigenschaftennamen als Schlüssel.</span><span class="sxs-lookup"><span data-stu-id="4a2af-460">Writes the beginning of a JSON object with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-461"><paramref name="propertyName" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="4a2af-461"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-462">Die Tiefe des JSON-Codes hat die maximale Tiefe von 1000 überschritten.</span><span class="sxs-lookup"><span data-stu-id="4a2af-462">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="4a2af-463">- oder -</span><span class="sxs-lookup"><span data-stu-id="4a2af-463">-or-</span></span>

<span data-ttu-id="4a2af-464">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-464">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, DateTime value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.DateTime value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTime,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As DateTime, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * DateTime * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="4a2af-465">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-465">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="4a2af-466">Der Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-466">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-467"><see langword="false" />, um anzugeben, dass der Writer davon ausgehen soll, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und den entsprechenden Schritt überspringt, andernfalls <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-467"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a2af-468">Dies ist ein optionaler Parameter. Der Standardwert ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-468">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a2af-469">Schreibt den Eigenschaftennamen und <see cref="T:System.DateTime" />-Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-469">Writes the property name and <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a2af-470">Schreibt die <see cref="T:System.DateTime" /> mithilfe der zurückführbar ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span><span class="sxs-lookup"><span data-stu-id="4a2af-470">Writes the <see cref="T:System.DateTime" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="4a2af-471">Z.B. 2017-06-12T05:30:45.7680000.</span><span class="sxs-lookup"><span data-stu-id="4a2af-471">For example, 2017-06-12T05:30:45.7680000.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-472"><paramref name="utf8PropertyName" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="4a2af-472"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-473">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-473">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, DateTimeOffset value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.DateTimeOffset value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTimeOffset,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As DateTimeOffset, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * DateTimeOffset * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="4a2af-474">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-474">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="4a2af-475">Der Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-475">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-476"><see langword="false" />, um anzugeben, dass der Writer davon ausgehen soll, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und den entsprechenden Schritt überspringt, andernfalls <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-476"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a2af-477">Dies ist ein optionaler Parameter. Der Standardwert ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-477">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a2af-478">Schreibt den Eigenschaftennamen und <see cref="T:System.DateTimeOffset" />-Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-478">Writes the property name and <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a2af-479">Schreibt die <see cref="T:System.DateTimeOffset" /> mithilfe der zurückführbar ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span><span class="sxs-lookup"><span data-stu-id="4a2af-479">Writes the <see cref="T:System.DateTimeOffset" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="4a2af-480">Z.B. 2017-06-12T05:30:45.7680000-07:00.</span><span class="sxs-lookup"><span data-stu-id="4a2af-480">For example, 2017-06-12T05:30:45.7680000-07:00.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-481"><paramref name="utf8PropertyName" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="4a2af-481"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-482">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-482">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, Guid value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Guid value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Guid,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As Guid, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * Guid * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Guid" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="4a2af-483">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-483">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="4a2af-484">Der Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-484">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-485"><see langword="false" />, um anzugeben, dass der Writer davon ausgehen soll, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und den entsprechenden Schritt überspringt, andernfalls <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-485"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a2af-486">Dies ist ein optionaler Parameter. Der Standardwert ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-486">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a2af-487">Schreibt den Eigenschaftennamen und <see cref="T:System.Guid" />-Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-487">Writes the property name and <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a2af-488">Schreibt die <see cref="T:System.Guid" /> über das standardmäßige <see cref="T:System.Buffers.StandardFormat" /> (d. h. hatte "), wie das Formular: Nnnnnnnn-Nnnn-Nnnn-Nnnn-Nnnnnnnnnnnn.</span><span class="sxs-lookup"><span data-stu-id="4a2af-488">Writes the <see cref="T:System.Guid" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-489"><paramref name="utf8PropertyName" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="4a2af-489"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-490">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-490">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="4a2af-491">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-491">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="4a2af-492">Der UTF-8-codierte Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-492">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-493">Wenn dieser auf „false“ gesetzt ist, geht der Writer davon aus, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und überspringt den entsprechenden Schritt.</span><span class="sxs-lookup"><span data-stu-id="4a2af-493">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="4a2af-494">Der Wert ist immer mit Escapezeichen versehen.</span><span class="sxs-lookup"><span data-stu-id="4a2af-494">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="4a2af-495">Schreibt den UTF-8-Eigenschaftennamen und UTF-8-Textwert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-495">Writes the UTF-8 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-496">Wird ausgelöst, wenn der angegebene Eigenschaftenname oder Wert zu groß ist.</span><span class="sxs-lookup"><span data-stu-id="4a2af-496">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-497">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-497">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="4a2af-498">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-498">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="4a2af-499">Der UTF-16-codierte Wert, der als UTF-8-transcodierte JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-499">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-500">Wenn dieser auf „false“ gesetzt ist, geht der Writer davon aus, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und überspringt den entsprechenden Schritt.</span><span class="sxs-lookup"><span data-stu-id="4a2af-500">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="4a2af-501">Der Wert ist immer mit Escapezeichen versehen.</span><span class="sxs-lookup"><span data-stu-id="4a2af-501">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="4a2af-502">Schreibt den UTF-8-Eigenschaftennamen und UTF-16-Textwert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-502">Writes the UTF-8 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-503">Wird ausgelöst, wenn der angegebene Eigenschaftenname oder Wert zu groß ist.</span><span class="sxs-lookup"><span data-stu-id="4a2af-503">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-504">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-504">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * string * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="4a2af-505">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-505">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="4a2af-506">Der UTF-16-codierte Wert, der als UTF-8-transcodierte JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-506">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-507">Wenn dieser auf „false“ gesetzt ist, geht der Writer davon aus, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und überspringt den entsprechenden Schritt.</span><span class="sxs-lookup"><span data-stu-id="4a2af-507">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="4a2af-508">Der Wert ist immer mit Escapezeichen versehen.</span><span class="sxs-lookup"><span data-stu-id="4a2af-508">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="4a2af-509">Schreibt den UTF-8-Eigenschaftennamen und Zeichenfolgentextwert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-509">Writes the UTF-8 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-510">Wird ausgelöst, wenn der angegebene Eigenschaftenname oder Wert zu groß ist.</span><span class="sxs-lookup"><span data-stu-id="4a2af-510">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-511">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-511">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, DateTime value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.DateTime value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTime,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As DateTime, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * DateTime * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a2af-512">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="4a2af-512">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="4a2af-513">Der Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-513">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-514"><see langword="false" />, um anzugeben, dass der Writer davon ausgehen soll, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und den entsprechenden Schritt überspringt, andernfalls <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-514"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a2af-515">Dies ist ein optionaler Parameter. Der Standardwert ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-515">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a2af-516">Schreibt den Eigenschaftennamen und <see cref="T:System.DateTime" />-Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-516">Writes the property name and <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a2af-517">Schreibt die <see cref="T:System.DateTime" /> mithilfe der zurückführbar ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span><span class="sxs-lookup"><span data-stu-id="4a2af-517">Writes the <see cref="T:System.DateTime" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="4a2af-518">Z.B. 2017-06-12T05:30:45.7680000.</span><span class="sxs-lookup"><span data-stu-id="4a2af-518">For example, 2017-06-12T05:30:45.7680000.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-519"><paramref name="propertyName" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="4a2af-519"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-520">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-520">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, DateTimeOffset value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.DateTimeOffset value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTimeOffset,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As DateTimeOffset, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * DateTimeOffset * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a2af-521">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="4a2af-521">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="4a2af-522">Der Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-522">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-523"><see langword="false" />, um anzugeben, dass der Writer davon ausgehen soll, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und den entsprechenden Schritt überspringt, andernfalls <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-523"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a2af-524">Dies ist ein optionaler Parameter. Der Standardwert ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-524">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a2af-525">Schreibt den Eigenschaftennamen und <see cref="T:System.DateTimeOffset" />-Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-525">Writes the property name and <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a2af-526">Schreibt die <see cref="T:System.DateTimeOffset" /> mithilfe der zurückführbar ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span><span class="sxs-lookup"><span data-stu-id="4a2af-526">Writes the <see cref="T:System.DateTimeOffset" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="4a2af-527">Z.B. 2017-06-12T05:30:45.7680000-07:00.</span><span class="sxs-lookup"><span data-stu-id="4a2af-527">For example, 2017-06-12T05:30:45.7680000-07:00.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-528"><paramref name="propertyName" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="4a2af-528"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-529">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-529">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, Guid value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Guid value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Guid,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As Guid, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * Guid * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Guid" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a2af-530">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="4a2af-530">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="4a2af-531">Der Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-531">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-532"><see langword="false" />, um anzugeben, dass der Writer davon ausgehen soll, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und den entsprechenden Schritt überspringt, andernfalls <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-532"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a2af-533">Dies ist ein optionaler Parameter. Der Standardwert ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-533">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a2af-534">Schreibt den Eigenschaftennamen und <see cref="T:System.Guid" />-Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-534">Writes the property name and <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a2af-535">Schreibt die <see cref="T:System.Guid" /> über das standardmäßige <see cref="T:System.Buffers.StandardFormat" /> (d. h. hatte "), wie das Formular: Nnnnnnnn-Nnnn-Nnnn-Nnnn-Nnnnnnnnnnnn.</span><span class="sxs-lookup"><span data-stu-id="4a2af-535">Writes the <see cref="T:System.Guid" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-536"><paramref name="propertyName" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="4a2af-536"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-537">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-537">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a2af-538">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="4a2af-538">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="4a2af-539">Der UTF-8-codierte Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-539">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-540">Wenn dieser auf „false“ gesetzt ist, geht der Writer davon aus, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und überspringt den entsprechenden Schritt.</span><span class="sxs-lookup"><span data-stu-id="4a2af-540">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="4a2af-541">Der Wert ist immer mit Escapezeichen versehen.</span><span class="sxs-lookup"><span data-stu-id="4a2af-541">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="4a2af-542">Schreibt den UTF-16-Eigenschaftennamen und UTF-8-Textwert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-542">Writes the UTF-16 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-543">Wird ausgelöst, wenn der angegebene Eigenschaftenname oder Wert zu groß ist.</span><span class="sxs-lookup"><span data-stu-id="4a2af-543">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-544">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-544">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a2af-545">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="4a2af-545">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="4a2af-546">Der UTF-16-codierte Wert, der als UTF-8-transcodierte JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-546">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-547">Wenn dieser auf „false“ gesetzt ist, geht der Writer davon aus, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und überspringt den entsprechenden Schritt.</span><span class="sxs-lookup"><span data-stu-id="4a2af-547">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="4a2af-548">Der Wert ist immer mit Escapezeichen versehen.</span><span class="sxs-lookup"><span data-stu-id="4a2af-548">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="4a2af-549">Schreibt den UTF-16-Eigenschaftennamen und UTF-16-Textwert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-549">Writes the UTF-16 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-550">Wird ausgelöst, wenn der angegebene Eigenschaftenname oder Wert zu groß ist.</span><span class="sxs-lookup"><span data-stu-id="4a2af-550">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-551">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-551">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * string * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a2af-552">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="4a2af-552">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="4a2af-553">Der UTF-16-codierte Wert, der als UTF-8-transcodierte JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-553">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-554">Wenn dieser auf „false“ gesetzt ist, geht der Writer davon aus, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und überspringt den entsprechenden Schritt.</span><span class="sxs-lookup"><span data-stu-id="4a2af-554">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="4a2af-555">Der Wert ist immer mit Escapezeichen versehen.</span><span class="sxs-lookup"><span data-stu-id="4a2af-555">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="4a2af-556">Schreibt den UTF-16-Eigenschaftennamen und Zeichenfolgentextwert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-556">Writes the UTF-16 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-557">Wird ausgelöst, wenn der angegebene Eigenschaftenname oder Wert zu groß ist.</span><span class="sxs-lookup"><span data-stu-id="4a2af-557">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-558">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-558">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, DateTime value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.DateTime value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTime,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As DateTime, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * DateTime * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a2af-559">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="4a2af-559">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="4a2af-560">Der Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-560">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-561"><see langword="false" />, um anzugeben, dass der Writer davon ausgehen soll, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und den entsprechenden Schritt überspringt, andernfalls <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-561"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a2af-562">Dies ist ein optionaler Parameter. Der Standardwert ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-562">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a2af-563">Schreibt den Eigenschaftennamen und <see cref="T:System.DateTime" />-Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-563">Writes the property name and <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a2af-564">Schreibt die <see cref="T:System.DateTime" /> mithilfe der zurückführbar ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span><span class="sxs-lookup"><span data-stu-id="4a2af-564">Writes the <see cref="T:System.DateTime" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="4a2af-565">Z.B. 2017-06-12T05:30:45.7680000.</span><span class="sxs-lookup"><span data-stu-id="4a2af-565">For example, 2017-06-12T05:30:45.7680000.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-566"><paramref name="propertyName" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="4a2af-566"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-567">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-567">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, DateTimeOffset value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.DateTimeOffset value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTimeOffset,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As DateTimeOffset, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * DateTimeOffset * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a2af-568">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="4a2af-568">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="4a2af-569">Der Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-569">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-570"><see langword="false" />, um anzugeben, dass der Writer davon ausgehen soll, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und den entsprechenden Schritt überspringt, andernfalls <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-570"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a2af-571">Dies ist ein optionaler Parameter. Der Standardwert ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-571">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a2af-572">Schreibt den Eigenschaftennamen und <see cref="T:System.DateTimeOffset" />-Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-572">Writes the property name and <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a2af-573">Schreibt die <see cref="T:System.DateTimeOffset" /> mithilfe der zurückführbar ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span><span class="sxs-lookup"><span data-stu-id="4a2af-573">Writes the <see cref="T:System.DateTimeOffset" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="4a2af-574">Z.B. 2017-06-12T05:30:45.7680000-07:00.</span><span class="sxs-lookup"><span data-stu-id="4a2af-574">For example, 2017-06-12T05:30:45.7680000-07:00.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-575"><paramref name="propertyName" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="4a2af-575"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-576">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-576">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, Guid value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.Guid value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Guid,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As Guid, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * Guid * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Guid" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a2af-577">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="4a2af-577">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="4a2af-578">Der Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-578">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-579"><see langword="false" />, um anzugeben, dass der Writer davon ausgehen soll, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und den entsprechenden Schritt überspringt, andernfalls <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-579"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a2af-580">Dies ist ein optionaler Parameter. Der Standardwert ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-580">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a2af-581">Schreibt den Eigenschaftennamen und <see cref="T:System.Guid" />-Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-581">Writes the property name and <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="4a2af-582">Schreibt die <see cref="T:System.Guid" /> über das standardmäßige <see cref="T:System.Buffers.StandardFormat" /> (d. h. hatte "), wie das Formular: Nnnnnnnn-Nnnn-Nnnn-Nnnn-Nnnnnnnnnnnn.</span><span class="sxs-lookup"><span data-stu-id="4a2af-582">Writes the <see cref="T:System.Guid" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-583"><paramref name="propertyName" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="4a2af-583"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-584">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-584">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a2af-585">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="4a2af-585">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="4a2af-586">Der UTF-8-codierte Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-586">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-587">Wenn dieser auf „false“ gesetzt ist, geht der Writer davon aus, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und überspringt den entsprechenden Schritt.</span><span class="sxs-lookup"><span data-stu-id="4a2af-587">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="4a2af-588">Der Wert ist immer mit Escapezeichen versehen.</span><span class="sxs-lookup"><span data-stu-id="4a2af-588">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="4a2af-589">Schreibt den Eigenschaftennamen und UTF-8-Textwert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-589">Writes the property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-590">Wird ausgelöst, wenn der angegebene Eigenschaftenname oder Wert zu groß ist.</span><span class="sxs-lookup"><span data-stu-id="4a2af-590">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-591">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-591">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a2af-592">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="4a2af-592">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="4a2af-593">Der UTF-16-codierte Wert, der als UTF-8-transcodierte JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-593">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-594">Wenn dieser auf „false“ gesetzt ist, geht der Writer davon aus, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und überspringt den entsprechenden Schritt.</span><span class="sxs-lookup"><span data-stu-id="4a2af-594">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="4a2af-595">Der Wert ist immer mit Escapezeichen versehen.</span><span class="sxs-lookup"><span data-stu-id="4a2af-595">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="4a2af-596">Schreibt den Eigenschaftennamen und UTF-16-Textwert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-596">Writes the property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-597">Wird ausgelöst, wenn der angegebene Eigenschaftenname oder Wert zu groß ist.</span><span class="sxs-lookup"><span data-stu-id="4a2af-597">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-598">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-598">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * string * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="4a2af-599">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</span><span class="sxs-lookup"><span data-stu-id="4a2af-599">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="4a2af-600">Der UTF-16-codierte Wert, der als UTF-8-transcodierte JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-600">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-601">Wenn dieser auf „false“ gesetzt ist, geht der Writer davon aus, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und überspringt den entsprechenden Schritt.</span><span class="sxs-lookup"><span data-stu-id="4a2af-601">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="4a2af-602">Der Wert ist immer mit Escapezeichen versehen.</span><span class="sxs-lookup"><span data-stu-id="4a2af-602">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="4a2af-603">Schreibt den Eigenschaftennamen und Zeichenfolgentextwert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</span><span class="sxs-lookup"><span data-stu-id="4a2af-603">Writes the property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-604">Wird ausgelöst, wenn der angegebene Eigenschaftenname oder Wert zu groß ist.</span><span class="sxs-lookup"><span data-stu-id="4a2af-604">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-605">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-605">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : DateTime -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4a2af-606">Der Wert, der als JSON-Zeichenfolge als ein Element eines JSON-Arrays geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-606">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="4a2af-607">Schreibt den <see cref="T:System.DateTime" />-Wert (als JSON-Zeichenfolge) als ein Element eines JSON-Arrays.</span><span class="sxs-lookup"><span data-stu-id="4a2af-607">Writes the <see cref="T:System.DateTime" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="4a2af-608">Schreibt die <see cref="T:System.DateTime" /> mithilfe der zurückführbar ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span><span class="sxs-lookup"><span data-stu-id="4a2af-608">Writes the <see cref="T:System.DateTime" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="4a2af-609">Z.B. 2017-06-12T05:30:45.7680000.</span><span class="sxs-lookup"><span data-stu-id="4a2af-609">For example, 2017-06-12T05:30:45.7680000.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-610">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-610">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4a2af-611">Der Wert, der als JSON-Zeichenfolge als ein Element eines JSON-Arrays geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-611">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="4a2af-612">Schreibt den <see cref="T:System.DateTimeOffset" />-Wert (als JSON-Zeichenfolge) als ein Element eines JSON-Arrays.</span><span class="sxs-lookup"><span data-stu-id="4a2af-612">Writes the <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="4a2af-613">Schreibt die <see cref="T:System.DateTimeOffset" /> mithilfe der zurückführbar ('O') <see cref="T:System.Buffers.StandardFormat" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-613">Writes the <see cref="T:System.DateTimeOffset" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" />.</span></span> <span data-ttu-id="4a2af-614">Z.B. 2017-06-12T05:30:45.7680000-07:00.</span><span class="sxs-lookup"><span data-stu-id="4a2af-614">For example, 2017-06-12T05:30:45.7680000-07:00.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-615">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-615">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : Guid -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4a2af-616">Der Wert, der als JSON-Zeichenfolge als ein Element eines JSON-Arrays geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-616">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="4a2af-617">Schreibt den <see cref="T:System.Guid" />-Wert (als JSON-Zeichenfolge) als ein Element eines JSON-Arrays.</span><span class="sxs-lookup"><span data-stu-id="4a2af-617">Writes the <see cref="T:System.Guid" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="4a2af-618">Schreibt die <see cref="T:System.Guid" /> über das standardmäßige <see cref="T:System.Buffers.StandardFormat" /> (d. h. hatte "), wie das Formular: Nnnnnnnn-Nnnn-Nnnn-Nnnn-Nnnnnnnnnnnn.</span><span class="sxs-lookup"><span data-stu-id="4a2af-618">Writes the <see cref="T:System.Guid" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-619">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-619">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStringValue (utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8Value"><span data-ttu-id="4a2af-620">Der UTF-8-codierte Wert, der als JSON-Zeichenfolgenelement eines JSON-Arrays geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-620">The UTF-8 encoded value to be written as a JSON string element of a JSON array.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-621"><see langword="false" />, um anzugeben, dass der Writer davon ausgehen soll, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und den entsprechenden Schritt überspringt, andernfalls <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-621"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a2af-622">Dies ist ein optionaler Parameter, und der Standardwert ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-622">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a2af-623">Schreibt den UTF-8-Textwert (als JSON-Zeichenfolge) als ein Element eines JSON-Arrays.</span><span class="sxs-lookup"><span data-stu-id="4a2af-623">Writes the UTF-8 text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-624"><paramref name="utf8Value" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="4a2af-624"><paramref name="utf8Value" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-625">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-625">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStringValue (value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4a2af-626">Der UTF-16-codierte Wert, der als UTF-8-transcodiertes JSON-Zeichenfolgenelement eines JSON-Arrays geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-626">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-627"><see langword="false" />, um anzugeben, dass der Writer davon ausgehen soll, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und den entsprechenden Schritt überspringt, andernfalls <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-627"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a2af-628">Dies ist ein optionaler Parameter, und der Standardwert ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-628">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a2af-629">Schreibt den UTF-16-Textwert (als JSON-Zeichenfolge) als ein Element eines JSON-Arrays.</span><span class="sxs-lookup"><span data-stu-id="4a2af-629">Writes the UTF-16 text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-630"><paramref name="value" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="4a2af-630"><paramref name="value" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-631">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-631">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteStringValue (value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="4a2af-632">Der UTF-16-codierte Wert, der als UTF-8-transcodiertes JSON-Zeichenfolgenelement eines JSON-Arrays geschrieben werden soll.</span><span class="sxs-lookup"><span data-stu-id="4a2af-632">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</span></span></param>
        <param name="escape"><span data-ttu-id="4a2af-633"><see langword="false" />, um anzugeben, dass der Writer davon ausgehen soll, dass der Eigenschaftenname ordnungsgemäß mit Escapezeichen versehen ist, und den entsprechenden Schritt überspringt, andernfalls <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-633"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="4a2af-634">Dies ist ein optionaler Parameter, und der Standardwert ist <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="4a2af-634">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="4a2af-635">Schreibt den Zeichenfolgentextwert (als JSON-Zeichenfolge) als ein Element eines JSON-Arrays.</span><span class="sxs-lookup"><span data-stu-id="4a2af-635">Writes the string text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4a2af-636"><paramref name="value" /> ist zu groß.</span><span class="sxs-lookup"><span data-stu-id="4a2af-636"><paramref name="value" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4a2af-637">Die zu schreibenden JSON-Daten wären ungültiges JSON (während die Überprüfung aktiviert ist).</span><span class="sxs-lookup"><span data-stu-id="4a2af-637">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
